begin_unit
begin_package
DECL|package|org.apache.lucene.search.suggest.document
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|document
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|synonym
operator|.
name|SynonymFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|synonym
operator|.
name|SynonymMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PayloadAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TypeAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|CompletionTokenStreamTest
specifier|public
class|class
name|CompletionTokenStreamTest
extends|extends
name|BaseTokenStreamTestCase
block|{
annotation|@
name|Test
DECL|method|testBasic
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|Tokenizer
name|tokenStream
init|=
operator|new
name|MockTokenizer
argument_list|(
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|input
init|=
literal|"mykeyword"
decl_stmt|;
name|BytesRef
name|payload
init|=
operator|new
name|BytesRef
argument_list|(
literal|"payload"
argument_list|)
decl_stmt|;
name|tokenStream
operator|.
name|setReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
name|CompletionTokenStream
name|completionTokenStream
init|=
operator|new
name|CompletionTokenStream
argument_list|(
name|tokenStream
argument_list|)
decl_stmt|;
name|completionTokenStream
operator|.
name|setPayload
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|PayloadAttrToTypeAttrFilter
name|stream
init|=
operator|new
name|PayloadAttrToTypeAttrFilter
argument_list|(
name|completionTokenStream
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|stream
argument_list|,
operator|new
name|String
index|[]
block|{
name|input
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|payload
operator|.
name|utf8ToString
argument_list|()
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithNoPreserveSep
specifier|public
name|void
name|testWithNoPreserveSep
parameter_list|()
throws|throws
name|Exception
block|{
name|Tokenizer
name|tokenStream
init|=
operator|new
name|MockTokenizer
argument_list|(
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|input
init|=
literal|"mykeyword another keyword"
decl_stmt|;
name|BytesRef
name|payload
init|=
operator|new
name|BytesRef
argument_list|(
literal|"payload"
argument_list|)
decl_stmt|;
name|tokenStream
operator|.
name|setReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
name|CompletionTokenStream
name|completionTokenStream
init|=
operator|new
name|CompletionTokenStream
argument_list|(
name|tokenStream
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|completionTokenStream
operator|.
name|setPayload
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|PayloadAttrToTypeAttrFilter
name|stream
init|=
operator|new
name|PayloadAttrToTypeAttrFilter
argument_list|(
name|completionTokenStream
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|stream
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mykeywordanotherkeyword"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|payload
operator|.
name|utf8ToString
argument_list|()
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithMultipleTokens
specifier|public
name|void
name|testWithMultipleTokens
parameter_list|()
throws|throws
name|Exception
block|{
name|Tokenizer
name|tokenStream
init|=
operator|new
name|MockTokenizer
argument_list|(
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|input
init|=
literal|"mykeyword another keyword"
decl_stmt|;
name|tokenStream
operator|.
name|setReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
name|BytesRef
name|payload
init|=
operator|new
name|BytesRef
argument_list|(
literal|"payload"
argument_list|)
decl_stmt|;
name|CompletionTokenStream
name|completionTokenStream
init|=
operator|new
name|CompletionTokenStream
argument_list|(
name|tokenStream
argument_list|)
decl_stmt|;
name|completionTokenStream
operator|.
name|setPayload
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|PayloadAttrToTypeAttrFilter
name|stream
init|=
operator|new
name|PayloadAttrToTypeAttrFilter
argument_list|(
name|completionTokenStream
argument_list|)
decl_stmt|;
name|CharsRefBuilder
name|builder
init|=
operator|new
name|CharsRefBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"mykeyword"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
operator|(
operator|(
name|char
operator|)
name|CompletionAnalyzer
operator|.
name|SEP_LABEL
operator|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"another"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
operator|(
operator|(
name|char
operator|)
name|CompletionAnalyzer
operator|.
name|SEP_LABEL
operator|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"keyword"
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|stream
argument_list|,
operator|new
name|String
index|[]
block|{
name|builder
operator|.
name|toCharsRef
argument_list|()
operator|.
name|toString
argument_list|()
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|payload
operator|.
name|utf8ToString
argument_list|()
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithSynonym
specifier|public
name|void
name|testWithSynonym
parameter_list|()
throws|throws
name|Exception
block|{
name|SynonymMap
operator|.
name|Builder
name|builder
init|=
operator|new
name|SynonymMap
operator|.
name|Builder
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|CharsRef
argument_list|(
literal|"mykeyword"
argument_list|)
argument_list|,
operator|new
name|CharsRef
argument_list|(
literal|"mysynonym"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Tokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|(
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|tokenizer
operator|.
name|setReader
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"mykeyword"
argument_list|)
argument_list|)
expr_stmt|;
name|SynonymFilter
name|filter
init|=
operator|new
name|SynonymFilter
argument_list|(
name|tokenizer
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|CompletionTokenStream
name|completionTokenStream
init|=
operator|new
name|CompletionTokenStream
argument_list|(
name|filter
argument_list|)
decl_stmt|;
name|BytesRef
name|payload
init|=
operator|new
name|BytesRef
argument_list|(
literal|"payload"
argument_list|)
decl_stmt|;
name|completionTokenStream
operator|.
name|setPayload
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|PayloadAttrToTypeAttrFilter
name|stream
init|=
operator|new
name|PayloadAttrToTypeAttrFilter
argument_list|(
name|completionTokenStream
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|stream
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mykeyword"
block|,
literal|"mysynonym"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|payload
operator|.
name|utf8ToString
argument_list|()
block|,
name|payload
operator|.
name|utf8ToString
argument_list|()
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithSynonyms
specifier|public
name|void
name|testWithSynonyms
parameter_list|()
throws|throws
name|Exception
block|{
name|SynonymMap
operator|.
name|Builder
name|builder
init|=
operator|new
name|SynonymMap
operator|.
name|Builder
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|CharsRef
argument_list|(
literal|"mykeyword"
argument_list|)
argument_list|,
operator|new
name|CharsRef
argument_list|(
literal|"mysynonym"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Tokenizer
name|tokenStream
init|=
operator|new
name|MockTokenizer
argument_list|(
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|input
init|=
literal|"mykeyword another keyword"
decl_stmt|;
name|tokenStream
operator|.
name|setReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
name|SynonymFilter
name|filter
init|=
operator|new
name|SynonymFilter
argument_list|(
name|tokenStream
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|BytesRef
name|payload
init|=
operator|new
name|BytesRef
argument_list|(
literal|"payload"
argument_list|)
decl_stmt|;
name|CompletionTokenStream
name|completionTokenStream
init|=
operator|new
name|CompletionTokenStream
argument_list|(
name|filter
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|completionTokenStream
operator|.
name|setPayload
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|PayloadAttrToTypeAttrFilter
name|stream
init|=
operator|new
name|PayloadAttrToTypeAttrFilter
argument_list|(
name|completionTokenStream
argument_list|)
decl_stmt|;
name|String
index|[]
name|expectedOutputs
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|CharsRefBuilder
name|expectedOutput
init|=
operator|new
name|CharsRefBuilder
argument_list|()
decl_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
literal|"mykeyword"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
operator|(
operator|(
name|char
operator|)
name|CompletionAnalyzer
operator|.
name|SEP_LABEL
operator|)
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
literal|"another"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
operator|(
operator|(
name|char
operator|)
name|CompletionAnalyzer
operator|.
name|SEP_LABEL
operator|)
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
literal|"keyword"
argument_list|)
expr_stmt|;
name|expectedOutputs
index|[
literal|0
index|]
operator|=
name|expectedOutput
operator|.
name|toCharsRef
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|expectedOutput
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
literal|"mysynonym"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
operator|(
operator|(
name|char
operator|)
name|CompletionAnalyzer
operator|.
name|SEP_LABEL
operator|)
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
literal|"another"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
operator|(
operator|(
name|char
operator|)
name|CompletionAnalyzer
operator|.
name|SEP_LABEL
operator|)
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
literal|"keyword"
argument_list|)
expr_stmt|;
name|expectedOutputs
index|[
literal|1
index|]
operator|=
name|expectedOutput
operator|.
name|toCharsRef
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|stream
argument_list|,
name|expectedOutputs
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|payload
operator|.
name|utf8ToString
argument_list|()
block|,
name|payload
operator|.
name|utf8ToString
argument_list|()
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidNumberOfExpansions
specifier|public
name|void
name|testValidNumberOfExpansions
parameter_list|()
throws|throws
name|IOException
block|{
name|SynonymMap
operator|.
name|Builder
name|builder
init|=
operator|new
name|SynonymMap
operator|.
name|Builder
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
operator|new
name|CharsRef
argument_list|(
literal|""
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
argument_list|,
operator|new
name|CharsRef
argument_list|(
literal|""
operator|+
operator|(
literal|1000
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|valueBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|valueBuilder
operator|.
name|append
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|valueBuilder
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|MockTokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|(
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|tokenizer
operator|.
name|setReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|valueBuilder
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SynonymFilter
name|filter
init|=
operator|new
name|SynonymFilter
argument_list|(
name|tokenizer
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|CompletionTokenStream
name|completionTokenStream
init|=
operator|new
name|CompletionTokenStream
argument_list|(
name|filter
argument_list|)
decl_stmt|;
name|completionTokenStream
operator|.
name|setPayload
argument_list|(
operator|new
name|BytesRef
argument_list|()
argument_list|)
expr_stmt|;
name|PayloadAttrToTypeAttrFilter
name|stream
init|=
operator|new
name|PayloadAttrToTypeAttrFilter
argument_list|(
name|completionTokenStream
argument_list|)
decl_stmt|;
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|CompletionTokenStream
operator|.
name|BytesRefBuilderTermAttribute
name|attr
init|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|CompletionTokenStream
operator|.
name|BytesRefBuilderTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|PositionIncrementAttribute
name|posAttr
init|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|maxPos
init|=
literal|0
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|stream
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
name|assertNotNull
argument_list|(
name|attr
operator|.
name|getBytesRef
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|attr
operator|.
name|getBytesRef
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|maxPos
operator|+=
name|posAttr
operator|.
name|getPositionIncrement
argument_list|()
expr_stmt|;
block|}
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
name|maxPos
argument_list|)
expr_stmt|;
block|}
DECL|class|PayloadAttrToTypeAttrFilter
specifier|public
specifier|final
specifier|static
class|class
name|PayloadAttrToTypeAttrFilter
extends|extends
name|TokenFilter
block|{
DECL|field|payload
specifier|private
name|PayloadAttribute
name|payload
init|=
name|addAttribute
argument_list|(
name|PayloadAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|type
specifier|private
name|TypeAttribute
name|type
init|=
name|addAttribute
argument_list|(
name|TypeAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|PayloadAttrToTypeAttrFilter
specifier|protected
name|PayloadAttrToTypeAttrFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
comment|// we move them over so we can assert them more easily in the tests
name|type
operator|.
name|setType
argument_list|(
name|payload
operator|.
name|getPayload
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class
end_unit
