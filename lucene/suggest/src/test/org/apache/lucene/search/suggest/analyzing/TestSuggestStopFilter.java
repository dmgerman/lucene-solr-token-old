begin_unit
begin_package
DECL|package|org.apache.lucene.search.suggest.analyzing
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|analyzing
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|StopFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|CharArraySet
import|;
end_import
begin_class
DECL|class|TestSuggestStopFilter
specifier|public
class|class
name|TestSuggestStopFilter
extends|extends
name|BaseTokenStreamTestCase
block|{
DECL|method|testEndNotStopWord
specifier|public
name|void
name|testEndNotStopWord
parameter_list|()
throws|throws
name|Exception
block|{
name|CharArraySet
name|stopWords
init|=
name|StopFilter
operator|.
name|makeStopSet
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
literal|"to"
argument_list|)
decl_stmt|;
name|Tokenizer
name|stream
init|=
operator|new
name|MockTokenizer
argument_list|()
decl_stmt|;
name|stream
operator|.
name|setReader
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"go to"
argument_list|)
argument_list|)
expr_stmt|;
name|TokenStream
name|filter
init|=
operator|new
name|SuggestStopFilter
argument_list|(
name|stream
argument_list|,
name|stopWords
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|filter
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"go"
block|,
literal|"to"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|3
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|5
block|}
argument_list|,
literal|null
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|5
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testEndIsStopWord
specifier|public
name|void
name|testEndIsStopWord
parameter_list|()
throws|throws
name|Exception
block|{
name|CharArraySet
name|stopWords
init|=
name|StopFilter
operator|.
name|makeStopSet
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
literal|"to"
argument_list|)
decl_stmt|;
name|Tokenizer
name|stream
init|=
operator|new
name|MockTokenizer
argument_list|()
decl_stmt|;
name|stream
operator|.
name|setReader
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"go to "
argument_list|)
argument_list|)
expr_stmt|;
name|TokenStream
name|filter
init|=
operator|new
name|SuggestStopFilter
argument_list|(
name|stream
argument_list|,
name|stopWords
argument_list|)
decl_stmt|;
name|filter
operator|=
operator|new
name|SuggestStopFilter
argument_list|(
name|stream
argument_list|,
name|stopWords
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|filter
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"go"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|}
argument_list|,
literal|null
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|6
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|false
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testMidStopWord
specifier|public
name|void
name|testMidStopWord
parameter_list|()
throws|throws
name|Exception
block|{
name|CharArraySet
name|stopWords
init|=
name|StopFilter
operator|.
name|makeStopSet
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
literal|"to"
argument_list|)
decl_stmt|;
name|Tokenizer
name|stream
init|=
operator|new
name|MockTokenizer
argument_list|()
decl_stmt|;
name|stream
operator|.
name|setReader
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"go to school"
argument_list|)
argument_list|)
expr_stmt|;
name|TokenStream
name|filter
init|=
operator|new
name|SuggestStopFilter
argument_list|(
name|stream
argument_list|,
name|stopWords
argument_list|)
decl_stmt|;
name|filter
operator|=
operator|new
name|SuggestStopFilter
argument_list|(
name|stream
argument_list|,
name|stopWords
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|filter
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"go"
block|,
literal|"school"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|6
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|12
block|}
argument_list|,
literal|null
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|,
literal|null
argument_list|,
literal|12
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultipleStopWords
specifier|public
name|void
name|testMultipleStopWords
parameter_list|()
throws|throws
name|Exception
block|{
name|CharArraySet
name|stopWords
init|=
name|StopFilter
operator|.
name|makeStopSet
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
literal|"to"
argument_list|,
literal|"the"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Tokenizer
name|stream
init|=
operator|new
name|MockTokenizer
argument_list|()
decl_stmt|;
name|stream
operator|.
name|setReader
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"go to a the school"
argument_list|)
argument_list|)
expr_stmt|;
name|TokenStream
name|filter
init|=
operator|new
name|SuggestStopFilter
argument_list|(
name|stream
argument_list|,
name|stopWords
argument_list|)
decl_stmt|;
name|filter
operator|=
operator|new
name|SuggestStopFilter
argument_list|(
name|stream
argument_list|,
name|stopWords
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|filter
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"go"
block|,
literal|"school"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|12
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|18
block|}
argument_list|,
literal|null
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|4
block|}
argument_list|,
literal|null
argument_list|,
literal|18
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultipleStopWordsEnd
specifier|public
name|void
name|testMultipleStopWordsEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|CharArraySet
name|stopWords
init|=
name|StopFilter
operator|.
name|makeStopSet
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
literal|"to"
argument_list|,
literal|"the"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Tokenizer
name|stream
init|=
operator|new
name|MockTokenizer
argument_list|()
decl_stmt|;
name|stream
operator|.
name|setReader
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"go to a the"
argument_list|)
argument_list|)
expr_stmt|;
name|TokenStream
name|filter
init|=
operator|new
name|SuggestStopFilter
argument_list|(
name|stream
argument_list|,
name|stopWords
argument_list|)
decl_stmt|;
name|filter
operator|=
operator|new
name|SuggestStopFilter
argument_list|(
name|stream
argument_list|,
name|stopWords
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|filter
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"go"
block|,
literal|"the"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|11
block|}
argument_list|,
literal|null
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|}
argument_list|,
literal|null
argument_list|,
literal|11
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultipleStopWordsEnd2
specifier|public
name|void
name|testMultipleStopWordsEnd2
parameter_list|()
throws|throws
name|Exception
block|{
name|CharArraySet
name|stopWords
init|=
name|StopFilter
operator|.
name|makeStopSet
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
literal|"to"
argument_list|,
literal|"the"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Tokenizer
name|stream
init|=
operator|new
name|MockTokenizer
argument_list|()
decl_stmt|;
name|stream
operator|.
name|setReader
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"go to a the "
argument_list|)
argument_list|)
expr_stmt|;
name|TokenStream
name|filter
init|=
operator|new
name|SuggestStopFilter
argument_list|(
name|stream
argument_list|,
name|stopWords
argument_list|)
decl_stmt|;
name|filter
operator|=
operator|new
name|SuggestStopFilter
argument_list|(
name|stream
argument_list|,
name|stopWords
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|filter
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"go"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|}
argument_list|,
literal|null
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|12
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|false
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
