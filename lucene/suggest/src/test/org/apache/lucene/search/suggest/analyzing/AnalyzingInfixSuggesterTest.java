begin_unit
begin_package
DECL|package|org.apache.lucene.search.suggest.analyzing
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|analyzing
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|StopFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|CharArraySet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|Input
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|InputArrayIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|Lookup
operator|.
name|LookupResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_class
DECL|class|AnalyzingInfixSuggesterTest
specifier|public
class|class
name|AnalyzingInfixSuggesterTest
extends|extends
name|LuceneTestCase
block|{
DECL|method|testBasic
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|Input
name|keys
index|[]
init|=
operator|new
name|Input
index|[]
block|{
operator|new
name|Input
argument_list|(
literal|"lend me your ear"
argument_list|,
literal|8
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
block|,
operator|new
name|Input
argument_list|(
literal|"a penny saved is a penny earned"
argument_list|,
literal|10
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|)
block|,     }
decl_stmt|;
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AnalyzingInfixSuggester
name|suggester
init|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|newDirectory
argument_list|()
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|suggester
operator|.
name|build
argument_list|(
operator|new
name|InputArrayIterator
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|results
init|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a penny saved is a penny<b>ear</b>ned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lend me your<b>ear</b>"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear "
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lend me your<b>ear</b>"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"pen"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a<b>pen</b>ny saved is a<b>pen</b>ny earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"p"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a<b>p</b>enny saved is a<b>p</b>enny earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testAfterLoad
specifier|public
name|void
name|testAfterLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|Input
name|keys
index|[]
init|=
operator|new
name|Input
index|[]
block|{
operator|new
name|Input
argument_list|(
literal|"lend me your ear"
argument_list|,
literal|8
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
block|,
operator|new
name|Input
argument_list|(
literal|"a penny saved is a penny earned"
argument_list|,
literal|10
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|)
block|,     }
decl_stmt|;
name|Path
name|tempDir
init|=
name|createTempDir
argument_list|(
literal|"AnalyzingInfixSuggesterTest"
argument_list|)
decl_stmt|;
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AnalyzingInfixSuggester
name|suggester
init|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|newFSDirectory
argument_list|(
name|tempDir
argument_list|)
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|suggester
operator|.
name|build
argument_list|(
operator|new
name|InputArrayIterator
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|suggester
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
name|suggester
operator|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|newFSDirectory
argument_list|(
name|tempDir
argument_list|)
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|results
init|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a penny saved is a penny<b>ear</b>ned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|suggester
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Used to return highlighted result; see {@link    *  LookupResult#highlightKey} */
DECL|class|LookupHighlightFragment
specifier|private
specifier|static
specifier|final
class|class
name|LookupHighlightFragment
block|{
comment|/** Portion of text for this fragment. */
DECL|field|text
specifier|public
specifier|final
name|String
name|text
decl_stmt|;
comment|/** True if this text matched a part of the user's      *  query. */
DECL|field|isHit
specifier|public
specifier|final
name|boolean
name|isHit
decl_stmt|;
comment|/** Sole constructor. */
DECL|method|LookupHighlightFragment
specifier|public
name|LookupHighlightFragment
parameter_list|(
name|String
name|text
parameter_list|,
name|boolean
name|isHit
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
name|this
operator|.
name|isHit
operator|=
name|isHit
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"LookupHighlightFragment(text="
operator|+
name|text
operator|+
literal|" isHit="
operator|+
name|isHit
operator|+
literal|")"
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testHighlightAsObject
specifier|public
name|void
name|testHighlightAsObject
parameter_list|()
throws|throws
name|Exception
block|{
name|Input
name|keys
index|[]
init|=
operator|new
name|Input
index|[]
block|{
operator|new
name|Input
argument_list|(
literal|"a penny saved is a penny earned"
argument_list|,
literal|10
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|)
block|,     }
decl_stmt|;
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AnalyzingInfixSuggester
name|suggester
init|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|newDirectory
argument_list|()
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Object
name|highlight
parameter_list|(
name|String
name|text
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|matchedTokens
parameter_list|,
name|String
name|prefixToken
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|TokenStream
name|ts
init|=
name|queryAnalyzer
operator|.
name|tokenStream
argument_list|(
literal|"text"
argument_list|,
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
argument_list|)
init|)
block|{
name|CharTermAttribute
name|termAtt
init|=
name|ts
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|OffsetAttribute
name|offsetAtt
init|=
name|ts
operator|.
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|ts
operator|.
name|reset
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|LookupHighlightFragment
argument_list|>
name|fragments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|upto
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|ts
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|termAtt
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|startOffset
init|=
name|offsetAtt
operator|.
name|startOffset
argument_list|()
decl_stmt|;
name|int
name|endOffset
init|=
name|offsetAtt
operator|.
name|endOffset
argument_list|()
decl_stmt|;
if|if
condition|(
name|upto
operator|<
name|startOffset
condition|)
block|{
name|fragments
operator|.
name|add
argument_list|(
operator|new
name|LookupHighlightFragment
argument_list|(
name|text
operator|.
name|substring
argument_list|(
name|upto
argument_list|,
name|startOffset
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|upto
operator|=
name|startOffset
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|upto
operator|>
name|startOffset
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|matchedTokens
operator|.
name|contains
argument_list|(
name|token
argument_list|)
condition|)
block|{
comment|// Token matches.
name|fragments
operator|.
name|add
argument_list|(
operator|new
name|LookupHighlightFragment
argument_list|(
name|text
operator|.
name|substring
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|upto
operator|=
name|endOffset
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prefixToken
operator|!=
literal|null
operator|&&
name|token
operator|.
name|startsWith
argument_list|(
name|prefixToken
argument_list|)
condition|)
block|{
name|fragments
operator|.
name|add
argument_list|(
operator|new
name|LookupHighlightFragment
argument_list|(
name|text
operator|.
name|substring
argument_list|(
name|startOffset
argument_list|,
name|startOffset
operator|+
name|prefixToken
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefixToken
operator|.
name|length
argument_list|()
operator|<
name|token
operator|.
name|length
argument_list|()
condition|)
block|{
name|fragments
operator|.
name|add
argument_list|(
operator|new
name|LookupHighlightFragment
argument_list|(
name|text
operator|.
name|substring
argument_list|(
name|startOffset
operator|+
name|prefixToken
operator|.
name|length
argument_list|()
argument_list|,
name|startOffset
operator|+
name|token
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|upto
operator|=
name|endOffset
expr_stmt|;
block|}
block|}
name|ts
operator|.
name|end
argument_list|()
expr_stmt|;
name|int
name|endOffset
init|=
name|offsetAtt
operator|.
name|endOffset
argument_list|()
decl_stmt|;
if|if
condition|(
name|upto
operator|<
name|endOffset
condition|)
block|{
name|fragments
operator|.
name|add
argument_list|(
operator|new
name|LookupHighlightFragment
argument_list|(
name|text
operator|.
name|substring
argument_list|(
name|upto
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|fragments
return|;
block|}
block|}
block|}
decl_stmt|;
name|suggester
operator|.
name|build
argument_list|(
operator|new
name|InputArrayIterator
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|results
init|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a penny saved is a penny<b>ear</b>ned"
argument_list|,
name|toString
argument_list|(
operator|(
name|List
argument_list|<
name|LookupHighlightFragment
argument_list|>
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|List
argument_list|<
name|LookupHighlightFragment
argument_list|>
name|fragments
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|LookupHighlightFragment
name|fragment
range|:
name|fragments
control|)
block|{
if|if
condition|(
name|fragment
operator|.
name|isHit
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<b>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|fragment
operator|.
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|fragment
operator|.
name|isHit
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"</b>"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|testRandomMinPrefixLength
specifier|public
name|void
name|testRandomMinPrefixLength
parameter_list|()
throws|throws
name|Exception
block|{
name|Input
name|keys
index|[]
init|=
operator|new
name|Input
index|[]
block|{
operator|new
name|Input
argument_list|(
literal|"lend me your ear"
argument_list|,
literal|8
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
block|,
operator|new
name|Input
argument_list|(
literal|"a penny saved is a penny earned"
argument_list|,
literal|10
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|)
block|,     }
decl_stmt|;
name|Path
name|tempDir
init|=
name|createTempDir
argument_list|(
literal|"AnalyzingInfixSuggesterTest"
argument_list|)
decl_stmt|;
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|minPrefixLength
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|AnalyzingInfixSuggester
name|suggester
init|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|newFSDirectory
argument_list|(
name|tempDir
argument_list|)
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
name|minPrefixLength
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|suggester
operator|.
name|build
argument_list|(
operator|new
name|InputArrayIterator
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|2
condition|;
name|j
operator|++
control|)
block|{
name|boolean
name|doHighlight
init|=
name|j
operator|==
literal|0
decl_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|results
init|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
name|doHighlight
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|doHighlight
condition|)
block|{
name|assertEquals
argument_list|(
literal|"a penny saved is a penny<b>ear</b>ned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"a penny saved is a penny earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|doHighlight
condition|)
block|{
name|assertEquals
argument_list|(
literal|"lend me your<b>ear</b>"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"lend me your ear"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear "
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
name|doHighlight
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|doHighlight
condition|)
block|{
name|assertEquals
argument_list|(
literal|"lend me your<b>ear</b>"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"lend me your ear"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"pen"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
name|doHighlight
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|doHighlight
condition|)
block|{
name|assertEquals
argument_list|(
literal|"a<b>pen</b>ny saved is a<b>pen</b>ny earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"a penny saved is a penny earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"p"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
name|doHighlight
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|doHighlight
condition|)
block|{
name|assertEquals
argument_list|(
literal|"a<b>p</b>enny saved is a<b>p</b>enny earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"a penny saved is a penny earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
block|}
comment|// Make sure things still work after close and reopen:
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
name|suggester
operator|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|newFSDirectory
argument_list|(
name|tempDir
argument_list|)
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
name|minPrefixLength
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testHighlight
specifier|public
name|void
name|testHighlight
parameter_list|()
throws|throws
name|Exception
block|{
name|Input
name|keys
index|[]
init|=
operator|new
name|Input
index|[]
block|{
operator|new
name|Input
argument_list|(
literal|"a penny saved is a penny earned"
argument_list|,
literal|10
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|)
block|,     }
decl_stmt|;
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AnalyzingInfixSuggester
name|suggester
init|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|newDirectory
argument_list|()
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|suggester
operator|.
name|build
argument_list|(
operator|new
name|InputArrayIterator
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|results
init|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"penn"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a<b>penn</b>y saved is a<b>penn</b>y earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testHighlightCaseChange
specifier|public
name|void
name|testHighlightCaseChange
parameter_list|()
throws|throws
name|Exception
block|{
name|Input
name|keys
index|[]
init|=
operator|new
name|Input
index|[]
block|{
operator|new
name|Input
argument_list|(
literal|"a Penny saved is a penny earned"
argument_list|,
literal|10
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|)
block|,     }
decl_stmt|;
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|AnalyzingInfixSuggester
name|suggester
init|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|newDirectory
argument_list|()
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|suggester
operator|.
name|build
argument_list|(
operator|new
name|InputArrayIterator
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|results
init|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"penn"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a<b>Penn</b>y saved is a<b>penn</b>y earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Try again, but overriding addPrefixMatch to highlight
comment|// the entire hit:
name|suggester
operator|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|newDirectory
argument_list|()
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|addPrefixMatch
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|surface
parameter_list|,
name|String
name|analyzed
parameter_list|,
name|String
name|prefixToken
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<b>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|surface
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</b>"
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|suggester
operator|.
name|build
argument_list|(
operator|new
name|InputArrayIterator
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"penn"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a<b>Penny</b> saved is a<b>penny</b> earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDoubleClose
specifier|public
name|void
name|testDoubleClose
parameter_list|()
throws|throws
name|Exception
block|{
name|Input
name|keys
index|[]
init|=
operator|new
name|Input
index|[]
block|{
operator|new
name|Input
argument_list|(
literal|"a penny saved is a penny earned"
argument_list|,
literal|10
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|)
block|,     }
decl_stmt|;
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AnalyzingInfixSuggester
name|suggester
init|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|newDirectory
argument_list|()
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|suggester
operator|.
name|build
argument_list|(
operator|new
name|InputArrayIterator
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSuggestStopFilter
specifier|public
name|void
name|testSuggestStopFilter
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CharArraySet
name|stopWords
init|=
name|StopFilter
operator|.
name|makeStopSet
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Analyzer
name|indexAnalyzer
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|MockTokenizer
name|tokens
init|=
operator|new
name|MockTokenizer
argument_list|()
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokens
argument_list|,
operator|new
name|StopFilter
argument_list|(
name|tokens
argument_list|,
name|stopWords
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Analyzer
name|queryAnalyzer
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|MockTokenizer
name|tokens
init|=
operator|new
name|MockTokenizer
argument_list|()
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokens
argument_list|,
operator|new
name|SuggestStopFilter
argument_list|(
name|tokens
argument_list|,
name|stopWords
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|AnalyzingInfixSuggester
name|suggester
init|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|newDirectory
argument_list|()
argument_list|,
name|indexAnalyzer
argument_list|,
name|queryAnalyzer
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Input
name|keys
index|[]
init|=
operator|new
name|Input
index|[]
block|{
operator|new
name|Input
argument_list|(
literal|"a bob for apples"
argument_list|,
literal|10
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|)
block|,     }
decl_stmt|;
name|suggester
operator|.
name|build
argument_list|(
operator|new
name|InputArrayIterator
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|results
init|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"a"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a bob for<b>a</b>pples"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testEmptyAtStart
specifier|public
name|void
name|testEmptyAtStart
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AnalyzingInfixSuggester
name|suggester
init|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|newDirectory
argument_list|()
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|suggester
operator|.
name|build
argument_list|(
operator|new
name|InputArrayIterator
argument_list|(
operator|new
name|Input
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"a penny saved is a penny earned"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"lend me your ear"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|8
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|results
init|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a penny saved is a penny<b>ear</b>ned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lend me your<b>ear</b>"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear "
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lend me your<b>ear</b>"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"pen"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a<b>pen</b>ny saved is a<b>pen</b>ny earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"p"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a<b>p</b>enny saved is a<b>p</b>enny earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testBothExactAndPrefix
specifier|public
name|void
name|testBothExactAndPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AnalyzingInfixSuggester
name|suggester
init|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|newDirectory
argument_list|()
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|suggester
operator|.
name|build
argument_list|(
operator|new
name|InputArrayIterator
argument_list|(
operator|new
name|Input
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"the pen is pretty"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|results
init|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"pen p"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"the<b>pen</b> is<b>p</b>retty"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|randomText
specifier|private
specifier|static
name|String
name|randomText
parameter_list|()
block|{
name|int
name|numWords
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numWords
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|Update
specifier|private
specifier|static
class|class
name|Update
block|{
DECL|field|weight
name|long
name|weight
decl_stmt|;
DECL|field|index
name|int
name|index
decl_stmt|;
block|}
DECL|class|LookupThread
specifier|private
specifier|static
class|class
name|LookupThread
extends|extends
name|Thread
block|{
DECL|field|suggester
specifier|private
specifier|final
name|AnalyzingInfixSuggester
name|suggester
decl_stmt|;
DECL|field|stop
specifier|private
specifier|volatile
name|boolean
name|stop
decl_stmt|;
DECL|method|LookupThread
specifier|public
name|LookupThread
parameter_list|(
name|AnalyzingInfixSuggester
name|suggester
parameter_list|)
block|{
name|this
operator|.
name|suggester
operator|=
name|suggester
expr_stmt|;
block|}
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|stop
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|stop
operator|==
literal|false
condition|)
block|{
name|String
name|query
init|=
name|randomText
argument_list|()
decl_stmt|;
name|int
name|topN
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|boolean
name|allTermsRequired
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|boolean
name|doHilite
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
comment|// We don't verify the results; just doing
comment|// simultaneous lookups while adding/updating to
comment|// see if there are any thread hazards:
try|try
block|{
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
name|query
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
name|topN
argument_list|,
name|allTermsRequired
argument_list|,
name|doHilite
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|method|testRandomNRT
specifier|public
name|void
name|testRandomNRT
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|tempDir
init|=
name|createTempDir
argument_list|(
literal|"AnalyzingInfixSuggesterTest"
argument_list|)
decl_stmt|;
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|minPrefixChars
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  minPrefixChars="
operator|+
name|minPrefixChars
argument_list|)
expr_stmt|;
block|}
name|AnalyzingInfixSuggester
name|suggester
init|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|newFSDirectory
argument_list|(
name|tempDir
argument_list|)
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
name|minPrefixChars
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Initial suggester built with nothing:
name|suggester
operator|.
name|build
argument_list|(
operator|new
name|InputArrayIterator
argument_list|(
operator|new
name|Input
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|LookupThread
name|lookupThread
init|=
operator|new
name|LookupThread
argument_list|(
name|suggester
argument_list|)
decl_stmt|;
name|lookupThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|int
name|visibleUpto
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|usedWeights
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|usedKeys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Input
argument_list|>
name|inputs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Update
argument_list|>
name|pendingUpdates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
name|String
name|text
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|text
operator|=
name|randomText
argument_list|()
expr_stmt|;
if|if
condition|(
name|usedKeys
operator|.
name|contains
argument_list|(
name|text
argument_list|)
operator|==
literal|false
condition|)
block|{
name|usedKeys
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// Carefully pick a weight we never used, to sidestep
comment|// tie-break problems:
name|long
name|weight
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|weight
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
operator|*
name|iters
argument_list|)
expr_stmt|;
if|if
condition|(
name|usedWeights
operator|.
name|contains
argument_list|(
name|weight
argument_list|)
operator|==
literal|false
condition|)
block|{
name|usedWeights
operator|.
name|add
argument_list|(
name|weight
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|inputs
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
operator|==
literal|1
condition|)
block|{
comment|// Update an existing suggestion
name|Update
name|update
init|=
operator|new
name|Update
argument_list|()
decl_stmt|;
name|update
operator|.
name|index
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|inputs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|weight
operator|=
name|weight
expr_stmt|;
name|Input
name|input
init|=
name|inputs
operator|.
name|get
argument_list|(
name|update
operator|.
name|index
argument_list|)
decl_stmt|;
name|pendingUpdates
operator|.
name|add
argument_list|(
name|update
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: iter="
operator|+
name|iter
operator|+
literal|" update input="
operator|+
name|input
operator|.
name|term
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|"/"
operator|+
name|weight
argument_list|)
expr_stmt|;
block|}
name|suggester
operator|.
name|update
argument_list|(
name|input
operator|.
name|term
argument_list|,
literal|null
argument_list|,
name|weight
argument_list|,
name|input
operator|.
name|term
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Add a new suggestion
name|inputs
operator|.
name|add
argument_list|(
operator|new
name|Input
argument_list|(
name|text
argument_list|,
name|weight
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|text
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: iter="
operator|+
name|iter
operator|+
literal|" add input="
operator|+
name|text
operator|+
literal|"/"
operator|+
name|weight
argument_list|)
expr_stmt|;
block|}
name|BytesRef
name|br
init|=
operator|new
name|BytesRef
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|suggester
operator|.
name|add
argument_list|(
name|br
argument_list|,
literal|null
argument_list|,
name|weight
argument_list|,
name|br
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|15
argument_list|)
operator|==
literal|7
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: now refresh suggester"
argument_list|)
expr_stmt|;
block|}
name|suggester
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|visibleUpto
operator|=
name|inputs
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|Update
name|update
range|:
name|pendingUpdates
control|)
block|{
name|Input
name|oldInput
init|=
name|inputs
operator|.
name|get
argument_list|(
name|update
operator|.
name|index
argument_list|)
decl_stmt|;
name|Input
name|newInput
init|=
operator|new
name|Input
argument_list|(
name|oldInput
operator|.
name|term
argument_list|,
name|update
operator|.
name|weight
argument_list|,
name|oldInput
operator|.
name|payload
argument_list|)
decl_stmt|;
name|inputs
operator|.
name|set
argument_list|(
name|update
operator|.
name|index
argument_list|,
name|newInput
argument_list|)
expr_stmt|;
block|}
name|pendingUpdates
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
operator|==
literal|7
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: now close/reopen suggester"
argument_list|)
expr_stmt|;
block|}
name|lookupThread
operator|.
name|finish
argument_list|()
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
name|suggester
operator|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|newFSDirectory
argument_list|(
name|tempDir
argument_list|)
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
name|minPrefixChars
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|lookupThread
operator|=
operator|new
name|LookupThread
argument_list|(
name|suggester
argument_list|)
expr_stmt|;
name|lookupThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|visibleUpto
operator|=
name|inputs
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|Update
name|update
range|:
name|pendingUpdates
control|)
block|{
name|Input
name|oldInput
init|=
name|inputs
operator|.
name|get
argument_list|(
name|update
operator|.
name|index
argument_list|)
decl_stmt|;
name|Input
name|newInput
init|=
operator|new
name|Input
argument_list|(
name|oldInput
operator|.
name|term
argument_list|,
name|update
operator|.
name|weight
argument_list|,
name|oldInput
operator|.
name|payload
argument_list|)
decl_stmt|;
name|inputs
operator|.
name|set
argument_list|(
name|update
operator|.
name|index
argument_list|,
name|newInput
argument_list|)
expr_stmt|;
block|}
name|pendingUpdates
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|visibleUpto
operator|>
literal|0
condition|)
block|{
name|String
name|query
init|=
name|randomText
argument_list|()
decl_stmt|;
name|boolean
name|lastPrefix
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|!=
literal|1
decl_stmt|;
if|if
condition|(
name|lastPrefix
operator|==
literal|false
condition|)
block|{
name|query
operator|+=
literal|" "
expr_stmt|;
block|}
name|String
index|[]
name|queryTerms
init|=
name|query
operator|.
name|split
argument_list|(
literal|"\\s"
argument_list|)
decl_stmt|;
name|boolean
name|allTermsRequired
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
decl_stmt|;
name|boolean
name|doHilite
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: lookup \""
operator|+
name|query
operator|+
literal|"\" allTermsRequired="
operator|+
name|allTermsRequired
operator|+
literal|" doHilite="
operator|+
name|doHilite
argument_list|)
expr_stmt|;
block|}
comment|// Stupid slow but hopefully correct matching:
name|List
argument_list|<
name|Input
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|visibleUpto
condition|;
name|i
operator|++
control|)
block|{
name|Input
name|input
init|=
name|inputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
index|[]
name|inputTerms
init|=
name|input
operator|.
name|term
operator|.
name|utf8ToString
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\s"
argument_list|)
decl_stmt|;
name|boolean
name|match
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|queryTerms
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|j
operator|<
name|queryTerms
operator|.
name|length
operator|-
literal|1
operator|||
name|lastPrefix
operator|==
literal|false
condition|)
block|{
comment|// Exact match
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|inputTerms
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
if|if
condition|(
name|inputTerms
index|[
name|k
index|]
operator|.
name|equals
argument_list|(
name|queryTerms
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
comment|// Prefix match
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|inputTerms
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
if|if
condition|(
name|inputTerms
index|[
name|k
index|]
operator|.
name|startsWith
argument_list|(
name|queryTerms
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|match
condition|)
block|{
if|if
condition|(
name|allTermsRequired
operator|==
literal|false
condition|)
block|{
comment|// At least one query term does match:
break|break;
block|}
name|match
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allTermsRequired
condition|)
block|{
comment|// At least one query term does not match:
break|break;
block|}
block|}
if|if
condition|(
name|match
condition|)
block|{
if|if
condition|(
name|doHilite
condition|)
block|{
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Input
argument_list|(
name|hilite
argument_list|(
name|lastPrefix
argument_list|,
name|inputTerms
argument_list|,
name|queryTerms
argument_list|)
argument_list|,
name|input
operator|.
name|v
argument_list|,
name|input
operator|.
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|.
name|add
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|expected
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Input
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Input
name|a
parameter_list|,
name|Input
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|v
operator|>
name|b
operator|.
name|v
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|a
operator|.
name|v
operator|<
name|b
operator|.
name|v
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|expected
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|int
name|topN
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|expected
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|actual
init|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
name|query
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
name|topN
argument_list|,
name|allTermsRequired
argument_list|,
name|doHilite
argument_list|)
decl_stmt|;
name|int
name|expectedCount
init|=
name|Math
operator|.
name|min
argument_list|(
name|topN
argument_list|,
name|expected
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  expected:"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedCount
condition|;
name|i
operator|++
control|)
block|{
name|Input
name|x
init|=
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    "
operator|+
name|x
operator|.
name|term
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|"/"
operator|+
name|x
operator|.
name|v
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  actual:"
argument_list|)
expr_stmt|;
for|for
control|(
name|LookupResult
name|result
range|:
name|actual
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|expectedCount
argument_list|,
name|actual
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedCount
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|term
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|v
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|payload
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  no expected matches"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|lookupThread
operator|.
name|finish
argument_list|()
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|hilite
specifier|private
specifier|static
name|String
name|hilite
parameter_list|(
name|boolean
name|lastPrefix
parameter_list|,
name|String
index|[]
name|inputTerms
parameter_list|,
name|String
index|[]
name|queryTerms
parameter_list|)
block|{
comment|// Stupid slow but hopefully correct highlighter:
comment|//System.out.println("hilite: lastPrefix=" + lastPrefix + " inputTerms=" + Arrays.toString(inputTerms) + " queryTerms=" + Arrays.toString(queryTerms));
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputTerms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|String
name|inputTerm
init|=
name|inputTerms
index|[
name|i
index|]
decl_stmt|;
comment|//System.out.println("  inputTerm=" + inputTerm);
name|boolean
name|matched
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|queryTerms
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
name|queryTerm
init|=
name|queryTerms
index|[
name|j
index|]
decl_stmt|;
comment|//System.out.println("    queryTerm=" + queryTerm);
if|if
condition|(
name|j
operator|<
name|queryTerms
operator|.
name|length
operator|-
literal|1
operator|||
name|lastPrefix
operator|==
literal|false
condition|)
block|{
comment|//System.out.println("      check exact");
if|if
condition|(
name|inputTerm
operator|.
name|equals
argument_list|(
name|queryTerm
argument_list|)
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"<b>"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|inputTerm
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"</b>"
argument_list|)
expr_stmt|;
name|matched
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|inputTerm
operator|.
name|startsWith
argument_list|(
name|queryTerm
argument_list|)
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"<b>"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|queryTerm
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"</b>"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|inputTerm
operator|.
name|substring
argument_list|(
name|queryTerm
operator|.
name|length
argument_list|()
argument_list|,
name|inputTerm
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|matched
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|matched
operator|==
literal|false
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
name|inputTerm
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|testBasicNRT
specifier|public
name|void
name|testBasicNRT
parameter_list|()
throws|throws
name|Exception
block|{
name|Input
name|keys
index|[]
init|=
operator|new
name|Input
index|[]
block|{
operator|new
name|Input
argument_list|(
literal|"lend me your ear"
argument_list|,
literal|8
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
block|,     }
decl_stmt|;
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AnalyzingInfixSuggester
name|suggester
init|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|newDirectory
argument_list|()
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|suggester
operator|.
name|build
argument_list|(
operator|new
name|InputArrayIterator
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|results
init|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lend me your<b>ear</b>"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
comment|// Add a new suggestion:
name|suggester
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"a penny saved is a penny earned"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Must refresh to see any newly added suggestions:
name|suggester
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a penny saved is a penny<b>ear</b>ned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lend me your<b>ear</b>"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear "
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lend me your<b>ear</b>"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"pen"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a<b>pen</b>ny saved is a<b>pen</b>ny earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"p"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a<b>p</b>enny saved is a<b>p</b>enny earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
comment|// Change the weight:
name|suggester
operator|.
name|update
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"lend me your ear"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|12
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobox"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Must refresh to see any newly added suggestions:
name|suggester
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lend me your<b>ear</b>"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobox"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a penny saved is a penny<b>ear</b>ned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testNRTWithParallelAdds
specifier|public
name|void
name|testNRTWithParallelAdds
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
index|[]
name|keys
init|=
operator|new
name|String
index|[]
block|{
literal|"python"
block|,
literal|"java"
block|,
literal|"c"
block|,
literal|"scala"
block|,
literal|"ruby"
block|,
literal|"clojure"
block|,
literal|"erlang"
block|,
literal|"go"
block|,
literal|"swift"
block|,
literal|"lisp"
block|}
decl_stmt|;
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Path
name|tempDir
init|=
name|createTempDir
argument_list|(
literal|"AIS_NRT_PERSIST_TEST"
argument_list|)
decl_stmt|;
name|AnalyzingInfixSuggester
name|suggester
init|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|newFSDirectory
argument_list|(
name|tempDir
argument_list|)
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|multiAddThreads
init|=
operator|new
name|Thread
index|[
literal|10
index|]
decl_stmt|;
try|try
block|{
name|suggester
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Cannot call refresh on an suggester when no docs are added to the index"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|//Expected
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|multiAddThreads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|IndexDocument
argument_list|(
name|suggester
argument_list|,
name|keys
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|multiAddThreads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|//Make sure all threads have completed indexing
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|multiAddThreads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|suggester
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|results
init|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"python"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"python"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
comment|//Test if the index is getting persisted correctly and can be reopened.
name|suggester
operator|.
name|commit
argument_list|()
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
name|suggester
operator|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|newFSDirectory
argument_list|(
name|tempDir
argument_list|)
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"python"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"python"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|IndexDocument
specifier|private
class|class
name|IndexDocument
implements|implements
name|Runnable
block|{
DECL|field|suggester
name|AnalyzingInfixSuggester
name|suggester
decl_stmt|;
DECL|field|key
name|String
name|key
decl_stmt|;
DECL|method|IndexDocument
specifier|private
name|IndexDocument
parameter_list|(
name|AnalyzingInfixSuggester
name|suggester
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|suggester
operator|=
name|suggester
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|suggester
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|key
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Could not build suggest dictionary correctly"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|asSet
specifier|private
name|Set
argument_list|<
name|BytesRef
argument_list|>
name|asSet
parameter_list|(
name|String
modifier|...
name|values
parameter_list|)
block|{
name|HashSet
argument_list|<
name|BytesRef
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// LUCENE-5528
DECL|method|testBasicContext
specifier|public
name|void
name|testBasicContext
parameter_list|()
throws|throws
name|Exception
block|{
name|Input
name|keys
index|[]
init|=
operator|new
name|Input
index|[]
block|{
operator|new
name|Input
argument_list|(
literal|"lend me your ear"
argument_list|,
literal|8
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|asSet
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
block|,
operator|new
name|Input
argument_list|(
literal|"a penny saved is a penny earned"
argument_list|,
literal|10
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|asSet
argument_list|(
literal|"foo"
argument_list|,
literal|"baz"
argument_list|)
argument_list|)
block|}
decl_stmt|;
name|Path
name|tempDir
init|=
name|createTempDir
argument_list|(
literal|"analyzingInfixContext"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|2
condition|;
name|iter
operator|++
control|)
block|{
name|AnalyzingInfixSuggester
name|suggester
decl_stmt|;
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|iter
operator|==
literal|0
condition|)
block|{
name|suggester
operator|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|newFSDirectory
argument_list|(
name|tempDir
argument_list|)
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|build
argument_list|(
operator|new
name|InputArrayIterator
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Test again, after close/reopen:
name|suggester
operator|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|newFSDirectory
argument_list|(
name|tempDir
argument_list|)
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// No context provided, all results returned
name|List
argument_list|<
name|LookupResult
argument_list|>
name|results
init|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LookupResult
name|result
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a penny saved is a penny<b>ear</b>ned"
argument_list|,
name|result
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|result
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|result
operator|.
name|payload
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|contexts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|contexts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lend me your<b>ear</b>"
argument_list|,
name|result
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|result
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|result
operator|.
name|payload
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|contexts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|contexts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Both have "foo" context:
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
name|asSet
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a penny saved is a penny<b>ear</b>ned"
argument_list|,
name|result
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|result
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|result
operator|.
name|payload
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|contexts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|contexts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lend me your<b>ear</b>"
argument_list|,
name|result
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|result
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|result
operator|.
name|payload
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|contexts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|contexts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Only one has "bar" context:
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
name|asSet
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lend me your<b>ear</b>"
argument_list|,
name|result
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|result
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|result
operator|.
name|payload
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|contexts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|contexts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// None do not have "foo" context:
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|BooleanClause
operator|.
name|Occur
argument_list|>
name|contextInfo
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|contextInfo
operator|.
name|put
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
name|contextInfo
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Only one does not have "bar" context:
name|contextInfo
operator|.
name|clear
argument_list|()
expr_stmt|;
name|contextInfo
operator|.
name|put
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
name|contextInfo
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a penny saved is a penny<b>ear</b>ned"
argument_list|,
name|result
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|result
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|result
operator|.
name|payload
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|contexts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|contexts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Both have "foo" or "bar" context:
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
name|asSet
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a penny saved is a penny<b>ear</b>ned"
argument_list|,
name|result
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|result
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|result
operator|.
name|payload
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|contexts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|contexts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lend me your<b>ear</b>"
argument_list|,
name|result
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|result
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|result
operator|.
name|payload
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|contexts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|contexts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Both have "bar" or "baz" context:
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
name|asSet
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a penny saved is a penny<b>ear</b>ned"
argument_list|,
name|result
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|result
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|result
operator|.
name|payload
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|contexts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|contexts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lend me your<b>ear</b>"
argument_list|,
name|result
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|result
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|result
operator|.
name|payload
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|contexts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|contexts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Only one has "foo" and "bar" context:
name|contextInfo
operator|.
name|clear
argument_list|()
expr_stmt|;
name|contextInfo
operator|.
name|put
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|contextInfo
operator|.
name|put
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
name|contextInfo
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lend me your<b>ear</b>"
argument_list|,
name|result
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|result
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|result
operator|.
name|payload
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|contexts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|contexts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// None have "bar" and "baz" context:
name|contextInfo
operator|.
name|clear
argument_list|()
expr_stmt|;
name|contextInfo
operator|.
name|put
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|contextInfo
operator|.
name|put
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
name|contextInfo
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// None do not have "foo" and do not have "bar" context:
name|contextInfo
operator|.
name|clear
argument_list|()
expr_stmt|;
name|contextInfo
operator|.
name|put
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|contextInfo
operator|.
name|put
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
name|contextInfo
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Both do not have "bar" and do not have "baz" context:
name|contextInfo
operator|.
name|clear
argument_list|()
expr_stmt|;
name|contextInfo
operator|.
name|put
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|contextInfo
operator|.
name|put
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
name|asSet
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a penny saved is a penny<b>ear</b>ned"
argument_list|,
name|result
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|result
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|result
operator|.
name|payload
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|contexts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|contexts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lend me your<b>ear</b>"
argument_list|,
name|result
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|result
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|result
operator|.
name|payload
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|contexts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|contexts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Only one has "foo" and does not have "bar" context:
name|contextInfo
operator|.
name|clear
argument_list|()
expr_stmt|;
name|contextInfo
operator|.
name|put
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|contextInfo
operator|.
name|put
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
name|contextInfo
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a penny saved is a penny<b>ear</b>ned"
argument_list|,
name|result
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|result
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|result
operator|.
name|payload
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|contexts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|contexts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contexts
operator|.
name|contains
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
