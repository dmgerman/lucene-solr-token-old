begin_unit
begin_package
DECL|package|org.apache.lucene.search.suggest.analyzing
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|analyzing
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|StopFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|CharArraySet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|Lookup
operator|.
name|LookupResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|Input
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|InputArrayIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressCodecs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_comment
comment|// Test requires postings offsets:
end_comment
begin_class
annotation|@
name|SuppressCodecs
argument_list|(
block|{
literal|"Lucene3x"
block|,
literal|"MockFixedIntBlock"
block|,
literal|"MockVariableIntBlock"
block|,
literal|"MockSep"
block|,
literal|"MockRandom"
block|}
argument_list|)
DECL|class|AnalyzingInfixSuggesterTest
specifier|public
class|class
name|AnalyzingInfixSuggesterTest
extends|extends
name|LuceneTestCase
block|{
DECL|method|testBasic
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|Input
name|keys
index|[]
init|=
operator|new
name|Input
index|[]
block|{
operator|new
name|Input
argument_list|(
literal|"lend me your ear"
argument_list|,
literal|8
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
block|,
operator|new
name|Input
argument_list|(
literal|"a penny saved is a penny earned"
argument_list|,
literal|10
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|)
block|,     }
decl_stmt|;
name|File
name|tempDir
init|=
name|_TestUtil
operator|.
name|getTempDir
argument_list|(
literal|"AnalyzingInfixSuggesterTest"
argument_list|)
decl_stmt|;
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AnalyzingInfixSuggester
name|suggester
init|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|tempDir
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
literal|3
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Directory
name|getDirectory
parameter_list|(
name|File
name|path
parameter_list|)
block|{
return|return
name|newDirectory
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|suggester
operator|.
name|build
argument_list|(
operator|new
name|InputArrayIterator
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|results
init|=
name|suggester
operator|.
name|lookup
argument_list|(
name|_TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a penny saved is a penny<b>ear</b>ned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lend me your<b>ear</b>"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|_TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear "
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lend me your<b>ear</b>"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|_TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"pen"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a<b>pen</b>ny saved is a<b>pen</b>ny earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|_TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"p"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a<b>p</b>enny saved is a<b>p</b>enny earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testAfterLoad
specifier|public
name|void
name|testAfterLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|Input
name|keys
index|[]
init|=
operator|new
name|Input
index|[]
block|{
operator|new
name|Input
argument_list|(
literal|"lend me your ear"
argument_list|,
literal|8
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
block|,
operator|new
name|Input
argument_list|(
literal|"a penny saved is a penny earned"
argument_list|,
literal|10
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|)
block|,     }
decl_stmt|;
name|File
name|tempDir
init|=
name|_TestUtil
operator|.
name|getTempDir
argument_list|(
literal|"AnalyzingInfixSuggesterTest"
argument_list|)
decl_stmt|;
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AnalyzingInfixSuggester
name|suggester
init|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|tempDir
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
literal|3
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Directory
name|getDirectory
parameter_list|(
name|File
name|path
parameter_list|)
block|{
return|return
name|newFSDirectory
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|suggester
operator|.
name|build
argument_list|(
operator|new
name|InputArrayIterator
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
name|suggester
operator|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|tempDir
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
literal|3
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Directory
name|getDirectory
parameter_list|(
name|File
name|path
parameter_list|)
block|{
return|return
name|newFSDirectory
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|results
init|=
name|suggester
operator|.
name|lookup
argument_list|(
name|_TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a penny saved is a penny<b>ear</b>ned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Used to return highlighted result; see {@link    *  LookupResult#highlightKey} */
DECL|class|LookupHighlightFragment
specifier|private
specifier|static
specifier|final
class|class
name|LookupHighlightFragment
block|{
comment|/** Portion of text for this fragment. */
DECL|field|text
specifier|public
specifier|final
name|String
name|text
decl_stmt|;
comment|/** True if this text matched a part of the user's      *  query. */
DECL|field|isHit
specifier|public
specifier|final
name|boolean
name|isHit
decl_stmt|;
comment|/** Sole constructor. */
DECL|method|LookupHighlightFragment
specifier|public
name|LookupHighlightFragment
parameter_list|(
name|String
name|text
parameter_list|,
name|boolean
name|isHit
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
name|this
operator|.
name|isHit
operator|=
name|isHit
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"LookupHighlightFragment(text="
operator|+
name|text
operator|+
literal|" isHit="
operator|+
name|isHit
operator|+
literal|")"
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testHighlightAsObject
specifier|public
name|void
name|testHighlightAsObject
parameter_list|()
throws|throws
name|Exception
block|{
name|Input
name|keys
index|[]
init|=
operator|new
name|Input
index|[]
block|{
operator|new
name|Input
argument_list|(
literal|"a penny saved is a penny earned"
argument_list|,
literal|10
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|)
block|,     }
decl_stmt|;
name|File
name|tempDir
init|=
name|_TestUtil
operator|.
name|getTempDir
argument_list|(
literal|"AnalyzingInfixSuggesterTest"
argument_list|)
decl_stmt|;
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AnalyzingInfixSuggester
name|suggester
init|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|tempDir
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
literal|3
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Directory
name|getDirectory
parameter_list|(
name|File
name|path
parameter_list|)
block|{
return|return
name|newDirectory
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Object
name|highlight
parameter_list|(
name|String
name|text
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|matchedTokens
parameter_list|,
name|String
name|prefixToken
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|TokenStream
name|ts
init|=
name|queryAnalyzer
operator|.
name|tokenStream
argument_list|(
literal|"text"
argument_list|,
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
argument_list|)
init|)
block|{
name|CharTermAttribute
name|termAtt
init|=
name|ts
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|OffsetAttribute
name|offsetAtt
init|=
name|ts
operator|.
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|ts
operator|.
name|reset
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|LookupHighlightFragment
argument_list|>
name|fragments
init|=
operator|new
name|ArrayList
argument_list|<
name|LookupHighlightFragment
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|upto
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|ts
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|termAtt
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|startOffset
init|=
name|offsetAtt
operator|.
name|startOffset
argument_list|()
decl_stmt|;
name|int
name|endOffset
init|=
name|offsetAtt
operator|.
name|endOffset
argument_list|()
decl_stmt|;
if|if
condition|(
name|upto
operator|<
name|startOffset
condition|)
block|{
name|fragments
operator|.
name|add
argument_list|(
operator|new
name|LookupHighlightFragment
argument_list|(
name|text
operator|.
name|substring
argument_list|(
name|upto
argument_list|,
name|startOffset
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|upto
operator|=
name|startOffset
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|upto
operator|>
name|startOffset
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|matchedTokens
operator|.
name|contains
argument_list|(
name|token
argument_list|)
condition|)
block|{
comment|// Token matches.
name|fragments
operator|.
name|add
argument_list|(
operator|new
name|LookupHighlightFragment
argument_list|(
name|text
operator|.
name|substring
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|upto
operator|=
name|endOffset
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prefixToken
operator|!=
literal|null
operator|&&
name|token
operator|.
name|startsWith
argument_list|(
name|prefixToken
argument_list|)
condition|)
block|{
name|fragments
operator|.
name|add
argument_list|(
operator|new
name|LookupHighlightFragment
argument_list|(
name|text
operator|.
name|substring
argument_list|(
name|startOffset
argument_list|,
name|startOffset
operator|+
name|prefixToken
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefixToken
operator|.
name|length
argument_list|()
operator|<
name|token
operator|.
name|length
argument_list|()
condition|)
block|{
name|fragments
operator|.
name|add
argument_list|(
operator|new
name|LookupHighlightFragment
argument_list|(
name|text
operator|.
name|substring
argument_list|(
name|startOffset
operator|+
name|prefixToken
operator|.
name|length
argument_list|()
argument_list|,
name|startOffset
operator|+
name|token
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|upto
operator|=
name|endOffset
expr_stmt|;
block|}
block|}
name|ts
operator|.
name|end
argument_list|()
expr_stmt|;
name|int
name|endOffset
init|=
name|offsetAtt
operator|.
name|endOffset
argument_list|()
decl_stmt|;
if|if
condition|(
name|upto
operator|<
name|endOffset
condition|)
block|{
name|fragments
operator|.
name|add
argument_list|(
operator|new
name|LookupHighlightFragment
argument_list|(
name|text
operator|.
name|substring
argument_list|(
name|upto
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|fragments
return|;
block|}
block|}
block|}
decl_stmt|;
name|suggester
operator|.
name|build
argument_list|(
operator|new
name|InputArrayIterator
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|results
init|=
name|suggester
operator|.
name|lookup
argument_list|(
name|_TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a penny saved is a penny<b>ear</b>ned"
argument_list|,
name|toString
argument_list|(
operator|(
name|List
argument_list|<
name|LookupHighlightFragment
argument_list|>
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|List
argument_list|<
name|LookupHighlightFragment
argument_list|>
name|fragments
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|LookupHighlightFragment
name|fragment
range|:
name|fragments
control|)
block|{
if|if
condition|(
name|fragment
operator|.
name|isHit
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<b>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|fragment
operator|.
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|fragment
operator|.
name|isHit
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"</b>"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|testRandomMinPrefixLength
specifier|public
name|void
name|testRandomMinPrefixLength
parameter_list|()
throws|throws
name|Exception
block|{
name|Input
name|keys
index|[]
init|=
operator|new
name|Input
index|[]
block|{
operator|new
name|Input
argument_list|(
literal|"lend me your ear"
argument_list|,
literal|8
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
block|,
operator|new
name|Input
argument_list|(
literal|"a penny saved is a penny earned"
argument_list|,
literal|10
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|)
block|,     }
decl_stmt|;
name|File
name|tempDir
init|=
name|_TestUtil
operator|.
name|getTempDir
argument_list|(
literal|"AnalyzingInfixSuggesterTest"
argument_list|)
decl_stmt|;
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|minPrefixLength
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|AnalyzingInfixSuggester
name|suggester
init|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|tempDir
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
name|minPrefixLength
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Directory
name|getDirectory
parameter_list|(
name|File
name|path
parameter_list|)
block|{
return|return
name|newFSDirectory
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|suggester
operator|.
name|build
argument_list|(
operator|new
name|InputArrayIterator
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|2
condition|;
name|j
operator|++
control|)
block|{
name|boolean
name|doHighlight
init|=
name|j
operator|==
literal|0
decl_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|results
init|=
name|suggester
operator|.
name|lookup
argument_list|(
name|_TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
name|doHighlight
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|doHighlight
condition|)
block|{
name|assertEquals
argument_list|(
literal|"a penny saved is a penny<b>ear</b>ned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"a penny saved is a penny earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|doHighlight
condition|)
block|{
name|assertEquals
argument_list|(
literal|"lend me your<b>ear</b>"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"lend me your ear"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|_TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"ear "
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
name|doHighlight
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|doHighlight
condition|)
block|{
name|assertEquals
argument_list|(
literal|"lend me your<b>ear</b>"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"lend me your ear"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|_TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"pen"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
name|doHighlight
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|doHighlight
condition|)
block|{
name|assertEquals
argument_list|(
literal|"a<b>pen</b>ny saved is a<b>pen</b>ny earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"a penny saved is a penny earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|_TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"p"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
name|doHighlight
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|doHighlight
condition|)
block|{
name|assertEquals
argument_list|(
literal|"a<b>p</b>enny saved is a<b>p</b>enny earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"a penny saved is a penny earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
argument_list|)
expr_stmt|;
block|}
comment|// Make sure things still work after close and reopen:
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
name|suggester
operator|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|tempDir
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
name|minPrefixLength
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Directory
name|getDirectory
parameter_list|(
name|File
name|path
parameter_list|)
block|{
return|return
name|newFSDirectory
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testHighlight
specifier|public
name|void
name|testHighlight
parameter_list|()
throws|throws
name|Exception
block|{
name|Input
name|keys
index|[]
init|=
operator|new
name|Input
index|[]
block|{
operator|new
name|Input
argument_list|(
literal|"a penny saved is a penny earned"
argument_list|,
literal|10
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|)
block|,     }
decl_stmt|;
name|File
name|tempDir
init|=
name|_TestUtil
operator|.
name|getTempDir
argument_list|(
literal|"AnalyzingInfixSuggesterTest"
argument_list|)
decl_stmt|;
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AnalyzingInfixSuggester
name|suggester
init|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|tempDir
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
literal|3
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Directory
name|getDirectory
parameter_list|(
name|File
name|path
parameter_list|)
block|{
return|return
name|newDirectory
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|suggester
operator|.
name|build
argument_list|(
operator|new
name|InputArrayIterator
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|results
init|=
name|suggester
operator|.
name|lookup
argument_list|(
name|_TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"penn"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a<b>penn</b>y saved is a<b>penn</b>y earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testHighlightCaseChange
specifier|public
name|void
name|testHighlightCaseChange
parameter_list|()
throws|throws
name|Exception
block|{
name|Input
name|keys
index|[]
init|=
operator|new
name|Input
index|[]
block|{
operator|new
name|Input
argument_list|(
literal|"a Penny saved is a penny earned"
argument_list|,
literal|10
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|)
block|,     }
decl_stmt|;
name|File
name|tempDir
init|=
name|_TestUtil
operator|.
name|getTempDir
argument_list|(
literal|"AnalyzingInfixSuggesterTest"
argument_list|)
decl_stmt|;
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|AnalyzingInfixSuggester
name|suggester
init|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|tempDir
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
literal|3
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Directory
name|getDirectory
parameter_list|(
name|File
name|path
parameter_list|)
block|{
return|return
name|newDirectory
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|suggester
operator|.
name|build
argument_list|(
operator|new
name|InputArrayIterator
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|results
init|=
name|suggester
operator|.
name|lookup
argument_list|(
name|_TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"penn"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a<b>Penn</b>y saved is a<b>penn</b>y earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Try again, but overriding addPrefixMatch to highlight
comment|// the entire hit:
name|suggester
operator|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|tempDir
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
literal|3
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|addPrefixMatch
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|surface
parameter_list|,
name|String
name|analyzed
parameter_list|,
name|String
name|prefixToken
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<b>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|surface
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</b>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Directory
name|getDirectory
parameter_list|(
name|File
name|path
parameter_list|)
block|{
return|return
name|newDirectory
argument_list|()
return|;
block|}
block|}
expr_stmt|;
name|suggester
operator|.
name|build
argument_list|(
operator|new
name|InputArrayIterator
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|suggester
operator|.
name|lookup
argument_list|(
name|_TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"penn"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a<b>Penny</b> saved is a<b>penny</b> earned"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDoubleClose
specifier|public
name|void
name|testDoubleClose
parameter_list|()
throws|throws
name|Exception
block|{
name|Input
name|keys
index|[]
init|=
operator|new
name|Input
index|[]
block|{
operator|new
name|Input
argument_list|(
literal|"a penny saved is a penny earned"
argument_list|,
literal|10
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|)
block|,     }
decl_stmt|;
name|File
name|tempDir
init|=
name|_TestUtil
operator|.
name|getTempDir
argument_list|(
literal|"AnalyzingInfixSuggesterTest"
argument_list|)
decl_stmt|;
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AnalyzingInfixSuggester
name|suggester
init|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|tempDir
argument_list|,
name|a
argument_list|,
name|a
argument_list|,
literal|3
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Directory
name|getDirectory
parameter_list|(
name|File
name|path
parameter_list|)
block|{
return|return
name|newDirectory
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|suggester
operator|.
name|build
argument_list|(
operator|new
name|InputArrayIterator
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSuggestStopFilter
specifier|public
name|void
name|testSuggestStopFilter
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CharArraySet
name|stopWords
init|=
name|StopFilter
operator|.
name|makeStopSet
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Analyzer
name|indexAnalyzer
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|MockTokenizer
name|tokens
init|=
operator|new
name|MockTokenizer
argument_list|(
name|reader
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokens
argument_list|,
operator|new
name|StopFilter
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|tokens
argument_list|,
name|stopWords
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Analyzer
name|queryAnalyzer
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|MockTokenizer
name|tokens
init|=
operator|new
name|MockTokenizer
argument_list|(
name|reader
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokens
argument_list|,
operator|new
name|SuggestStopFilter
argument_list|(
name|tokens
argument_list|,
name|stopWords
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|File
name|tempDir
init|=
name|_TestUtil
operator|.
name|getTempDir
argument_list|(
literal|"AnalyzingInfixSuggesterTest"
argument_list|)
decl_stmt|;
name|AnalyzingInfixSuggester
name|suggester
init|=
operator|new
name|AnalyzingInfixSuggester
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|tempDir
argument_list|,
name|indexAnalyzer
argument_list|,
name|queryAnalyzer
argument_list|,
literal|3
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Directory
name|getDirectory
parameter_list|(
name|File
name|path
parameter_list|)
block|{
return|return
name|newDirectory
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|Input
name|keys
index|[]
init|=
operator|new
name|Input
index|[]
block|{
operator|new
name|Input
argument_list|(
literal|"a bob for apples"
argument_list|,
literal|10
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"foobaz"
argument_list|)
argument_list|)
block|,     }
decl_stmt|;
name|suggester
operator|.
name|build
argument_list|(
operator|new
name|InputArrayIterator
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|results
init|=
name|suggester
operator|.
name|lookup
argument_list|(
name|_TestUtil
operator|.
name|stringToCharSequence
argument_list|(
literal|"a"
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a bob for<b>a</b>pples"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
