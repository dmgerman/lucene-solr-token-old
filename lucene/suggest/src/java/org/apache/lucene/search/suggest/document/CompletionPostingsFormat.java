begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.search.suggest.document
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|document
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReadState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|FST
import|;
end_import
begin_comment
comment|/**  *<p>  * A {@link PostingsFormat} which supports document suggestion based on  * indexed {@link SuggestField}s.  * Document suggestion is based on an weighted FST which map analyzed  * terms of a {@link SuggestField} to its surface form and document id.  *</p>  *<p>  * Files:  *<ul>  *<li><tt>.lkp</tt>:<a href="#Completiondictionary">Completion Dictionary</a></li>  *<li><tt>.cmp</tt>:<a href="#Completionindex">Completion Index</a></li>  *</ul>  *<p>  *<a name="Completionictionary"></a>  *<h3>Completion Dictionary</h3>  *<p>The .lkp file contains an FST for each suggest field  *</p>  *<ul>  *<li>CompletionDict (.lkp) --&gt; Header, FST<sup>NumSuggestFields</sup>, Footer</li>  *<li>Header --&gt; {@link CodecUtil#writeHeader CodecHeader}</li>  *<!-- TODO: should the FST output be mentioned at all? -->  *<li>FST --&gt; {@link FST FST&lt;Long, BytesRef&gt;}</li>  *<li>Footer --&gt; {@link CodecUtil#writeFooter CodecFooter}</li>  *</ul>  *<p>Notes:</p>  *<ul>  *<li>Header is a {@link CodecUtil#writeHeader CodecHeader} storing the version information  *     for the Completion implementation.</li>  *<li>FST maps all analyzed forms to surface forms of a SuggestField</li>  *</ul>  *<a name="Completionindex"></a>  *<h3>Completion Index</h3>  *<p>The .cmp file contains an index into the completion dictionary, so that it can be  * accessed randomly.</p>  *<ul>  *<li>CompletionIndex (.cmp) --&gt; Header, NumSuggestFields, Entry<sup>NumSuggestFields</sup>, Footer</li>  *<li>Header --&gt; {@link CodecUtil#writeHeader CodecHeader}</li>  *<li>NumSuggestFields --&gt; {@link DataOutput#writeVInt Uint32}</li>  *<li>Entry --&gt; FieldNumber, CompletionDictionaryOffset, MinWeight, MaxWeight, Type</li>  *<li>FieldNumber --&gt; {@link DataOutput#writeVInt Uint32}</li>  *<li>CompletionDictionaryOffset --&gt; {@link DataOutput#writeVLong  Uint64}</li>  *<li>MinWeight --&gt; {@link DataOutput#writeVLong  Uint64}</li>  *<li>MaxWeight --&gt; {@link DataOutput#writeVLong  Uint64}</li>  *<li>Type --&gt; {@link DataOutput#writeByte  Byte}</li>  *<li>Footer --&gt; {@link CodecUtil#writeFooter CodecFooter}</li>  *</ul>  *<p>Notes:</p>  *<ul>  *<li>Header is a {@link CodecUtil#writeHeader CodecHeader} storing the version information  *     for the Completion implementation.</li>  *<li>NumSuggestFields is the number of suggest fields indexed</li>  *<li>FieldNumber is the fields number from {@link FieldInfos}. (.fnm)</li>  *<li>CompletionDictionaryOffset is the file offset of a field's FST in CompletionDictionary (.lkp)</li>  *<li>MinWeight and MaxWeight are the global minimum and maximum weight for the field</li>  *<li>Type indicates if the suggester has context or not</li>  *</ul>  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|CompletionPostingsFormat
specifier|public
specifier|abstract
class|class
name|CompletionPostingsFormat
extends|extends
name|PostingsFormat
block|{
DECL|field|CODEC_NAME
specifier|static
specifier|final
name|String
name|CODEC_NAME
init|=
literal|"completion"
decl_stmt|;
DECL|field|COMPLETION_CODEC_VERSION
specifier|static
specifier|final
name|int
name|COMPLETION_CODEC_VERSION
init|=
literal|1
decl_stmt|;
DECL|field|COMPLETION_VERSION_CURRENT
specifier|static
specifier|final
name|int
name|COMPLETION_VERSION_CURRENT
init|=
name|COMPLETION_CODEC_VERSION
decl_stmt|;
DECL|field|INDEX_EXTENSION
specifier|static
specifier|final
name|String
name|INDEX_EXTENSION
init|=
literal|"cmp"
decl_stmt|;
DECL|field|DICT_EXTENSION
specifier|static
specifier|final
name|String
name|DICT_EXTENSION
init|=
literal|"lkp"
decl_stmt|;
comment|/**    * Used only by core Lucene at read-time via Service Provider instantiation    */
DECL|method|CompletionPostingsFormat
specifier|public
name|CompletionPostingsFormat
parameter_list|()
block|{
name|super
argument_list|(
name|CODEC_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**    * Concrete implementation should specify the delegating postings format    */
DECL|method|delegatePostingsFormat
specifier|protected
specifier|abstract
name|PostingsFormat
name|delegatePostingsFormat
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|fieldsConsumer
specifier|public
name|FieldsConsumer
name|fieldsConsumer
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|PostingsFormat
name|delegatePostingsFormat
init|=
name|delegatePostingsFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegatePostingsFormat
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Error - "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" has been constructed without a choice of PostingsFormat"
argument_list|)
throw|;
block|}
return|return
operator|new
name|CompletionFieldsConsumer
argument_list|(
name|delegatePostingsFormat
argument_list|,
name|state
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|fieldsProducer
specifier|public
name|FieldsProducer
name|fieldsProducer
parameter_list|(
name|SegmentReadState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|CompletionFieldsProducer
argument_list|(
name|state
argument_list|)
return|;
block|}
block|}
end_class
end_unit
