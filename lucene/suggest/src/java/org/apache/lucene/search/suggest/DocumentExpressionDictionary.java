begin_unit
begin_package
DECL|package|org.apache.lucene.search.suggest
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import
begin_comment
comment|// javadocs
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|expressions
operator|.
name|Expression
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|expressions
operator|.
name|SimpleBindings
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|expressions
operator|.
name|js
operator|.
name|JavascriptCompiler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|ReaderUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|StoredDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefIterator
import|;
end_import
begin_comment
comment|/**  *<p>  * Dictionary with terms and optionally payload information   * taken from stored fields in a Lucene index. Similar to   * {@link DocumentDictionary}, except it computes the weight  * of the terms in a document based on a user-defined expression  * having one or more {@link NumericDocValuesField} in the document.  *</p>  *<b>NOTE:</b>   *<ul>  *<li>  *      The term and (optionally) payload fields have to be  *      stored  *</li>  *<li>  *      if the term or (optionally) payload fields supplied  *      do not have a value for a document, then the document is   *      rejected by the dictionary  *</li>  *<li>  *      All the fields used in<code>weightExpression</code> should  *      have values for all documents, if any of the fields do not   *      have a value for a document, it will default to 0  *</li>  *</ul>  */
end_comment
begin_class
DECL|class|DocumentExpressionDictionary
specifier|public
class|class
name|DocumentExpressionDictionary
extends|extends
name|DocumentDictionary
block|{
DECL|field|weightsValueSource
specifier|private
specifier|final
name|ValueSource
name|weightsValueSource
decl_stmt|;
comment|/**    * Creates a new dictionary with the contents of the fields named<code>field</code>    * for the terms and computes the corresponding weights of the term by compiling the    * user-defined<code>weightExpression</code> using the<code>sortFields</code>    * bindings.    */
DECL|method|DocumentExpressionDictionary
specifier|public
name|DocumentExpressionDictionary
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|weightExpression
parameter_list|,
name|Set
argument_list|<
name|SortField
argument_list|>
name|sortFields
parameter_list|)
block|{
name|this
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
name|weightExpression
argument_list|,
name|sortFields
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new dictionary with the contents of the fields named<code>field</code>    * for the terms,<code>payloadField</code> for the corresponding payloads    * and computes the corresponding weights of the term by compiling the    * user-defined<code>weightExpression</code> using the<code>sortFields</code>    * bindings.    */
DECL|method|DocumentExpressionDictionary
specifier|public
name|DocumentExpressionDictionary
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|weightExpression
parameter_list|,
name|Set
argument_list|<
name|SortField
argument_list|>
name|sortFields
parameter_list|,
name|String
name|payload
parameter_list|)
block|{
name|super
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
literal|null
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|Expression
name|expression
init|=
literal|null
decl_stmt|;
try|try
block|{
name|expression
operator|=
name|JavascriptCompiler
operator|.
name|compile
argument_list|(
name|weightExpression
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
name|SimpleBindings
name|bindings
init|=
operator|new
name|SimpleBindings
argument_list|()
decl_stmt|;
for|for
control|(
name|SortField
name|sortField
range|:
name|sortFields
control|)
block|{
name|bindings
operator|.
name|add
argument_list|(
name|sortField
argument_list|)
expr_stmt|;
block|}
name|weightsValueSource
operator|=
name|expression
operator|.
name|getValueSource
argument_list|(
name|bindings
argument_list|)
expr_stmt|;
block|}
comment|/**     * Creates a new dictionary with the contents of the fields named<code>field</code>    * for the terms,<code>payloadField</code> for the corresponding payloads    * and uses the<code>weightsValueSource</code> supplied to determine the     * score.    */
DECL|method|DocumentExpressionDictionary
specifier|public
name|DocumentExpressionDictionary
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|ValueSource
name|weightsValueSource
parameter_list|,
name|String
name|payload
parameter_list|)
block|{
name|super
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
literal|null
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|this
operator|.
name|weightsValueSource
operator|=
name|weightsValueSource
expr_stmt|;
block|}
comment|/**     * Creates a new dictionary with the contents of the fields named<code>field</code>    * for the terms and uses the<code>weightsValueSource</code> supplied to determine the     * score.    */
DECL|method|DocumentExpressionDictionary
specifier|public
name|DocumentExpressionDictionary
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|ValueSource
name|weightsValueSource
parameter_list|)
block|{
name|super
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|weightsValueSource
operator|=
name|weightsValueSource
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWordsIterator
specifier|public
name|BytesRefIterator
name|getWordsIterator
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|DocumentExpressionInputIterator
argument_list|(
name|payloadField
operator|!=
literal|null
argument_list|)
return|;
block|}
DECL|class|DocumentExpressionInputIterator
specifier|final
class|class
name|DocumentExpressionInputIterator
extends|extends
name|DocumentDictionary
operator|.
name|DocumentInputIterator
block|{
DECL|field|currentWeightValues
specifier|private
name|FunctionValues
name|currentWeightValues
decl_stmt|;
comment|/** leaves of the reader */
DECL|field|leaves
specifier|private
specifier|final
name|List
argument_list|<
name|AtomicReaderContext
argument_list|>
name|leaves
decl_stmt|;
comment|/** starting docIds of all the leaves */
DECL|field|starts
specifier|private
specifier|final
name|int
index|[]
name|starts
decl_stmt|;
comment|/** current leave index */
DECL|field|currentLeafIndex
specifier|private
name|int
name|currentLeafIndex
init|=
literal|0
decl_stmt|;
DECL|method|DocumentExpressionInputIterator
specifier|public
name|DocumentExpressionInputIterator
parameter_list|(
name|boolean
name|hasPayloads
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|hasPayloads
argument_list|)
expr_stmt|;
name|leaves
operator|=
name|reader
operator|.
name|leaves
argument_list|()
expr_stmt|;
name|starts
operator|=
operator|new
name|int
index|[
name|leaves
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leaves
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|starts
index|[
name|i
index|]
operator|=
name|leaves
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|docBase
expr_stmt|;
block|}
name|starts
index|[
name|leaves
operator|.
name|size
argument_list|()
index|]
operator|=
name|reader
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
name|currentWeightValues
operator|=
operator|(
name|leaves
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|?
name|weightsValueSource
operator|.
name|getValues
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
name|leaves
operator|.
name|get
argument_list|(
name|currentLeafIndex
argument_list|)
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
comment|/**       * Returns the weight for the current<code>docId</code> as computed       * by the<code>weightsValueSource</code>      * */
annotation|@
name|Override
DECL|method|getWeight
specifier|protected
name|long
name|getWeight
parameter_list|(
name|StoredDocument
name|doc
parameter_list|,
name|int
name|docId
parameter_list|)
block|{
if|if
condition|(
name|currentWeightValues
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|subIndex
init|=
name|ReaderUtil
operator|.
name|subIndex
argument_list|(
name|docId
argument_list|,
name|starts
argument_list|)
decl_stmt|;
if|if
condition|(
name|subIndex
operator|!=
name|currentLeafIndex
condition|)
block|{
name|currentLeafIndex
operator|=
name|subIndex
expr_stmt|;
try|try
block|{
name|currentWeightValues
operator|=
name|weightsValueSource
operator|.
name|getValues
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
name|leaves
operator|.
name|get
argument_list|(
name|currentLeafIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
return|return
name|currentWeightValues
operator|.
name|longVal
argument_list|(
name|docId
operator|-
name|starts
index|[
name|subIndex
index|]
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
