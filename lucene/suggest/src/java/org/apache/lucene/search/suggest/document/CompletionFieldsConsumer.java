begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.search.suggest.document
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|document
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|document
operator|.
name|CompletionPostingsFormat
operator|.
name|CODEC_NAME
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|document
operator|.
name|CompletionPostingsFormat
operator|.
name|COMPLETION_VERSION_CURRENT
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|document
operator|.
name|CompletionPostingsFormat
operator|.
name|DICT_EXTENSION
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|document
operator|.
name|CompletionPostingsFormat
operator|.
name|INDEX_EXTENSION
import|;
end_import
begin_comment
comment|/**  *<p>  * Weighted FSTs for any indexed {@link SuggestField} is built on {@link #write(Fields)}.  * A weighted FST maps the analyzed forms of a field to its  * surface form and document id. FSTs are stored in the CompletionDictionary (.lkp).  *</p>  *<p>  * The file offsets of a field's FST are stored in the CompletionIndex (.cmp)  * along with the field's internal number {@link FieldInfo#number} on {@link #close()}.  *</p>  *  */
end_comment
begin_class
DECL|class|CompletionFieldsConsumer
specifier|final
class|class
name|CompletionFieldsConsumer
extends|extends
name|FieldsConsumer
block|{
DECL|field|delegatePostingsFormatName
specifier|private
specifier|final
name|String
name|delegatePostingsFormatName
decl_stmt|;
DECL|field|seenFields
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CompletionMetaData
argument_list|>
name|seenFields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|state
specifier|private
specifier|final
name|SegmentWriteState
name|state
decl_stmt|;
DECL|field|dictOut
specifier|private
name|IndexOutput
name|dictOut
decl_stmt|;
DECL|field|delegateFieldsConsumer
specifier|private
name|FieldsConsumer
name|delegateFieldsConsumer
decl_stmt|;
DECL|method|CompletionFieldsConsumer
name|CompletionFieldsConsumer
parameter_list|(
name|PostingsFormat
name|delegatePostingsFormat
parameter_list|,
name|SegmentWriteState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|delegatePostingsFormatName
operator|=
name|delegatePostingsFormat
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|String
name|dictFile
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|,
name|DICT_EXTENSION
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|this
operator|.
name|delegateFieldsConsumer
operator|=
name|delegatePostingsFormat
operator|.
name|fieldsConsumer
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|dictOut
operator|=
name|state
operator|.
name|directory
operator|.
name|createOutput
argument_list|(
name|dictFile
argument_list|,
name|state
operator|.
name|context
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|writeIndexHeader
argument_list|(
name|dictOut
argument_list|,
name|CODEC_NAME
argument_list|,
name|COMPLETION_VERSION_CURRENT
argument_list|,
name|state
operator|.
name|segmentInfo
operator|.
name|getId
argument_list|()
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|dictOut
argument_list|,
name|delegateFieldsConsumer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|Fields
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
name|delegateFieldsConsumer
operator|.
name|write
argument_list|(
name|fields
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|CompletionTermWriter
name|termWriter
init|=
operator|new
name|CompletionTermWriter
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// write terms
name|BytesRef
name|term
decl_stmt|;
while|while
condition|(
operator|(
name|term
operator|=
name|termsEnum
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|termWriter
operator|.
name|write
argument_list|(
name|term
argument_list|,
name|termsEnum
argument_list|)
expr_stmt|;
block|}
comment|// store lookup, if needed
name|long
name|filePointer
init|=
name|dictOut
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
if|if
condition|(
name|termWriter
operator|.
name|finish
argument_list|(
name|dictOut
argument_list|)
condition|)
block|{
name|seenFields
operator|.
name|put
argument_list|(
name|field
argument_list|,
operator|new
name|CompletionMetaData
argument_list|(
name|filePointer
argument_list|,
name|termWriter
operator|.
name|minWeight
argument_list|,
name|termWriter
operator|.
name|maxWeight
argument_list|,
name|termWriter
operator|.
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|closed
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
name|closed
operator|=
literal|true
expr_stmt|;
name|String
name|indexFile
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|,
name|INDEX_EXTENSION
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
init|(
name|IndexOutput
name|indexOut
init|=
name|state
operator|.
name|directory
operator|.
name|createOutput
argument_list|(
name|indexFile
argument_list|,
name|state
operator|.
name|context
argument_list|)
init|)
block|{
name|delegateFieldsConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|CodecUtil
operator|.
name|writeIndexHeader
argument_list|(
name|indexOut
argument_list|,
name|CODEC_NAME
argument_list|,
name|COMPLETION_VERSION_CURRENT
argument_list|,
name|state
operator|.
name|segmentInfo
operator|.
name|getId
argument_list|()
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|)
expr_stmt|;
comment|/*        * we write the delegate postings format name so we can load it        * without getting an instance in the ctor        */
name|indexOut
operator|.
name|writeString
argument_list|(
name|delegatePostingsFormatName
argument_list|)
expr_stmt|;
comment|// write # of seen fields
name|indexOut
operator|.
name|writeVInt
argument_list|(
name|seenFields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// write field numbers and dictOut offsets
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CompletionMetaData
argument_list|>
name|seenField
range|:
name|seenFields
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|FieldInfo
name|fieldInfo
init|=
name|state
operator|.
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|seenField
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|indexOut
operator|.
name|writeVInt
argument_list|(
name|fieldInfo
operator|.
name|number
argument_list|)
expr_stmt|;
name|CompletionMetaData
name|metaData
init|=
name|seenField
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|indexOut
operator|.
name|writeVLong
argument_list|(
name|metaData
operator|.
name|filePointer
argument_list|)
expr_stmt|;
name|indexOut
operator|.
name|writeVLong
argument_list|(
name|metaData
operator|.
name|minWeight
argument_list|)
expr_stmt|;
name|indexOut
operator|.
name|writeVLong
argument_list|(
name|metaData
operator|.
name|maxWeight
argument_list|)
expr_stmt|;
name|indexOut
operator|.
name|writeByte
argument_list|(
name|metaData
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|indexOut
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|dictOut
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|dictOut
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|dictOut
argument_list|,
name|delegateFieldsConsumer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|CompletionMetaData
specifier|private
specifier|static
class|class
name|CompletionMetaData
block|{
DECL|field|filePointer
specifier|private
specifier|final
name|long
name|filePointer
decl_stmt|;
DECL|field|minWeight
specifier|private
specifier|final
name|long
name|minWeight
decl_stmt|;
DECL|field|maxWeight
specifier|private
specifier|final
name|long
name|maxWeight
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|byte
name|type
decl_stmt|;
DECL|method|CompletionMetaData
specifier|private
name|CompletionMetaData
parameter_list|(
name|long
name|filePointer
parameter_list|,
name|long
name|minWeight
parameter_list|,
name|long
name|maxWeight
parameter_list|,
name|byte
name|type
parameter_list|)
block|{
name|this
operator|.
name|filePointer
operator|=
name|filePointer
expr_stmt|;
name|this
operator|.
name|minWeight
operator|=
name|minWeight
expr_stmt|;
name|this
operator|.
name|maxWeight
operator|=
name|maxWeight
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
block|}
comment|// builds an FST based on the terms written
DECL|class|CompletionTermWriter
specifier|private
specifier|static
class|class
name|CompletionTermWriter
block|{
DECL|field|postingsEnum
specifier|private
name|PostingsEnum
name|postingsEnum
init|=
literal|null
decl_stmt|;
DECL|field|docCount
specifier|private
name|int
name|docCount
init|=
literal|0
decl_stmt|;
DECL|field|maxWeight
specifier|private
name|long
name|maxWeight
init|=
literal|0
decl_stmt|;
DECL|field|minWeight
specifier|private
name|long
name|minWeight
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|type
specifier|private
name|byte
name|type
decl_stmt|;
DECL|field|first
specifier|private
name|boolean
name|first
decl_stmt|;
DECL|field|scratch
specifier|private
specifier|final
name|BytesRefBuilder
name|scratch
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
DECL|field|builder
specifier|private
specifier|final
name|NRTSuggesterBuilder
name|builder
decl_stmt|;
DECL|method|CompletionTermWriter
specifier|public
name|CompletionTermWriter
parameter_list|()
block|{
name|builder
operator|=
operator|new
name|NRTSuggesterBuilder
argument_list|()
expr_stmt|;
name|first
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Stores the built FST in<code>output</code>      * Returns true if there was anything stored, false otherwise      */
DECL|method|finish
specifier|public
name|boolean
name|finish
parameter_list|(
name|IndexOutput
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|stored
init|=
name|builder
operator|.
name|store
argument_list|(
name|output
argument_list|)
decl_stmt|;
assert|assert
name|stored
operator|||
name|docCount
operator|==
literal|0
operator|:
literal|"the FST is null but docCount is != 0 actual value: ["
operator|+
name|docCount
operator|+
literal|"]"
assert|;
if|if
condition|(
name|docCount
operator|==
literal|0
condition|)
block|{
name|minWeight
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|stored
return|;
block|}
comment|/**      * Writes all postings (surface form, weight, document id) for<code>term</code>      */
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|BytesRef
name|term
parameter_list|,
name|TermsEnum
name|termsEnum
parameter_list|)
throws|throws
name|IOException
block|{
name|postingsEnum
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|postingsEnum
argument_list|,
name|PostingsEnum
operator|.
name|PAYLOADS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startTerm
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|int
name|docFreq
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|postingsEnum
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|int
name|docID
init|=
name|postingsEnum
operator|.
name|docID
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|postingsEnum
operator|.
name|freq
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|postingsEnum
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
assert|assert
name|postingsEnum
operator|.
name|getPayload
argument_list|()
operator|!=
literal|null
assert|;
name|BytesRef
name|payload
init|=
name|postingsEnum
operator|.
name|getPayload
argument_list|()
decl_stmt|;
name|ByteArrayDataInput
name|input
init|=
operator|new
name|ByteArrayDataInput
argument_list|(
name|payload
operator|.
name|bytes
argument_list|,
name|payload
operator|.
name|offset
argument_list|,
name|payload
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|input
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|scratch
operator|.
name|grow
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|scratch
operator|.
name|setLength
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|input
operator|.
name|readBytes
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|scratch
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|weight
init|=
name|input
operator|.
name|readVInt
argument_list|()
operator|-
literal|1
decl_stmt|;
name|maxWeight
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxWeight
argument_list|,
name|weight
argument_list|)
expr_stmt|;
name|minWeight
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minWeight
argument_list|,
name|weight
argument_list|)
expr_stmt|;
name|byte
name|type
init|=
name|input
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|type
operator|!=
name|type
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"single field name has mixed types"
argument_list|)
throw|;
block|}
name|builder
operator|.
name|addEntry
argument_list|(
name|docID
argument_list|,
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|weight
argument_list|)
expr_stmt|;
block|}
name|docFreq
operator|++
expr_stmt|;
name|docCount
operator|=
name|Math
operator|.
name|max
argument_list|(
name|docCount
argument_list|,
name|docFreq
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|finishTerm
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
