begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.search.suggest.document
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|document
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|BitsProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Operations
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|RegExp
import|;
end_import
begin_comment
comment|/**  * A {@link CompletionQuery} which takes a regular expression  * as the prefix of the query term.  *  *<p>  * Example usage of querying a prefix of 'sug' and 'sub'  * as a regular expression against a suggest field 'suggest_field':  *  *<pre class="prettyprint">  *  CompletionQuery query = new RegexCompletionQuery(new Term("suggest_field", "su[g|b]"));  *</pre>  *  *<p>  * See {@link RegExp} for the supported regular expression  * syntax  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|RegexCompletionQuery
specifier|public
class|class
name|RegexCompletionQuery
extends|extends
name|CompletionQuery
block|{
DECL|field|flags
specifier|private
specifier|final
name|int
name|flags
decl_stmt|;
DECL|field|maxDeterminizedStates
specifier|private
specifier|final
name|int
name|maxDeterminizedStates
decl_stmt|;
comment|/**    * Calls {@link RegexCompletionQuery#RegexCompletionQuery(Term, BitsProducer)}    * with no filter    */
DECL|method|RegexCompletionQuery
specifier|public
name|RegexCompletionQuery
parameter_list|(
name|Term
name|term
parameter_list|)
block|{
name|this
argument_list|(
name|term
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Calls {@link RegexCompletionQuery#RegexCompletionQuery(Term, int, int, BitsProducer)}    * enabling all optional regex syntax and<code>maxDeterminizedStates</code> of    * {@value Operations#DEFAULT_MAX_DETERMINIZED_STATES}    */
DECL|method|RegexCompletionQuery
specifier|public
name|RegexCompletionQuery
parameter_list|(
name|Term
name|term
parameter_list|,
name|BitsProducer
name|filter
parameter_list|)
block|{
name|this
argument_list|(
name|term
argument_list|,
name|RegExp
operator|.
name|ALL
argument_list|,
name|Operations
operator|.
name|DEFAULT_MAX_DETERMINIZED_STATES
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
comment|/**    * Calls {@link RegexCompletionQuery#RegexCompletionQuery(Term, int, int, BitsProducer)}    * with no filter    */
DECL|method|RegexCompletionQuery
specifier|public
name|RegexCompletionQuery
parameter_list|(
name|Term
name|term
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
name|maxDeterminizedStates
parameter_list|)
block|{
name|this
argument_list|(
name|term
argument_list|,
name|flags
argument_list|,
name|maxDeterminizedStates
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs a regular expression completion query    *    * @param term query is run against {@link Term#field()} and {@link Term#text()}    *             is interpreted as a regular expression    * @param flags used as syntax_flag in {@link RegExp#RegExp(String, int)}    * @param maxDeterminizedStates used in {@link RegExp#toAutomaton(int)}    * @param filter used to query on a sub set of documents    */
DECL|method|RegexCompletionQuery
specifier|public
name|RegexCompletionQuery
parameter_list|(
name|Term
name|term
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
name|maxDeterminizedStates
parameter_list|,
name|BitsProducer
name|filter
parameter_list|)
block|{
name|super
argument_list|(
name|term
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|this
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
name|this
operator|.
name|maxDeterminizedStates
operator|=
name|maxDeterminizedStates
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|CompletionWeight
argument_list|(
name|this
argument_list|,
operator|new
name|RegExp
argument_list|(
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|flags
argument_list|)
operator|.
name|toAutomaton
argument_list|(
name|maxDeterminizedStates
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class
end_unit
