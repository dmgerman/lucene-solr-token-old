begin_unit
begin_package
DECL|package|org.apache.lucene.search.suggest.document
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|document
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BulkScorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|CollectionTerminatedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import
begin_comment
comment|/**  * Adds document suggest capabilities to IndexSearcher.  * Any {@link CompletionQuery} can be used to suggest documents.  *  * Use {@link PrefixCompletionQuery} for analyzed prefix queries,  * {@link RegexCompletionQuery} for regular expression prefix queries,  * {@link FuzzyCompletionQuery} for analyzed prefix with typo tolerance  * and {@link ContextQuery} to boost and/or filter suggestions by contexts  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|SuggestIndexSearcher
specifier|public
class|class
name|SuggestIndexSearcher
extends|extends
name|IndexSearcher
block|{
comment|/**    * Creates a searcher with document suggest capabilities    * for<code>reader</code>.    */
DECL|method|SuggestIndexSearcher
specifier|public
name|SuggestIndexSearcher
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
block|{
name|super
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns top<code>n</code> completion hits for    *<code>query</code>    */
DECL|method|suggest
specifier|public
name|TopSuggestDocs
name|suggest
parameter_list|(
name|CompletionQuery
name|query
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|TopSuggestDocsCollector
name|collector
init|=
operator|new
name|TopSuggestDocsCollector
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|suggest
argument_list|(
name|query
argument_list|,
name|collector
argument_list|)
expr_stmt|;
return|return
name|collector
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Lower-level suggest API.    * Collects completion hits through<code>collector</code> for<code>query</code>.    *    *<p>{@link TopSuggestDocsCollector#collect(int, CharSequence, CharSequence, float)}    * is called for every matching completion hit.    */
DECL|method|suggest
specifier|public
name|void
name|suggest
parameter_list|(
name|CompletionQuery
name|query
parameter_list|,
name|TopSuggestDocsCollector
name|collector
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO use IndexSearcher.rewrite instead
comment|// have to implement equals() and hashCode() in CompletionQuerys and co
name|query
operator|=
operator|(
name|CompletionQuery
operator|)
name|query
operator|.
name|rewrite
argument_list|(
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
name|Weight
name|weight
init|=
name|query
operator|.
name|createWeight
argument_list|(
name|this
argument_list|,
name|collector
operator|.
name|needsScores
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|context
range|:
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
name|BulkScorer
name|scorer
init|=
name|weight
operator|.
name|bulkScorer
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|scorer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|scorer
operator|.
name|score
argument_list|(
name|collector
operator|.
name|getLeafCollector
argument_list|(
name|context
argument_list|)
argument_list|,
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getLiveDocs
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CollectionTerminatedException
name|e
parameter_list|)
block|{
comment|// collection was terminated prematurely
comment|// continue with the following leaf
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
