begin_unit
begin_package
DECL|package|org.apache.lucene.search.suggest.document
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|document
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_comment
comment|/**  * {@link SuggestField} which additionally takes in a set of  * contexts. Example usage of adding a suggestion with contexts is as follows:  *  *<pre class="prettyprint">  *  document.add(  *   new ContextSuggestField(name, "suggestion", Arrays.asList("context1", "context2"),  4));  *</pre>  *  * Use {@link ContextQuery} to boost and/or filter suggestions  * at query-time. Use {@link PrefixCompletionQuery}, {@link RegexCompletionQuery}  * or {@link FuzzyCompletionQuery} if context boost/filtering  * are not needed.  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|ContextSuggestField
specifier|public
class|class
name|ContextSuggestField
extends|extends
name|SuggestField
block|{
comment|/**    * Separator used between context value and the suggest field value    */
DECL|field|CONTEXT_SEPARATOR
specifier|public
specifier|static
specifier|final
name|int
name|CONTEXT_SEPARATOR
init|=
literal|'\u001D'
decl_stmt|;
DECL|field|TYPE
specifier|static
specifier|final
name|byte
name|TYPE
init|=
literal|1
decl_stmt|;
DECL|field|contexts
specifier|private
specifier|final
name|Set
argument_list|<
name|CharSequence
argument_list|>
name|contexts
decl_stmt|;
comment|/**    * Creates a context-enabled suggest field    *    * @param name field name    * @param value field value to get suggestion on    * @param weight field weight    * @param contexts associated contexts    *    * @throws IllegalArgumentException if either the name or value is null,    * if value is an empty string, if the weight is negative, if value or    * contexts contains any reserved characters    */
DECL|method|ContextSuggestField
specifier|public
name|ContextSuggestField
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|,
name|int
name|weight
parameter_list|,
name|CharSequence
modifier|...
name|contexts
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|weight
argument_list|)
expr_stmt|;
name|validate
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|contexts
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
operator|(
name|contexts
operator|!=
literal|null
operator|)
condition|?
name|contexts
operator|.
name|length
else|:
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|contexts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CharSequence
name|context
range|:
name|contexts
control|)
block|{
name|validate
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|contexts
operator|.
name|add
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|wrapTokenStream
specifier|protected
name|CompletionTokenStream
name|wrapTokenStream
parameter_list|(
name|TokenStream
name|stream
parameter_list|)
block|{
name|CompletionTokenStream
name|completionTokenStream
decl_stmt|;
if|if
condition|(
name|stream
operator|instanceof
name|CompletionTokenStream
condition|)
block|{
name|completionTokenStream
operator|=
operator|(
name|CompletionTokenStream
operator|)
name|stream
expr_stmt|;
name|completionTokenStream
operator|=
operator|new
name|CompletionTokenStream
argument_list|(
operator|new
name|PrefixTokenFilter
argument_list|(
name|stream
argument_list|,
operator|(
name|char
operator|)
name|CONTEXT_SEPARATOR
argument_list|,
name|contexts
argument_list|)
argument_list|,
name|completionTokenStream
operator|.
name|preserveSep
argument_list|,
name|completionTokenStream
operator|.
name|preservePositionIncrements
argument_list|,
name|completionTokenStream
operator|.
name|maxGraphExpansions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|completionTokenStream
operator|=
operator|new
name|CompletionTokenStream
argument_list|(
operator|new
name|PrefixTokenFilter
argument_list|(
name|stream
argument_list|,
operator|(
name|char
operator|)
name|CONTEXT_SEPARATOR
argument_list|,
name|contexts
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|completionTokenStream
return|;
block|}
annotation|@
name|Override
DECL|method|type
specifier|protected
name|byte
name|type
parameter_list|()
block|{
return|return
name|TYPE
return|;
block|}
comment|/**    * The {@link PrefixTokenFilter} wraps a {@link TokenStream} and adds a set    * prefixes ahead. The position attribute will not be incremented for the prefixes.    */
DECL|class|PrefixTokenFilter
specifier|private
specifier|static
specifier|final
class|class
name|PrefixTokenFilter
extends|extends
name|TokenFilter
block|{
DECL|field|separator
specifier|private
specifier|final
name|char
name|separator
decl_stmt|;
DECL|field|termAttr
specifier|private
specifier|final
name|CharTermAttribute
name|termAttr
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posAttr
specifier|private
specifier|final
name|PositionIncrementAttribute
name|posAttr
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|prefixes
specifier|private
specifier|final
name|Iterable
argument_list|<
name|CharSequence
argument_list|>
name|prefixes
decl_stmt|;
DECL|field|currentPrefix
specifier|private
name|Iterator
argument_list|<
name|CharSequence
argument_list|>
name|currentPrefix
decl_stmt|;
comment|/**      * Create a new {@link PrefixTokenFilter}      *      * @param input {@link TokenStream} to wrap      * @param separator Character used separate prefixes from other tokens      * @param prefixes {@link Iterable} of {@link CharSequence} which keeps all prefixes      */
DECL|method|PrefixTokenFilter
specifier|public
name|PrefixTokenFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|char
name|separator
parameter_list|,
name|Iterable
argument_list|<
name|CharSequence
argument_list|>
name|prefixes
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|prefixes
operator|=
name|prefixes
expr_stmt|;
name|this
operator|.
name|currentPrefix
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|separator
operator|=
name|separator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentPrefix
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|currentPrefix
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|input
operator|.
name|incrementToken
argument_list|()
return|;
block|}
else|else
block|{
name|posAttr
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|currentPrefix
operator|=
name|prefixes
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|termAttr
operator|.
name|setEmpty
argument_list|()
expr_stmt|;
name|posAttr
operator|.
name|setPositionIncrement
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|termAttr
operator|.
name|setEmpty
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentPrefix
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|termAttr
operator|.
name|append
argument_list|(
name|currentPrefix
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|termAttr
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|currentPrefix
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|validate
specifier|private
name|void
name|validate
parameter_list|(
specifier|final
name|CharSequence
name|value
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|CONTEXT_SEPARATOR
operator|==
name|value
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal value ["
operator|+
name|value
operator|+
literal|"] UTF-16 codepoint [0x"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
operator|(
name|int
operator|)
name|value
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|+
literal|"] at position "
operator|+
name|i
operator|+
literal|" is a reserved character"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class
end_unit
