begin_unit
begin_package
DECL|package|org.apache.lucene.search.suggest.document
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|document
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|AnalyzerWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStreamToAutomaton
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automaton
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Operations
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Transition
import|;
end_import
begin_comment
comment|/**  * Wraps an {@link org.apache.lucene.analysis.Analyzer}  * to provide additional completion-only tuning  * (e.g. preserving token separators, preserving position increments while converting  * a token stream to an automaton)  *<p>  * Can be used to index {@link SuggestField}  * and as a query analyzer to {@link SuggestIndexSearcher}  *<p>  * NOTE: In most cases, index and query analyzer should have same values for {@link #preservePositionIncrements}  * and {@link #preserveSep}  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|CompletionAnalyzer
specifier|public
class|class
name|CompletionAnalyzer
extends|extends
name|AnalyzerWrapper
block|{
comment|/**    * Represents the separation between tokens, if    *<code>preserveSep</code> is<code>true</code>    *<p>    * Same label is used as a delimiter in the {@link org.apache.lucene.search.suggest.document.CompletionTokenStream}    * payload    */
DECL|field|SEP_LABEL
specifier|final
specifier|static
name|int
name|SEP_LABEL
init|=
name|NRTSuggesterBuilder
operator|.
name|PAYLOAD_SEP
decl_stmt|;
comment|/**    * Represent a hole character, inserted by {@link org.apache.lucene.analysis.TokenStreamToAutomaton}    */
DECL|field|HOLE_CHARACTER
specifier|final
specifier|static
name|int
name|HOLE_CHARACTER
init|=
name|TokenStreamToAutomaton
operator|.
name|HOLE
decl_stmt|;
DECL|field|DEFAULT_MAX_GRAPH_EXPANSIONS
specifier|final
specifier|static
name|int
name|DEFAULT_MAX_GRAPH_EXPANSIONS
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|DEFAULT_PRESERVE_SEP
specifier|final
specifier|static
name|boolean
name|DEFAULT_PRESERVE_SEP
init|=
literal|true
decl_stmt|;
DECL|field|DEFAULT_PRESERVE_POSITION_INCREMENTS
specifier|final
specifier|static
name|boolean
name|DEFAULT_PRESERVE_POSITION_INCREMENTS
init|=
literal|true
decl_stmt|;
DECL|field|analyzer
specifier|private
specifier|final
name|Analyzer
name|analyzer
decl_stmt|;
comment|/**    * Preserve separation between tokens    * when converting to an automaton    *<p>    * Defaults to<code>true</code>    */
DECL|field|preserveSep
specifier|private
specifier|final
name|boolean
name|preserveSep
decl_stmt|;
comment|/**    * Preserve position increments for tokens    * when converting to an automaton    *<p>    * Defaults to<code>true</code>    */
DECL|field|preservePositionIncrements
specifier|private
specifier|final
name|boolean
name|preservePositionIncrements
decl_stmt|;
comment|/**    * Sets the maximum number of graph expansions of a completion automaton    *<p>    * Defaults to<code>-1</code> (no limit)    */
DECL|field|maxGraphExpansions
specifier|private
specifier|final
name|int
name|maxGraphExpansions
decl_stmt|;
comment|/**    * Wraps an analyzer to convert it's output token stream to an automaton    *    * @param analyzer token stream to be converted to an automaton    * @param preserveSep Preserve separation between tokens when converting to an automaton    * @param preservePositionIncrements Preserve position increments for tokens when converting to an automaton    * @param maxGraphExpansions Sets the maximum number of graph expansions of a completion automaton    */
DECL|method|CompletionAnalyzer
specifier|public
name|CompletionAnalyzer
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|,
name|boolean
name|preserveSep
parameter_list|,
name|boolean
name|preservePositionIncrements
parameter_list|,
name|int
name|maxGraphExpansions
parameter_list|)
block|{
name|super
argument_list|(
name|PER_FIELD_REUSE_STRATEGY
argument_list|)
expr_stmt|;
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
name|this
operator|.
name|preserveSep
operator|=
name|preserveSep
expr_stmt|;
name|this
operator|.
name|preservePositionIncrements
operator|=
name|preservePositionIncrements
expr_stmt|;
name|this
operator|.
name|maxGraphExpansions
operator|=
name|maxGraphExpansions
expr_stmt|;
block|}
comment|/**    * Calls {@link #CompletionAnalyzer(org.apache.lucene.analysis.Analyzer, boolean, boolean, int)}    * preserving token separation, position increments and no limit on graph expansions    */
DECL|method|CompletionAnalyzer
specifier|public
name|CompletionAnalyzer
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|this
argument_list|(
name|analyzer
argument_list|,
name|DEFAULT_PRESERVE_SEP
argument_list|,
name|DEFAULT_PRESERVE_POSITION_INCREMENTS
argument_list|,
name|DEFAULT_MAX_GRAPH_EXPANSIONS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Calls {@link #CompletionAnalyzer(org.apache.lucene.analysis.Analyzer, boolean, boolean, int)}    * with no limit on graph expansions    */
DECL|method|CompletionAnalyzer
specifier|public
name|CompletionAnalyzer
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|,
name|boolean
name|preserveSep
parameter_list|,
name|boolean
name|preservePositionIncrements
parameter_list|)
block|{
name|this
argument_list|(
name|analyzer
argument_list|,
name|preserveSep
argument_list|,
name|preservePositionIncrements
argument_list|,
name|DEFAULT_MAX_GRAPH_EXPANSIONS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Calls {@link #CompletionAnalyzer(org.apache.lucene.analysis.Analyzer, boolean, boolean, int)}    * preserving token separation and position increments    */
DECL|method|CompletionAnalyzer
specifier|public
name|CompletionAnalyzer
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|,
name|int
name|maxGraphExpansions
parameter_list|)
block|{
name|this
argument_list|(
name|analyzer
argument_list|,
name|DEFAULT_PRESERVE_SEP
argument_list|,
name|DEFAULT_PRESERVE_POSITION_INCREMENTS
argument_list|,
name|maxGraphExpansions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWrappedAnalyzer
specifier|protected
name|Analyzer
name|getWrappedAnalyzer
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|analyzer
return|;
block|}
annotation|@
name|Override
DECL|method|wrapComponents
specifier|protected
name|TokenStreamComponents
name|wrapComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|TokenStreamComponents
name|components
parameter_list|)
block|{
name|CompletionTokenStream
name|tokenStream
init|=
operator|new
name|CompletionTokenStream
argument_list|(
name|components
operator|.
name|getTokenStream
argument_list|()
argument_list|,
name|preserveSep
argument_list|,
name|preservePositionIncrements
argument_list|,
name|SEP_LABEL
argument_list|,
name|maxGraphExpansions
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|components
operator|.
name|getTokenizer
argument_list|()
argument_list|,
name|tokenStream
argument_list|)
return|;
block|}
comment|/**    * Converts<code>key</code> to an automaton using    * {@link #preservePositionIncrements}, {@link #preserveSep}    * and {@link #maxGraphExpansions}    */
DECL|method|toAutomaton
specifier|public
name|Automaton
name|toAutomaton
parameter_list|(
name|String
name|field
parameter_list|,
name|CharSequence
name|key
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|key
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|key
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
block|{
case|case
name|HOLE_CHARACTER
case|:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"lookup key cannot contain HOLE character U+001E; this character is reserved"
argument_list|)
throw|;
case|case
name|SEP_LABEL
case|:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"lookup key cannot contain unit separator character U+001F; this character is reserved"
argument_list|)
throw|;
default|default:
break|break;
block|}
block|}
try|try
init|(
name|TokenStream
name|tokenStream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|field
argument_list|,
name|key
operator|.
name|toString
argument_list|()
argument_list|)
init|)
block|{
try|try
init|(
name|CompletionTokenStream
name|stream
init|=
operator|new
name|CompletionTokenStream
argument_list|(
name|tokenStream
argument_list|,
name|preserveSep
argument_list|,
name|preservePositionIncrements
argument_list|,
name|SEP_LABEL
argument_list|,
name|maxGraphExpansions
argument_list|)
init|)
block|{
return|return
name|stream
operator|.
name|toAutomaton
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class
end_unit
