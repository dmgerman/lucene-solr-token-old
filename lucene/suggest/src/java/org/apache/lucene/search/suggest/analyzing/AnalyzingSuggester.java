begin_unit
begin_package
DECL|package|org.apache.lucene.search.suggest.analyzing
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|analyzing
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStreamToAutomaton
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|TermFreqIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|TermFreqPayloadIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|Lookup
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|InputStreamDataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|OutputStreamDataOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automaton
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|BasicOperations
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|SpecialOperations
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|State
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Transition
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|Builder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|ByteSequenceOutputs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|FST
operator|.
name|BytesReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|FST
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|PairOutputs
operator|.
name|Pair
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|PairOutputs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|PositiveIntOutputs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|Util
operator|.
name|MinResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|Util
import|;
end_import
begin_comment
comment|/**  * Suggester that first analyzes the surface form, adds the  * analyzed form to a weighted FST, and then does the same  * thing at lookup time.  This means lookup is based on the  * analyzed form while suggestions are still the surface  * form(s).  *  *<p>  * This can result in powerful suggester functionality.  For  * example, if you use an analyzer removing stop words,   * then the partial text "ghost chr..." could see the  * suggestion "The Ghost of Christmas Past". Note that  * position increments MUST NOT be preserved for this example  * to work, so you should call  * {@link #setPreservePositionIncrements(boolean) setPreservePositionIncrements(false)}.  *  *<p>  * If SynonymFilter is used to map wifi and wireless network to  * hotspot then the partial text "wirele..." could suggest  * "wifi router".  Token normalization like stemmers, accent  * removal, etc., would allow suggestions to ignore such  * variations.  *  *<p>  * When two matching suggestions have the same weight, they  * are tie-broken by the analyzed form.  If their analyzed  * form is the same then the order is undefined.  *  *<p>  * There are some limitations:  *<ul>  *  *<li> A lookup from a query like "net" in English won't  *        be any different than "net " (ie, user added a  *        trailing space) because analyzers don't reflect  *        when they've seen a token separator and when they  *        haven't.  *  *<li> If you're using {@code StopFilter}, and the user will  *        type "fast apple", but so far all they've typed is  *        "fast a", again because the analyzer doesn't convey whether  *        it's seen a token separator after the "a",  *        {@code StopFilter} will remove that "a" causing  *        far more matches than you'd expect.  *  *<li> Lookups with the empty string return no results  *        instead of all results.  *</ul>  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|AnalyzingSuggester
specifier|public
class|class
name|AnalyzingSuggester
extends|extends
name|Lookup
block|{
comment|/**    * FST<Weight,Surface>:     *  input is the analyzed form, with a null byte between terms    *  weights are encoded as costs: (Integer.MAX_VALUE-weight)    *  surface is the original, unanalyzed form.    */
DECL|field|fst
specifier|private
name|FST
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
name|fst
init|=
literal|null
decl_stmt|;
comment|/**     * Analyzer that will be used for analyzing suggestions at    * index time.    */
DECL|field|indexAnalyzer
specifier|private
specifier|final
name|Analyzer
name|indexAnalyzer
decl_stmt|;
comment|/**     * Analyzer that will be used for analyzing suggestions at    * query time.    */
DECL|field|queryAnalyzer
specifier|private
specifier|final
name|Analyzer
name|queryAnalyzer
decl_stmt|;
comment|/**     * True if exact match suggestions should always be returned first.    */
DECL|field|exactFirst
specifier|private
specifier|final
name|boolean
name|exactFirst
decl_stmt|;
comment|/**     * True if separator between tokens should be preserved.    */
DECL|field|preserveSep
specifier|private
specifier|final
name|boolean
name|preserveSep
decl_stmt|;
comment|/** Include this flag in the options parameter to {@link    *  #AnalyzingSuggester(Analyzer,Analyzer,int,int,int)} to always    *  return the exact match first, regardless of score.  This    *  has no performance impact but could result in    *  low-quality suggestions. */
DECL|field|EXACT_FIRST
specifier|public
specifier|static
specifier|final
name|int
name|EXACT_FIRST
init|=
literal|1
decl_stmt|;
comment|/** Include this flag in the options parameter to {@link    *  #AnalyzingSuggester(Analyzer,Analyzer,int,int,int)} to preserve    *  token separators when matching. */
DECL|field|PRESERVE_SEP
specifier|public
specifier|static
specifier|final
name|int
name|PRESERVE_SEP
init|=
literal|2
decl_stmt|;
comment|/** Represents the separation between tokens, if    *  PRESERVE_SEP was specified */
DECL|field|SEP_LABEL
specifier|private
specifier|static
specifier|final
name|int
name|SEP_LABEL
init|=
literal|0xff
decl_stmt|;
comment|/** Marks end of the analyzed input and start of dedup    *  byte. */
DECL|field|END_BYTE
specifier|private
specifier|static
specifier|final
name|int
name|END_BYTE
init|=
literal|0x0
decl_stmt|;
comment|/** Maximum number of dup surface forms (different surface    *  forms for the same analyzed form). */
DECL|field|maxSurfaceFormsPerAnalyzedForm
specifier|private
specifier|final
name|int
name|maxSurfaceFormsPerAnalyzedForm
decl_stmt|;
comment|/** Maximum graph paths to index for a single analyzed    *  surface form.  This only matters if your analyzer    *  makes lots of alternate paths (e.g. contains    *  SynonymFilter). */
DECL|field|maxGraphExpansions
specifier|private
specifier|final
name|int
name|maxGraphExpansions
decl_stmt|;
comment|/** Highest number of analyzed paths we saw for any single    *  input surface form.  For analyzers that never create    *  graphs this will always be 1. */
DECL|field|maxAnalyzedPathsForOneInput
specifier|private
name|int
name|maxAnalyzedPathsForOneInput
decl_stmt|;
DECL|field|hasPayloads
specifier|private
name|boolean
name|hasPayloads
decl_stmt|;
DECL|field|PAYLOAD_SEP
specifier|private
specifier|static
specifier|final
name|int
name|PAYLOAD_SEP
init|=
literal|'\u001f'
decl_stmt|;
comment|/** Whether position holes should appear in the automaton. */
DECL|field|preservePositionIncrements
specifier|private
name|boolean
name|preservePositionIncrements
decl_stmt|;
comment|/**    * Calls {@link #AnalyzingSuggester(Analyzer,Analyzer,int,int,int)    * AnalyzingSuggester(analyzer, analyzer, EXACT_FIRST |    * PRESERVE_SEP, 256, -1)}    */
DECL|method|AnalyzingSuggester
specifier|public
name|AnalyzingSuggester
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|this
argument_list|(
name|analyzer
argument_list|,
name|analyzer
argument_list|,
name|EXACT_FIRST
operator||
name|PRESERVE_SEP
argument_list|,
literal|256
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Calls {@link #AnalyzingSuggester(Analyzer,Analyzer,int,int,int)    * AnalyzingSuggester(indexAnalyzer, queryAnalyzer, EXACT_FIRST |    * PRESERVE_SEP, 256, -1)}    */
DECL|method|AnalyzingSuggester
specifier|public
name|AnalyzingSuggester
parameter_list|(
name|Analyzer
name|indexAnalyzer
parameter_list|,
name|Analyzer
name|queryAnalyzer
parameter_list|)
block|{
name|this
argument_list|(
name|indexAnalyzer
argument_list|,
name|queryAnalyzer
argument_list|,
name|EXACT_FIRST
operator||
name|PRESERVE_SEP
argument_list|,
literal|256
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new suggester.    *     * @param indexAnalyzer Analyzer that will be used for    *   analyzing suggestions while building the index.    * @param queryAnalyzer Analyzer that will be used for    *   analyzing query text during lookup    * @param options see {@link #EXACT_FIRST}, {@link #PRESERVE_SEP}    * @param maxSurfaceFormsPerAnalyzedForm Maximum number of    *   surface forms to keep for a single analyzed form.    *   When there are too many surface forms we discard the    *   lowest weighted ones.    * @param maxGraphExpansions Maximum number of graph paths    *   to expand from the analyzed form.  Set this to -1 for    *   no limit.    */
DECL|method|AnalyzingSuggester
specifier|public
name|AnalyzingSuggester
parameter_list|(
name|Analyzer
name|indexAnalyzer
parameter_list|,
name|Analyzer
name|queryAnalyzer
parameter_list|,
name|int
name|options
parameter_list|,
name|int
name|maxSurfaceFormsPerAnalyzedForm
parameter_list|,
name|int
name|maxGraphExpansions
parameter_list|)
block|{
name|this
operator|.
name|indexAnalyzer
operator|=
name|indexAnalyzer
expr_stmt|;
name|this
operator|.
name|queryAnalyzer
operator|=
name|queryAnalyzer
expr_stmt|;
if|if
condition|(
operator|(
name|options
operator|&
operator|~
operator|(
name|EXACT_FIRST
operator||
name|PRESERVE_SEP
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"options should only contain EXACT_FIRST and PRESERVE_SEP; got "
operator|+
name|options
argument_list|)
throw|;
block|}
name|this
operator|.
name|exactFirst
operator|=
operator|(
name|options
operator|&
name|EXACT_FIRST
operator|)
operator|!=
literal|0
expr_stmt|;
name|this
operator|.
name|preserveSep
operator|=
operator|(
name|options
operator|&
name|PRESERVE_SEP
operator|)
operator|!=
literal|0
expr_stmt|;
comment|// NOTE: this is just an implementation limitation; if
comment|// somehow this is a problem we could fix it by using
comment|// more than one byte to disambiguate ... but 256 seems
comment|// like it should be way more then enough.
if|if
condition|(
name|maxSurfaceFormsPerAnalyzedForm
operator|<=
literal|0
operator|||
name|maxSurfaceFormsPerAnalyzedForm
operator|>
literal|256
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxSurfaceFormsPerAnalyzedForm must be> 0 and< 256 (got: "
operator|+
name|maxSurfaceFormsPerAnalyzedForm
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|this
operator|.
name|maxSurfaceFormsPerAnalyzedForm
operator|=
name|maxSurfaceFormsPerAnalyzedForm
expr_stmt|;
if|if
condition|(
name|maxGraphExpansions
operator|<
literal|1
operator|&&
name|maxGraphExpansions
operator|!=
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxGraphExpansions must -1 (no limit) or> 0 (got: "
operator|+
name|maxGraphExpansions
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|this
operator|.
name|maxGraphExpansions
operator|=
name|maxGraphExpansions
expr_stmt|;
name|preservePositionIncrements
operator|=
literal|true
expr_stmt|;
block|}
comment|/** Whether to take position holes (position increment> 1) into account when    *  building the automaton,<code>true</code> by default. */
DECL|method|setPreservePositionIncrements
specifier|public
name|void
name|setPreservePositionIncrements
parameter_list|(
name|boolean
name|preservePositionIncrements
parameter_list|)
block|{
name|this
operator|.
name|preservePositionIncrements
operator|=
name|preservePositionIncrements
expr_stmt|;
block|}
comment|/** Returns byte size of the underlying FST. */
DECL|method|sizeInBytes
specifier|public
name|long
name|sizeInBytes
parameter_list|()
block|{
return|return
name|fst
operator|==
literal|null
condition|?
literal|0
else|:
name|fst
operator|.
name|sizeInBytes
argument_list|()
return|;
block|}
DECL|method|copyDestTransitions
specifier|private
name|void
name|copyDestTransitions
parameter_list|(
name|State
name|from
parameter_list|,
name|State
name|to
parameter_list|,
name|List
argument_list|<
name|Transition
argument_list|>
name|transitions
parameter_list|)
block|{
if|if
condition|(
name|to
operator|.
name|isAccept
argument_list|()
condition|)
block|{
name|from
operator|.
name|setAccept
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Transition
name|t
range|:
name|to
operator|.
name|getTransitions
argument_list|()
control|)
block|{
name|transitions
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Replaces SEP with epsilon or remaps them if
comment|// we were asked to preserve them:
DECL|method|replaceSep
specifier|private
name|void
name|replaceSep
parameter_list|(
name|Automaton
name|a
parameter_list|)
block|{
name|State
index|[]
name|states
init|=
name|a
operator|.
name|getNumberedStates
argument_list|()
decl_stmt|;
comment|// Go in reverse topo sort so we know we only have to
comment|// make one pass:
for|for
control|(
name|int
name|stateNumber
init|=
name|states
operator|.
name|length
operator|-
literal|1
init|;
name|stateNumber
operator|>=
literal|0
condition|;
name|stateNumber
operator|--
control|)
block|{
specifier|final
name|State
name|state
init|=
name|states
index|[
name|stateNumber
index|]
decl_stmt|;
name|List
argument_list|<
name|Transition
argument_list|>
name|newTransitions
init|=
operator|new
name|ArrayList
argument_list|<
name|Transition
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Transition
name|t
range|:
name|state
operator|.
name|getTransitions
argument_list|()
control|)
block|{
assert|assert
name|t
operator|.
name|getMin
argument_list|()
operator|==
name|t
operator|.
name|getMax
argument_list|()
assert|;
if|if
condition|(
name|t
operator|.
name|getMin
argument_list|()
operator|==
name|TokenStreamToAutomaton
operator|.
name|POS_SEP
condition|)
block|{
if|if
condition|(
name|preserveSep
condition|)
block|{
comment|// Remap to SEP_LABEL:
name|newTransitions
operator|.
name|add
argument_list|(
operator|new
name|Transition
argument_list|(
name|SEP_LABEL
argument_list|,
name|t
operator|.
name|getDest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copyDestTransitions
argument_list|(
name|state
argument_list|,
name|t
operator|.
name|getDest
argument_list|()
argument_list|,
name|newTransitions
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDeterministic
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|t
operator|.
name|getMin
argument_list|()
operator|==
name|TokenStreamToAutomaton
operator|.
name|HOLE
condition|)
block|{
comment|// Just remove the hole: there will then be two
comment|// SEP tokens next to each other, which will only
comment|// match another hole at search time.  Note that
comment|// it will also match an empty-string token ... if
comment|// that's somehow a problem we can always map HOLE
comment|// to a dedicated byte (and escape it in the
comment|// input).
name|copyDestTransitions
argument_list|(
name|state
argument_list|,
name|t
operator|.
name|getDest
argument_list|()
argument_list|,
name|newTransitions
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDeterministic
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newTransitions
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|state
operator|.
name|setTransitions
argument_list|(
name|newTransitions
operator|.
name|toArray
argument_list|(
operator|new
name|Transition
index|[
name|newTransitions
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Just escapes the 0xff byte (which we still for SEP). */
DECL|class|EscapingTokenStreamToAutomaton
specifier|private
specifier|static
specifier|final
class|class
name|EscapingTokenStreamToAutomaton
extends|extends
name|TokenStreamToAutomaton
block|{
DECL|field|spare
specifier|final
name|BytesRef
name|spare
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|changeToken
specifier|protected
name|BytesRef
name|changeToken
parameter_list|(
name|BytesRef
name|in
parameter_list|)
block|{
name|int
name|upto
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|in
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|b
init|=
name|in
operator|.
name|bytes
index|[
name|in
operator|.
name|offset
operator|+
name|i
index|]
decl_stmt|;
if|if
condition|(
name|b
operator|==
operator|(
name|byte
operator|)
literal|0xff
condition|)
block|{
if|if
condition|(
name|spare
operator|.
name|bytes
operator|.
name|length
operator|==
name|upto
condition|)
block|{
name|spare
operator|.
name|grow
argument_list|(
name|upto
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
name|spare
operator|.
name|bytes
index|[
name|upto
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xff
expr_stmt|;
name|spare
operator|.
name|bytes
index|[
name|upto
operator|++
index|]
operator|=
name|b
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|spare
operator|.
name|bytes
operator|.
name|length
operator|==
name|upto
condition|)
block|{
name|spare
operator|.
name|grow
argument_list|(
name|upto
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|spare
operator|.
name|bytes
index|[
name|upto
operator|++
index|]
operator|=
name|b
expr_stmt|;
block|}
block|}
name|spare
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|spare
operator|.
name|length
operator|=
name|upto
expr_stmt|;
return|return
name|spare
return|;
block|}
block|}
DECL|method|getTokenStreamToAutomaton
name|TokenStreamToAutomaton
name|getTokenStreamToAutomaton
parameter_list|()
block|{
specifier|final
name|TokenStreamToAutomaton
name|tsta
decl_stmt|;
if|if
condition|(
name|preserveSep
condition|)
block|{
name|tsta
operator|=
operator|new
name|EscapingTokenStreamToAutomaton
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// When we're not preserving sep, we don't steal 0xff
comment|// byte, so we don't need to do any escaping:
name|tsta
operator|=
operator|new
name|TokenStreamToAutomaton
argument_list|()
expr_stmt|;
block|}
name|tsta
operator|.
name|setPreservePositionIncrements
argument_list|(
name|preservePositionIncrements
argument_list|)
expr_stmt|;
return|return
name|tsta
return|;
block|}
DECL|class|AnalyzingComparator
specifier|private
specifier|static
class|class
name|AnalyzingComparator
implements|implements
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
block|{
DECL|field|hasPayloads
specifier|private
specifier|final
name|boolean
name|hasPayloads
decl_stmt|;
DECL|method|AnalyzingComparator
specifier|public
name|AnalyzingComparator
parameter_list|(
name|boolean
name|hasPayloads
parameter_list|)
block|{
name|this
operator|.
name|hasPayloads
operator|=
name|hasPayloads
expr_stmt|;
block|}
DECL|field|readerA
specifier|private
specifier|final
name|ByteArrayDataInput
name|readerA
init|=
operator|new
name|ByteArrayDataInput
argument_list|()
decl_stmt|;
DECL|field|readerB
specifier|private
specifier|final
name|ByteArrayDataInput
name|readerB
init|=
operator|new
name|ByteArrayDataInput
argument_list|()
decl_stmt|;
DECL|field|scratchA
specifier|private
specifier|final
name|BytesRef
name|scratchA
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|field|scratchB
specifier|private
specifier|final
name|BytesRef
name|scratchB
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|BytesRef
name|a
parameter_list|,
name|BytesRef
name|b
parameter_list|)
block|{
comment|// First by analyzed form:
name|readerA
operator|.
name|reset
argument_list|(
name|a
operator|.
name|bytes
argument_list|,
name|a
operator|.
name|offset
argument_list|,
name|a
operator|.
name|length
argument_list|)
expr_stmt|;
name|scratchA
operator|.
name|length
operator|=
name|readerA
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|scratchA
operator|.
name|bytes
operator|=
name|a
operator|.
name|bytes
expr_stmt|;
name|scratchA
operator|.
name|offset
operator|=
name|readerA
operator|.
name|getPosition
argument_list|()
expr_stmt|;
name|readerB
operator|.
name|reset
argument_list|(
name|b
operator|.
name|bytes
argument_list|,
name|b
operator|.
name|offset
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
name|scratchB
operator|.
name|bytes
operator|=
name|b
operator|.
name|bytes
expr_stmt|;
name|scratchB
operator|.
name|length
operator|=
name|readerB
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|scratchB
operator|.
name|offset
operator|=
name|readerB
operator|.
name|getPosition
argument_list|()
expr_stmt|;
name|int
name|cmp
init|=
name|scratchA
operator|.
name|compareTo
argument_list|(
name|scratchB
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
return|return
name|cmp
return|;
block|}
comment|// Next by cost:
name|long
name|aCost
init|=
name|readerA
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|long
name|bCost
init|=
name|readerB
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|aCost
operator|<
name|bCost
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|aCost
operator|>
name|bCost
condition|)
block|{
return|return
literal|1
return|;
block|}
comment|// Finally by surface form:
if|if
condition|(
name|hasPayloads
condition|)
block|{
name|readerA
operator|.
name|setPosition
argument_list|(
name|readerA
operator|.
name|getPosition
argument_list|()
operator|+
name|scratchA
operator|.
name|length
argument_list|)
expr_stmt|;
name|scratchA
operator|.
name|length
operator|=
name|readerA
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|scratchA
operator|.
name|offset
operator|=
name|readerA
operator|.
name|getPosition
argument_list|()
expr_stmt|;
name|readerB
operator|.
name|setPosition
argument_list|(
name|readerB
operator|.
name|getPosition
argument_list|()
operator|+
name|scratchB
operator|.
name|length
argument_list|)
expr_stmt|;
name|scratchB
operator|.
name|length
operator|=
name|readerB
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|scratchB
operator|.
name|offset
operator|=
name|readerB
operator|.
name|getPosition
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|scratchA
operator|.
name|offset
operator|=
name|readerA
operator|.
name|getPosition
argument_list|()
expr_stmt|;
name|scratchA
operator|.
name|length
operator|=
name|a
operator|.
name|length
operator|-
name|scratchA
operator|.
name|offset
expr_stmt|;
name|scratchB
operator|.
name|offset
operator|=
name|readerB
operator|.
name|getPosition
argument_list|()
expr_stmt|;
name|scratchB
operator|.
name|length
operator|=
name|b
operator|.
name|length
operator|-
name|scratchB
operator|.
name|offset
expr_stmt|;
block|}
name|cmp
operator|=
name|scratchA
operator|.
name|compareTo
argument_list|(
name|scratchB
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
return|return
name|cmp
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
empty_stmt|;
annotation|@
name|Override
DECL|method|build
specifier|public
name|void
name|build
parameter_list|(
name|TermFreqIterator
name|iterator
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|prefix
init|=
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|File
name|directory
init|=
name|Sort
operator|.
name|defaultTempDir
argument_list|()
decl_stmt|;
name|File
name|tempInput
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|prefix
argument_list|,
literal|".input"
argument_list|,
name|directory
argument_list|)
decl_stmt|;
name|File
name|tempSorted
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|prefix
argument_list|,
literal|".sorted"
argument_list|,
name|directory
argument_list|)
decl_stmt|;
name|TermFreqPayloadIterator
name|payloads
decl_stmt|;
if|if
condition|(
name|iterator
operator|instanceof
name|TermFreqPayloadIterator
condition|)
block|{
name|payloads
operator|=
operator|(
name|TermFreqPayloadIterator
operator|)
name|iterator
expr_stmt|;
block|}
else|else
block|{
name|payloads
operator|=
literal|null
expr_stmt|;
block|}
name|hasPayloads
operator|=
name|payloads
operator|!=
literal|null
expr_stmt|;
name|Sort
operator|.
name|ByteSequencesWriter
name|writer
init|=
operator|new
name|Sort
operator|.
name|ByteSequencesWriter
argument_list|(
name|tempInput
argument_list|)
decl_stmt|;
name|Sort
operator|.
name|ByteSequencesReader
name|reader
init|=
literal|null
decl_stmt|;
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|TokenStreamToAutomaton
name|ts2a
init|=
name|getTokenStreamToAutomaton
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|byte
name|buffer
index|[]
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
try|try
block|{
name|ByteArrayDataOutput
name|output
init|=
operator|new
name|ByteArrayDataOutput
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|BytesRef
name|surfaceForm
decl_stmt|;
while|while
condition|(
operator|(
name|surfaceForm
operator|=
name|iterator
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|IntsRef
argument_list|>
name|paths
init|=
name|toFiniteStrings
argument_list|(
name|surfaceForm
argument_list|,
name|ts2a
argument_list|)
decl_stmt|;
name|maxAnalyzedPathsForOneInput
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxAnalyzedPathsForOneInput
argument_list|,
name|paths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|IntsRef
name|path
range|:
name|paths
control|)
block|{
name|Util
operator|.
name|toBytesRef
argument_list|(
name|path
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
comment|// length of the analyzed text (FST input)
if|if
condition|(
name|scratch
operator|.
name|length
operator|>
name|Short
operator|.
name|MAX_VALUE
operator|-
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot handle analyzed forms> "
operator|+
operator|(
name|Short
operator|.
name|MAX_VALUE
operator|-
literal|2
operator|)
operator|+
literal|" in length (got "
operator|+
name|scratch
operator|.
name|length
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|short
name|analyzedLength
init|=
operator|(
name|short
operator|)
name|scratch
operator|.
name|length
decl_stmt|;
comment|// compute the required length:
comment|// analyzed sequence + weight (4) + surface + analyzedLength (short)
name|int
name|requiredLength
init|=
name|analyzedLength
operator|+
literal|4
operator|+
name|surfaceForm
operator|.
name|length
operator|+
literal|2
decl_stmt|;
name|BytesRef
name|payload
decl_stmt|;
if|if
condition|(
name|hasPayloads
condition|)
block|{
if|if
condition|(
name|surfaceForm
operator|.
name|length
operator|>
operator|(
name|Short
operator|.
name|MAX_VALUE
operator|-
literal|2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot handle surface form> "
operator|+
operator|(
name|Short
operator|.
name|MAX_VALUE
operator|-
literal|2
operator|)
operator|+
literal|" in length (got "
operator|+
name|surfaceForm
operator|.
name|length
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|payload
operator|=
name|payloads
operator|.
name|payload
argument_list|()
expr_stmt|;
comment|// payload + surfaceLength (short)
name|requiredLength
operator|+=
name|payload
operator|.
name|length
operator|+
literal|2
expr_stmt|;
block|}
else|else
block|{
name|payload
operator|=
literal|null
expr_stmt|;
block|}
name|buffer
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|buffer
argument_list|,
name|requiredLength
argument_list|)
expr_stmt|;
name|output
operator|.
name|reset
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeShort
argument_list|(
name|analyzedLength
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeBytes
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
argument_list|,
name|scratch
operator|.
name|length
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeInt
argument_list|(
name|encodeWeight
argument_list|(
name|iterator
operator|.
name|weight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasPayloads
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|surfaceForm
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|surfaceForm
operator|.
name|bytes
index|[
name|i
index|]
operator|==
name|PAYLOAD_SEP
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"surface form cannot contain unit separator character U+001F; this character is reserved"
argument_list|)
throw|;
block|}
block|}
name|output
operator|.
name|writeShort
argument_list|(
operator|(
name|short
operator|)
name|surfaceForm
operator|.
name|length
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeBytes
argument_list|(
name|surfaceForm
operator|.
name|bytes
argument_list|,
name|surfaceForm
operator|.
name|offset
argument_list|,
name|surfaceForm
operator|.
name|length
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeBytes
argument_list|(
name|payload
operator|.
name|bytes
argument_list|,
name|payload
operator|.
name|offset
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
operator|.
name|writeBytes
argument_list|(
name|surfaceForm
operator|.
name|bytes
argument_list|,
name|surfaceForm
operator|.
name|offset
argument_list|,
name|surfaceForm
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
assert|assert
name|output
operator|.
name|getPosition
argument_list|()
operator|==
name|requiredLength
operator|:
name|output
operator|.
name|getPosition
argument_list|()
operator|+
literal|" vs "
operator|+
name|requiredLength
assert|;
name|writer
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|output
operator|.
name|getPosition
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Sort all input/output pairs (required by FST.Builder):
operator|new
name|Sort
argument_list|(
operator|new
name|AnalyzingComparator
argument_list|(
name|payloads
operator|!=
literal|null
argument_list|)
argument_list|)
operator|.
name|sort
argument_list|(
name|tempInput
argument_list|,
name|tempSorted
argument_list|)
expr_stmt|;
comment|// Free disk space:
name|tempInput
operator|.
name|delete
argument_list|()
expr_stmt|;
name|reader
operator|=
operator|new
name|Sort
operator|.
name|ByteSequencesReader
argument_list|(
name|tempSorted
argument_list|)
expr_stmt|;
name|PairOutputs
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
name|outputs
init|=
operator|new
name|PairOutputs
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|(
name|PositiveIntOutputs
operator|.
name|getSingleton
argument_list|()
argument_list|,
name|ByteSequenceOutputs
operator|.
name|getSingleton
argument_list|()
argument_list|)
decl_stmt|;
name|Builder
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
argument_list|(
name|FST
operator|.
name|INPUT_TYPE
operator|.
name|BYTE1
argument_list|,
name|outputs
argument_list|)
decl_stmt|;
comment|// Build FST:
name|BytesRef
name|previousAnalyzed
init|=
literal|null
decl_stmt|;
name|BytesRef
name|analyzed
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|BytesRef
name|surface
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|IntsRef
name|scratchInts
init|=
operator|new
name|IntsRef
argument_list|()
decl_stmt|;
name|ByteArrayDataInput
name|input
init|=
operator|new
name|ByteArrayDataInput
argument_list|()
decl_stmt|;
comment|// Used to remove duplicate surface forms (but we
comment|// still index the hightest-weight one).  We clear
comment|// this when we see a new analyzed form, so it cannot
comment|// grow unbounded (at most 256 entries):
name|Set
argument_list|<
name|BytesRef
argument_list|>
name|seenSurfaceForms
init|=
operator|new
name|HashSet
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|dedup
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|read
argument_list|(
name|scratch
argument_list|)
condition|)
block|{
name|input
operator|.
name|reset
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
argument_list|,
name|scratch
operator|.
name|length
argument_list|)
expr_stmt|;
name|short
name|analyzedLength
init|=
name|input
operator|.
name|readShort
argument_list|()
decl_stmt|;
name|analyzed
operator|.
name|grow
argument_list|(
name|analyzedLength
operator|+
literal|2
argument_list|)
expr_stmt|;
name|input
operator|.
name|readBytes
argument_list|(
name|analyzed
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|analyzedLength
argument_list|)
expr_stmt|;
name|analyzed
operator|.
name|length
operator|=
name|analyzedLength
expr_stmt|;
name|long
name|cost
init|=
name|input
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|surface
operator|.
name|bytes
operator|=
name|scratch
operator|.
name|bytes
expr_stmt|;
if|if
condition|(
name|hasPayloads
condition|)
block|{
name|surface
operator|.
name|length
operator|=
name|input
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|surface
operator|.
name|offset
operator|=
name|input
operator|.
name|getPosition
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|surface
operator|.
name|offset
operator|=
name|input
operator|.
name|getPosition
argument_list|()
expr_stmt|;
name|surface
operator|.
name|length
operator|=
name|scratch
operator|.
name|length
operator|-
name|surface
operator|.
name|offset
expr_stmt|;
block|}
if|if
condition|(
name|previousAnalyzed
operator|==
literal|null
condition|)
block|{
name|previousAnalyzed
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
name|previousAnalyzed
operator|.
name|copyBytes
argument_list|(
name|analyzed
argument_list|)
expr_stmt|;
name|seenSurfaceForms
operator|.
name|add
argument_list|(
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|surface
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|analyzed
operator|.
name|equals
argument_list|(
name|previousAnalyzed
argument_list|)
condition|)
block|{
name|dedup
operator|++
expr_stmt|;
if|if
condition|(
name|dedup
operator|>=
name|maxSurfaceFormsPerAnalyzedForm
condition|)
block|{
comment|// More than maxSurfaceFormsPerAnalyzedForm
comment|// dups: skip the rest:
continue|continue;
block|}
if|if
condition|(
name|seenSurfaceForms
operator|.
name|contains
argument_list|(
name|surface
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|seenSurfaceForms
operator|.
name|add
argument_list|(
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|surface
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dedup
operator|=
literal|0
expr_stmt|;
name|previousAnalyzed
operator|.
name|copyBytes
argument_list|(
name|analyzed
argument_list|)
expr_stmt|;
name|seenSurfaceForms
operator|.
name|clear
argument_list|()
expr_stmt|;
name|seenSurfaceForms
operator|.
name|add
argument_list|(
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|surface
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: I think we can avoid the extra 2 bytes when
comment|// there is no dup (dedup==0), but we'd have to fix
comment|// the exactFirst logic ... which would be sort of
comment|// hairy because we'd need to special case the two
comment|// (dup/not dup)...
comment|// NOTE: must be byte 0 so we sort before whatever
comment|// is next
name|analyzed
operator|.
name|bytes
index|[
name|analyzed
operator|.
name|offset
operator|+
name|analyzed
operator|.
name|length
index|]
operator|=
literal|0
expr_stmt|;
name|analyzed
operator|.
name|bytes
index|[
name|analyzed
operator|.
name|offset
operator|+
name|analyzed
operator|.
name|length
operator|+
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
name|dedup
expr_stmt|;
name|analyzed
operator|.
name|length
operator|+=
literal|2
expr_stmt|;
name|Util
operator|.
name|toIntsRef
argument_list|(
name|analyzed
argument_list|,
name|scratchInts
argument_list|)
expr_stmt|;
comment|//System.out.println("ADD: " + scratchInts + " -> " + cost + ": " + surface.utf8ToString());
if|if
condition|(
operator|!
name|hasPayloads
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|scratchInts
argument_list|,
name|outputs
operator|.
name|newPair
argument_list|(
name|cost
argument_list|,
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|surface
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|payloadOffset
init|=
name|input
operator|.
name|getPosition
argument_list|()
operator|+
name|surface
operator|.
name|length
decl_stmt|;
name|int
name|payloadLength
init|=
name|scratch
operator|.
name|length
operator|-
name|payloadOffset
decl_stmt|;
name|BytesRef
name|br
init|=
operator|new
name|BytesRef
argument_list|(
name|surface
operator|.
name|length
operator|+
literal|1
operator|+
name|payloadLength
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|surface
operator|.
name|bytes
argument_list|,
name|surface
operator|.
name|offset
argument_list|,
name|br
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|surface
operator|.
name|length
argument_list|)
expr_stmt|;
name|br
operator|.
name|bytes
index|[
name|surface
operator|.
name|length
index|]
operator|=
name|PAYLOAD_SEP
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|payloadOffset
argument_list|,
name|br
operator|.
name|bytes
argument_list|,
name|surface
operator|.
name|length
operator|+
literal|1
argument_list|,
name|payloadLength
argument_list|)
expr_stmt|;
name|br
operator|.
name|length
operator|=
name|br
operator|.
name|bytes
operator|.
name|length
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|scratchInts
argument_list|,
name|outputs
operator|.
name|newPair
argument_list|(
name|cost
argument_list|,
name|br
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|fst
operator|=
name|builder
operator|.
name|finish
argument_list|()
expr_stmt|;
comment|//Util.dotToFile(fst, "/tmp/suggest.dot");
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|reader
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|reader
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
name|tempInput
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tempSorted
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|store
specifier|public
name|boolean
name|store
parameter_list|(
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutput
name|dataOut
init|=
operator|new
name|OutputStreamDataOutput
argument_list|(
name|output
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|fst
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|fst
operator|.
name|save
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeVInt
argument_list|(
name|maxAnalyzedPathsForOneInput
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeByte
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|hasPayloads
condition|?
literal|1
else|:
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|load
specifier|public
name|boolean
name|load
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|DataInput
name|dataIn
init|=
operator|new
name|InputStreamDataInput
argument_list|(
name|input
argument_list|)
decl_stmt|;
try|try
block|{
name|this
operator|.
name|fst
operator|=
operator|new
name|FST
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
argument_list|(
name|dataIn
argument_list|,
operator|new
name|PairOutputs
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|(
name|PositiveIntOutputs
operator|.
name|getSingleton
argument_list|()
argument_list|,
name|ByteSequenceOutputs
operator|.
name|getSingleton
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|maxAnalyzedPathsForOneInput
operator|=
name|dataIn
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|hasPayloads
operator|=
name|dataIn
operator|.
name|readByte
argument_list|()
operator|==
literal|1
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|getLookupResult
specifier|private
name|LookupResult
name|getLookupResult
parameter_list|(
name|Long
name|output1
parameter_list|,
name|BytesRef
name|output2
parameter_list|,
name|CharsRef
name|spare
parameter_list|)
block|{
name|LookupResult
name|result
decl_stmt|;
if|if
condition|(
name|hasPayloads
condition|)
block|{
name|int
name|sepIndex
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|output2
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|output2
operator|.
name|bytes
index|[
name|output2
operator|.
name|offset
operator|+
name|i
index|]
operator|==
name|PAYLOAD_SEP
condition|)
block|{
name|sepIndex
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
assert|assert
name|sepIndex
operator|!=
operator|-
literal|1
assert|;
name|spare
operator|.
name|grow
argument_list|(
name|sepIndex
argument_list|)
expr_stmt|;
name|int
name|payloadLen
init|=
name|output2
operator|.
name|length
operator|-
name|sepIndex
operator|-
literal|1
decl_stmt|;
name|output2
operator|.
name|length
operator|=
name|sepIndex
expr_stmt|;
name|UnicodeUtil
operator|.
name|UTF8toUTF16
argument_list|(
name|output2
argument_list|,
name|spare
argument_list|)
expr_stmt|;
name|BytesRef
name|payload
init|=
operator|new
name|BytesRef
argument_list|(
name|payloadLen
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|output2
operator|.
name|bytes
argument_list|,
name|sepIndex
operator|+
literal|1
argument_list|,
name|payload
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|payloadLen
argument_list|)
expr_stmt|;
name|payload
operator|.
name|length
operator|=
name|payloadLen
expr_stmt|;
name|result
operator|=
operator|new
name|LookupResult
argument_list|(
name|spare
operator|.
name|toString
argument_list|()
argument_list|,
name|decodeWeight
argument_list|(
name|output1
argument_list|)
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|spare
operator|.
name|grow
argument_list|(
name|output2
operator|.
name|length
argument_list|)
expr_stmt|;
name|UnicodeUtil
operator|.
name|UTF8toUTF16
argument_list|(
name|output2
argument_list|,
name|spare
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|LookupResult
argument_list|(
name|spare
operator|.
name|toString
argument_list|()
argument_list|,
name|decodeWeight
argument_list|(
name|output1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|sameSurfaceForm
specifier|private
name|boolean
name|sameSurfaceForm
parameter_list|(
name|BytesRef
name|key
parameter_list|,
name|BytesRef
name|output2
parameter_list|)
block|{
if|if
condition|(
name|hasPayloads
condition|)
block|{
comment|// output2 has at least PAYLOAD_SEP byte:
if|if
condition|(
name|key
operator|.
name|length
operator|>=
name|output2
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|key
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|key
operator|.
name|bytes
index|[
name|key
operator|.
name|offset
operator|+
name|i
index|]
operator|!=
name|output2
operator|.
name|bytes
index|[
name|output2
operator|.
name|offset
operator|+
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
name|output2
operator|.
name|bytes
index|[
name|output2
operator|.
name|offset
operator|+
name|key
operator|.
name|length
index|]
operator|==
name|PAYLOAD_SEP
return|;
block|}
else|else
block|{
return|return
name|key
operator|.
name|bytesEquals
argument_list|(
name|output2
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|lookup
specifier|public
name|List
argument_list|<
name|LookupResult
argument_list|>
name|lookup
parameter_list|(
specifier|final
name|CharSequence
name|key
parameter_list|,
name|boolean
name|onlyMorePopular
parameter_list|,
name|int
name|num
parameter_list|)
block|{
assert|assert
name|num
operator|>
literal|0
assert|;
if|if
condition|(
name|onlyMorePopular
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"this suggester only works with onlyMorePopular=false"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fst
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|//System.out.println("lookup key=" + key + " num=" + num);
specifier|final
name|BytesRef
name|utf8Key
init|=
operator|new
name|BytesRef
argument_list|(
name|key
argument_list|)
decl_stmt|;
try|try
block|{
name|Automaton
name|lookupAutomaton
init|=
name|toLookupAutomaton
argument_list|(
name|key
argument_list|)
decl_stmt|;
specifier|final
name|CharsRef
name|spare
init|=
operator|new
name|CharsRef
argument_list|()
decl_stmt|;
comment|//System.out.println("  now intersect exactFirst=" + exactFirst);
comment|// Intersect automaton w/ suggest wFST and get all
comment|// prefix starting nodes& their outputs:
comment|//final PathIntersector intersector = getPathIntersector(lookupAutomaton, fst);
comment|//System.out.println("  prefixPaths: " + prefixPaths.size());
name|BytesReader
name|bytesReader
init|=
name|fst
operator|.
name|getBytesReader
argument_list|()
decl_stmt|;
name|FST
operator|.
name|Arc
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
name|scratchArc
init|=
operator|new
name|FST
operator|.
name|Arc
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|LookupResult
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|LookupResult
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FSTUtil
operator|.
name|Path
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
argument_list|>
name|prefixPaths
init|=
name|FSTUtil
operator|.
name|intersectPrefixPaths
argument_list|(
name|lookupAutomaton
argument_list|,
name|fst
argument_list|)
decl_stmt|;
if|if
condition|(
name|exactFirst
condition|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FSTUtil
operator|.
name|Path
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
name|path
range|:
name|prefixPaths
control|)
block|{
if|if
condition|(
name|fst
operator|.
name|findTargetArc
argument_list|(
name|END_BYTE
argument_list|,
name|path
operator|.
name|fstNode
argument_list|,
name|scratchArc
argument_list|,
name|bytesReader
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// This node has END_BYTE arc leaving, meaning it's an
comment|// "exact" match:
name|count
operator|++
expr_stmt|;
block|}
block|}
comment|// Searcher just to find the single exact only
comment|// match, if present:
name|Util
operator|.
name|TopNSearcher
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
name|searcher
decl_stmt|;
name|searcher
operator|=
operator|new
name|Util
operator|.
name|TopNSearcher
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
argument_list|(
name|fst
argument_list|,
name|count
operator|*
name|maxSurfaceFormsPerAnalyzedForm
argument_list|,
name|count
operator|*
name|maxSurfaceFormsPerAnalyzedForm
argument_list|,
name|weightComparator
argument_list|)
expr_stmt|;
comment|// NOTE: we could almost get away with only using
comment|// the first start node.  The only catch is if
comment|// maxSurfaceFormsPerAnalyzedForm had kicked in and
comment|// pruned our exact match from one of these nodes
comment|// ...:
for|for
control|(
name|FSTUtil
operator|.
name|Path
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
name|path
range|:
name|prefixPaths
control|)
block|{
if|if
condition|(
name|fst
operator|.
name|findTargetArc
argument_list|(
name|END_BYTE
argument_list|,
name|path
operator|.
name|fstNode
argument_list|,
name|scratchArc
argument_list|,
name|bytesReader
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// This node has END_BYTE arc leaving, meaning it's an
comment|// "exact" match:
name|searcher
operator|.
name|addStartPaths
argument_list|(
name|scratchArc
argument_list|,
name|fst
operator|.
name|outputs
operator|.
name|add
argument_list|(
name|path
operator|.
name|output
argument_list|,
name|scratchArc
operator|.
name|output
argument_list|)
argument_list|,
literal|false
argument_list|,
name|path
operator|.
name|input
argument_list|)
expr_stmt|;
block|}
block|}
name|MinResult
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
name|completions
index|[]
init|=
name|searcher
operator|.
name|search
argument_list|()
decl_stmt|;
comment|// NOTE: this is rather inefficient: we enumerate
comment|// every matching "exactly the same analyzed form"
comment|// path, and then do linear scan to see if one of
comment|// these exactly matches the input.  It should be
comment|// possible (though hairy) to do something similar
comment|// to getByOutput, since the surface form is encoded
comment|// into the FST output, so we more efficiently hone
comment|// in on the exact surface-form match.  Still, I
comment|// suspect very little time is spent in this linear
comment|// seach: it's bounded by how many prefix start
comment|// nodes we have and the
comment|// maxSurfaceFormsPerAnalyzedForm:
for|for
control|(
name|MinResult
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
name|completion
range|:
name|completions
control|)
block|{
name|BytesRef
name|output2
init|=
name|completion
operator|.
name|output
operator|.
name|output2
decl_stmt|;
if|if
condition|(
name|sameSurfaceForm
argument_list|(
name|utf8Key
argument_list|,
name|output2
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|getLookupResult
argument_list|(
name|completion
operator|.
name|output
operator|.
name|output1
argument_list|,
name|output2
argument_list|,
name|spare
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|==
name|num
condition|)
block|{
comment|// That was quick:
return|return
name|results
return|;
block|}
block|}
name|Util
operator|.
name|TopNSearcher
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
name|searcher
decl_stmt|;
name|searcher
operator|=
operator|new
name|Util
operator|.
name|TopNSearcher
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
argument_list|(
name|fst
argument_list|,
name|num
operator|-
name|results
operator|.
name|size
argument_list|()
argument_list|,
name|num
operator|*
name|maxAnalyzedPathsForOneInput
argument_list|,
name|weightComparator
argument_list|)
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|BytesRef
argument_list|>
name|seen
init|=
operator|new
name|HashSet
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|boolean
name|acceptResult
parameter_list|(
name|IntsRef
name|input
parameter_list|,
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
name|output
parameter_list|)
block|{
comment|// Dedup: when the input analyzes to a graph we
comment|// can get duplicate surface forms:
if|if
condition|(
name|seen
operator|.
name|contains
argument_list|(
name|output
operator|.
name|output2
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|seen
operator|.
name|add
argument_list|(
name|output
operator|.
name|output2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|exactFirst
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// In exactFirst mode, don't accept any paths
comment|// matching the surface form since that will
comment|// create duplicate results:
if|if
condition|(
name|sameSurfaceForm
argument_list|(
name|utf8Key
argument_list|,
name|output
operator|.
name|output2
argument_list|)
condition|)
block|{
comment|// We found exact match, which means we should
comment|// have already found it in the first search:
assert|assert
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
expr_stmt|;
name|prefixPaths
operator|=
name|getFullPrefixPaths
argument_list|(
name|prefixPaths
argument_list|,
name|lookupAutomaton
argument_list|,
name|fst
argument_list|)
expr_stmt|;
for|for
control|(
name|FSTUtil
operator|.
name|Path
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
name|path
range|:
name|prefixPaths
control|)
block|{
name|searcher
operator|.
name|addStartPaths
argument_list|(
name|path
operator|.
name|fstNode
argument_list|,
name|path
operator|.
name|output
argument_list|,
literal|true
argument_list|,
name|path
operator|.
name|input
argument_list|)
expr_stmt|;
block|}
name|MinResult
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
name|completions
index|[]
init|=
name|searcher
operator|.
name|search
argument_list|()
decl_stmt|;
for|for
control|(
name|MinResult
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
name|completion
range|:
name|completions
control|)
block|{
name|LookupResult
name|result
init|=
name|getLookupResult
argument_list|(
name|completion
operator|.
name|output
operator|.
name|output1
argument_list|,
name|completion
operator|.
name|output
operator|.
name|output2
argument_list|,
name|spare
argument_list|)
decl_stmt|;
comment|// TODO: for fuzzy case would be nice to return
comment|// how many edits were required
comment|//System.out.println("    result=" + result);
name|results
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|==
name|num
condition|)
block|{
comment|// In the exactFirst=true case the search may
comment|// produce one extra path
break|break;
block|}
block|}
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|bogus
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|bogus
argument_list|)
throw|;
block|}
block|}
comment|/** Returns all prefix paths to initialize the search. */
DECL|method|getFullPrefixPaths
specifier|protected
name|List
argument_list|<
name|FSTUtil
operator|.
name|Path
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
argument_list|>
name|getFullPrefixPaths
parameter_list|(
name|List
argument_list|<
name|FSTUtil
operator|.
name|Path
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
argument_list|>
name|prefixPaths
parameter_list|,
name|Automaton
name|lookupAutomaton
parameter_list|,
name|FST
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
name|fst
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|prefixPaths
return|;
block|}
DECL|method|toFiniteStrings
specifier|final
name|Set
argument_list|<
name|IntsRef
argument_list|>
name|toFiniteStrings
parameter_list|(
specifier|final
name|BytesRef
name|surfaceForm
parameter_list|,
specifier|final
name|TokenStreamToAutomaton
name|ts2a
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Analyze surface form:
name|TokenStream
name|ts
init|=
name|indexAnalyzer
operator|.
name|tokenStream
argument_list|(
literal|""
argument_list|,
operator|new
name|StringReader
argument_list|(
name|surfaceForm
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Create corresponding automaton: labels are bytes
comment|// from each analyzed token, with byte 0 used as
comment|// separator between tokens:
name|Automaton
name|automaton
init|=
name|ts2a
operator|.
name|toAutomaton
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|ts
operator|.
name|close
argument_list|()
expr_stmt|;
name|replaceSep
argument_list|(
name|automaton
argument_list|)
expr_stmt|;
assert|assert
name|SpecialOperations
operator|.
name|isFinite
argument_list|(
name|automaton
argument_list|)
assert|;
comment|// Get all paths from the automaton (there can be
comment|// more than one path, eg if the analyzer created a
comment|// graph using SynFilter or WDF):
comment|// TODO: we could walk& add simultaneously, so we
comment|// don't have to alloc [possibly biggish]
comment|// intermediate HashSet in RAM:
return|return
name|SpecialOperations
operator|.
name|getFiniteStrings
argument_list|(
name|automaton
argument_list|,
name|maxGraphExpansions
argument_list|)
return|;
block|}
DECL|method|toLookupAutomaton
specifier|final
name|Automaton
name|toLookupAutomaton
parameter_list|(
specifier|final
name|CharSequence
name|key
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: is there a Reader from a CharSequence?
comment|// Turn tokenstream into automaton:
name|TokenStream
name|ts
init|=
name|queryAnalyzer
operator|.
name|tokenStream
argument_list|(
literal|""
argument_list|,
operator|new
name|StringReader
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Automaton
name|automaton
init|=
operator|(
name|getTokenStreamToAutomaton
argument_list|()
operator|)
operator|.
name|toAutomaton
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|ts
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// TODO: we could use the end offset to "guess"
comment|// whether the final token was a partial token; this
comment|// would only be a heuristic ... but maybe an OK one.
comment|// This way we could eg differentiate "net" from "net ",
comment|// which we can't today...
name|replaceSep
argument_list|(
name|automaton
argument_list|)
expr_stmt|;
comment|// TODO: we can optimize this somewhat by determinizing
comment|// while we convert
name|BasicOperations
operator|.
name|determinize
argument_list|(
name|automaton
argument_list|)
expr_stmt|;
return|return
name|automaton
return|;
block|}
comment|/**    * Returns the weight associated with an input string,    * or null if it does not exist.    */
DECL|method|get
specifier|public
name|Object
name|get
parameter_list|(
name|CharSequence
name|key
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/** cost -> weight */
DECL|method|decodeWeight
specifier|private
specifier|static
name|int
name|decodeWeight
parameter_list|(
name|long
name|encoded
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|-
name|encoded
argument_list|)
return|;
block|}
comment|/** weight -> cost */
DECL|method|encodeWeight
specifier|private
specifier|static
name|int
name|encodeWeight
parameter_list|(
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
argument_list|<
literal|0
operator|||
name|value
argument_list|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"cannot encode value: "
operator|+
name|value
argument_list|)
throw|;
block|}
return|return
name|Integer
operator|.
name|MAX_VALUE
operator|-
operator|(
name|int
operator|)
name|value
return|;
block|}
DECL|field|weightComparator
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
name|weightComparator
init|=
operator|new
name|Comparator
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
name|left
parameter_list|,
name|Pair
argument_list|<
name|Long
argument_list|,
name|BytesRef
argument_list|>
name|right
parameter_list|)
block|{
return|return
name|left
operator|.
name|output1
operator|.
name|compareTo
argument_list|(
name|right
operator|.
name|output1
argument_list|)
return|;
block|}
block|}
decl_stmt|;
block|}
end_class
end_unit
