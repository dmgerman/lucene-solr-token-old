begin_unit
begin_package
DECL|package|org.apache.lucene.search.suggest.analyzing
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|analyzing
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsAndPositionsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|Lookup
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import
begin_comment
comment|// TODO:
end_comment
begin_comment
comment|// - allow to use the search score
end_comment
begin_comment
comment|/**  * Extension of the AnalyzingInfixSuggester which transforms the weight  * after search to take into account the position of the searched term into  * the indexed text.  * Please note that it increases the number of elements searched and applies the  * ponderation after. It might be costly for long suggestions.  */
end_comment
begin_class
DECL|class|BlendedInfixSuggester
specifier|public
class|class
name|BlendedInfixSuggester
extends|extends
name|AnalyzingInfixSuggester
block|{
comment|/**    * Coefficient used for linear blending    */
DECL|field|LINEAR_COEF
specifier|protected
specifier|static
name|double
name|LINEAR_COEF
init|=
literal|0.10
decl_stmt|;
comment|/**    * Default factor    */
DECL|field|DEFAULT_NUM_FACTOR
specifier|public
specifier|static
name|int
name|DEFAULT_NUM_FACTOR
init|=
literal|10
decl_stmt|;
comment|/**    * Factor to multiply the number of searched elements    */
DECL|field|numFactor
specifier|private
specifier|final
name|int
name|numFactor
decl_stmt|;
comment|/**    * Type of blender used by the suggester    */
DECL|field|blenderType
specifier|private
specifier|final
name|BlenderType
name|blenderType
decl_stmt|;
comment|/**    * The different types of blender.    */
DECL|enum|BlenderType
specifier|public
specifier|static
enum|enum
name|BlenderType
block|{
comment|/** Application dependent; override {@link      *  #calculateCoefficient} to compute it. */
DECL|enum constant|CUSTOM
name|CUSTOM
block|,
comment|/** weight*(1 - 0.10*position) */
DECL|enum constant|POSITION_LINEAR
name|POSITION_LINEAR
block|,
comment|/** weight/(1+position) */
DECL|enum constant|POSITION_RECIPROCAL
name|POSITION_RECIPROCAL
block|,
comment|// TODO:
comment|//SCORE
block|}
comment|/**    * Create a new instance, loading from a previously built    * directory, if it exists.    */
DECL|method|BlendedInfixSuggester
specifier|public
name|BlendedInfixSuggester
parameter_list|(
name|Version
name|matchVersion
parameter_list|,
name|File
name|indexPath
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|matchVersion
argument_list|,
name|indexPath
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|this
operator|.
name|blenderType
operator|=
name|BlenderType
operator|.
name|POSITION_LINEAR
expr_stmt|;
name|this
operator|.
name|numFactor
operator|=
name|DEFAULT_NUM_FACTOR
expr_stmt|;
block|}
comment|/**    * Create a new instance, loading from a previously built    * directory, if it exists.    *    * @param blenderType Type of blending strategy, see BlenderType for more precisions    * @param numFactor   Factor to multiply the number of searched elements before ponderate    * @throws IOException If there are problems opening the underlying Lucene index.    */
DECL|method|BlendedInfixSuggester
specifier|public
name|BlendedInfixSuggester
parameter_list|(
name|Version
name|matchVersion
parameter_list|,
name|File
name|indexPath
parameter_list|,
name|Analyzer
name|indexAnalyzer
parameter_list|,
name|Analyzer
name|queryAnalyzer
parameter_list|,
name|int
name|minPrefixChars
parameter_list|,
name|BlenderType
name|blenderType
parameter_list|,
name|int
name|numFactor
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|matchVersion
argument_list|,
name|indexPath
argument_list|,
name|indexAnalyzer
argument_list|,
name|queryAnalyzer
argument_list|,
name|minPrefixChars
argument_list|)
expr_stmt|;
name|this
operator|.
name|blenderType
operator|=
name|blenderType
expr_stmt|;
name|this
operator|.
name|numFactor
operator|=
name|numFactor
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lookup
specifier|public
name|List
argument_list|<
name|Lookup
operator|.
name|LookupResult
argument_list|>
name|lookup
parameter_list|(
name|CharSequence
name|key
parameter_list|,
name|boolean
name|onlyMorePopular
parameter_list|,
name|int
name|num
parameter_list|)
block|{
comment|// here we multiply the number of searched element by the defined factor
return|return
name|super
operator|.
name|lookup
argument_list|(
name|key
argument_list|,
name|onlyMorePopular
argument_list|,
name|num
operator|*
name|numFactor
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|lookup
specifier|public
name|List
argument_list|<
name|Lookup
operator|.
name|LookupResult
argument_list|>
name|lookup
parameter_list|(
name|CharSequence
name|key
parameter_list|,
name|int
name|num
parameter_list|,
name|boolean
name|allTermsRequired
parameter_list|,
name|boolean
name|doHighlight
parameter_list|)
block|{
comment|// here we multiply the number of searched element by the defined factor
return|return
name|super
operator|.
name|lookup
argument_list|(
name|key
argument_list|,
name|num
operator|*
name|numFactor
argument_list|,
name|allTermsRequired
argument_list|,
name|doHighlight
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTextFieldType
specifier|protected
name|FieldType
name|getTextFieldType
parameter_list|()
block|{
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|FieldInfo
operator|.
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setOmitNorms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|ft
return|;
block|}
annotation|@
name|Override
DECL|method|createResults
specifier|protected
name|List
argument_list|<
name|Lookup
operator|.
name|LookupResult
argument_list|>
name|createResults
parameter_list|(
name|TopDocs
name|hits
parameter_list|,
name|int
name|num
parameter_list|,
name|CharSequence
name|key
parameter_list|,
name|boolean
name|doHighlight
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|matchedTokens
parameter_list|,
name|String
name|prefixToken
parameter_list|)
throws|throws
name|IOException
block|{
name|TreeSet
argument_list|<
name|Lookup
operator|.
name|LookupResult
argument_list|>
name|results
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|LOOKUP_COMP
argument_list|)
decl_stmt|;
comment|// we reduce the num to the one initially requested
name|int
name|actualNum
init|=
name|num
operator|/
name|numFactor
decl_stmt|;
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|scoreDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ScoreDoc
name|sd
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
decl_stmt|;
name|textDV
operator|.
name|get
argument_list|(
name|sd
operator|.
name|doc
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|String
name|text
init|=
name|scratch
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|long
name|weight
init|=
name|weightsDV
operator|.
name|get
argument_list|(
name|sd
operator|.
name|doc
argument_list|)
decl_stmt|;
name|BytesRef
name|payload
decl_stmt|;
if|if
condition|(
name|payloadsDV
operator|!=
literal|null
condition|)
block|{
name|payload
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
name|payloadsDV
operator|.
name|get
argument_list|(
name|sd
operator|.
name|doc
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|payload
operator|=
literal|null
expr_stmt|;
block|}
name|double
name|coefficient
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|startsWith
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
comment|// if hit starts with the key, we don't change the score
name|coefficient
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|coefficient
operator|=
name|createCoefficient
argument_list|(
name|sd
operator|.
name|doc
argument_list|,
name|matchedTokens
argument_list|,
name|prefixToken
argument_list|)
expr_stmt|;
block|}
name|long
name|score
init|=
call|(
name|long
call|)
argument_list|(
name|weight
operator|*
name|coefficient
argument_list|)
decl_stmt|;
name|LookupResult
name|result
decl_stmt|;
if|if
condition|(
name|doHighlight
condition|)
block|{
name|Object
name|highlightKey
init|=
name|highlight
argument_list|(
name|text
argument_list|,
name|matchedTokens
argument_list|,
name|prefixToken
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|LookupResult
argument_list|(
name|highlightKey
operator|.
name|toString
argument_list|()
argument_list|,
name|highlightKey
argument_list|,
name|score
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|new
name|LookupResult
argument_list|(
name|text
argument_list|,
name|score
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
name|boundedTreeAdd
argument_list|(
name|results
argument_list|,
name|result
argument_list|,
name|actualNum
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|results
operator|.
name|descendingSet
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Add an element to the tree respecting a size limit    *    * @param results the tree to add in    * @param result the result we try to add    * @param num size limit    */
DECL|method|boundedTreeAdd
specifier|private
specifier|static
name|void
name|boundedTreeAdd
parameter_list|(
name|TreeSet
argument_list|<
name|Lookup
operator|.
name|LookupResult
argument_list|>
name|results
parameter_list|,
name|Lookup
operator|.
name|LookupResult
name|result
parameter_list|,
name|int
name|num
parameter_list|)
block|{
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|>=
name|num
condition|)
block|{
if|if
condition|(
name|results
operator|.
name|first
argument_list|()
operator|.
name|value
operator|<
name|result
operator|.
name|value
condition|)
block|{
name|results
operator|.
name|pollFirst
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
block|}
name|results
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the coefficient to transform the weight.    *    * @param doc id of the document    * @param matchedTokens tokens found in the query    * @param prefixToken unfinished token in the query    * @return the coefficient    * @throws IOException If there are problems reading term vectors from the underlying Lucene index.    */
DECL|method|createCoefficient
specifier|private
name|double
name|createCoefficient
parameter_list|(
name|int
name|doc
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|matchedTokens
parameter_list|,
name|String
name|prefixToken
parameter_list|)
throws|throws
name|IOException
block|{
name|Terms
name|tv
init|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|getTermVector
argument_list|(
name|doc
argument_list|,
name|TEXT_FIELD_NAME
argument_list|)
decl_stmt|;
name|TermsEnum
name|it
init|=
name|tv
operator|.
name|iterator
argument_list|(
name|TermsEnum
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|Integer
name|position
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|BytesRef
name|term
decl_stmt|;
comment|// find the closest token position
while|while
condition|(
operator|(
name|term
operator|=
name|it
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|String
name|docTerm
init|=
name|term
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
if|if
condition|(
name|matchedTokens
operator|.
name|contains
argument_list|(
name|docTerm
argument_list|)
operator|||
name|docTerm
operator|.
name|startsWith
argument_list|(
name|prefixToken
argument_list|)
condition|)
block|{
name|DocsAndPositionsEnum
name|docPosEnum
init|=
name|it
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|DocsAndPositionsEnum
operator|.
name|FLAG_OFFSETS
argument_list|)
decl_stmt|;
name|docPosEnum
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
comment|// use the first occurrence of the term
name|int
name|p
init|=
name|docPosEnum
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|<
name|position
condition|)
block|{
name|position
operator|=
name|p
expr_stmt|;
block|}
block|}
block|}
comment|// create corresponding coefficient based on position
return|return
name|calculateCoefficient
argument_list|(
name|position
argument_list|)
return|;
block|}
comment|/**    * Calculate the weight coefficient based on the position of the first matching word.    * Subclass should override it to adapt it to particular needs    * @param position of the first matching word in text    * @return the coefficient    */
DECL|method|calculateCoefficient
specifier|protected
name|double
name|calculateCoefficient
parameter_list|(
name|int
name|position
parameter_list|)
block|{
name|double
name|coefficient
decl_stmt|;
switch|switch
condition|(
name|blenderType
condition|)
block|{
case|case
name|POSITION_LINEAR
case|:
name|coefficient
operator|=
literal|1
operator|-
name|LINEAR_COEF
operator|*
name|position
expr_stmt|;
break|break;
case|case
name|POSITION_RECIPROCAL
case|:
name|coefficient
operator|=
literal|1.
operator|/
operator|(
name|position
operator|+
literal|1
operator|)
expr_stmt|;
break|break;
default|default:
name|coefficient
operator|=
literal|1
expr_stmt|;
block|}
return|return
name|coefficient
return|;
block|}
DECL|field|LOOKUP_COMP
specifier|private
specifier|static
name|Comparator
argument_list|<
name|Lookup
operator|.
name|LookupResult
argument_list|>
name|LOOKUP_COMP
init|=
operator|new
name|LookUpComparator
argument_list|()
decl_stmt|;
DECL|class|LookUpComparator
specifier|private
specifier|static
class|class
name|LookUpComparator
implements|implements
name|Comparator
argument_list|<
name|Lookup
operator|.
name|LookupResult
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|Lookup
operator|.
name|LookupResult
name|o1
parameter_list|,
name|Lookup
operator|.
name|LookupResult
name|o2
parameter_list|)
block|{
comment|// order on weight
if|if
condition|(
name|o1
operator|.
name|value
operator|>
name|o2
operator|.
name|value
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|o1
operator|.
name|value
operator|<
name|o2
operator|.
name|value
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// otherwise on alphabetic order
return|return
name|CHARSEQUENCE_COMPARATOR
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|key
argument_list|,
name|o2
operator|.
name|key
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
