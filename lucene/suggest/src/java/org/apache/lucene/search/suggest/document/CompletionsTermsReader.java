begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.search.suggest.document
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|document
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import
begin_comment
comment|/**  * Holder for suggester and field-level info  * for a suggest field  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|CompletionsTermsReader
specifier|public
specifier|final
class|class
name|CompletionsTermsReader
implements|implements
name|Accountable
block|{
comment|/** Minimum entry weight for the suggester */
DECL|field|minWeight
specifier|public
specifier|final
name|long
name|minWeight
decl_stmt|;
comment|/** Maximum entry weight for the suggester */
DECL|field|maxWeight
specifier|public
specifier|final
name|long
name|maxWeight
decl_stmt|;
comment|/** type of suggester (context-enabled or not) */
DECL|field|type
specifier|public
specifier|final
name|byte
name|type
decl_stmt|;
DECL|field|dictIn
specifier|private
specifier|final
name|IndexInput
name|dictIn
decl_stmt|;
DECL|field|offset
specifier|private
specifier|final
name|long
name|offset
decl_stmt|;
DECL|field|suggester
specifier|private
name|NRTSuggester
name|suggester
decl_stmt|;
comment|/**    * Creates a CompletionTermsReader to load a field-specific suggester    * from the index<code>dictIn</code> with<code>offset</code>    */
DECL|method|CompletionsTermsReader
name|CompletionsTermsReader
parameter_list|(
name|IndexInput
name|dictIn
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|minWeight
parameter_list|,
name|long
name|maxWeight
parameter_list|,
name|byte
name|type
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|minWeight
operator|<=
name|maxWeight
assert|;
assert|assert
name|offset
operator|>=
literal|0l
operator|&&
name|offset
operator|<
name|dictIn
operator|.
name|length
argument_list|()
assert|;
name|this
operator|.
name|dictIn
operator|=
name|dictIn
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|minWeight
operator|=
name|minWeight
expr_stmt|;
name|this
operator|.
name|maxWeight
operator|=
name|maxWeight
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/**    * Returns the suggester for a field, if not loaded already, loads    * the appropriate suggester from CompletionDictionary    */
DECL|method|suggester
specifier|public
specifier|synchronized
name|NRTSuggester
name|suggester
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|suggester
operator|==
literal|null
condition|)
block|{
try|try
init|(
name|IndexInput
name|dictClone
init|=
name|dictIn
operator|.
name|clone
argument_list|()
init|)
block|{
comment|// let multiple fields load concurrently
name|dictClone
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|suggester
operator|=
name|NRTSuggester
operator|.
name|load
argument_list|(
name|dictClone
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|suggester
return|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
operator|(
name|suggester
operator|!=
literal|null
operator|)
condition|?
name|suggester
operator|.
name|ramBytesUsed
argument_list|()
else|:
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
name|Collection
argument_list|<
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
end_class
end_unit
