begin_unit
begin_package
DECL|package|org.apache.lucene.search.suggest.document
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|document
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BulkScorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LeafCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automaton
import|;
end_import
begin_comment
comment|/**  * Expert: Responsible for executing the query against an  * appropriate suggester and collecting the results  * via a collector.  *  * {@link #score(LeafCollector, int, int)} is called  * for each leaf reader.  *  * {@link #accept(int)} and {@link #score(float, float)}  * is called for every matched completion (i.e. document)  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|CompletionScorer
specifier|public
class|class
name|CompletionScorer
extends|extends
name|BulkScorer
block|{
DECL|field|suggester
specifier|private
specifier|final
name|NRTSuggester
name|suggester
decl_stmt|;
DECL|field|acceptDocs
specifier|private
specifier|final
name|Bits
name|acceptDocs
decl_stmt|;
comment|// values accessed by suggester
comment|/** weight that created this scorer */
DECL|field|weight
specifier|protected
specifier|final
name|CompletionWeight
name|weight
decl_stmt|;
DECL|field|reader
specifier|final
name|LeafReader
name|reader
decl_stmt|;
DECL|field|filtered
specifier|final
name|boolean
name|filtered
decl_stmt|;
DECL|field|automaton
specifier|final
name|Automaton
name|automaton
decl_stmt|;
comment|/**    * Creates a scorer for a field-specific<code>suggester</code> scoped by<code>acceptDocs</code>    */
DECL|method|CompletionScorer
specifier|protected
name|CompletionScorer
parameter_list|(
specifier|final
name|CompletionWeight
name|weight
parameter_list|,
specifier|final
name|NRTSuggester
name|suggester
parameter_list|,
specifier|final
name|LeafReader
name|reader
parameter_list|,
specifier|final
name|Bits
name|acceptDocs
parameter_list|,
specifier|final
name|boolean
name|filtered
parameter_list|,
specifier|final
name|Automaton
name|automaton
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|weight
operator|=
name|weight
expr_stmt|;
name|this
operator|.
name|suggester
operator|=
name|suggester
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|automaton
operator|=
name|automaton
expr_stmt|;
name|this
operator|.
name|filtered
operator|=
name|filtered
expr_stmt|;
name|this
operator|.
name|acceptDocs
operator|=
name|acceptDocs
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|int
name|score
parameter_list|(
name|LeafCollector
name|collector
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|collector
operator|instanceof
name|TopSuggestDocsCollector
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"collector is not of type TopSuggestDocsCollector"
argument_list|)
throw|;
block|}
name|suggester
operator|.
name|lookup
argument_list|(
name|this
argument_list|,
operator|(
operator|(
name|TopSuggestDocsCollector
operator|)
name|collector
operator|)
argument_list|)
expr_stmt|;
return|return
name|max
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
comment|/**    * Returns true if a document with<code>docID</code> is accepted,    * false if the docID maps to a deleted    * document or has been filtered out    */
DECL|method|accept
specifier|public
specifier|final
name|boolean
name|accept
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|acceptDocs
operator|==
literal|null
operator|||
name|acceptDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
return|;
block|}
comment|/**    * Returns the score for a matched completion    * based on the query time boost and the    * index time weight.    */
DECL|method|score
specifier|public
name|float
name|score
parameter_list|(
name|float
name|weight
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
if|if
condition|(
name|boost
operator|==
literal|0f
condition|)
block|{
return|return
name|weight
return|;
block|}
if|if
condition|(
name|weight
operator|==
literal|0f
condition|)
block|{
return|return
name|boost
return|;
block|}
return|return
name|weight
operator|*
name|boost
return|;
block|}
block|}
end_class
end_unit
