begin_unit
begin_package
DECL|package|org.apache.lucene.search.spell
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|InputIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_comment
comment|/**  * Dictionary represented by a text file.  *   *<p/>Format allowed: 1 word per line:<br/>  * word1<br/>  * word2<br/>  * word3<br/>  */
end_comment
begin_class
DECL|class|PlainTextDictionary
specifier|public
class|class
name|PlainTextDictionary
implements|implements
name|Dictionary
block|{
DECL|field|in
specifier|private
name|BufferedReader
name|in
decl_stmt|;
comment|/**    * Creates a dictionary based on a File.    *<p>    * NOTE: content is treated as UTF-8    */
DECL|method|PlainTextDictionary
specifier|public
name|PlainTextDictionary
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
name|IOUtils
operator|.
name|getDecodingReader
argument_list|(
name|file
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a dictionary based on an inputstream.    *<p>    * NOTE: content is treated as UTF-8    */
DECL|method|PlainTextDictionary
specifier|public
name|PlainTextDictionary
parameter_list|(
name|InputStream
name|dictFile
parameter_list|)
block|{
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
name|IOUtils
operator|.
name|getDecodingReader
argument_list|(
name|dictFile
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a dictionary based on a reader.    */
DECL|method|PlainTextDictionary
specifier|public
name|PlainTextDictionary
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEntryIterator
specifier|public
name|InputIterator
name|getEntryIterator
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|InputIterator
operator|.
name|InputIteratorWrapper
argument_list|(
operator|new
name|FileIterator
argument_list|()
argument_list|)
return|;
block|}
DECL|class|FileIterator
specifier|final
class|class
name|FileIterator
implements|implements
name|BytesRefIterator
block|{
DECL|field|done
specifier|private
name|boolean
name|done
init|=
literal|false
decl_stmt|;
DECL|field|spare
specifier|private
specifier|final
name|BytesRefBuilder
name|spare
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|next
specifier|public
name|BytesRef
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|done
condition|)
block|{
return|return
literal|null
return|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|BytesRef
name|result
decl_stmt|;
try|try
block|{
name|String
name|line
decl_stmt|;
if|if
condition|(
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|spare
operator|.
name|copyChars
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|result
operator|=
name|spare
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|done
operator|=
literal|true
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|result
operator|=
literal|null
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
block|}
end_class
end_unit
