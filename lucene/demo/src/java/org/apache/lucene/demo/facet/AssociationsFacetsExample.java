begin_unit
begin_package
DECL|package|org.apache.lucene.demo.facet
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|demo
operator|.
name|facet
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|WhitespaceAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|associations
operator|.
name|AssociationFloatSumFacetRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|associations
operator|.
name|AssociationIntSumFacetRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|associations
operator|.
name|AssociationsFacetFields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|associations
operator|.
name|CategoryAssociation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|associations
operator|.
name|CategoryAssociationsContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|associations
operator|.
name|CategoryFloatAssociation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|associations
operator|.
name|CategoryIntAssociation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|associations
operator|.
name|MultiAssociationsFacetsAggregator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|associations
operator|.
name|SumFloatAssociationFacetsAggregator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|associations
operator|.
name|SumIntAssociationFacetsAggregator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|FacetFields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|FacetSearchParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetsAccumulator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetsAggregator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetsCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/** Shows example usage of category associations. */
end_comment
begin_class
DECL|class|AssociationsFacetsExample
specifier|public
class|class
name|AssociationsFacetsExample
block|{
comment|/**    * Categories per document, {@link #ASSOCIATIONS} hold the association value    * for each category.    */
DECL|field|CATEGORIES
specifier|public
specifier|static
name|CategoryPath
index|[]
index|[]
name|CATEGORIES
init|=
block|{
comment|// Doc #1
block|{
operator|new
name|CategoryPath
argument_list|(
literal|"tags"
argument_list|,
literal|"lucene"
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
literal|"genre"
argument_list|,
literal|"computing"
argument_list|)
block|}
block|,
comment|// Doc #2
block|{
operator|new
name|CategoryPath
argument_list|(
literal|"tags"
argument_list|,
literal|"lucene"
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
literal|"tags"
argument_list|,
literal|"solr"
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
literal|"genre"
argument_list|,
literal|"computing"
argument_list|)
block|,
operator|new
name|CategoryPath
argument_list|(
literal|"genre"
argument_list|,
literal|"software"
argument_list|)
block|}
block|}
decl_stmt|;
comment|/** Association values for each category. */
DECL|field|ASSOCIATIONS
specifier|public
specifier|static
name|CategoryAssociation
index|[]
index|[]
name|ASSOCIATIONS
init|=
block|{
comment|// Doc #1 associations
block|{
comment|/* 3 occurrences for tag 'lucene' */
operator|new
name|CategoryIntAssociation
argument_list|(
literal|3
argument_list|)
block|,
comment|/* 87% confidence level of genre 'computing' */
operator|new
name|CategoryFloatAssociation
argument_list|(
literal|0.87f
argument_list|)
block|}
block|,
comment|// Doc #2 associations
block|{
comment|/* 1 occurrence for tag 'lucene' */
operator|new
name|CategoryIntAssociation
argument_list|(
literal|1
argument_list|)
block|,
comment|/* 2 occurrences for tag 'solr' */
operator|new
name|CategoryIntAssociation
argument_list|(
literal|2
argument_list|)
block|,
comment|/* 75% confidence level of genre 'computing' */
operator|new
name|CategoryFloatAssociation
argument_list|(
literal|0.75f
argument_list|)
block|,
comment|/* 34% confidence level of genre 'software' */
operator|new
name|CategoryFloatAssociation
argument_list|(
literal|0.34f
argument_list|)
block|,     }
block|}
decl_stmt|;
DECL|field|indexDir
specifier|private
specifier|final
name|Directory
name|indexDir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
DECL|field|taxoDir
specifier|private
specifier|final
name|Directory
name|taxoDir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
comment|/** Empty constructor */
DECL|method|AssociationsFacetsExample
specifier|public
name|AssociationsFacetsExample
parameter_list|()
block|{}
comment|/** Build the example index. */
DECL|method|index
specifier|private
name|void
name|index
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexWriter
name|indexWriter
init|=
operator|new
name|IndexWriter
argument_list|(
name|indexDir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|FacetExamples
operator|.
name|EXAMPLES_VER
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|(
name|FacetExamples
operator|.
name|EXAMPLES_VER
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Writes facet ords to a separate directory from the main index
name|DirectoryTaxonomyWriter
name|taxoWriter
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|taxoDir
argument_list|,
name|IndexWriterConfig
operator|.
name|OpenMode
operator|.
name|CREATE
argument_list|)
decl_stmt|;
comment|// Reused across documents, to add the necessary facet fields
name|FacetFields
name|facetFields
init|=
operator|new
name|AssociationsFacetFields
argument_list|(
name|taxoWriter
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CATEGORIES
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|CategoryAssociationsContainer
name|associations
init|=
operator|new
name|CategoryAssociationsContainer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|CATEGORIES
index|[
name|i
index|]
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|associations
operator|.
name|setAssociation
argument_list|(
name|CATEGORIES
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|,
name|ASSOCIATIONS
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|facetFields
operator|.
name|addFields
argument_list|(
name|doc
argument_list|,
name|associations
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|indexWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|taxoWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** User runs a query and aggregates facets by summing their association values. */
DECL|method|sumAssociations
specifier|private
name|List
argument_list|<
name|FacetResult
argument_list|>
name|sumAssociations
parameter_list|()
throws|throws
name|IOException
block|{
name|DirectoryReader
name|indexReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|indexDir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|indexReader
argument_list|)
decl_stmt|;
name|TaxonomyReader
name|taxoReader
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|taxoDir
argument_list|)
decl_stmt|;
name|CategoryPath
name|tags
init|=
operator|new
name|CategoryPath
argument_list|(
literal|"tags"
argument_list|)
decl_stmt|;
name|CategoryPath
name|genre
init|=
operator|new
name|CategoryPath
argument_list|(
literal|"genre"
argument_list|)
decl_stmt|;
name|FacetSearchParams
name|fsp
init|=
operator|new
name|FacetSearchParams
argument_list|(
operator|new
name|AssociationIntSumFacetRequest
argument_list|(
name|tags
argument_list|,
literal|10
argument_list|)
argument_list|,
operator|new
name|AssociationFloatSumFacetRequest
argument_list|(
name|genre
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
comment|// every category has a different type of association, so use chain their
comment|// respective aggregators.
specifier|final
name|Map
argument_list|<
name|CategoryPath
argument_list|,
name|FacetsAggregator
argument_list|>
name|aggregators
init|=
operator|new
name|HashMap
argument_list|<
name|CategoryPath
argument_list|,
name|FacetsAggregator
argument_list|>
argument_list|()
decl_stmt|;
name|aggregators
operator|.
name|put
argument_list|(
name|tags
argument_list|,
operator|new
name|SumIntAssociationFacetsAggregator
argument_list|()
argument_list|)
expr_stmt|;
name|aggregators
operator|.
name|put
argument_list|(
name|genre
argument_list|,
operator|new
name|SumFloatAssociationFacetsAggregator
argument_list|()
argument_list|)
expr_stmt|;
name|FacetsAccumulator
name|fa
init|=
operator|new
name|FacetsAccumulator
argument_list|(
name|fsp
argument_list|,
name|indexReader
argument_list|,
name|taxoReader
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|FacetsAggregator
name|getAggregator
parameter_list|()
block|{
return|return
operator|new
name|MultiAssociationsFacetsAggregator
argument_list|(
name|aggregators
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|FacetsCollector
name|fc
init|=
name|FacetsCollector
operator|.
name|create
argument_list|(
name|fa
argument_list|)
decl_stmt|;
comment|// MatchAllDocsQuery is for "browsing" (counts facets
comment|// for all non-deleted docs in the index); normally
comment|// you'd use a "normal" query, and use MultiCollector to
comment|// wrap collecting the "normal" hits and also facets:
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|fc
argument_list|)
expr_stmt|;
comment|// Retrieve results
name|List
argument_list|<
name|FacetResult
argument_list|>
name|facetResults
init|=
name|fc
operator|.
name|getFacetResults
argument_list|()
decl_stmt|;
name|indexReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|taxoReader
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|facetResults
return|;
block|}
comment|/** Runs summing association example. */
DECL|method|runSumAssociations
specifier|public
name|List
argument_list|<
name|FacetResult
argument_list|>
name|runSumAssociations
parameter_list|()
throws|throws
name|IOException
block|{
name|index
argument_list|()
expr_stmt|;
return|return
name|sumAssociations
argument_list|()
return|;
block|}
comment|/** Runs the sum int/float associations examples and prints the results. */
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Sum associations example:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-------------------------"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|results
init|=
operator|new
name|AssociationsFacetsExample
argument_list|()
operator|.
name|runSumAssociations
argument_list|()
decl_stmt|;
for|for
control|(
name|FacetResult
name|res
range|:
name|results
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
