begin_unit
begin_package
DECL|package|org.apache.lucene.demo.facet.simple
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|demo
operator|.
name|facet
operator|.
name|simple
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|demo
operator|.
name|facet
operator|.
name|ExampleUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|FacetIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|FacetSearchParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|CountFacetRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|DrillDown
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetResultNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetsCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopScoreDocCollector
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * SampleSearcer searches index with facets.   *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|SimpleSearcher
specifier|public
class|class
name|SimpleSearcher
block|{
comment|/** No instance */
DECL|method|SimpleSearcher
specifier|private
name|SimpleSearcher
parameter_list|()
block|{}
comment|/**    * Search an index with facets.    * @param indexReader index reader.    * @param taxoReader taxonomy reader.    * @throws Exception on error (no detailed exception handling here for sample simplicity    * @return facet results    */
DECL|method|searchWithFacets
specifier|public
specifier|static
name|List
argument_list|<
name|FacetResult
argument_list|>
name|searchWithFacets
parameter_list|(
name|IndexReader
name|indexReader
parameter_list|,
name|TaxonomyReader
name|taxoReader
parameter_list|)
throws|throws
name|Exception
block|{
name|CountFacetRequest
name|facetRequest
init|=
operator|new
name|CountFacetRequest
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"root"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
literal|10
argument_list|)
decl_stmt|;
return|return
name|searchWithRequest
argument_list|(
name|indexReader
argument_list|,
name|taxoReader
argument_list|,
literal|null
argument_list|,
name|facetRequest
argument_list|)
return|;
block|}
comment|/**    * Search an index with facets for given facet requests.    * @param indexReader index reader.    * @param taxoReader taxonomy reader.    * @param indexingParams the facet indexing params    * @param facetRequests facet requests of interest    * @throws Exception on error (no detailed exception handling here for sample simplicity    * @return facet results    */
DECL|method|searchWithRequest
specifier|public
specifier|static
name|List
argument_list|<
name|FacetResult
argument_list|>
name|searchWithRequest
parameter_list|(
name|IndexReader
name|indexReader
parameter_list|,
name|TaxonomyReader
name|taxoReader
parameter_list|,
name|FacetIndexingParams
name|indexingParams
parameter_list|,
name|FacetRequest
modifier|...
name|facetRequests
parameter_list|)
throws|throws
name|Exception
block|{
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|SimpleUtils
operator|.
name|TEXT
argument_list|,
literal|"white"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|searchWithRequestAndQuery
argument_list|(
name|q
argument_list|,
name|indexReader
argument_list|,
name|taxoReader
argument_list|,
name|indexingParams
argument_list|,
name|facetRequests
argument_list|)
return|;
block|}
comment|/**    * Search an index with facets for given query and facet requests.    * @param q query of interest    * @param indexReader index reader.    * @param taxoReader taxonomy reader.    * @param indexingParams the facet indexing params    * @param facetRequests facet requests of interest    * @throws Exception on error (no detailed exception handling here for sample simplicity    * @return facet results    */
DECL|method|searchWithRequestAndQuery
specifier|public
specifier|static
name|List
argument_list|<
name|FacetResult
argument_list|>
name|searchWithRequestAndQuery
parameter_list|(
name|Query
name|q
parameter_list|,
name|IndexReader
name|indexReader
parameter_list|,
name|TaxonomyReader
name|taxoReader
parameter_list|,
name|FacetIndexingParams
name|indexingParams
parameter_list|,
name|FacetRequest
modifier|...
name|facetRequests
parameter_list|)
throws|throws
name|Exception
block|{
name|ExampleUtils
operator|.
name|log
argument_list|(
literal|"Query: "
operator|+
name|q
argument_list|)
expr_stmt|;
comment|// prepare searcher to search against
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|indexReader
argument_list|)
decl_stmt|;
comment|// collect matching documents into a collector
name|TopScoreDocCollector
name|topDocsCollector
init|=
name|TopScoreDocCollector
operator|.
name|create
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexingParams
operator|==
literal|null
condition|)
block|{
name|indexingParams
operator|=
name|FacetIndexingParams
operator|.
name|ALL_PARENTS
expr_stmt|;
block|}
comment|// Faceted search parameters indicate which facets are we interested in
name|FacetSearchParams
name|facetSearchParams
init|=
operator|new
name|FacetSearchParams
argument_list|(
name|indexingParams
argument_list|,
name|facetRequests
argument_list|)
decl_stmt|;
name|FacetsCollector
name|facetsCollector
init|=
name|FacetsCollector
operator|.
name|create
argument_list|(
name|facetSearchParams
argument_list|,
name|indexReader
argument_list|,
name|taxoReader
argument_list|)
decl_stmt|;
comment|// perform documents search and facets accumulation
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|topDocsCollector
argument_list|,
name|facetsCollector
argument_list|)
argument_list|)
expr_stmt|;
comment|// Obtain facets results and print them
name|List
argument_list|<
name|FacetResult
argument_list|>
name|res
init|=
name|facetsCollector
operator|.
name|getFacetResults
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FacetResult
name|facetResult
range|:
name|res
control|)
block|{
name|ExampleUtils
operator|.
name|log
argument_list|(
literal|"Res "
operator|+
operator|(
name|i
operator|++
operator|)
operator|+
literal|": "
operator|+
name|facetResult
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|/**    * Search an index with facets drill-down.    * @param indexReader index reader.    * @param taxoReader taxonomy reader.    * @throws Exception on error (no detailed exception handling here for sample simplicity    * @return facet results    */
DECL|method|searchWithDrillDown
specifier|public
specifier|static
name|List
argument_list|<
name|FacetResult
argument_list|>
name|searchWithDrillDown
parameter_list|(
name|IndexReader
name|indexReader
parameter_list|,
name|TaxonomyReader
name|taxoReader
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|FacetIndexingParams
name|indexingParams
init|=
name|FacetIndexingParams
operator|.
name|ALL_PARENTS
decl_stmt|;
comment|// base query the user is interested in
name|Query
name|baseQuery
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|SimpleUtils
operator|.
name|TEXT
argument_list|,
literal|"white"
argument_list|)
argument_list|)
decl_stmt|;
comment|// facet of interest
name|CountFacetRequest
name|facetRequest
init|=
operator|new
name|CountFacetRequest
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"root"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// initial search - all docs matching the base query will contribute to the accumulation
name|List
argument_list|<
name|FacetResult
argument_list|>
name|res1
init|=
name|searchWithRequest
argument_list|(
name|indexReader
argument_list|,
name|taxoReader
argument_list|,
name|indexingParams
argument_list|,
name|facetRequest
argument_list|)
decl_stmt|;
comment|// a single result (because there was a single request)
name|FacetResult
name|fres
init|=
name|res1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// assume the user is interested in the second sub-result
comment|// (just take the second sub-result returned by the iterator - we know there are 3 results!)
name|Iterator
argument_list|<
name|?
extends|extends
name|FacetResultNode
argument_list|>
name|resIterator
init|=
name|fres
operator|.
name|getFacetResultNode
argument_list|()
operator|.
name|subResults
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|resIterator
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// skip first result
name|CategoryPath
name|categoryOfInterest
init|=
name|resIterator
operator|.
name|next
argument_list|()
operator|.
name|label
decl_stmt|;
comment|// drill-down preparation: turn the base query into a drill-down query for the category of interest
name|Query
name|q2
init|=
name|DrillDown
operator|.
name|query
argument_list|(
name|indexingParams
argument_list|,
name|baseQuery
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|,
name|categoryOfInterest
argument_list|)
decl_stmt|;
comment|// that's it - search with the new query and we're done!
comment|// only documents both matching the base query AND containing the
comment|// category of interest will contribute to the new accumulation
return|return
name|searchWithRequestAndQuery
argument_list|(
name|q2
argument_list|,
name|indexReader
argument_list|,
name|taxoReader
argument_list|,
name|indexingParams
argument_list|,
name|facetRequest
argument_list|)
return|;
block|}
block|}
end_class
end_unit
