begin_unit
begin_package
DECL|package|org.apache.lucene.demo.facet
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|demo
operator|.
name|facet
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetResultNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|TestAssociationsFacetsExample
specifier|public
class|class
name|TestAssociationsFacetsExample
extends|extends
name|LuceneTestCase
block|{
DECL|field|EXPECTED_INT_SUM_RESULTS
specifier|private
specifier|static
specifier|final
name|double
index|[]
name|EXPECTED_INT_SUM_RESULTS
init|=
block|{
literal|4
block|,
literal|2
block|}
decl_stmt|;
DECL|field|EXPECTED_FLOAT_SUM_RESULTS
specifier|private
specifier|static
specifier|final
name|double
index|[]
name|EXPECTED_FLOAT_SUM_RESULTS
init|=
block|{
literal|1.62
block|,
literal|0.34
block|}
decl_stmt|;
annotation|@
name|Test
DECL|method|testExamples
specifier|public
name|void
name|testExamples
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|FacetResult
argument_list|>
name|res
init|=
operator|new
name|AssociationsFacetsExample
argument_list|()
operator|.
name|runSumAssociations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of results"
argument_list|,
literal|2
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FacetResult
name|fres
range|:
name|res
control|)
block|{
name|assertEquals
argument_list|(
literal|"Wrong number of facets"
argument_list|,
literal|2
argument_list|,
name|fres
operator|.
name|getNumValidDescendants
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Iterable
argument_list|<
name|?
extends|extends
name|FacetResultNode
argument_list|>
name|it
init|=
name|res
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFacetResultNode
argument_list|()
operator|.
name|subResults
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FacetResultNode
name|fResNode
range|:
name|it
control|)
block|{
name|assertEquals
argument_list|(
literal|"Wrong result for facet "
operator|+
name|fResNode
operator|.
name|label
argument_list|,
name|EXPECTED_INT_SUM_RESULTS
index|[
name|i
operator|++
index|]
argument_list|,
name|fResNode
operator|.
name|value
argument_list|,
literal|1E
operator|-
literal|5
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|res
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFacetResultNode
argument_list|()
operator|.
name|subResults
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|FacetResultNode
name|fResNode
range|:
name|it
control|)
block|{
name|assertEquals
argument_list|(
literal|"Wrong result for facet "
operator|+
name|fResNode
operator|.
name|label
argument_list|,
name|EXPECTED_FLOAT_SUM_RESULTS
index|[
name|i
operator|++
index|]
argument_list|,
name|fResNode
operator|.
name|value
argument_list|,
literal|1E
operator|-
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
