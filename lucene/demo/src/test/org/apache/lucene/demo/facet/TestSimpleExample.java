begin_unit
begin_package
DECL|package|org.apache.lucene.demo.facet
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|demo
operator|.
name|facet
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|demo
operator|.
name|facet
operator|.
name|ExampleResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|demo
operator|.
name|facet
operator|.
name|simple
operator|.
name|SimpleMain
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetResultNode
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Test that the simple example works as expected. This test helps to verify  * that examples code is alive!  */
end_comment
begin_class
DECL|class|TestSimpleExample
specifier|public
class|class
name|TestSimpleExample
extends|extends
name|LuceneTestCase
block|{
annotation|@
name|Test
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|ExampleResult
name|res
init|=
operator|new
name|SimpleMain
argument_list|()
operator|.
name|runSimple
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Null result!"
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Null facet result!"
argument_list|,
name|res
operator|.
name|getFacetResults
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of results!"
argument_list|,
literal|1
argument_list|,
name|res
operator|.
name|getFacetResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of facets!"
argument_list|,
literal|3
argument_list|,
name|res
operator|.
name|getFacetResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNumValidDescendants
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * In drill down test we are drilling down to a facet that appears in a single document.    * As result, facets that without drill down got count of 2 will now get a count of 1.     */
annotation|@
name|Test
DECL|method|testDrillDown
specifier|public
name|void
name|testDrillDown
parameter_list|()
throws|throws
name|Exception
block|{
name|ExampleResult
name|res
init|=
operator|new
name|SimpleMain
argument_list|()
operator|.
name|runDrillDown
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Null result!"
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Null facet result!"
argument_list|,
name|res
operator|.
name|getFacetResults
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of results!"
argument_list|,
literal|1
argument_list|,
name|res
operator|.
name|getFacetResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// drill down facet appears in only 1 doc, and that doc has only 2 facets
name|FacetResult
name|facetResult
init|=
name|res
operator|.
name|getFacetResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of facets!"
argument_list|,
literal|2
argument_list|,
name|facetResult
operator|.
name|getNumValidDescendants
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|FacetResultNode
argument_list|>
name|resIterator
init|=
name|facetResult
operator|.
name|getFacetResultNode
argument_list|()
operator|.
name|subResults
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Too few results"
argument_list|,
name|resIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong count for first result out of 2"
argument_list|,
literal|1
argument_list|,
operator|(
name|int
operator|)
name|resIterator
operator|.
name|next
argument_list|()
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Too few results"
argument_list|,
name|resIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong count for second result out of 2"
argument_list|,
literal|1
argument_list|,
operator|(
name|int
operator|)
name|resIterator
operator|.
name|next
argument_list|()
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Too many results!"
argument_list|,
name|resIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
