begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortingMergePolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LeafCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|CollectionTerminatedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FilterLeafCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FilterCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocsCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TotalHitCountCollector
import|;
end_import
begin_comment
comment|/**  * A {@link Collector} that early terminates collection of documents on a  * per-segment basis, if the segment was sorted according to the given  * {@link Sort}.  *  *<p>  *<b>NOTE:</b> the {@code Collector} detects segments sorted according to a  * {@link SortingMergePolicy}'s {@link Sort} and so it's best used in conjunction  * with a {@link SortingMergePolicy}. Also,it collects up to a specified  * {@code numDocsToCollect} from each segment, and therefore is mostly suitable  * for use in conjunction with collectors such as {@link TopDocsCollector}, and  * not e.g. {@link TotalHitCountCollector}.  *<p>  *<b>NOTE</b>: If you wrap a {@code TopDocsCollector} that sorts in the same  * order as the index order, the returned {@link TopDocsCollector#topDocs() TopDocs}  * will be correct. However the total of {@link TopDocsCollector#getTotalHits()  * hit count} will be underestimated since not all matching documents will have  * been collected.  *<p>  *<b>NOTE</b>: This {@code Collector} uses {@link Sort#toString()} to detect  * whether a segment was sorted with the same {@code Sort}. This has  * two implications:  *<ul>  *<li>if a custom comparator is not implemented correctly and returns  * different identifiers for equivalent instances, this collector will not  * detect sorted segments,</li>  *<li>if you suddenly change the {@link IndexWriter}'s  * {@code SortingMergePolicy} to sort according to another criterion and if both  * the old and the new {@code Sort}s have the same identifier, this  * {@code Collector} will incorrectly detect sorted segments.</li>  *</ul>  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|EarlyTerminatingSortingCollector
specifier|public
class|class
name|EarlyTerminatingSortingCollector
extends|extends
name|FilterCollector
block|{
comment|/** Returns whether collection can be early-terminated if it sorts with the    *  provided {@link Sort} and if segments are merged with the provided    *  {@link Sort}. */
DECL|method|canEarlyTerminate
specifier|public
specifier|static
name|boolean
name|canEarlyTerminate
parameter_list|(
name|Sort
name|searchSort
parameter_list|,
name|Sort
name|mergePolicySort
parameter_list|)
block|{
specifier|final
name|SortField
index|[]
name|fields1
init|=
name|searchSort
operator|.
name|getSort
argument_list|()
decl_stmt|;
specifier|final
name|SortField
index|[]
name|fields2
init|=
name|mergePolicySort
operator|.
name|getSort
argument_list|()
decl_stmt|;
comment|// early termination is possible if fields1 is a prefix of fields2
if|if
condition|(
name|fields1
operator|.
name|length
operator|>
name|fields2
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|fields1
argument_list|)
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|fields2
argument_list|)
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|fields1
operator|.
name|length
argument_list|)
argument_list|)
return|;
block|}
comment|/** Sort used to sort the search results */
DECL|field|sort
specifier|protected
specifier|final
name|Sort
name|sort
decl_stmt|;
comment|/** Number of documents to collect in each segment */
DECL|field|numDocsToCollect
specifier|protected
specifier|final
name|int
name|numDocsToCollect
decl_stmt|;
DECL|field|mergePolicySort
specifier|private
specifier|final
name|Sort
name|mergePolicySort
decl_stmt|;
comment|/**    * Create a new {@link EarlyTerminatingSortingCollector} instance.    *    * @param in    *          the collector to wrap    * @param sort    *          the sort you are sorting the search results on    * @param numDocsToCollect    *          the number of documents to collect on each segment. When wrapping    *          a {@link TopDocsCollector}, this number should be the number of    *          hits.    * @param mergePolicySort    *          the sort your {@link SortingMergePolicy} uses    * @throws IllegalArgumentException if the sort order doesn't allow for early    *          termination with the given merge policy.    */
DECL|method|EarlyTerminatingSortingCollector
specifier|public
name|EarlyTerminatingSortingCollector
parameter_list|(
name|Collector
name|in
parameter_list|,
name|Sort
name|sort
parameter_list|,
name|int
name|numDocsToCollect
parameter_list|,
name|Sort
name|mergePolicySort
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|numDocsToCollect
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"numDocsToCollect must always be> 0, got "
operator|+
name|numDocsToCollect
argument_list|)
throw|;
block|}
if|if
condition|(
name|canEarlyTerminate
argument_list|(
name|sort
argument_list|,
name|mergePolicySort
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot early terminate with sort order "
operator|+
name|sort
operator|+
literal|" if segments are sorted with "
operator|+
name|mergePolicySort
argument_list|)
throw|;
block|}
name|this
operator|.
name|sort
operator|=
name|sort
expr_stmt|;
name|this
operator|.
name|numDocsToCollect
operator|=
name|numDocsToCollect
expr_stmt|;
name|this
operator|.
name|mergePolicySort
operator|=
name|mergePolicySort
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLeafCollector
specifier|public
name|LeafCollector
name|getLeafCollector
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|SortingMergePolicy
operator|.
name|isSorted
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|mergePolicySort
argument_list|)
condition|)
block|{
comment|// segment is sorted, can early-terminate
return|return
operator|new
name|FilterLeafCollector
argument_list|(
name|super
operator|.
name|getLeafCollector
argument_list|(
name|context
argument_list|)
argument_list|)
block|{
specifier|private
name|int
name|numCollected
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|collect
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|numCollected
operator|>=
name|numDocsToCollect
condition|)
block|{
throw|throw
operator|new
name|CollectionTerminatedException
argument_list|()
throw|;
block|}
block|}
block|}
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getLeafCollector
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
