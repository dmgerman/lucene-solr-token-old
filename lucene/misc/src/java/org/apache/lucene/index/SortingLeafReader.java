begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Sorter
operator|.
name|DocMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMFile
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMInputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMOutputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TimSorter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CompiledAutomaton
import|;
end_import
begin_comment
comment|/**  * An {@link org.apache.lucene.index.LeafReader} which supports sorting documents by a given  * {@link Sort}. You can use this class to sort an index as follows:  *  *<pre class="prettyprint">  * IndexWriter writer; // writer to which the sorted index will be added  * DirectoryReader reader; // reader on the input index  * Sort sort; // determines how the documents are sorted  * LeafReader sortingReader = SortingLeafReader.wrap(SlowCompositeReaderWrapper.wrap(reader), sort);  * writer.addIndexes(reader);  * writer.close();  * reader.close();  *</pre>  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|SortingLeafReader
specifier|public
class|class
name|SortingLeafReader
extends|extends
name|FilterLeafReader
block|{
DECL|class|SortingFields
specifier|private
specifier|static
class|class
name|SortingFields
extends|extends
name|FilterFields
block|{
DECL|field|docMap
specifier|private
specifier|final
name|Sorter
operator|.
name|DocMap
name|docMap
decl_stmt|;
DECL|field|infos
specifier|private
specifier|final
name|FieldInfos
name|infos
decl_stmt|;
DECL|method|SortingFields
specifier|public
name|SortingFields
parameter_list|(
specifier|final
name|Fields
name|in
parameter_list|,
name|FieldInfos
name|infos
parameter_list|,
name|Sorter
operator|.
name|DocMap
name|docMap
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|docMap
operator|=
name|docMap
expr_stmt|;
name|this
operator|.
name|infos
operator|=
name|infos
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|terms
specifier|public
name|Terms
name|terms
parameter_list|(
specifier|final
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|Terms
name|terms
init|=
name|in
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|SortingTerms
argument_list|(
name|terms
argument_list|,
name|infos
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
operator|.
name|getIndexOptions
argument_list|()
argument_list|,
name|docMap
argument_list|)
return|;
block|}
block|}
block|}
DECL|class|SortingTerms
specifier|private
specifier|static
class|class
name|SortingTerms
extends|extends
name|FilterTerms
block|{
DECL|field|docMap
specifier|private
specifier|final
name|Sorter
operator|.
name|DocMap
name|docMap
decl_stmt|;
DECL|field|indexOptions
specifier|private
specifier|final
name|IndexOptions
name|indexOptions
decl_stmt|;
DECL|method|SortingTerms
specifier|public
name|SortingTerms
parameter_list|(
specifier|final
name|Terms
name|in
parameter_list|,
name|IndexOptions
name|indexOptions
parameter_list|,
specifier|final
name|Sorter
operator|.
name|DocMap
name|docMap
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|docMap
operator|=
name|docMap
expr_stmt|;
name|this
operator|.
name|indexOptions
operator|=
name|indexOptions
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|TermsEnum
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|SortingTermsEnum
argument_list|(
name|in
operator|.
name|iterator
argument_list|()
argument_list|,
name|docMap
argument_list|,
name|indexOptions
argument_list|,
name|hasPositions
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|intersect
specifier|public
name|TermsEnum
name|intersect
parameter_list|(
name|CompiledAutomaton
name|compiled
parameter_list|,
name|BytesRef
name|startTerm
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SortingTermsEnum
argument_list|(
name|in
operator|.
name|intersect
argument_list|(
name|compiled
argument_list|,
name|startTerm
argument_list|)
argument_list|,
name|docMap
argument_list|,
name|indexOptions
argument_list|,
name|hasPositions
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|SortingTermsEnum
specifier|private
specifier|static
class|class
name|SortingTermsEnum
extends|extends
name|FilterTermsEnum
block|{
DECL|field|docMap
specifier|final
name|Sorter
operator|.
name|DocMap
name|docMap
decl_stmt|;
comment|// pkg-protected to avoid synthetic accessor methods
DECL|field|indexOptions
specifier|private
specifier|final
name|IndexOptions
name|indexOptions
decl_stmt|;
DECL|field|hasPositions
specifier|private
specifier|final
name|boolean
name|hasPositions
decl_stmt|;
DECL|method|SortingTermsEnum
specifier|public
name|SortingTermsEnum
parameter_list|(
specifier|final
name|TermsEnum
name|in
parameter_list|,
name|Sorter
operator|.
name|DocMap
name|docMap
parameter_list|,
name|IndexOptions
name|indexOptions
parameter_list|,
name|boolean
name|hasPositions
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|docMap
operator|=
name|docMap
expr_stmt|;
name|this
operator|.
name|indexOptions
operator|=
name|indexOptions
expr_stmt|;
name|this
operator|.
name|hasPositions
operator|=
name|hasPositions
expr_stmt|;
block|}
DECL|method|newToOld
name|Bits
name|newToOld
parameter_list|(
specifier|final
name|Bits
name|liveDocs
parameter_list|)
block|{
if|if
condition|(
name|liveDocs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Bits
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|liveDocs
operator|.
name|get
argument_list|(
name|docMap
operator|.
name|oldToNew
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|liveDocs
operator|.
name|length
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|postings
specifier|public
name|PostingsEnum
name|postings
parameter_list|(
name|PostingsEnum
name|reuse
parameter_list|,
specifier|final
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasPositions
operator|&&
name|PostingsEnum
operator|.
name|featureRequested
argument_list|(
name|flags
argument_list|,
name|PostingsEnum
operator|.
name|POSITIONS
argument_list|)
condition|)
block|{
specifier|final
name|PostingsEnum
name|inReuse
decl_stmt|;
specifier|final
name|SortingPostingsEnum
name|wrapReuse
decl_stmt|;
if|if
condition|(
name|reuse
operator|!=
literal|null
operator|&&
name|reuse
operator|instanceof
name|SortingPostingsEnum
condition|)
block|{
comment|// if we're asked to reuse the given DocsEnum and it is Sorting, return
comment|// the wrapped one, since some Codecs expect it.
name|wrapReuse
operator|=
operator|(
name|SortingPostingsEnum
operator|)
name|reuse
expr_stmt|;
name|inReuse
operator|=
name|wrapReuse
operator|.
name|getWrapped
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|wrapReuse
operator|=
literal|null
expr_stmt|;
name|inReuse
operator|=
name|reuse
expr_stmt|;
block|}
specifier|final
name|PostingsEnum
name|inDocsAndPositions
init|=
name|in
operator|.
name|postings
argument_list|(
name|inReuse
argument_list|,
name|flags
argument_list|)
decl_stmt|;
comment|// we ignore the fact that offsets may be stored but not asked for,
comment|// since this code is expected to be used during addIndexes which will
comment|// ask for everything. if that assumption changes in the future, we can
comment|// factor in whether 'flags' says offsets are not required.
specifier|final
name|boolean
name|storeOffsets
init|=
name|indexOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
operator|>=
literal|0
decl_stmt|;
return|return
operator|new
name|SortingPostingsEnum
argument_list|(
name|docMap
operator|.
name|size
argument_list|()
argument_list|,
name|wrapReuse
argument_list|,
name|inDocsAndPositions
argument_list|,
name|docMap
argument_list|,
name|storeOffsets
argument_list|)
return|;
block|}
specifier|final
name|PostingsEnum
name|inReuse
decl_stmt|;
specifier|final
name|SortingDocsEnum
name|wrapReuse
decl_stmt|;
if|if
condition|(
name|reuse
operator|!=
literal|null
operator|&&
name|reuse
operator|instanceof
name|SortingDocsEnum
condition|)
block|{
comment|// if we're asked to reuse the given DocsEnum and it is Sorting, return
comment|// the wrapped one, since some Codecs expect it.
name|wrapReuse
operator|=
operator|(
name|SortingDocsEnum
operator|)
name|reuse
expr_stmt|;
name|inReuse
operator|=
name|wrapReuse
operator|.
name|getWrapped
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|wrapReuse
operator|=
literal|null
expr_stmt|;
name|inReuse
operator|=
name|reuse
expr_stmt|;
block|}
specifier|final
name|PostingsEnum
name|inDocs
init|=
name|in
operator|.
name|postings
argument_list|(
name|inReuse
argument_list|,
name|flags
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|withFreqs
init|=
name|indexOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|)
operator|>=
literal|0
operator|&&
name|PostingsEnum
operator|.
name|featureRequested
argument_list|(
name|flags
argument_list|,
name|PostingsEnum
operator|.
name|FREQS
argument_list|)
decl_stmt|;
return|return
operator|new
name|SortingDocsEnum
argument_list|(
name|docMap
operator|.
name|size
argument_list|()
argument_list|,
name|wrapReuse
argument_list|,
name|inDocs
argument_list|,
name|withFreqs
argument_list|,
name|docMap
argument_list|)
return|;
block|}
block|}
DECL|class|SortingBinaryDocValues
specifier|private
specifier|static
class|class
name|SortingBinaryDocValues
extends|extends
name|BinaryDocValues
block|{
DECL|field|in
specifier|private
specifier|final
name|BinaryDocValues
name|in
decl_stmt|;
DECL|field|docMap
specifier|private
specifier|final
name|Sorter
operator|.
name|DocMap
name|docMap
decl_stmt|;
DECL|method|SortingBinaryDocValues
name|SortingBinaryDocValues
parameter_list|(
name|BinaryDocValues
name|in
parameter_list|,
name|Sorter
operator|.
name|DocMap
name|docMap
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|docMap
operator|=
name|docMap
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|BytesRef
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|in
operator|.
name|get
argument_list|(
name|docMap
operator|.
name|newToOld
argument_list|(
name|docID
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|class|SortingNumericDocValues
specifier|private
specifier|static
class|class
name|SortingNumericDocValues
extends|extends
name|NumericDocValues
block|{
DECL|field|in
specifier|private
specifier|final
name|NumericDocValues
name|in
decl_stmt|;
DECL|field|docMap
specifier|private
specifier|final
name|Sorter
operator|.
name|DocMap
name|docMap
decl_stmt|;
DECL|method|SortingNumericDocValues
specifier|public
name|SortingNumericDocValues
parameter_list|(
specifier|final
name|NumericDocValues
name|in
parameter_list|,
name|Sorter
operator|.
name|DocMap
name|docMap
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|docMap
operator|=
name|docMap
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|in
operator|.
name|get
argument_list|(
name|docMap
operator|.
name|newToOld
argument_list|(
name|docID
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|class|SortingSortedNumericDocValues
specifier|private
specifier|static
class|class
name|SortingSortedNumericDocValues
extends|extends
name|SortedNumericDocValues
block|{
DECL|field|in
specifier|private
specifier|final
name|SortedNumericDocValues
name|in
decl_stmt|;
DECL|field|docMap
specifier|private
specifier|final
name|Sorter
operator|.
name|DocMap
name|docMap
decl_stmt|;
DECL|method|SortingSortedNumericDocValues
name|SortingSortedNumericDocValues
parameter_list|(
name|SortedNumericDocValues
name|in
parameter_list|,
name|DocMap
name|docMap
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|docMap
operator|=
name|docMap
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|count
specifier|public
name|int
name|count
parameter_list|()
block|{
return|return
name|in
operator|.
name|count
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setDocument
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|in
operator|.
name|setDocument
argument_list|(
name|docMap
operator|.
name|newToOld
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|valueAt
specifier|public
name|long
name|valueAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|in
operator|.
name|valueAt
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
DECL|class|SortingBits
specifier|private
specifier|static
class|class
name|SortingBits
implements|implements
name|Bits
block|{
DECL|field|in
specifier|private
specifier|final
name|Bits
name|in
decl_stmt|;
DECL|field|docMap
specifier|private
specifier|final
name|Sorter
operator|.
name|DocMap
name|docMap
decl_stmt|;
DECL|method|SortingBits
specifier|public
name|SortingBits
parameter_list|(
specifier|final
name|Bits
name|in
parameter_list|,
name|Sorter
operator|.
name|DocMap
name|docMap
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|docMap
operator|=
name|docMap
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|in
operator|.
name|get
argument_list|(
name|docMap
operator|.
name|newToOld
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|length
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|in
operator|.
name|length
argument_list|()
return|;
block|}
block|}
DECL|class|SortingSortedDocValues
specifier|private
specifier|static
class|class
name|SortingSortedDocValues
extends|extends
name|SortedDocValues
block|{
DECL|field|in
specifier|private
specifier|final
name|SortedDocValues
name|in
decl_stmt|;
DECL|field|docMap
specifier|private
specifier|final
name|Sorter
operator|.
name|DocMap
name|docMap
decl_stmt|;
DECL|method|SortingSortedDocValues
name|SortingSortedDocValues
parameter_list|(
name|SortedDocValues
name|in
parameter_list|,
name|Sorter
operator|.
name|DocMap
name|docMap
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|docMap
operator|=
name|docMap
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOrd
specifier|public
name|int
name|getOrd
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|in
operator|.
name|getOrd
argument_list|(
name|docMap
operator|.
name|newToOld
argument_list|(
name|docID
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|lookupOrd
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
return|return
name|in
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
name|in
operator|.
name|getValueCount
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|BytesRef
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|in
operator|.
name|get
argument_list|(
name|docMap
operator|.
name|newToOld
argument_list|(
name|docID
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|lookupTerm
specifier|public
name|int
name|lookupTerm
parameter_list|(
name|BytesRef
name|key
parameter_list|)
block|{
return|return
name|in
operator|.
name|lookupTerm
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
DECL|class|SortingSortedSetDocValues
specifier|private
specifier|static
class|class
name|SortingSortedSetDocValues
extends|extends
name|SortedSetDocValues
block|{
DECL|field|in
specifier|private
specifier|final
name|SortedSetDocValues
name|in
decl_stmt|;
DECL|field|docMap
specifier|private
specifier|final
name|Sorter
operator|.
name|DocMap
name|docMap
decl_stmt|;
DECL|method|SortingSortedSetDocValues
name|SortingSortedSetDocValues
parameter_list|(
name|SortedSetDocValues
name|in
parameter_list|,
name|Sorter
operator|.
name|DocMap
name|docMap
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|docMap
operator|=
name|docMap
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nextOrd
specifier|public
name|long
name|nextOrd
parameter_list|()
block|{
return|return
name|in
operator|.
name|nextOrd
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setDocument
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|in
operator|.
name|setDocument
argument_list|(
name|docMap
operator|.
name|newToOld
argument_list|(
name|docID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lookupOrd
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|long
name|ord
parameter_list|)
block|{
return|return
name|in
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
name|long
name|getValueCount
parameter_list|()
block|{
return|return
name|in
operator|.
name|getValueCount
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|lookupTerm
specifier|public
name|long
name|lookupTerm
parameter_list|(
name|BytesRef
name|key
parameter_list|)
block|{
return|return
name|in
operator|.
name|lookupTerm
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
DECL|class|SortingDocsEnum
specifier|static
class|class
name|SortingDocsEnum
extends|extends
name|FilterPostingsEnum
block|{
DECL|class|DocFreqSorter
specifier|private
specifier|static
specifier|final
class|class
name|DocFreqSorter
extends|extends
name|TimSorter
block|{
DECL|field|docs
specifier|private
name|int
index|[]
name|docs
decl_stmt|;
DECL|field|freqs
specifier|private
name|int
index|[]
name|freqs
decl_stmt|;
DECL|field|tmpDocs
specifier|private
specifier|final
name|int
index|[]
name|tmpDocs
decl_stmt|;
DECL|field|tmpFreqs
specifier|private
name|int
index|[]
name|tmpFreqs
decl_stmt|;
DECL|method|DocFreqSorter
specifier|public
name|DocFreqSorter
parameter_list|(
name|int
name|maxDoc
parameter_list|)
block|{
name|super
argument_list|(
name|maxDoc
operator|/
literal|64
argument_list|)
expr_stmt|;
name|this
operator|.
name|tmpDocs
operator|=
operator|new
name|int
index|[
name|maxDoc
operator|/
literal|64
index|]
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|int
index|[]
name|docs
parameter_list|,
name|int
index|[]
name|freqs
parameter_list|)
block|{
name|this
operator|.
name|docs
operator|=
name|docs
expr_stmt|;
name|this
operator|.
name|freqs
operator|=
name|freqs
expr_stmt|;
if|if
condition|(
name|freqs
operator|!=
literal|null
operator|&&
name|tmpFreqs
operator|==
literal|null
condition|)
block|{
name|tmpFreqs
operator|=
operator|new
name|int
index|[
name|tmpDocs
operator|.
name|length
index|]
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|compare
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
return|return
name|docs
index|[
name|i
index|]
operator|-
name|docs
index|[
name|j
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|swap
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|int
name|tmpDoc
init|=
name|docs
index|[
name|i
index|]
decl_stmt|;
name|docs
index|[
name|i
index|]
operator|=
name|docs
index|[
name|j
index|]
expr_stmt|;
name|docs
index|[
name|j
index|]
operator|=
name|tmpDoc
expr_stmt|;
if|if
condition|(
name|freqs
operator|!=
literal|null
condition|)
block|{
name|int
name|tmpFreq
init|=
name|freqs
index|[
name|i
index|]
decl_stmt|;
name|freqs
index|[
name|i
index|]
operator|=
name|freqs
index|[
name|j
index|]
expr_stmt|;
name|freqs
index|[
name|j
index|]
operator|=
name|tmpFreq
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|copy
specifier|protected
name|void
name|copy
parameter_list|(
name|int
name|src
parameter_list|,
name|int
name|dest
parameter_list|)
block|{
name|docs
index|[
name|dest
index|]
operator|=
name|docs
index|[
name|src
index|]
expr_stmt|;
if|if
condition|(
name|freqs
operator|!=
literal|null
condition|)
block|{
name|freqs
index|[
name|dest
index|]
operator|=
name|freqs
index|[
name|src
index|]
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|save
specifier|protected
name|void
name|save
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|docs
argument_list|,
name|i
argument_list|,
name|tmpDocs
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|freqs
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|freqs
argument_list|,
name|i
argument_list|,
name|tmpFreqs
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|restore
specifier|protected
name|void
name|restore
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|docs
index|[
name|j
index|]
operator|=
name|tmpDocs
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|freqs
operator|!=
literal|null
condition|)
block|{
name|freqs
index|[
name|j
index|]
operator|=
name|tmpFreqs
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|compareSaved
specifier|protected
name|int
name|compareSaved
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
return|return
name|tmpDocs
index|[
name|i
index|]
operator|-
name|docs
index|[
name|j
index|]
return|;
block|}
block|}
DECL|field|maxDoc
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|sorter
specifier|private
specifier|final
name|DocFreqSorter
name|sorter
decl_stmt|;
DECL|field|docs
specifier|private
name|int
index|[]
name|docs
decl_stmt|;
DECL|field|freqs
specifier|private
name|int
index|[]
name|freqs
decl_stmt|;
DECL|field|docIt
specifier|private
name|int
name|docIt
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|upto
specifier|private
specifier|final
name|int
name|upto
decl_stmt|;
DECL|field|withFreqs
specifier|private
specifier|final
name|boolean
name|withFreqs
decl_stmt|;
DECL|method|SortingDocsEnum
name|SortingDocsEnum
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|SortingDocsEnum
name|reuse
parameter_list|,
specifier|final
name|PostingsEnum
name|in
parameter_list|,
name|boolean
name|withFreqs
parameter_list|,
specifier|final
name|Sorter
operator|.
name|DocMap
name|docMap
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
name|this
operator|.
name|withFreqs
operator|=
name|withFreqs
expr_stmt|;
if|if
condition|(
name|reuse
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|reuse
operator|.
name|maxDoc
operator|==
name|maxDoc
condition|)
block|{
name|sorter
operator|=
name|reuse
operator|.
name|sorter
expr_stmt|;
block|}
else|else
block|{
name|sorter
operator|=
operator|new
name|DocFreqSorter
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
block|}
name|docs
operator|=
name|reuse
operator|.
name|docs
expr_stmt|;
name|freqs
operator|=
name|reuse
operator|.
name|freqs
expr_stmt|;
comment|// maybe null
block|}
else|else
block|{
name|docs
operator|=
operator|new
name|int
index|[
literal|64
index|]
expr_stmt|;
name|sorter
operator|=
operator|new
name|DocFreqSorter
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
block|}
name|docIt
operator|=
operator|-
literal|1
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|doc
decl_stmt|;
if|if
condition|(
name|withFreqs
condition|)
block|{
if|if
condition|(
name|freqs
operator|==
literal|null
operator|||
name|freqs
operator|.
name|length
operator|<
name|docs
operator|.
name|length
condition|)
block|{
name|freqs
operator|=
operator|new
name|int
index|[
name|docs
operator|.
name|length
index|]
expr_stmt|;
block|}
while|while
condition|(
operator|(
name|doc
operator|=
name|in
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
if|if
condition|(
name|i
operator|>=
name|docs
operator|.
name|length
condition|)
block|{
name|docs
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|docs
argument_list|,
name|docs
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
name|freqs
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|freqs
argument_list|,
name|freqs
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|docs
index|[
name|i
index|]
operator|=
name|docMap
operator|.
name|oldToNew
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|freqs
index|[
name|i
index|]
operator|=
name|in
operator|.
name|freq
argument_list|()
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
block|}
else|else
block|{
name|freqs
operator|=
literal|null
expr_stmt|;
while|while
condition|(
operator|(
name|doc
operator|=
name|in
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
if|if
condition|(
name|i
operator|>=
name|docs
operator|.
name|length
condition|)
block|{
name|docs
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|docs
argument_list|,
name|docs
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|docs
index|[
name|i
operator|++
index|]
operator|=
name|docMap
operator|.
name|oldToNew
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TimSort can save much time compared to other sorts in case of
comment|// reverse sorting, or when sorting a concatenation of sorted readers
name|sorter
operator|.
name|reset
argument_list|(
name|docs
argument_list|,
name|freqs
argument_list|)
expr_stmt|;
name|sorter
operator|.
name|sort
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|upto
operator|=
name|i
expr_stmt|;
block|}
comment|// for testing
DECL|method|reused
name|boolean
name|reused
parameter_list|(
name|PostingsEnum
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
operator|||
operator|!
operator|(
name|other
operator|instanceof
name|SortingDocsEnum
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|docs
operator|==
operator|(
operator|(
name|SortingDocsEnum
operator|)
name|other
operator|)
operator|.
name|docs
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
specifier|final
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
comment|// need to support it for checkIndex, but in practice it won't be called, so
comment|// don't bother to implement efficiently for now.
return|return
name|slowAdvance
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docIt
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
name|docIt
operator|>=
name|upto
condition|?
name|NO_MORE_DOCS
else|:
name|docs
index|[
name|docIt
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|withFreqs
operator|&&
name|docIt
operator|<
name|upto
condition|?
name|freqs
index|[
name|docIt
index|]
else|:
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|++
name|docIt
operator|>=
name|upto
condition|)
return|return
name|NO_MORE_DOCS
return|;
return|return
name|docs
index|[
name|docIt
index|]
return|;
block|}
comment|/** Returns the wrapped {@link PostingsEnum}. */
DECL|method|getWrapped
name|PostingsEnum
name|getWrapped
parameter_list|()
block|{
return|return
name|in
return|;
block|}
comment|// we buffer up docs/freqs only, don't forward any positions requests to underlying enum
annotation|@
name|Override
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|startOffset
specifier|public
name|int
name|startOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|endOffset
specifier|public
name|int
name|endOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|class|SortingPostingsEnum
specifier|static
class|class
name|SortingPostingsEnum
extends|extends
name|FilterPostingsEnum
block|{
comment|/**      * A {@link TimSorter} which sorts two parallel arrays of doc IDs and      * offsets in one go. Everytime a doc ID is 'swapped', its corresponding offset      * is swapped too.      */
DECL|class|DocOffsetSorter
specifier|private
specifier|static
specifier|final
class|class
name|DocOffsetSorter
extends|extends
name|TimSorter
block|{
DECL|field|docs
specifier|private
name|int
index|[]
name|docs
decl_stmt|;
DECL|field|offsets
specifier|private
name|long
index|[]
name|offsets
decl_stmt|;
DECL|field|tmpDocs
specifier|private
specifier|final
name|int
index|[]
name|tmpDocs
decl_stmt|;
DECL|field|tmpOffsets
specifier|private
specifier|final
name|long
index|[]
name|tmpOffsets
decl_stmt|;
DECL|method|DocOffsetSorter
specifier|public
name|DocOffsetSorter
parameter_list|(
name|int
name|maxDoc
parameter_list|)
block|{
name|super
argument_list|(
name|maxDoc
operator|/
literal|64
argument_list|)
expr_stmt|;
name|this
operator|.
name|tmpDocs
operator|=
operator|new
name|int
index|[
name|maxDoc
operator|/
literal|64
index|]
expr_stmt|;
name|this
operator|.
name|tmpOffsets
operator|=
operator|new
name|long
index|[
name|maxDoc
operator|/
literal|64
index|]
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|int
index|[]
name|docs
parameter_list|,
name|long
index|[]
name|offsets
parameter_list|)
block|{
name|this
operator|.
name|docs
operator|=
name|docs
expr_stmt|;
name|this
operator|.
name|offsets
operator|=
name|offsets
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
return|return
name|docs
index|[
name|i
index|]
operator|-
name|docs
index|[
name|j
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|swap
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|int
name|tmpDoc
init|=
name|docs
index|[
name|i
index|]
decl_stmt|;
name|docs
index|[
name|i
index|]
operator|=
name|docs
index|[
name|j
index|]
expr_stmt|;
name|docs
index|[
name|j
index|]
operator|=
name|tmpDoc
expr_stmt|;
name|long
name|tmpOffset
init|=
name|offsets
index|[
name|i
index|]
decl_stmt|;
name|offsets
index|[
name|i
index|]
operator|=
name|offsets
index|[
name|j
index|]
expr_stmt|;
name|offsets
index|[
name|j
index|]
operator|=
name|tmpOffset
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|protected
name|void
name|copy
parameter_list|(
name|int
name|src
parameter_list|,
name|int
name|dest
parameter_list|)
block|{
name|docs
index|[
name|dest
index|]
operator|=
name|docs
index|[
name|src
index|]
expr_stmt|;
name|offsets
index|[
name|dest
index|]
operator|=
name|offsets
index|[
name|src
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|save
specifier|protected
name|void
name|save
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|docs
argument_list|,
name|i
argument_list|,
name|tmpDocs
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|offsets
argument_list|,
name|i
argument_list|,
name|tmpOffsets
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|restore
specifier|protected
name|void
name|restore
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|docs
index|[
name|j
index|]
operator|=
name|tmpDocs
index|[
name|i
index|]
expr_stmt|;
name|offsets
index|[
name|j
index|]
operator|=
name|tmpOffsets
index|[
name|i
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareSaved
specifier|protected
name|int
name|compareSaved
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
return|return
name|tmpDocs
index|[
name|i
index|]
operator|-
name|docs
index|[
name|j
index|]
return|;
block|}
block|}
DECL|field|maxDoc
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|sorter
specifier|private
specifier|final
name|DocOffsetSorter
name|sorter
decl_stmt|;
DECL|field|docs
specifier|private
name|int
index|[]
name|docs
decl_stmt|;
DECL|field|offsets
specifier|private
name|long
index|[]
name|offsets
decl_stmt|;
DECL|field|upto
specifier|private
specifier|final
name|int
name|upto
decl_stmt|;
DECL|field|postingInput
specifier|private
specifier|final
name|IndexInput
name|postingInput
decl_stmt|;
DECL|field|storeOffsets
specifier|private
specifier|final
name|boolean
name|storeOffsets
decl_stmt|;
DECL|field|docIt
specifier|private
name|int
name|docIt
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|pos
specifier|private
name|int
name|pos
decl_stmt|;
DECL|field|startOffset
specifier|private
name|int
name|startOffset
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|endOffset
specifier|private
name|int
name|endOffset
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|payload
specifier|private
specifier|final
name|BytesRef
name|payload
decl_stmt|;
DECL|field|currFreq
specifier|private
name|int
name|currFreq
decl_stmt|;
DECL|field|file
specifier|private
specifier|final
name|RAMFile
name|file
decl_stmt|;
DECL|method|SortingPostingsEnum
name|SortingPostingsEnum
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|SortingPostingsEnum
name|reuse
parameter_list|,
specifier|final
name|PostingsEnum
name|in
parameter_list|,
name|Sorter
operator|.
name|DocMap
name|docMap
parameter_list|,
name|boolean
name|storeOffsets
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
name|this
operator|.
name|storeOffsets
operator|=
name|storeOffsets
expr_stmt|;
if|if
condition|(
name|reuse
operator|!=
literal|null
condition|)
block|{
name|docs
operator|=
name|reuse
operator|.
name|docs
expr_stmt|;
name|offsets
operator|=
name|reuse
operator|.
name|offsets
expr_stmt|;
name|payload
operator|=
name|reuse
operator|.
name|payload
expr_stmt|;
name|file
operator|=
name|reuse
operator|.
name|file
expr_stmt|;
if|if
condition|(
name|reuse
operator|.
name|maxDoc
operator|==
name|maxDoc
condition|)
block|{
name|sorter
operator|=
name|reuse
operator|.
name|sorter
expr_stmt|;
block|}
else|else
block|{
name|sorter
operator|=
operator|new
name|DocOffsetSorter
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|docs
operator|=
operator|new
name|int
index|[
literal|32
index|]
expr_stmt|;
name|offsets
operator|=
operator|new
name|long
index|[
literal|32
index|]
expr_stmt|;
name|payload
operator|=
operator|new
name|BytesRef
argument_list|(
literal|32
argument_list|)
expr_stmt|;
name|file
operator|=
operator|new
name|RAMFile
argument_list|()
expr_stmt|;
name|sorter
operator|=
operator|new
name|DocOffsetSorter
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexOutput
name|out
init|=
operator|new
name|RAMOutputStream
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|doc
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|doc
operator|=
name|in
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|docs
operator|.
name|length
condition|)
block|{
specifier|final
name|int
name|newLength
init|=
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|i
operator|+
literal|1
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|docs
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|docs
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
name|offsets
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|offsets
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
block|}
name|docs
index|[
name|i
index|]
operator|=
name|docMap
operator|.
name|oldToNew
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|offsets
index|[
name|i
index|]
operator|=
name|out
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
name|addPositions
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|upto
operator|=
name|i
expr_stmt|;
name|sorter
operator|.
name|reset
argument_list|(
name|docs
argument_list|,
name|offsets
argument_list|)
expr_stmt|;
name|sorter
operator|.
name|sort
argument_list|(
literal|0
argument_list|,
name|upto
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|postingInput
operator|=
operator|new
name|RAMInputStream
argument_list|(
literal|""
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|// for testing
DECL|method|reused
name|boolean
name|reused
parameter_list|(
name|PostingsEnum
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
operator|||
operator|!
operator|(
name|other
operator|instanceof
name|SortingPostingsEnum
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|docs
operator|==
operator|(
operator|(
name|SortingPostingsEnum
operator|)
name|other
operator|)
operator|.
name|docs
return|;
block|}
DECL|method|addPositions
specifier|private
name|void
name|addPositions
parameter_list|(
specifier|final
name|PostingsEnum
name|in
parameter_list|,
specifier|final
name|IndexOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|freq
init|=
name|in
operator|.
name|freq
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|freq
argument_list|)
expr_stmt|;
name|int
name|previousPosition
init|=
literal|0
decl_stmt|;
name|int
name|previousEndOffset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|freq
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|pos
init|=
name|in
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
specifier|final
name|BytesRef
name|payload
init|=
name|in
operator|.
name|getPayload
argument_list|()
decl_stmt|;
comment|// The low-order bit of token is set only if there is a payload, the
comment|// previous bits are the delta-encoded position.
specifier|final
name|int
name|token
init|=
operator|(
name|pos
operator|-
name|previousPosition
operator|)
operator|<<
literal|1
operator||
operator|(
name|payload
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
operator|)
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|previousPosition
operator|=
name|pos
expr_stmt|;
if|if
condition|(
name|storeOffsets
condition|)
block|{
comment|// don't encode offsets if they are not stored
specifier|final
name|int
name|startOffset
init|=
name|in
operator|.
name|startOffset
argument_list|()
decl_stmt|;
specifier|final
name|int
name|endOffset
init|=
name|in
operator|.
name|endOffset
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|startOffset
operator|-
name|previousEndOffset
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|endOffset
operator|-
name|startOffset
argument_list|)
expr_stmt|;
name|previousEndOffset
operator|=
name|endOffset
expr_stmt|;
block|}
if|if
condition|(
name|payload
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|payload
operator|.
name|bytes
argument_list|,
name|payload
operator|.
name|offset
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
specifier|final
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
comment|// need to support it for checkIndex, but in practice it won't be called, so
comment|// don't bother to implement efficiently for now.
return|return
name|slowAdvance
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docIt
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
name|docIt
operator|>=
name|upto
condition|?
name|NO_MORE_DOCS
else|:
name|docs
index|[
name|docIt
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|endOffset
specifier|public
name|int
name|endOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|endOffset
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|currFreq
return|;
block|}
annotation|@
name|Override
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|payload
operator|.
name|length
operator|==
literal|0
condition|?
literal|null
else|:
name|payload
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|++
name|docIt
operator|>=
name|upto
condition|)
return|return
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
return|;
name|postingInput
operator|.
name|seek
argument_list|(
name|offsets
index|[
name|docIt
index|]
argument_list|)
expr_stmt|;
name|currFreq
operator|=
name|postingInput
operator|.
name|readVInt
argument_list|()
expr_stmt|;
comment|// reset variables used in nextPosition
name|pos
operator|=
literal|0
expr_stmt|;
name|endOffset
operator|=
literal|0
expr_stmt|;
return|return
name|docs
index|[
name|docIt
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|token
init|=
name|postingInput
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|pos
operator|+=
name|token
operator|>>>
literal|1
expr_stmt|;
if|if
condition|(
name|storeOffsets
condition|)
block|{
name|startOffset
operator|=
name|endOffset
operator|+
name|postingInput
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|endOffset
operator|=
name|startOffset
operator|+
name|postingInput
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|token
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
name|payload
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|payload
operator|.
name|length
operator|=
name|postingInput
operator|.
name|readVInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|payload
operator|.
name|length
operator|>
name|payload
operator|.
name|bytes
operator|.
name|length
condition|)
block|{
name|payload
operator|.
name|bytes
operator|=
operator|new
name|byte
index|[
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|payload
operator|.
name|length
argument_list|,
literal|1
argument_list|)
index|]
expr_stmt|;
block|}
name|postingInput
operator|.
name|readBytes
argument_list|(
name|payload
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|payload
operator|.
name|length
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|pos
return|;
block|}
annotation|@
name|Override
DECL|method|startOffset
specifier|public
name|int
name|startOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|startOffset
return|;
block|}
comment|/** Returns the wrapped {@link PostingsEnum}. */
DECL|method|getWrapped
name|PostingsEnum
name|getWrapped
parameter_list|()
block|{
return|return
name|in
return|;
block|}
block|}
comment|/** Return a sorted view of<code>reader</code> according to the order    *  defined by<code>sort</code>. If the reader is already sorted, this    *  method might return the reader as-is. */
DECL|method|wrap
specifier|public
specifier|static
name|LeafReader
name|wrap
parameter_list|(
name|LeafReader
name|reader
parameter_list|,
name|Sort
name|sort
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|wrap
argument_list|(
name|reader
argument_list|,
operator|new
name|Sorter
argument_list|(
name|sort
argument_list|)
operator|.
name|sort
argument_list|(
name|reader
argument_list|)
argument_list|)
return|;
block|}
comment|/** Expert: same as {@link #wrap(org.apache.lucene.index.LeafReader, Sort)} but operates directly on a {@link Sorter.DocMap}. */
DECL|method|wrap
specifier|static
name|LeafReader
name|wrap
parameter_list|(
name|LeafReader
name|reader
parameter_list|,
name|Sorter
operator|.
name|DocMap
name|docMap
parameter_list|)
block|{
if|if
condition|(
name|docMap
operator|==
literal|null
condition|)
block|{
comment|// the reader is already sorted
return|return
name|reader
return|;
block|}
if|if
condition|(
name|reader
operator|.
name|maxDoc
argument_list|()
operator|!=
name|docMap
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"reader.maxDoc() should be equal to docMap.size(), got"
operator|+
name|reader
operator|.
name|maxDoc
argument_list|()
operator|+
literal|" != "
operator|+
name|docMap
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
assert|assert
name|Sorter
operator|.
name|isConsistent
argument_list|(
name|docMap
argument_list|)
assert|;
return|return
operator|new
name|SortingLeafReader
argument_list|(
name|reader
argument_list|,
name|docMap
argument_list|)
return|;
block|}
DECL|field|docMap
specifier|final
name|Sorter
operator|.
name|DocMap
name|docMap
decl_stmt|;
comment|// pkg-protected to avoid synthetic accessor methods
DECL|method|SortingLeafReader
specifier|private
name|SortingLeafReader
parameter_list|(
specifier|final
name|LeafReader
name|in
parameter_list|,
specifier|final
name|Sorter
operator|.
name|DocMap
name|docMap
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|docMap
operator|=
name|docMap
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|document
specifier|public
name|void
name|document
parameter_list|(
specifier|final
name|int
name|docID
parameter_list|,
specifier|final
name|StoredFieldVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|document
argument_list|(
name|docMap
operator|.
name|newToOld
argument_list|(
name|docID
argument_list|)
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fields
specifier|public
name|Fields
name|fields
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|SortingFields
argument_list|(
name|in
operator|.
name|fields
argument_list|()
argument_list|,
name|in
operator|.
name|getFieldInfos
argument_list|()
argument_list|,
name|docMap
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getBinaryDocValues
specifier|public
name|BinaryDocValues
name|getBinaryDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|BinaryDocValues
name|oldDocValues
init|=
name|in
operator|.
name|getBinaryDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDocValues
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|SortingBinaryDocValues
argument_list|(
name|oldDocValues
argument_list|,
name|docMap
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLiveDocs
specifier|public
name|Bits
name|getLiveDocs
parameter_list|()
block|{
specifier|final
name|Bits
name|inLiveDocs
init|=
name|in
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|inLiveDocs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|SortingBits
argument_list|(
name|inLiveDocs
argument_list|,
name|docMap
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNormValues
specifier|public
name|NumericDocValues
name|getNormValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|NumericDocValues
name|norm
init|=
name|in
operator|.
name|getNormValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|norm
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|SortingNumericDocValues
argument_list|(
name|norm
argument_list|,
name|docMap
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNumericDocValues
specifier|public
name|NumericDocValues
name|getNumericDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|NumericDocValues
name|oldDocValues
init|=
name|in
operator|.
name|getNumericDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDocValues
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|SortingNumericDocValues
argument_list|(
name|oldDocValues
argument_list|,
name|docMap
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSortedNumericDocValues
specifier|public
name|SortedNumericDocValues
name|getSortedNumericDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SortedNumericDocValues
name|oldDocValues
init|=
name|in
operator|.
name|getSortedNumericDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDocValues
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|SortingSortedNumericDocValues
argument_list|(
name|oldDocValues
argument_list|,
name|docMap
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSortedDocValues
specifier|public
name|SortedDocValues
name|getSortedDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedDocValues
name|sortedDV
init|=
name|in
operator|.
name|getSortedDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|sortedDV
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|SortingSortedDocValues
argument_list|(
name|sortedDV
argument_list|,
name|docMap
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSortedSetDocValues
specifier|public
name|SortedSetDocValues
name|getSortedSetDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedSetDocValues
name|sortedSetDV
init|=
name|in
operator|.
name|getSortedSetDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|sortedSetDV
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|SortingSortedSetDocValues
argument_list|(
name|sortedSetDV
argument_list|,
name|docMap
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDocsWithField
specifier|public
name|Bits
name|getDocsWithField
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|Bits
name|bits
init|=
name|in
operator|.
name|getDocsWithField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|bits
operator|==
literal|null
operator|||
name|bits
operator|instanceof
name|Bits
operator|.
name|MatchAllBits
operator|||
name|bits
operator|instanceof
name|Bits
operator|.
name|MatchNoBits
condition|)
block|{
return|return
name|bits
return|;
block|}
else|else
block|{
return|return
operator|new
name|SortingBits
argument_list|(
name|bits
argument_list|,
name|docMap
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getTermVectors
specifier|public
name|Fields
name|getTermVectors
parameter_list|(
specifier|final
name|int
name|docID
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|getTermVectors
argument_list|(
name|docMap
operator|.
name|newToOld
argument_list|(
name|docID
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SortingLeafReader("
operator|+
name|in
operator|+
literal|")"
return|;
block|}
block|}
end_class
end_unit
