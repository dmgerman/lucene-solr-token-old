begin_unit
begin_package
DECL|package|org.apache.lucene.index.sorter
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|sorter
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_comment
comment|/**  * Helper class to sort readers that contain blocks of documents.  */
end_comment
begin_class
DECL|class|BlockJoinSorter
specifier|public
specifier|abstract
class|class
name|BlockJoinSorter
extends|extends
name|Sorter
block|{
DECL|field|parentsFilter
specifier|protected
specifier|final
name|Filter
name|parentsFilter
decl_stmt|;
comment|/** Sole constructor. */
DECL|method|BlockJoinSorter
specifier|public
name|BlockJoinSorter
parameter_list|(
name|Filter
name|parentsFilter
parameter_list|)
block|{
name|this
operator|.
name|parentsFilter
operator|=
name|parentsFilter
expr_stmt|;
block|}
comment|/** Return a {@link Sorter.DocComparator} instance that will be called on    *  parent doc IDs. */
DECL|method|getParentComparator
specifier|protected
specifier|abstract
name|DocComparator
name|getParentComparator
parameter_list|(
name|AtomicReader
name|reader
parameter_list|)
function_decl|;
comment|/** Return a {@link Sorter.DocComparator} instance that will be called on    *  children of the same parent. By default, children of the same parent are    *  not reordered. */
DECL|method|getChildComparator
specifier|protected
name|DocComparator
name|getChildComparator
parameter_list|(
name|AtomicReader
name|reader
parameter_list|)
block|{
return|return
name|INDEX_ORDER_COMPARATOR
return|;
block|}
annotation|@
name|Override
DECL|method|sort
specifier|public
specifier|final
name|DocMap
name|sort
parameter_list|(
name|AtomicReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DocIdSet
name|parents
init|=
name|parentsFilter
operator|.
name|getDocIdSet
argument_list|(
name|reader
operator|.
name|getContext
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|parents
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"AtomicReader "
operator|+
name|reader
operator|+
literal|" contains no parents!"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|parents
operator|instanceof
name|FixedBitSet
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"parentFilter must return FixedBitSet; got "
operator|+
name|parents
argument_list|)
throw|;
block|}
specifier|final
name|FixedBitSet
name|parentBits
init|=
operator|(
name|FixedBitSet
operator|)
name|parents
decl_stmt|;
specifier|final
name|DocComparator
name|parentComparator
init|=
name|getParentComparator
argument_list|(
name|reader
argument_list|)
decl_stmt|;
specifier|final
name|DocComparator
name|childComparator
init|=
name|getChildComparator
argument_list|(
name|reader
argument_list|)
decl_stmt|;
specifier|final
name|DocComparator
name|comparator
init|=
operator|new
name|DocComparator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|docID1
parameter_list|,
name|int
name|docID2
parameter_list|)
block|{
specifier|final
name|int
name|parent1
init|=
name|parentBits
operator|.
name|nextSetBit
argument_list|(
name|docID1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|parent2
init|=
name|parentBits
operator|.
name|nextSetBit
argument_list|(
name|docID2
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent1
operator|==
name|parent2
condition|)
block|{
comment|// both are in the same block
if|if
condition|(
name|docID1
operator|==
name|parent1
operator|||
name|docID2
operator|==
name|parent2
condition|)
block|{
comment|// keep parents at the end of blocks
return|return
name|docID1
operator|-
name|docID2
return|;
block|}
else|else
block|{
return|return
name|childComparator
operator|.
name|compare
argument_list|(
name|docID1
argument_list|,
name|docID2
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|int
name|cmp
init|=
name|parentComparator
operator|.
name|compare
argument_list|(
name|parent1
argument_list|,
name|parent2
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
name|cmp
operator|=
name|parent1
operator|-
name|parent2
expr_stmt|;
block|}
return|return
name|cmp
return|;
block|}
block|}
block|}
decl_stmt|;
return|return
name|sort
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|comparator
argument_list|)
return|;
block|}
block|}
end_class
end_unit
