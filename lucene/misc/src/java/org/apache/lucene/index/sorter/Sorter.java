begin_unit
begin_package
DECL|package|org.apache.lucene.index.sorter
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|sorter
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SorterTemplate
import|;
end_import
begin_comment
comment|/**  * Sorts documents in a given index by returning a permutation on the docs.  * Implementations can call {@link #compute(int[], List)} to compute the  * old-to-new permutation over the given documents and values.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|Sorter
specifier|public
specifier|abstract
class|class
name|Sorter
block|{
comment|/** Sorts documents in reverse order. */
DECL|field|REVERSE_DOCS
specifier|public
specifier|static
specifier|final
name|Sorter
name|REVERSE_DOCS
init|=
operator|new
name|Sorter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
index|[]
name|oldToNew
parameter_list|(
specifier|final
name|AtomicReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|maxDoc
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
name|int
index|[]
name|reverseDocs
init|=
operator|new
name|int
index|[
name|maxDoc
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
name|i
operator|++
control|)
block|{
name|reverseDocs
index|[
name|i
index|]
operator|=
name|maxDoc
operator|-
operator|(
name|i
operator|+
literal|1
operator|)
expr_stmt|;
block|}
return|return
name|reverseDocs
return|;
block|}
block|}
decl_stmt|;
DECL|class|DocValueSorterTemplate
specifier|private
specifier|static
specifier|final
class|class
name|DocValueSorterTemplate
parameter_list|<
name|T
extends|extends
name|Comparable
parameter_list|<
name|?
super|super
name|T
parameter_list|>
parameter_list|>
extends|extends
name|SorterTemplate
block|{
DECL|field|docs
specifier|private
specifier|final
name|int
index|[]
name|docs
decl_stmt|;
DECL|field|values
specifier|private
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|values
decl_stmt|;
DECL|field|pivot
specifier|private
name|T
name|pivot
decl_stmt|;
DECL|method|DocValueSorterTemplate
specifier|public
name|DocValueSorterTemplate
parameter_list|(
name|int
index|[]
name|docs
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|values
parameter_list|)
block|{
name|this
operator|.
name|docs
operator|=
name|docs
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
return|return
name|values
operator|.
name|get
argument_list|(
name|docs
index|[
name|i
index|]
argument_list|)
operator|.
name|compareTo
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|docs
index|[
name|j
index|]
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|comparePivot
specifier|protected
name|int
name|comparePivot
parameter_list|(
name|int
name|j
parameter_list|)
block|{
return|return
name|pivot
operator|.
name|compareTo
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|docs
index|[
name|j
index|]
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setPivot
specifier|protected
name|void
name|setPivot
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|pivot
operator|=
name|values
operator|.
name|get
argument_list|(
name|docs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|swap
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|int
name|tmpDoc
init|=
name|docs
index|[
name|i
index|]
decl_stmt|;
name|docs
index|[
name|i
index|]
operator|=
name|docs
index|[
name|j
index|]
expr_stmt|;
name|docs
index|[
name|j
index|]
operator|=
name|tmpDoc
expr_stmt|;
block|}
block|}
comment|/** Computes the old-to-new permutation over the given documents and values. */
DECL|method|compute
specifier|protected
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|T
argument_list|>
parameter_list|>
name|int
index|[]
name|compute
parameter_list|(
name|int
index|[]
name|docs
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|values
parameter_list|)
block|{
name|SorterTemplate
name|sorter
init|=
operator|new
name|DocValueSorterTemplate
argument_list|<
name|T
argument_list|>
argument_list|(
name|docs
argument_list|,
name|values
argument_list|)
decl_stmt|;
name|sorter
operator|.
name|quickSort
argument_list|(
literal|0
argument_list|,
name|docs
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|int
index|[]
name|oldToNew
init|=
operator|new
name|int
index|[
name|docs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|oldToNew
index|[
name|docs
index|[
name|i
index|]
index|]
operator|=
name|i
expr_stmt|;
block|}
return|return
name|oldToNew
return|;
block|}
comment|/**    * Returns a mapping from the old document ID to its new location in the    * sorted index. Implementations can use the auxiliary    * {@link #compute(int[], List)} to compute the old-to-new permutation    * given an array of documents and their corresponding values.    *<p>    *<b>NOTE:</b> deleted documents are expected to appear in the mapping as    * well, they will however be dropped when the index is actually sorted.    */
DECL|method|oldToNew
specifier|public
specifier|abstract
name|int
index|[]
name|oldToNew
parameter_list|(
name|AtomicReader
name|reader
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class
end_unit
