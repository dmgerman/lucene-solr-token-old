begin_unit
begin_package
DECL|package|org.apache.lucene.index.sorter
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|sorter
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsAndPositionsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|IndexOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FilterAtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|StoredFieldVisitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMFile
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMInputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMOutputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SorterTemplate
import|;
end_import
begin_comment
comment|/**  * An {@link AtomicReader} which supports sorting documents by a given  * {@link Sorter}. You can use this class to sort an index as follows:  *   *<pre class="prettyprint">  * IndexWriter writer; // writer to which the sorted index will be added  * DirectoryReader reader; // reader on the input index  * Sorter sorter; // determines how the documents are sorted  * AtomicReader sortingReader = new SortingAtomicReader(reader, sorter);  * writer.addIndexes(reader);  * writer.close();  * reader.close();  *</pre>  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|SortingAtomicReader
specifier|public
class|class
name|SortingAtomicReader
extends|extends
name|FilterAtomicReader
block|{
DECL|class|SortingFields
specifier|private
specifier|static
class|class
name|SortingFields
extends|extends
name|FilterFields
block|{
DECL|field|old2new
specifier|private
specifier|final
name|int
index|[]
name|old2new
decl_stmt|;
DECL|field|inLiveDocs
specifier|private
specifier|final
name|Bits
name|inLiveDocs
decl_stmt|;
DECL|field|infos
specifier|private
specifier|final
name|FieldInfos
name|infos
decl_stmt|;
DECL|method|SortingFields
specifier|public
name|SortingFields
parameter_list|(
specifier|final
name|Fields
name|in
parameter_list|,
specifier|final
name|Bits
name|inLiveDocs
parameter_list|,
name|FieldInfos
name|infos
parameter_list|,
specifier|final
name|int
index|[]
name|old2new
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|old2new
operator|=
name|old2new
expr_stmt|;
name|this
operator|.
name|inLiveDocs
operator|=
name|inLiveDocs
expr_stmt|;
name|this
operator|.
name|infos
operator|=
name|infos
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|terms
specifier|public
name|Terms
name|terms
parameter_list|(
specifier|final
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|Terms
name|terms
init|=
name|in
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|SortingTerms
argument_list|(
name|terms
argument_list|,
name|inLiveDocs
argument_list|,
name|infos
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
operator|.
name|getIndexOptions
argument_list|()
argument_list|,
name|old2new
argument_list|)
return|;
block|}
block|}
block|}
DECL|class|SortingTerms
specifier|private
specifier|static
class|class
name|SortingTerms
extends|extends
name|FilterTerms
block|{
DECL|field|old2new
specifier|private
specifier|final
name|int
index|[]
name|old2new
decl_stmt|;
DECL|field|inLiveDocs
specifier|private
specifier|final
name|Bits
name|inLiveDocs
decl_stmt|;
DECL|field|indexOptions
specifier|private
specifier|final
name|IndexOptions
name|indexOptions
decl_stmt|;
DECL|method|SortingTerms
specifier|public
name|SortingTerms
parameter_list|(
specifier|final
name|Terms
name|in
parameter_list|,
specifier|final
name|Bits
name|inLiveDocs
parameter_list|,
name|IndexOptions
name|indexOptions
parameter_list|,
specifier|final
name|int
index|[]
name|old2new
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|old2new
operator|=
name|old2new
expr_stmt|;
name|this
operator|.
name|inLiveDocs
operator|=
name|inLiveDocs
expr_stmt|;
name|this
operator|.
name|indexOptions
operator|=
name|indexOptions
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|TermsEnum
name|iterator
parameter_list|(
specifier|final
name|TermsEnum
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SortingTermsEnum
argument_list|(
name|in
operator|.
name|iterator
argument_list|(
name|reuse
argument_list|)
argument_list|,
name|inLiveDocs
argument_list|,
name|old2new
argument_list|,
name|indexOptions
argument_list|)
return|;
block|}
block|}
DECL|class|SortingTermsEnum
specifier|private
specifier|static
class|class
name|SortingTermsEnum
extends|extends
name|FilterTermsEnum
block|{
DECL|field|old2new
specifier|private
specifier|final
name|int
index|[]
name|old2new
decl_stmt|;
DECL|field|inLiveDocs
specifier|private
specifier|final
name|Bits
name|inLiveDocs
decl_stmt|;
DECL|field|indexOptions
specifier|private
specifier|final
name|IndexOptions
name|indexOptions
decl_stmt|;
DECL|method|SortingTermsEnum
specifier|public
name|SortingTermsEnum
parameter_list|(
specifier|final
name|TermsEnum
name|in
parameter_list|,
specifier|final
name|Bits
name|inLiveDocs
parameter_list|,
specifier|final
name|int
index|[]
name|old2new
parameter_list|,
name|IndexOptions
name|indexOptions
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|old2new
operator|=
name|old2new
expr_stmt|;
name|this
operator|.
name|inLiveDocs
operator|=
name|inLiveDocs
expr_stmt|;
name|this
operator|.
name|indexOptions
operator|=
name|indexOptions
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docs
specifier|public
name|DocsEnum
name|docs
parameter_list|(
name|Bits
name|liveDocs
parameter_list|,
name|DocsEnum
name|reuse
parameter_list|,
specifier|final
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|liveDocs
operator|!=
literal|null
condition|)
block|{
name|liveDocs
operator|=
name|inLiveDocs
expr_stmt|;
block|}
comment|// if we're asked to reuse the given DocsEnum and it is Sorting, return
comment|// the wrapped one, since some Codecs expect it.
if|if
condition|(
name|reuse
operator|!=
literal|null
operator|&&
name|reuse
operator|instanceof
name|SortingDocsEnum
condition|)
block|{
name|reuse
operator|=
operator|(
operator|(
name|SortingDocsEnum
operator|)
name|reuse
operator|)
operator|.
name|getWrapped
argument_list|()
expr_stmt|;
block|}
name|boolean
name|withFreqs
init|=
name|indexOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|)
operator|>=
literal|0
operator|&&
operator|(
name|flags
operator|&
name|DocsEnum
operator|.
name|FLAG_FREQS
operator|)
operator|!=
literal|0
decl_stmt|;
return|return
operator|new
name|SortingDocsEnum
argument_list|(
name|in
operator|.
name|docs
argument_list|(
name|liveDocs
argument_list|,
name|reuse
argument_list|,
name|flags
argument_list|)
argument_list|,
name|withFreqs
argument_list|,
name|old2new
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docsAndPositions
specifier|public
name|DocsAndPositionsEnum
name|docsAndPositions
parameter_list|(
name|Bits
name|liveDocs
parameter_list|,
name|DocsAndPositionsEnum
name|reuse
parameter_list|,
specifier|final
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|liveDocs
operator|!=
literal|null
condition|)
block|{
name|liveDocs
operator|=
name|inLiveDocs
expr_stmt|;
block|}
comment|// if we're asked to reuse the given DocsAndPositionsEnum and it is
comment|// Sorting, return the wrapped one, since some Codecs expect it.
if|if
condition|(
name|reuse
operator|!=
literal|null
operator|&&
name|reuse
operator|instanceof
name|SortingDocsAndPositionsEnum
condition|)
block|{
name|reuse
operator|=
operator|(
operator|(
name|SortingDocsAndPositionsEnum
operator|)
name|reuse
operator|)
operator|.
name|getWrapped
argument_list|()
expr_stmt|;
block|}
specifier|final
name|DocsAndPositionsEnum
name|positions
init|=
name|in
operator|.
name|docsAndPositions
argument_list|(
name|liveDocs
argument_list|,
name|reuse
argument_list|,
name|flags
argument_list|)
decl_stmt|;
if|if
condition|(
name|positions
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
comment|// we ignore the fact that offsets may be stored but not asked for,
comment|// since this code is expected to be used during addIndexes which will
comment|// ask for everything. if that assumption changes in the future, we can
comment|// factor in whether 'flags' says offsets are not required.
name|boolean
name|storeOffsets
init|=
name|indexOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
operator|>=
literal|0
decl_stmt|;
return|return
operator|new
name|SortingDocsAndPositionsEnum
argument_list|(
name|positions
argument_list|,
name|old2new
argument_list|,
name|storeOffsets
argument_list|)
return|;
block|}
block|}
block|}
DECL|class|SortingBinaryDocValues
specifier|private
specifier|static
class|class
name|SortingBinaryDocValues
extends|extends
name|BinaryDocValues
block|{
DECL|field|in
specifier|private
specifier|final
name|BinaryDocValues
name|in
decl_stmt|;
DECL|field|new2old
specifier|private
specifier|final
name|int
index|[]
name|new2old
decl_stmt|;
DECL|method|SortingBinaryDocValues
name|SortingBinaryDocValues
parameter_list|(
name|BinaryDocValues
name|in
parameter_list|,
name|int
index|[]
name|new2old
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|new2old
operator|=
name|new2old
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|void
name|get
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|result
parameter_list|)
block|{
name|in
operator|.
name|get
argument_list|(
name|new2old
index|[
name|docID
index|]
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SortingNumericDocValues
specifier|private
specifier|static
class|class
name|SortingNumericDocValues
extends|extends
name|NumericDocValues
block|{
DECL|field|in
specifier|private
specifier|final
name|NumericDocValues
name|in
decl_stmt|;
DECL|field|new2old
specifier|private
specifier|final
name|int
index|[]
name|new2old
decl_stmt|;
DECL|method|SortingNumericDocValues
specifier|public
name|SortingNumericDocValues
parameter_list|(
specifier|final
name|NumericDocValues
name|in
parameter_list|,
specifier|final
name|int
index|[]
name|new2old
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|new2old
operator|=
name|new2old
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|in
operator|.
name|get
argument_list|(
name|new2old
index|[
name|docID
index|]
argument_list|)
return|;
block|}
block|}
DECL|class|SortingSortedDocValues
specifier|private
specifier|static
class|class
name|SortingSortedDocValues
extends|extends
name|SortedDocValues
block|{
DECL|field|in
specifier|private
specifier|final
name|SortedDocValues
name|in
decl_stmt|;
DECL|field|new2old
specifier|private
specifier|final
name|int
index|[]
name|new2old
decl_stmt|;
DECL|method|SortingSortedDocValues
name|SortingSortedDocValues
parameter_list|(
name|SortedDocValues
name|in
parameter_list|,
name|int
index|[]
name|new2old
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|new2old
operator|=
name|new2old
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOrd
specifier|public
name|int
name|getOrd
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|in
operator|.
name|getOrd
argument_list|(
name|new2old
index|[
name|docID
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|lookupOrd
specifier|public
name|void
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|,
name|BytesRef
name|result
parameter_list|)
block|{
name|in
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
name|in
operator|.
name|getValueCount
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|void
name|get
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|result
parameter_list|)
block|{
name|in
operator|.
name|get
argument_list|(
name|new2old
index|[
name|docID
index|]
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lookupTerm
specifier|public
name|int
name|lookupTerm
parameter_list|(
name|BytesRef
name|key
parameter_list|)
block|{
return|return
name|in
operator|.
name|lookupTerm
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
DECL|class|SortingSortedSetDocValues
specifier|private
specifier|static
class|class
name|SortingSortedSetDocValues
extends|extends
name|SortedSetDocValues
block|{
DECL|field|in
specifier|private
specifier|final
name|SortedSetDocValues
name|in
decl_stmt|;
DECL|field|new2old
specifier|private
specifier|final
name|int
index|[]
name|new2old
decl_stmt|;
DECL|method|SortingSortedSetDocValues
name|SortingSortedSetDocValues
parameter_list|(
name|SortedSetDocValues
name|in
parameter_list|,
name|int
index|[]
name|new2old
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|new2old
operator|=
name|new2old
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nextOrd
specifier|public
name|long
name|nextOrd
parameter_list|()
block|{
return|return
name|in
operator|.
name|nextOrd
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setDocument
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|in
operator|.
name|setDocument
argument_list|(
name|new2old
index|[
name|docID
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lookupOrd
specifier|public
name|void
name|lookupOrd
parameter_list|(
name|long
name|ord
parameter_list|,
name|BytesRef
name|result
parameter_list|)
block|{
name|in
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
name|long
name|getValueCount
parameter_list|()
block|{
return|return
name|in
operator|.
name|getValueCount
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|lookupTerm
specifier|public
name|long
name|lookupTerm
parameter_list|(
name|BytesRef
name|key
parameter_list|)
block|{
return|return
name|in
operator|.
name|lookupTerm
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
DECL|class|SortingDocsEnum
specifier|private
specifier|static
class|class
name|SortingDocsEnum
extends|extends
name|FilterDocsEnum
block|{
DECL|class|DocFreqSorterTemplate
specifier|private
specifier|static
specifier|final
class|class
name|DocFreqSorterTemplate
extends|extends
name|SorterTemplate
block|{
DECL|field|docs
specifier|private
specifier|final
name|int
index|[]
name|docs
decl_stmt|;
DECL|field|freqs
specifier|private
specifier|final
name|int
index|[]
name|freqs
decl_stmt|;
DECL|field|pivot
specifier|private
name|int
name|pivot
decl_stmt|;
DECL|method|DocFreqSorterTemplate
specifier|public
name|DocFreqSorterTemplate
parameter_list|(
name|int
index|[]
name|docs
parameter_list|,
name|int
index|[]
name|freqs
parameter_list|)
block|{
name|this
operator|.
name|docs
operator|=
name|docs
expr_stmt|;
name|this
operator|.
name|freqs
operator|=
name|freqs
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
return|return
name|docs
index|[
name|i
index|]
operator|-
name|docs
index|[
name|j
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|comparePivot
specifier|protected
name|int
name|comparePivot
parameter_list|(
name|int
name|j
parameter_list|)
block|{
return|return
name|pivot
operator|-
name|docs
index|[
name|j
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|setPivot
specifier|protected
name|void
name|setPivot
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|pivot
operator|=
name|docs
index|[
name|i
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|swap
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|int
name|tmpDoc
init|=
name|docs
index|[
name|i
index|]
decl_stmt|;
name|docs
index|[
name|i
index|]
operator|=
name|docs
index|[
name|j
index|]
expr_stmt|;
name|docs
index|[
name|j
index|]
operator|=
name|tmpDoc
expr_stmt|;
name|int
name|tmpFreq
init|=
name|freqs
index|[
name|i
index|]
decl_stmt|;
name|freqs
index|[
name|i
index|]
operator|=
name|freqs
index|[
name|j
index|]
expr_stmt|;
name|freqs
index|[
name|j
index|]
operator|=
name|tmpFreq
expr_stmt|;
block|}
block|}
DECL|field|docs
specifier|private
name|int
index|[]
name|docs
init|=
operator|new
name|int
index|[
literal|64
index|]
decl_stmt|;
DECL|field|freqs
specifier|private
name|int
index|[]
name|freqs
decl_stmt|;
DECL|field|docIt
specifier|private
name|int
name|docIt
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|upto
specifier|private
specifier|final
name|int
name|upto
decl_stmt|;
DECL|field|withFreqs
specifier|private
specifier|final
name|boolean
name|withFreqs
decl_stmt|;
DECL|method|SortingDocsEnum
specifier|public
name|SortingDocsEnum
parameter_list|(
specifier|final
name|DocsEnum
name|in
parameter_list|,
name|boolean
name|withFreqs
parameter_list|,
specifier|final
name|int
index|[]
name|old2new
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|withFreqs
operator|=
name|withFreqs
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|doc
decl_stmt|;
if|if
condition|(
name|withFreqs
condition|)
block|{
name|freqs
operator|=
operator|new
name|int
index|[
name|docs
operator|.
name|length
index|]
expr_stmt|;
while|while
condition|(
operator|(
name|doc
operator|=
name|in
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
if|if
condition|(
name|i
operator|>=
name|docs
operator|.
name|length
condition|)
block|{
name|docs
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|docs
argument_list|,
name|docs
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
name|freqs
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|freqs
argument_list|,
name|freqs
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|docs
index|[
name|i
index|]
operator|=
name|old2new
index|[
name|doc
index|]
expr_stmt|;
name|freqs
index|[
name|i
index|]
operator|=
name|in
operator|.
name|freq
argument_list|()
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|SorterTemplate
name|sorter
init|=
operator|new
name|DocFreqSorterTemplate
argument_list|(
name|docs
argument_list|,
name|freqs
argument_list|)
decl_stmt|;
name|sorter
operator|.
name|quickSort
argument_list|(
literal|0
argument_list|,
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|freqs
operator|=
literal|null
expr_stmt|;
while|while
condition|(
operator|(
name|doc
operator|=
name|in
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
if|if
condition|(
name|i
operator|>=
name|docs
operator|.
name|length
condition|)
block|{
name|docs
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|docs
argument_list|,
name|docs
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|docs
index|[
name|i
operator|++
index|]
operator|=
name|old2new
index|[
name|doc
index|]
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|docs
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|upto
operator|=
name|i
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
specifier|final
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
comment|// need to support it for checkIndex, but in practice it won't be called, so
comment|// don't bother to implement efficiently for now.
while|while
condition|(
name|nextDoc
argument_list|()
operator|<
name|target
condition|)
block|{}
return|return
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docIt
operator|>=
name|upto
condition|?
name|NO_MORE_DOCS
else|:
name|docs
index|[
name|docIt
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|withFreqs
operator|&&
name|docIt
operator|<
name|upto
condition|?
name|freqs
index|[
name|docIt
index|]
else|:
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|++
name|docIt
operator|>=
name|upto
condition|)
return|return
name|NO_MORE_DOCS
return|;
return|return
name|docs
index|[
name|docIt
index|]
return|;
block|}
comment|/** Returns the wrapped {@link DocsEnum}. */
DECL|method|getWrapped
name|DocsEnum
name|getWrapped
parameter_list|()
block|{
return|return
name|in
return|;
block|}
block|}
DECL|class|SortingDocsAndPositionsEnum
specifier|private
specifier|static
class|class
name|SortingDocsAndPositionsEnum
extends|extends
name|FilterDocsAndPositionsEnum
block|{
comment|/**      * A {@link SorterTemplate} which sorts two parallel arrays of doc IDs and      * offsets in one go. Everytime a doc ID is 'swapped', its correponding offset      * is swapped too.      */
DECL|class|DocOffsetSorterTemplate
specifier|private
specifier|static
specifier|final
class|class
name|DocOffsetSorterTemplate
extends|extends
name|SorterTemplate
block|{
DECL|field|docs
specifier|private
specifier|final
name|int
index|[]
name|docs
decl_stmt|;
DECL|field|offsets
specifier|private
specifier|final
name|long
index|[]
name|offsets
decl_stmt|;
DECL|field|pivot
specifier|private
name|int
name|pivot
decl_stmt|;
DECL|method|DocOffsetSorterTemplate
specifier|public
name|DocOffsetSorterTemplate
parameter_list|(
name|int
index|[]
name|docs
parameter_list|,
name|long
index|[]
name|offsets
parameter_list|)
block|{
name|this
operator|.
name|docs
operator|=
name|docs
expr_stmt|;
name|this
operator|.
name|offsets
operator|=
name|offsets
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
return|return
name|docs
index|[
name|i
index|]
operator|-
name|docs
index|[
name|j
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|comparePivot
specifier|protected
name|int
name|comparePivot
parameter_list|(
name|int
name|j
parameter_list|)
block|{
return|return
name|pivot
operator|-
name|docs
index|[
name|j
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|setPivot
specifier|protected
name|void
name|setPivot
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|pivot
operator|=
name|docs
index|[
name|i
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|swap
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|int
name|tmpDoc
init|=
name|docs
index|[
name|i
index|]
decl_stmt|;
name|docs
index|[
name|i
index|]
operator|=
name|docs
index|[
name|j
index|]
expr_stmt|;
name|docs
index|[
name|j
index|]
operator|=
name|tmpDoc
expr_stmt|;
name|long
name|tmpOffset
init|=
name|offsets
index|[
name|i
index|]
decl_stmt|;
name|offsets
index|[
name|i
index|]
operator|=
name|offsets
index|[
name|j
index|]
expr_stmt|;
name|offsets
index|[
name|j
index|]
operator|=
name|tmpOffset
expr_stmt|;
block|}
block|}
DECL|field|docs
specifier|private
name|int
index|[]
name|docs
decl_stmt|;
DECL|field|offsets
specifier|private
name|long
index|[]
name|offsets
decl_stmt|;
DECL|field|upto
specifier|private
specifier|final
name|int
name|upto
decl_stmt|;
DECL|field|postingInput
specifier|private
specifier|final
name|IndexInput
name|postingInput
decl_stmt|;
DECL|field|storeOffsets
specifier|private
specifier|final
name|boolean
name|storeOffsets
decl_stmt|;
DECL|field|docIt
specifier|private
name|int
name|docIt
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|pos
specifier|private
name|int
name|pos
decl_stmt|;
DECL|field|startOffset
specifier|private
name|int
name|startOffset
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|endOffset
specifier|private
name|int
name|endOffset
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|payload
specifier|private
specifier|final
name|BytesRef
name|payload
init|=
operator|new
name|BytesRef
argument_list|(
literal|32
argument_list|)
decl_stmt|;
DECL|field|currFreq
specifier|private
name|int
name|currFreq
decl_stmt|;
DECL|method|SortingDocsAndPositionsEnum
specifier|public
name|SortingDocsAndPositionsEnum
parameter_list|(
specifier|final
name|DocsAndPositionsEnum
name|in
parameter_list|,
specifier|final
name|int
index|[]
name|old2new
parameter_list|,
name|boolean
name|storeOffsets
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|storeOffsets
operator|=
name|storeOffsets
expr_stmt|;
specifier|final
name|RAMFile
name|file
init|=
operator|new
name|RAMFile
argument_list|()
decl_stmt|;
specifier|final
name|IndexOutput
name|out
init|=
operator|new
name|RAMOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|docs
operator|=
operator|new
name|int
index|[
literal|32
index|]
expr_stmt|;
name|offsets
operator|=
operator|new
name|long
index|[
literal|32
index|]
expr_stmt|;
name|int
name|doc
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|doc
operator|=
name|in
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|docs
operator|.
name|length
condition|)
block|{
name|docs
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|docs
argument_list|,
name|docs
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// don't grow() offsets since growing pattern for long and int is not the same.
comment|// since we want docs and offsets at the same length, just grow it manually.
name|long
index|[]
name|tmp
init|=
operator|new
name|long
index|[
name|docs
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|offsets
argument_list|,
literal|0
argument_list|,
name|tmp
argument_list|,
literal|0
argument_list|,
name|offsets
operator|.
name|length
argument_list|)
expr_stmt|;
name|offsets
operator|=
name|tmp
expr_stmt|;
block|}
name|docs
index|[
name|i
index|]
operator|=
name|old2new
index|[
name|doc
index|]
expr_stmt|;
name|offsets
index|[
name|i
index|]
operator|=
name|out
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
name|addPositions
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|upto
operator|=
name|i
expr_stmt|;
name|SorterTemplate
name|sorter
init|=
operator|new
name|DocOffsetSorterTemplate
argument_list|(
name|docs
argument_list|,
name|offsets
argument_list|)
decl_stmt|;
name|sorter
operator|.
name|quickSort
argument_list|(
literal|0
argument_list|,
name|upto
operator|-
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|postingInput
operator|=
operator|new
name|RAMInputStream
argument_list|(
literal|""
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|addPositions
specifier|private
name|void
name|addPositions
parameter_list|(
specifier|final
name|DocsAndPositionsEnum
name|in
parameter_list|,
specifier|final
name|IndexOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|freq
init|=
name|in
operator|.
name|freq
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|freq
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|freq
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|pos
init|=
name|in
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|storeOffsets
condition|)
block|{
comment|// don't encode offsets if they are not stored
name|out
operator|.
name|writeVInt
argument_list|(
name|in
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|in
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|BytesRef
name|payload
init|=
name|in
operator|.
name|getPayload
argument_list|()
decl_stmt|;
if|if
condition|(
name|payload
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|payload
operator|.
name|bytes
argument_list|,
name|payload
operator|.
name|offset
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
specifier|final
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
comment|// need to support it for checkIndex, but in practice it won't be called, so
comment|// don't bother to implement efficiently for now.
while|while
condition|(
name|nextDoc
argument_list|()
operator|<
name|target
condition|)
block|{}
return|return
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docIt
operator|>=
name|upto
condition|?
name|NO_MORE_DOCS
else|:
name|docs
index|[
name|docIt
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|endOffset
specifier|public
name|int
name|endOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|endOffset
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|currFreq
return|;
block|}
annotation|@
name|Override
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|payload
operator|.
name|length
operator|==
literal|0
condition|?
literal|null
else|:
name|payload
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|++
name|docIt
operator|>=
name|upto
condition|)
return|return
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
return|;
name|postingInput
operator|.
name|seek
argument_list|(
name|offsets
index|[
name|docIt
index|]
argument_list|)
expr_stmt|;
name|currFreq
operator|=
name|postingInput
operator|.
name|readVInt
argument_list|()
expr_stmt|;
return|return
name|docs
index|[
name|docIt
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
name|pos
operator|=
name|postingInput
operator|.
name|readVInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|storeOffsets
condition|)
block|{
name|startOffset
operator|=
name|postingInput
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|endOffset
operator|=
name|postingInput
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
name|int
name|length
init|=
name|postingInput
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|length
operator|>=
name|payload
operator|.
name|bytes
operator|.
name|length
condition|)
block|{
name|payload
operator|.
name|grow
argument_list|(
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|postingInput
operator|.
name|readBytes
argument_list|(
name|payload
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|payload
operator|.
name|length
operator|=
name|length
expr_stmt|;
return|return
name|pos
return|;
block|}
annotation|@
name|Override
DECL|method|startOffset
specifier|public
name|int
name|startOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|startOffset
return|;
block|}
comment|/** Returns the wrapped {@link DocsAndPositionsEnum}. */
DECL|method|getWrapped
name|DocsAndPositionsEnum
name|getWrapped
parameter_list|()
block|{
return|return
name|in
return|;
block|}
block|}
DECL|field|old2new
DECL|field|new2old
specifier|private
specifier|final
name|int
index|[]
name|old2new
decl_stmt|,
name|new2old
decl_stmt|;
DECL|field|mappedLiveDocs
specifier|private
specifier|final
name|FixedBitSet
name|mappedLiveDocs
decl_stmt|;
DECL|method|SortingAtomicReader
specifier|public
name|SortingAtomicReader
parameter_list|(
specifier|final
name|AtomicReader
name|in
parameter_list|,
specifier|final
name|Sorter
name|sorter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|old2new
operator|=
name|sorter
operator|.
name|oldToNew
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|old2new
operator|.
name|length
operator|!=
name|in
operator|.
name|maxDoc
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"sorter should provide mapping for every document in the index, including deleted ones"
argument_list|)
throw|;
block|}
name|new2old
operator|=
operator|new
name|int
index|[
name|old2new
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|new2old
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|new2old
index|[
name|old2new
index|[
name|i
index|]
index|]
operator|=
name|i
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|in
operator|.
name|hasDeletions
argument_list|()
condition|)
block|{
name|mappedLiveDocs
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|mappedLiveDocs
operator|=
operator|new
name|FixedBitSet
argument_list|(
name|in
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|mappedLiveDocs
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|in
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|Bits
name|liveDocs
init|=
name|in
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|liveDocs
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|liveDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|mappedLiveDocs
operator|.
name|clear
argument_list|(
name|old2new
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|document
specifier|public
name|void
name|document
parameter_list|(
specifier|final
name|int
name|docID
parameter_list|,
specifier|final
name|StoredFieldVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|document
argument_list|(
name|new2old
index|[
name|docID
index|]
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fields
specifier|public
name|Fields
name|fields
parameter_list|()
throws|throws
name|IOException
block|{
name|Fields
name|fields
init|=
name|in
operator|.
name|fields
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|SortingFields
argument_list|(
name|fields
argument_list|,
name|in
operator|.
name|getLiveDocs
argument_list|()
argument_list|,
name|in
operator|.
name|getFieldInfos
argument_list|()
argument_list|,
name|old2new
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getBinaryDocValues
specifier|public
name|BinaryDocValues
name|getBinaryDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|BinaryDocValues
name|oldDocValues
init|=
name|in
operator|.
name|getBinaryDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDocValues
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|SortingBinaryDocValues
argument_list|(
name|oldDocValues
argument_list|,
name|new2old
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLiveDocs
specifier|public
name|Bits
name|getLiveDocs
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|mappedLiveDocs
return|;
block|}
annotation|@
name|Override
DECL|method|getNormValues
specifier|public
name|NumericDocValues
name|getNormValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|NumericDocValues
name|norm
init|=
name|in
operator|.
name|getNormValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|norm
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|SortingNumericDocValues
argument_list|(
name|norm
argument_list|,
name|new2old
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNumericDocValues
specifier|public
name|NumericDocValues
name|getNumericDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|NumericDocValues
name|oldDocValues
init|=
name|in
operator|.
name|getNumericDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDocValues
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|SortingNumericDocValues
argument_list|(
name|oldDocValues
argument_list|,
name|new2old
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSortedDocValues
specifier|public
name|SortedDocValues
name|getSortedDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedDocValues
name|sortedDV
init|=
name|in
operator|.
name|getSortedDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|sortedDV
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|SortingSortedDocValues
argument_list|(
name|sortedDV
argument_list|,
name|new2old
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSortedSetDocValues
specifier|public
name|SortedSetDocValues
name|getSortedSetDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedSetDocValues
name|sortedSetDV
init|=
name|in
operator|.
name|getSortedSetDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|sortedSetDV
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|SortingSortedSetDocValues
argument_list|(
name|sortedSetDV
argument_list|,
name|new2old
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getTermVectors
specifier|public
name|Fields
name|getTermVectors
parameter_list|(
specifier|final
name|int
name|docID
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|getTermVectors
argument_list|(
name|new2old
index|[
name|docID
index|]
argument_list|)
return|;
block|}
block|}
end_class
end_unit
