begin_unit
begin_package
DECL|package|org.apache.lucene.document
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
package|;
end_package
begin_comment
comment|/*  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableFieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|StorableField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|StoredDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/** Defers actually loading a field's value until you ask  *  for it.  You must not use the returned Field instances  *  after the provided reader has been closed.   * @see #getField  */
end_comment
begin_class
DECL|class|LazyDocument
specifier|public
class|class
name|LazyDocument
block|{
DECL|field|reader
specifier|private
specifier|final
name|IndexReader
name|reader
decl_stmt|;
DECL|field|docID
specifier|private
specifier|final
name|int
name|docID
decl_stmt|;
comment|// null until first field is loaded
DECL|field|doc
specifier|private
name|StoredDocument
name|doc
decl_stmt|;
DECL|field|fields
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|LazyField
argument_list|>
argument_list|>
name|fields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|fieldNames
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|LazyDocument
specifier|public
name|LazyDocument
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docID
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|docID
operator|=
name|docID
expr_stmt|;
block|}
comment|/**    * Creates a StorableField whose value will be lazy loaded if and     * when it is used.     *<p>    *<b>NOTE:</b> This method must be called once for each value of the field     * name specified in sequence that the values exist.  This method may not be     * used to generate multiple, lazy, StorableField instances refering to     * the same underlying StorableField instance.    *</p>    *<p>    * The lazy loading of field values from all instances of StorableField     * objects returned by this method are all backed by a single StoredDocument     * per LazyDocument instance.    *</p>    */
DECL|method|getField
specifier|public
name|StorableField
name|getField
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|)
block|{
name|fieldNames
operator|.
name|add
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LazyField
argument_list|>
name|values
init|=
name|fields
operator|.
name|get
argument_list|(
name|fieldInfo
operator|.
name|number
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|values
condition|)
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|fieldInfo
operator|.
name|number
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
name|LazyField
name|value
init|=
operator|new
name|LazyField
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|,
name|fieldInfo
operator|.
name|number
argument_list|)
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// edge case: if someone asks this LazyDoc for more LazyFields
comment|// after other LazyFields from the same LazyDoc have been
comment|// actuallized, we need to force the doc to be re-fetched
comment|// so the new LazyFields are also populated.
name|doc
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
comment|/**     * non-private for test only access    * @lucene.internal     */
DECL|method|getDocument
specifier|synchronized
name|StoredDocument
name|getDocument
parameter_list|()
block|{
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|doc
operator|=
name|reader
operator|.
name|document
argument_list|(
name|docID
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unable to load document"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
return|return
name|doc
return|;
block|}
comment|// :TODO: synchronize to prevent redundent copying? (sync per field name?)
DECL|method|fetchRealValues
specifier|private
name|void
name|fetchRealValues
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|fieldNum
parameter_list|)
block|{
name|StoredDocument
name|d
init|=
name|getDocument
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LazyField
argument_list|>
name|lazyValues
init|=
name|fields
operator|.
name|get
argument_list|(
name|fieldNum
argument_list|)
decl_stmt|;
name|StorableField
index|[]
name|realValues
init|=
name|d
operator|.
name|getFields
argument_list|(
name|name
argument_list|)
decl_stmt|;
assert|assert
name|realValues
operator|.
name|length
operator|<=
name|lazyValues
operator|.
name|size
argument_list|()
operator|:
literal|"More lazy values then real values for field: "
operator|+
name|name
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lazyValues
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|LazyField
name|f
init|=
name|lazyValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|f
condition|)
block|{
name|f
operator|.
name|realValue
operator|=
name|realValues
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
block|}
comment|/**     * @lucene.internal     */
DECL|class|LazyField
specifier|public
class|class
name|LazyField
implements|implements
name|StorableField
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|fieldNum
specifier|private
name|int
name|fieldNum
decl_stmt|;
DECL|field|realValue
specifier|volatile
name|StorableField
name|realValue
init|=
literal|null
decl_stmt|;
DECL|method|LazyField
specifier|private
name|LazyField
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|fieldNum
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|fieldNum
operator|=
name|fieldNum
expr_stmt|;
block|}
comment|/**       * non-private for test only access      * @lucene.internal       */
DECL|method|hasBeenLoaded
specifier|public
name|boolean
name|hasBeenLoaded
parameter_list|()
block|{
return|return
literal|null
operator|!=
name|realValue
return|;
block|}
DECL|method|getRealValue
specifier|private
name|StorableField
name|getRealValue
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|realValue
condition|)
block|{
name|fetchRealValues
argument_list|(
name|name
argument_list|,
name|fieldNum
argument_list|)
expr_stmt|;
block|}
assert|assert
name|hasBeenLoaded
argument_list|()
operator|:
literal|"field value was not lazy loaded"
assert|;
assert|assert
name|realValue
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|()
argument_list|)
operator|:
literal|"realvalue name != name: "
operator|+
name|realValue
operator|.
name|name
argument_list|()
operator|+
literal|" != "
operator|+
name|name
argument_list|()
assert|;
return|return
name|realValue
return|;
block|}
annotation|@
name|Override
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|binaryValue
specifier|public
name|BytesRef
name|binaryValue
parameter_list|()
block|{
return|return
name|getRealValue
argument_list|()
operator|.
name|binaryValue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|stringValue
specifier|public
name|String
name|stringValue
parameter_list|()
block|{
return|return
name|getRealValue
argument_list|()
operator|.
name|stringValue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readerValue
specifier|public
name|Reader
name|readerValue
parameter_list|()
block|{
return|return
name|getRealValue
argument_list|()
operator|.
name|readerValue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|numericValue
specifier|public
name|Number
name|numericValue
parameter_list|()
block|{
return|return
name|getRealValue
argument_list|()
operator|.
name|numericValue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|fieldType
specifier|public
name|IndexableFieldType
name|fieldType
parameter_list|()
block|{
return|return
name|getRealValue
argument_list|()
operator|.
name|fieldType
argument_list|()
return|;
block|}
block|}
block|}
end_class
end_unit
