begin_unit
begin_package
DECL|package|org.apache.lucene.uninverting
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|uninverting
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FilterAtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FilterDirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_class
DECL|class|UninvertingReader
specifier|public
class|class
name|UninvertingReader
extends|extends
name|FilterAtomicReader
block|{
DECL|enum|Type
specifier|public
specifier|static
enum|enum
name|Type
block|{
DECL|enum constant|INTEGER
name|INTEGER
block|,
DECL|enum constant|LONG
name|LONG
block|,
DECL|enum constant|FLOAT
name|FLOAT
block|,
DECL|enum constant|DOUBLE
name|DOUBLE
block|,
DECL|enum constant|BINARY
name|BINARY
block|,
DECL|enum constant|SORTED
name|SORTED
block|,
DECL|enum constant|SORTED_SET
name|SORTED_SET
block|}
DECL|method|wrap
specifier|public
specifier|static
name|DirectoryReader
name|wrap
parameter_list|(
name|DirectoryReader
name|in
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|mapping
parameter_list|)
block|{
return|return
operator|new
name|UninvertingDirectoryReader
argument_list|(
name|in
argument_list|,
name|mapping
argument_list|)
return|;
block|}
DECL|class|UninvertingDirectoryReader
specifier|static
class|class
name|UninvertingDirectoryReader
extends|extends
name|FilterDirectoryReader
block|{
DECL|field|mapping
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|mapping
decl_stmt|;
DECL|method|UninvertingDirectoryReader
specifier|public
name|UninvertingDirectoryReader
parameter_list|(
name|DirectoryReader
name|in
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|mapping
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|,
operator|new
name|FilterDirectoryReader
operator|.
name|SubReaderWrapper
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AtomicReader
name|wrap
parameter_list|(
name|AtomicReader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|UninvertingReader
argument_list|(
name|reader
argument_list|,
name|mapping
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapping
operator|=
name|mapping
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doWrapDirectoryReader
specifier|protected
name|DirectoryReader
name|doWrapDirectoryReader
parameter_list|(
name|DirectoryReader
name|in
parameter_list|)
block|{
return|return
operator|new
name|UninvertingDirectoryReader
argument_list|(
name|in
argument_list|,
name|mapping
argument_list|)
return|;
block|}
block|}
DECL|field|mapping
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|mapping
decl_stmt|;
DECL|field|fieldInfos
specifier|final
name|FieldInfos
name|fieldInfos
decl_stmt|;
DECL|method|UninvertingReader
name|UninvertingReader
parameter_list|(
name|AtomicReader
name|in
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|mapping
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapping
operator|=
name|mapping
expr_stmt|;
name|ArrayList
argument_list|<
name|FieldInfo
argument_list|>
name|filteredInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldInfo
name|fi
range|:
name|in
operator|.
name|getFieldInfos
argument_list|()
control|)
block|{
name|FieldInfo
operator|.
name|DocValuesType
name|type
init|=
name|fi
operator|.
name|getDocValuesType
argument_list|()
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|isIndexed
argument_list|()
operator|&&
operator|!
name|fi
operator|.
name|hasDocValues
argument_list|()
condition|)
block|{
name|Type
name|t
init|=
name|mapping
operator|.
name|get
argument_list|(
name|fi
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|INTEGER
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
name|type
operator|=
name|FieldInfo
operator|.
name|DocValuesType
operator|.
name|NUMERIC
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
name|type
operator|=
name|FieldInfo
operator|.
name|DocValuesType
operator|.
name|BINARY
expr_stmt|;
break|break;
case|case
name|SORTED
case|:
name|type
operator|=
name|FieldInfo
operator|.
name|DocValuesType
operator|.
name|SORTED
expr_stmt|;
break|break;
case|case
name|SORTED_SET
case|:
name|type
operator|=
name|FieldInfo
operator|.
name|DocValuesType
operator|.
name|SORTED_SET
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
block|}
name|filteredInfos
operator|.
name|add
argument_list|(
operator|new
name|FieldInfo
argument_list|(
name|fi
operator|.
name|name
argument_list|,
name|fi
operator|.
name|isIndexed
argument_list|()
argument_list|,
name|fi
operator|.
name|number
argument_list|,
name|fi
operator|.
name|hasVectors
argument_list|()
argument_list|,
name|fi
operator|.
name|omitsNorms
argument_list|()
argument_list|,
name|fi
operator|.
name|hasPayloads
argument_list|()
argument_list|,
name|fi
operator|.
name|getIndexOptions
argument_list|()
argument_list|,
name|type
argument_list|,
name|fi
operator|.
name|getNormType
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fieldInfos
operator|=
operator|new
name|FieldInfos
argument_list|(
name|filteredInfos
operator|.
name|toArray
argument_list|(
operator|new
name|FieldInfo
index|[
name|filteredInfos
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFieldInfos
specifier|public
name|FieldInfos
name|getFieldInfos
parameter_list|()
block|{
return|return
name|fieldInfos
return|;
block|}
annotation|@
name|Override
DECL|method|getNumericDocValues
specifier|public
name|NumericDocValues
name|getNumericDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|Type
name|v
init|=
name|mapping
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|mapping
operator|.
name|get
argument_list|(
name|field
argument_list|)
condition|)
block|{
case|case
name|INTEGER
case|:
return|return
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getNumerics
argument_list|(
name|in
argument_list|,
name|field
argument_list|,
name|FieldCache
operator|.
name|NUMERIC_UTILS_INT_PARSER
argument_list|,
literal|true
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getNumerics
argument_list|(
name|in
argument_list|,
name|field
argument_list|,
name|FieldCache
operator|.
name|NUMERIC_UTILS_FLOAT_PARSER
argument_list|,
literal|true
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getNumerics
argument_list|(
name|in
argument_list|,
name|field
argument_list|,
name|FieldCache
operator|.
name|NUMERIC_UTILS_LONG_PARSER
argument_list|,
literal|true
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getNumerics
argument_list|(
name|in
argument_list|,
name|field
argument_list|,
name|FieldCache
operator|.
name|NUMERIC_UTILS_DOUBLE_PARSER
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
return|return
name|super
operator|.
name|getNumericDocValues
argument_list|(
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getBinaryDocValues
specifier|public
name|BinaryDocValues
name|getBinaryDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|mapping
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|==
name|Type
operator|.
name|BINARY
condition|)
block|{
return|return
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTerms
argument_list|(
name|in
argument_list|,
name|field
argument_list|,
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|in
operator|.
name|getBinaryDocValues
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSortedDocValues
specifier|public
name|SortedDocValues
name|getSortedDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|mapping
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|==
name|Type
operator|.
name|SORTED
condition|)
block|{
return|return
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTermsIndex
argument_list|(
name|in
argument_list|,
name|field
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|in
operator|.
name|getSortedDocValues
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSortedSetDocValues
specifier|public
name|SortedSetDocValues
name|getSortedSetDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|mapping
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|==
name|Type
operator|.
name|SORTED_SET
condition|)
block|{
return|return
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getDocTermOrds
argument_list|(
name|in
argument_list|,
name|field
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|in
operator|.
name|getSortedSetDocValues
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDocsWithField
specifier|public
name|Bits
name|getDocsWithField
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|mapping
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
condition|)
block|{
return|return
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getDocsWithField
argument_list|(
name|in
argument_list|,
name|field
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|in
operator|.
name|getDocsWithField
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCoreCacheKey
specifier|public
name|Object
name|getCoreCacheKey
parameter_list|()
block|{
return|return
name|in
operator|.
name|getCoreCacheKey
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getCombinedCoreAndDeletesKey
specifier|public
name|Object
name|getCombinedCoreAndDeletesKey
parameter_list|()
block|{
return|return
name|in
operator|.
name|getCombinedCoreAndDeletesKey
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Uninverting("
operator|+
name|in
operator|.
name|toString
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
end_class
end_unit
