begin_unit
begin_package
DECL|package|org.apache.lucene.uninverting
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|uninverting
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|BinaryDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedSetDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SlowCompositeReaderWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|StoredDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
operator|.
name|SeekStatus
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_class
DECL|class|TestFieldCacheVsDocValues
specifier|public
class|class
name|TestFieldCacheVsDocValues
extends|extends
name|LuceneTestCase
block|{
DECL|method|testByteMissingVsFieldCache
specifier|public
name|void
name|testByteMissingVsFieldCache
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numIterations
init|=
name|atLeast
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIterations
condition|;
name|i
operator|++
control|)
block|{
name|doTestMissingVsFieldCache
argument_list|(
name|Byte
operator|.
name|MIN_VALUE
argument_list|,
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testShortMissingVsFieldCache
specifier|public
name|void
name|testShortMissingVsFieldCache
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numIterations
init|=
name|atLeast
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIterations
condition|;
name|i
operator|++
control|)
block|{
name|doTestMissingVsFieldCache
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIntMissingVsFieldCache
specifier|public
name|void
name|testIntMissingVsFieldCache
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numIterations
init|=
name|atLeast
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIterations
condition|;
name|i
operator|++
control|)
block|{
name|doTestMissingVsFieldCache
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLongMissingVsFieldCache
specifier|public
name|void
name|testLongMissingVsFieldCache
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numIterations
init|=
name|atLeast
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIterations
condition|;
name|i
operator|++
control|)
block|{
name|doTestMissingVsFieldCache
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSortedFixedLengthVsFieldCache
specifier|public
name|void
name|testSortedFixedLengthVsFieldCache
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numIterations
init|=
name|atLeast
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIterations
condition|;
name|i
operator|++
control|)
block|{
name|int
name|fixedLength
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|doTestSortedVsFieldCache
argument_list|(
name|fixedLength
argument_list|,
name|fixedLength
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSortedVariableLengthVsFieldCache
specifier|public
name|void
name|testSortedVariableLengthVsFieldCache
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numIterations
init|=
name|atLeast
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIterations
condition|;
name|i
operator|++
control|)
block|{
name|doTestSortedVsFieldCache
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSortedSetFixedLengthVsUninvertedField
specifier|public
name|void
name|testSortedSetFixedLengthVsUninvertedField
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numIterations
init|=
name|atLeast
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIterations
condition|;
name|i
operator|++
control|)
block|{
name|int
name|fixedLength
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|doTestSortedSetVsUninvertedField
argument_list|(
name|fixedLength
argument_list|,
name|fixedLength
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSortedSetVariableLengthVsUninvertedField
specifier|public
name|void
name|testSortedSetVariableLengthVsUninvertedField
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numIterations
init|=
name|atLeast
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIterations
condition|;
name|i
operator|++
control|)
block|{
name|doTestSortedSetVsUninvertedField
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
comment|// LUCENE-4853
DECL|method|testHugeBinaryValues
specifier|public
name|void
name|testHugeBinaryValues
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
comment|// FSDirectory because SimpleText will consume gobbs of
comment|// space when storing big binary values:
name|Directory
name|d
init|=
name|newFSDirectory
argument_list|(
name|createTempDir
argument_list|(
literal|"hugeBinaryValues"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|doFixed
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|int
name|numDocs
decl_stmt|;
name|int
name|fixedLength
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|doFixed
condition|)
block|{
comment|// Sometimes make all values fixed length since some
comment|// codecs have different code paths for this:
name|numDocs
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|fixedLength
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|65537
argument_list|,
literal|256
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|numDocs
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|analyzer
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|docBytes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|totalBytes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
comment|// we don't use RandomIndexWriter because it might add
comment|// more docvalues than we expect !!!!
comment|// Must be> 64KB in size to ensure more than 2 pages in
comment|// PagedBytes would be needed:
name|int
name|numBytes
decl_stmt|;
if|if
condition|(
name|doFixed
condition|)
block|{
name|numBytes
operator|=
name|fixedLength
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|docID
operator|==
literal|0
operator|||
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|3
condition|)
block|{
name|numBytes
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|65537
argument_list|,
literal|3
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|numBytes
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
name|totalBytes
operator|+=
name|numBytes
expr_stmt|;
if|if
condition|(
name|totalBytes
operator|>
literal|5
operator|*
literal|1024
operator|*
literal|1024
condition|)
block|{
break|break;
block|}
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|numBytes
index|]
decl_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|docBytes
operator|.
name|add
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|BytesRef
name|b
init|=
operator|new
name|BytesRef
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|b
operator|.
name|length
operator|=
name|bytes
operator|.
name|length
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|docID
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
if|if
condition|(
name|iae
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"is too large"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
name|iae
throw|;
block|}
else|else
block|{
comment|// OK: some codecs can't handle binary DV> 32K
name|assertFalse
argument_list|(
name|codecAcceptsHugeBinaryValues
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
name|DirectoryReader
name|r
decl_stmt|;
try|try
block|{
name|r
operator|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
if|if
condition|(
name|iae
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"is too large"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
name|iae
throw|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|codecAcceptsHugeBinaryValues
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
comment|// OK: some codecs can't handle binary DV> 32K
name|w
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|LeafReader
name|ar
init|=
name|SlowCompositeReaderWrapper
operator|.
name|wrap
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|BinaryDocValues
name|s
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTerms
argument_list|(
name|ar
argument_list|,
literal|"field"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|docBytes
operator|.
name|size
argument_list|()
condition|;
name|docID
operator|++
control|)
block|{
name|StoredDocument
name|doc
init|=
name|ar
operator|.
name|document
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|BytesRef
name|bytes
init|=
name|s
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|byte
index|[]
name|expected
init|=
name|docBytes
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|doc
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|expected
argument_list|)
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|codecAcceptsHugeBinaryValues
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|ar
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|field|LARGE_BINARY_FIELD_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|LARGE_BINARY_FIELD_LENGTH
init|=
operator|(
literal|1
operator|<<
literal|15
operator|)
operator|-
literal|2
decl_stmt|;
comment|// TODO: get this out of here and into the deprecated codecs (4.0, 4.2)
DECL|method|testHugeBinaryValueLimit
specifier|public
name|void
name|testHugeBinaryValueLimit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// We only test DVFormats that have a limit
name|assumeFalse
argument_list|(
literal|"test requires codec with limits on max binary field length"
argument_list|,
name|codecAcceptsHugeBinaryValues
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|Analyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
comment|// FSDirectory because SimpleText will consume gobbs of
comment|// space when storing big binary values:
name|Directory
name|d
init|=
name|newFSDirectory
argument_list|(
name|createTempDir
argument_list|(
literal|"hugeBinaryValues"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|doFixed
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|int
name|numDocs
decl_stmt|;
name|int
name|fixedLength
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|doFixed
condition|)
block|{
comment|// Sometimes make all values fixed length since some
comment|// codecs have different code paths for this:
name|numDocs
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|fixedLength
operator|=
name|LARGE_BINARY_FIELD_LENGTH
expr_stmt|;
block|}
else|else
block|{
name|numDocs
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|analyzer
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|docBytes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|totalBytes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
comment|// we don't use RandomIndexWriter because it might add
comment|// more docvalues than we expect !!!!
comment|// Must be> 64KB in size to ensure more than 2 pages in
comment|// PagedBytes would be needed:
name|int
name|numBytes
decl_stmt|;
if|if
condition|(
name|doFixed
condition|)
block|{
name|numBytes
operator|=
name|fixedLength
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|docID
operator|==
literal|0
operator|||
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|3
condition|)
block|{
name|numBytes
operator|=
name|LARGE_BINARY_FIELD_LENGTH
expr_stmt|;
block|}
else|else
block|{
name|numBytes
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|LARGE_BINARY_FIELD_LENGTH
argument_list|)
expr_stmt|;
block|}
name|totalBytes
operator|+=
name|numBytes
expr_stmt|;
if|if
condition|(
name|totalBytes
operator|>
literal|5
operator|*
literal|1024
operator|*
literal|1024
condition|)
block|{
break|break;
block|}
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|numBytes
index|]
decl_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|docBytes
operator|.
name|add
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|BytesRef
name|b
init|=
operator|new
name|BytesRef
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|b
operator|.
name|length
operator|=
name|bytes
operator|.
name|length
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|docID
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|DirectoryReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|LeafReader
name|ar
init|=
name|SlowCompositeReaderWrapper
operator|.
name|wrap
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|BinaryDocValues
name|s
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTerms
argument_list|(
name|ar
argument_list|,
literal|"field"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|docBytes
operator|.
name|size
argument_list|()
condition|;
name|docID
operator|++
control|)
block|{
name|StoredDocument
name|doc
init|=
name|ar
operator|.
name|document
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|BytesRef
name|bytes
init|=
name|s
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|byte
index|[]
name|expected
init|=
name|docBytes
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|doc
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|expected
argument_list|)
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
name|ar
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|doTestSortedVsFieldCache
specifier|private
name|void
name|doTestSortedVsFieldCache
parameter_list|(
name|int
name|minLength
parameter_list|,
name|int
name|maxLength
parameter_list|)
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|idField
init|=
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|Field
name|indexedField
init|=
operator|new
name|StringField
argument_list|(
literal|"indexed"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|Field
name|dvField
init|=
operator|new
name|SortedDocValuesField
argument_list|(
literal|"dv"
argument_list|,
operator|new
name|BytesRef
argument_list|()
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|idField
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|indexedField
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|dvField
argument_list|)
expr_stmt|;
comment|// index some docs
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|300
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|idField
operator|.
name|setStringValue
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|length
decl_stmt|;
if|if
condition|(
name|minLength
operator|==
name|maxLength
condition|)
block|{
name|length
operator|=
name|minLength
expr_stmt|;
comment|// fixed length
block|}
else|else
block|{
name|length
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|minLength
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
block|}
name|String
name|value
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|indexedField
operator|.
name|setStringValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|dvField
operator|.
name|setBytesValue
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|31
argument_list|)
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
comment|// delete some docs
name|int
name|numDeletions
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|numDocs
operator|/
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDeletions
condition|;
name|i
operator|++
control|)
block|{
name|int
name|id
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// compare
name|DirectoryReader
name|ir
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|context
range|:
name|ir
operator|.
name|leaves
argument_list|()
control|)
block|{
name|LeafReader
name|r
init|=
name|context
operator|.
name|reader
argument_list|()
decl_stmt|;
name|SortedDocValues
name|expected
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTermsIndex
argument_list|(
name|r
argument_list|,
literal|"indexed"
argument_list|)
decl_stmt|;
name|SortedDocValues
name|actual
init|=
name|r
operator|.
name|getSortedDocValues
argument_list|(
literal|"dv"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|r
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|doTestSortedSetVsUninvertedField
specifier|private
name|void
name|doTestSortedSetVsUninvertedField
parameter_list|(
name|int
name|minLength
parameter_list|,
name|int
name|maxLength
parameter_list|)
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// index some docs
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|300
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|idField
init|=
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|idField
argument_list|)
expr_stmt|;
specifier|final
name|int
name|length
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|minLength
argument_list|,
name|maxLength
argument_list|)
decl_stmt|;
name|int
name|numValues
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|17
argument_list|)
decl_stmt|;
comment|// create a random list of strings
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|v
init|=
literal|0
init|;
name|v
operator|<
name|numValues
condition|;
name|v
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
name|minLength
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add in any order to the indexed field
name|ArrayList
argument_list|<
name|String
argument_list|>
name|unordered
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|unordered
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|v
range|:
name|values
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"indexed"
argument_list|,
name|v
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add in any order to the dv field
name|ArrayList
argument_list|<
name|String
argument_list|>
name|unordered2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|unordered2
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|v
range|:
name|unordered2
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
literal|"dv"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|v
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|31
argument_list|)
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
comment|// delete some docs
name|int
name|numDeletions
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|numDocs
operator|/
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDeletions
condition|;
name|i
operator|++
control|)
block|{
name|int
name|id
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// compare per-segment
name|DirectoryReader
name|ir
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|context
range|:
name|ir
operator|.
name|leaves
argument_list|()
control|)
block|{
name|LeafReader
name|r
init|=
name|context
operator|.
name|reader
argument_list|()
decl_stmt|;
name|SortedSetDocValues
name|expected
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getDocTermOrds
argument_list|(
name|r
argument_list|,
literal|"indexed"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SortedSetDocValues
name|actual
init|=
name|r
operator|.
name|getSortedSetDocValues
argument_list|(
literal|"dv"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|r
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// now compare again after the merge
name|ir
operator|=
name|writer
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|LeafReader
name|ar
init|=
name|getOnlySegmentReader
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|SortedSetDocValues
name|expected
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getDocTermOrds
argument_list|(
name|ar
argument_list|,
literal|"indexed"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SortedSetDocValues
name|actual
init|=
name|ar
operator|.
name|getSortedSetDocValues
argument_list|(
literal|"dv"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ir
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|doTestMissingVsFieldCache
specifier|private
name|void
name|doTestMissingVsFieldCache
parameter_list|(
name|LongProducer
name|longs
parameter_list|)
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Field
name|idField
init|=
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|Field
name|indexedField
init|=
name|newStringField
argument_list|(
literal|"indexed"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|Field
name|dvField
init|=
operator|new
name|NumericDocValuesField
argument_list|(
literal|"dv"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// index some docs
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|300
argument_list|)
decl_stmt|;
comment|// numDocs should be always> 256 so that in case of a codec that optimizes
comment|// for numbers of values<= 256, all storage layouts are tested
assert|assert
name|numDocs
operator|>
literal|256
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|idField
operator|.
name|setStringValue
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|value
init|=
name|longs
operator|.
name|next
argument_list|()
decl_stmt|;
name|indexedField
operator|.
name|setStringValue
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|dvField
operator|.
name|setLongValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|idField
argument_list|)
expr_stmt|;
comment|// 1/4 of the time we neglect to add the fields
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
operator|>
literal|0
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|indexedField
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|dvField
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|31
argument_list|)
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
comment|// delete some docs
name|int
name|numDeletions
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|numDocs
operator|/
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDeletions
condition|;
name|i
operator|++
control|)
block|{
name|int
name|id
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// merge some segments and ensure that at least one of them has more than
comment|// 256 values
name|writer
operator|.
name|forceMerge
argument_list|(
name|numDocs
operator|/
literal|256
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// compare
name|DirectoryReader
name|ir
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|context
range|:
name|ir
operator|.
name|leaves
argument_list|()
control|)
block|{
name|LeafReader
name|r
init|=
name|context
operator|.
name|reader
argument_list|()
decl_stmt|;
name|Bits
name|expected
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getDocsWithField
argument_list|(
name|r
argument_list|,
literal|"indexed"
argument_list|)
decl_stmt|;
name|Bits
name|actual
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getDocsWithField
argument_list|(
name|r
argument_list|,
literal|"dv"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|doTestMissingVsFieldCache
specifier|private
name|void
name|doTestMissingVsFieldCache
parameter_list|(
specifier|final
name|long
name|minValue
parameter_list|,
specifier|final
name|long
name|maxValue
parameter_list|)
throws|throws
name|Exception
block|{
name|doTestMissingVsFieldCache
argument_list|(
operator|new
name|LongProducer
argument_list|()
block|{
annotation|@
name|Override
name|long
name|next
parameter_list|()
block|{
return|return
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|class|LongProducer
specifier|static
specifier|abstract
class|class
name|LongProducer
block|{
DECL|method|next
specifier|abstract
name|long
name|next
parameter_list|()
function_decl|;
block|}
DECL|method|assertEquals
specifier|private
name|void
name|assertEquals
parameter_list|(
name|Bits
name|expected
parameter_list|,
name|Bits
name|actual
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|()
argument_list|,
name|actual
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertEquals
specifier|private
name|void
name|assertEquals
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|SortedDocValues
name|expected
parameter_list|,
name|SortedDocValues
name|actual
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|maxDoc
argument_list|,
name|DocValues
operator|.
name|singleton
argument_list|(
name|expected
argument_list|)
argument_list|,
name|DocValues
operator|.
name|singleton
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEquals
specifier|private
name|void
name|assertEquals
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|SortedSetDocValues
name|expected
parameter_list|,
name|SortedSetDocValues
name|actual
parameter_list|)
throws|throws
name|Exception
block|{
comment|// can be null for the segment if no docs actually had any SortedDocValues
comment|// in this case FC.getDocTermsOrds returns EMPTY
if|if
condition|(
name|actual
operator|==
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|getValueCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertEquals
argument_list|(
name|expected
operator|.
name|getValueCount
argument_list|()
argument_list|,
name|actual
operator|.
name|getValueCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// compare ord lists
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
name|i
operator|++
control|)
block|{
name|expected
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|actual
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|long
name|expectedOrd
decl_stmt|;
while|while
condition|(
operator|(
name|expectedOrd
operator|=
name|expected
operator|.
name|nextOrd
argument_list|()
operator|)
operator|!=
name|NO_MORE_ORDS
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedOrd
argument_list|,
name|actual
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|NO_MORE_ORDS
argument_list|,
name|actual
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// compare ord dictionary
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|getValueCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|BytesRef
name|expectedBytes
init|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|expected
operator|.
name|lookupOrd
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|BytesRef
name|actualBytes
init|=
name|actual
operator|.
name|lookupOrd
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedBytes
argument_list|,
name|actualBytes
argument_list|)
expr_stmt|;
block|}
comment|// compare termsenum
name|assertEquals
argument_list|(
name|expected
operator|.
name|getValueCount
argument_list|()
argument_list|,
name|expected
operator|.
name|termsEnum
argument_list|()
argument_list|,
name|actual
operator|.
name|termsEnum
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEquals
specifier|private
name|void
name|assertEquals
parameter_list|(
name|long
name|numOrds
parameter_list|,
name|TermsEnum
name|expected
parameter_list|,
name|TermsEnum
name|actual
parameter_list|)
throws|throws
name|Exception
block|{
name|BytesRef
name|ref
decl_stmt|;
comment|// sequential next() through all terms
while|while
condition|(
operator|(
name|ref
operator|=
name|expected
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|ref
argument_list|,
name|actual
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|ord
argument_list|()
argument_list|,
name|actual
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|term
argument_list|()
argument_list|,
name|actual
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|actual
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// sequential seekExact(ord) through all terms
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOrds
condition|;
name|i
operator|++
control|)
block|{
name|expected
operator|.
name|seekExact
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|actual
operator|.
name|seekExact
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|ord
argument_list|()
argument_list|,
name|actual
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|term
argument_list|()
argument_list|,
name|actual
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// sequential seekExact(BytesRef) through all terms
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOrds
condition|;
name|i
operator|++
control|)
block|{
name|expected
operator|.
name|seekExact
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actual
operator|.
name|seekExact
argument_list|(
name|expected
operator|.
name|term
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|ord
argument_list|()
argument_list|,
name|actual
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|term
argument_list|()
argument_list|,
name|actual
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// sequential seekCeil(BytesRef) through all terms
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOrds
condition|;
name|i
operator|++
control|)
block|{
name|expected
operator|.
name|seekExact
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SeekStatus
operator|.
name|FOUND
argument_list|,
name|actual
operator|.
name|seekCeil
argument_list|(
name|expected
operator|.
name|term
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|ord
argument_list|()
argument_list|,
name|actual
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|term
argument_list|()
argument_list|,
name|actual
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// random seekExact(ord)
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOrds
condition|;
name|i
operator|++
control|)
block|{
name|long
name|randomOrd
init|=
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|numOrds
operator|-
literal|1
argument_list|)
decl_stmt|;
name|expected
operator|.
name|seekExact
argument_list|(
name|randomOrd
argument_list|)
expr_stmt|;
name|actual
operator|.
name|seekExact
argument_list|(
name|randomOrd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|ord
argument_list|()
argument_list|,
name|actual
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|term
argument_list|()
argument_list|,
name|actual
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// random seekExact(BytesRef)
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOrds
condition|;
name|i
operator|++
control|)
block|{
name|long
name|randomOrd
init|=
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|numOrds
operator|-
literal|1
argument_list|)
decl_stmt|;
name|expected
operator|.
name|seekExact
argument_list|(
name|randomOrd
argument_list|)
expr_stmt|;
name|actual
operator|.
name|seekExact
argument_list|(
name|expected
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|ord
argument_list|()
argument_list|,
name|actual
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|term
argument_list|()
argument_list|,
name|actual
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// random seekCeil(BytesRef)
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOrds
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|target
init|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SeekStatus
name|expectedStatus
init|=
name|expected
operator|.
name|seekCeil
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedStatus
argument_list|,
name|actual
operator|.
name|seekCeil
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedStatus
operator|!=
name|SeekStatus
operator|.
name|END
condition|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|ord
argument_list|()
argument_list|,
name|actual
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|term
argument_list|()
argument_list|,
name|actual
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|codecAcceptsHugeBinaryValues
specifier|protected
name|boolean
name|codecAcceptsHugeBinaryValues
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|String
name|name
init|=
name|TestUtil
operator|.
name|getDocValuesFormat
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
operator|!
operator|(
name|name
operator|.
name|equals
argument_list|(
literal|"Memory"
argument_list|)
operator|)
return|;
comment|// Direct has a different type of limit
block|}
block|}
end_class
end_unit
