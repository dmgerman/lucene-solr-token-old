begin_unit
begin_package
DECL|package|org.apache.lucene.uninverting
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|uninverting
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|IntField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SlowCompositeReaderWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|uninverting
operator|.
name|UninvertingReader
operator|.
name|Type
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_class
DECL|class|TestUninvertingReader
specifier|public
class|class
name|TestUninvertingReader
extends|extends
name|LuceneTestCase
block|{
DECL|method|testSortedSetInteger
specifier|public
name|void
name|testSortedSetInteger
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"foo"
argument_list|,
literal|5
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"foo"
argument_list|,
literal|5
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"foo"
argument_list|,
operator|-
literal|3
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|iw
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|DirectoryReader
name|ir
init|=
name|UninvertingReader
operator|.
name|wrap
argument_list|(
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"foo"
argument_list|,
name|Type
operator|.
name|SORTED_SET_INTEGER
argument_list|)
argument_list|)
decl_stmt|;
name|LeafReader
name|ar
init|=
name|ir
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
decl_stmt|;
name|SortedSetDocValues
name|v
init|=
name|ar
operator|.
name|getSortedSetDocValues
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|v
operator|.
name|getValueCount
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|.
name|setDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|v
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
argument_list|,
name|v
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|.
name|setDocument
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|v
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|v
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
argument_list|,
name|v
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|BytesRef
name|value
init|=
name|v
operator|.
name|lookupOrd
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|3
argument_list|,
name|NumericUtils
operator|.
name|prefixCodedToInt
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|value
operator|=
name|v
operator|.
name|lookupOrd
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|NumericUtils
operator|.
name|prefixCodedToInt
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|checkReader
argument_list|(
name|ir
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSortedSetFloat
specifier|public
name|void
name|testSortedSetFloat
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"foo"
argument_list|,
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
literal|5f
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"foo"
argument_list|,
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
literal|5f
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"foo"
argument_list|,
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
operator|-
literal|3f
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|iw
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|DirectoryReader
name|ir
init|=
name|UninvertingReader
operator|.
name|wrap
argument_list|(
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"foo"
argument_list|,
name|Type
operator|.
name|SORTED_SET_FLOAT
argument_list|)
argument_list|)
decl_stmt|;
name|LeafReader
name|ar
init|=
name|ir
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
decl_stmt|;
name|SortedSetDocValues
name|v
init|=
name|ar
operator|.
name|getSortedSetDocValues
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|v
operator|.
name|getValueCount
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|.
name|setDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|v
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
argument_list|,
name|v
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|.
name|setDocument
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|v
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|v
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
argument_list|,
name|v
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|BytesRef
name|value
init|=
name|v
operator|.
name|lookupOrd
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
operator|-
literal|3f
argument_list|)
argument_list|,
name|NumericUtils
operator|.
name|prefixCodedToInt
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|value
operator|=
name|v
operator|.
name|lookupOrd
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
literal|5f
argument_list|)
argument_list|,
name|NumericUtils
operator|.
name|prefixCodedToInt
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|checkReader
argument_list|(
name|ir
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSortedSetLong
specifier|public
name|void
name|testSortedSetLong
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongField
argument_list|(
literal|"foo"
argument_list|,
literal|5
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongField
argument_list|(
literal|"foo"
argument_list|,
literal|5
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongField
argument_list|(
literal|"foo"
argument_list|,
operator|-
literal|3
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|iw
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|DirectoryReader
name|ir
init|=
name|UninvertingReader
operator|.
name|wrap
argument_list|(
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"foo"
argument_list|,
name|Type
operator|.
name|SORTED_SET_LONG
argument_list|)
argument_list|)
decl_stmt|;
name|LeafReader
name|ar
init|=
name|ir
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
decl_stmt|;
name|SortedSetDocValues
name|v
init|=
name|ar
operator|.
name|getSortedSetDocValues
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|v
operator|.
name|getValueCount
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|.
name|setDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|v
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
argument_list|,
name|v
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|.
name|setDocument
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|v
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|v
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
argument_list|,
name|v
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|BytesRef
name|value
init|=
name|v
operator|.
name|lookupOrd
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|3
argument_list|,
name|NumericUtils
operator|.
name|prefixCodedToLong
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|value
operator|=
name|v
operator|.
name|lookupOrd
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|NumericUtils
operator|.
name|prefixCodedToLong
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|checkReader
argument_list|(
name|ir
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSortedSetDouble
specifier|public
name|void
name|testSortedSetDouble
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongField
argument_list|(
literal|"foo"
argument_list|,
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
literal|5d
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongField
argument_list|(
literal|"foo"
argument_list|,
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
literal|5d
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongField
argument_list|(
literal|"foo"
argument_list|,
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
operator|-
literal|3d
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|iw
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|DirectoryReader
name|ir
init|=
name|UninvertingReader
operator|.
name|wrap
argument_list|(
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"foo"
argument_list|,
name|Type
operator|.
name|SORTED_SET_DOUBLE
argument_list|)
argument_list|)
decl_stmt|;
name|LeafReader
name|ar
init|=
name|ir
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
decl_stmt|;
name|SortedSetDocValues
name|v
init|=
name|ar
operator|.
name|getSortedSetDocValues
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|v
operator|.
name|getValueCount
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|.
name|setDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|v
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
argument_list|,
name|v
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|.
name|setDocument
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|v
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|v
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
argument_list|,
name|v
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|BytesRef
name|value
init|=
name|v
operator|.
name|lookupOrd
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
operator|-
literal|3d
argument_list|)
argument_list|,
name|NumericUtils
operator|.
name|prefixCodedToLong
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|value
operator|=
name|v
operator|.
name|lookupOrd
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
literal|5d
argument_list|)
argument_list|,
name|NumericUtils
operator|.
name|prefixCodedToLong
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|checkReader
argument_list|(
name|ir
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Tests {@link Type#SORTED_SET_INTEGER} using Integer based fields, with and w/o precision steps */
DECL|method|testSortedSetIntegerManyValues
specifier|public
name|void
name|testSortedSetIntegerManyValues
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|FieldType
name|NO_TRIE_TYPE
init|=
operator|new
name|FieldType
argument_list|(
name|IntField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|NO_TRIE_TYPE
operator|.
name|setNumericPrecisionStep
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|UNINVERT_MAP
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
argument_list|()
decl_stmt|;
name|UNINVERT_MAP
operator|.
name|put
argument_list|(
literal|"notrie_single"
argument_list|,
name|Type
operator|.
name|SORTED_SET_INTEGER
argument_list|)
expr_stmt|;
name|UNINVERT_MAP
operator|.
name|put
argument_list|(
literal|"notrie_multi"
argument_list|,
name|Type
operator|.
name|SORTED_SET_INTEGER
argument_list|)
expr_stmt|;
name|UNINVERT_MAP
operator|.
name|put
argument_list|(
literal|"trie_single"
argument_list|,
name|Type
operator|.
name|SORTED_SET_INTEGER
argument_list|)
expr_stmt|;
name|UNINVERT_MAP
operator|.
name|put
argument_list|(
literal|"trie_multi"
argument_list|,
name|Type
operator|.
name|SORTED_SET_INTEGER
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|MULTI_VALUES
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|MULTI_VALUES
operator|.
name|add
argument_list|(
literal|"trie_multi"
argument_list|)
expr_stmt|;
name|MULTI_VALUES
operator|.
name|add
argument_list|(
literal|"notrie_multi"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|NUM_DOCS
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|1500
argument_list|)
decl_stmt|;
specifier|final
name|int
name|MIN
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|int
name|MAX
init|=
name|MIN
operator|+
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|long
name|EXPECTED_VALSET_SIZE
init|=
literal|1
operator|+
name|MAX
operator|-
name|MIN
decl_stmt|;
block|{
comment|// (at least) one doc should have every value, so that at least one segment has every value
specifier|final
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|MIN
init|;
name|i
operator|<=
name|MAX
condition|;
name|i
operator|++
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"trie_multi"
argument_list|,
name|i
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"notrie_multi"
argument_list|,
name|i
argument_list|,
name|NO_TRIE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|// now add some more random docs (note: starting at i=1 because of previously added doc)
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|NUM_DOCS
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|!=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
condition|)
block|{
name|int
name|val
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|MIN
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"trie_single"
argument_list|,
name|val
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"notrie_single"
argument_list|,
name|val
argument_list|,
name|NO_TRIE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|0
operator|!=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
condition|)
block|{
name|int
name|numMulti
init|=
name|atLeast
argument_list|(
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
literal|0
operator|<
name|numMulti
operator|--
condition|)
block|{
name|int
name|val
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|MIN
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"trie_multi"
argument_list|,
name|val
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"notrie_multi"
argument_list|,
name|val
argument_list|,
name|NO_TRIE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|DirectoryReader
name|ir
init|=
name|UninvertingReader
operator|.
name|wrap
argument_list|(
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
argument_list|,
name|UNINVERT_MAP
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|checkReader
argument_list|(
name|ir
argument_list|)
expr_stmt|;
specifier|final
name|int
name|NUM_LEAVES
init|=
name|ir
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// check the leaves: no more then total set size
for|for
control|(
name|LeafReaderContext
name|rc
range|:
name|ir
operator|.
name|leaves
argument_list|()
control|)
block|{
specifier|final
name|LeafReader
name|ar
init|=
name|rc
operator|.
name|reader
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|UNINVERT_MAP
operator|.
name|keySet
argument_list|()
control|)
block|{
specifier|final
name|SortedSetDocValues
name|v
init|=
name|DocValues
operator|.
name|getSortedSet
argument_list|(
name|ar
argument_list|,
name|f
argument_list|)
decl_stmt|;
specifier|final
name|long
name|valSetSize
init|=
name|v
operator|.
name|getValueCount
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|f
operator|+
literal|": Expected no more then "
operator|+
name|EXPECTED_VALSET_SIZE
operator|+
literal|" values per segment, got "
operator|+
name|valSetSize
operator|+
literal|" from: "
operator|+
name|ar
operator|.
name|toString
argument_list|()
argument_list|,
name|valSetSize
operator|<=
name|EXPECTED_VALSET_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
literal|1
operator|==
name|NUM_LEAVES
operator|&&
name|MULTI_VALUES
operator|.
name|contains
argument_list|(
name|f
argument_list|)
condition|)
block|{
comment|// tighter check on multi fields in single segment index since we know one doc has all of them
name|assertEquals
argument_list|(
name|f
operator|+
literal|": Single segment LeafReader's value set should have had exactly expected size"
argument_list|,
name|EXPECTED_VALSET_SIZE
argument_list|,
name|valSetSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// check the composite of all leaves: exact expectation of set size
specifier|final
name|LeafReader
name|composite
init|=
name|SlowCompositeReaderWrapper
operator|.
name|wrap
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|checkReader
argument_list|(
name|composite
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|f
range|:
name|MULTI_VALUES
control|)
block|{
specifier|final
name|SortedSetDocValues
name|v
init|=
name|composite
operator|.
name|getSortedSetDocValues
argument_list|(
name|f
argument_list|)
decl_stmt|;
specifier|final
name|long
name|valSetSize
init|=
name|v
operator|.
name|getValueCount
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|f
operator|+
literal|": Composite reader value set should have had exactly expected size"
argument_list|,
name|EXPECTED_VALSET_SIZE
argument_list|,
name|valSetSize
argument_list|)
expr_stmt|;
block|}
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSortedSetEmptyIndex
specifier|public
name|void
name|testSortedSetEmptyIndex
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|UNINVERT_MAP
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Type
name|t
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Type
operator|.
name|class
argument_list|)
control|)
block|{
name|UNINVERT_MAP
operator|.
name|put
argument_list|(
name|t
operator|.
name|name
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DirectoryReader
name|ir
init|=
name|UninvertingReader
operator|.
name|wrap
argument_list|(
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
argument_list|,
name|UNINVERT_MAP
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|checkReader
argument_list|(
name|ir
argument_list|)
expr_stmt|;
specifier|final
name|LeafReader
name|composite
init|=
name|SlowCompositeReaderWrapper
operator|.
name|wrap
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|checkReader
argument_list|(
name|composite
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|f
range|:
name|UNINVERT_MAP
operator|.
name|keySet
argument_list|()
control|)
block|{
comment|// check the leaves
comment|// (normally there are none for an empty index, so this is really just future
comment|// proofing in case that changes for some reason)
for|for
control|(
name|LeafReaderContext
name|rc
range|:
name|ir
operator|.
name|leaves
argument_list|()
control|)
block|{
specifier|final
name|LeafReader
name|ar
init|=
name|rc
operator|.
name|reader
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|f
operator|+
literal|": Expected no doc values from empty index (leaf)"
argument_list|,
name|ar
operator|.
name|getSortedSetDocValues
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check the composite
name|assertNull
argument_list|(
name|f
operator|+
literal|": Expected no doc values from empty index (composite)"
argument_list|,
name|composite
operator|.
name|getSortedSetDocValues
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
