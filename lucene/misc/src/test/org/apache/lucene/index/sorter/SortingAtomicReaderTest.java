begin_unit
begin_package
DECL|package|org.apache.lucene.index.sorter
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|sorter
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_class
DECL|class|SortingAtomicReaderTest
specifier|public
class|class
name|SortingAtomicReaderTest
extends|extends
name|SorterTestBase
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClassSortingAtomicReaderTest
specifier|public
specifier|static
name|void
name|beforeClassSortingAtomicReaderTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// build the mapping from the reader, since we deleted documents, some of
comment|// them might have disappeared from the index (e.g. if an entire segment is
comment|// dropped b/c all its docs are deleted)
specifier|final
name|int
index|[]
name|values
init|=
operator|new
name|int
index|[
name|reader
operator|.
name|maxDoc
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reader
operator|.
name|maxDoc
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|reader
operator|.
name|document
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
name|ID_FIELD
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Sorter
operator|.
name|DocComparator
name|comparator
init|=
operator|new
name|Sorter
operator|.
name|DocComparator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|docID1
parameter_list|,
name|int
name|docID2
parameter_list|)
block|{
specifier|final
name|int
name|v1
init|=
name|values
index|[
name|docID1
index|]
decl_stmt|;
specifier|final
name|int
name|v2
init|=
name|values
index|[
name|docID2
index|]
decl_stmt|;
return|return
name|v1
operator|<
name|v2
condition|?
operator|-
literal|1
else|:
name|v1
operator|==
name|v2
condition|?
literal|0
else|:
literal|1
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|Sorter
operator|.
name|DocMap
name|docMap
init|=
name|Sorter
operator|.
name|sort
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|comparator
argument_list|)
decl_stmt|;
comment|// Sorter.compute also sorts the values
name|sortedValues
operator|=
operator|new
name|Integer
index|[
name|reader
operator|.
name|maxDoc
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reader
operator|.
name|maxDoc
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|sortedValues
index|[
name|docMap
operator|.
name|oldToNew
argument_list|(
name|i
argument_list|)
index|]
operator|=
name|values
index|[
name|i
index|]
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"docMap: "
operator|+
name|docMap
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"sortedValues: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|sortedValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
name|SortingAtomicReader
operator|.
name|wrap
argument_list|(
name|reader
argument_list|,
operator|new
name|Sorter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Sorter
operator|.
name|DocMap
name|sort
parameter_list|(
name|AtomicReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|docMap
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getID
parameter_list|()
block|{
return|return
name|ID_FIELD
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"mapped-deleted-docs: "
argument_list|)
expr_stmt|;
name|Bits
name|mappedLiveDocs
init|=
name|reader
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mappedLiveDocs
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|mappedLiveDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|i
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|TestUtil
operator|.
name|checkReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
