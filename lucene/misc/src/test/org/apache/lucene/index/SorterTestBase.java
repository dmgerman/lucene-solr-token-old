begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PayloadAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|BinaryDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
operator|.
name|Store
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedNumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedSetDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortingLeafReader
operator|.
name|SortingDocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
operator|.
name|SeekStatus
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|CollectionStatistics
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermStatistics
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Similarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|SorterTestBase
specifier|public
specifier|abstract
class|class
name|SorterTestBase
extends|extends
name|LuceneTestCase
block|{
DECL|class|NormsSimilarity
specifier|static
specifier|final
class|class
name|NormsSimilarity
extends|extends
name|Similarity
block|{
DECL|field|in
specifier|private
specifier|final
name|Similarity
name|in
decl_stmt|;
DECL|method|NormsSimilarity
specifier|public
name|NormsSimilarity
parameter_list|(
name|Similarity
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|computeNorm
specifier|public
name|long
name|computeNorm
parameter_list|(
name|FieldInvertState
name|state
parameter_list|)
block|{
if|if
condition|(
name|state
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|NORMS_FIELD
argument_list|)
condition|)
block|{
return|return
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|state
operator|.
name|getBoost
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|in
operator|.
name|computeNorm
argument_list|(
name|state
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|computeWeight
specifier|public
name|SimWeight
name|computeWeight
parameter_list|(
name|float
name|queryBoost
parameter_list|,
name|CollectionStatistics
name|collectionStats
parameter_list|,
name|TermStatistics
modifier|...
name|termStats
parameter_list|)
block|{
return|return
name|in
operator|.
name|computeWeight
argument_list|(
name|queryBoost
argument_list|,
name|collectionStats
argument_list|,
name|termStats
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|simScorer
specifier|public
name|SimScorer
name|simScorer
parameter_list|(
name|SimWeight
name|weight
parameter_list|,
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|simScorer
argument_list|(
name|weight
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
DECL|class|PositionsTokenStream
specifier|static
specifier|final
class|class
name|PositionsTokenStream
extends|extends
name|TokenStream
block|{
DECL|field|term
specifier|private
specifier|final
name|CharTermAttribute
name|term
decl_stmt|;
DECL|field|payload
specifier|private
specifier|final
name|PayloadAttribute
name|payload
decl_stmt|;
DECL|field|offset
specifier|private
specifier|final
name|OffsetAttribute
name|offset
decl_stmt|;
DECL|field|pos
DECL|field|off
specifier|private
name|int
name|pos
decl_stmt|,
name|off
decl_stmt|;
DECL|method|PositionsTokenStream
specifier|public
name|PositionsTokenStream
parameter_list|()
block|{
name|term
operator|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|payload
operator|=
name|addAttribute
argument_list|(
name|PayloadAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|offset
operator|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|clearAttributes
argument_list|()
expr_stmt|;
name|term
operator|.
name|append
argument_list|(
name|DOC_POSITIONS_TERM
argument_list|)
expr_stmt|;
name|payload
operator|.
name|setPayload
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|pos
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|.
name|setOffset
argument_list|(
name|off
argument_list|,
name|off
argument_list|)
expr_stmt|;
operator|--
name|pos
expr_stmt|;
operator|++
name|off
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|setId
name|void
name|setId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|pos
operator|=
name|id
operator|/
literal|10
operator|+
literal|1
expr_stmt|;
name|off
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|field|ID_FIELD
specifier|protected
specifier|static
specifier|final
name|String
name|ID_FIELD
init|=
literal|"id"
decl_stmt|;
DECL|field|DOCS_ENUM_FIELD
specifier|protected
specifier|static
specifier|final
name|String
name|DOCS_ENUM_FIELD
init|=
literal|"docs"
decl_stmt|;
DECL|field|DOCS_ENUM_TERM
specifier|protected
specifier|static
specifier|final
name|String
name|DOCS_ENUM_TERM
init|=
literal|"$all$"
decl_stmt|;
DECL|field|DOC_POSITIONS_FIELD
specifier|protected
specifier|static
specifier|final
name|String
name|DOC_POSITIONS_FIELD
init|=
literal|"positions"
decl_stmt|;
DECL|field|DOC_POSITIONS_TERM
specifier|protected
specifier|static
specifier|final
name|String
name|DOC_POSITIONS_TERM
init|=
literal|"$all$"
decl_stmt|;
DECL|field|NUMERIC_DV_FIELD
specifier|protected
specifier|static
specifier|final
name|String
name|NUMERIC_DV_FIELD
init|=
literal|"numeric"
decl_stmt|;
DECL|field|SORTED_NUMERIC_DV_FIELD
specifier|protected
specifier|static
specifier|final
name|String
name|SORTED_NUMERIC_DV_FIELD
init|=
literal|"sorted_numeric"
decl_stmt|;
DECL|field|NORMS_FIELD
specifier|protected
specifier|static
specifier|final
name|String
name|NORMS_FIELD
init|=
literal|"norm"
decl_stmt|;
DECL|field|BINARY_DV_FIELD
specifier|protected
specifier|static
specifier|final
name|String
name|BINARY_DV_FIELD
init|=
literal|"binary"
decl_stmt|;
DECL|field|SORTED_DV_FIELD
specifier|protected
specifier|static
specifier|final
name|String
name|SORTED_DV_FIELD
init|=
literal|"sorted"
decl_stmt|;
DECL|field|SORTED_SET_DV_FIELD
specifier|protected
specifier|static
specifier|final
name|String
name|SORTED_SET_DV_FIELD
init|=
literal|"sorted_set"
decl_stmt|;
DECL|field|TERM_VECTORS_FIELD
specifier|protected
specifier|static
specifier|final
name|String
name|TERM_VECTORS_FIELD
init|=
literal|"term_vectors"
decl_stmt|;
DECL|field|TERM_VECTORS_TYPE
specifier|private
specifier|static
specifier|final
name|FieldType
name|TERM_VECTORS_TYPE
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
static|static
block|{
name|TERM_VECTORS_TYPE
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TERM_VECTORS_TYPE
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
DECL|field|POSITIONS_TYPE
specifier|private
specifier|static
specifier|final
name|FieldType
name|POSITIONS_TYPE
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
static|static
block|{
name|POSITIONS_TYPE
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
expr_stmt|;
name|POSITIONS_TYPE
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
DECL|field|dir
specifier|protected
specifier|static
name|Directory
name|dir
decl_stmt|;
DECL|field|unsortedReader
specifier|protected
specifier|static
name|LeafReader
name|unsortedReader
decl_stmt|;
DECL|field|sortedReader
specifier|protected
specifier|static
name|LeafReader
name|sortedReader
decl_stmt|;
DECL|field|sortedValues
specifier|protected
specifier|static
name|Integer
index|[]
name|sortedValues
decl_stmt|;
DECL|method|doc
specifier|private
specifier|static
name|Document
name|doc
parameter_list|(
specifier|final
name|int
name|id
parameter_list|,
name|PositionsTokenStream
name|positions
parameter_list|)
block|{
specifier|final
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
name|ID_FIELD
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
name|DOCS_ENUM_FIELD
argument_list|,
name|DOCS_ENUM_TERM
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|positions
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|DOC_POSITIONS_FIELD
argument_list|,
name|positions
argument_list|,
name|POSITIONS_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
name|NUMERIC_DV_FIELD
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|TextField
name|norms
init|=
operator|new
name|TextField
argument_list|(
name|NORMS_FIELD
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|norms
operator|.
name|setBoost
argument_list|(
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|norms
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryDocValuesField
argument_list|(
name|BINARY_DV_FIELD
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|SORTED_DV_FIELD
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
name|SORTED_SET_DV_FIELD
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
name|SORTED_SET_DV_FIELD
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|id
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
name|SORTED_NUMERIC_DV_FIELD
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
name|SORTED_NUMERIC_DV_FIELD
argument_list|,
name|id
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|TERM_VECTORS_FIELD
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
name|TERM_VECTORS_TYPE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
comment|/** Creates an unsorted index; subclasses then sort this index and open sortedReader. */
DECL|method|createIndex
specifier|private
specifier|static
name|void
name|createIndex
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|int
name|numDocs
parameter_list|,
name|Random
name|random
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
operator|*
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// shuffle them for indexing
name|Collections
operator|.
name|shuffle
argument_list|(
name|ids
argument_list|,
name|random
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Shuffled IDs for indexing: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|ids
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PositionsTokenStream
name|positions
init|=
operator|new
name|PositionsTokenStream
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// create some segments
name|conf
operator|.
name|setSimilarity
argument_list|(
operator|new
name|NormsSimilarity
argument_list|(
name|conf
operator|.
name|getSimilarity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// for testing norms field
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setDoRandomForceMerge
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|id
range|:
name|ids
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|(
name|id
argument_list|,
name|positions
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// delete some documents
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
for|for
control|(
name|Integer
name|id
range|:
name|ids
control|)
block|{
if|if
condition|(
name|random
operator|.
name|nextDouble
argument_list|()
operator|<
literal|0.2
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"delete doc_id "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
name|ID_FIELD
argument_list|,
name|id
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|beforeClassSorterTestBase
specifier|public
specifier|static
name|void
name|beforeClassSorterTestBase
parameter_list|()
throws|throws
name|Exception
block|{
name|dir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|createIndex
argument_list|(
name|dir
argument_list|,
name|numDocs
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|unsortedReader
operator|=
name|SlowCompositeReaderWrapper
operator|.
name|wrap
argument_list|(
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClassSorterTestBase
specifier|public
specifier|static
name|void
name|afterClassSorterTestBase
parameter_list|()
throws|throws
name|Exception
block|{
name|unsortedReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|sortedReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBinaryDocValuesField
specifier|public
name|void
name|testBinaryDocValuesField
parameter_list|()
throws|throws
name|Exception
block|{
name|BinaryDocValues
name|dv
init|=
name|sortedReader
operator|.
name|getBinaryDocValues
argument_list|(
name|BINARY_DV_FIELD
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortedReader
operator|.
name|maxDoc
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|BytesRef
name|bytes
init|=
name|dv
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect binary DocValues for doc "
operator|+
name|i
argument_list|,
name|sortedValues
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|bytes
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDocsAndPositionsEnum
specifier|public
name|void
name|testDocsAndPositionsEnum
parameter_list|()
throws|throws
name|Exception
block|{
name|TermsEnum
name|termsEnum
init|=
name|sortedReader
operator|.
name|terms
argument_list|(
name|DOC_POSITIONS_FIELD
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|SeekStatus
operator|.
name|FOUND
argument_list|,
name|termsEnum
operator|.
name|seekCeil
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|DOC_POSITIONS_TERM
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PostingsEnum
name|sortedPositions
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|PostingsEnum
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|int
name|doc
decl_stmt|;
comment|// test nextDoc()
while|while
condition|(
operator|(
name|doc
operator|=
name|sortedPositions
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|int
name|freq
init|=
name|sortedPositions
operator|.
name|freq
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect freq for doc="
operator|+
name|doc
argument_list|,
name|sortedValues
index|[
name|doc
index|]
operator|.
name|intValue
argument_list|()
operator|/
literal|10
operator|+
literal|1
argument_list|,
name|freq
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|freq
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"incorrect position for doc="
operator|+
name|doc
argument_list|,
name|i
argument_list|,
name|sortedPositions
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect startOffset for doc="
operator|+
name|doc
argument_list|,
name|i
argument_list|,
name|sortedPositions
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect endOffset for doc="
operator|+
name|doc
argument_list|,
name|i
argument_list|,
name|sortedPositions
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect payload for doc="
operator|+
name|doc
argument_list|,
name|freq
operator|-
name|i
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|sortedPositions
operator|.
name|getPayload
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// test advance()
specifier|final
name|PostingsEnum
name|reuse
init|=
name|sortedPositions
decl_stmt|;
name|sortedPositions
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|reuse
argument_list|,
name|PostingsEnum
operator|.
name|ALL
argument_list|)
expr_stmt|;
if|if
condition|(
name|sortedPositions
operator|instanceof
name|SortingDocsEnum
condition|)
block|{
name|assertTrue
argument_list|(
operator|(
operator|(
name|SortingDocsEnum
operator|)
name|sortedPositions
operator|)
operator|.
name|reused
argument_list|(
name|reuse
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure reuse worked
block|}
name|doc
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|doc
operator|=
name|sortedPositions
operator|.
name|advance
argument_list|(
name|doc
operator|+
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|int
name|freq
init|=
name|sortedPositions
operator|.
name|freq
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect freq for doc="
operator|+
name|doc
argument_list|,
name|sortedValues
index|[
name|doc
index|]
operator|.
name|intValue
argument_list|()
operator|/
literal|10
operator|+
literal|1
argument_list|,
name|freq
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|freq
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"incorrect position for doc="
operator|+
name|doc
argument_list|,
name|i
argument_list|,
name|sortedPositions
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect startOffset for doc="
operator|+
name|doc
argument_list|,
name|i
argument_list|,
name|sortedPositions
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect endOffset for doc="
operator|+
name|doc
argument_list|,
name|i
argument_list|,
name|sortedPositions
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect payload for doc="
operator|+
name|doc
argument_list|,
name|freq
operator|-
name|i
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|sortedPositions
operator|.
name|getPayload
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|randomLiveDocs
name|Bits
name|randomLiveDocs
parameter_list|(
name|int
name|maxDoc
parameter_list|)
block|{
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|Bits
operator|.
name|MatchNoBits
argument_list|(
name|maxDoc
argument_list|)
return|;
block|}
block|}
specifier|final
name|FixedBitSet
name|bits
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
specifier|final
name|int
name|bitsSet
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|maxDoc
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bitsSet
condition|;
operator|++
name|i
control|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|index
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bits
operator|.
name|get
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|bits
operator|.
name|set
argument_list|(
name|index
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|bits
return|;
block|}
annotation|@
name|Test
DECL|method|testDocsEnum
specifier|public
name|void
name|testDocsEnum
parameter_list|()
throws|throws
name|Exception
block|{
name|TermsEnum
name|termsEnum
init|=
name|sortedReader
operator|.
name|terms
argument_list|(
name|DOCS_ENUM_FIELD
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|SeekStatus
operator|.
name|FOUND
argument_list|,
name|termsEnum
operator|.
name|seekCeil
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|DOCS_ENUM_TERM
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PostingsEnum
name|docs
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|int
name|doc
decl_stmt|;
name|int
name|prev
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|doc
operator|=
name|docs
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|assertEquals
argument_list|(
literal|"incorrect value; doc "
operator|+
name|doc
argument_list|,
name|sortedValues
index|[
name|doc
index|]
operator|.
name|intValue
argument_list|()
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|sortedReader
operator|.
name|document
argument_list|(
name|doc
argument_list|)
operator|.
name|get
argument_list|(
name|ID_FIELD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PostingsEnum
name|reuse
init|=
name|docs
decl_stmt|;
name|docs
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|reuse
argument_list|)
expr_stmt|;
if|if
condition|(
name|docs
operator|instanceof
name|SortingDocsEnum
condition|)
block|{
name|assertTrue
argument_list|(
operator|(
operator|(
name|SortingDocsEnum
operator|)
name|docs
operator|)
operator|.
name|reused
argument_list|(
name|reuse
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure reuse worked
block|}
name|doc
operator|=
operator|-
literal|1
expr_stmt|;
name|prev
operator|=
operator|-
literal|1
expr_stmt|;
while|while
condition|(
operator|(
name|doc
operator|=
name|docs
operator|.
name|advance
argument_list|(
name|doc
operator|+
literal|1
argument_list|)
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|assertEquals
argument_list|(
literal|"incorrect value; doc "
operator|+
name|doc
argument_list|,
name|sortedValues
index|[
name|doc
index|]
operator|.
name|intValue
argument_list|()
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|sortedReader
operator|.
name|document
argument_list|(
name|doc
argument_list|)
operator|.
name|get
argument_list|(
name|ID_FIELD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNormValues
specifier|public
name|void
name|testNormValues
parameter_list|()
throws|throws
name|Exception
block|{
name|NumericDocValues
name|dv
init|=
name|sortedReader
operator|.
name|getNormValues
argument_list|(
name|NORMS_FIELD
argument_list|)
decl_stmt|;
name|int
name|maxDoc
init|=
name|sortedReader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"incorrect norm value for doc "
operator|+
name|i
argument_list|,
name|sortedValues
index|[
name|i
index|]
operator|.
name|intValue
argument_list|()
argument_list|,
name|dv
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNumericDocValuesField
specifier|public
name|void
name|testNumericDocValuesField
parameter_list|()
throws|throws
name|Exception
block|{
name|NumericDocValues
name|dv
init|=
name|sortedReader
operator|.
name|getNumericDocValues
argument_list|(
name|NUMERIC_DV_FIELD
argument_list|)
decl_stmt|;
name|int
name|maxDoc
init|=
name|sortedReader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"incorrect numeric DocValues for doc "
operator|+
name|i
argument_list|,
name|sortedValues
index|[
name|i
index|]
operator|.
name|intValue
argument_list|()
argument_list|,
name|dv
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSortedDocValuesField
specifier|public
name|void
name|testSortedDocValuesField
parameter_list|()
throws|throws
name|Exception
block|{
name|SortedDocValues
name|dv
init|=
name|sortedReader
operator|.
name|getSortedDocValues
argument_list|(
name|SORTED_DV_FIELD
argument_list|)
decl_stmt|;
name|int
name|maxDoc
init|=
name|sortedReader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|BytesRef
name|bytes
init|=
name|dv
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect sorted DocValues for doc "
operator|+
name|i
argument_list|,
name|sortedValues
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|bytes
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSortedSetDocValuesField
specifier|public
name|void
name|testSortedSetDocValuesField
parameter_list|()
throws|throws
name|Exception
block|{
name|SortedSetDocValues
name|dv
init|=
name|sortedReader
operator|.
name|getSortedSetDocValues
argument_list|(
name|SORTED_SET_DV_FIELD
argument_list|)
decl_stmt|;
name|int
name|maxDoc
init|=
name|sortedReader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
name|i
operator|++
control|)
block|{
name|dv
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|BytesRef
name|bytes
init|=
name|dv
operator|.
name|lookupOrd
argument_list|(
name|dv
operator|.
name|nextOrd
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|sortedValues
index|[
name|i
index|]
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect sorted-set DocValues for doc "
operator|+
name|i
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|bytes
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|bytes
operator|=
name|dv
operator|.
name|lookupOrd
argument_list|(
name|dv
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect sorted-set DocValues for doc "
operator|+
name|i
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
operator|+
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|bytes
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
argument_list|,
name|dv
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSortedNumericDocValuesField
specifier|public
name|void
name|testSortedNumericDocValuesField
parameter_list|()
throws|throws
name|Exception
block|{
name|SortedNumericDocValues
name|dv
init|=
name|sortedReader
operator|.
name|getSortedNumericDocValues
argument_list|(
name|SORTED_NUMERIC_DV_FIELD
argument_list|)
decl_stmt|;
name|int
name|maxDoc
init|=
name|sortedReader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
name|i
operator|++
control|)
block|{
name|dv
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dv
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|value
init|=
name|sortedValues
index|[
name|i
index|]
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect sorted-numeric DocValues for doc "
operator|+
name|i
argument_list|,
name|value
argument_list|,
name|dv
operator|.
name|valueAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect sorted-numeric DocValues for doc "
operator|+
name|i
argument_list|,
name|value
operator|+
literal|1
argument_list|,
name|dv
operator|.
name|valueAt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTermVectors
specifier|public
name|void
name|testTermVectors
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|maxDoc
init|=
name|sortedReader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
name|i
operator|++
control|)
block|{
name|Terms
name|terms
init|=
name|sortedReader
operator|.
name|getTermVector
argument_list|(
name|i
argument_list|,
name|TERM_VECTORS_FIELD
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"term vectors not found for doc "
operator|+
name|i
operator|+
literal|" field ["
operator|+
name|TERM_VECTORS_FIELD
operator|+
literal|"]"
argument_list|,
name|terms
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect term vector for doc "
operator|+
name|i
argument_list|,
name|sortedValues
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|terms
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
