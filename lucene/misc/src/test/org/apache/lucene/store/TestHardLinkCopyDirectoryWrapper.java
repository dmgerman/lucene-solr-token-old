begin_unit
begin_package
DECL|package|org.apache.lucene.store
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_class
DECL|class|TestHardLinkCopyDirectoryWrapper
specifier|public
class|class
name|TestHardLinkCopyDirectoryWrapper
extends|extends
name|BaseDirectoryTestCase
block|{
annotation|@
name|Override
DECL|method|getDirectory
specifier|protected
name|Directory
name|getDirectory
parameter_list|(
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
name|open
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|newFSDirectory
argument_list|(
name|file
argument_list|)
else|:
name|newDirectory
argument_list|()
decl_stmt|;
return|return
operator|new
name|HardlinkCopyDirectoryWrapper
argument_list|(
name|open
argument_list|)
return|;
block|}
comment|/**    * Tests that we use hardlinks if possible on Directory#copyFrom    */
DECL|method|testCopyHardLinks
specifier|public
name|void
name|testCopyHardLinks
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|tempDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Path
name|dir_1
init|=
name|tempDir
operator|.
name|resolve
argument_list|(
literal|"dir_1"
argument_list|)
decl_stmt|;
name|Path
name|dir_2
init|=
name|tempDir
operator|.
name|resolve
argument_list|(
literal|"dir_2"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|dir_1
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|dir_2
argument_list|)
expr_stmt|;
name|Directory
name|luceneDir_1
init|=
name|newFSDirectory
argument_list|(
name|dir_1
argument_list|)
decl_stmt|;
name|Directory
name|luceneDir_2
init|=
name|newFSDirectory
argument_list|(
name|dir_2
argument_list|)
decl_stmt|;
try|try
block|{
try|try
init|(
name|IndexOutput
name|output
init|=
name|luceneDir_1
operator|.
name|createOutput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|CodecUtil
operator|.
name|writeHeader
argument_list|(
name|output
argument_list|,
literal|"foo"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeString
argument_list|(
literal|"hey man, nice shot!"
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Files
operator|.
name|createLink
argument_list|(
name|tempDir
operator|.
name|resolve
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|dir_1
operator|.
name|resolve
argument_list|(
literal|"foo.bar"
argument_list|)
argument_list|)
expr_stmt|;
name|BasicFileAttributes
name|destAttr
init|=
name|Files
operator|.
name|readAttributes
argument_list|(
name|tempDir
operator|.
name|resolve
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|BasicFileAttributes
operator|.
name|class
argument_list|)
decl_stmt|;
name|BasicFileAttributes
name|sourceAttr
init|=
name|Files
operator|.
name|readAttributes
argument_list|(
name|dir_1
operator|.
name|resolve
argument_list|(
literal|"foo.bar"
argument_list|)
argument_list|,
name|BasicFileAttributes
operator|.
name|class
argument_list|)
decl_stmt|;
name|assumeTrue
argument_list|(
literal|"hardlinks are not supported"
argument_list|,
name|destAttr
operator|.
name|fileKey
argument_list|()
operator|!=
literal|null
operator|&&
name|destAttr
operator|.
name|fileKey
argument_list|()
operator|.
name|equals
argument_list|(
name|sourceAttr
operator|.
name|fileKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|ex
parameter_list|)
block|{
name|assumeFalse
argument_list|(
literal|"hardlinks are not supported"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|HardlinkCopyDirectoryWrapper
name|wrapper
init|=
operator|new
name|HardlinkCopyDirectoryWrapper
argument_list|(
name|luceneDir_2
argument_list|)
decl_stmt|;
name|wrapper
operator|.
name|copyFrom
argument_list|(
name|luceneDir_1
argument_list|,
literal|"foo.bar"
argument_list|,
literal|"bar.foo"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|dir_2
operator|.
name|resolve
argument_list|(
literal|"bar.foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|BasicFileAttributes
name|destAttr
init|=
name|Files
operator|.
name|readAttributes
argument_list|(
name|dir_2
operator|.
name|resolve
argument_list|(
literal|"bar.foo"
argument_list|)
argument_list|,
name|BasicFileAttributes
operator|.
name|class
argument_list|)
decl_stmt|;
name|BasicFileAttributes
name|sourceAttr
init|=
name|Files
operator|.
name|readAttributes
argument_list|(
name|dir_1
operator|.
name|resolve
argument_list|(
literal|"foo.bar"
argument_list|)
argument_list|,
name|BasicFileAttributes
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|destAttr
operator|.
name|fileKey
argument_list|()
argument_list|,
name|sourceAttr
operator|.
name|fileKey
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|ChecksumIndexInput
name|indexInput
init|=
name|wrapper
operator|.
name|openChecksumInput
argument_list|(
literal|"bar.foo"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|indexInput
argument_list|,
literal|"foo"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hey man, nice shot!"
argument_list|,
name|indexInput
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|checkFooter
argument_list|(
name|indexInput
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// close them in a finally block we might run into an assume here
name|IOUtils
operator|.
name|close
argument_list|(
name|luceneDir_1
argument_list|,
name|luceneDir_2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
