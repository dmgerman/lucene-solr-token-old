begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.index.memory
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|memory
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|LongStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockPayloadAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|BinaryDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|BinaryPoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DoublePoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FloatPoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|IntPoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongPoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedNumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedSetDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValuesType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInvertState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|BM25Similarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|ClassicSimilarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|internal
operator|.
name|matchers
operator|.
name|StringContains
operator|.
name|containsString
import|;
end_import
begin_class
DECL|class|TestMemoryIndex
specifier|public
class|class
name|TestMemoryIndex
extends|extends
name|LuceneTestCase
block|{
DECL|field|analyzer
specifier|private
name|MockAnalyzer
name|analyzer
decl_stmt|;
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|analyzer
operator|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|setEnableChecks
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// MemoryIndex can close a TokenStream on init error
block|}
annotation|@
name|Test
DECL|method|testFreezeAPI
specifier|public
name|void
name|testFreezeAPI
parameter_list|()
block|{
name|MemoryIndex
name|mi
init|=
operator|new
name|MemoryIndex
argument_list|()
decl_stmt|;
name|mi
operator|.
name|addField
argument_list|(
literal|"f1"
argument_list|,
literal|"some text"
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mi
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|)
argument_list|,
name|not
argument_list|(
name|is
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mi
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"f1"
argument_list|,
literal|"some"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|not
argument_list|(
name|is
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// check we can add a new field after searching
name|mi
operator|.
name|addField
argument_list|(
literal|"f2"
argument_list|,
literal|"some more text"
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mi
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"f2"
argument_list|,
literal|"some"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|not
argument_list|(
name|is
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// freeze!
name|mi
operator|.
name|freeze
argument_list|()
expr_stmt|;
name|RuntimeException
name|expected
init|=
name|expectThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|mi
operator|.
name|addField
argument_list|(
literal|"f3"
argument_list|,
literal|"and yet more"
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"frozen"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
name|expectThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|mi
operator|.
name|setSimilarity
argument_list|(
operator|new
name|BM25Similarity
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"frozen"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mi
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"f1"
argument_list|,
literal|"some"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|not
argument_list|(
name|is
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mi
operator|.
name|reset
argument_list|()
expr_stmt|;
name|mi
operator|.
name|addField
argument_list|(
literal|"f1"
argument_list|,
literal|"wibble"
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mi
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"f1"
argument_list|,
literal|"some"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mi
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"f1"
argument_list|,
literal|"wibble"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|not
argument_list|(
name|is
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// check we can set the Similarity again
name|mi
operator|.
name|setSimilarity
argument_list|(
operator|new
name|ClassicSimilarity
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSeekByTermOrd
specifier|public
name|void
name|testSeekByTermOrd
parameter_list|()
throws|throws
name|IOException
block|{
name|MemoryIndex
name|mi
init|=
operator|new
name|MemoryIndex
argument_list|()
decl_stmt|;
name|mi
operator|.
name|addField
argument_list|(
literal|"field"
argument_list|,
literal|"some terms be here"
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|mi
operator|.
name|createSearcher
argument_list|()
decl_stmt|;
name|LeafReader
name|reader
init|=
operator|(
name|LeafReader
operator|)
name|searcher
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
name|TermsEnum
name|terms
init|=
name|reader
operator|.
name|fields
argument_list|()
operator|.
name|terms
argument_list|(
literal|"field"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|terms
operator|.
name|seekExact
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"be"
argument_list|,
name|terms
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|checkReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
DECL|method|testReaderConsistency
specifier|public
name|void
name|testReaderConsistency
parameter_list|()
throws|throws
name|IOException
block|{
name|Analyzer
name|analyzer
init|=
operator|new
name|MockPayloadAnalyzer
argument_list|()
decl_stmt|;
comment|// defaults
name|MemoryIndex
name|mi
init|=
operator|new
name|MemoryIndex
argument_list|()
decl_stmt|;
name|mi
operator|.
name|addField
argument_list|(
literal|"field"
argument_list|,
literal|"some terms be here"
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|checkReader
argument_list|(
name|mi
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
comment|// all combinations of offsets/payloads options
name|mi
operator|=
operator|new
name|MemoryIndex
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mi
operator|.
name|addField
argument_list|(
literal|"field"
argument_list|,
literal|"some terms be here"
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|checkReader
argument_list|(
name|mi
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|=
operator|new
name|MemoryIndex
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mi
operator|.
name|addField
argument_list|(
literal|"field"
argument_list|,
literal|"some terms be here"
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|checkReader
argument_list|(
name|mi
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|=
operator|new
name|MemoryIndex
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mi
operator|.
name|addField
argument_list|(
literal|"field"
argument_list|,
literal|"some terms be here"
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|checkReader
argument_list|(
name|mi
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|=
operator|new
name|MemoryIndex
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mi
operator|.
name|addField
argument_list|(
literal|"field"
argument_list|,
literal|"some terms be here"
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|checkReader
argument_list|(
name|mi
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimilarities
specifier|public
name|void
name|testSimilarities
parameter_list|()
throws|throws
name|IOException
block|{
name|MemoryIndex
name|mi
init|=
operator|new
name|MemoryIndex
argument_list|()
decl_stmt|;
name|mi
operator|.
name|addField
argument_list|(
literal|"f1"
argument_list|,
literal|"a long text field that contains many many terms"
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|mi
operator|.
name|createSearcher
argument_list|()
decl_stmt|;
name|LeafReader
name|reader
init|=
operator|(
name|LeafReader
operator|)
name|searcher
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
name|float
name|n1
init|=
name|reader
operator|.
name|getNormValues
argument_list|(
literal|"f1"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Norms are re-computed when we change the Similarity
name|mi
operator|.
name|setSimilarity
argument_list|(
operator|new
name|ClassicSimilarity
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|float
name|lengthNorm
parameter_list|(
name|FieldInvertState
name|state
parameter_list|)
block|{
return|return
literal|74
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|float
name|n2
init|=
name|reader
operator|.
name|getNormValues
argument_list|(
literal|"f1"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|n1
operator|!=
name|n2
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|checkReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBuildFromDocument
specifier|public
name|void
name|testBuildFromDocument
parameter_list|()
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"field1"
argument_list|,
literal|"some text"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"field1"
argument_list|,
literal|"some more text"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"field2"
argument_list|,
literal|"untokenized text"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|setPositionIncrementGap
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|MemoryIndex
name|mi
init|=
name|MemoryIndex
operator|.
name|fromDocument
argument_list|(
name|doc
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|mi
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field1"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|not
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mi
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field2"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mi
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field2"
argument_list|,
literal|"untokenized text"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|not
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mi
operator|.
name|search
argument_list|(
operator|new
name|PhraseQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"some"
argument_list|,
literal|"more"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
argument_list|,
name|not
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mi
operator|.
name|search
argument_list|(
operator|new
name|PhraseQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"some"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
argument_list|,
name|not
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mi
operator|.
name|search
argument_list|(
operator|new
name|PhraseQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"text"
argument_list|,
literal|"some"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocValues
specifier|public
name|void
name|testDocValues
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"numeric"
argument_list|,
literal|29L
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"sorted_numeric"
argument_list|,
literal|33L
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"sorted_numeric"
argument_list|,
literal|32L
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"sorted_numeric"
argument_list|,
literal|32L
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"sorted_numeric"
argument_list|,
literal|31L
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"sorted_numeric"
argument_list|,
literal|30L
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryDocValuesField
argument_list|(
literal|"binary"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"sorted"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"b"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
literal|"sorted_set"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"f"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
literal|"sorted_set"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"d"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
literal|"sorted_set"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"d"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
literal|"sorted_set"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"c"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|MemoryIndex
name|mi
init|=
name|MemoryIndex
operator|.
name|fromDocument
argument_list|(
name|doc
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
name|LeafReader
name|leafReader
init|=
name|mi
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
decl_stmt|;
name|NumericDocValues
name|numericDocValues
init|=
name|leafReader
operator|.
name|getNumericDocValues
argument_list|(
literal|"numeric"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|29L
argument_list|,
name|numericDocValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|SortedNumericDocValues
name|sortedNumericDocValues
init|=
name|leafReader
operator|.
name|getSortedNumericDocValues
argument_list|(
literal|"sorted_numeric"
argument_list|)
decl_stmt|;
name|sortedNumericDocValues
operator|.
name|setDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|sortedNumericDocValues
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30L
argument_list|,
name|sortedNumericDocValues
operator|.
name|valueAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|31L
argument_list|,
name|sortedNumericDocValues
operator|.
name|valueAt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|32L
argument_list|,
name|sortedNumericDocValues
operator|.
name|valueAt
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|32L
argument_list|,
name|sortedNumericDocValues
operator|.
name|valueAt
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|33L
argument_list|,
name|sortedNumericDocValues
operator|.
name|valueAt
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|BinaryDocValues
name|binaryDocValues
init|=
name|leafReader
operator|.
name|getBinaryDocValues
argument_list|(
literal|"binary"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|binaryDocValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|SortedDocValues
name|sortedDocValues
init|=
name|leafReader
operator|.
name|getSortedDocValues
argument_list|(
literal|"sorted"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|sortedDocValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|sortedDocValues
operator|.
name|getOrd
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|sortedDocValues
operator|.
name|lookupOrd
argument_list|(
literal|0
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|SortedSetDocValues
name|sortedSetDocValues
init|=
name|leafReader
operator|.
name|getSortedSetDocValues
argument_list|(
literal|"sorted_set"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|sortedSetDocValues
operator|.
name|getValueCount
argument_list|()
argument_list|)
expr_stmt|;
name|sortedSetDocValues
operator|.
name|setDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|sortedSetDocValues
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|sortedSetDocValues
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|sortedSetDocValues
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
argument_list|,
name|sortedSetDocValues
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|sortedSetDocValues
operator|.
name|lookupOrd
argument_list|(
literal|0L
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|sortedSetDocValues
operator|.
name|lookupOrd
argument_list|(
literal|1L
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f"
argument_list|,
name|sortedSetDocValues
operator|.
name|lookupOrd
argument_list|(
literal|2L
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidDocValuesUsage
specifier|public
name|void
name|testInvalidDocValuesUsage
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
literal|29L
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryDocValuesField
argument_list|(
literal|"field"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"30"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|MemoryIndex
operator|.
name|fromDocument
argument_list|(
name|doc
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Can't add [BINARY] doc values field [field], because [NUMERIC] doc values field already exists"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
literal|29L
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
literal|30L
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|MemoryIndex
operator|.
name|fromDocument
argument_list|(
name|doc
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Only one value per field allowed for [NUMERIC] doc values field [field]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"field"
argument_list|,
literal|"a b"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryDocValuesField
argument_list|(
literal|"field"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryDocValuesField
argument_list|(
literal|"field"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"b"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|MemoryIndex
operator|.
name|fromDocument
argument_list|(
name|doc
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Only one value per field allowed for [BINARY] doc values field [field]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"field"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"field"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"b"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"field"
argument_list|,
literal|"a b"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|MemoryIndex
operator|.
name|fromDocument
argument_list|(
name|doc
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Only one value per field allowed for [SORTED] doc values field [field]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDocValuesDoNotAffectBoostPositionsOrOffset
specifier|public
name|void
name|testDocValuesDoNotAffectBoostPositionsOrOffset
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryDocValuesField
argument_list|(
literal|"text"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"quick brown fox"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"text"
argument_list|,
literal|"quick brown fox"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|MemoryIndex
name|mi
init|=
name|MemoryIndex
operator|.
name|fromDocument
argument_list|(
name|doc
argument_list|,
name|analyzer
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LeafReader
name|leafReader
init|=
name|mi
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
decl_stmt|;
name|TermsEnum
name|tenum
init|=
name|leafReader
operator|.
name|terms
argument_list|(
literal|"text"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"brown"
argument_list|,
name|tenum
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|PostingsEnum
name|penum
init|=
name|tenum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|PostingsEnum
operator|.
name|OFFSETS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|penum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|penum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|penum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|penum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|penum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fox"
argument_list|,
name|tenum
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|penum
operator|=
name|tenum
operator|.
name|postings
argument_list|(
name|penum
argument_list|,
name|PostingsEnum
operator|.
name|OFFSETS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|penum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|penum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|penum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|penum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|penum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"quick"
argument_list|,
name|tenum
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|penum
operator|=
name|tenum
operator|.
name|postings
argument_list|(
name|penum
argument_list|,
name|PostingsEnum
operator|.
name|OFFSETS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|penum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|penum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|penum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|penum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|penum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|BinaryDocValues
name|binaryDocValues
init|=
name|leafReader
operator|.
name|getBinaryDocValues
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"quick brown fox"
argument_list|,
name|binaryDocValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPointValues
specifier|public
name|void
name|testPointValues
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Function
argument_list|<
name|Long
argument_list|,
name|IndexableField
argument_list|>
argument_list|>
name|fieldFunctions
init|=
name|Arrays
operator|.
name|asList
argument_list|(
parameter_list|(
name|t
parameter_list|)
lambda|->
operator|new
name|IntPoint
argument_list|(
literal|"number"
argument_list|,
name|t
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|t
parameter_list|)
lambda|->
operator|new
name|LongPoint
argument_list|(
literal|"number"
argument_list|,
name|t
argument_list|)
argument_list|,
parameter_list|(
name|t
parameter_list|)
lambda|->
operator|new
name|FloatPoint
argument_list|(
literal|"number"
argument_list|,
name|t
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|t
parameter_list|)
lambda|->
operator|new
name|DoublePoint
argument_list|(
literal|"number"
argument_list|,
name|t
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Function
argument_list|<
name|Long
argument_list|,
name|Query
argument_list|>
argument_list|>
name|exactQueryFunctions
init|=
name|Arrays
operator|.
name|asList
argument_list|(
parameter_list|(
name|t
parameter_list|)
lambda|->
name|IntPoint
operator|.
name|newExactQuery
argument_list|(
literal|"number"
argument_list|,
name|t
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|t
parameter_list|)
lambda|->
name|LongPoint
operator|.
name|newExactQuery
argument_list|(
literal|"number"
argument_list|,
name|t
argument_list|)
argument_list|,
parameter_list|(
name|t
parameter_list|)
lambda|->
name|FloatPoint
operator|.
name|newExactQuery
argument_list|(
literal|"number"
argument_list|,
name|t
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|t
parameter_list|)
lambda|->
name|DoublePoint
operator|.
name|newExactQuery
argument_list|(
literal|"number"
argument_list|,
name|t
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Function
argument_list|<
name|long
index|[]
argument_list|,
name|Query
argument_list|>
argument_list|>
name|setQueryFunctions
init|=
name|Arrays
operator|.
name|asList
argument_list|(
parameter_list|(
name|t
parameter_list|)
lambda|->
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"number"
argument_list|,
name|LongStream
operator|.
name|of
argument_list|(
name|t
argument_list|)
operator|.
name|mapToInt
argument_list|(
name|value
lambda|->
operator|(
name|int
operator|)
name|value
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|t
parameter_list|)
lambda|->
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"number"
argument_list|,
name|t
argument_list|)
argument_list|,
parameter_list|(
name|t
parameter_list|)
lambda|->
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
literal|"number"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|LongStream
operator|.
name|of
argument_list|(
name|t
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|value
lambda|->
operator|(
name|float
operator|)
name|value
argument_list|)
operator|.
name|toArray
argument_list|(
name|Float
index|[]
operator|::
operator|new
argument_list|)
argument_list|)
argument_list|)
argument_list|,
parameter_list|(
name|t
parameter_list|)
lambda|->
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
literal|"number"
argument_list|,
name|LongStream
operator|.
name|of
argument_list|(
name|t
argument_list|)
operator|.
name|mapToDouble
argument_list|(
name|value
lambda|->
operator|(
name|double
operator|)
name|value
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BiFunction
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|Query
argument_list|>
argument_list|>
name|rangeQueryFunctions
init|=
name|Arrays
operator|.
name|asList
argument_list|(
parameter_list|(
name|t
parameter_list|,
name|u
parameter_list|)
lambda|->
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"number"
argument_list|,
name|t
operator|.
name|intValue
argument_list|()
argument_list|,
name|u
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|t
parameter_list|,
name|u
parameter_list|)
lambda|->
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"number"
argument_list|,
name|t
argument_list|,
name|u
argument_list|)
argument_list|,
parameter_list|(
name|t
parameter_list|,
name|u
parameter_list|)
lambda|->
name|FloatPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"number"
argument_list|,
name|t
operator|.
name|floatValue
argument_list|()
argument_list|,
name|u
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|t
parameter_list|,
name|u
parameter_list|)
lambda|->
name|DoublePoint
operator|.
name|newRangeQuery
argument_list|(
literal|"number"
argument_list|,
name|t
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|u
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldFunctions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Function
argument_list|<
name|Long
argument_list|,
name|IndexableField
argument_list|>
name|fieldFunction
init|=
name|fieldFunctions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Function
argument_list|<
name|Long
argument_list|,
name|Query
argument_list|>
name|exactQueryFunction
init|=
name|exactQueryFunctions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Function
argument_list|<
name|long
index|[]
argument_list|,
name|Query
argument_list|>
name|setQueryFunction
init|=
name|setQueryFunctions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|BiFunction
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|Query
argument_list|>
name|rangeQueryFunction
init|=
name|rangeQueryFunctions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|number
init|=
literal|1
init|;
name|number
operator|<
literal|32
condition|;
name|number
operator|+=
literal|2
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|fieldFunction
operator|.
name|apply
argument_list|(
operator|(
name|long
operator|)
name|number
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MemoryIndex
name|mi
init|=
name|MemoryIndex
operator|.
name|fromDocument
argument_list|(
name|doc
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
name|IndexSearcher
name|indexSearcher
init|=
name|mi
operator|.
name|createSearcher
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
name|exactQueryFunction
operator|.
name|apply
argument_list|(
literal|5L
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|indexSearcher
operator|.
name|count
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|=
name|exactQueryFunction
operator|.
name|apply
argument_list|(
literal|4L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|indexSearcher
operator|.
name|count
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|=
name|setQueryFunction
operator|.
name|apply
argument_list|(
operator|new
name|long
index|[]
block|{
literal|3L
block|,
literal|9L
block|,
literal|19L
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|indexSearcher
operator|.
name|count
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|=
name|setQueryFunction
operator|.
name|apply
argument_list|(
operator|new
name|long
index|[]
block|{
literal|2L
block|,
literal|8L
block|,
literal|13L
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|indexSearcher
operator|.
name|count
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|=
name|setQueryFunction
operator|.
name|apply
argument_list|(
operator|new
name|long
index|[]
block|{
literal|2L
block|,
literal|8L
block|,
literal|16L
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|indexSearcher
operator|.
name|count
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|=
name|rangeQueryFunction
operator|.
name|apply
argument_list|(
literal|2L
argument_list|,
literal|16L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|indexSearcher
operator|.
name|count
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|=
name|rangeQueryFunction
operator|.
name|apply
argument_list|(
literal|24L
argument_list|,
literal|48L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|indexSearcher
operator|.
name|count
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|=
name|rangeQueryFunction
operator|.
name|apply
argument_list|(
literal|48L
argument_list|,
literal|68L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|indexSearcher
operator|.
name|count
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPointValuesDoNotAffectBoostPositionsOrOffset
specifier|public
name|void
name|testPointValuesDoNotAffectBoostPositionsOrOffset
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryIndex
name|mi
init|=
operator|new
name|MemoryIndex
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|mi
operator|.
name|addField
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"text"
argument_list|,
literal|"quick brown fox"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|,
name|analyzer
argument_list|,
literal|5f
argument_list|)
expr_stmt|;
name|mi
operator|.
name|addField
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
literal|"text"
argument_list|,
literal|"quick"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|,
name|analyzer
argument_list|,
literal|5f
argument_list|)
expr_stmt|;
name|mi
operator|.
name|addField
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
literal|"text"
argument_list|,
literal|"brown"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|,
name|analyzer
argument_list|,
literal|5f
argument_list|)
expr_stmt|;
name|LeafReader
name|leafReader
init|=
name|mi
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
decl_stmt|;
name|TermsEnum
name|tenum
init|=
name|leafReader
operator|.
name|terms
argument_list|(
literal|"text"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"brown"
argument_list|,
name|tenum
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|PostingsEnum
name|penum
init|=
name|tenum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|PostingsEnum
operator|.
name|OFFSETS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|penum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|penum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|penum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|penum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|penum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fox"
argument_list|,
name|tenum
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|penum
operator|=
name|tenum
operator|.
name|postings
argument_list|(
name|penum
argument_list|,
name|PostingsEnum
operator|.
name|OFFSETS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|penum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|penum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|penum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|penum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|penum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"quick"
argument_list|,
name|tenum
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|penum
operator|=
name|tenum
operator|.
name|postings
argument_list|(
name|penum
argument_list|,
name|PostingsEnum
operator|.
name|OFFSETS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|penum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|penum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|penum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|penum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|penum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|IndexSearcher
name|indexSearcher
init|=
name|mi
operator|.
name|createSearcher
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|indexSearcher
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newExactQuery
argument_list|(
literal|"text"
argument_list|,
literal|"quick"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|indexSearcher
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newExactQuery
argument_list|(
literal|"text"
argument_list|,
literal|"brown"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|indexSearcher
operator|.
name|count
argument_list|(
name|BinaryPoint
operator|.
name|newExactQuery
argument_list|(
literal|"text"
argument_list|,
literal|"jumps"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|test2DPoints
specifier|public
name|void
name|test2DPoints
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"ints"
argument_list|,
literal|0
argument_list|,
operator|-
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"ints"
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"ints"
argument_list|,
literal|100
argument_list|,
operator|-
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"longs"
argument_list|,
literal|0L
argument_list|,
operator|-
literal|100L
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"longs"
argument_list|,
literal|20L
argument_list|,
literal|20L
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"longs"
argument_list|,
literal|100L
argument_list|,
operator|-
literal|100L
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"floats"
argument_list|,
literal|0F
argument_list|,
operator|-
literal|100F
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"floats"
argument_list|,
literal|20F
argument_list|,
literal|20F
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"floats"
argument_list|,
literal|100F
argument_list|,
operator|-
literal|100F
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"doubles"
argument_list|,
literal|0D
argument_list|,
operator|-
literal|100D
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"doubles"
argument_list|,
literal|20D
argument_list|,
literal|20D
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"doubles"
argument_list|,
literal|100D
argument_list|,
operator|-
literal|100D
argument_list|)
argument_list|)
expr_stmt|;
name|MemoryIndex
name|mi
init|=
name|MemoryIndex
operator|.
name|fromDocument
argument_list|(
name|doc
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|mi
operator|.
name|createSearcher
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"ints"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|10
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|30
block|,
literal|30
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"longs"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|10L
block|,
literal|10L
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|30L
block|,
literal|30L
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|FloatPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"floats"
argument_list|,
operator|new
name|float
index|[]
block|{
literal|10F
block|,
literal|10F
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|30F
block|,
literal|30F
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|DoublePoint
operator|.
name|newRangeQuery
argument_list|(
literal|"doubles"
argument_list|,
operator|new
name|double
index|[]
block|{
literal|10D
block|,
literal|10D
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
literal|30D
block|,
literal|30D
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexingPointsAndDocValues
specifier|public
name|void
name|testIndexingPointsAndDocValues
parameter_list|()
throws|throws
name|Exception
block|{
name|FieldType
name|type
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|type
operator|.
name|setDimensions
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|type
operator|.
name|setDocValuesType
argument_list|(
name|DocValuesType
operator|.
name|BINARY
argument_list|)
expr_stmt|;
name|type
operator|.
name|freeze
argument_list|()
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|byte
index|[]
name|packedPoint
init|=
literal|"term"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
literal|"field"
argument_list|,
name|packedPoint
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|MemoryIndex
name|mi
init|=
name|MemoryIndex
operator|.
name|fromDocument
argument_list|(
name|doc
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
name|LeafReader
name|leafReader
init|=
name|mi
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|leafReader
operator|.
name|getPointValues
argument_list|()
operator|.
name|size
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|packedPoint
argument_list|,
name|leafReader
operator|.
name|getPointValues
argument_list|()
operator|.
name|getMinPackedValue
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|packedPoint
argument_list|,
name|leafReader
operator|.
name|getPointValues
argument_list|()
operator|.
name|getMaxPackedValue
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"term"
argument_list|,
name|leafReader
operator|.
name|getBinaryDocValues
argument_list|(
literal|"field"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
