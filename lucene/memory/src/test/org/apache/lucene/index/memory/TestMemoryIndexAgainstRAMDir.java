begin_unit
begin_package
DECL|package|org.apache.lucene.index.memory
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|memory
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CannedTokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CompositeReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsAndPositionsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SlowCompositeReaderWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|QueryParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|RegexpQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanMultiTermQueryWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanOrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ByteBlockPool
operator|.
name|Allocator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ByteBlockPool
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LineFileDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RecyclingByteBlockAllocator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import
begin_comment
comment|/**  * Verifies that Lucene MemoryIndex and RAMDirectory have the same behaviour,  * returning the same results for queries on some randomish indexes.  */
end_comment
begin_class
DECL|class|TestMemoryIndexAgainstRAMDir
specifier|public
class|class
name|TestMemoryIndexAgainstRAMDir
extends|extends
name|BaseTokenStreamTestCase
block|{
DECL|field|queries
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|queries
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|ITERATIONS
specifier|public
specifier|static
specifier|final
name|int
name|ITERATIONS
init|=
literal|100
operator|*
name|RANDOM_MULTIPLIER
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|queries
operator|.
name|addAll
argument_list|(
name|readQueries
argument_list|(
literal|"testqueries.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|queries
operator|.
name|addAll
argument_list|(
name|readQueries
argument_list|(
literal|"testqueries2.txt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * read a set of queries from a resource file    */
DECL|method|readQueries
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|readQueries
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|queries
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|stream
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
operator|&&
operator|!
name|line
operator|.
name|startsWith
argument_list|(
literal|"//"
argument_list|)
condition|)
block|{
name|queries
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|queries
return|;
block|}
comment|/**    * runs random tests, up to ITERATIONS times.    */
DECL|method|testRandomQueries
specifier|public
name|void
name|testRandomQueries
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryIndex
name|index
init|=
operator|new
name|MemoryIndex
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ITERATIONS
condition|;
name|i
operator|++
control|)
block|{
name|assertAgainstRAMDirectory
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Build a randomish document for both RAMDirectory and MemoryIndex,    * and run all the queries against it.    */
DECL|method|assertAgainstRAMDirectory
specifier|public
name|void
name|assertAgainstRAMDirectory
parameter_list|(
name|MemoryIndex
name|memory
parameter_list|)
throws|throws
name|Exception
block|{
name|memory
operator|.
name|reset
argument_list|()
expr_stmt|;
name|StringBuilder
name|fooField
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|termField
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// add up to 250 terms to field "foo"
specifier|final
name|int
name|numFooTerms
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|250
operator|*
name|RANDOM_MULTIPLIER
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFooTerms
condition|;
name|i
operator|++
control|)
block|{
name|fooField
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|fooField
operator|.
name|append
argument_list|(
name|randomTerm
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// add up to 250 terms to field "term"
specifier|final
name|int
name|numTermTerms
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|250
operator|*
name|RANDOM_MULTIPLIER
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTermTerms
condition|;
name|i
operator|++
control|)
block|{
name|termField
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|termField
operator|.
name|append
argument_list|(
name|randomTerm
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Directory
name|ramdir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|Analyzer
name|analyzer
init|=
name|randomAnalyzer
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|ramdir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|analyzer
argument_list|)
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
name|TestUtil
operator|.
name|getDefaultPostingsFormat
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|field1
init|=
name|newTextField
argument_list|(
literal|"foo"
argument_list|,
name|fooField
operator|.
name|toString
argument_list|()
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|Field
name|field2
init|=
name|newTextField
argument_list|(
literal|"term"
argument_list|,
name|termField
operator|.
name|toString
argument_list|()
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field1
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field2
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|memory
operator|.
name|addField
argument_list|(
literal|"foo"
argument_list|,
name|fooField
operator|.
name|toString
argument_list|()
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|memory
operator|.
name|addField
argument_list|(
literal|"term"
argument_list|,
name|termField
operator|.
name|toString
argument_list|()
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|LeafReader
name|reader
init|=
operator|(
name|LeafReader
operator|)
name|memory
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
name|DirectoryReader
name|competitor
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|ramdir
argument_list|)
decl_stmt|;
name|duellReaders
argument_list|(
name|competitor
argument_list|,
name|reader
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|reader
argument_list|,
name|competitor
argument_list|)
expr_stmt|;
name|assertAllQueries
argument_list|(
name|memory
argument_list|,
name|ramdir
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|ramdir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|duellReaders
specifier|private
name|void
name|duellReaders
parameter_list|(
name|CompositeReader
name|other
parameter_list|,
name|LeafReader
name|memIndexReader
parameter_list|)
throws|throws
name|IOException
block|{
name|LeafReader
name|competitor
init|=
name|SlowCompositeReaderWrapper
operator|.
name|wrap
argument_list|(
name|other
argument_list|)
decl_stmt|;
name|Fields
name|memFields
init|=
name|memIndexReader
operator|.
name|fields
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|competitor
operator|.
name|fields
argument_list|()
control|)
block|{
name|Terms
name|memTerms
init|=
name|memFields
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|Terms
name|iwTerms
init|=
name|memIndexReader
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|iwTerms
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|memTerms
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|NumericDocValues
name|normValues
init|=
name|competitor
operator|.
name|getNormValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|NumericDocValues
name|memNormValues
init|=
name|memIndexReader
operator|.
name|getNormValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|normValues
operator|!=
literal|null
condition|)
block|{
comment|// mem idx always computes norms on the fly
name|assertNotNull
argument_list|(
name|memNormValues
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|normValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|memNormValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|memTerms
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|iwTerms
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|memTerms
operator|.
name|getDocCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|iwTerms
operator|.
name|getSumDocFreq
argument_list|()
argument_list|,
name|memTerms
operator|.
name|getSumDocFreq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|iwTerms
operator|.
name|getSumTotalTermFreq
argument_list|()
argument_list|,
name|memTerms
operator|.
name|getSumTotalTermFreq
argument_list|()
argument_list|)
expr_stmt|;
name|TermsEnum
name|iwTermsIter
init|=
name|iwTerms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|TermsEnum
name|memTermsIter
init|=
name|memTerms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|iwTerms
operator|.
name|hasPositions
argument_list|()
condition|)
block|{
specifier|final
name|boolean
name|offsets
init|=
name|iwTerms
operator|.
name|hasOffsets
argument_list|()
operator|&&
name|memTerms
operator|.
name|hasOffsets
argument_list|()
decl_stmt|;
while|while
condition|(
name|iwTermsIter
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertNotNull
argument_list|(
name|memTermsIter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|iwTermsIter
operator|.
name|term
argument_list|()
argument_list|,
name|memTermsIter
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
name|DocsAndPositionsEnum
name|iwDocsAndPos
init|=
name|iwTermsIter
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DocsAndPositionsEnum
name|memDocsAndPos
init|=
name|memTermsIter
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|iwDocsAndPos
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocsAndPositionsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|assertEquals
argument_list|(
name|iwDocsAndPos
operator|.
name|docID
argument_list|()
argument_list|,
name|memDocsAndPos
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|iwDocsAndPos
operator|.
name|freq
argument_list|()
argument_list|,
name|memDocsAndPos
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iwDocsAndPos
operator|.
name|freq
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"term: "
operator|+
name|iwTermsIter
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|iwDocsAndPos
operator|.
name|nextPosition
argument_list|()
argument_list|,
name|memDocsAndPos
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|offsets
condition|)
block|{
name|assertEquals
argument_list|(
name|iwDocsAndPos
operator|.
name|startOffset
argument_list|()
argument_list|,
name|memDocsAndPos
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|iwDocsAndPos
operator|.
name|endOffset
argument_list|()
argument_list|,
name|memDocsAndPos
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
while|while
condition|(
name|iwTermsIter
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|iwTermsIter
operator|.
name|term
argument_list|()
argument_list|,
name|memTermsIter
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
name|DocsEnum
name|iwDocsAndPos
init|=
name|iwTermsIter
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DocsEnum
name|memDocsAndPos
init|=
name|memTermsIter
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|iwDocsAndPos
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocsAndPositionsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|assertEquals
argument_list|(
name|iwDocsAndPos
operator|.
name|docID
argument_list|()
argument_list|,
name|memDocsAndPos
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|iwDocsAndPos
operator|.
name|freq
argument_list|()
argument_list|,
name|memDocsAndPos
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|/**    * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.    */
DECL|method|assertAllQueries
specifier|public
name|void
name|assertAllQueries
parameter_list|(
name|MemoryIndex
name|memory
parameter_list|,
name|Directory
name|ramdir
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|Exception
block|{
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|ramdir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|ram
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|IndexSearcher
name|mem
init|=
name|memory
operator|.
name|createSearcher
argument_list|()
decl_stmt|;
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
literal|"foo"
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|query
range|:
name|queries
control|)
block|{
name|TopDocs
name|ramDocs
init|=
name|ram
operator|.
name|search
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
name|query
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TopDocs
name|memDocs
init|=
name|mem
operator|.
name|search
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
name|query
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|query
argument_list|,
name|ramDocs
operator|.
name|totalHits
argument_list|,
name|memDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Return a random analyzer (Simple, Stop, Standard) to analyze the terms.    */
DECL|method|randomAnalyzer
specifier|private
name|Analyzer
name|randomAnalyzer
parameter_list|()
block|{
switch|switch
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
return|return
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|)
return|;
case|case
literal|1
case|:
return|return
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|,
name|MockTokenFilter
operator|.
name|ENGLISH_STOPSET
argument_list|)
return|;
case|case
literal|2
case|:
return|return
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|Tokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|()
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|CrazyTokenFilter
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
default|default:
return|return
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
comment|// a tokenfilter that makes all terms starting with 't' empty strings
DECL|class|CrazyTokenFilter
specifier|static
specifier|final
class|class
name|CrazyTokenFilter
extends|extends
name|TokenFilter
block|{
DECL|field|termAtt
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|CrazyTokenFilter
name|CrazyTokenFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
if|if
condition|(
name|termAtt
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|termAtt
operator|.
name|buffer
argument_list|()
index|[
literal|0
index|]
operator|==
literal|'t'
condition|)
block|{
name|termAtt
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
empty_stmt|;
comment|/**    * Some terms to be indexed, in addition to random words.     * These terms are commonly used in the queries.     */
DECL|field|TEST_TERMS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|TEST_TERMS
init|=
block|{
literal|"term"
block|,
literal|"Term"
block|,
literal|"tErm"
block|,
literal|"TERM"
block|,
literal|"telm"
block|,
literal|"stop"
block|,
literal|"drop"
block|,
literal|"roll"
block|,
literal|"phrase"
block|,
literal|"a"
block|,
literal|"c"
block|,
literal|"bar"
block|,
literal|"blar"
block|,
literal|"gack"
block|,
literal|"weltbank"
block|,
literal|"worlbank"
block|,
literal|"hello"
block|,
literal|"on"
block|,
literal|"the"
block|,
literal|"apache"
block|,
literal|"Apache"
block|,
literal|"copyright"
block|,
literal|"Copyright"
block|}
decl_stmt|;
comment|/**    * half of the time, returns a random term from TEST_TERMS.    * the other half of the time, returns a random unicode string.    */
DECL|method|randomTerm
specifier|private
name|String
name|randomTerm
parameter_list|()
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// return a random TEST_TERM
return|return
name|TEST_TERMS
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|TEST_TERMS
operator|.
name|length
argument_list|)
index|]
return|;
block|}
else|else
block|{
comment|// return a random unicode term
return|return
name|TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|testDocsEnumStart
specifier|public
name|void
name|testDocsEnumStart
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|MemoryIndex
name|memory
init|=
operator|new
name|MemoryIndex
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|memory
operator|.
name|addField
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|LeafReader
name|reader
init|=
operator|(
name|LeafReader
operator|)
name|memory
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
name|DocsEnum
name|disi
init|=
name|TestUtil
operator|.
name|docs
argument_list|(
name|random
argument_list|()
argument_list|,
name|reader
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
decl_stmt|;
name|int
name|docid
init|=
name|disi
operator|.
name|docID
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docid
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|disi
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
comment|// now reuse and check again
name|TermsEnum
name|te
init|=
name|reader
operator|.
name|terms
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|te
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disi
operator|=
name|te
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|disi
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
expr_stmt|;
name|docid
operator|=
name|disi
operator|.
name|docID
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docid
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|disi
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|randomByteBlockAllocator
specifier|private
name|Allocator
name|randomByteBlockAllocator
parameter_list|()
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
return|return
operator|new
name|RecyclingByteBlockAllocator
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|ByteBlockPool
operator|.
name|DirectAllocator
argument_list|()
return|;
block|}
block|}
DECL|method|testDocsAndPositionsEnumStart
specifier|public
name|void
name|testDocsAndPositionsEnumStart
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numIters
init|=
name|atLeast
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|MemoryIndex
name|memory
init|=
operator|new
name|MemoryIndex
argument_list|(
literal|true
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIters
condition|;
name|i
operator|++
control|)
block|{
comment|// check reuse
name|memory
operator|.
name|addField
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|LeafReader
name|reader
init|=
operator|(
name|LeafReader
operator|)
name|memory
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|terms
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getSumTotalTermFreq
argument_list|()
argument_list|)
expr_stmt|;
name|DocsAndPositionsEnum
name|disi
init|=
name|reader
operator|.
name|termPositionsEnum
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|docid
init|=
name|disi
operator|.
name|docID
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docid
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|disi
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|disi
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|disi
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|disi
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
comment|// now reuse and check again
name|TermsEnum
name|te
init|=
name|reader
operator|.
name|terms
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|te
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disi
operator|=
name|te
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|disi
argument_list|)
expr_stmt|;
name|docid
operator|=
name|disi
operator|.
name|docID
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docid
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|disi
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|memory
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
comment|// LUCENE-3831
DECL|method|testNullPointerException
specifier|public
name|void
name|testNullPointerException
parameter_list|()
throws|throws
name|IOException
block|{
name|RegexpQuery
name|regex
init|=
operator|new
name|RegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"worl."
argument_list|)
argument_list|)
decl_stmt|;
name|SpanQuery
name|wrappedquery
init|=
operator|new
name|SpanMultiTermQueryWrapper
argument_list|<>
argument_list|(
name|regex
argument_list|)
decl_stmt|;
name|MemoryIndex
name|mindex
init|=
operator|new
name|MemoryIndex
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|mindex
operator|.
name|addField
argument_list|(
literal|"field"
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|tokenStream
argument_list|(
literal|"field"
argument_list|,
literal|"hello there"
argument_list|)
argument_list|)
expr_stmt|;
comment|// This throws an NPE
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mindex
operator|.
name|search
argument_list|(
name|wrappedquery
argument_list|)
argument_list|,
literal|0.00001f
argument_list|)
expr_stmt|;
block|}
comment|// LUCENE-3831
DECL|method|testPassesIfWrapped
specifier|public
name|void
name|testPassesIfWrapped
parameter_list|()
throws|throws
name|IOException
block|{
name|RegexpQuery
name|regex
init|=
operator|new
name|RegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"worl."
argument_list|)
argument_list|)
decl_stmt|;
name|SpanQuery
name|wrappedquery
init|=
operator|new
name|SpanOrQuery
argument_list|(
operator|new
name|SpanMultiTermQueryWrapper
argument_list|<>
argument_list|(
name|regex
argument_list|)
argument_list|)
decl_stmt|;
name|MemoryIndex
name|mindex
init|=
operator|new
name|MemoryIndex
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|mindex
operator|.
name|addField
argument_list|(
literal|"field"
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|tokenStream
argument_list|(
literal|"field"
argument_list|,
literal|"hello there"
argument_list|)
argument_list|)
expr_stmt|;
comment|// This passes though
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mindex
operator|.
name|search
argument_list|(
name|wrappedquery
argument_list|)
argument_list|,
literal|0.00001f
argument_list|)
expr_stmt|;
block|}
DECL|method|testSameFieldAddedMultipleTimes
specifier|public
name|void
name|testSameFieldAddedMultipleTimes
parameter_list|()
throws|throws
name|IOException
block|{
name|MemoryIndex
name|mindex
init|=
operator|new
name|MemoryIndex
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|MockAnalyzer
name|mockAnalyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|mindex
operator|.
name|addField
argument_list|(
literal|"field"
argument_list|,
literal|"the quick brown fox"
argument_list|,
name|mockAnalyzer
argument_list|)
expr_stmt|;
name|mindex
operator|.
name|addField
argument_list|(
literal|"field"
argument_list|,
literal|"jumps over the"
argument_list|,
name|mockAnalyzer
argument_list|)
expr_stmt|;
name|LeafReader
name|reader
init|=
operator|(
name|LeafReader
operator|)
name|mindex
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|reader
operator|.
name|terms
argument_list|(
literal|"field"
argument_list|)
operator|.
name|getSumTotalTermFreq
argument_list|()
argument_list|)
expr_stmt|;
name|PhraseQuery
name|query
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"jumps"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mindex
operator|.
name|search
argument_list|(
name|query
argument_list|)
operator|>
literal|0.1
argument_list|)
expr_stmt|;
name|mindex
operator|.
name|reset
argument_list|()
expr_stmt|;
name|mockAnalyzer
operator|.
name|setPositionIncrementGap
argument_list|(
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|mindex
operator|.
name|addField
argument_list|(
literal|"field"
argument_list|,
literal|"the quick brown fox"
argument_list|,
name|mockAnalyzer
argument_list|)
expr_stmt|;
name|mindex
operator|.
name|addField
argument_list|(
literal|"field"
argument_list|,
literal|"jumps over the"
argument_list|,
name|mockAnalyzer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mindex
operator|.
name|search
argument_list|(
name|query
argument_list|)
argument_list|,
literal|0.00001f
argument_list|)
expr_stmt|;
name|query
operator|.
name|setSlop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"posGap"
operator|+
name|mockAnalyzer
operator|.
name|getPositionIncrementGap
argument_list|(
literal|"field"
argument_list|)
argument_list|,
name|mindex
operator|.
name|search
argument_list|(
name|query
argument_list|)
operator|>
literal|0.0001
argument_list|)
expr_stmt|;
block|}
DECL|method|testNonExistingsField
specifier|public
name|void
name|testNonExistingsField
parameter_list|()
throws|throws
name|IOException
block|{
name|MemoryIndex
name|mindex
init|=
operator|new
name|MemoryIndex
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|MockAnalyzer
name|mockAnalyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|mindex
operator|.
name|addField
argument_list|(
literal|"field"
argument_list|,
literal|"the quick brown fox"
argument_list|,
name|mockAnalyzer
argument_list|)
expr_stmt|;
name|LeafReader
name|reader
init|=
operator|(
name|LeafReader
operator|)
name|mindex
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|reader
operator|.
name|getNumericDocValues
argument_list|(
literal|"not-in-index"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|reader
operator|.
name|getNormValues
argument_list|(
literal|"not-in-index"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|reader
operator|.
name|termDocsEnum
argument_list|(
operator|new
name|Term
argument_list|(
literal|"not-in-index"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|reader
operator|.
name|termPositionsEnum
argument_list|(
operator|new
name|Term
argument_list|(
literal|"not-in-index"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|reader
operator|.
name|terms
argument_list|(
literal|"not-in-index"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDuellMemIndex
specifier|public
name|void
name|testDuellMemIndex
parameter_list|()
throws|throws
name|IOException
block|{
name|LineFileDocs
name|lineFileDocs
init|=
operator|new
name|LineFileDocs
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|MemoryIndex
name|memory
init|=
operator|new
name|MemoryIndex
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|MockAnalyzer
name|mockAnalyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|mockAnalyzer
operator|.
name|setMaxTokenLength
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|IndexWriter
operator|.
name|MAX_TERM_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|random
argument_list|()
argument_list|,
name|mockAnalyzer
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|nextDoc
init|=
name|lineFileDocs
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|nextDoc
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|fieldType
argument_list|()
operator|.
name|indexOptions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|==
literal|0
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
comment|// randomly add the same field twice
block|}
block|}
block|}
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|IndexableField
name|field
range|:
name|doc
operator|.
name|indexableFields
argument_list|()
control|)
block|{
name|memory
operator|.
name|addField
argument_list|(
name|field
operator|.
name|name
argument_list|()
argument_list|,
operator|(
operator|(
name|Field
operator|)
name|field
operator|)
operator|.
name|stringValue
argument_list|()
argument_list|,
name|mockAnalyzer
argument_list|)
expr_stmt|;
block|}
name|DirectoryReader
name|competitor
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|LeafReader
name|memIndexReader
init|=
operator|(
name|LeafReader
operator|)
name|memory
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
name|duellReaders
argument_list|(
name|competitor
argument_list|,
name|memIndexReader
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|competitor
argument_list|,
name|memIndexReader
argument_list|)
expr_stmt|;
name|memory
operator|.
name|reset
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|lineFileDocs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-4880
DECL|method|testEmptyString
specifier|public
name|void
name|testEmptyString
parameter_list|()
throws|throws
name|IOException
block|{
name|MemoryIndex
name|memory
init|=
operator|new
name|MemoryIndex
argument_list|()
decl_stmt|;
name|memory
operator|.
name|addField
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|CannedTokenStream
argument_list|(
operator|new
name|Token
argument_list|(
literal|""
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|memory
operator|.
name|createSearcher
argument_list|()
decl_stmt|;
name|TopDocs
name|docs
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
DECL|method|testDuelMemoryIndexCoreDirectoryWithArrayField
specifier|public
name|void
name|testDuelMemoryIndexCoreDirectoryWithArrayField
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|field_name
init|=
literal|"text"
decl_stmt|;
name|MockAnalyzer
name|mockAnalyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|mockAnalyzer
operator|.
name|setOffsetGap
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//index into a random directory
name|FieldType
name|type
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|type
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectorPayloads
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|freeze
argument_list|()
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|field_name
argument_list|,
literal|"la la"
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|field_name
argument_list|,
literal|"foo bar foo bar foo"
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|random
argument_list|()
argument_list|,
name|mockAnalyzer
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
comment|//Index document in Memory index
name|MemoryIndex
name|memIndex
init|=
operator|new
name|MemoryIndex
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|memIndex
operator|.
name|addField
argument_list|(
name|field_name
argument_list|,
literal|"la la"
argument_list|,
name|mockAnalyzer
argument_list|)
expr_stmt|;
name|memIndex
operator|.
name|addField
argument_list|(
name|field_name
argument_list|,
literal|"foo bar foo bar foo"
argument_list|,
name|mockAnalyzer
argument_list|)
expr_stmt|;
comment|//compare term vectors
name|Terms
name|ramTv
init|=
name|reader
operator|.
name|getTermVector
argument_list|(
literal|0
argument_list|,
name|field_name
argument_list|)
decl_stmt|;
name|IndexReader
name|memIndexReader
init|=
name|memIndex
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
name|Terms
name|memTv
init|=
name|memIndexReader
operator|.
name|getTermVector
argument_list|(
literal|0
argument_list|,
name|field_name
argument_list|)
decl_stmt|;
name|compareTermVectors
argument_list|(
name|ramTv
argument_list|,
name|memTv
argument_list|,
name|field_name
argument_list|)
expr_stmt|;
name|memIndexReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|compareTermVectors
specifier|protected
name|void
name|compareTermVectors
parameter_list|(
name|Terms
name|terms
parameter_list|,
name|Terms
name|memTerms
parameter_list|,
name|String
name|field_name
parameter_list|)
throws|throws
name|IOException
block|{
name|TermsEnum
name|termEnum
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|TermsEnum
name|memTermEnum
init|=
name|memTerms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|termEnum
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertNotNull
argument_list|(
name|memTermEnum
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termEnum
operator|.
name|totalTermFreq
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|memTermEnum
operator|.
name|totalTermFreq
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|DocsAndPositionsEnum
name|docsPosEnum
init|=
name|termEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DocsAndPositionsEnum
name|memDocsPosEnum
init|=
name|memTermEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
name|currentTerm
init|=
name|termEnum
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"Token mismatch for field: "
operator|+
name|field_name
argument_list|,
name|currentTerm
argument_list|,
name|equalTo
argument_list|(
name|memTermEnum
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|docsPosEnum
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
name|memDocsPosEnum
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
name|int
name|freq
init|=
name|docsPosEnum
operator|.
name|freq
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|freq
argument_list|,
name|equalTo
argument_list|(
name|memDocsPosEnum
operator|.
name|freq
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|freq
condition|;
name|i
operator|++
control|)
block|{
name|String
name|failDesc
init|=
literal|" (field:"
operator|+
name|field_name
operator|+
literal|" term:"
operator|+
name|currentTerm
operator|+
literal|")"
decl_stmt|;
name|int
name|memPos
init|=
name|memDocsPosEnum
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|docsPosEnum
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"Position test failed"
operator|+
name|failDesc
argument_list|,
name|memPos
argument_list|,
name|equalTo
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Start offset test failed"
operator|+
name|failDesc
argument_list|,
name|memDocsPosEnum
operator|.
name|startOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|docsPosEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"End offset test failed"
operator|+
name|failDesc
argument_list|,
name|memDocsPosEnum
operator|.
name|endOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|docsPosEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Missing payload test failed"
operator|+
name|failDesc
argument_list|,
name|docsPosEnum
operator|.
name|getPayload
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertNull
argument_list|(
literal|"Still some tokens not processed"
argument_list|,
name|memTermEnum
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
