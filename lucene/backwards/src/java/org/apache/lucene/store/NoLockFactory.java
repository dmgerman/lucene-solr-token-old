begin_unit
begin_package
DECL|package|org.apache.lucene.store
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * Use this {@link LockFactory} to disable locking entirely.  * Only one instance of this lock is created.  You should call {@link  * #getNoLockFactory()} to get the instance.  *  * @see LockFactory  */
end_comment
begin_class
DECL|class|NoLockFactory
specifier|public
class|class
name|NoLockFactory
extends|extends
name|LockFactory
block|{
comment|// Single instance returned whenever makeLock is called.
DECL|field|singletonLock
specifier|private
specifier|static
name|NoLock
name|singletonLock
init|=
operator|new
name|NoLock
argument_list|()
decl_stmt|;
DECL|field|singleton
specifier|private
specifier|static
name|NoLockFactory
name|singleton
init|=
operator|new
name|NoLockFactory
argument_list|()
decl_stmt|;
DECL|method|getNoLockFactory
specifier|public
specifier|static
name|NoLockFactory
name|getNoLockFactory
parameter_list|()
block|{
return|return
name|singleton
return|;
block|}
annotation|@
name|Override
DECL|method|makeLock
specifier|public
name|Lock
name|makeLock
parameter_list|(
name|String
name|lockName
parameter_list|)
block|{
return|return
name|singletonLock
return|;
block|}
annotation|@
name|Override
DECL|method|clearLock
specifier|public
name|void
name|clearLock
parameter_list|(
name|String
name|lockName
parameter_list|)
block|{}
empty_stmt|;
block|}
end_class
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_class
DECL|class|NoLock
class|class
name|NoLock
extends|extends
name|Lock
block|{
annotation|@
name|Override
DECL|method|obtain
specifier|public
name|boolean
name|obtain
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|release
specifier|public
name|void
name|release
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|isLocked
specifier|public
name|boolean
name|isLocked
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"NoLock"
return|;
block|}
block|}
end_class
end_unit
