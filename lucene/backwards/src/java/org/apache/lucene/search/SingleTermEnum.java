begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_comment
comment|/**  * Subclass of FilteredTermEnum for enumerating a single term.  *<p>  * This can be used by {@link MultiTermQuery}s that need only visit one term,  * but want to preserve MultiTermQuery semantics such as  * {@link MultiTermQuery#rewriteMethod}.  */
end_comment
begin_class
DECL|class|SingleTermEnum
specifier|public
class|class
name|SingleTermEnum
extends|extends
name|FilteredTermEnum
block|{
DECL|field|singleTerm
specifier|private
name|Term
name|singleTerm
decl_stmt|;
DECL|field|endEnum
specifier|private
name|boolean
name|endEnum
init|=
literal|false
decl_stmt|;
comment|/**    * Creates a new<code>SingleTermEnum</code>.    *<p>    * After calling the constructor the enumeration is already pointing to the term,    * if it exists.    */
DECL|method|SingleTermEnum
specifier|public
name|SingleTermEnum
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|Term
name|singleTerm
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|singleTerm
operator|=
name|singleTerm
expr_stmt|;
name|setEnum
argument_list|(
name|reader
operator|.
name|terms
argument_list|(
name|singleTerm
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|difference
specifier|public
name|float
name|difference
parameter_list|()
block|{
return|return
literal|1.0F
return|;
block|}
annotation|@
name|Override
DECL|method|endEnum
specifier|protected
name|boolean
name|endEnum
parameter_list|()
block|{
return|return
name|endEnum
return|;
block|}
annotation|@
name|Override
DECL|method|termCompare
specifier|protected
name|boolean
name|termCompare
parameter_list|(
name|Term
name|term
parameter_list|)
block|{
if|if
condition|(
name|term
operator|.
name|equals
argument_list|(
name|singleTerm
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|endEnum
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
end_class
end_unit
