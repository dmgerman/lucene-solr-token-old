begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * For each Field, store position by position information.  It ignores frequency information  *<p/>  * This is not thread-safe.  */
end_comment
begin_class
DECL|class|PositionBasedTermVectorMapper
specifier|public
class|class
name|PositionBasedTermVectorMapper
extends|extends
name|TermVectorMapper
block|{
DECL|field|fieldToTerms
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|TVPositionInfo
argument_list|>
argument_list|>
name|fieldToTerms
decl_stmt|;
DECL|field|currentField
specifier|private
name|String
name|currentField
decl_stmt|;
comment|/**    * A Map of Integer and TVPositionInfo    */
DECL|field|currentPositions
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|TVPositionInfo
argument_list|>
name|currentPositions
decl_stmt|;
DECL|field|storeOffsets
specifier|private
name|boolean
name|storeOffsets
decl_stmt|;
comment|/**    *    *    */
DECL|method|PositionBasedTermVectorMapper
specifier|public
name|PositionBasedTermVectorMapper
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|PositionBasedTermVectorMapper
specifier|public
name|PositionBasedTermVectorMapper
parameter_list|(
name|boolean
name|ignoringOffsets
parameter_list|)
block|{
name|super
argument_list|(
literal|false
argument_list|,
name|ignoringOffsets
argument_list|)
expr_stmt|;
block|}
comment|/**    * Never ignores positions.  This mapper doesn't make much sense unless there are positions    * @return false    */
annotation|@
name|Override
DECL|method|isIgnoringPositions
specifier|public
name|boolean
name|isIgnoringPositions
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Callback for the TermVectorReader.     * @param term    * @param frequency    * @param offsets    * @param positions    */
annotation|@
name|Override
DECL|method|map
specifier|public
name|void
name|map
parameter_list|(
name|String
name|term
parameter_list|,
name|int
name|frequency
parameter_list|,
name|TermVectorOffsetInfo
index|[]
name|offsets
parameter_list|,
name|int
index|[]
name|positions
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|positions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Integer
name|posVal
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|positions
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|TVPositionInfo
name|pos
init|=
name|currentPositions
operator|.
name|get
argument_list|(
name|posVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|==
literal|null
condition|)
block|{
name|pos
operator|=
operator|new
name|TVPositionInfo
argument_list|(
name|positions
index|[
name|i
index|]
argument_list|,
name|storeOffsets
argument_list|)
expr_stmt|;
name|currentPositions
operator|.
name|put
argument_list|(
name|posVal
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
name|pos
operator|.
name|addTerm
argument_list|(
name|term
argument_list|,
name|offsets
operator|!=
literal|null
condition|?
name|offsets
index|[
name|i
index|]
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Callback mechanism used by the TermVectorReader    * @param field  The field being read    * @param numTerms The number of terms in the vector    * @param storeOffsets Whether offsets are available    * @param storePositions Whether positions are available    */
annotation|@
name|Override
DECL|method|setExpectations
specifier|public
name|void
name|setExpectations
parameter_list|(
name|String
name|field
parameter_list|,
name|int
name|numTerms
parameter_list|,
name|boolean
name|storeOffsets
parameter_list|,
name|boolean
name|storePositions
parameter_list|)
block|{
if|if
condition|(
name|storePositions
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"You must store positions in order to use this Mapper"
argument_list|)
throw|;
block|}
if|if
condition|(
name|storeOffsets
operator|==
literal|true
condition|)
block|{
comment|//ignoring offsets
block|}
name|fieldToTerms
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|TVPositionInfo
argument_list|>
argument_list|>
argument_list|(
name|numTerms
argument_list|)
expr_stmt|;
name|this
operator|.
name|storeOffsets
operator|=
name|storeOffsets
expr_stmt|;
name|currentField
operator|=
name|field
expr_stmt|;
name|currentPositions
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|TVPositionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|fieldToTerms
operator|.
name|put
argument_list|(
name|currentField
argument_list|,
name|currentPositions
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the mapping between fields and terms, sorted by the comparator    *    * @return A map between field names and a Map.  The sub-Map key is the position as the integer, the value is {@link org.apache.lucene.index.PositionBasedTermVectorMapper.TVPositionInfo}.    */
DECL|method|getFieldToTerms
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|TVPositionInfo
argument_list|>
argument_list|>
name|getFieldToTerms
parameter_list|()
block|{
return|return
name|fieldToTerms
return|;
block|}
comment|/**    * Container for a term at a position    */
DECL|class|TVPositionInfo
specifier|public
specifier|static
class|class
name|TVPositionInfo
block|{
DECL|field|position
specifier|private
name|int
name|position
decl_stmt|;
DECL|field|terms
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|terms
decl_stmt|;
DECL|field|offsets
specifier|private
name|List
argument_list|<
name|TermVectorOffsetInfo
argument_list|>
name|offsets
decl_stmt|;
DECL|method|TVPositionInfo
specifier|public
name|TVPositionInfo
parameter_list|(
name|int
name|position
parameter_list|,
name|boolean
name|storeOffsets
parameter_list|)
block|{
name|this
operator|.
name|position
operator|=
name|position
expr_stmt|;
name|terms
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|storeOffsets
condition|)
block|{
name|offsets
operator|=
operator|new
name|ArrayList
argument_list|<
name|TermVectorOffsetInfo
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addTerm
name|void
name|addTerm
parameter_list|(
name|String
name|term
parameter_list|,
name|TermVectorOffsetInfo
name|info
parameter_list|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|term
argument_list|)
expr_stmt|;
if|if
condition|(
name|offsets
operator|!=
literal|null
condition|)
block|{
name|offsets
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *      * @return The position of the term      */
DECL|method|getPosition
specifier|public
name|int
name|getPosition
parameter_list|()
block|{
return|return
name|position
return|;
block|}
comment|/**      * Note, there may be multiple terms at the same position      * @return A List of Strings      */
DECL|method|getTerms
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTerms
parameter_list|()
block|{
return|return
name|terms
return|;
block|}
comment|/**      * Parallel list (to {@link #getTerms()}) of TermVectorOffsetInfo objects.  There may be multiple entries since there may be multiple terms at a position      * @return A List of TermVectorOffsetInfo objects, if offsets are stored.      */
DECL|method|getOffsets
specifier|public
name|List
argument_list|<
name|TermVectorOffsetInfo
argument_list|>
name|getOffsets
parameter_list|()
block|{
return|return
name|offsets
return|;
block|}
block|}
block|}
end_class
end_unit
