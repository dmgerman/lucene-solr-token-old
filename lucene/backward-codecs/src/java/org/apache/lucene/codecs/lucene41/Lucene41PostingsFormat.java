begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.lucene41
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene41
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsReaderBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|blocktree
operator|.
name|BlockTreeTermsReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReadState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_comment
comment|/**  * Lucene 4.1 postings format.  * @deprecated only for reading old 4.x segments  */
end_comment
begin_class
annotation|@
name|Deprecated
DECL|class|Lucene41PostingsFormat
specifier|public
class|class
name|Lucene41PostingsFormat
extends|extends
name|PostingsFormat
block|{
comment|/**    * Filename extension for document number, frequencies, and skip data.    * See chapter:<a href="#Frequencies">Frequencies and Skip Data</a>    */
DECL|field|DOC_EXTENSION
specifier|public
specifier|static
specifier|final
name|String
name|DOC_EXTENSION
init|=
literal|"doc"
decl_stmt|;
comment|/**    * Filename extension for positions.     * See chapter:<a href="#Positions">Positions</a>    */
DECL|field|POS_EXTENSION
specifier|public
specifier|static
specifier|final
name|String
name|POS_EXTENSION
init|=
literal|"pos"
decl_stmt|;
comment|/**    * Filename extension for payloads and offsets.    * See chapter:<a href="#Payloads">Payloads and Offsets</a>    */
DECL|field|PAY_EXTENSION
specifier|public
specifier|static
specifier|final
name|String
name|PAY_EXTENSION
init|=
literal|"pay"
decl_stmt|;
comment|/**     * Expert: The maximum number of skip levels. Smaller values result in     * slightly smaller indexes, but slower skipping in big posting lists.    */
DECL|field|maxSkipLevels
specifier|static
specifier|final
name|int
name|maxSkipLevels
init|=
literal|10
decl_stmt|;
DECL|field|TERMS_CODEC
specifier|final
specifier|static
name|String
name|TERMS_CODEC
init|=
literal|"Lucene41PostingsWriterTerms"
decl_stmt|;
DECL|field|DOC_CODEC
specifier|final
specifier|static
name|String
name|DOC_CODEC
init|=
literal|"Lucene41PostingsWriterDoc"
decl_stmt|;
DECL|field|POS_CODEC
specifier|final
specifier|static
name|String
name|POS_CODEC
init|=
literal|"Lucene41PostingsWriterPos"
decl_stmt|;
DECL|field|PAY_CODEC
specifier|final
specifier|static
name|String
name|PAY_CODEC
init|=
literal|"Lucene41PostingsWriterPay"
decl_stmt|;
comment|// Increment version to change it
DECL|field|VERSION_START
specifier|final
specifier|static
name|int
name|VERSION_START
init|=
literal|0
decl_stmt|;
DECL|field|VERSION_META_ARRAY
specifier|final
specifier|static
name|int
name|VERSION_META_ARRAY
init|=
literal|1
decl_stmt|;
DECL|field|VERSION_CHECKSUM
specifier|final
specifier|static
name|int
name|VERSION_CHECKSUM
init|=
literal|2
decl_stmt|;
DECL|field|VERSION_CURRENT
specifier|final
specifier|static
name|int
name|VERSION_CURRENT
init|=
name|VERSION_CHECKSUM
decl_stmt|;
comment|/**    * Fixed packed block size, number of integers encoded in     * a single packed block.    */
comment|// NOTE: must be multiple of 64 because of PackedInts long-aligned encoding/decoding
DECL|field|BLOCK_SIZE
specifier|public
specifier|final
specifier|static
name|int
name|BLOCK_SIZE
init|=
literal|128
decl_stmt|;
comment|/** Creates {@code Lucene41PostingsFormat} with default    *  settings. */
DECL|method|Lucene41PostingsFormat
specifier|public
name|Lucene41PostingsFormat
parameter_list|()
block|{
name|super
argument_list|(
literal|"Lucene41"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
operator|+
literal|"(blocksize="
operator|+
name|BLOCK_SIZE
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|fieldsConsumer
specifier|public
name|FieldsConsumer
name|fieldsConsumer
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"this codec can only be used for reading"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|fieldsProducer
specifier|public
specifier|final
name|FieldsProducer
name|fieldsProducer
parameter_list|(
name|SegmentReadState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|PostingsReaderBase
name|postingsReader
init|=
operator|new
name|Lucene41PostingsReader
argument_list|(
name|state
operator|.
name|directory
argument_list|,
name|state
operator|.
name|fieldInfos
argument_list|,
name|state
operator|.
name|segmentInfo
argument_list|,
name|state
operator|.
name|context
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|FieldsProducer
name|ret
init|=
operator|new
name|BlockTreeTermsReader
argument_list|(
name|postingsReader
argument_list|,
name|state
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|ret
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|postingsReader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
