begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.lucene40
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene40
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene40
operator|.
name|Lucene40FieldInfosReader
operator|.
name|LegacyDocValuesType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReadState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|CompoundFileDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountables
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PagedBytes
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_comment
comment|/**  * Reads the 4.0 format of norms/docvalues  * @deprecated Only for reading old 4.0 and 4.1 segments  */
end_comment
begin_class
annotation|@
name|Deprecated
DECL|class|Lucene40DocValuesReader
specifier|final
class|class
name|Lucene40DocValuesReader
extends|extends
name|DocValuesProducer
block|{
DECL|field|dir
specifier|private
specifier|final
name|Directory
name|dir
decl_stmt|;
DECL|field|state
specifier|private
specifier|final
name|SegmentReadState
name|state
decl_stmt|;
DECL|field|legacyKey
specifier|private
specifier|final
name|String
name|legacyKey
decl_stmt|;
DECL|field|segmentSuffix
specifier|private
specifier|static
specifier|final
name|String
name|segmentSuffix
init|=
literal|"dv"
decl_stmt|;
comment|// ram instances we have already loaded
DECL|field|numericInstances
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|NumericDocValues
argument_list|>
name|numericInstances
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|binaryInstances
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|BinaryDocValues
argument_list|>
name|binaryInstances
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|sortedInstances
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SortedDocValues
argument_list|>
name|sortedInstances
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|instanceInfo
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Accountable
argument_list|>
name|instanceInfo
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|ramBytesUsed
specifier|private
specifier|final
name|AtomicLong
name|ramBytesUsed
decl_stmt|;
DECL|field|merging
specifier|private
specifier|final
name|boolean
name|merging
decl_stmt|;
comment|// clone for merge: when merging we don't do any instances.put()s
DECL|method|Lucene40DocValuesReader
name|Lucene40DocValuesReader
parameter_list|(
name|Lucene40DocValuesReader
name|original
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|Thread
operator|.
name|holdsLock
argument_list|(
name|original
argument_list|)
assert|;
name|dir
operator|=
name|original
operator|.
name|dir
expr_stmt|;
name|state
operator|=
name|original
operator|.
name|state
expr_stmt|;
name|legacyKey
operator|=
name|original
operator|.
name|legacyKey
expr_stmt|;
name|numericInstances
operator|.
name|putAll
argument_list|(
name|original
operator|.
name|numericInstances
argument_list|)
expr_stmt|;
name|binaryInstances
operator|.
name|putAll
argument_list|(
name|original
operator|.
name|binaryInstances
argument_list|)
expr_stmt|;
name|sortedInstances
operator|.
name|putAll
argument_list|(
name|original
operator|.
name|sortedInstances
argument_list|)
expr_stmt|;
name|instanceInfo
operator|.
name|putAll
argument_list|(
name|original
operator|.
name|instanceInfo
argument_list|)
expr_stmt|;
name|ramBytesUsed
operator|=
operator|new
name|AtomicLong
argument_list|(
name|original
operator|.
name|ramBytesUsed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|merging
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|Lucene40DocValuesReader
name|Lucene40DocValuesReader
parameter_list|(
name|SegmentReadState
name|state
parameter_list|,
name|String
name|filename
parameter_list|,
name|String
name|legacyKey
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|legacyKey
operator|=
name|legacyKey
expr_stmt|;
name|this
operator|.
name|dir
operator|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|state
operator|.
name|directory
argument_list|,
name|filename
argument_list|,
name|state
operator|.
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ramBytesUsed
operator|=
operator|new
name|AtomicLong
argument_list|(
name|RamUsageEstimator
operator|.
name|shallowSizeOf
argument_list|(
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|merging
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNumeric
specifier|public
specifier|synchronized
name|NumericDocValues
name|getNumeric
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|NumericDocValues
name|instance
init|=
name|numericInstances
operator|.
name|get
argument_list|(
name|field
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|String
name|fileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
operator|+
literal|"_"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|field
operator|.
name|number
argument_list|)
argument_list|,
name|segmentSuffix
argument_list|,
literal|"dat"
argument_list|)
decl_stmt|;
name|IndexInput
name|input
init|=
name|dir
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|,
name|state
operator|.
name|context
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|LegacyDocValuesType
operator|.
name|valueOf
argument_list|(
name|field
operator|.
name|getAttribute
argument_list|(
name|legacyKey
argument_list|)
argument_list|)
condition|)
block|{
case|case
name|VAR_INTS
case|:
name|instance
operator|=
name|loadVarIntsField
argument_list|(
name|field
argument_list|,
name|input
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIXED_INTS_8
case|:
name|instance
operator|=
name|loadByteField
argument_list|(
name|field
argument_list|,
name|input
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIXED_INTS_16
case|:
name|instance
operator|=
name|loadShortField
argument_list|(
name|field
argument_list|,
name|input
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIXED_INTS_32
case|:
name|instance
operator|=
name|loadIntField
argument_list|(
name|field
argument_list|,
name|input
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIXED_INTS_64
case|:
name|instance
operator|=
name|loadLongField
argument_list|(
name|field
argument_list|,
name|input
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT_32
case|:
name|instance
operator|=
name|loadFloatField
argument_list|(
name|field
argument_list|,
name|input
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT_64
case|:
name|instance
operator|=
name|loadDoubleField
argument_list|(
name|field
argument_list|,
name|input
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
name|CodecUtil
operator|.
name|checkEOF
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|merging
condition|)
block|{
name|numericInstances
operator|.
name|put
argument_list|(
name|field
operator|.
name|name
argument_list|,
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|instance
return|;
block|}
DECL|method|loadVarIntsField
specifier|private
name|NumericDocValues
name|loadVarIntsField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|IndexInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|input
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|VAR_INTS_CODEC_NAME
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|VAR_INTS_VERSION_START
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|VAR_INTS_VERSION_CURRENT
argument_list|)
expr_stmt|;
name|byte
name|header
init|=
name|input
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|header
operator|==
name|Lucene40DocValuesFormat
operator|.
name|VAR_INTS_FIXED_64
condition|)
block|{
name|int
name|maxDoc
init|=
name|state
operator|.
name|segmentInfo
operator|.
name|getDocCount
argument_list|()
decl_stmt|;
specifier|final
name|long
name|values
index|[]
init|=
operator|new
name|long
index|[
name|maxDoc
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|input
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
name|long
name|bytesUsed
init|=
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|merging
condition|)
block|{
name|instanceInfo
operator|.
name|put
argument_list|(
name|field
operator|.
name|name
argument_list|,
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"long array"
argument_list|,
name|bytesUsed
argument_list|)
argument_list|)
expr_stmt|;
name|ramBytesUsed
operator|.
name|addAndGet
argument_list|(
name|bytesUsed
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|NumericDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|values
index|[
name|docID
index|]
return|;
block|}
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|header
operator|==
name|Lucene40DocValuesFormat
operator|.
name|VAR_INTS_PACKED
condition|)
block|{
specifier|final
name|long
name|minValue
init|=
name|input
operator|.
name|readLong
argument_list|()
decl_stmt|;
specifier|final
name|long
name|defaultValue
init|=
name|input
operator|.
name|readLong
argument_list|()
decl_stmt|;
specifier|final
name|PackedInts
operator|.
name|Reader
name|reader
init|=
name|PackedInts
operator|.
name|getReader
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|merging
condition|)
block|{
name|instanceInfo
operator|.
name|put
argument_list|(
name|field
operator|.
name|name
argument_list|,
name|reader
argument_list|)
expr_stmt|;
name|ramBytesUsed
operator|.
name|addAndGet
argument_list|(
name|reader
operator|.
name|ramBytesUsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|NumericDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
specifier|final
name|long
name|value
init|=
name|reader
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
name|defaultValue
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|minValue
operator|+
name|value
return|;
block|}
block|}
block|}
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"invalid VAR_INTS header byte: "
operator|+
name|header
argument_list|,
name|input
argument_list|)
throw|;
block|}
block|}
DECL|method|loadByteField
specifier|private
name|NumericDocValues
name|loadByteField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|IndexInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|input
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|INTS_CODEC_NAME
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|INTS_VERSION_START
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|INTS_VERSION_CURRENT
argument_list|)
expr_stmt|;
name|int
name|valueSize
init|=
name|input
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|valueSize
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"invalid valueSize: "
operator|+
name|valueSize
argument_list|,
name|input
argument_list|)
throw|;
block|}
name|int
name|maxDoc
init|=
name|state
operator|.
name|segmentInfo
operator|.
name|getDocCount
argument_list|()
decl_stmt|;
specifier|final
name|byte
name|values
index|[]
init|=
operator|new
name|byte
index|[
name|maxDoc
index|]
decl_stmt|;
name|input
operator|.
name|readBytes
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
name|long
name|bytesUsed
init|=
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|merging
condition|)
block|{
name|instanceInfo
operator|.
name|put
argument_list|(
name|field
operator|.
name|name
argument_list|,
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"byte array"
argument_list|,
name|bytesUsed
argument_list|)
argument_list|)
expr_stmt|;
name|ramBytesUsed
operator|.
name|addAndGet
argument_list|(
name|bytesUsed
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|NumericDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|values
index|[
name|docID
index|]
return|;
block|}
block|}
return|;
block|}
DECL|method|loadShortField
specifier|private
name|NumericDocValues
name|loadShortField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|IndexInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|input
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|INTS_CODEC_NAME
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|INTS_VERSION_START
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|INTS_VERSION_CURRENT
argument_list|)
expr_stmt|;
name|int
name|valueSize
init|=
name|input
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|valueSize
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"invalid valueSize: "
operator|+
name|valueSize
argument_list|,
name|input
argument_list|)
throw|;
block|}
name|int
name|maxDoc
init|=
name|state
operator|.
name|segmentInfo
operator|.
name|getDocCount
argument_list|()
decl_stmt|;
specifier|final
name|short
name|values
index|[]
init|=
operator|new
name|short
index|[
name|maxDoc
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|input
operator|.
name|readShort
argument_list|()
expr_stmt|;
block|}
name|long
name|bytesUsed
init|=
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|merging
condition|)
block|{
name|instanceInfo
operator|.
name|put
argument_list|(
name|field
operator|.
name|name
argument_list|,
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"short array"
argument_list|,
name|bytesUsed
argument_list|)
argument_list|)
expr_stmt|;
name|ramBytesUsed
operator|.
name|addAndGet
argument_list|(
name|bytesUsed
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|NumericDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|values
index|[
name|docID
index|]
return|;
block|}
block|}
return|;
block|}
DECL|method|loadIntField
specifier|private
name|NumericDocValues
name|loadIntField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|IndexInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|input
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|INTS_CODEC_NAME
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|INTS_VERSION_START
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|INTS_VERSION_CURRENT
argument_list|)
expr_stmt|;
name|int
name|valueSize
init|=
name|input
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|valueSize
operator|!=
literal|4
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"invalid valueSize: "
operator|+
name|valueSize
argument_list|,
name|input
argument_list|)
throw|;
block|}
name|int
name|maxDoc
init|=
name|state
operator|.
name|segmentInfo
operator|.
name|getDocCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|values
index|[]
init|=
operator|new
name|int
index|[
name|maxDoc
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|input
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
name|long
name|bytesUsed
init|=
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|merging
condition|)
block|{
name|instanceInfo
operator|.
name|put
argument_list|(
name|field
operator|.
name|name
argument_list|,
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"int array"
argument_list|,
name|bytesUsed
argument_list|)
argument_list|)
expr_stmt|;
name|ramBytesUsed
operator|.
name|addAndGet
argument_list|(
name|bytesUsed
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|NumericDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|values
index|[
name|docID
index|]
return|;
block|}
block|}
return|;
block|}
DECL|method|loadLongField
specifier|private
name|NumericDocValues
name|loadLongField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|IndexInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|input
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|INTS_CODEC_NAME
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|INTS_VERSION_START
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|INTS_VERSION_CURRENT
argument_list|)
expr_stmt|;
name|int
name|valueSize
init|=
name|input
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|valueSize
operator|!=
literal|8
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"invalid valueSize: "
operator|+
name|valueSize
argument_list|,
name|input
argument_list|)
throw|;
block|}
name|int
name|maxDoc
init|=
name|state
operator|.
name|segmentInfo
operator|.
name|getDocCount
argument_list|()
decl_stmt|;
specifier|final
name|long
name|values
index|[]
init|=
operator|new
name|long
index|[
name|maxDoc
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|input
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
name|long
name|bytesUsed
init|=
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|merging
condition|)
block|{
name|instanceInfo
operator|.
name|put
argument_list|(
name|field
operator|.
name|name
argument_list|,
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"long array"
argument_list|,
name|bytesUsed
argument_list|)
argument_list|)
expr_stmt|;
name|ramBytesUsed
operator|.
name|addAndGet
argument_list|(
name|bytesUsed
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|NumericDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|values
index|[
name|docID
index|]
return|;
block|}
block|}
return|;
block|}
DECL|method|loadFloatField
specifier|private
name|NumericDocValues
name|loadFloatField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|IndexInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|input
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|FLOATS_CODEC_NAME
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|FLOATS_VERSION_START
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|FLOATS_VERSION_CURRENT
argument_list|)
expr_stmt|;
name|int
name|valueSize
init|=
name|input
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|valueSize
operator|!=
literal|4
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"invalid valueSize: "
operator|+
name|valueSize
argument_list|,
name|input
argument_list|)
throw|;
block|}
name|int
name|maxDoc
init|=
name|state
operator|.
name|segmentInfo
operator|.
name|getDocCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|values
index|[]
init|=
operator|new
name|int
index|[
name|maxDoc
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|input
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
name|long
name|bytesUsed
init|=
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|merging
condition|)
block|{
name|instanceInfo
operator|.
name|put
argument_list|(
name|field
operator|.
name|name
argument_list|,
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"float array"
argument_list|,
name|bytesUsed
argument_list|)
argument_list|)
expr_stmt|;
name|ramBytesUsed
operator|.
name|addAndGet
argument_list|(
name|bytesUsed
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|NumericDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|values
index|[
name|docID
index|]
return|;
block|}
block|}
return|;
block|}
DECL|method|loadDoubleField
specifier|private
name|NumericDocValues
name|loadDoubleField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|IndexInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|input
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|FLOATS_CODEC_NAME
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|FLOATS_VERSION_START
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|FLOATS_VERSION_CURRENT
argument_list|)
expr_stmt|;
name|int
name|valueSize
init|=
name|input
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|valueSize
operator|!=
literal|8
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"invalid valueSize: "
operator|+
name|valueSize
argument_list|,
name|input
argument_list|)
throw|;
block|}
name|int
name|maxDoc
init|=
name|state
operator|.
name|segmentInfo
operator|.
name|getDocCount
argument_list|()
decl_stmt|;
specifier|final
name|long
name|values
index|[]
init|=
operator|new
name|long
index|[
name|maxDoc
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|input
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
name|long
name|bytesUsed
init|=
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|merging
condition|)
block|{
name|instanceInfo
operator|.
name|put
argument_list|(
name|field
operator|.
name|name
argument_list|,
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"double array"
argument_list|,
name|bytesUsed
argument_list|)
argument_list|)
expr_stmt|;
name|ramBytesUsed
operator|.
name|addAndGet
argument_list|(
name|bytesUsed
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|NumericDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|values
index|[
name|docID
index|]
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getBinary
specifier|public
specifier|synchronized
name|BinaryDocValues
name|getBinary
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|BinaryDocValues
name|instance
init|=
name|binaryInstances
operator|.
name|get
argument_list|(
name|field
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
switch|switch
condition|(
name|LegacyDocValuesType
operator|.
name|valueOf
argument_list|(
name|field
operator|.
name|getAttribute
argument_list|(
name|legacyKey
argument_list|)
argument_list|)
condition|)
block|{
case|case
name|BYTES_FIXED_STRAIGHT
case|:
name|instance
operator|=
name|loadBytesFixedStraight
argument_list|(
name|field
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTES_VAR_STRAIGHT
case|:
name|instance
operator|=
name|loadBytesVarStraight
argument_list|(
name|field
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTES_FIXED_DEREF
case|:
name|instance
operator|=
name|loadBytesFixedDeref
argument_list|(
name|field
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTES_VAR_DEREF
case|:
name|instance
operator|=
name|loadBytesVarDeref
argument_list|(
name|field
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
if|if
condition|(
operator|!
name|merging
condition|)
block|{
name|binaryInstances
operator|.
name|put
argument_list|(
name|field
operator|.
name|name
argument_list|,
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|instance
return|;
block|}
DECL|method|loadBytesFixedStraight
specifier|private
name|BinaryDocValues
name|loadBytesFixedStraight
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
operator|+
literal|"_"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|field
operator|.
name|number
argument_list|)
argument_list|,
name|segmentSuffix
argument_list|,
literal|"dat"
argument_list|)
decl_stmt|;
name|IndexInput
name|input
init|=
name|dir
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|,
name|state
operator|.
name|context
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|input
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_FIXED_STRAIGHT_CODEC_NAME
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_FIXED_STRAIGHT_VERSION_START
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_FIXED_STRAIGHT_VERSION_CURRENT
argument_list|)
expr_stmt|;
specifier|final
name|int
name|fixedLength
init|=
name|input
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|PagedBytes
name|bytes
init|=
operator|new
name|PagedBytes
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|bytes
operator|.
name|copy
argument_list|(
name|input
argument_list|,
name|fixedLength
operator|*
operator|(
name|long
operator|)
name|state
operator|.
name|segmentInfo
operator|.
name|getDocCount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|PagedBytes
operator|.
name|Reader
name|bytesReader
init|=
name|bytes
operator|.
name|freeze
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|CodecUtil
operator|.
name|checkEOF
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|merging
condition|)
block|{
name|ramBytesUsed
operator|.
name|addAndGet
argument_list|(
name|bytesReader
operator|.
name|ramBytesUsed
argument_list|()
argument_list|)
expr_stmt|;
name|instanceInfo
operator|.
name|put
argument_list|(
name|field
operator|.
name|name
argument_list|,
name|bytesReader
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BinaryDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|BytesRef
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
specifier|final
name|BytesRef
name|term
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|bytesReader
operator|.
name|fillSlice
argument_list|(
name|term
argument_list|,
name|fixedLength
operator|*
operator|(
name|long
operator|)
name|docID
argument_list|,
name|fixedLength
argument_list|)
expr_stmt|;
return|return
name|term
return|;
block|}
block|}
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|loadBytesVarStraight
specifier|private
name|BinaryDocValues
name|loadBytesVarStraight
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|dataName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
operator|+
literal|"_"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|field
operator|.
name|number
argument_list|)
argument_list|,
name|segmentSuffix
argument_list|,
literal|"dat"
argument_list|)
decl_stmt|;
name|String
name|indexName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
operator|+
literal|"_"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|field
operator|.
name|number
argument_list|)
argument_list|,
name|segmentSuffix
argument_list|,
literal|"idx"
argument_list|)
decl_stmt|;
name|IndexInput
name|data
init|=
literal|null
decl_stmt|;
name|IndexInput
name|index
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|data
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|dataName
argument_list|,
name|state
operator|.
name|context
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|data
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_VAR_STRAIGHT_CODEC_NAME_DAT
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_VAR_STRAIGHT_VERSION_START
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_VAR_STRAIGHT_VERSION_CURRENT
argument_list|)
expr_stmt|;
name|index
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|indexName
argument_list|,
name|state
operator|.
name|context
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|index
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_VAR_STRAIGHT_CODEC_NAME_IDX
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_VAR_STRAIGHT_VERSION_START
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_VAR_STRAIGHT_VERSION_CURRENT
argument_list|)
expr_stmt|;
name|long
name|totalBytes
init|=
name|index
operator|.
name|readVLong
argument_list|()
decl_stmt|;
name|PagedBytes
name|bytes
init|=
operator|new
name|PagedBytes
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|bytes
operator|.
name|copy
argument_list|(
name|data
argument_list|,
name|totalBytes
argument_list|)
expr_stmt|;
specifier|final
name|PagedBytes
operator|.
name|Reader
name|bytesReader
init|=
name|bytes
operator|.
name|freeze
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|PackedInts
operator|.
name|Reader
name|reader
init|=
name|PackedInts
operator|.
name|getReader
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|CodecUtil
operator|.
name|checkEOF
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|checkEOF
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
name|long
name|bytesUsed
init|=
name|bytesReader
operator|.
name|ramBytesUsed
argument_list|()
operator|+
name|reader
operator|.
name|ramBytesUsed
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|merging
condition|)
block|{
name|ramBytesUsed
operator|.
name|addAndGet
argument_list|(
name|bytesUsed
argument_list|)
expr_stmt|;
name|instanceInfo
operator|.
name|put
argument_list|(
name|field
operator|.
name|name
argument_list|,
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"variable straight"
argument_list|,
name|bytesUsed
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BinaryDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|BytesRef
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
specifier|final
name|BytesRef
name|term
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|long
name|startAddress
init|=
name|reader
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|long
name|endAddress
init|=
name|reader
operator|.
name|get
argument_list|(
name|docID
operator|+
literal|1
argument_list|)
decl_stmt|;
name|bytesReader
operator|.
name|fillSlice
argument_list|(
name|term
argument_list|,
name|startAddress
argument_list|,
call|(
name|int
call|)
argument_list|(
name|endAddress
operator|-
name|startAddress
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|term
return|;
block|}
block|}
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|data
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|data
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|loadBytesFixedDeref
specifier|private
name|BinaryDocValues
name|loadBytesFixedDeref
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|dataName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
operator|+
literal|"_"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|field
operator|.
name|number
argument_list|)
argument_list|,
name|segmentSuffix
argument_list|,
literal|"dat"
argument_list|)
decl_stmt|;
name|String
name|indexName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
operator|+
literal|"_"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|field
operator|.
name|number
argument_list|)
argument_list|,
name|segmentSuffix
argument_list|,
literal|"idx"
argument_list|)
decl_stmt|;
name|IndexInput
name|data
init|=
literal|null
decl_stmt|;
name|IndexInput
name|index
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|data
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|dataName
argument_list|,
name|state
operator|.
name|context
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|data
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_FIXED_DEREF_CODEC_NAME_DAT
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_FIXED_DEREF_VERSION_START
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_FIXED_DEREF_VERSION_CURRENT
argument_list|)
expr_stmt|;
name|index
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|indexName
argument_list|,
name|state
operator|.
name|context
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|index
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_FIXED_DEREF_CODEC_NAME_IDX
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_FIXED_DEREF_VERSION_START
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_FIXED_DEREF_VERSION_CURRENT
argument_list|)
expr_stmt|;
specifier|final
name|int
name|fixedLength
init|=
name|data
operator|.
name|readInt
argument_list|()
decl_stmt|;
specifier|final
name|int
name|valueCount
init|=
name|index
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|PagedBytes
name|bytes
init|=
operator|new
name|PagedBytes
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|bytes
operator|.
name|copy
argument_list|(
name|data
argument_list|,
name|fixedLength
operator|*
operator|(
name|long
operator|)
name|valueCount
argument_list|)
expr_stmt|;
specifier|final
name|PagedBytes
operator|.
name|Reader
name|bytesReader
init|=
name|bytes
operator|.
name|freeze
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|PackedInts
operator|.
name|Reader
name|reader
init|=
name|PackedInts
operator|.
name|getReader
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|CodecUtil
operator|.
name|checkEOF
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|checkEOF
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|long
name|bytesUsed
init|=
name|bytesReader
operator|.
name|ramBytesUsed
argument_list|()
operator|+
name|reader
operator|.
name|ramBytesUsed
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|merging
condition|)
block|{
name|ramBytesUsed
operator|.
name|addAndGet
argument_list|(
name|bytesUsed
argument_list|)
expr_stmt|;
name|instanceInfo
operator|.
name|put
argument_list|(
name|field
operator|.
name|name
argument_list|,
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"fixed deref"
argument_list|,
name|bytesUsed
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
return|return
operator|new
name|BinaryDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|BytesRef
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
specifier|final
name|BytesRef
name|term
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
specifier|final
name|long
name|offset
init|=
name|fixedLength
operator|*
name|reader
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|bytesReader
operator|.
name|fillSlice
argument_list|(
name|term
argument_list|,
name|offset
argument_list|,
name|fixedLength
argument_list|)
expr_stmt|;
return|return
name|term
return|;
block|}
block|}
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|data
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|data
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|loadBytesVarDeref
specifier|private
name|BinaryDocValues
name|loadBytesVarDeref
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|dataName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
operator|+
literal|"_"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|field
operator|.
name|number
argument_list|)
argument_list|,
name|segmentSuffix
argument_list|,
literal|"dat"
argument_list|)
decl_stmt|;
name|String
name|indexName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
operator|+
literal|"_"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|field
operator|.
name|number
argument_list|)
argument_list|,
name|segmentSuffix
argument_list|,
literal|"idx"
argument_list|)
decl_stmt|;
name|IndexInput
name|data
init|=
literal|null
decl_stmt|;
name|IndexInput
name|index
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|data
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|dataName
argument_list|,
name|state
operator|.
name|context
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|data
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_VAR_DEREF_CODEC_NAME_DAT
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_VAR_DEREF_VERSION_START
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_VAR_DEREF_VERSION_CURRENT
argument_list|)
expr_stmt|;
name|index
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|indexName
argument_list|,
name|state
operator|.
name|context
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|index
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_VAR_DEREF_CODEC_NAME_IDX
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_VAR_DEREF_VERSION_START
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_VAR_DEREF_VERSION_CURRENT
argument_list|)
expr_stmt|;
specifier|final
name|long
name|totalBytes
init|=
name|index
operator|.
name|readLong
argument_list|()
decl_stmt|;
specifier|final
name|PagedBytes
name|bytes
init|=
operator|new
name|PagedBytes
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|bytes
operator|.
name|copy
argument_list|(
name|data
argument_list|,
name|totalBytes
argument_list|)
expr_stmt|;
specifier|final
name|PagedBytes
operator|.
name|Reader
name|bytesReader
init|=
name|bytes
operator|.
name|freeze
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|PackedInts
operator|.
name|Reader
name|reader
init|=
name|PackedInts
operator|.
name|getReader
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|CodecUtil
operator|.
name|checkEOF
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|checkEOF
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|long
name|bytesUsed
init|=
name|bytesReader
operator|.
name|ramBytesUsed
argument_list|()
operator|+
name|reader
operator|.
name|ramBytesUsed
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|merging
condition|)
block|{
name|ramBytesUsed
operator|.
name|addAndGet
argument_list|(
name|bytesUsed
argument_list|)
expr_stmt|;
name|instanceInfo
operator|.
name|put
argument_list|(
name|field
operator|.
name|name
argument_list|,
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"variable deref"
argument_list|,
name|bytesUsed
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
return|return
operator|new
name|BinaryDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|BytesRef
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
specifier|final
name|BytesRef
name|term
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|long
name|startAddress
init|=
name|reader
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|BytesRef
name|lengthBytes
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|bytesReader
operator|.
name|fillSlice
argument_list|(
name|lengthBytes
argument_list|,
name|startAddress
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|byte
name|code
init|=
name|lengthBytes
operator|.
name|bytes
index|[
name|lengthBytes
operator|.
name|offset
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|code
operator|&
literal|128
operator|)
operator|==
literal|0
condition|)
block|{
comment|// length is 1 byte
name|bytesReader
operator|.
name|fillSlice
argument_list|(
name|term
argument_list|,
name|startAddress
operator|+
literal|1
argument_list|,
operator|(
name|int
operator|)
name|code
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bytesReader
operator|.
name|fillSlice
argument_list|(
name|lengthBytes
argument_list|,
name|startAddress
operator|+
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|int
name|length
init|=
operator|(
operator|(
name|code
operator|&
literal|0x7f
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|lengthBytes
operator|.
name|bytes
index|[
name|lengthBytes
operator|.
name|offset
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
name|bytesReader
operator|.
name|fillSlice
argument_list|(
name|term
argument_list|,
name|startAddress
operator|+
literal|2
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|term
return|;
block|}
block|}
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|data
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|data
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getSorted
specifier|public
specifier|synchronized
name|SortedDocValues
name|getSorted
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedDocValues
name|instance
init|=
name|sortedInstances
operator|.
name|get
argument_list|(
name|field
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|String
name|dataName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
operator|+
literal|"_"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|field
operator|.
name|number
argument_list|)
argument_list|,
name|segmentSuffix
argument_list|,
literal|"dat"
argument_list|)
decl_stmt|;
name|String
name|indexName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
operator|+
literal|"_"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|field
operator|.
name|number
argument_list|)
argument_list|,
name|segmentSuffix
argument_list|,
literal|"idx"
argument_list|)
decl_stmt|;
name|IndexInput
name|data
init|=
literal|null
decl_stmt|;
name|IndexInput
name|index
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|data
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|dataName
argument_list|,
name|state
operator|.
name|context
argument_list|)
expr_stmt|;
name|index
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|indexName
argument_list|,
name|state
operator|.
name|context
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|LegacyDocValuesType
operator|.
name|valueOf
argument_list|(
name|field
operator|.
name|getAttribute
argument_list|(
name|legacyKey
argument_list|)
argument_list|)
condition|)
block|{
case|case
name|BYTES_FIXED_SORTED
case|:
name|instance
operator|=
name|loadBytesFixedSorted
argument_list|(
name|field
argument_list|,
name|data
argument_list|,
name|index
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTES_VAR_SORTED
case|:
name|instance
operator|=
name|loadBytesVarSorted
argument_list|(
name|field
argument_list|,
name|data
argument_list|,
name|index
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
name|CodecUtil
operator|.
name|checkEOF
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|checkEOF
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|data
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|data
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|merging
condition|)
block|{
name|sortedInstances
operator|.
name|put
argument_list|(
name|field
operator|.
name|name
argument_list|,
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|instance
return|;
block|}
DECL|method|loadBytesFixedSorted
specifier|private
name|SortedDocValues
name|loadBytesFixedSorted
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|IndexInput
name|data
parameter_list|,
name|IndexInput
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|data
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_FIXED_SORTED_CODEC_NAME_DAT
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_FIXED_SORTED_VERSION_START
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_FIXED_SORTED_VERSION_CURRENT
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|index
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_FIXED_SORTED_CODEC_NAME_IDX
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_FIXED_SORTED_VERSION_START
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_FIXED_SORTED_VERSION_CURRENT
argument_list|)
expr_stmt|;
specifier|final
name|int
name|fixedLength
init|=
name|data
operator|.
name|readInt
argument_list|()
decl_stmt|;
specifier|final
name|int
name|valueCount
init|=
name|index
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|PagedBytes
name|bytes
init|=
operator|new
name|PagedBytes
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|bytes
operator|.
name|copy
argument_list|(
name|data
argument_list|,
name|fixedLength
operator|*
operator|(
name|long
operator|)
name|valueCount
argument_list|)
expr_stmt|;
specifier|final
name|PagedBytes
operator|.
name|Reader
name|bytesReader
init|=
name|bytes
operator|.
name|freeze
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|PackedInts
operator|.
name|Reader
name|reader
init|=
name|PackedInts
operator|.
name|getReader
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|long
name|bytesUsed
init|=
name|bytesReader
operator|.
name|ramBytesUsed
argument_list|()
operator|+
name|reader
operator|.
name|ramBytesUsed
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|merging
condition|)
block|{
name|ramBytesUsed
operator|.
name|addAndGet
argument_list|(
name|bytesUsed
argument_list|)
expr_stmt|;
name|instanceInfo
operator|.
name|put
argument_list|(
name|field
operator|.
name|name
argument_list|,
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"fixed sorted"
argument_list|,
name|bytesUsed
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|correctBuggyOrds
argument_list|(
operator|new
name|SortedDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getOrd
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|reader
operator|.
name|get
argument_list|(
name|docID
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
specifier|final
name|BytesRef
name|term
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|bytesReader
operator|.
name|fillSlice
argument_list|(
name|term
argument_list|,
name|fixedLength
operator|*
operator|(
name|long
operator|)
name|ord
argument_list|,
name|fixedLength
argument_list|)
expr_stmt|;
return|return
name|term
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
name|valueCount
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|loadBytesVarSorted
specifier|private
name|SortedDocValues
name|loadBytesVarSorted
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|IndexInput
name|data
parameter_list|,
name|IndexInput
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|data
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_VAR_SORTED_CODEC_NAME_DAT
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_VAR_SORTED_VERSION_START
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_VAR_SORTED_VERSION_CURRENT
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|index
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_VAR_SORTED_CODEC_NAME_IDX
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_VAR_SORTED_VERSION_START
argument_list|,
name|Lucene40DocValuesFormat
operator|.
name|BYTES_VAR_SORTED_VERSION_CURRENT
argument_list|)
expr_stmt|;
name|long
name|maxAddress
init|=
name|index
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|PagedBytes
name|bytes
init|=
operator|new
name|PagedBytes
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|bytes
operator|.
name|copy
argument_list|(
name|data
argument_list|,
name|maxAddress
argument_list|)
expr_stmt|;
specifier|final
name|PagedBytes
operator|.
name|Reader
name|bytesReader
init|=
name|bytes
operator|.
name|freeze
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|PackedInts
operator|.
name|Reader
name|addressReader
init|=
name|PackedInts
operator|.
name|getReader
argument_list|(
name|index
argument_list|)
decl_stmt|;
specifier|final
name|PackedInts
operator|.
name|Reader
name|ordsReader
init|=
name|PackedInts
operator|.
name|getReader
argument_list|(
name|index
argument_list|)
decl_stmt|;
specifier|final
name|int
name|valueCount
init|=
name|addressReader
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|long
name|bytesUsed
init|=
name|bytesReader
operator|.
name|ramBytesUsed
argument_list|()
operator|+
name|addressReader
operator|.
name|ramBytesUsed
argument_list|()
operator|+
name|ordsReader
operator|.
name|ramBytesUsed
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|merging
condition|)
block|{
name|ramBytesUsed
operator|.
name|addAndGet
argument_list|(
name|bytesUsed
argument_list|)
expr_stmt|;
name|instanceInfo
operator|.
name|put
argument_list|(
name|field
operator|.
name|name
argument_list|,
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"var sorted"
argument_list|,
name|bytesUsed
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|correctBuggyOrds
argument_list|(
operator|new
name|SortedDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getOrd
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|ordsReader
operator|.
name|get
argument_list|(
name|docID
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
specifier|final
name|BytesRef
name|term
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|long
name|startAddress
init|=
name|addressReader
operator|.
name|get
argument_list|(
name|ord
argument_list|)
decl_stmt|;
name|long
name|endAddress
init|=
name|addressReader
operator|.
name|get
argument_list|(
name|ord
operator|+
literal|1
argument_list|)
decl_stmt|;
name|bytesReader
operator|.
name|fillSlice
argument_list|(
name|term
argument_list|,
name|startAddress
argument_list|,
call|(
name|int
call|)
argument_list|(
name|endAddress
operator|-
name|startAddress
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|term
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
name|valueCount
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|// detects and corrects LUCENE-4717 in old indexes
DECL|method|correctBuggyOrds
specifier|private
name|SortedDocValues
name|correctBuggyOrds
parameter_list|(
specifier|final
name|SortedDocValues
name|in
parameter_list|)
block|{
specifier|final
name|int
name|maxDoc
init|=
name|state
operator|.
name|segmentInfo
operator|.
name|getDocCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|in
operator|.
name|getOrd
argument_list|(
name|i
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
name|in
return|;
comment|// ok
block|}
block|}
comment|// we had ord holes, return an ord-shifting-impl that corrects the bug
return|return
operator|new
name|SortedDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getOrd
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|in
operator|.
name|getOrd
argument_list|(
name|docID
argument_list|)
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
return|return
name|in
operator|.
name|lookupOrd
argument_list|(
name|ord
operator|+
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
name|in
operator|.
name|getValueCount
argument_list|()
operator|-
literal|1
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getSortedNumeric
specifier|public
name|SortedNumericDocValues
name|getSortedNumeric
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Lucene 4.0 does not support SortedNumeric: how did you pull this off?"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getSortedSet
specifier|public
name|SortedSetDocValues
name|getSortedSet
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Lucene 4.0 does not support SortedSet: how did you pull this off?"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getDocsWithField
specifier|public
name|Bits
name|getDocsWithField
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Bits
operator|.
name|MatchAllBits
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|getDocCount
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|ramBytesUsed
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
specifier|synchronized
name|Iterable
argument_list|<
name|?
extends|extends
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
return|return
name|Accountables
operator|.
name|namedAccountables
argument_list|(
literal|"field"
argument_list|,
name|instanceInfo
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|checkIntegrity
specifier|public
name|void
name|checkIntegrity
parameter_list|()
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
DECL|method|getMergeInstance
specifier|public
specifier|synchronized
name|DocValuesProducer
name|getMergeInstance
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|Lucene40DocValuesReader
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
end_class
end_unit
