begin_unit
begin_package
DECL|package|org.apache.lucene.codecs
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import
begin_comment
comment|/**   * Used only for backwards compatibility corner case, to provide  * re-animated norms when all fields are undead.  *   * @lucene.internal */
end_comment
begin_class
DECL|class|UndeadNormsProducer
specifier|public
class|class
name|UndeadNormsProducer
extends|extends
name|NormsProducer
block|{
comment|/** Used to bring undead norms back to life. */
DECL|field|LEGACY_UNDEAD_NORMS_KEY
specifier|public
specifier|final
specifier|static
name|String
name|LEGACY_UNDEAD_NORMS_KEY
init|=
name|UndeadNormsProducer
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".undeadnorms"
decl_stmt|;
comment|/** Use this instance */
DECL|field|INSTANCE
specifier|public
specifier|final
specifier|static
name|NormsProducer
name|INSTANCE
init|=
operator|new
name|UndeadNormsProducer
argument_list|()
decl_stmt|;
DECL|method|UndeadNormsProducer
specifier|private
name|UndeadNormsProducer
parameter_list|()
block|{   }
comment|/* Returns true if all indexed fields have undead norms. */
DECL|method|isUndeadArmy
specifier|public
specifier|static
name|boolean
name|isUndeadArmy
parameter_list|(
name|FieldInfos
name|fieldInfos
parameter_list|)
block|{
name|boolean
name|everythingIsUndead
init|=
literal|true
decl_stmt|;
for|for
control|(
name|FieldInfo
name|fieldInfo
range|:
name|fieldInfos
control|)
block|{
if|if
condition|(
name|fieldInfo
operator|.
name|hasNorms
argument_list|()
condition|)
block|{
name|String
name|isUndead
init|=
name|fieldInfo
operator|.
name|getAttribute
argument_list|(
name|LEGACY_UNDEAD_NORMS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|isUndead
operator|!=
literal|null
condition|)
block|{
assert|assert
literal|"true"
operator|.
name|equals
argument_list|(
name|isUndead
argument_list|)
assert|;
block|}
else|else
block|{
name|everythingIsUndead
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
return|return
name|everythingIsUndead
return|;
block|}
comment|/** Returns true if this field has undead norms. */
DECL|method|isUndead
specifier|public
specifier|static
name|boolean
name|isUndead
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|)
block|{
name|String
name|isUndead
init|=
name|fieldInfo
operator|.
name|getAttribute
argument_list|(
name|LEGACY_UNDEAD_NORMS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|isUndead
operator|!=
literal|null
condition|)
block|{
comment|// Bring undead norms back to life; this is set in Lucene40FieldInfosFormat, to emulate pre-5.0 undead norms
assert|assert
literal|"true"
operator|.
name|equals
argument_list|(
name|isUndead
argument_list|)
assert|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/** Call this to note that the field with these attributes has undead norms. */
DECL|method|setUndead
specifier|public
specifier|static
name|void
name|setUndead
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
parameter_list|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|LEGACY_UNDEAD_NORMS_KEY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNorms
specifier|public
name|NumericDocValues
name|getNorms
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|DocValues
operator|.
name|emptyNumeric
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|checkIntegrity
specifier|public
name|void
name|checkIntegrity
parameter_list|()
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
DECL|method|getMergeInstance
specifier|public
name|NormsProducer
name|getMergeInstance
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
end_class
end_unit
