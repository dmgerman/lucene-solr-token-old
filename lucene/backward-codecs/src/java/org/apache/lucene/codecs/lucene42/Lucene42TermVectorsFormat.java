begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.lucene42
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene42
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|TermVectorsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|TermVectorsReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|TermVectorsWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressionMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_comment
comment|/**  * Lucene 4.2 {@link TermVectorsFormat term vectors format}.  * @deprecated only for reading old segments  */
end_comment
begin_class
annotation|@
name|Deprecated
DECL|class|Lucene42TermVectorsFormat
specifier|public
class|class
name|Lucene42TermVectorsFormat
extends|extends
name|TermVectorsFormat
block|{
comment|// this is actually what 4.2 TVF wrote!
DECL|field|FORMAT_NAME
specifier|static
specifier|final
name|String
name|FORMAT_NAME
init|=
literal|"Lucene41StoredFields"
decl_stmt|;
DECL|field|SEGMENT_SUFFIX
specifier|static
specifier|final
name|String
name|SEGMENT_SUFFIX
init|=
literal|""
decl_stmt|;
DECL|field|COMPRESSION_MODE
specifier|static
specifier|final
name|CompressionMode
name|COMPRESSION_MODE
init|=
name|CompressionMode
operator|.
name|FAST
decl_stmt|;
DECL|field|CHUNK_SIZE
specifier|static
specifier|final
name|int
name|CHUNK_SIZE
init|=
literal|1
operator|<<
literal|12
decl_stmt|;
annotation|@
name|Override
DECL|method|vectorsReader
specifier|public
specifier|final
name|TermVectorsReader
name|vectorsReader
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|SegmentInfo
name|segmentInfo
parameter_list|,
name|FieldInfos
name|fieldInfos
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Lucene42TermVectorsReader
argument_list|(
name|directory
argument_list|,
name|segmentInfo
argument_list|,
name|SEGMENT_SUFFIX
argument_list|,
name|fieldInfos
argument_list|,
name|context
argument_list|,
name|FORMAT_NAME
argument_list|,
name|COMPRESSION_MODE
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|vectorsWriter
specifier|public
name|TermVectorsWriter
name|vectorsWriter
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|SegmentInfo
name|segmentInfo
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"this codec can only be used for reading"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"(compressionMode="
operator|+
name|COMPRESSION_MODE
operator|+
literal|", chunkSize="
operator|+
name|CHUNK_SIZE
operator|+
literal|")"
return|;
block|}
block|}
end_class
end_unit
