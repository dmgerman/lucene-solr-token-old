begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.lucene42
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene42
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene42
operator|.
name|Lucene42TermVectorsReader
operator|.
name|BLOCK_SIZE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene42
operator|.
name|Lucene42TermVectorsReader
operator|.
name|CODEC_SFX_DAT
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene42
operator|.
name|Lucene42TermVectorsReader
operator|.
name|CODEC_SFX_IDX
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene42
operator|.
name|Lucene42TermVectorsReader
operator|.
name|FLAGS_BITS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene42
operator|.
name|Lucene42TermVectorsReader
operator|.
name|OFFSETS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene42
operator|.
name|Lucene42TermVectorsReader
operator|.
name|PAYLOADS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene42
operator|.
name|Lucene42TermVectorsReader
operator|.
name|POSITIONS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene42
operator|.
name|Lucene42TermVectorsReader
operator|.
name|VECTORS_EXTENSION
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene42
operator|.
name|Lucene42TermVectorsReader
operator|.
name|VECTORS_INDEX_EXTENSION
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene42
operator|.
name|Lucene42TermVectorsReader
operator|.
name|VERSION_CURRENT
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|TermVectorsWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|CompressionMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
operator|.
name|Compressor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene41
operator|.
name|Lucene41StoredFieldsIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|GrowableByteArrayDataOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|BlockPackedWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_comment
comment|/**  * writer for Lucene 4.2 term vectors for testing  */
end_comment
begin_class
DECL|class|Lucene42TermVectorsWriter
specifier|final
class|class
name|Lucene42TermVectorsWriter
extends|extends
name|TermVectorsWriter
block|{
comment|// hard limit on the maximum number of documents per chunk
DECL|field|MAX_DOCUMENTS_PER_CHUNK
specifier|static
specifier|final
name|int
name|MAX_DOCUMENTS_PER_CHUNK
init|=
literal|128
decl_stmt|;
DECL|field|directory
specifier|private
specifier|final
name|Directory
name|directory
decl_stmt|;
DECL|field|segment
specifier|private
specifier|final
name|String
name|segment
decl_stmt|;
DECL|field|segmentSuffix
specifier|private
specifier|final
name|String
name|segmentSuffix
decl_stmt|;
DECL|field|indexWriter
specifier|private
name|Lucene41StoredFieldsIndexWriter
name|indexWriter
decl_stmt|;
DECL|field|vectorsStream
specifier|private
name|IndexOutput
name|vectorsStream
decl_stmt|;
DECL|field|compressor
specifier|private
specifier|final
name|Compressor
name|compressor
decl_stmt|;
DECL|field|chunkSize
specifier|private
specifier|final
name|int
name|chunkSize
decl_stmt|;
comment|/** a pending doc */
DECL|class|DocData
specifier|private
class|class
name|DocData
block|{
DECL|field|numFields
specifier|final
name|int
name|numFields
decl_stmt|;
DECL|field|fields
specifier|final
name|Deque
argument_list|<
name|FieldData
argument_list|>
name|fields
decl_stmt|;
DECL|field|posStart
DECL|field|offStart
DECL|field|payStart
specifier|final
name|int
name|posStart
decl_stmt|,
name|offStart
decl_stmt|,
name|payStart
decl_stmt|;
DECL|method|DocData
name|DocData
parameter_list|(
name|int
name|numFields
parameter_list|,
name|int
name|posStart
parameter_list|,
name|int
name|offStart
parameter_list|,
name|int
name|payStart
parameter_list|)
block|{
name|this
operator|.
name|numFields
operator|=
name|numFields
expr_stmt|;
name|this
operator|.
name|fields
operator|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|(
name|numFields
argument_list|)
expr_stmt|;
name|this
operator|.
name|posStart
operator|=
name|posStart
expr_stmt|;
name|this
operator|.
name|offStart
operator|=
name|offStart
expr_stmt|;
name|this
operator|.
name|payStart
operator|=
name|payStart
expr_stmt|;
block|}
DECL|method|addField
name|FieldData
name|addField
parameter_list|(
name|int
name|fieldNum
parameter_list|,
name|int
name|numTerms
parameter_list|,
name|boolean
name|positions
parameter_list|,
name|boolean
name|offsets
parameter_list|,
name|boolean
name|payloads
parameter_list|)
block|{
specifier|final
name|FieldData
name|field
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|field
operator|=
operator|new
name|FieldData
argument_list|(
name|fieldNum
argument_list|,
name|numTerms
argument_list|,
name|positions
argument_list|,
name|offsets
argument_list|,
name|payloads
argument_list|,
name|posStart
argument_list|,
name|offStart
argument_list|,
name|payStart
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|FieldData
name|last
init|=
name|fields
operator|.
name|getLast
argument_list|()
decl_stmt|;
specifier|final
name|int
name|posStart
init|=
name|last
operator|.
name|posStart
operator|+
operator|(
name|last
operator|.
name|hasPositions
condition|?
name|last
operator|.
name|totalPositions
else|:
literal|0
operator|)
decl_stmt|;
specifier|final
name|int
name|offStart
init|=
name|last
operator|.
name|offStart
operator|+
operator|(
name|last
operator|.
name|hasOffsets
condition|?
name|last
operator|.
name|totalPositions
else|:
literal|0
operator|)
decl_stmt|;
specifier|final
name|int
name|payStart
init|=
name|last
operator|.
name|payStart
operator|+
operator|(
name|last
operator|.
name|hasPayloads
condition|?
name|last
operator|.
name|totalPositions
else|:
literal|0
operator|)
decl_stmt|;
name|field
operator|=
operator|new
name|FieldData
argument_list|(
name|fieldNum
argument_list|,
name|numTerms
argument_list|,
name|positions
argument_list|,
name|offsets
argument_list|,
name|payloads
argument_list|,
name|posStart
argument_list|,
name|offStart
argument_list|,
name|payStart
argument_list|)
expr_stmt|;
block|}
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
block|}
DECL|method|addDocData
specifier|private
name|DocData
name|addDocData
parameter_list|(
name|int
name|numVectorFields
parameter_list|)
block|{
name|FieldData
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DocData
argument_list|>
name|it
init|=
name|pendingDocs
operator|.
name|descendingIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|DocData
name|doc
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|doc
operator|.
name|fields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|last
operator|=
name|doc
operator|.
name|fields
operator|.
name|getLast
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
specifier|final
name|DocData
name|doc
decl_stmt|;
if|if
condition|(
name|last
operator|==
literal|null
condition|)
block|{
name|doc
operator|=
operator|new
name|DocData
argument_list|(
name|numVectorFields
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|posStart
init|=
name|last
operator|.
name|posStart
operator|+
operator|(
name|last
operator|.
name|hasPositions
condition|?
name|last
operator|.
name|totalPositions
else|:
literal|0
operator|)
decl_stmt|;
specifier|final
name|int
name|offStart
init|=
name|last
operator|.
name|offStart
operator|+
operator|(
name|last
operator|.
name|hasOffsets
condition|?
name|last
operator|.
name|totalPositions
else|:
literal|0
operator|)
decl_stmt|;
specifier|final
name|int
name|payStart
init|=
name|last
operator|.
name|payStart
operator|+
operator|(
name|last
operator|.
name|hasPayloads
condition|?
name|last
operator|.
name|totalPositions
else|:
literal|0
operator|)
decl_stmt|;
name|doc
operator|=
operator|new
name|DocData
argument_list|(
name|numVectorFields
argument_list|,
name|posStart
argument_list|,
name|offStart
argument_list|,
name|payStart
argument_list|)
expr_stmt|;
block|}
name|pendingDocs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
comment|/** a pending field */
DECL|class|FieldData
specifier|private
class|class
name|FieldData
block|{
DECL|field|hasPositions
DECL|field|hasOffsets
DECL|field|hasPayloads
specifier|final
name|boolean
name|hasPositions
decl_stmt|,
name|hasOffsets
decl_stmt|,
name|hasPayloads
decl_stmt|;
DECL|field|fieldNum
DECL|field|flags
DECL|field|numTerms
specifier|final
name|int
name|fieldNum
decl_stmt|,
name|flags
decl_stmt|,
name|numTerms
decl_stmt|;
DECL|field|freqs
DECL|field|prefixLengths
DECL|field|suffixLengths
specifier|final
name|int
index|[]
name|freqs
decl_stmt|,
name|prefixLengths
decl_stmt|,
name|suffixLengths
decl_stmt|;
DECL|field|posStart
DECL|field|offStart
DECL|field|payStart
specifier|final
name|int
name|posStart
decl_stmt|,
name|offStart
decl_stmt|,
name|payStart
decl_stmt|;
DECL|field|totalPositions
name|int
name|totalPositions
decl_stmt|;
DECL|field|ord
name|int
name|ord
decl_stmt|;
DECL|method|FieldData
name|FieldData
parameter_list|(
name|int
name|fieldNum
parameter_list|,
name|int
name|numTerms
parameter_list|,
name|boolean
name|positions
parameter_list|,
name|boolean
name|offsets
parameter_list|,
name|boolean
name|payloads
parameter_list|,
name|int
name|posStart
parameter_list|,
name|int
name|offStart
parameter_list|,
name|int
name|payStart
parameter_list|)
block|{
name|this
operator|.
name|fieldNum
operator|=
name|fieldNum
expr_stmt|;
name|this
operator|.
name|numTerms
operator|=
name|numTerms
expr_stmt|;
name|this
operator|.
name|hasPositions
operator|=
name|positions
expr_stmt|;
name|this
operator|.
name|hasOffsets
operator|=
name|offsets
expr_stmt|;
name|this
operator|.
name|hasPayloads
operator|=
name|payloads
expr_stmt|;
name|this
operator|.
name|flags
operator|=
operator|(
name|positions
condition|?
name|POSITIONS
else|:
literal|0
operator|)
operator||
operator|(
name|offsets
condition|?
name|OFFSETS
else|:
literal|0
operator|)
operator||
operator|(
name|payloads
condition|?
name|PAYLOADS
else|:
literal|0
operator|)
expr_stmt|;
name|this
operator|.
name|freqs
operator|=
operator|new
name|int
index|[
name|numTerms
index|]
expr_stmt|;
name|this
operator|.
name|prefixLengths
operator|=
operator|new
name|int
index|[
name|numTerms
index|]
expr_stmt|;
name|this
operator|.
name|suffixLengths
operator|=
operator|new
name|int
index|[
name|numTerms
index|]
expr_stmt|;
name|this
operator|.
name|posStart
operator|=
name|posStart
expr_stmt|;
name|this
operator|.
name|offStart
operator|=
name|offStart
expr_stmt|;
name|this
operator|.
name|payStart
operator|=
name|payStart
expr_stmt|;
name|totalPositions
operator|=
literal|0
expr_stmt|;
name|ord
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|addTerm
name|void
name|addTerm
parameter_list|(
name|int
name|freq
parameter_list|,
name|int
name|prefixLength
parameter_list|,
name|int
name|suffixLength
parameter_list|)
block|{
name|freqs
index|[
name|ord
index|]
operator|=
name|freq
expr_stmt|;
name|prefixLengths
index|[
name|ord
index|]
operator|=
name|prefixLength
expr_stmt|;
name|suffixLengths
index|[
name|ord
index|]
operator|=
name|suffixLength
expr_stmt|;
operator|++
name|ord
expr_stmt|;
block|}
DECL|method|addPosition
name|void
name|addPosition
parameter_list|(
name|int
name|position
parameter_list|,
name|int
name|startOffset
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|payloadLength
parameter_list|)
block|{
if|if
condition|(
name|hasPositions
condition|)
block|{
if|if
condition|(
name|posStart
operator|+
name|totalPositions
operator|==
name|positionsBuf
operator|.
name|length
condition|)
block|{
name|positionsBuf
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|positionsBuf
argument_list|)
expr_stmt|;
block|}
name|positionsBuf
index|[
name|posStart
operator|+
name|totalPositions
index|]
operator|=
name|position
expr_stmt|;
block|}
if|if
condition|(
name|hasOffsets
condition|)
block|{
if|if
condition|(
name|offStart
operator|+
name|totalPositions
operator|==
name|startOffsetsBuf
operator|.
name|length
condition|)
block|{
specifier|final
name|int
name|newLength
init|=
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|offStart
operator|+
name|totalPositions
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|startOffsetsBuf
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|startOffsetsBuf
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
name|lengthsBuf
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|lengthsBuf
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
block|}
name|startOffsetsBuf
index|[
name|offStart
operator|+
name|totalPositions
index|]
operator|=
name|startOffset
expr_stmt|;
name|lengthsBuf
index|[
name|offStart
operator|+
name|totalPositions
index|]
operator|=
name|length
expr_stmt|;
block|}
if|if
condition|(
name|hasPayloads
condition|)
block|{
if|if
condition|(
name|payStart
operator|+
name|totalPositions
operator|==
name|payloadLengthsBuf
operator|.
name|length
condition|)
block|{
name|payloadLengthsBuf
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|payloadLengthsBuf
argument_list|)
expr_stmt|;
block|}
name|payloadLengthsBuf
index|[
name|payStart
operator|+
name|totalPositions
index|]
operator|=
name|payloadLength
expr_stmt|;
block|}
operator|++
name|totalPositions
expr_stmt|;
block|}
block|}
DECL|field|numDocs
specifier|private
name|int
name|numDocs
decl_stmt|;
comment|// total number of docs seen
DECL|field|pendingDocs
specifier|private
specifier|final
name|Deque
argument_list|<
name|DocData
argument_list|>
name|pendingDocs
decl_stmt|;
comment|// pending docs
DECL|field|curDoc
specifier|private
name|DocData
name|curDoc
decl_stmt|;
comment|// current document
DECL|field|curField
specifier|private
name|FieldData
name|curField
decl_stmt|;
comment|// current field
DECL|field|lastTerm
specifier|private
specifier|final
name|BytesRef
name|lastTerm
decl_stmt|;
DECL|field|positionsBuf
DECL|field|startOffsetsBuf
DECL|field|lengthsBuf
DECL|field|payloadLengthsBuf
specifier|private
name|int
index|[]
name|positionsBuf
decl_stmt|,
name|startOffsetsBuf
decl_stmt|,
name|lengthsBuf
decl_stmt|,
name|payloadLengthsBuf
decl_stmt|;
DECL|field|termSuffixes
specifier|private
specifier|final
name|GrowableByteArrayDataOutput
name|termSuffixes
decl_stmt|;
comment|// buffered term suffixes
DECL|field|payloadBytes
specifier|private
specifier|final
name|GrowableByteArrayDataOutput
name|payloadBytes
decl_stmt|;
comment|// buffered term payloads
DECL|field|writer
specifier|private
specifier|final
name|BlockPackedWriter
name|writer
decl_stmt|;
comment|/** Sole constructor. */
DECL|method|Lucene42TermVectorsWriter
specifier|public
name|Lucene42TermVectorsWriter
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|SegmentInfo
name|si
parameter_list|,
name|String
name|segmentSuffix
parameter_list|,
name|IOContext
name|context
parameter_list|,
name|String
name|formatName
parameter_list|,
name|CompressionMode
name|compressionMode
parameter_list|,
name|int
name|chunkSize
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|directory
operator|!=
literal|null
assert|;
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
name|this
operator|.
name|segment
operator|=
name|si
operator|.
name|name
expr_stmt|;
name|this
operator|.
name|segmentSuffix
operator|=
name|segmentSuffix
expr_stmt|;
name|this
operator|.
name|compressor
operator|=
name|compressionMode
operator|.
name|newCompressor
argument_list|()
expr_stmt|;
name|this
operator|.
name|chunkSize
operator|=
name|chunkSize
expr_stmt|;
name|numDocs
operator|=
literal|0
expr_stmt|;
name|pendingDocs
operator|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
expr_stmt|;
name|termSuffixes
operator|=
operator|new
name|GrowableByteArrayDataOutput
argument_list|(
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|chunkSize
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|payloadBytes
operator|=
operator|new
name|GrowableByteArrayDataOutput
argument_list|(
name|ArrayUtil
operator|.
name|oversize
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|lastTerm
operator|=
operator|new
name|BytesRef
argument_list|(
name|ArrayUtil
operator|.
name|oversize
argument_list|(
literal|30
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|IndexOutput
name|indexStream
init|=
name|directory
operator|.
name|createOutput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segment
argument_list|,
name|segmentSuffix
argument_list|,
name|VECTORS_INDEX_EXTENSION
argument_list|)
argument_list|,
name|context
argument_list|)
decl_stmt|;
try|try
block|{
name|vectorsStream
operator|=
name|directory
operator|.
name|createOutput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segment
argument_list|,
name|segmentSuffix
argument_list|,
name|VECTORS_EXTENSION
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
specifier|final
name|String
name|codecNameIdx
init|=
name|formatName
operator|+
name|CODEC_SFX_IDX
decl_stmt|;
specifier|final
name|String
name|codecNameDat
init|=
name|formatName
operator|+
name|CODEC_SFX_DAT
decl_stmt|;
name|CodecUtil
operator|.
name|writeHeader
argument_list|(
name|indexStream
argument_list|,
name|codecNameIdx
argument_list|,
name|VERSION_CURRENT
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|writeHeader
argument_list|(
name|vectorsStream
argument_list|,
name|codecNameDat
argument_list|,
name|VERSION_CURRENT
argument_list|)
expr_stmt|;
assert|assert
name|CodecUtil
operator|.
name|headerLength
argument_list|(
name|codecNameDat
argument_list|)
operator|==
name|vectorsStream
operator|.
name|getFilePointer
argument_list|()
assert|;
assert|assert
name|CodecUtil
operator|.
name|headerLength
argument_list|(
name|codecNameIdx
argument_list|)
operator|==
name|indexStream
operator|.
name|getFilePointer
argument_list|()
assert|;
name|indexWriter
operator|=
operator|new
name|Lucene41StoredFieldsIndexWriter
argument_list|(
name|indexStream
argument_list|)
expr_stmt|;
name|indexStream
operator|=
literal|null
expr_stmt|;
name|vectorsStream
operator|.
name|writeVInt
argument_list|(
name|PackedInts
operator|.
name|VERSION_CURRENT
argument_list|)
expr_stmt|;
name|vectorsStream
operator|.
name|writeVInt
argument_list|(
name|chunkSize
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|BlockPackedWriter
argument_list|(
name|vectorsStream
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|positionsBuf
operator|=
operator|new
name|int
index|[
literal|1024
index|]
expr_stmt|;
name|startOffsetsBuf
operator|=
operator|new
name|int
index|[
literal|1024
index|]
expr_stmt|;
name|lengthsBuf
operator|=
operator|new
name|int
index|[
literal|1024
index|]
expr_stmt|;
name|payloadLengthsBuf
operator|=
operator|new
name|int
index|[
literal|1024
index|]
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|indexStream
argument_list|)
expr_stmt|;
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|vectorsStream
argument_list|,
name|indexWriter
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|vectorsStream
operator|=
literal|null
expr_stmt|;
name|indexWriter
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|abort
specifier|public
name|void
name|abort
parameter_list|()
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|deleteFilesIgnoringExceptions
argument_list|(
name|directory
argument_list|,
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segment
argument_list|,
name|segmentSuffix
argument_list|,
name|VECTORS_EXTENSION
argument_list|)
argument_list|,
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segment
argument_list|,
name|segmentSuffix
argument_list|,
name|VECTORS_INDEX_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startDocument
specifier|public
name|void
name|startDocument
parameter_list|(
name|int
name|numVectorFields
parameter_list|)
throws|throws
name|IOException
block|{
name|curDoc
operator|=
name|addDocData
argument_list|(
name|numVectorFields
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finishDocument
specifier|public
name|void
name|finishDocument
parameter_list|()
throws|throws
name|IOException
block|{
comment|// append the payload bytes of the doc after its terms
name|termSuffixes
operator|.
name|writeBytes
argument_list|(
name|payloadBytes
operator|.
name|bytes
argument_list|,
name|payloadBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|payloadBytes
operator|.
name|length
operator|=
literal|0
expr_stmt|;
operator|++
name|numDocs
expr_stmt|;
if|if
condition|(
name|triggerFlush
argument_list|()
condition|)
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
name|curDoc
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startField
specifier|public
name|void
name|startField
parameter_list|(
name|FieldInfo
name|info
parameter_list|,
name|int
name|numTerms
parameter_list|,
name|boolean
name|positions
parameter_list|,
name|boolean
name|offsets
parameter_list|,
name|boolean
name|payloads
parameter_list|)
throws|throws
name|IOException
block|{
name|curField
operator|=
name|curDoc
operator|.
name|addField
argument_list|(
name|info
operator|.
name|number
argument_list|,
name|numTerms
argument_list|,
name|positions
argument_list|,
name|offsets
argument_list|,
name|payloads
argument_list|)
expr_stmt|;
name|lastTerm
operator|.
name|length
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finishField
specifier|public
name|void
name|finishField
parameter_list|()
throws|throws
name|IOException
block|{
name|curField
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startTerm
specifier|public
name|void
name|startTerm
parameter_list|(
name|BytesRef
name|term
parameter_list|,
name|int
name|freq
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|freq
operator|>=
literal|1
assert|;
specifier|final
name|int
name|prefix
init|=
name|StringHelper
operator|.
name|bytesDifference
argument_list|(
name|lastTerm
argument_list|,
name|term
argument_list|)
decl_stmt|;
name|curField
operator|.
name|addTerm
argument_list|(
name|freq
argument_list|,
name|prefix
argument_list|,
name|term
operator|.
name|length
operator|-
name|prefix
argument_list|)
expr_stmt|;
name|termSuffixes
operator|.
name|writeBytes
argument_list|(
name|term
operator|.
name|bytes
argument_list|,
name|term
operator|.
name|offset
operator|+
name|prefix
argument_list|,
name|term
operator|.
name|length
operator|-
name|prefix
argument_list|)
expr_stmt|;
comment|// copy last term
if|if
condition|(
name|lastTerm
operator|.
name|bytes
operator|.
name|length
operator|<
name|term
operator|.
name|length
condition|)
block|{
name|lastTerm
operator|.
name|bytes
operator|=
operator|new
name|byte
index|[
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|term
operator|.
name|length
argument_list|,
literal|1
argument_list|)
index|]
expr_stmt|;
block|}
name|lastTerm
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|lastTerm
operator|.
name|length
operator|=
name|term
operator|.
name|length
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|term
operator|.
name|bytes
argument_list|,
name|term
operator|.
name|offset
argument_list|,
name|lastTerm
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|term
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addPosition
specifier|public
name|void
name|addPosition
parameter_list|(
name|int
name|position
parameter_list|,
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|,
name|BytesRef
name|payload
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|curField
operator|.
name|flags
operator|!=
literal|0
assert|;
name|curField
operator|.
name|addPosition
argument_list|(
name|position
argument_list|,
name|startOffset
argument_list|,
name|endOffset
operator|-
name|startOffset
argument_list|,
name|payload
operator|==
literal|null
condition|?
literal|0
else|:
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|curField
operator|.
name|hasPayloads
operator|&&
name|payload
operator|!=
literal|null
condition|)
block|{
name|payloadBytes
operator|.
name|writeBytes
argument_list|(
name|payload
operator|.
name|bytes
argument_list|,
name|payload
operator|.
name|offset
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|triggerFlush
specifier|private
name|boolean
name|triggerFlush
parameter_list|()
block|{
return|return
name|termSuffixes
operator|.
name|length
operator|>=
name|chunkSize
operator|||
name|pendingDocs
operator|.
name|size
argument_list|()
operator|>=
name|MAX_DOCUMENTS_PER_CHUNK
return|;
block|}
DECL|method|flush
specifier|private
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|chunkDocs
init|=
name|pendingDocs
operator|.
name|size
argument_list|()
decl_stmt|;
assert|assert
name|chunkDocs
operator|>
literal|0
operator|:
name|chunkDocs
assert|;
comment|// write the index file
name|indexWriter
operator|.
name|writeIndex
argument_list|(
name|chunkDocs
argument_list|,
name|vectorsStream
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|docBase
init|=
name|numDocs
operator|-
name|chunkDocs
decl_stmt|;
name|vectorsStream
operator|.
name|writeVInt
argument_list|(
name|docBase
argument_list|)
expr_stmt|;
name|vectorsStream
operator|.
name|writeVInt
argument_list|(
name|chunkDocs
argument_list|)
expr_stmt|;
comment|// total number of fields of the chunk
specifier|final
name|int
name|totalFields
init|=
name|flushNumFields
argument_list|(
name|chunkDocs
argument_list|)
decl_stmt|;
if|if
condition|(
name|totalFields
operator|>
literal|0
condition|)
block|{
comment|// unique field numbers (sorted)
specifier|final
name|int
index|[]
name|fieldNums
init|=
name|flushFieldNums
argument_list|()
decl_stmt|;
comment|// offsets in the array of unique field numbers
name|flushFields
argument_list|(
name|totalFields
argument_list|,
name|fieldNums
argument_list|)
expr_stmt|;
comment|// flags (does the field have positions, offsets, payloads?)
name|flushFlags
argument_list|(
name|totalFields
argument_list|,
name|fieldNums
argument_list|)
expr_stmt|;
comment|// number of terms of each field
name|flushNumTerms
argument_list|(
name|totalFields
argument_list|)
expr_stmt|;
comment|// prefix and suffix lengths for each field
name|flushTermLengths
argument_list|()
expr_stmt|;
comment|// term freqs - 1 (because termFreq is always>=1) for each term
name|flushTermFreqs
argument_list|()
expr_stmt|;
comment|// positions for all terms, when enabled
name|flushPositions
argument_list|()
expr_stmt|;
comment|// offsets for all terms, when enabled
name|flushOffsets
argument_list|(
name|fieldNums
argument_list|)
expr_stmt|;
comment|// payload lengths for all terms, when enabled
name|flushPayloadLengths
argument_list|()
expr_stmt|;
comment|// compress terms and payloads and write them to the output
name|compressor
operator|.
name|compress
argument_list|(
name|termSuffixes
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|termSuffixes
operator|.
name|length
argument_list|,
name|vectorsStream
argument_list|)
expr_stmt|;
block|}
comment|// reset
name|pendingDocs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|curDoc
operator|=
literal|null
expr_stmt|;
name|curField
operator|=
literal|null
expr_stmt|;
name|termSuffixes
operator|.
name|length
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|flushNumFields
specifier|private
name|int
name|flushNumFields
parameter_list|(
name|int
name|chunkDocs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|chunkDocs
operator|==
literal|1
condition|)
block|{
specifier|final
name|int
name|numFields
init|=
name|pendingDocs
operator|.
name|getFirst
argument_list|()
operator|.
name|numFields
decl_stmt|;
name|vectorsStream
operator|.
name|writeVInt
argument_list|(
name|numFields
argument_list|)
expr_stmt|;
return|return
name|numFields
return|;
block|}
else|else
block|{
name|writer
operator|.
name|reset
argument_list|(
name|vectorsStream
argument_list|)
expr_stmt|;
name|int
name|totalFields
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DocData
name|dd
range|:
name|pendingDocs
control|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|dd
operator|.
name|numFields
argument_list|)
expr_stmt|;
name|totalFields
operator|+=
name|dd
operator|.
name|numFields
expr_stmt|;
block|}
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
return|return
name|totalFields
return|;
block|}
block|}
comment|/** Returns a sorted array containing unique field numbers */
DECL|method|flushFieldNums
specifier|private
name|int
index|[]
name|flushFieldNums
parameter_list|()
throws|throws
name|IOException
block|{
name|SortedSet
argument_list|<
name|Integer
argument_list|>
name|fieldNums
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DocData
name|dd
range|:
name|pendingDocs
control|)
block|{
for|for
control|(
name|FieldData
name|fd
range|:
name|dd
operator|.
name|fields
control|)
block|{
name|fieldNums
operator|.
name|add
argument_list|(
name|fd
operator|.
name|fieldNum
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|int
name|numDistinctFields
init|=
name|fieldNums
operator|.
name|size
argument_list|()
decl_stmt|;
assert|assert
name|numDistinctFields
operator|>
literal|0
assert|;
specifier|final
name|int
name|bitsRequired
init|=
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
name|fieldNums
operator|.
name|last
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|token
init|=
operator|(
name|Math
operator|.
name|min
argument_list|(
name|numDistinctFields
operator|-
literal|1
argument_list|,
literal|0x07
argument_list|)
operator|<<
literal|5
operator|)
operator||
name|bitsRequired
decl_stmt|;
name|vectorsStream
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
name|numDistinctFields
operator|-
literal|1
operator|>=
literal|0x07
condition|)
block|{
name|vectorsStream
operator|.
name|writeVInt
argument_list|(
name|numDistinctFields
operator|-
literal|1
operator|-
literal|0x07
argument_list|)
expr_stmt|;
block|}
specifier|final
name|PackedInts
operator|.
name|Writer
name|writer
init|=
name|PackedInts
operator|.
name|getWriterNoHeader
argument_list|(
name|vectorsStream
argument_list|,
name|PackedInts
operator|.
name|Format
operator|.
name|PACKED
argument_list|,
name|fieldNums
operator|.
name|size
argument_list|()
argument_list|,
name|bitsRequired
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|fieldNum
range|:
name|fieldNums
control|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|fieldNum
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
name|int
index|[]
name|fns
init|=
operator|new
name|int
index|[
name|fieldNums
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|key
range|:
name|fieldNums
control|)
block|{
name|fns
index|[
name|i
operator|++
index|]
operator|=
name|key
expr_stmt|;
block|}
return|return
name|fns
return|;
block|}
DECL|method|flushFields
specifier|private
name|void
name|flushFields
parameter_list|(
name|int
name|totalFields
parameter_list|,
name|int
index|[]
name|fieldNums
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|PackedInts
operator|.
name|Writer
name|writer
init|=
name|PackedInts
operator|.
name|getWriterNoHeader
argument_list|(
name|vectorsStream
argument_list|,
name|PackedInts
operator|.
name|Format
operator|.
name|PACKED
argument_list|,
name|totalFields
argument_list|,
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
name|fieldNums
operator|.
name|length
operator|-
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|DocData
name|dd
range|:
name|pendingDocs
control|)
block|{
for|for
control|(
name|FieldData
name|fd
range|:
name|dd
operator|.
name|fields
control|)
block|{
specifier|final
name|int
name|fieldNumIndex
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|fieldNums
argument_list|,
name|fd
operator|.
name|fieldNum
argument_list|)
decl_stmt|;
assert|assert
name|fieldNumIndex
operator|>=
literal|0
assert|;
name|writer
operator|.
name|add
argument_list|(
name|fieldNumIndex
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
DECL|method|flushFlags
specifier|private
name|void
name|flushFlags
parameter_list|(
name|int
name|totalFields
parameter_list|,
name|int
index|[]
name|fieldNums
parameter_list|)
throws|throws
name|IOException
block|{
comment|// check if fields always have the same flags
name|boolean
name|nonChangingFlags
init|=
literal|true
decl_stmt|;
name|int
index|[]
name|fieldFlags
init|=
operator|new
name|int
index|[
name|fieldNums
operator|.
name|length
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|fieldFlags
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|outer
label|:
for|for
control|(
name|DocData
name|dd
range|:
name|pendingDocs
control|)
block|{
for|for
control|(
name|FieldData
name|fd
range|:
name|dd
operator|.
name|fields
control|)
block|{
specifier|final
name|int
name|fieldNumOff
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|fieldNums
argument_list|,
name|fd
operator|.
name|fieldNum
argument_list|)
decl_stmt|;
assert|assert
name|fieldNumOff
operator|>=
literal|0
assert|;
if|if
condition|(
name|fieldFlags
index|[
name|fieldNumOff
index|]
operator|==
operator|-
literal|1
condition|)
block|{
name|fieldFlags
index|[
name|fieldNumOff
index|]
operator|=
name|fd
operator|.
name|flags
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldFlags
index|[
name|fieldNumOff
index|]
operator|!=
name|fd
operator|.
name|flags
condition|)
block|{
name|nonChangingFlags
operator|=
literal|false
expr_stmt|;
break|break
name|outer
break|;
block|}
block|}
block|}
if|if
condition|(
name|nonChangingFlags
condition|)
block|{
comment|// write one flag per field num
name|vectorsStream
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|PackedInts
operator|.
name|Writer
name|writer
init|=
name|PackedInts
operator|.
name|getWriterNoHeader
argument_list|(
name|vectorsStream
argument_list|,
name|PackedInts
operator|.
name|Format
operator|.
name|PACKED
argument_list|,
name|fieldFlags
operator|.
name|length
argument_list|,
name|FLAGS_BITS
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|flags
range|:
name|fieldFlags
control|)
block|{
assert|assert
name|flags
operator|>=
literal|0
assert|;
name|writer
operator|.
name|add
argument_list|(
name|flags
argument_list|)
expr_stmt|;
block|}
assert|assert
name|writer
operator|.
name|ord
argument_list|()
operator|==
name|fieldFlags
operator|.
name|length
operator|-
literal|1
assert|;
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// write one flag for every field instance
name|vectorsStream
operator|.
name|writeVInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|PackedInts
operator|.
name|Writer
name|writer
init|=
name|PackedInts
operator|.
name|getWriterNoHeader
argument_list|(
name|vectorsStream
argument_list|,
name|PackedInts
operator|.
name|Format
operator|.
name|PACKED
argument_list|,
name|totalFields
argument_list|,
name|FLAGS_BITS
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|DocData
name|dd
range|:
name|pendingDocs
control|)
block|{
for|for
control|(
name|FieldData
name|fd
range|:
name|dd
operator|.
name|fields
control|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|fd
operator|.
name|flags
argument_list|)
expr_stmt|;
block|}
block|}
assert|assert
name|writer
operator|.
name|ord
argument_list|()
operator|==
name|totalFields
operator|-
literal|1
assert|;
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|flushNumTerms
specifier|private
name|void
name|flushNumTerms
parameter_list|(
name|int
name|totalFields
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|maxNumTerms
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DocData
name|dd
range|:
name|pendingDocs
control|)
block|{
for|for
control|(
name|FieldData
name|fd
range|:
name|dd
operator|.
name|fields
control|)
block|{
name|maxNumTerms
operator||=
name|fd
operator|.
name|numTerms
expr_stmt|;
block|}
block|}
specifier|final
name|int
name|bitsRequired
init|=
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
name|maxNumTerms
argument_list|)
decl_stmt|;
name|vectorsStream
operator|.
name|writeVInt
argument_list|(
name|bitsRequired
argument_list|)
expr_stmt|;
specifier|final
name|PackedInts
operator|.
name|Writer
name|writer
init|=
name|PackedInts
operator|.
name|getWriterNoHeader
argument_list|(
name|vectorsStream
argument_list|,
name|PackedInts
operator|.
name|Format
operator|.
name|PACKED
argument_list|,
name|totalFields
argument_list|,
name|bitsRequired
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|DocData
name|dd
range|:
name|pendingDocs
control|)
block|{
for|for
control|(
name|FieldData
name|fd
range|:
name|dd
operator|.
name|fields
control|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|fd
operator|.
name|numTerms
argument_list|)
expr_stmt|;
block|}
block|}
assert|assert
name|writer
operator|.
name|ord
argument_list|()
operator|==
name|totalFields
operator|-
literal|1
assert|;
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
DECL|method|flushTermLengths
specifier|private
name|void
name|flushTermLengths
parameter_list|()
throws|throws
name|IOException
block|{
name|writer
operator|.
name|reset
argument_list|(
name|vectorsStream
argument_list|)
expr_stmt|;
for|for
control|(
name|DocData
name|dd
range|:
name|pendingDocs
control|)
block|{
for|for
control|(
name|FieldData
name|fd
range|:
name|dd
operator|.
name|fields
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fd
operator|.
name|numTerms
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|fd
operator|.
name|prefixLengths
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
name|writer
operator|.
name|reset
argument_list|(
name|vectorsStream
argument_list|)
expr_stmt|;
for|for
control|(
name|DocData
name|dd
range|:
name|pendingDocs
control|)
block|{
for|for
control|(
name|FieldData
name|fd
range|:
name|dd
operator|.
name|fields
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fd
operator|.
name|numTerms
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|fd
operator|.
name|suffixLengths
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
DECL|method|flushTermFreqs
specifier|private
name|void
name|flushTermFreqs
parameter_list|()
throws|throws
name|IOException
block|{
name|writer
operator|.
name|reset
argument_list|(
name|vectorsStream
argument_list|)
expr_stmt|;
for|for
control|(
name|DocData
name|dd
range|:
name|pendingDocs
control|)
block|{
for|for
control|(
name|FieldData
name|fd
range|:
name|dd
operator|.
name|fields
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fd
operator|.
name|numTerms
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|fd
operator|.
name|freqs
index|[
name|i
index|]
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
DECL|method|flushPositions
specifier|private
name|void
name|flushPositions
parameter_list|()
throws|throws
name|IOException
block|{
name|writer
operator|.
name|reset
argument_list|(
name|vectorsStream
argument_list|)
expr_stmt|;
for|for
control|(
name|DocData
name|dd
range|:
name|pendingDocs
control|)
block|{
for|for
control|(
name|FieldData
name|fd
range|:
name|dd
operator|.
name|fields
control|)
block|{
if|if
condition|(
name|fd
operator|.
name|hasPositions
condition|)
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fd
operator|.
name|numTerms
condition|;
operator|++
name|i
control|)
block|{
name|int
name|previousPosition
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fd
operator|.
name|freqs
index|[
name|i
index|]
condition|;
operator|++
name|j
control|)
block|{
specifier|final
name|int
name|position
init|=
name|positionsBuf
index|[
name|fd
operator|.
name|posStart
operator|+
name|pos
operator|++
index|]
decl_stmt|;
name|writer
operator|.
name|add
argument_list|(
name|position
operator|-
name|previousPosition
argument_list|)
expr_stmt|;
name|previousPosition
operator|=
name|position
expr_stmt|;
block|}
block|}
assert|assert
name|pos
operator|==
name|fd
operator|.
name|totalPositions
assert|;
block|}
block|}
block|}
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
DECL|method|flushOffsets
specifier|private
name|void
name|flushOffsets
parameter_list|(
name|int
index|[]
name|fieldNums
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|hasOffsets
init|=
literal|false
decl_stmt|;
name|long
index|[]
name|sumPos
init|=
operator|new
name|long
index|[
name|fieldNums
operator|.
name|length
index|]
decl_stmt|;
name|long
index|[]
name|sumOffsets
init|=
operator|new
name|long
index|[
name|fieldNums
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|DocData
name|dd
range|:
name|pendingDocs
control|)
block|{
for|for
control|(
name|FieldData
name|fd
range|:
name|dd
operator|.
name|fields
control|)
block|{
name|hasOffsets
operator||=
name|fd
operator|.
name|hasOffsets
expr_stmt|;
if|if
condition|(
name|fd
operator|.
name|hasOffsets
operator|&&
name|fd
operator|.
name|hasPositions
condition|)
block|{
specifier|final
name|int
name|fieldNumOff
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|fieldNums
argument_list|,
name|fd
operator|.
name|fieldNum
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fd
operator|.
name|numTerms
condition|;
operator|++
name|i
control|)
block|{
name|int
name|previousPos
init|=
literal|0
decl_stmt|;
name|int
name|previousOff
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fd
operator|.
name|freqs
index|[
name|i
index|]
condition|;
operator|++
name|j
control|)
block|{
specifier|final
name|int
name|position
init|=
name|positionsBuf
index|[
name|fd
operator|.
name|posStart
operator|+
name|pos
index|]
decl_stmt|;
specifier|final
name|int
name|startOffset
init|=
name|startOffsetsBuf
index|[
name|fd
operator|.
name|offStart
operator|+
name|pos
index|]
decl_stmt|;
name|sumPos
index|[
name|fieldNumOff
index|]
operator|+=
name|position
operator|-
name|previousPos
expr_stmt|;
name|sumOffsets
index|[
name|fieldNumOff
index|]
operator|+=
name|startOffset
operator|-
name|previousOff
expr_stmt|;
name|previousPos
operator|=
name|position
expr_stmt|;
name|previousOff
operator|=
name|startOffset
expr_stmt|;
operator|++
name|pos
expr_stmt|;
block|}
block|}
assert|assert
name|pos
operator|==
name|fd
operator|.
name|totalPositions
assert|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasOffsets
condition|)
block|{
comment|// nothing to do
return|return;
block|}
specifier|final
name|float
index|[]
name|charsPerTerm
init|=
operator|new
name|float
index|[
name|fieldNums
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldNums
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|charsPerTerm
index|[
name|i
index|]
operator|=
operator|(
name|sumPos
index|[
name|i
index|]
operator|<=
literal|0
operator|||
name|sumOffsets
index|[
name|i
index|]
operator|<=
literal|0
operator|)
condition|?
literal|0
else|:
call|(
name|float
call|)
argument_list|(
operator|(
name|double
operator|)
name|sumOffsets
index|[
name|i
index|]
operator|/
name|sumPos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// start offsets
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldNums
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|vectorsStream
operator|.
name|writeInt
argument_list|(
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
name|charsPerTerm
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|reset
argument_list|(
name|vectorsStream
argument_list|)
expr_stmt|;
for|for
control|(
name|DocData
name|dd
range|:
name|pendingDocs
control|)
block|{
for|for
control|(
name|FieldData
name|fd
range|:
name|dd
operator|.
name|fields
control|)
block|{
if|if
condition|(
operator|(
name|fd
operator|.
name|flags
operator|&
name|OFFSETS
operator|)
operator|!=
literal|0
condition|)
block|{
specifier|final
name|int
name|fieldNumOff
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|fieldNums
argument_list|,
name|fd
operator|.
name|fieldNum
argument_list|)
decl_stmt|;
specifier|final
name|float
name|cpt
init|=
name|charsPerTerm
index|[
name|fieldNumOff
index|]
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fd
operator|.
name|numTerms
condition|;
operator|++
name|i
control|)
block|{
name|int
name|previousPos
init|=
literal|0
decl_stmt|;
name|int
name|previousOff
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fd
operator|.
name|freqs
index|[
name|i
index|]
condition|;
operator|++
name|j
control|)
block|{
specifier|final
name|int
name|position
init|=
name|fd
operator|.
name|hasPositions
condition|?
name|positionsBuf
index|[
name|fd
operator|.
name|posStart
operator|+
name|pos
index|]
else|:
literal|0
decl_stmt|;
specifier|final
name|int
name|startOffset
init|=
name|startOffsetsBuf
index|[
name|fd
operator|.
name|offStart
operator|+
name|pos
index|]
decl_stmt|;
name|writer
operator|.
name|add
argument_list|(
name|startOffset
operator|-
name|previousOff
operator|-
call|(
name|int
call|)
argument_list|(
name|cpt
operator|*
operator|(
name|position
operator|-
name|previousPos
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|previousPos
operator|=
name|position
expr_stmt|;
name|previousOff
operator|=
name|startOffset
expr_stmt|;
operator|++
name|pos
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
comment|// lengths
name|writer
operator|.
name|reset
argument_list|(
name|vectorsStream
argument_list|)
expr_stmt|;
for|for
control|(
name|DocData
name|dd
range|:
name|pendingDocs
control|)
block|{
for|for
control|(
name|FieldData
name|fd
range|:
name|dd
operator|.
name|fields
control|)
block|{
if|if
condition|(
operator|(
name|fd
operator|.
name|flags
operator|&
name|OFFSETS
operator|)
operator|!=
literal|0
condition|)
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fd
operator|.
name|numTerms
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fd
operator|.
name|freqs
index|[
name|i
index|]
condition|;
operator|++
name|j
control|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|lengthsBuf
index|[
name|fd
operator|.
name|offStart
operator|+
name|pos
operator|++
index|]
operator|-
name|fd
operator|.
name|prefixLengths
index|[
name|i
index|]
operator|-
name|fd
operator|.
name|suffixLengths
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
assert|assert
name|pos
operator|==
name|fd
operator|.
name|totalPositions
assert|;
block|}
block|}
block|}
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
DECL|method|flushPayloadLengths
specifier|private
name|void
name|flushPayloadLengths
parameter_list|()
throws|throws
name|IOException
block|{
name|writer
operator|.
name|reset
argument_list|(
name|vectorsStream
argument_list|)
expr_stmt|;
for|for
control|(
name|DocData
name|dd
range|:
name|pendingDocs
control|)
block|{
for|for
control|(
name|FieldData
name|fd
range|:
name|dd
operator|.
name|fields
control|)
block|{
if|if
condition|(
name|fd
operator|.
name|hasPayloads
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fd
operator|.
name|totalPositions
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|payloadLengthsBuf
index|[
name|fd
operator|.
name|payStart
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|(
name|FieldInfos
name|fis
parameter_list|,
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|pendingDocs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|numDocs
operator|!=
name|this
operator|.
name|numDocs
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Wrote "
operator|+
name|this
operator|.
name|numDocs
operator|+
literal|" docs, finish called with numDocs="
operator|+
name|numDocs
argument_list|)
throw|;
block|}
name|indexWriter
operator|.
name|finish
argument_list|(
name|numDocs
argument_list|,
name|vectorsStream
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|vectorsStream
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addProx
specifier|public
name|void
name|addProx
parameter_list|(
name|int
name|numProx
parameter_list|,
name|DataInput
name|positions
parameter_list|,
name|DataInput
name|offsets
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|(
name|curField
operator|.
name|hasPositions
operator|)
operator|==
operator|(
name|positions
operator|!=
literal|null
operator|)
assert|;
assert|assert
operator|(
name|curField
operator|.
name|hasOffsets
operator|)
operator|==
operator|(
name|offsets
operator|!=
literal|null
operator|)
assert|;
if|if
condition|(
name|curField
operator|.
name|hasPositions
condition|)
block|{
specifier|final
name|int
name|posStart
init|=
name|curField
operator|.
name|posStart
operator|+
name|curField
operator|.
name|totalPositions
decl_stmt|;
if|if
condition|(
name|posStart
operator|+
name|numProx
operator|>
name|positionsBuf
operator|.
name|length
condition|)
block|{
name|positionsBuf
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|positionsBuf
argument_list|,
name|posStart
operator|+
name|numProx
argument_list|)
expr_stmt|;
block|}
name|int
name|position
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|curField
operator|.
name|hasPayloads
condition|)
block|{
specifier|final
name|int
name|payStart
init|=
name|curField
operator|.
name|payStart
operator|+
name|curField
operator|.
name|totalPositions
decl_stmt|;
if|if
condition|(
name|payStart
operator|+
name|numProx
operator|>
name|payloadLengthsBuf
operator|.
name|length
condition|)
block|{
name|payloadLengthsBuf
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|payloadLengthsBuf
argument_list|,
name|payStart
operator|+
name|numProx
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numProx
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|code
init|=
name|positions
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|code
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// This position has a payload
specifier|final
name|int
name|payloadLength
init|=
name|positions
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|payloadLengthsBuf
index|[
name|payStart
operator|+
name|i
index|]
operator|=
name|payloadLength
expr_stmt|;
name|payloadBytes
operator|.
name|copyBytes
argument_list|(
name|positions
argument_list|,
name|payloadLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|payloadLengthsBuf
index|[
name|payStart
operator|+
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|position
operator|+=
name|code
operator|>>>
literal|1
expr_stmt|;
name|positionsBuf
index|[
name|posStart
operator|+
name|i
index|]
operator|=
name|position
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numProx
condition|;
operator|++
name|i
control|)
block|{
name|position
operator|+=
operator|(
name|positions
operator|.
name|readVInt
argument_list|()
operator|>>>
literal|1
operator|)
expr_stmt|;
name|positionsBuf
index|[
name|posStart
operator|+
name|i
index|]
operator|=
name|position
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|curField
operator|.
name|hasOffsets
condition|)
block|{
specifier|final
name|int
name|offStart
init|=
name|curField
operator|.
name|offStart
operator|+
name|curField
operator|.
name|totalPositions
decl_stmt|;
if|if
condition|(
name|offStart
operator|+
name|numProx
operator|>
name|startOffsetsBuf
operator|.
name|length
condition|)
block|{
specifier|final
name|int
name|newLength
init|=
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|offStart
operator|+
name|numProx
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|startOffsetsBuf
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|startOffsetsBuf
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
name|lengthsBuf
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|lengthsBuf
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
block|}
name|int
name|lastOffset
init|=
literal|0
decl_stmt|,
name|startOffset
decl_stmt|,
name|endOffset
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numProx
condition|;
operator|++
name|i
control|)
block|{
name|startOffset
operator|=
name|lastOffset
operator|+
name|offsets
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|endOffset
operator|=
name|startOffset
operator|+
name|offsets
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|lastOffset
operator|=
name|endOffset
expr_stmt|;
name|startOffsetsBuf
index|[
name|offStart
operator|+
name|i
index|]
operator|=
name|startOffset
expr_stmt|;
name|lengthsBuf
index|[
name|offStart
operator|+
name|i
index|]
operator|=
name|endOffset
operator|-
name|startOffset
expr_stmt|;
block|}
block|}
name|curField
operator|.
name|totalPositions
operator|+=
name|numProx
expr_stmt|;
block|}
block|}
end_class
end_unit
