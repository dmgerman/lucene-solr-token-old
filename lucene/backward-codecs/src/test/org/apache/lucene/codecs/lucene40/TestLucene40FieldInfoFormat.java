begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.lucene40
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene40
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene40
operator|.
name|Lucene40FieldInfosFormat
operator|.
name|LegacyDocValuesType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BaseFieldInfoFormatTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|DocValuesType
import|;
end_import
begin_comment
comment|/** Test Lucene 4.0 FieldInfos Format */
end_comment
begin_class
DECL|class|TestLucene40FieldInfoFormat
specifier|public
class|class
name|TestLucene40FieldInfoFormat
extends|extends
name|BaseFieldInfoFormatTestCase
block|{
DECL|field|codec
specifier|private
specifier|final
name|Codec
name|codec
init|=
operator|new
name|Lucene40RWCodec
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|getCodec
specifier|protected
name|Codec
name|getCodec
parameter_list|()
block|{
return|return
name|codec
return|;
block|}
comment|// we only support these three dv types
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|getDocValuesTypes
specifier|protected
name|DocValuesType
index|[]
name|getDocValuesTypes
parameter_list|()
block|{
return|return
operator|new
name|DocValuesType
index|[]
block|{
name|DocValuesType
operator|.
name|BINARY
block|,
name|DocValuesType
operator|.
name|NUMERIC
block|,
name|DocValuesType
operator|.
name|SORTED
block|}
return|;
block|}
comment|// but we have more internal typing information, previously recorded in fieldinfos.
comment|// this is exposed via attributes (so our writer expects them to be set by the dv impl)
annotation|@
name|Override
DECL|method|addAttributes
specifier|protected
name|void
name|addAttributes
parameter_list|(
name|FieldInfo
name|fi
parameter_list|)
block|{
name|DocValuesType
name|dvType
init|=
name|fi
operator|.
name|getDocValuesType
argument_list|()
decl_stmt|;
if|if
condition|(
name|dvType
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|dvType
condition|)
block|{
case|case
name|BINARY
case|:
name|fi
operator|.
name|putAttribute
argument_list|(
name|Lucene40FieldInfosFormat
operator|.
name|LEGACY_DV_TYPE_KEY
argument_list|,
name|LegacyDocValuesType
operator|.
name|BYTES_FIXED_STRAIGHT
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|NUMERIC
case|:
name|fi
operator|.
name|putAttribute
argument_list|(
name|Lucene40FieldInfosFormat
operator|.
name|LEGACY_DV_TYPE_KEY
argument_list|,
name|LegacyDocValuesType
operator|.
name|FIXED_INTS_32
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SORTED
case|:
name|fi
operator|.
name|putAttribute
argument_list|(
name|Lucene40FieldInfosFormat
operator|.
name|LEGACY_DV_TYPE_KEY
argument_list|,
name|LegacyDocValuesType
operator|.
name|BYTES_FIXED_SORTED
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
if|if
condition|(
name|fi
operator|.
name|hasNorms
argument_list|()
condition|)
block|{
name|fi
operator|.
name|putAttribute
argument_list|(
name|Lucene40FieldInfosFormat
operator|.
name|LEGACY_NORM_TYPE_KEY
argument_list|,
name|LegacyDocValuesType
operator|.
name|FIXED_INTS_8
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
