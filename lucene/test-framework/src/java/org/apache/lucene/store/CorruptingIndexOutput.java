begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.store
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/** Corrupts on bit of a file after close */
end_comment
begin_class
DECL|class|CorruptingIndexOutput
specifier|public
class|class
name|CorruptingIndexOutput
extends|extends
name|IndexOutput
block|{
DECL|field|out
specifier|protected
specifier|final
name|IndexOutput
name|out
decl_stmt|;
DECL|field|dir
specifier|final
name|Directory
name|dir
decl_stmt|;
DECL|field|byteToCorrupt
specifier|final
name|long
name|byteToCorrupt
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
decl_stmt|;
DECL|method|CorruptingIndexOutput
specifier|public
name|CorruptingIndexOutput
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|long
name|byteToCorrupt
parameter_list|,
name|IndexOutput
name|out
parameter_list|)
block|{
name|super
argument_list|(
literal|"CorruptingIndexOutput("
operator|+
name|out
operator|+
literal|")"
argument_list|,
name|out
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|byteToCorrupt
operator|=
name|byteToCorrupt
expr_stmt|;
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|out
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
operator|==
literal|false
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// NOTE: must corrupt after file is closed, because if we corrupt "inlined" (as bytes are being written) the checksum sees the wrong
comment|// bytes and is "correct"!!
name|corruptFile
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|corruptFile
specifier|protected
name|void
name|corruptFile
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Now corrupt the specfied byte:
name|String
name|newTempName
decl_stmt|;
try|try
init|(
name|IndexOutput
name|tmpOut
init|=
name|dir
operator|.
name|createTempOutput
argument_list|(
literal|"tmp"
argument_list|,
literal|"tmp"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|;
name|IndexInput
name|in
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|out
operator|.
name|getName
argument_list|()
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|newTempName
operator|=
name|tmpOut
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|byteToCorrupt
operator|>=
name|in
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"byteToCorrupt="
operator|+
name|byteToCorrupt
operator|+
literal|" but file \""
operator|+
name|out
operator|.
name|getName
argument_list|()
operator|+
literal|"\" is only length="
operator|+
name|in
operator|.
name|length
argument_list|()
argument_list|)
throw|;
block|}
name|tmpOut
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|byteToCorrupt
argument_list|)
expr_stmt|;
comment|// Flip the 0th bit:
name|tmpOut
operator|.
name|writeByte
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
operator|^
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|tmpOut
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|in
operator|.
name|length
argument_list|()
operator|-
name|byteToCorrupt
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Delete original and copy corrupt version back:
name|dir
operator|.
name|deleteFile
argument_list|(
name|out
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|dir
operator|.
name|copyFrom
argument_list|(
name|dir
argument_list|,
name|newTempName
argument_list|,
name|out
operator|.
name|getName
argument_list|()
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|dir
operator|.
name|deleteFile
argument_list|(
name|newTempName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFilePointer
specifier|public
name|long
name|getFilePointer
parameter_list|()
block|{
return|return
name|out
operator|.
name|getFilePointer
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getChecksum
specifier|public
name|long
name|getChecksum
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|out
operator|.
name|getChecksum
argument_list|()
operator|^
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CorruptingIndexOutput("
operator|+
name|out
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|writeByte
specifier|public
name|void
name|writeByte
parameter_list|(
name|byte
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeBytes
specifier|public
name|void
name|writeBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|writeByte
argument_list|(
name|b
index|[
name|offset
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
