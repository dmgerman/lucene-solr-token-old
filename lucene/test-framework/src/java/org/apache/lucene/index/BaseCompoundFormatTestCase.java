begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StoredField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FilterDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FlushInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|MockDirectoryWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|NRTCachingDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import
begin_comment
comment|/**  * Abstract class to do basic tests for a compound format.  * NOTE: This test focuses on the compound impl, nothing else.  * The [stretch] goal is for this test to be  * so thorough in testing a new CompoundFormat that if this  * test passes, then all Lucene/Solr tests should also pass.  Ie,  * if there is some bug in a given CompoundFormat that this  * test fails to catch then this test needs to be improved! */
end_comment
begin_class
DECL|class|BaseCompoundFormatTestCase
specifier|public
specifier|abstract
class|class
name|BaseCompoundFormatTestCase
extends|extends
name|BaseIndexFileFormatTestCase
block|{
comment|// test that empty CFS is empty
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|SegmentInfo
name|si
init|=
name|newSegmentInfo
argument_list|(
name|dir
argument_list|,
literal|"_123"
argument_list|)
decl_stmt|;
name|si
operator|.
name|setFiles
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|write
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|Directory
name|cfs
init|=
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|getCompoundReader
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cfs
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|cfs
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**     * This test creates compound file based on a single file.    * Files of different sizes are tested: 0, 1, 10, 100 bytes.    */
DECL|method|testSingleFile
specifier|public
name|void
name|testSingleFile
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|data
index|[]
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|10
block|,
literal|100
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|testfile
init|=
literal|"_"
operator|+
name|i
operator|+
literal|".test"
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|createSequenceFile
argument_list|(
name|dir
argument_list|,
name|testfile
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|data
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|SegmentInfo
name|si
init|=
name|newSegmentInfo
argument_list|(
name|dir
argument_list|,
literal|"_"
operator|+
name|i
argument_list|)
decl_stmt|;
name|si
operator|.
name|setFiles
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|testfile
argument_list|)
argument_list|)
expr_stmt|;
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|write
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|Directory
name|cfs
init|=
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|getCompoundReader
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|IndexInput
name|expected
init|=
name|dir
operator|.
name|openInput
argument_list|(
name|testfile
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|actual
init|=
name|cfs
operator|.
name|openInput
argument_list|(
name|testfile
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertSameStreams
argument_list|(
name|testfile
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameSeekBehavior
argument_list|(
name|testfile
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|expected
operator|.
name|close
argument_list|()
expr_stmt|;
name|actual
operator|.
name|close
argument_list|()
expr_stmt|;
name|cfs
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**     * This test creates compound file based on two files.    */
DECL|method|testTwoFiles
specifier|public
name|void
name|testTwoFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|files
index|[]
init|=
block|{
literal|"_123.d1"
block|,
literal|"_123.d2"
block|}
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|createSequenceFile
argument_list|(
name|dir
argument_list|,
name|files
index|[
literal|0
index|]
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|createSequenceFile
argument_list|(
name|dir
argument_list|,
name|files
index|[
literal|1
index|]
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|114
argument_list|)
expr_stmt|;
name|SegmentInfo
name|si
init|=
name|newSegmentInfo
argument_list|(
name|dir
argument_list|,
literal|"_123"
argument_list|)
decl_stmt|;
name|si
operator|.
name|setFiles
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|write
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|Directory
name|cfs
init|=
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|getCompoundReader
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|IndexInput
name|expected
init|=
name|dir
operator|.
name|openInput
argument_list|(
name|file
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|actual
init|=
name|cfs
operator|.
name|openInput
argument_list|(
name|file
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertSameStreams
argument_list|(
name|file
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameSeekBehavior
argument_list|(
name|file
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|expected
operator|.
name|close
argument_list|()
expr_stmt|;
name|actual
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|cfs
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// test that a second call to close() behaves according to Closeable
DECL|method|testDoubleClose
specifier|public
name|void
name|testDoubleClose
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|testfile
init|=
literal|"_123.test"
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|testfile
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfo
name|si
init|=
name|newSegmentInfo
argument_list|(
name|dir
argument_list|,
literal|"_123"
argument_list|)
decl_stmt|;
name|si
operator|.
name|setFiles
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|testfile
argument_list|)
argument_list|)
expr_stmt|;
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|write
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|Directory
name|cfs
init|=
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|getCompoundReader
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cfs
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|cfs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cfs
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// second close should not throw exception
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-5724: things like NRTCachingDir rely upon IOContext being properly passed down
DECL|method|testPassIOContext
specifier|public
name|void
name|testPassIOContext
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|testfile
init|=
literal|"_123.test"
decl_stmt|;
specifier|final
name|IOContext
name|myContext
init|=
operator|new
name|IOContext
argument_list|()
decl_stmt|;
name|Directory
name|dir
init|=
operator|new
name|FilterDirectory
argument_list|(
name|newDirectory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|IndexOutput
name|createOutput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|assertSame
argument_list|(
name|myContext
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|createOutput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|testfile
argument_list|,
name|myContext
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfo
name|si
init|=
name|newSegmentInfo
argument_list|(
name|dir
argument_list|,
literal|"_123"
argument_list|)
decl_stmt|;
name|si
operator|.
name|setFiles
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|testfile
argument_list|)
argument_list|)
expr_stmt|;
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|write
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|myContext
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-5724: actually test we play nice with NRTCachingDir and massive file
DECL|method|testLargeCFS
specifier|public
name|void
name|testLargeCFS
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|testfile
init|=
literal|"_123.test"
decl_stmt|;
name|IOContext
name|context
init|=
operator|new
name|IOContext
argument_list|(
operator|new
name|FlushInfo
argument_list|(
literal|0
argument_list|,
literal|512
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
operator|new
name|NRTCachingDirectory
argument_list|(
name|newFSDirectory
argument_list|(
name|createTempDir
argument_list|()
argument_list|)
argument_list|,
literal|2.0
argument_list|,
literal|25.0
argument_list|)
decl_stmt|;
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|testfile
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|512
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1024
operator|*
literal|1024
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|writeBytes
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfo
name|si
init|=
name|newSegmentInfo
argument_list|(
name|dir
argument_list|,
literal|"_123"
argument_list|)
decl_stmt|;
name|si
operator|.
name|setFiles
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|testfile
argument_list|)
argument_list|)
expr_stmt|;
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|write
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Just tests that we can open all files returned by listAll
DECL|method|testListAll
specifier|public
name|void
name|testListAll
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
comment|// riw should sometimes create docvalues fields, etc
name|RandomIndexWriter
name|riw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
comment|// these fields should sometimes get term vectors, etc
name|Field
name|idField
init|=
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|Field
name|bodyField
init|=
name|newTextField
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|idField
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|bodyField
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|idField
operator|.
name|setStringValue
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|bodyField
operator|.
name|setStringValue
argument_list|(
name|TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|riw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|7
argument_list|)
operator|==
literal|0
condition|)
block|{
name|riw
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
name|riw
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfos
name|infos
init|=
name|SegmentInfos
operator|.
name|readLatestCommit
argument_list|(
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
name|SegmentCommitInfo
name|si
range|:
name|infos
control|)
block|{
if|if
condition|(
name|si
operator|.
name|info
operator|.
name|getUseCompoundFile
argument_list|()
condition|)
block|{
try|try
init|(
name|Directory
name|cfsDir
init|=
name|si
operator|.
name|info
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|getCompoundReader
argument_list|(
name|dir
argument_list|,
name|si
operator|.
name|info
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
for|for
control|(
name|String
name|cfsFile
range|:
name|cfsDir
operator|.
name|listAll
argument_list|()
control|)
block|{
try|try
init|(
name|IndexInput
name|cfsIn
init|=
name|cfsDir
operator|.
name|openInput
argument_list|(
name|cfsFile
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
assert|assert
name|cfsIn
operator|!=
literal|null
assert|;
block|}
block|}
block|}
block|}
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// test that cfs reader is read-only
DECL|method|testCreateOutputDisabled
specifier|public
name|void
name|testCreateOutputDisabled
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|SegmentInfo
name|si
init|=
name|newSegmentInfo
argument_list|(
name|dir
argument_list|,
literal|"_123"
argument_list|)
decl_stmt|;
name|si
operator|.
name|setFiles
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|write
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|Directory
name|cfs
init|=
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|getCompoundReader
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
try|try
block|{
name|cfs
operator|.
name|createOutput
argument_list|(
literal|"bogus"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"didn't get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{
comment|// expected UOE
block|}
name|cfs
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// test that cfs reader is read-only
DECL|method|testDeleteFileDisabled
specifier|public
name|void
name|testDeleteFileDisabled
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|testfile
init|=
literal|"_123.test"
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|testfile
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfo
name|si
init|=
name|newSegmentInfo
argument_list|(
name|dir
argument_list|,
literal|"_123"
argument_list|)
decl_stmt|;
name|si
operator|.
name|setFiles
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|write
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|Directory
name|cfs
init|=
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|getCompoundReader
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
try|try
block|{
name|cfs
operator|.
name|deleteFile
argument_list|(
name|testfile
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"didn't get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{
comment|// expected UOE
block|}
name|cfs
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// test that cfs reader is read-only
DECL|method|testRenameFileDisabled
specifier|public
name|void
name|testRenameFileDisabled
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|testfile
init|=
literal|"_123.test"
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|testfile
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfo
name|si
init|=
name|newSegmentInfo
argument_list|(
name|dir
argument_list|,
literal|"_123"
argument_list|)
decl_stmt|;
name|si
operator|.
name|setFiles
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|write
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|Directory
name|cfs
init|=
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|getCompoundReader
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
try|try
block|{
name|cfs
operator|.
name|renameFile
argument_list|(
name|testfile
argument_list|,
literal|"bogus"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"didn't get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{
comment|// expected UOE
block|}
name|cfs
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// test that cfs reader is read-only
DECL|method|testSyncDisabled
specifier|public
name|void
name|testSyncDisabled
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|testfile
init|=
literal|"_123.test"
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|testfile
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfo
name|si
init|=
name|newSegmentInfo
argument_list|(
name|dir
argument_list|,
literal|"_123"
argument_list|)
decl_stmt|;
name|si
operator|.
name|setFiles
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|write
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|Directory
name|cfs
init|=
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|getCompoundReader
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
try|try
block|{
name|cfs
operator|.
name|sync
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|testfile
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"didn't get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{
comment|// expected UOE
block|}
name|cfs
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// test that cfs reader is read-only
DECL|method|testMakeLockDisabled
specifier|public
name|void
name|testMakeLockDisabled
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|testfile
init|=
literal|"_123.test"
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|testfile
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfo
name|si
init|=
name|newSegmentInfo
argument_list|(
name|dir
argument_list|,
literal|"_123"
argument_list|)
decl_stmt|;
name|si
operator|.
name|setFiles
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|write
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|Directory
name|cfs
init|=
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|getCompoundReader
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
try|try
block|{
name|cfs
operator|.
name|obtainLock
argument_list|(
literal|"foobar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"didn't get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{
comment|// expected UOE
block|}
name|cfs
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**     * This test creates a compound file based on a large number of files of    * various length. The file content is generated randomly. The sizes range    * from 0 to 1Mb. Some of the sizes are selected to test the buffering    * logic in the file reading code. For this the chunk variable is set to    * the length of the buffer used internally by the compound file logic.    */
DECL|method|testRandomFiles
specifier|public
name|void
name|testRandomFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
comment|// Setup the test segment
name|String
name|segment
init|=
literal|"_123"
decl_stmt|;
name|int
name|chunk
init|=
literal|1024
decl_stmt|;
comment|// internal buffer size used by the stream
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".zero"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".ten"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".hundred"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".big1"
argument_list|,
name|chunk
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".big2"
argument_list|,
name|chunk
operator|-
literal|1
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".big3"
argument_list|,
name|chunk
operator|+
literal|1
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".big4"
argument_list|,
literal|3
operator|*
name|chunk
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".big5"
argument_list|,
literal|3
operator|*
name|chunk
operator|-
literal|1
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".big6"
argument_list|,
literal|3
operator|*
name|chunk
operator|+
literal|1
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".big7"
argument_list|,
literal|1000
operator|*
name|chunk
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|dir
operator|.
name|listAll
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|startsWith
argument_list|(
name|segment
argument_list|)
condition|)
block|{
name|files
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
name|SegmentInfo
name|si
init|=
name|newSegmentInfo
argument_list|(
name|dir
argument_list|,
literal|"_123"
argument_list|)
decl_stmt|;
name|si
operator|.
name|setFiles
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|write
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|Directory
name|cfs
init|=
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|getCompoundReader
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|IndexInput
name|check
init|=
name|dir
operator|.
name|openInput
argument_list|(
name|file
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|test
init|=
name|cfs
operator|.
name|openInput
argument_list|(
name|file
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertSameStreams
argument_list|(
name|file
argument_list|,
name|check
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|assertSameSeekBehavior
argument_list|(
name|file
argument_list|,
name|check
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|check
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|cfs
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Make sure we don't somehow use more than 1 descriptor
comment|// when reading a CFS with many subs:
DECL|method|testManySubFiles
specifier|public
name|void
name|testManySubFiles
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|MockDirectoryWrapper
name|dir
init|=
name|newMockFSDirectory
argument_list|(
name|createTempDir
argument_list|(
literal|"CFSManySubFiles"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|FILE_COUNT
init|=
name|atLeast
argument_list|(
literal|500
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|fileIdx
init|=
literal|0
init|;
name|fileIdx
operator|<
name|FILE_COUNT
condition|;
name|fileIdx
operator|++
control|)
block|{
name|String
name|file
init|=
literal|"_123."
operator|+
name|fileIdx
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|file
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|fileIdx
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dir
operator|.
name|getFileHandleCount
argument_list|()
argument_list|)
expr_stmt|;
name|SegmentInfo
name|si
init|=
name|newSegmentInfo
argument_list|(
name|dir
argument_list|,
literal|"_123"
argument_list|)
decl_stmt|;
name|si
operator|.
name|setFiles
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|write
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|Directory
name|cfs
init|=
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|getCompoundReader
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|IndexInput
index|[]
name|ins
init|=
operator|new
name|IndexInput
index|[
name|FILE_COUNT
index|]
decl_stmt|;
for|for
control|(
name|int
name|fileIdx
init|=
literal|0
init|;
name|fileIdx
operator|<
name|FILE_COUNT
condition|;
name|fileIdx
operator|++
control|)
block|{
name|ins
index|[
name|fileIdx
index|]
operator|=
name|cfs
operator|.
name|openInput
argument_list|(
literal|"_123."
operator|+
name|fileIdx
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dir
operator|.
name|getFileHandleCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|fileIdx
init|=
literal|0
init|;
name|fileIdx
operator|<
name|FILE_COUNT
condition|;
name|fileIdx
operator|++
control|)
block|{
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
name|fileIdx
argument_list|,
name|ins
index|[
name|fileIdx
index|]
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dir
operator|.
name|getFileHandleCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|fileIdx
init|=
literal|0
init|;
name|fileIdx
operator|<
name|FILE_COUNT
condition|;
name|fileIdx
operator|++
control|)
block|{
name|ins
index|[
name|fileIdx
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|cfs
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testClonedStreamsClosing
specifier|public
name|void
name|testClonedStreamsClosing
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Directory
name|cr
init|=
name|createLargeCFS
argument_list|(
name|dir
argument_list|)
decl_stmt|;
comment|// basic clone
name|IndexInput
name|expected
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"_123.f11"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|one
init|=
name|cr
operator|.
name|openInput
argument_list|(
literal|"_123.f11"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|two
init|=
name|one
operator|.
name|clone
argument_list|()
decl_stmt|;
name|assertSameStreams
argument_list|(
literal|"basic clone one"
argument_list|,
name|expected
argument_list|,
name|one
argument_list|)
expr_stmt|;
name|expected
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertSameStreams
argument_list|(
literal|"basic clone two"
argument_list|,
name|expected
argument_list|,
name|two
argument_list|)
expr_stmt|;
comment|// Now close the compound reader
name|cr
operator|.
name|close
argument_list|()
expr_stmt|;
name|expected
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** This test opens two files from a compound stream and verifies that    *  their file positions are independent of each other.    */
DECL|method|testRandomAccess
specifier|public
name|void
name|testRandomAccess
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Directory
name|cr
init|=
name|createLargeCFS
argument_list|(
name|dir
argument_list|)
decl_stmt|;
comment|// Open two files
name|IndexInput
name|e1
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"_123.f11"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|e2
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"_123.f3"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|a1
init|=
name|cr
operator|.
name|openInput
argument_list|(
literal|"_123.f11"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|a2
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"_123.f3"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Seek the first pair
name|e1
operator|.
name|seek
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|a1
operator|.
name|seek
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|byte
name|be1
init|=
name|e1
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
name|ba1
init|=
name|a1
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now seek the second pair
name|e2
operator|.
name|seek
argument_list|(
literal|1027
argument_list|)
expr_stmt|;
name|a2
operator|.
name|seek
argument_list|(
literal|1027
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1027
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1027
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|byte
name|be2
init|=
name|e2
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
name|ba2
init|=
name|a2
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Now make sure the first one didn't move
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now more the first one again, past the buffer length
name|e1
operator|.
name|seek
argument_list|(
literal|1910
argument_list|)
expr_stmt|;
name|a1
operator|.
name|seek
argument_list|(
literal|1910
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1910
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1910
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now make sure the second set didn't move
name|assertEquals
argument_list|(
literal|1028
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1028
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be2
operator|=
name|e2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba2
operator|=
name|a2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Move the second set back, again cross the buffer size
name|e2
operator|.
name|seek
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|a2
operator|.
name|seek
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be2
operator|=
name|e2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba2
operator|=
name|a2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Finally, make sure the first set didn't move
comment|// Now make sure the first one didn't move
name|assertEquals
argument_list|(
literal|1911
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1911
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
name|e1
operator|.
name|close
argument_list|()
expr_stmt|;
name|e2
operator|.
name|close
argument_list|()
expr_stmt|;
name|a1
operator|.
name|close
argument_list|()
expr_stmt|;
name|a2
operator|.
name|close
argument_list|()
expr_stmt|;
name|cr
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** This test opens two files from a compound stream and verifies that    *  their file positions are independent of each other.    */
DECL|method|testRandomAccessClones
specifier|public
name|void
name|testRandomAccessClones
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Directory
name|cr
init|=
name|createLargeCFS
argument_list|(
name|dir
argument_list|)
decl_stmt|;
comment|// Open two files
name|IndexInput
name|e1
init|=
name|cr
operator|.
name|openInput
argument_list|(
literal|"_123.f11"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|e2
init|=
name|cr
operator|.
name|openInput
argument_list|(
literal|"_123.f3"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|a1
init|=
name|e1
operator|.
name|clone
argument_list|()
decl_stmt|;
name|IndexInput
name|a2
init|=
name|e2
operator|.
name|clone
argument_list|()
decl_stmt|;
comment|// Seek the first pair
name|e1
operator|.
name|seek
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|a1
operator|.
name|seek
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|byte
name|be1
init|=
name|e1
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
name|ba1
init|=
name|a1
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now seek the second pair
name|e2
operator|.
name|seek
argument_list|(
literal|1027
argument_list|)
expr_stmt|;
name|a2
operator|.
name|seek
argument_list|(
literal|1027
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1027
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1027
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|byte
name|be2
init|=
name|e2
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
name|ba2
init|=
name|a2
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Now make sure the first one didn't move
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now more the first one again, past the buffer length
name|e1
operator|.
name|seek
argument_list|(
literal|1910
argument_list|)
expr_stmt|;
name|a1
operator|.
name|seek
argument_list|(
literal|1910
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1910
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1910
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now make sure the second set didn't move
name|assertEquals
argument_list|(
literal|1028
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1028
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be2
operator|=
name|e2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba2
operator|=
name|a2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Move the second set back, again cross the buffer size
name|e2
operator|.
name|seek
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|a2
operator|.
name|seek
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be2
operator|=
name|e2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba2
operator|=
name|a2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Finally, make sure the first set didn't move
comment|// Now make sure the first one didn't move
name|assertEquals
argument_list|(
literal|1911
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1911
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
name|e1
operator|.
name|close
argument_list|()
expr_stmt|;
name|e2
operator|.
name|close
argument_list|()
expr_stmt|;
name|a1
operator|.
name|close
argument_list|()
expr_stmt|;
name|a2
operator|.
name|close
argument_list|()
expr_stmt|;
name|cr
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testFileNotFound
specifier|public
name|void
name|testFileNotFound
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Directory
name|cr
init|=
name|createLargeCFS
argument_list|(
name|dir
argument_list|)
decl_stmt|;
comment|// Open bogus file
try|try
block|{
name|cr
operator|.
name|openInput
argument_list|(
literal|"bogus"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"File not found"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|/* success */
empty_stmt|;
block|}
name|cr
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testReadPastEOF
specifier|public
name|void
name|testReadPastEOF
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Directory
name|cr
init|=
name|createLargeCFS
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|IndexInput
name|is
init|=
name|cr
operator|.
name|openInput
argument_list|(
literal|"_123.f2"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|is
operator|.
name|seek
argument_list|(
name|is
operator|.
name|length
argument_list|()
operator|-
literal|10
argument_list|)
expr_stmt|;
name|byte
name|b
index|[]
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|is
operator|.
name|readBytes
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
try|try
block|{
name|is
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Single byte read past end of file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|/* success */
block|}
name|is
operator|.
name|seek
argument_list|(
name|is
operator|.
name|length
argument_list|()
operator|-
literal|10
argument_list|)
expr_stmt|;
try|try
block|{
name|is
operator|.
name|readBytes
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Block read past end of file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|/* success */
block|}
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|cr
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Returns a new fake segment */
DECL|method|newSegmentInfo
specifier|protected
specifier|static
name|SegmentInfo
name|newSegmentInfo
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|SegmentInfo
argument_list|(
name|dir
argument_list|,
name|Version
operator|.
name|LATEST
argument_list|,
name|name
argument_list|,
literal|10000
argument_list|,
literal|false
argument_list|,
name|Codec
operator|.
name|getDefault
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|StringHelper
operator|.
name|randomId
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
comment|/** Creates a file of the specified size with random data. */
DECL|method|createRandomFile
specifier|protected
specifier|static
name|void
name|createRandomFile
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexOutput
name|os
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|name
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Random
name|rnd
init|=
name|random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|b
init|=
operator|(
name|byte
operator|)
name|rnd
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeByte
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Creates a file of the specified size with sequential data. The first    *  byte is written as the start byte provided. All subsequent bytes are    *  computed as start + offset where offset is the number of the byte.    */
DECL|method|createSequenceFile
specifier|protected
specifier|static
name|void
name|createSequenceFile
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|name
parameter_list|,
name|byte
name|start
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexOutput
name|os
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|name
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|os
operator|.
name|writeByte
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|start
operator|++
expr_stmt|;
block|}
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|assertSameStreams
specifier|protected
specifier|static
name|void
name|assertSameStreams
parameter_list|(
name|String
name|msg
parameter_list|,
name|IndexInput
name|expected
parameter_list|,
name|IndexInput
name|test
parameter_list|)
throws|throws
name|IOException
block|{
name|assertNotNull
argument_list|(
name|msg
operator|+
literal|" null expected"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|msg
operator|+
literal|" null test"
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|+
literal|" length"
argument_list|,
name|expected
operator|.
name|length
argument_list|()
argument_list|,
name|test
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|+
literal|" position"
argument_list|,
name|expected
operator|.
name|getFilePointer
argument_list|()
argument_list|,
name|test
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|byte
name|expectedBuffer
index|[]
init|=
operator|new
name|byte
index|[
literal|512
index|]
decl_stmt|;
name|byte
name|testBuffer
index|[]
init|=
operator|new
name|byte
index|[
name|expectedBuffer
operator|.
name|length
index|]
decl_stmt|;
name|long
name|remainder
init|=
name|expected
operator|.
name|length
argument_list|()
operator|-
name|expected
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
while|while
condition|(
name|remainder
operator|>
literal|0
condition|)
block|{
name|int
name|readLen
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|remainder
argument_list|,
name|expectedBuffer
operator|.
name|length
argument_list|)
decl_stmt|;
name|expected
operator|.
name|readBytes
argument_list|(
name|expectedBuffer
argument_list|,
literal|0
argument_list|,
name|readLen
argument_list|)
expr_stmt|;
name|test
operator|.
name|readBytes
argument_list|(
name|testBuffer
argument_list|,
literal|0
argument_list|,
name|readLen
argument_list|)
expr_stmt|;
name|assertEqualArrays
argument_list|(
name|msg
operator|+
literal|", remainder "
operator|+
name|remainder
argument_list|,
name|expectedBuffer
argument_list|,
name|testBuffer
argument_list|,
literal|0
argument_list|,
name|readLen
argument_list|)
expr_stmt|;
name|remainder
operator|-=
name|readLen
expr_stmt|;
block|}
block|}
DECL|method|assertSameStreams
specifier|protected
specifier|static
name|void
name|assertSameStreams
parameter_list|(
name|String
name|msg
parameter_list|,
name|IndexInput
name|expected
parameter_list|,
name|IndexInput
name|actual
parameter_list|,
name|long
name|seekTo
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|seekTo
operator|>=
literal|0
operator|&&
name|seekTo
operator|<
name|expected
operator|.
name|length
argument_list|()
condition|)
block|{
name|expected
operator|.
name|seek
argument_list|(
name|seekTo
argument_list|)
expr_stmt|;
name|actual
operator|.
name|seek
argument_list|(
name|seekTo
argument_list|)
expr_stmt|;
name|assertSameStreams
argument_list|(
name|msg
operator|+
literal|", seek(mid)"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertSameSeekBehavior
specifier|protected
specifier|static
name|void
name|assertSameSeekBehavior
parameter_list|(
name|String
name|msg
parameter_list|,
name|IndexInput
name|expected
parameter_list|,
name|IndexInput
name|actual
parameter_list|)
throws|throws
name|IOException
block|{
comment|// seek to 0
name|long
name|point
init|=
literal|0
decl_stmt|;
name|assertSameStreams
argument_list|(
name|msg
operator|+
literal|", seek(0)"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
name|point
argument_list|)
expr_stmt|;
comment|// seek to middle
name|point
operator|=
name|expected
operator|.
name|length
argument_list|()
operator|/
literal|2l
expr_stmt|;
name|assertSameStreams
argument_list|(
name|msg
operator|+
literal|", seek(mid)"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
name|point
argument_list|)
expr_stmt|;
comment|// seek to end - 2
name|point
operator|=
name|expected
operator|.
name|length
argument_list|()
operator|-
literal|2
expr_stmt|;
name|assertSameStreams
argument_list|(
name|msg
operator|+
literal|", seek(end-2)"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
name|point
argument_list|)
expr_stmt|;
comment|// seek to end - 1
name|point
operator|=
name|expected
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
name|assertSameStreams
argument_list|(
name|msg
operator|+
literal|", seek(end-1)"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
name|point
argument_list|)
expr_stmt|;
comment|// seek to the end
name|point
operator|=
name|expected
operator|.
name|length
argument_list|()
expr_stmt|;
name|assertSameStreams
argument_list|(
name|msg
operator|+
literal|", seek(end)"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
name|point
argument_list|)
expr_stmt|;
comment|// seek past end
name|point
operator|=
name|expected
operator|.
name|length
argument_list|()
operator|+
literal|1
expr_stmt|;
name|assertSameStreams
argument_list|(
name|msg
operator|+
literal|", seek(end+1)"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
name|point
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEqualArrays
specifier|protected
specifier|static
name|void
name|assertEqualArrays
parameter_list|(
name|String
name|msg
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|,
name|byte
index|[]
name|test
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|msg
operator|+
literal|" null expected"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|msg
operator|+
literal|" null test"
argument_list|,
name|test
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|msg
operator|+
literal|" "
operator|+
name|i
argument_list|,
name|expected
index|[
name|i
index|]
argument_list|,
name|test
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**     * Setup a large compound file with a number of components, each of    * which is a sequential file (so that we can easily tell that we are    * reading in the right byte). The methods sets up 20 files - _123.0 to _123.19,    * the size of each file is 1000 bytes.    */
DECL|method|createLargeCFS
specifier|protected
specifier|static
name|Directory
name|createLargeCFS
parameter_list|(
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|createSequenceFile
argument_list|(
name|dir
argument_list|,
literal|"_123.f"
operator|+
name|i
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
literal|"_123.f"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|SegmentInfo
name|si
init|=
name|newSegmentInfo
argument_list|(
name|dir
argument_list|,
literal|"_123"
argument_list|)
decl_stmt|;
name|si
operator|.
name|setFiles
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|write
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|Directory
name|cfs
init|=
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|getCompoundReader
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
return|return
name|cfs
return|;
block|}
annotation|@
name|Override
DECL|method|addRandomFields
specifier|protected
name|void
name|addRandomFields
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
literal|"foobar"
argument_list|,
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|testMergeStability
specifier|public
name|void
name|testMergeStability
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test does not work with CFS"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// LUCENE-6311: make sure the resource name inside a compound file confesses that it's inside a compound file
DECL|method|testResourceNameInsideCompoundFile
specifier|public
name|void
name|testResourceNameInsideCompoundFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|String
name|subFile
init|=
literal|"_123.xyz"
decl_stmt|;
name|createSequenceFile
argument_list|(
name|dir
argument_list|,
name|subFile
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|SegmentInfo
name|si
init|=
name|newSegmentInfo
argument_list|(
name|dir
argument_list|,
literal|"_123"
argument_list|)
decl_stmt|;
name|si
operator|.
name|setFiles
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|subFile
argument_list|)
argument_list|)
expr_stmt|;
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|write
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|Directory
name|cfs
init|=
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|compoundFormat
argument_list|()
operator|.
name|getCompoundReader
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|IndexInput
name|in
init|=
name|cfs
operator|.
name|openInput
argument_list|(
name|subFile
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|String
name|desc
init|=
name|in
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"resource description hides that it's inside a compound file: "
operator|+
name|desc
argument_list|,
name|desc
operator|.
name|contains
argument_list|(
literal|"[slice="
operator|+
name|subFile
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
name|cfs
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
