begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_comment
comment|/**  * A {@link DirectoryReader} that wraps all its subreaders with  * {@link MismatchedLeafReader}  */
end_comment
begin_class
DECL|class|MismatchedDirectoryReader
specifier|public
class|class
name|MismatchedDirectoryReader
extends|extends
name|FilterDirectoryReader
block|{
DECL|class|MismatchedSubReaderWrapper
specifier|static
class|class
name|MismatchedSubReaderWrapper
extends|extends
name|SubReaderWrapper
block|{
DECL|field|random
specifier|final
name|Random
name|random
decl_stmt|;
DECL|method|MismatchedSubReaderWrapper
name|MismatchedSubReaderWrapper
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
name|this
operator|.
name|random
operator|=
name|random
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|wrap
specifier|public
name|LeafReader
name|wrap
parameter_list|(
name|LeafReader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|MismatchedLeafReader
argument_list|(
name|reader
argument_list|,
name|random
argument_list|)
return|;
block|}
block|}
DECL|method|MismatchedDirectoryReader
specifier|public
name|MismatchedDirectoryReader
parameter_list|(
name|DirectoryReader
name|in
parameter_list|,
name|Random
name|random
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|,
operator|new
name|MismatchedSubReaderWrapper
argument_list|(
name|random
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doWrapDirectoryReader
specifier|protected
name|DirectoryReader
name|doWrapDirectoryReader
parameter_list|(
name|DirectoryReader
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|AssertingDirectoryReader
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
end_class
end_unit
