begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
operator|.
name|IntersectVisitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import
begin_comment
comment|/** Simple utility class to track the current BKD stack based solely on calls to {@link IntersectVisitor#compare}. */
end_comment
begin_class
DECL|class|PointsStackTracker
specifier|public
class|class
name|PointsStackTracker
block|{
DECL|field|numDims
specifier|private
specifier|final
name|int
name|numDims
decl_stmt|;
DECL|field|bytesPerDim
specifier|private
specifier|final
name|int
name|bytesPerDim
decl_stmt|;
DECL|field|stack
specifier|public
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|stack
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|class|Cell
specifier|public
class|class
name|Cell
block|{
DECL|field|minPackedValue
specifier|public
specifier|final
name|byte
index|[]
name|minPackedValue
decl_stmt|;
DECL|field|maxPackedValue
specifier|public
specifier|final
name|byte
index|[]
name|maxPackedValue
decl_stmt|;
DECL|method|Cell
specifier|public
name|Cell
parameter_list|(
name|byte
index|[]
name|minPackedValue
parameter_list|,
name|byte
index|[]
name|maxPackedValue
parameter_list|)
block|{
name|this
operator|.
name|minPackedValue
operator|=
name|minPackedValue
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxPackedValue
operator|=
name|maxPackedValue
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|Cell
name|other
parameter_list|)
block|{
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|int
name|offset
init|=
name|dim
operator|*
name|bytesPerDim
decl_stmt|;
comment|// other.min< min?
if|if
condition|(
name|StringHelper
operator|.
name|compare
argument_list|(
name|bytesPerDim
argument_list|,
name|other
operator|.
name|minPackedValue
argument_list|,
name|offset
argument_list|,
name|minPackedValue
argument_list|,
name|offset
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// other.max> max?
if|if
condition|(
name|StringHelper
operator|.
name|compare
argument_list|(
name|bytesPerDim
argument_list|,
name|other
operator|.
name|maxPackedValue
argument_list|,
name|offset
argument_list|,
name|maxPackedValue
argument_list|,
name|offset
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
DECL|method|PointsStackTracker
specifier|public
name|PointsStackTracker
parameter_list|(
name|int
name|numDims
parameter_list|,
name|int
name|bytesPerDim
parameter_list|)
block|{
name|this
operator|.
name|numDims
operator|=
name|numDims
expr_stmt|;
name|this
operator|.
name|bytesPerDim
operator|=
name|bytesPerDim
expr_stmt|;
block|}
DECL|method|onCompare
specifier|public
name|void
name|onCompare
parameter_list|(
name|byte
index|[]
name|minPackedValue
parameter_list|,
name|byte
index|[]
name|maxPackedValue
parameter_list|)
block|{
name|Cell
name|cell
init|=
operator|new
name|Cell
argument_list|(
name|minPackedValue
argument_list|,
name|maxPackedValue
argument_list|)
decl_stmt|;
comment|// Pop stack:
while|while
condition|(
name|stack
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|stack
operator|.
name|get
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
name|cell
argument_list|)
operator|==
literal|false
condition|)
block|{
name|stack
operator|.
name|remove
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//System.out.println("  pop");
block|}
comment|// Push stack:
name|stack
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
comment|// TODO: expose other details about the stack...
block|}
end_class
end_unit
