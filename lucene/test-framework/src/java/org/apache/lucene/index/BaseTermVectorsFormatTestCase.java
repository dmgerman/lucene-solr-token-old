begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PayloadAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|TermVectorsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
operator|.
name|Store
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
operator|.
name|SeekStatus
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import
begin_comment
comment|/**  * Base class aiming at testing {@link TermVectorsFormat term vectors formats}.  * To test a new format, all you need is to register a new {@link Codec} which  * uses it and extend this class and override {@link #getCodec()}.  * @lucene.experimental  */
end_comment
begin_class
DECL|class|BaseTermVectorsFormatTestCase
specifier|public
specifier|abstract
class|class
name|BaseTermVectorsFormatTestCase
extends|extends
name|LuceneTestCase
block|{
DECL|field|savedCodec
specifier|private
name|Codec
name|savedCodec
decl_stmt|;
comment|/**    * Returns the Codec to run tests against    */
DECL|method|getCodec
specifier|protected
specifier|abstract
name|Codec
name|getCodec
parameter_list|()
function_decl|;
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// set the default codec, so adding test cases to this isn't fragile
name|savedCodec
operator|=
name|Codec
operator|.
name|getDefault
argument_list|()
expr_stmt|;
name|Codec
operator|.
name|setDefault
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|Codec
operator|.
name|setDefault
argument_list|(
name|savedCodec
argument_list|)
expr_stmt|;
comment|// restore
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**    * A combination of term vectors options.    */
DECL|enum|Options
specifier|protected
enum|enum
name|Options
block|{
DECL|enum constant|NONE
name|NONE
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|,
DECL|enum constant|POSITIONS
name|POSITIONS
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|,
DECL|enum constant|OFFSETS
name|OFFSETS
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
DECL|enum constant|POSITIONS_AND_OFFSETS
name|POSITIONS_AND_OFFSETS
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
DECL|enum constant|POSITIONS_AND_PAYLOADS
name|POSITIONS_AND_PAYLOADS
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
block|,
DECL|enum constant|POSITIONS_AND_OFFSETS_AND_PAYLOADS
name|POSITIONS_AND_OFFSETS_AND_PAYLOADS
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|;
DECL|field|positions
DECL|field|offsets
DECL|field|payloads
specifier|final
name|boolean
name|positions
block|,
name|offsets
block|,
name|payloads
block|;
DECL|method|Options
specifier|private
name|Options
parameter_list|(
name|boolean
name|positions
parameter_list|,
name|boolean
name|offsets
parameter_list|,
name|boolean
name|payloads
parameter_list|)
block|{
name|this
operator|.
name|positions
operator|=
name|positions
expr_stmt|;
name|this
operator|.
name|offsets
operator|=
name|offsets
expr_stmt|;
name|this
operator|.
name|payloads
operator|=
name|payloads
expr_stmt|;
block|}
block|}
DECL|method|validOptions
specifier|protected
name|Set
argument_list|<
name|Options
argument_list|>
name|validOptions
parameter_list|()
block|{
return|return
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Options
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|randomOptions
specifier|protected
name|Options
name|randomOptions
parameter_list|()
block|{
return|return
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Options
argument_list|>
argument_list|(
name|validOptions
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|fieldType
specifier|protected
name|FieldType
name|fieldType
parameter_list|(
name|Options
name|options
parameter_list|)
block|{
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStoreTermVectorPositions
argument_list|(
name|options
operator|.
name|positions
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStoreTermVectorOffsets
argument_list|(
name|options
operator|.
name|offsets
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStoreTermVectorPayloads
argument_list|(
name|options
operator|.
name|payloads
argument_list|)
expr_stmt|;
name|ft
operator|.
name|freeze
argument_list|()
expr_stmt|;
return|return
name|ft
return|;
block|}
DECL|method|randomPayload
specifier|protected
name|BytesRef
name|randomPayload
parameter_list|()
block|{
specifier|final
name|int
name|len
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|BytesRef
name|payload
init|=
operator|new
name|BytesRef
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|payload
operator|.
name|bytes
argument_list|)
expr_stmt|;
name|payload
operator|.
name|length
operator|=
name|len
expr_stmt|;
return|return
name|payload
return|;
block|}
comment|// custom impl to test cases that are forbidden by the default OffsetAttribute impl
DECL|class|PermissiveOffsetAttributeImpl
specifier|private
specifier|static
class|class
name|PermissiveOffsetAttributeImpl
extends|extends
name|AttributeImpl
implements|implements
name|OffsetAttribute
block|{
DECL|field|start
DECL|field|end
name|int
name|start
decl_stmt|,
name|end
decl_stmt|;
annotation|@
name|Override
DECL|method|startOffset
specifier|public
name|int
name|startOffset
parameter_list|()
block|{
return|return
name|start
return|;
block|}
annotation|@
name|Override
DECL|method|endOffset
specifier|public
name|int
name|endOffset
parameter_list|()
block|{
return|return
name|end
return|;
block|}
annotation|@
name|Override
DECL|method|setOffset
specifier|public
name|void
name|setOffset
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
comment|// no check!
name|start
operator|=
name|startOffset
expr_stmt|;
name|end
operator|=
name|endOffset
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|start
operator|=
name|end
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|other
operator|instanceof
name|PermissiveOffsetAttributeImpl
condition|)
block|{
name|PermissiveOffsetAttributeImpl
name|o
init|=
operator|(
name|PermissiveOffsetAttributeImpl
operator|)
name|other
decl_stmt|;
return|return
name|o
operator|.
name|start
operator|==
name|start
operator|&&
name|o
operator|.
name|end
operator|==
name|end
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|start
operator|+
literal|31
operator|*
name|end
return|;
block|}
annotation|@
name|Override
DECL|method|copyTo
specifier|public
name|void
name|copyTo
parameter_list|(
name|AttributeImpl
name|target
parameter_list|)
block|{
name|OffsetAttribute
name|t
init|=
operator|(
name|OffsetAttribute
operator|)
name|target
decl_stmt|;
name|t
operator|.
name|setOffset
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO: use CannedTokenStream?
DECL|class|RandomTokenStream
specifier|protected
class|class
name|RandomTokenStream
extends|extends
name|TokenStream
block|{
DECL|field|terms
specifier|final
name|String
index|[]
name|terms
decl_stmt|;
DECL|field|termBytes
specifier|final
name|BytesRef
index|[]
name|termBytes
decl_stmt|;
DECL|field|positionsIncrements
specifier|final
name|int
index|[]
name|positionsIncrements
decl_stmt|;
DECL|field|positions
specifier|final
name|int
index|[]
name|positions
decl_stmt|;
DECL|field|startOffsets
DECL|field|endOffsets
specifier|final
name|int
index|[]
name|startOffsets
decl_stmt|,
name|endOffsets
decl_stmt|;
DECL|field|payloads
specifier|final
name|BytesRef
index|[]
name|payloads
decl_stmt|;
DECL|field|freqs
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|freqs
decl_stmt|;
DECL|field|positionToTerms
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|positionToTerms
decl_stmt|;
DECL|field|startOffsetToTerms
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|startOffsetToTerms
decl_stmt|;
DECL|field|termAtt
specifier|final
name|CharTermAttribute
name|termAtt
decl_stmt|;
DECL|field|piAtt
specifier|final
name|PositionIncrementAttribute
name|piAtt
decl_stmt|;
DECL|field|oAtt
specifier|final
name|OffsetAttribute
name|oAtt
decl_stmt|;
DECL|field|pAtt
specifier|final
name|PayloadAttribute
name|pAtt
decl_stmt|;
DECL|field|i
name|int
name|i
init|=
literal|0
decl_stmt|;
DECL|method|RandomTokenStream
specifier|protected
name|RandomTokenStream
parameter_list|(
name|int
name|len
parameter_list|,
name|String
index|[]
name|sampleTerms
parameter_list|,
name|BytesRef
index|[]
name|sampleTermBytes
parameter_list|)
block|{
name|this
argument_list|(
name|len
argument_list|,
name|sampleTerms
argument_list|,
name|sampleTermBytes
argument_list|,
name|rarely
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|RandomTokenStream
specifier|protected
name|RandomTokenStream
parameter_list|(
name|int
name|len
parameter_list|,
name|String
index|[]
name|sampleTerms
parameter_list|,
name|BytesRef
index|[]
name|sampleTermBytes
parameter_list|,
name|boolean
name|offsetsGoBackwards
parameter_list|)
block|{
name|terms
operator|=
operator|new
name|String
index|[
name|len
index|]
expr_stmt|;
name|termBytes
operator|=
operator|new
name|BytesRef
index|[
name|len
index|]
expr_stmt|;
name|positionsIncrements
operator|=
operator|new
name|int
index|[
name|len
index|]
expr_stmt|;
name|positions
operator|=
operator|new
name|int
index|[
name|len
index|]
expr_stmt|;
name|startOffsets
operator|=
operator|new
name|int
index|[
name|len
index|]
expr_stmt|;
name|endOffsets
operator|=
operator|new
name|int
index|[
name|len
index|]
expr_stmt|;
name|payloads
operator|=
operator|new
name|BytesRef
index|[
name|len
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|o
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|sampleTerms
operator|.
name|length
argument_list|)
decl_stmt|;
name|terms
index|[
name|i
index|]
operator|=
name|sampleTerms
index|[
name|o
index|]
expr_stmt|;
name|termBytes
index|[
name|i
index|]
operator|=
name|sampleTermBytes
index|[
name|o
index|]
expr_stmt|;
name|positionsIncrements
index|[
name|i
index|]
operator|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|i
operator|==
literal|0
condition|?
literal|1
else|:
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
name|offsetsGoBackwards
condition|)
block|{
name|startOffsets
index|[
name|i
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
expr_stmt|;
name|endOffsets
index|[
name|i
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|startOffsets
index|[
name|i
index|]
operator|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
operator|<<
literal|16
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startOffsets
index|[
name|i
index|]
operator|=
name|startOffsets
index|[
name|i
operator|-
literal|1
index|]
operator|+
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|rarely
argument_list|()
condition|?
literal|1
operator|<<
literal|16
else|:
literal|20
argument_list|)
expr_stmt|;
block|}
name|endOffsets
index|[
name|i
index|]
operator|=
name|startOffsets
index|[
name|i
index|]
operator|+
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|rarely
argument_list|()
condition|?
literal|1
operator|<<
literal|10
else|:
literal|20
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|positions
index|[
name|i
index|]
operator|=
name|positionsIncrements
index|[
name|i
index|]
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|positions
index|[
name|i
index|]
operator|=
name|positions
index|[
name|i
operator|-
literal|1
index|]
operator|+
name|positionsIncrements
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|payloads
argument_list|,
name|randomPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|payloads
index|[
name|i
index|]
operator|=
name|randomPayload
argument_list|()
expr_stmt|;
block|}
block|}
name|positionToTerms
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|startOffsetToTerms
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|(
name|len
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|positionToTerms
operator|.
name|containsKey
argument_list|(
name|positions
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|positionToTerms
operator|.
name|put
argument_list|(
name|positions
index|[
name|i
index|]
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|positionToTerms
operator|.
name|get
argument_list|(
name|positions
index|[
name|i
index|]
argument_list|)
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|startOffsetToTerms
operator|.
name|containsKey
argument_list|(
name|startOffsets
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|startOffsetToTerms
operator|.
name|put
argument_list|(
name|startOffsets
index|[
name|i
index|]
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|startOffsetToTerms
operator|.
name|get
argument_list|(
name|startOffsets
index|[
name|i
index|]
argument_list|)
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|freqs
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|term
range|:
name|terms
control|)
block|{
if|if
condition|(
name|freqs
operator|.
name|containsKey
argument_list|(
name|term
argument_list|)
condition|)
block|{
name|freqs
operator|.
name|put
argument_list|(
name|term
argument_list|,
name|freqs
operator|.
name|get
argument_list|(
name|term
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|freqs
operator|.
name|put
argument_list|(
name|term
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|addAttributeImpl
argument_list|(
operator|new
name|PermissiveOffsetAttributeImpl
argument_list|()
argument_list|)
expr_stmt|;
name|termAtt
operator|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|piAtt
operator|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|oAtt
operator|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|pAtt
operator|=
name|addAttribute
argument_list|(
name|PayloadAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|hasPayloads
specifier|public
name|boolean
name|hasPayloads
parameter_list|()
block|{
for|for
control|(
name|BytesRef
name|payload
range|:
name|payloads
control|)
block|{
if|if
condition|(
name|payload
operator|!=
literal|null
operator|&&
name|payload
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
specifier|final
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|i
operator|<
name|terms
operator|.
name|length
condition|)
block|{
name|termAtt
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
operator|.
name|append
argument_list|(
name|terms
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|piAtt
operator|.
name|setPositionIncrement
argument_list|(
name|positionsIncrements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|oAtt
operator|.
name|setOffset
argument_list|(
name|startOffsets
index|[
name|i
index|]
argument_list|,
name|endOffsets
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|pAtt
operator|.
name|setPayload
argument_list|(
name|payloads
index|[
name|i
index|]
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
DECL|class|RandomDocument
specifier|protected
class|class
name|RandomDocument
block|{
DECL|field|fieldNames
specifier|private
specifier|final
name|String
index|[]
name|fieldNames
decl_stmt|;
DECL|field|fieldTypes
specifier|private
specifier|final
name|FieldType
index|[]
name|fieldTypes
decl_stmt|;
DECL|field|tokenStreams
specifier|private
specifier|final
name|RandomTokenStream
index|[]
name|tokenStreams
decl_stmt|;
DECL|method|RandomDocument
specifier|protected
name|RandomDocument
parameter_list|(
name|int
name|fieldCount
parameter_list|,
name|int
name|maxTermCount
parameter_list|,
name|Options
name|options
parameter_list|,
name|String
index|[]
name|fieldNames
parameter_list|,
name|String
index|[]
name|sampleTerms
parameter_list|,
name|BytesRef
index|[]
name|sampleTermBytes
parameter_list|)
block|{
if|if
condition|(
name|fieldCount
operator|>
name|fieldNames
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|this
operator|.
name|fieldNames
operator|=
operator|new
name|String
index|[
name|fieldCount
index|]
expr_stmt|;
name|fieldTypes
operator|=
operator|new
name|FieldType
index|[
name|fieldCount
index|]
expr_stmt|;
name|tokenStreams
operator|=
operator|new
name|RandomTokenStream
index|[
name|fieldCount
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|fieldTypes
argument_list|,
name|fieldType
argument_list|(
name|options
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|usedFileNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
operator|++
name|i
control|)
block|{
do|do
block|{
name|this
operator|.
name|fieldNames
index|[
name|i
index|]
operator|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|usedFileNames
operator|.
name|contains
argument_list|(
name|this
operator|.
name|fieldNames
index|[
name|i
index|]
argument_list|)
condition|)
do|;
name|usedFileNames
operator|.
name|add
argument_list|(
name|this
operator|.
name|fieldNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|tokenStreams
index|[
name|i
index|]
operator|=
operator|new
name|RandomTokenStream
argument_list|(
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|maxTermCount
argument_list|)
argument_list|,
name|sampleTerms
argument_list|,
name|sampleTermBytes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|toDocument
specifier|public
name|Document
name|toDocument
parameter_list|()
block|{
specifier|final
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldNames
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|fieldNames
index|[
name|i
index|]
argument_list|,
name|tokenStreams
index|[
name|i
index|]
argument_list|,
name|fieldTypes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
block|}
DECL|class|RandomDocumentFactory
specifier|protected
class|class
name|RandomDocumentFactory
block|{
DECL|field|fieldNames
specifier|private
specifier|final
name|String
index|[]
name|fieldNames
decl_stmt|;
DECL|field|terms
specifier|private
specifier|final
name|String
index|[]
name|terms
decl_stmt|;
DECL|field|termBytes
specifier|private
specifier|final
name|BytesRef
index|[]
name|termBytes
decl_stmt|;
DECL|method|RandomDocumentFactory
specifier|protected
name|RandomDocumentFactory
parameter_list|(
name|int
name|distinctFieldNames
parameter_list|,
name|int
name|disctinctTerms
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|fieldNames
operator|.
name|size
argument_list|()
operator|<
name|distinctFieldNames
condition|)
block|{
name|fieldNames
operator|.
name|add
argument_list|(
name|_TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fieldNames
operator|.
name|remove
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|fieldNames
operator|=
name|fieldNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|terms
operator|=
operator|new
name|String
index|[
name|disctinctTerms
index|]
expr_stmt|;
name|termBytes
operator|=
operator|new
name|BytesRef
index|[
name|disctinctTerms
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|disctinctTerms
condition|;
operator|++
name|i
control|)
block|{
name|terms
index|[
name|i
index|]
operator|=
name|_TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|termBytes
index|[
name|i
index|]
operator|=
operator|new
name|BytesRef
argument_list|(
name|terms
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newDocument
specifier|public
name|RandomDocument
name|newDocument
parameter_list|(
name|int
name|fieldCount
parameter_list|,
name|int
name|maxTermCount
parameter_list|,
name|Options
name|options
parameter_list|)
block|{
return|return
operator|new
name|RandomDocument
argument_list|(
name|fieldCount
argument_list|,
name|maxTermCount
argument_list|,
name|options
argument_list|,
name|fieldNames
argument_list|,
name|terms
argument_list|,
name|termBytes
argument_list|)
return|;
block|}
block|}
DECL|method|assertEquals
specifier|protected
name|void
name|assertEquals
parameter_list|(
name|RandomDocument
name|doc
parameter_list|,
name|Fields
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
comment|// compare field names
name|assertEquals
argument_list|(
name|doc
operator|==
literal|null
argument_list|,
name|fields
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|doc
operator|.
name|fieldNames
operator|.
name|length
argument_list|,
name|fields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|fields1
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|fields2
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|doc
operator|.
name|fieldNames
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|fields1
operator|.
name|add
argument_list|(
name|doc
operator|.
name|fieldNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|fields2
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|fields1
argument_list|,
name|fields2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|doc
operator|.
name|fieldNames
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|doc
operator|.
name|tokenStreams
index|[
name|i
index|]
argument_list|,
name|doc
operator|.
name|fieldTypes
index|[
name|i
index|]
argument_list|,
name|fields
operator|.
name|terms
argument_list|(
name|doc
operator|.
name|fieldNames
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|equals
specifier|protected
specifier|static
name|boolean
name|equals
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|==
literal|null
condition|)
block|{
return|return
name|o2
operator|==
literal|null
return|;
block|}
else|else
block|{
return|return
name|o1
operator|.
name|equals
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
comment|// to test reuse
DECL|field|termsEnum
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|TermsEnum
argument_list|>
name|termsEnum
init|=
operator|new
name|ThreadLocal
argument_list|<
name|TermsEnum
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|docsEnum
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|DocsEnum
argument_list|>
name|docsEnum
init|=
operator|new
name|ThreadLocal
argument_list|<
name|DocsEnum
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|docsAndPositionsEnum
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|DocsAndPositionsEnum
argument_list|>
name|docsAndPositionsEnum
init|=
operator|new
name|ThreadLocal
argument_list|<
name|DocsAndPositionsEnum
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|assertEquals
specifier|protected
name|void
name|assertEquals
parameter_list|(
name|RandomTokenStream
name|tk
parameter_list|,
name|FieldType
name|ft
parameter_list|,
name|Terms
name|terms
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|terms
operator|.
name|getDocCount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|termCount
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|tk
operator|.
name|terms
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|termCount
argument_list|,
name|terms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|termCount
argument_list|,
name|terms
operator|.
name|getSumDocFreq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ft
operator|.
name|storeTermVectorPositions
argument_list|()
argument_list|,
name|terms
operator|.
name|hasPositions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ft
operator|.
name|storeTermVectorOffsets
argument_list|()
argument_list|,
name|terms
operator|.
name|hasOffsets
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ft
operator|.
name|storeTermVectorPayloads
argument_list|()
operator|&&
name|tk
operator|.
name|hasPayloads
argument_list|()
argument_list|,
name|terms
operator|.
name|hasPayloads
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|BytesRef
argument_list|>
name|uniqueTerms
init|=
operator|new
name|HashSet
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|term
range|:
name|tk
operator|.
name|freqs
operator|.
name|keySet
argument_list|()
control|)
block|{
name|uniqueTerms
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BytesRef
index|[]
name|sortedTerms
init|=
name|uniqueTerms
operator|.
name|toArray
argument_list|(
operator|new
name|BytesRef
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|sortedTerms
argument_list|,
name|terms
operator|.
name|getComparator
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|null
else|:
name|this
operator|.
name|termsEnum
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|termsEnum
operator|.
name|set
argument_list|(
name|termsEnum
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortedTerms
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|BytesRef
name|nextTerm
init|=
name|termsEnum
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sortedTerms
index|[
name|i
index|]
argument_list|,
name|nextTerm
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sortedTerms
index|[
name|i
index|]
argument_list|,
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|termsEnum
operator|.
name|docFreq
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FixedBitSet
name|bits
init|=
operator|new
name|FixedBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|DocsEnum
name|docsEnum
init|=
name|termsEnum
operator|.
name|docs
argument_list|(
name|bits
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|null
else|:
name|this
operator|.
name|docsEnum
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DocsEnum
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|bits
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|docsEnum
operator|=
name|termsEnum
operator|.
name|docs
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|bits
else|:
literal|null
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|null
else|:
name|docsEnum
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|docsEnum
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsEnum
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tk
operator|.
name|freqs
operator|.
name|get
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|,
operator|(
name|Integer
operator|)
name|docsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocsEnum
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|docsEnum
operator|.
name|set
argument_list|(
name|docsEnum
argument_list|)
expr_stmt|;
name|bits
operator|.
name|clear
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|DocsAndPositionsEnum
name|docsAndPositionsEnum
init|=
name|termsEnum
operator|.
name|docsAndPositions
argument_list|(
name|bits
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|null
else|:
name|this
operator|.
name|docsAndPositionsEnum
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ft
operator|.
name|storeTermVectorOffsets
argument_list|()
operator|||
name|ft
operator|.
name|storeTermVectorPositions
argument_list|()
argument_list|,
name|docsAndPositionsEnum
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|docsAndPositionsEnum
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|DocsEnum
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|bits
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|docsAndPositionsEnum
operator|=
name|termsEnum
operator|.
name|docsAndPositions
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|bits
else|:
literal|null
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|null
else|:
name|docsAndPositionsEnum
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ft
operator|.
name|storeTermVectorOffsets
argument_list|()
operator|||
name|ft
operator|.
name|storeTermVectorPositions
argument_list|()
argument_list|,
name|docsAndPositionsEnum
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|terms
operator|.
name|hasPositions
argument_list|()
operator|||
name|terms
operator|.
name|hasOffsets
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|freq
init|=
name|docsAndPositionsEnum
operator|.
name|freq
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|tk
operator|.
name|freqs
operator|.
name|get
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|,
operator|(
name|Integer
operator|)
name|freq
argument_list|)
expr_stmt|;
if|if
condition|(
name|docsAndPositionsEnum
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|freq
condition|;
operator|++
name|k
control|)
block|{
specifier|final
name|int
name|position
init|=
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|indexes
decl_stmt|;
if|if
condition|(
name|terms
operator|.
name|hasPositions
argument_list|()
condition|)
block|{
name|indexes
operator|=
name|tk
operator|.
name|positionToTerms
operator|.
name|get
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexes
operator|=
name|tk
operator|.
name|startOffsetToTerms
operator|.
name|get
argument_list|(
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|terms
operator|.
name|hasPositions
argument_list|()
condition|)
block|{
name|boolean
name|foundPosition
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|index
range|:
name|indexes
control|)
block|{
if|if
condition|(
name|tk
operator|.
name|termBytes
index|[
name|index
index|]
operator|.
name|equals
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|)
operator|&&
name|tk
operator|.
name|positions
index|[
name|index
index|]
operator|==
name|position
condition|)
block|{
name|foundPosition
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|foundPosition
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|terms
operator|.
name|hasOffsets
argument_list|()
condition|)
block|{
name|boolean
name|foundOffset
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|index
range|:
name|indexes
control|)
block|{
if|if
condition|(
name|tk
operator|.
name|termBytes
index|[
name|index
index|]
operator|.
name|equals
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|)
operator|&&
name|tk
operator|.
name|startOffsets
index|[
name|index
index|]
operator|==
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
operator|&&
name|tk
operator|.
name|endOffsets
index|[
name|index
index|]
operator|==
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
condition|)
block|{
name|foundOffset
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|foundOffset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|terms
operator|.
name|hasPayloads
argument_list|()
condition|)
block|{
name|boolean
name|foundPayload
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|index
range|:
name|indexes
control|)
block|{
if|if
condition|(
name|tk
operator|.
name|termBytes
index|[
name|index
index|]
operator|.
name|equals
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|)
operator|&&
name|equals
argument_list|(
name|tk
operator|.
name|payloads
index|[
name|index
index|]
argument_list|,
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
condition|)
block|{
name|foundPayload
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|foundPayload
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ok
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// ok
block|}
block|}
name|assertEquals
argument_list|(
name|DocsEnum
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|docsAndPositionsEnum
operator|.
name|set
argument_list|(
name|docsAndPositionsEnum
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|termsEnum
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|tk
operator|.
name|termBytes
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|SeekStatus
operator|.
name|FOUND
argument_list|,
name|termsEnum
operator|.
name|seekCeil
argument_list|(
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|tk
operator|.
name|termBytes
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addId
specifier|protected
name|Document
name|addId
parameter_list|(
name|Document
name|doc
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
DECL|method|docID
specifier|protected
name|int
name|docID
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
return|;
block|}
comment|// only one doc with vectors
DECL|method|testRareVectors
specifier|public
name|void
name|testRareVectors
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|RandomDocumentFactory
name|docFactory
init|=
operator|new
name|RandomDocumentFactory
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|Options
name|options
range|:
name|validOptions
argument_list|()
control|)
block|{
specifier|final
name|int
name|numDocs
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
specifier|final
name|int
name|docWithVectors
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
specifier|final
name|Document
name|emptyDoc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|RandomDocument
name|doc
init|=
name|docFactory
operator|.
name|newDocument
argument_list|(
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|20
argument_list|,
name|options
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|==
name|docWithVectors
condition|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|addId
argument_list|(
name|doc
operator|.
name|toDocument
argument_list|()
argument_list|,
literal|"42"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|emptyDoc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|int
name|docWithVectorsID
init|=
name|docID
argument_list|(
name|reader
argument_list|,
literal|"42"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|docID
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
specifier|final
name|Fields
name|fields
init|=
name|reader
operator|.
name|getTermVectors
argument_list|(
name|docID
argument_list|)
decl_stmt|;
if|if
condition|(
name|docID
operator|==
name|docWithVectorsID
condition|)
block|{
name|assertEquals
argument_list|(
name|doc
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Fields
name|fields
init|=
name|reader
operator|.
name|getTermVectors
argument_list|(
name|docWithVectorsID
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|doc
argument_list|,
name|fields
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testHighFreqs
specifier|public
name|void
name|testHighFreqs
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|RandomDocumentFactory
name|docFactory
init|=
operator|new
name|RandomDocumentFactory
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|Options
name|options
range|:
name|validOptions
argument_list|()
control|)
block|{
if|if
condition|(
name|options
operator|==
name|Options
operator|.
name|NONE
condition|)
block|{
continue|continue;
block|}
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|RandomDocument
name|doc
init|=
name|docFactory
operator|.
name|newDocument
argument_list|(
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|50000
argument_list|,
literal|100000
argument_list|)
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
operator|.
name|toDocument
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|doc
argument_list|,
name|reader
operator|.
name|getTermVectors
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testLotsOfFields
specifier|public
name|void
name|testLotsOfFields
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|RandomDocumentFactory
name|docFactory
init|=
operator|new
name|RandomDocumentFactory
argument_list|(
literal|5000
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|Options
name|options
range|:
name|validOptions
argument_list|()
control|)
block|{
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|RandomDocument
name|doc
init|=
name|docFactory
operator|.
name|newDocument
argument_list|(
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|500
argument_list|,
literal|1000
argument_list|)
argument_list|,
literal|5
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
operator|.
name|toDocument
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|doc
argument_list|,
name|reader
operator|.
name|getTermVectors
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// different options for the same field
DECL|method|testMixedOptions
specifier|public
name|void
name|testMixedOptions
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numFields
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|RandomDocumentFactory
name|docFactory
init|=
operator|new
name|RandomDocumentFactory
argument_list|(
name|numFields
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|Options
name|options1
range|:
name|validOptions
argument_list|()
control|)
block|{
for|for
control|(
name|Options
name|options2
range|:
name|validOptions
argument_list|()
control|)
block|{
if|if
condition|(
name|options1
operator|==
name|options2
condition|)
block|{
continue|continue;
block|}
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|RandomDocument
name|doc1
init|=
name|docFactory
operator|.
name|newDocument
argument_list|(
name|numFields
argument_list|,
literal|20
argument_list|,
name|options1
argument_list|)
decl_stmt|;
specifier|final
name|RandomDocument
name|doc2
init|=
name|docFactory
operator|.
name|newDocument
argument_list|(
name|numFields
argument_list|,
literal|20
argument_list|,
name|options2
argument_list|)
decl_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|addId
argument_list|(
name|doc1
operator|.
name|toDocument
argument_list|()
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|addId
argument_list|(
name|doc2
operator|.
name|toDocument
argument_list|()
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|int
name|doc1ID
init|=
name|docID
argument_list|(
name|reader
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|doc1
argument_list|,
name|reader
operator|.
name|getTermVectors
argument_list|(
name|doc1ID
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|doc2ID
init|=
name|docID
argument_list|(
name|reader
argument_list|,
literal|"2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|doc2
argument_list|,
name|reader
operator|.
name|getTermVectors
argument_list|(
name|doc2ID
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|RandomDocumentFactory
name|docFactory
init|=
operator|new
name|RandomDocumentFactory
argument_list|(
literal|5
argument_list|,
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
specifier|final
name|RandomDocument
index|[]
name|docs
init|=
operator|new
name|RandomDocument
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|docs
index|[
name|i
index|]
operator|=
name|docFactory
operator|.
name|newDocument
argument_list|(
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|50
argument_list|)
argument_list|,
name|randomOptions
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|addId
argument_list|(
name|docs
index|[
name|i
index|]
operator|.
name|toDocument
argument_list|()
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|docID
init|=
name|docID
argument_list|(
name|reader
argument_list|,
literal|""
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|docs
index|[
name|i
index|]
argument_list|,
name|reader
operator|.
name|getTermVectors
argument_list|(
name|docID
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testMerge
specifier|public
name|void
name|testMerge
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|RandomDocumentFactory
name|docFactory
init|=
operator|new
name|RandomDocumentFactory
argument_list|(
literal|5
argument_list|,
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|500
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numDeletes
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|deletes
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|deletes
operator|.
name|size
argument_list|()
operator|<
name|numDeletes
condition|)
block|{
name|deletes
operator|.
name|add
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Options
name|options
range|:
name|validOptions
argument_list|()
control|)
block|{
specifier|final
name|RandomDocument
index|[]
name|docs
init|=
operator|new
name|RandomDocument
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|docs
index|[
name|i
index|]
operator|=
name|docFactory
operator|.
name|newDocument
argument_list|(
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|50
argument_list|)
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|addId
argument_list|(
name|docs
index|[
name|i
index|]
operator|.
name|toDocument
argument_list|()
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|delete
range|:
name|deletes
control|)
block|{
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|delete
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// merge with deletes
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|deletes
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
specifier|final
name|int
name|docID
init|=
name|docID
argument_list|(
name|reader
argument_list|,
literal|""
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|docs
index|[
name|i
index|]
argument_list|,
name|reader
operator|.
name|getTermVectors
argument_list|(
name|docID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// run random tests from different threads to make sure the per-thread clones
comment|// don't share mutable data
DECL|method|testClone
specifier|public
name|void
name|testClone
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|RandomDocumentFactory
name|docFactory
init|=
operator|new
name|RandomDocumentFactory
argument_list|(
literal|5
argument_list|,
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|Options
name|options
range|:
name|validOptions
argument_list|()
control|)
block|{
specifier|final
name|RandomDocument
index|[]
name|docs
init|=
operator|new
name|RandomDocument
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|docs
index|[
name|i
index|]
operator|=
name|docFactory
operator|.
name|newDocument
argument_list|(
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|50
argument_list|)
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|addId
argument_list|(
name|docs
index|[
name|i
index|]
operator|.
name|toDocument
argument_list|()
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|docID
init|=
name|docID
argument_list|(
name|reader
argument_list|,
literal|""
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|docs
index|[
name|i
index|]
argument_list|,
name|reader
operator|.
name|getTermVectors
argument_list|(
name|docID
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|exception
init|=
operator|new
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atLeast
argument_list|(
literal|100
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|idx
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
specifier|final
name|int
name|docID
init|=
name|docID
argument_list|(
name|reader
argument_list|,
literal|""
operator|+
name|idx
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|docs
index|[
name|idx
index|]
argument_list|,
name|reader
operator|.
name|getTermVectors
argument_list|(
name|docID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|exception
operator|.
name|set
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
literal|"One thread threw an exception"
argument_list|,
name|exception
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
