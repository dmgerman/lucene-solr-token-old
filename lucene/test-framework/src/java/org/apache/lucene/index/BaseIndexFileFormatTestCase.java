begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_comment
comment|/**  * Common tests to all index formats.  */
end_comment
begin_class
DECL|class|BaseIndexFileFormatTestCase
specifier|abstract
class|class
name|BaseIndexFileFormatTestCase
extends|extends
name|LuceneTestCase
block|{
comment|/** Returns the codec to run tests against */
DECL|method|getCodec
specifier|protected
specifier|abstract
name|Codec
name|getCodec
parameter_list|()
function_decl|;
DECL|field|savedCodec
specifier|private
name|Codec
name|savedCodec
decl_stmt|;
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// set the default codec, so adding test cases to this isn't fragile
name|savedCodec
operator|=
name|Codec
operator|.
name|getDefault
argument_list|()
expr_stmt|;
name|Codec
operator|.
name|setDefault
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|Codec
operator|.
name|setDefault
argument_list|(
name|savedCodec
argument_list|)
expr_stmt|;
comment|// restore
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/** Add random fields to the provided document. */
DECL|method|addRandomFields
specifier|protected
specifier|abstract
name|void
name|addRandomFields
parameter_list|(
name|Document
name|doc
parameter_list|)
function_decl|;
DECL|method|bytesUsedByExtension
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|bytesUsedByExtension
parameter_list|(
name|Directory
name|d
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|bytesUsedByExtension
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|d
operator|.
name|listAll
argument_list|()
control|)
block|{
specifier|final
name|String
name|ext
init|=
name|IndexFileNames
operator|.
name|getExtension
argument_list|(
name|file
argument_list|)
decl_stmt|;
specifier|final
name|long
name|previousLength
init|=
name|bytesUsedByExtension
operator|.
name|containsKey
argument_list|(
name|ext
argument_list|)
condition|?
name|bytesUsedByExtension
operator|.
name|get
argument_list|(
name|ext
argument_list|)
else|:
literal|0
decl_stmt|;
name|bytesUsedByExtension
operator|.
name|put
argument_list|(
name|ext
argument_list|,
name|previousLength
operator|+
name|d
operator|.
name|fileLength
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bytesUsedByExtension
operator|.
name|keySet
argument_list|()
operator|.
name|removeAll
argument_list|(
name|excludedExtensionsFromByteCounts
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|bytesUsedByExtension
return|;
block|}
comment|/**    * Return the list of extensions that should be excluded from byte counts when    * comparing indices that store the same content.    */
DECL|method|excludedExtensionsFromByteCounts
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|excludedExtensionsFromByteCounts
parameter_list|()
block|{
comment|// segment infos store various pieces of information that don't solely depend
comment|// on the content of the index in the diagnostics (such as a timestamp) so we
comment|// exclude this file from the bytes counts
return|return
name|Collections
operator|.
name|singleton
argument_list|(
literal|"si"
argument_list|)
return|;
block|}
comment|/** The purpose of this test is to make sure that bulk merge doesn't accumulate useless data over runs. */
DECL|method|testMergeStability
specifier|public
name|void
name|testMergeStability
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
comment|// do not use newMergePolicy that might return a MockMergePolicy that ignores the no-CFS ratio
name|MergePolicy
name|mp
init|=
name|newTieredMergePolicy
argument_list|()
decl_stmt|;
name|mp
operator|.
name|setNoCFSRatio
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|IndexWriterConfig
name|cfg
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setUseCompoundFile
argument_list|(
literal|false
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|mp
argument_list|)
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|cfg
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|500
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addRandomFields
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|Directory
name|dir2
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|mp
operator|=
name|newTieredMergePolicy
argument_list|()
expr_stmt|;
name|mp
operator|.
name|setNoCFSRatio
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cfg
operator|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setUseCompoundFile
argument_list|(
literal|false
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|mp
argument_list|)
expr_stmt|;
name|w
operator|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir2
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|w
operator|.
name|addIndexes
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|bytesUsedByExtension
argument_list|(
name|dir
argument_list|)
argument_list|,
name|bytesUsedByExtension
argument_list|(
name|dir2
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
