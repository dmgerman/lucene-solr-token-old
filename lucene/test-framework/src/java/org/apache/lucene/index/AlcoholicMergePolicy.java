begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_comment
comment|/**   *<p>  * Merge policy for testing, it is like an alcoholic.  * It drinks (merges) at night, and randomly decides what to drink.  * During the daytime it sleeps.  *</p>  *<p>  * if tests pass with this, then they are likely to pass with any   * bizarro merge policy users might write.  *</p>  *<p>  * It is a fine bottle of champagne (Ordered by Martijn).   *</p>  */
end_comment
begin_class
DECL|class|AlcoholicMergePolicy
specifier|public
class|class
name|AlcoholicMergePolicy
extends|extends
name|LogMergePolicy
block|{
DECL|field|random
specifier|private
specifier|final
name|Random
name|random
decl_stmt|;
DECL|field|calendar
specifier|private
specifier|final
name|Calendar
name|calendar
decl_stmt|;
DECL|method|AlcoholicMergePolicy
specifier|public
name|AlcoholicMergePolicy
parameter_list|(
name|TimeZone
name|tz
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
name|this
operator|.
name|calendar
operator|=
operator|new
name|GregorianCalendar
argument_list|(
name|tz
argument_list|)
expr_stmt|;
name|this
operator|.
name|random
operator|=
name|random
expr_stmt|;
name|maxMergeSize
operator|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|//@BlackMagic(level=Voodoo);
DECL|method|size
specifier|protected
name|long
name|size
parameter_list|(
name|SegmentInfoPerCommit
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|hourOfDay
init|=
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
decl_stmt|;
if|if
condition|(
name|hourOfDay
argument_list|<
literal|6
operator|||
name|hourOfDay
argument_list|>
literal|20
operator|||
comment|// its 5 o'clock somewhere
name|random
operator|.
name|nextInt
argument_list|(
literal|23
argument_list|)
operator|==
literal|5
condition|)
block|{
name|Drink
index|[]
name|values
init|=
name|Drink
operator|.
name|values
argument_list|()
decl_stmt|;
comment|// pick a random drink during the day
return|return
name|values
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|values
operator|.
name|length
argument_list|)
index|]
operator|.
name|drunkFactor
operator|*
name|info
operator|.
name|sizeInBytes
argument_list|()
return|;
block|}
return|return
name|info
operator|.
name|sizeInBytes
argument_list|()
return|;
block|}
DECL|enum|Drink
specifier|public
specifier|static
enum|enum
name|Drink
block|{
DECL|enum constant|Beer
DECL|enum constant|Wine
DECL|enum constant|Champagne
DECL|enum constant|WhiteRussian
DECL|enum constant|SingleMalt
name|Beer
argument_list|(
literal|15
argument_list|)
block|,
name|Wine
argument_list|(
literal|17
argument_list|)
block|,
name|Champagne
argument_list|(
literal|21
argument_list|)
block|,
name|WhiteRussian
argument_list|(
literal|22
argument_list|)
block|,
name|SingleMalt
argument_list|(
literal|30
argument_list|)
block|;
DECL|field|drunkFactor
name|long
name|drunkFactor
decl_stmt|;
DECL|method|Drink
name|Drink
parameter_list|(
name|long
name|drunkFactor
parameter_list|)
block|{
name|this
operator|.
name|drunkFactor
operator|=
name|drunkFactor
expr_stmt|;
block|}
DECL|method|drunk
specifier|public
name|long
name|drunk
parameter_list|()
block|{
return|return
name|drunkFactor
return|;
block|}
block|}
block|}
end_class
end_unit
