begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CompiledAutomaton
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A {@link FilterAtomicReader} that can be used to apply  * additional checks for tests.  */
end_comment
begin_class
DECL|class|AssertingAtomicReader
specifier|public
class|class
name|AssertingAtomicReader
extends|extends
name|FilterAtomicReader
block|{
DECL|method|AssertingAtomicReader
specifier|public
name|AssertingAtomicReader
parameter_list|(
name|AtomicReader
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// check some basic reader sanity
assert|assert
name|in
operator|.
name|maxDoc
argument_list|()
operator|>=
literal|0
assert|;
assert|assert
name|in
operator|.
name|numDocs
argument_list|()
operator|<=
name|in
operator|.
name|maxDoc
argument_list|()
assert|;
assert|assert
name|in
operator|.
name|numDeletedDocs
argument_list|()
operator|+
name|in
operator|.
name|numDocs
argument_list|()
operator|==
name|in
operator|.
name|maxDoc
argument_list|()
assert|;
assert|assert
operator|!
name|in
operator|.
name|hasDeletions
argument_list|()
operator|||
name|in
operator|.
name|numDeletedDocs
argument_list|()
operator|>
literal|0
operator|&&
name|in
operator|.
name|numDocs
argument_list|()
operator|<
name|in
operator|.
name|maxDoc
argument_list|()
assert|;
block|}
annotation|@
name|Override
DECL|method|fields
specifier|public
name|Fields
name|fields
parameter_list|()
throws|throws
name|IOException
block|{
name|Fields
name|fields
init|=
name|super
operator|.
name|fields
argument_list|()
decl_stmt|;
return|return
name|fields
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|AssertingFields
argument_list|(
name|fields
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTermVectors
specifier|public
name|Fields
name|getTermVectors
parameter_list|(
name|int
name|docID
parameter_list|)
throws|throws
name|IOException
block|{
name|Fields
name|fields
init|=
name|super
operator|.
name|getTermVectors
argument_list|(
name|docID
argument_list|)
decl_stmt|;
return|return
name|fields
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|AssertingFields
argument_list|(
name|fields
argument_list|)
return|;
block|}
comment|/**    * Wraps a Fields but with additional asserts    */
DECL|class|AssertingFields
specifier|public
specifier|static
class|class
name|AssertingFields
extends|extends
name|FilterFields
block|{
DECL|method|AssertingFields
specifier|public
name|AssertingFields
parameter_list|(
name|Fields
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|super
operator|.
name|iterator
argument_list|()
decl_stmt|;
assert|assert
name|iterator
operator|!=
literal|null
assert|;
return|return
name|iterator
return|;
block|}
annotation|@
name|Override
DECL|method|terms
specifier|public
name|Terms
name|terms
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|Terms
name|terms
init|=
name|super
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|terms
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|AssertingTerms
argument_list|(
name|terms
argument_list|)
return|;
block|}
block|}
comment|/**    * Wraps a Terms but with additional asserts    */
DECL|class|AssertingTerms
specifier|public
specifier|static
class|class
name|AssertingTerms
extends|extends
name|FilterTerms
block|{
DECL|method|AssertingTerms
specifier|public
name|AssertingTerms
parameter_list|(
name|Terms
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|intersect
specifier|public
name|TermsEnum
name|intersect
parameter_list|(
name|CompiledAutomaton
name|automaton
parameter_list|,
name|BytesRef
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|TermsEnum
name|termsEnum
init|=
name|super
operator|.
name|intersect
argument_list|(
name|automaton
argument_list|,
name|bytes
argument_list|)
decl_stmt|;
assert|assert
name|termsEnum
operator|!=
literal|null
assert|;
return|return
operator|new
name|AssertingTermsEnum
argument_list|(
name|termsEnum
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|TermsEnum
name|iterator
parameter_list|(
name|TermsEnum
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: should we give this thing a random to be super-evil,
comment|// and randomly *not* unwrap?
if|if
condition|(
name|reuse
operator|instanceof
name|AssertingTermsEnum
condition|)
block|{
name|reuse
operator|=
operator|(
operator|(
name|AssertingTermsEnum
operator|)
name|reuse
operator|)
operator|.
name|in
expr_stmt|;
block|}
name|TermsEnum
name|termsEnum
init|=
name|super
operator|.
name|iterator
argument_list|(
name|reuse
argument_list|)
decl_stmt|;
assert|assert
name|termsEnum
operator|!=
literal|null
assert|;
return|return
operator|new
name|AssertingTermsEnum
argument_list|(
name|termsEnum
argument_list|)
return|;
block|}
block|}
DECL|class|AssertingTermsEnum
specifier|static
class|class
name|AssertingTermsEnum
extends|extends
name|FilterTermsEnum
block|{
DECL|enum|State
DECL|enum constant|INITIAL
DECL|enum constant|POSITIONED
DECL|enum constant|UNPOSITIONED
specifier|private
enum|enum
name|State
block|{
name|INITIAL
block|,
name|POSITIONED
block|,
name|UNPOSITIONED
block|}
empty_stmt|;
DECL|field|state
specifier|private
name|State
name|state
init|=
name|State
operator|.
name|INITIAL
decl_stmt|;
DECL|method|AssertingTermsEnum
specifier|public
name|AssertingTermsEnum
parameter_list|(
name|TermsEnum
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docs
specifier|public
name|DocsEnum
name|docs
parameter_list|(
name|Bits
name|liveDocs
parameter_list|,
name|DocsEnum
name|reuse
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|==
name|State
operator|.
name|POSITIONED
operator|:
literal|"docs(...) called on unpositioned TermsEnum"
assert|;
comment|// TODO: should we give this thing a random to be super-evil,
comment|// and randomly *not* unwrap?
if|if
condition|(
name|reuse
operator|instanceof
name|AssertingDocsEnum
condition|)
block|{
name|reuse
operator|=
operator|(
operator|(
name|AssertingDocsEnum
operator|)
name|reuse
operator|)
operator|.
name|in
expr_stmt|;
block|}
name|DocsEnum
name|docs
init|=
name|super
operator|.
name|docs
argument_list|(
name|liveDocs
argument_list|,
name|reuse
argument_list|,
name|flags
argument_list|)
decl_stmt|;
return|return
name|docs
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|AssertingDocsEnum
argument_list|(
name|docs
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docsAndPositions
specifier|public
name|DocsAndPositionsEnum
name|docsAndPositions
parameter_list|(
name|Bits
name|liveDocs
parameter_list|,
name|DocsAndPositionsEnum
name|reuse
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|==
name|State
operator|.
name|POSITIONED
operator|:
literal|"docsAndPositions(...) called on unpositioned TermsEnum"
assert|;
comment|// TODO: should we give this thing a random to be super-evil,
comment|// and randomly *not* unwrap?
if|if
condition|(
name|reuse
operator|instanceof
name|AssertingDocsAndPositionsEnum
condition|)
block|{
name|reuse
operator|=
operator|(
operator|(
name|AssertingDocsAndPositionsEnum
operator|)
name|reuse
operator|)
operator|.
name|in
expr_stmt|;
block|}
name|DocsAndPositionsEnum
name|docs
init|=
name|super
operator|.
name|docsAndPositions
argument_list|(
name|liveDocs
argument_list|,
name|reuse
argument_list|,
name|flags
argument_list|)
decl_stmt|;
return|return
name|docs
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|AssertingDocsAndPositionsEnum
argument_list|(
name|docs
argument_list|)
return|;
block|}
comment|// TODO: we should separately track if we are 'at the end' ?
comment|// someone should not call next() after it returns null!!!!
annotation|@
name|Override
DECL|method|next
specifier|public
name|BytesRef
name|next
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|==
name|State
operator|.
name|INITIAL
operator|||
name|state
operator|==
name|State
operator|.
name|POSITIONED
operator|:
literal|"next() called on unpositioned TermsEnum"
assert|;
name|BytesRef
name|result
init|=
name|super
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|UNPOSITIONED
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|State
operator|.
name|POSITIONED
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|ord
specifier|public
name|long
name|ord
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|==
name|State
operator|.
name|POSITIONED
operator|:
literal|"ord() called on unpositioned TermsEnum"
assert|;
return|return
name|super
operator|.
name|ord
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|==
name|State
operator|.
name|POSITIONED
operator|:
literal|"docFreq() called on unpositioned TermsEnum"
assert|;
return|return
name|super
operator|.
name|docFreq
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|totalTermFreq
specifier|public
name|long
name|totalTermFreq
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|==
name|State
operator|.
name|POSITIONED
operator|:
literal|"totalTermFreq() called on unpositioned TermsEnum"
assert|;
return|return
name|super
operator|.
name|totalTermFreq
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|term
specifier|public
name|BytesRef
name|term
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|==
name|State
operator|.
name|POSITIONED
operator|:
literal|"term() called on unpositioned TermsEnum"
assert|;
return|return
name|super
operator|.
name|term
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|seekExact
specifier|public
name|void
name|seekExact
parameter_list|(
name|long
name|ord
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seekExact
argument_list|(
name|ord
argument_list|)
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|POSITIONED
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|seekCeil
specifier|public
name|SeekStatus
name|seekCeil
parameter_list|(
name|BytesRef
name|term
parameter_list|,
name|boolean
name|useCache
parameter_list|)
throws|throws
name|IOException
block|{
name|SeekStatus
name|result
init|=
name|super
operator|.
name|seekCeil
argument_list|(
name|term
argument_list|,
name|useCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|SeekStatus
operator|.
name|END
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|UNPOSITIONED
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|State
operator|.
name|POSITIONED
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|seekExact
specifier|public
name|boolean
name|seekExact
parameter_list|(
name|BytesRef
name|text
parameter_list|,
name|boolean
name|useCache
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|super
operator|.
name|seekExact
argument_list|(
name|text
argument_list|,
name|useCache
argument_list|)
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|POSITIONED
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|state
operator|=
name|State
operator|.
name|UNPOSITIONED
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|termState
specifier|public
name|TermState
name|termState
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|==
name|State
operator|.
name|POSITIONED
operator|:
literal|"termState() called on unpositioned TermsEnum"
assert|;
return|return
name|super
operator|.
name|termState
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|seekExact
specifier|public
name|void
name|seekExact
parameter_list|(
name|BytesRef
name|term
parameter_list|,
name|TermState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seekExact
argument_list|(
name|term
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|State
operator|.
name|POSITIONED
expr_stmt|;
block|}
block|}
DECL|enum|DocsEnumState
DECL|enum constant|START
DECL|enum constant|ITERATING
DECL|enum constant|FINISHED
specifier|static
enum|enum
name|DocsEnumState
block|{
name|START
block|,
name|ITERATING
block|,
name|FINISHED
block|}
empty_stmt|;
DECL|class|AssertingDocsEnum
specifier|static
class|class
name|AssertingDocsEnum
extends|extends
name|FilterDocsEnum
block|{
DECL|field|state
specifier|private
name|DocsEnumState
name|state
init|=
name|DocsEnumState
operator|.
name|START
decl_stmt|;
DECL|method|AssertingDocsEnum
specifier|public
name|AssertingDocsEnum
parameter_list|(
name|DocsEnum
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|docid
init|=
name|in
operator|.
name|docID
argument_list|()
decl_stmt|;
assert|assert
name|docid
operator|==
operator|-
literal|1
operator|||
name|docid
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
operator|:
literal|"invalid initial doc id: "
operator|+
name|docid
assert|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|FINISHED
operator|:
literal|"nextDoc() called after NO_MORE_DOCS"
assert|;
name|int
name|nextDoc
init|=
name|super
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
assert|assert
name|nextDoc
operator|>=
literal|0
operator|:
literal|"invalid doc id: "
operator|+
name|nextDoc
assert|;
if|if
condition|(
name|nextDoc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|state
operator|=
name|DocsEnumState
operator|.
name|FINISHED
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|DocsEnumState
operator|.
name|ITERATING
expr_stmt|;
block|}
return|return
name|nextDoc
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|FINISHED
operator|:
literal|"advance() called after NO_MORE_DOCS"
assert|;
name|int
name|advanced
init|=
name|super
operator|.
name|advance
argument_list|(
name|target
argument_list|)
decl_stmt|;
assert|assert
name|advanced
operator|>=
literal|0
operator|:
literal|"invalid doc id: "
operator|+
name|advanced
assert|;
assert|assert
name|advanced
operator|>=
name|target
operator|:
literal|"backwards advance from: "
operator|+
name|target
operator|+
literal|" to: "
operator|+
name|advanced
assert|;
if|if
condition|(
name|advanced
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|state
operator|=
name|DocsEnumState
operator|.
name|FINISHED
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|DocsEnumState
operator|.
name|ITERATING
expr_stmt|;
block|}
return|return
name|advanced
return|;
block|}
comment|// NOTE: We don't assert anything for docId(). Specifically DocsEnum javadocs
comment|// are ambiguous with DocIdSetIterator here, DocIdSetIterator says its ok
comment|// to call this method before nextDoc(), just that it must be -1 or NO_MORE_DOCS!
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|START
operator|:
literal|"freq() called before nextDoc()/advance()"
assert|;
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|FINISHED
operator|:
literal|"freq() called after NO_MORE_DOCS"
assert|;
name|int
name|freq
init|=
name|super
operator|.
name|freq
argument_list|()
decl_stmt|;
assert|assert
name|freq
operator|>
literal|0
assert|;
return|return
name|freq
return|;
block|}
block|}
DECL|class|AssertingDocsAndPositionsEnum
specifier|static
class|class
name|AssertingDocsAndPositionsEnum
extends|extends
name|FilterDocsAndPositionsEnum
block|{
DECL|field|state
specifier|private
name|DocsEnumState
name|state
init|=
name|DocsEnumState
operator|.
name|START
decl_stmt|;
DECL|field|positionMax
specifier|private
name|int
name|positionMax
init|=
literal|0
decl_stmt|;
DECL|field|positionCount
specifier|private
name|int
name|positionCount
init|=
literal|0
decl_stmt|;
DECL|method|AssertingDocsAndPositionsEnum
specifier|public
name|AssertingDocsAndPositionsEnum
parameter_list|(
name|DocsAndPositionsEnum
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|docid
init|=
name|in
operator|.
name|docID
argument_list|()
decl_stmt|;
assert|assert
name|docid
operator|==
operator|-
literal|1
operator|||
name|docid
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
operator|:
literal|"invalid initial doc id: "
operator|+
name|docid
assert|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|FINISHED
operator|:
literal|"nextDoc() called after NO_MORE_DOCS"
assert|;
name|int
name|nextDoc
init|=
name|super
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
assert|assert
name|nextDoc
operator|>=
literal|0
operator|:
literal|"invalid doc id: "
operator|+
name|nextDoc
assert|;
name|positionCount
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|nextDoc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|state
operator|=
name|DocsEnumState
operator|.
name|FINISHED
expr_stmt|;
name|positionMax
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|DocsEnumState
operator|.
name|ITERATING
expr_stmt|;
name|positionMax
operator|=
name|super
operator|.
name|freq
argument_list|()
expr_stmt|;
block|}
return|return
name|nextDoc
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|FINISHED
operator|:
literal|"advance() called after NO_MORE_DOCS"
assert|;
name|int
name|advanced
init|=
name|super
operator|.
name|advance
argument_list|(
name|target
argument_list|)
decl_stmt|;
assert|assert
name|advanced
operator|>=
literal|0
operator|:
literal|"invalid doc id: "
operator|+
name|advanced
assert|;
assert|assert
name|advanced
operator|>=
name|target
operator|:
literal|"backwards advance from: "
operator|+
name|target
operator|+
literal|" to: "
operator|+
name|advanced
assert|;
name|positionCount
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|advanced
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|state
operator|=
name|DocsEnumState
operator|.
name|FINISHED
expr_stmt|;
name|positionMax
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|DocsEnumState
operator|.
name|ITERATING
expr_stmt|;
name|positionMax
operator|=
name|super
operator|.
name|freq
argument_list|()
expr_stmt|;
block|}
return|return
name|advanced
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|START
operator|:
literal|"freq() called before nextDoc()/advance()"
assert|;
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|FINISHED
operator|:
literal|"freq() called after NO_MORE_DOCS"
assert|;
name|int
name|freq
init|=
name|super
operator|.
name|freq
argument_list|()
decl_stmt|;
assert|assert
name|freq
operator|>
literal|0
assert|;
return|return
name|freq
return|;
block|}
annotation|@
name|Override
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|START
operator|:
literal|"nextPosition() called before nextDoc()/advance()"
assert|;
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|FINISHED
operator|:
literal|"nextPosition() called after NO_MORE_DOCS"
assert|;
assert|assert
name|positionCount
operator|<
name|positionMax
operator|:
literal|"nextPosition() called more than freq() times!"
assert|;
name|int
name|position
init|=
name|super
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
assert|assert
name|position
operator|>=
literal|0
operator|||
name|position
operator|==
operator|-
literal|1
operator|:
literal|"invalid position: "
operator|+
name|position
assert|;
name|positionCount
operator|++
expr_stmt|;
return|return
name|position
return|;
block|}
annotation|@
name|Override
DECL|method|startOffset
specifier|public
name|int
name|startOffset
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|START
operator|:
literal|"startOffset() called before nextDoc()/advance()"
assert|;
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|FINISHED
operator|:
literal|"startOffset() called after NO_MORE_DOCS"
assert|;
assert|assert
name|positionCount
operator|>
literal|0
operator|:
literal|"startOffset() called before nextPosition()!"
assert|;
return|return
name|super
operator|.
name|startOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|endOffset
specifier|public
name|int
name|endOffset
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|START
operator|:
literal|"endOffset() called before nextDoc()/advance()"
assert|;
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|FINISHED
operator|:
literal|"endOffset() called after NO_MORE_DOCS"
assert|;
assert|assert
name|positionCount
operator|>
literal|0
operator|:
literal|"endOffset() called before nextPosition()!"
assert|;
return|return
name|super
operator|.
name|endOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|START
operator|:
literal|"getPayload() called before nextDoc()/advance()"
assert|;
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|FINISHED
operator|:
literal|"getPayload() called after NO_MORE_DOCS"
assert|;
assert|assert
name|positionCount
operator|>
literal|0
operator|:
literal|"getPayload() called before nextPosition()!"
assert|;
name|BytesRef
name|payload
init|=
name|super
operator|.
name|getPayload
argument_list|()
decl_stmt|;
assert|assert
name|payload
operator|==
literal|null
operator|||
name|payload
operator|.
name|length
operator|>
literal|0
operator|:
literal|"getPayload() returned payload with invalid length!"
assert|;
return|return
name|payload
return|;
block|}
block|}
comment|// this is the same hack as FCInvisible
annotation|@
name|Override
DECL|method|getCoreCacheKey
specifier|public
name|Object
name|getCoreCacheKey
parameter_list|()
block|{
return|return
name|cacheKey
return|;
block|}
annotation|@
name|Override
DECL|method|getCombinedCoreAndDeletesKey
specifier|public
name|Object
name|getCombinedCoreAndDeletesKey
parameter_list|()
block|{
return|return
name|cacheKey
return|;
block|}
DECL|field|cacheKey
specifier|private
specifier|final
name|Object
name|cacheKey
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
block|}
end_class
end_unit
