begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|BinaryPoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|IntPoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
operator|.
name|IntersectVisitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
operator|.
name|Relation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PointRangeQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|MockDirectoryWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_comment
comment|/**  * Abstract class to do basic tests for a points format.  * NOTE: This test focuses on the points impl, nothing else.  * The [stretch] goal is for this test to be  * so thorough in testing a new PointFormat that if this  * test passes, then all Lucene/Solr tests should also pass.  Ie,  * if there is some bug in a given PointFormat that this  * test fails to catch then this test needs to be improved! */
end_comment
begin_class
DECL|class|BasePointFormatTestCase
specifier|public
specifier|abstract
class|class
name|BasePointFormatTestCase
extends|extends
name|BaseIndexFileFormatTestCase
block|{
annotation|@
name|Override
DECL|method|addRandomFields
specifier|protected
name|void
name|addRandomFields
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
specifier|final
name|int
name|numValues
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
name|i
operator|++
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"f"
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBasic
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|getDirectory
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|byte
index|[]
name|point
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|NumericUtils
operator|.
name|intToBytes
argument_list|(
name|i
argument_list|,
name|point
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
literal|"dim"
argument_list|,
name|point
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|DirectoryReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|LeafReader
name|sub
init|=
name|getOnlySegmentReader
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|PointValues
name|values
init|=
name|sub
operator|.
name|getPointValues
argument_list|()
decl_stmt|;
comment|// Simple test: make sure intersect can visit every doc:
name|BitSet
name|seen
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|values
operator|.
name|intersect
argument_list|(
literal|"dim"
argument_list|,
operator|new
name|IntersectVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Relation
name|compare
parameter_list|(
name|byte
index|[]
name|minPacked
parameter_list|,
name|byte
index|[]
name|maxPacked
parameter_list|)
block|{
return|return
name|Relation
operator|.
name|CELL_CROSSES_QUERY
return|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|,
name|byte
index|[]
name|packedValue
parameter_list|)
block|{
name|seen
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|docID
argument_list|,
name|NumericUtils
operator|.
name|bytesToInt
argument_list|(
name|packedValue
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|seen
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testMerge
specifier|public
name|void
name|testMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|getDirectory
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|byte
index|[]
name|point
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|NumericUtils
operator|.
name|intToBytes
argument_list|(
name|i
argument_list|,
name|point
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
literal|"dim"
argument_list|,
name|point
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|10
condition|)
block|{
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|DirectoryReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|LeafReader
name|sub
init|=
name|getOnlySegmentReader
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|PointValues
name|values
init|=
name|sub
operator|.
name|getPointValues
argument_list|()
decl_stmt|;
comment|// Simple test: make sure intersect can visit every doc:
name|BitSet
name|seen
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|values
operator|.
name|intersect
argument_list|(
literal|"dim"
argument_list|,
operator|new
name|IntersectVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Relation
name|compare
parameter_list|(
name|byte
index|[]
name|minPacked
parameter_list|,
name|byte
index|[]
name|maxPacked
parameter_list|)
block|{
return|return
name|Relation
operator|.
name|CELL_CROSSES_QUERY
return|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|,
name|byte
index|[]
name|packedValue
parameter_list|)
block|{
name|seen
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|docID
argument_list|,
name|NumericUtils
operator|.
name|bytesToInt
argument_list|(
name|packedValue
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|seen
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testAllPointDocsDeletedInSegment
specifier|public
name|void
name|testAllPointDocsDeletedInSegment
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|getDirectory
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|byte
index|[]
name|point
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|NumericUtils
operator|.
name|intToBytes
argument_list|(
name|i
argument_list|,
name|point
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
literal|"dim"
argument_list|,
name|point
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"id"
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"x"
argument_list|,
literal|"x"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"x"
argument_list|,
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|DirectoryReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|PointValues
name|values
init|=
name|MultiPointValues
operator|.
name|get
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Bits
name|liveDocs
init|=
name|MultiFields
operator|.
name|getLiveDocs
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|NumericDocValues
name|idValues
init|=
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|r
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|BitSet
name|seen
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|values
operator|.
name|intersect
argument_list|(
literal|"dim"
argument_list|,
operator|new
name|IntersectVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Relation
name|compare
parameter_list|(
name|byte
index|[]
name|minPacked
parameter_list|,
name|byte
index|[]
name|maxPacked
parameter_list|)
block|{
return|return
name|Relation
operator|.
name|CELL_CROSSES_QUERY
return|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|,
name|byte
index|[]
name|packedValue
parameter_list|)
block|{
if|if
condition|(
name|liveDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
condition|)
block|{
name|seen
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|idValues
operator|.
name|get
argument_list|(
name|docID
argument_list|)
argument_list|,
name|NumericUtils
operator|.
name|bytesToInt
argument_list|(
name|packedValue
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|seen
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
comment|/** Make sure we close open files, delete temp files, etc., on exception */
DECL|method|testWithExceptions
specifier|public
name|void
name|testWithExceptions
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|int
name|numBytesPerDim
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
name|PointValues
operator|.
name|MAX_NUM_BYTES
argument_list|)
decl_stmt|;
name|int
name|numDims
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|PointValues
operator|.
name|MAX_DIMENSIONS
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
index|[]
name|docValues
init|=
operator|new
name|byte
index|[
name|numDocs
index|]
index|[]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
name|byte
index|[]
index|[]
name|values
init|=
operator|new
name|byte
index|[
name|numDims
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|values
index|[
name|dim
index|]
operator|=
operator|new
name|byte
index|[
name|numBytesPerDim
index|]
expr_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|values
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
block|}
name|docValues
index|[
name|docID
index|]
operator|=
name|values
expr_stmt|;
block|}
comment|// Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|done
operator|==
literal|false
condition|)
block|{
try|try
init|(
name|MockDirectoryWrapper
name|dir
init|=
name|newMockFSDirectory
argument_list|(
name|createTempDir
argument_list|()
argument_list|)
init|)
block|{
try|try
block|{
name|dir
operator|.
name|setRandomIOExceptionRate
argument_list|(
literal|0.05
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setRandomIOExceptionRateOnOpen
argument_list|(
literal|0.05
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dir
argument_list|,
name|docValues
argument_list|,
literal|null
argument_list|,
name|numDims
argument_list|,
name|numBytesPerDim
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
if|if
condition|(
name|ise
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"this writer hit an unrecoverable error"
argument_list|)
condition|)
block|{
name|Throwable
name|cause
init|=
name|ise
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
operator|&&
name|cause
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a random IOException"
argument_list|)
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ise
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|ise
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionError
name|ae
parameter_list|)
block|{
if|if
condition|(
name|ae
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"does not exist; files="
argument_list|)
condition|)
block|{
comment|// OK: likely we threw the random IOExc when IW was asserting the commit files exist
name|done
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ae
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap
name|assertTrue
argument_list|(
name|iae
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"either increase maxMBSortInHeap or decrease maxPointsInLeafNode"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|String
name|message
init|=
name|ioe
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|contains
argument_list|(
literal|"a random IOException"
argument_list|)
operator|||
name|message
operator|.
name|contains
argument_list|(
literal|"background merge hit exception"
argument_list|)
condition|)
block|{
comment|// BKDWriter should fully clean up after itself:
name|done
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ioe
throw|;
block|}
block|}
block|}
block|}
block|}
DECL|method|testMultiValued
specifier|public
name|void
name|testMultiValued
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numBytesPerDim
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
name|PointValues
operator|.
name|MAX_NUM_BYTES
argument_list|)
decl_stmt|;
name|int
name|numDims
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|PointValues
operator|.
name|MAX_DIMENSIONS
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
index|[]
argument_list|>
name|docValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|docIDs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
name|int
name|numValuesInDoc
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|ord
init|=
literal|0
init|;
name|ord
operator|<
name|numValuesInDoc
condition|;
name|ord
operator|++
control|)
block|{
name|docIDs
operator|.
name|add
argument_list|(
name|docID
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|values
init|=
operator|new
name|byte
index|[
name|numDims
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|values
index|[
name|dim
index|]
operator|=
operator|new
name|byte
index|[
name|numBytesPerDim
index|]
expr_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|values
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
block|}
name|docValues
operator|.
name|add
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
block|}
name|byte
index|[]
index|[]
index|[]
name|docValuesArray
init|=
name|docValues
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
name|docValues
operator|.
name|size
argument_list|()
index|]
index|[]
index|[]
argument_list|)
decl_stmt|;
name|int
index|[]
name|docIDsArray
init|=
operator|new
name|int
index|[
name|docIDs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docIDsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|docIDsArray
index|[
name|i
index|]
operator|=
name|docIDs
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|docValuesArray
argument_list|,
name|docIDsArray
argument_list|,
name|numDims
argument_list|,
name|numBytesPerDim
argument_list|)
expr_stmt|;
block|}
DECL|method|testAllEqual
specifier|public
name|void
name|testAllEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numBytesPerDim
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
name|PointValues
operator|.
name|MAX_NUM_BYTES
argument_list|)
decl_stmt|;
name|int
name|numDims
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|PointValues
operator|.
name|MAX_DIMENSIONS
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
index|[]
name|docValues
init|=
operator|new
name|byte
index|[
name|numDocs
index|]
index|[]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
if|if
condition|(
name|docID
operator|==
literal|0
condition|)
block|{
name|byte
index|[]
index|[]
name|values
init|=
operator|new
name|byte
index|[
name|numDims
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|values
index|[
name|dim
index|]
operator|=
operator|new
name|byte
index|[
name|numBytesPerDim
index|]
expr_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|values
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
block|}
name|docValues
index|[
name|docID
index|]
operator|=
name|values
expr_stmt|;
block|}
else|else
block|{
name|docValues
index|[
name|docID
index|]
operator|=
name|docValues
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
name|verify
argument_list|(
name|docValues
argument_list|,
literal|null
argument_list|,
name|numDims
argument_list|,
name|numBytesPerDim
argument_list|)
expr_stmt|;
block|}
DECL|method|testOneDimEqual
specifier|public
name|void
name|testOneDimEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numBytesPerDim
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
name|PointValues
operator|.
name|MAX_NUM_BYTES
argument_list|)
decl_stmt|;
name|int
name|numDims
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|PointValues
operator|.
name|MAX_DIMENSIONS
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|int
name|theEqualDim
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|numDims
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
index|[]
name|docValues
init|=
operator|new
name|byte
index|[
name|numDocs
index|]
index|[]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
name|byte
index|[]
index|[]
name|values
init|=
operator|new
name|byte
index|[
name|numDims
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|values
index|[
name|dim
index|]
operator|=
operator|new
name|byte
index|[
name|numBytesPerDim
index|]
expr_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|values
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
block|}
name|docValues
index|[
name|docID
index|]
operator|=
name|values
expr_stmt|;
if|if
condition|(
name|docID
operator|>
literal|0
condition|)
block|{
name|docValues
index|[
name|docID
index|]
index|[
name|theEqualDim
index|]
operator|=
name|docValues
index|[
literal|0
index|]
index|[
name|theEqualDim
index|]
expr_stmt|;
block|}
block|}
name|verify
argument_list|(
name|docValues
argument_list|,
literal|null
argument_list|,
name|numDims
argument_list|,
name|numBytesPerDim
argument_list|)
expr_stmt|;
block|}
comment|// Tests on N-dimensional points where each dimension is a BigInteger
DECL|method|testBigIntNDims
specifier|public
name|void
name|testBigIntNDims
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
try|try
init|(
name|Directory
name|dir
init|=
name|getDirectory
argument_list|(
name|numDocs
argument_list|)
init|)
block|{
name|int
name|numBytesPerDim
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
name|PointValues
operator|.
name|MAX_NUM_BYTES
argument_list|)
decl_stmt|;
name|int
name|numDims
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|PointValues
operator|.
name|MAX_DIMENSIONS
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// We rely on docIDs not changing:
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|BigInteger
index|[]
index|[]
name|docs
init|=
operator|new
name|BigInteger
index|[
name|numDocs
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
name|BigInteger
index|[]
name|values
init|=
operator|new
name|BigInteger
index|[
name|numDims
index|]
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  docID="
operator|+
name|docID
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|numDims
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|values
index|[
name|dim
index|]
operator|=
name|randomBigInt
argument_list|(
name|numBytesPerDim
argument_list|)
expr_stmt|;
name|bytes
index|[
name|dim
index|]
operator|=
operator|new
name|byte
index|[
name|numBytesPerDim
index|]
expr_stmt|;
name|NumericUtils
operator|.
name|bigIntToBytes
argument_list|(
name|values
index|[
name|dim
index|]
argument_list|,
name|bytes
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|,
name|numBytesPerDim
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    "
operator|+
name|dim
operator|+
literal|" -> "
operator|+
name|values
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|docs
index|[
name|docID
index|]
operator|=
name|values
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
literal|"field"
argument_list|,
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|DirectoryReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|PointValues
name|dimValues
init|=
name|MultiPointValues
operator|.
name|get
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
comment|// Random N dims rect query:
name|BigInteger
index|[]
name|queryMin
init|=
operator|new
name|BigInteger
index|[
name|numDims
index|]
decl_stmt|;
name|BigInteger
index|[]
name|queryMax
init|=
operator|new
name|BigInteger
index|[
name|numDims
index|]
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|queryMin
index|[
name|dim
index|]
operator|=
name|randomBigInt
argument_list|(
name|numBytesPerDim
argument_list|)
expr_stmt|;
name|queryMax
index|[
name|dim
index|]
operator|=
name|randomBigInt
argument_list|(
name|numBytesPerDim
argument_list|)
expr_stmt|;
if|if
condition|(
name|queryMin
index|[
name|dim
index|]
operator|.
name|compareTo
argument_list|(
name|queryMax
index|[
name|dim
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
name|BigInteger
name|x
init|=
name|queryMin
index|[
name|dim
index|]
decl_stmt|;
name|queryMin
index|[
name|dim
index|]
operator|=
name|queryMax
index|[
name|dim
index|]
expr_stmt|;
name|queryMax
index|[
name|dim
index|]
operator|=
name|x
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|dim
operator|+
literal|"\n    min="
operator|+
name|queryMin
index|[
name|dim
index|]
operator|+
literal|"\n    max="
operator|+
name|queryMax
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|BitSet
name|hits
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|dimValues
operator|.
name|intersect
argument_list|(
literal|"field"
argument_list|,
operator|new
name|IntersectVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|hits
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
comment|//System.out.println("visit docID=" + docID);
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|,
name|byte
index|[]
name|packedValue
parameter_list|)
block|{
comment|//System.out.println("visit check docID=" + docID);
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|BigInteger
name|x
init|=
name|NumericUtils
operator|.
name|bytesToBigInt
argument_list|(
name|packedValue
argument_list|,
name|dim
argument_list|,
name|numBytesPerDim
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|compareTo
argument_list|(
name|queryMin
index|[
name|dim
index|]
argument_list|)
operator|<
literal|0
operator|||
name|x
operator|.
name|compareTo
argument_list|(
name|queryMax
index|[
name|dim
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|//System.out.println("  no");
return|return;
block|}
block|}
comment|//System.out.println("  yes");
name|hits
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Relation
name|compare
parameter_list|(
name|byte
index|[]
name|minPacked
parameter_list|,
name|byte
index|[]
name|maxPacked
parameter_list|)
block|{
name|boolean
name|crosses
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|BigInteger
name|min
init|=
name|NumericUtils
operator|.
name|bytesToBigInt
argument_list|(
name|minPacked
argument_list|,
name|dim
argument_list|,
name|numBytesPerDim
argument_list|)
decl_stmt|;
name|BigInteger
name|max
init|=
name|NumericUtils
operator|.
name|bytesToBigInt
argument_list|(
name|maxPacked
argument_list|,
name|dim
argument_list|,
name|numBytesPerDim
argument_list|)
decl_stmt|;
assert|assert
name|max
operator|.
name|compareTo
argument_list|(
name|min
argument_list|)
operator|>=
literal|0
assert|;
if|if
condition|(
name|max
operator|.
name|compareTo
argument_list|(
name|queryMin
index|[
name|dim
index|]
argument_list|)
operator|<
literal|0
operator|||
name|min
operator|.
name|compareTo
argument_list|(
name|queryMax
index|[
name|dim
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
name|Relation
operator|.
name|CELL_OUTSIDE_QUERY
return|;
block|}
elseif|else
if|if
condition|(
name|min
operator|.
name|compareTo
argument_list|(
name|queryMin
index|[
name|dim
index|]
argument_list|)
operator|<
literal|0
operator|||
name|max
operator|.
name|compareTo
argument_list|(
name|queryMax
index|[
name|dim
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
name|crosses
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|crosses
condition|)
block|{
return|return
name|Relation
operator|.
name|CELL_CROSSES_QUERY
return|;
block|}
else|else
block|{
return|return
name|Relation
operator|.
name|CELL_INSIDE_QUERY
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
name|BigInteger
index|[]
name|docValues
init|=
name|docs
index|[
name|docID
index|]
decl_stmt|;
name|boolean
name|expected
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|BigInteger
name|x
init|=
name|docValues
index|[
name|dim
index|]
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|compareTo
argument_list|(
name|queryMin
index|[
name|dim
index|]
argument_list|)
operator|<
literal|0
operator|||
name|x
operator|.
name|compareTo
argument_list|(
name|queryMax
index|[
name|dim
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
name|expected
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
name|boolean
name|actual
init|=
name|hits
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"docID="
operator|+
name|docID
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testRandomBinaryTiny
specifier|public
name|void
name|testRandomBinaryTiny
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRandomBinary
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomBinaryMedium
specifier|public
name|void
name|testRandomBinaryMedium
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRandomBinary
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nightly
DECL|method|testRandomBinaryBig
specifier|public
name|void
name|testRandomBinaryBig
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeFalse
argument_list|(
literal|"too slow with SimpleText"
argument_list|,
name|Codec
operator|.
name|getDefault
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"SimpleText"
argument_list|)
argument_list|)
expr_stmt|;
name|doTestRandomBinary
argument_list|(
literal|200000
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestRandomBinary
specifier|private
name|void
name|doTestRandomBinary
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|count
argument_list|,
name|count
operator|*
literal|2
argument_list|)
decl_stmt|;
name|int
name|numBytesPerDim
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
name|PointValues
operator|.
name|MAX_NUM_BYTES
argument_list|)
decl_stmt|;
name|int
name|numDims
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|PointValues
operator|.
name|MAX_DIMENSIONS
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
index|[]
name|docValues
init|=
operator|new
name|byte
index|[
name|numDocs
index|]
index|[]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|numDocs
condition|;
name|docID
operator|++
control|)
block|{
name|byte
index|[]
index|[]
name|values
init|=
operator|new
name|byte
index|[
name|numDims
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|values
index|[
name|dim
index|]
operator|=
operator|new
name|byte
index|[
name|numBytesPerDim
index|]
expr_stmt|;
comment|// TODO: sometimes test on a "small" volume too, so we test the high density cases, higher chance of boundary, etc. cases:
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|values
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
block|}
name|docValues
index|[
name|docID
index|]
operator|=
name|values
expr_stmt|;
block|}
name|verify
argument_list|(
name|docValues
argument_list|,
literal|null
argument_list|,
name|numDims
argument_list|,
name|numBytesPerDim
argument_list|)
expr_stmt|;
block|}
comment|/** docIDs can be null, for the single valued case, else it maps value to docID, but all values for one doc must be adjacent */
DECL|method|verify
specifier|private
name|void
name|verify
parameter_list|(
name|byte
index|[]
index|[]
index|[]
name|docValues
parameter_list|,
name|int
index|[]
name|docIDs
parameter_list|,
name|int
name|numDims
parameter_list|,
name|int
name|numBytesPerDim
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Directory
name|dir
init|=
name|getDirectory
argument_list|(
name|docValues
operator|.
name|length
argument_list|)
init|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|verify
argument_list|(
name|dir
argument_list|,
name|docValues
argument_list|,
name|docIDs
argument_list|,
name|numDims
argument_list|,
name|numBytesPerDim
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry
name|assertTrue
argument_list|(
name|iae
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"either increase maxMBSortInHeap or decrease maxPointsInLeafNode"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|verify
specifier|private
name|void
name|verify
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|byte
index|[]
index|[]
index|[]
name|docValues
parameter_list|,
name|int
index|[]
name|ids
parameter_list|,
name|int
name|numDims
parameter_list|,
name|int
name|numBytesPerDim
parameter_list|,
name|boolean
name|expectExceptions
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numValues
init|=
name|docValues
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: numValues="
operator|+
name|numValues
operator|+
literal|" numDims="
operator|+
name|numDims
operator|+
literal|" numBytesPerDim="
operator|+
name|numBytesPerDim
argument_list|)
expr_stmt|;
block|}
comment|// RandomIndexWriter is too slow:
name|boolean
name|useRealWriter
init|=
name|docValues
operator|.
name|length
operator|>
literal|10000
decl_stmt|;
name|IndexWriterConfig
name|iwc
decl_stmt|;
if|if
condition|(
name|useRealWriter
condition|)
block|{
name|iwc
operator|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iwc
operator|=
name|newIndexWriterConfig
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|expectExceptions
condition|)
block|{
name|MergeScheduler
name|ms
init|=
name|iwc
operator|.
name|getMergeScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|ms
operator|instanceof
name|ConcurrentMergeScheduler
condition|)
block|{
operator|(
operator|(
name|ConcurrentMergeScheduler
operator|)
name|ms
operator|)
operator|.
name|setSuppressExceptions
argument_list|()
expr_stmt|;
block|}
block|}
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|DirectoryReader
name|r
init|=
literal|null
decl_stmt|;
comment|// Compute actual min/max values:
name|byte
index|[]
index|[]
name|expectedMinValues
init|=
operator|new
name|byte
index|[
name|numDims
index|]
index|[]
decl_stmt|;
name|byte
index|[]
index|[]
name|expectedMaxValues
init|=
operator|new
name|byte
index|[
name|numDims
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|ord
init|=
literal|0
init|;
name|ord
operator|<
name|docValues
operator|.
name|length
condition|;
name|ord
operator|++
control|)
block|{
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
if|if
condition|(
name|ord
operator|==
literal|0
condition|)
block|{
name|expectedMinValues
index|[
name|dim
index|]
operator|=
operator|new
name|byte
index|[
name|numBytesPerDim
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|docValues
index|[
name|ord
index|]
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|,
name|expectedMinValues
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|,
name|numBytesPerDim
argument_list|)
expr_stmt|;
name|expectedMaxValues
index|[
name|dim
index|]
operator|=
operator|new
name|byte
index|[
name|numBytesPerDim
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|docValues
index|[
name|ord
index|]
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|,
name|expectedMaxValues
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|,
name|numBytesPerDim
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: it's cheating that we use StringHelper.compare for "truth": what if it's buggy?
if|if
condition|(
name|StringHelper
operator|.
name|compare
argument_list|(
name|numBytesPerDim
argument_list|,
name|docValues
index|[
name|ord
index|]
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|,
name|expectedMinValues
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|)
operator|<
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|docValues
index|[
name|ord
index|]
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|,
name|expectedMinValues
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|,
name|numBytesPerDim
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringHelper
operator|.
name|compare
argument_list|(
name|numBytesPerDim
argument_list|,
name|docValues
index|[
name|ord
index|]
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|,
name|expectedMaxValues
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|)
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|docValues
index|[
name|ord
index|]
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|,
name|expectedMaxValues
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|,
name|numBytesPerDim
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// 20% of the time we add into a separate directory, then at some point use
comment|// addIndexes to bring the indexed point values to the main directory:
name|Directory
name|saveDir
decl_stmt|;
name|RandomIndexWriter
name|saveW
decl_stmt|;
name|int
name|addIndexesAt
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|1
condition|)
block|{
name|saveDir
operator|=
name|dir
expr_stmt|;
name|saveW
operator|=
name|w
expr_stmt|;
name|dir
operator|=
name|getDirectory
argument_list|(
name|numValues
argument_list|)
expr_stmt|;
if|if
condition|(
name|useRealWriter
condition|)
block|{
name|iwc
operator|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iwc
operator|=
name|newIndexWriterConfig
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|expectExceptions
condition|)
block|{
name|MergeScheduler
name|ms
init|=
name|iwc
operator|.
name|getMergeScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|ms
operator|instanceof
name|ConcurrentMergeScheduler
condition|)
block|{
operator|(
operator|(
name|ConcurrentMergeScheduler
operator|)
name|ms
operator|)
operator|.
name|setSuppressExceptions
argument_list|()
expr_stmt|;
block|}
block|}
name|w
operator|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
expr_stmt|;
name|addIndexesAt
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|numValues
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|saveW
operator|=
literal|null
expr_stmt|;
name|saveDir
operator|=
literal|null
expr_stmt|;
name|addIndexesAt
operator|=
literal|0
expr_stmt|;
block|}
try|try
block|{
name|Document
name|doc
init|=
literal|null
decl_stmt|;
name|int
name|lastID
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|ord
init|=
literal|0
init|;
name|ord
operator|<
name|numValues
condition|;
name|ord
operator|++
control|)
block|{
name|int
name|id
decl_stmt|;
if|if
condition|(
name|ids
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|ord
expr_stmt|;
block|}
else|else
block|{
name|id
operator|=
name|ids
index|[
name|ord
index|]
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|!=
name|lastID
condition|)
block|{
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|useRealWriter
condition|)
block|{
name|w
operator|.
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
literal|"field"
argument_list|,
name|docValues
index|[
name|ord
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|lastID
operator|=
name|id
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|30
argument_list|)
operator|==
literal|17
condition|)
block|{
comment|// randomly index some documents without this field
if|if
condition|(
name|useRealWriter
condition|)
block|{
name|w
operator|.
name|w
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|w
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"add empty doc"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|30
argument_list|)
operator|==
literal|17
condition|)
block|{
comment|// randomly index some documents with this field, but we will delete them:
name|Document
name|xdoc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|xdoc
operator|.
name|add
argument_list|(
operator|new
name|BinaryPoint
argument_list|(
literal|"field"
argument_list|,
name|docValues
index|[
name|ord
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|xdoc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"nukeme"
argument_list|,
literal|"yes"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|useRealWriter
condition|)
block|{
name|w
operator|.
name|w
operator|.
name|addDocument
argument_list|(
name|xdoc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|xdoc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"add doc doc-to-delete"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|useRealWriter
condition|)
block|{
name|w
operator|.
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"nukeme"
argument_list|,
literal|"yes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"nukeme"
argument_list|,
literal|"yes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  ord="
operator|+
name|ord
operator|+
literal|" id="
operator|+
name|id
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    dim="
operator|+
name|dim
operator|+
literal|" value="
operator|+
operator|new
name|BytesRef
argument_list|(
name|docValues
index|[
name|ord
index|]
index|[
name|dim
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|saveW
operator|!=
literal|null
operator|&&
name|ord
operator|>=
name|addIndexesAt
condition|)
block|{
name|switchIndex
argument_list|(
name|w
argument_list|,
name|dir
argument_list|,
name|saveW
argument_list|)
expr_stmt|;
name|w
operator|=
name|saveW
expr_stmt|;
name|dir
operator|=
name|saveDir
expr_stmt|;
name|saveW
operator|=
literal|null
expr_stmt|;
name|saveDir
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"nukeme"
argument_list|,
literal|"yes"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: now force merge"
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|r
operator|=
name|w
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: reader="
operator|+
name|r
argument_list|)
expr_stmt|;
block|}
name|PointValues
name|dimValues
init|=
name|MultiPointValues
operator|.
name|get
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  dimValues="
operator|+
name|dimValues
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|dimValues
argument_list|)
expr_stmt|;
name|NumericDocValues
name|idValues
init|=
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|r
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|Bits
name|liveDocs
init|=
name|MultiFields
operator|.
name|getLiveDocs
argument_list|(
name|r
argument_list|)
decl_stmt|;
comment|// Verify min/max values are correct:
name|byte
index|[]
name|minValues
init|=
name|dimValues
operator|.
name|getMinPackedValue
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|maxValues
init|=
name|dimValues
operator|.
name|getMaxPackedValue
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|scratch
init|=
operator|new
name|byte
index|[
name|numBytesPerDim
index|]
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|minValues
argument_list|,
name|dim
operator|*
name|numBytesPerDim
argument_list|,
name|scratch
argument_list|,
literal|0
argument_list|,
name|scratch
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//System.out.println("dim=" + dim + " expectedMin=" + new BytesRef(expectedMinValues[dim]) + " min=" + new BytesRef(scratch));
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expectedMinValues
index|[
name|dim
index|]
argument_list|,
name|scratch
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|maxValues
argument_list|,
name|dim
operator|*
name|numBytesPerDim
argument_list|,
name|scratch
argument_list|,
literal|0
argument_list|,
name|scratch
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//System.out.println("dim=" + dim + " expectedMax=" + new BytesRef(expectedMaxValues[dim]) + " max=" + new BytesRef(scratch));
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expectedMaxValues
index|[
name|dim
index|]
argument_list|,
name|scratch
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
comment|// Random N dims rect query:
name|byte
index|[]
index|[]
name|queryMin
init|=
operator|new
name|byte
index|[
name|numDims
index|]
index|[]
decl_stmt|;
name|byte
index|[]
index|[]
name|queryMax
init|=
operator|new
name|byte
index|[
name|numDims
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|queryMin
index|[
name|dim
index|]
operator|=
operator|new
name|byte
index|[
name|numBytesPerDim
index|]
expr_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|queryMin
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
name|queryMax
index|[
name|dim
index|]
operator|=
operator|new
name|byte
index|[
name|numBytesPerDim
index|]
expr_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|queryMax
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|NumericUtils
operator|.
name|compare
argument_list|(
name|numBytesPerDim
argument_list|,
name|queryMin
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|,
name|queryMax
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|)
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|x
init|=
name|queryMin
index|[
name|dim
index|]
decl_stmt|;
name|queryMin
index|[
name|dim
index|]
operator|=
name|queryMax
index|[
name|dim
index|]
expr_stmt|;
name|queryMax
index|[
name|dim
index|]
operator|=
name|x
expr_stmt|;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  dim="
operator|+
name|dim
operator|+
literal|"\n    queryMin="
operator|+
operator|new
name|BytesRef
argument_list|(
name|queryMin
index|[
name|dim
index|]
argument_list|)
operator|+
literal|"\n    queryMax="
operator|+
operator|new
name|BytesRef
argument_list|(
name|queryMax
index|[
name|dim
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|BitSet
name|hits
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|dimValues
operator|.
name|intersect
argument_list|(
literal|"field"
argument_list|,
operator|new
name|PointValues
operator|.
name|IntersectVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
if|if
condition|(
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
condition|)
block|{
name|hits
operator|.
name|set
argument_list|(
operator|(
name|int
operator|)
name|idValues
operator|.
name|get
argument_list|(
name|docID
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//System.out.println("visit docID=" + docID);
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|,
name|byte
index|[]
name|packedValue
parameter_list|)
block|{
if|if
condition|(
name|liveDocs
operator|!=
literal|null
operator|&&
name|liveDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return;
block|}
comment|//System.out.println("visit check docID=" + docID + " id=" + idValues.get(docID));
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
comment|//System.out.println("  dim=" + dim + " value=" + new BytesRef(packedValue, dim*numBytesPerDim, numBytesPerDim));
if|if
condition|(
name|NumericUtils
operator|.
name|compare
argument_list|(
name|numBytesPerDim
argument_list|,
name|packedValue
argument_list|,
name|dim
argument_list|,
name|queryMin
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|)
operator|<
literal|0
operator|||
name|NumericUtils
operator|.
name|compare
argument_list|(
name|numBytesPerDim
argument_list|,
name|packedValue
argument_list|,
name|dim
argument_list|,
name|queryMax
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|//System.out.println("  no");
return|return;
block|}
block|}
comment|//System.out.println("  yes");
name|hits
operator|.
name|set
argument_list|(
operator|(
name|int
operator|)
name|idValues
operator|.
name|get
argument_list|(
name|docID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Relation
name|compare
parameter_list|(
name|byte
index|[]
name|minPacked
parameter_list|,
name|byte
index|[]
name|maxPacked
parameter_list|)
block|{
name|boolean
name|crosses
init|=
literal|false
decl_stmt|;
comment|//System.out.println("compare");
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
if|if
condition|(
name|NumericUtils
operator|.
name|compare
argument_list|(
name|numBytesPerDim
argument_list|,
name|maxPacked
argument_list|,
name|dim
argument_list|,
name|queryMin
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|)
operator|<
literal|0
operator|||
name|NumericUtils
operator|.
name|compare
argument_list|(
name|numBytesPerDim
argument_list|,
name|minPacked
argument_list|,
name|dim
argument_list|,
name|queryMax
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|//System.out.println("  query_outside_cell");
return|return
name|Relation
operator|.
name|CELL_OUTSIDE_QUERY
return|;
block|}
elseif|else
if|if
condition|(
name|NumericUtils
operator|.
name|compare
argument_list|(
name|numBytesPerDim
argument_list|,
name|minPacked
argument_list|,
name|dim
argument_list|,
name|queryMin
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|)
operator|<
literal|0
operator|||
name|NumericUtils
operator|.
name|compare
argument_list|(
name|numBytesPerDim
argument_list|,
name|maxPacked
argument_list|,
name|dim
argument_list|,
name|queryMax
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|)
operator|>
literal|0
condition|)
block|{
name|crosses
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|crosses
condition|)
block|{
comment|//System.out.println("  query_crosses_cell");
return|return
name|Relation
operator|.
name|CELL_CROSSES_QUERY
return|;
block|}
else|else
block|{
comment|//System.out.println("  cell_inside_query");
return|return
name|Relation
operator|.
name|CELL_INSIDE_QUERY
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|BitSet
name|expected
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|ord
init|=
literal|0
init|;
name|ord
operator|<
name|numValues
condition|;
name|ord
operator|++
control|)
block|{
name|boolean
name|matches
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|byte
index|[]
name|x
init|=
name|docValues
index|[
name|ord
index|]
index|[
name|dim
index|]
decl_stmt|;
if|if
condition|(
name|NumericUtils
operator|.
name|compare
argument_list|(
name|numBytesPerDim
argument_list|,
name|x
argument_list|,
literal|0
argument_list|,
name|queryMin
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|)
operator|<
literal|0
operator|||
name|NumericUtils
operator|.
name|compare
argument_list|(
name|numBytesPerDim
argument_list|,
name|x
argument_list|,
literal|0
argument_list|,
name|queryMax
index|[
name|dim
index|]
argument_list|,
literal|0
argument_list|)
operator|>
literal|0
condition|)
block|{
name|matches
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|matches
condition|)
block|{
name|int
name|id
decl_stmt|;
if|if
condition|(
name|ids
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|ord
expr_stmt|;
block|}
else|else
block|{
name|id
operator|=
name|ids
index|[
name|ord
index|]
expr_stmt|;
block|}
name|expected
operator|.
name|set
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|limit
init|=
name|Math
operator|.
name|max
argument_list|(
name|expected
operator|.
name|length
argument_list|()
argument_list|,
name|hits
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|failCount
init|=
literal|0
decl_stmt|;
name|int
name|successCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|limit
condition|;
name|id
operator|++
control|)
block|{
if|if
condition|(
name|expected
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|!=
name|hits
operator|.
name|get
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"FAIL: id="
operator|+
name|id
argument_list|)
expr_stmt|;
name|failCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|successCount
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failCount
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|r
operator|.
name|maxDoc
argument_list|()
condition|;
name|docID
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  docID="
operator|+
name|docID
operator|+
literal|" id="
operator|+
name|idValues
operator|.
name|get
argument_list|(
name|docID
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
name|failCount
operator|+
literal|" docs failed; "
operator|+
name|successCount
operator|+
literal|" docs succeeded"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|r
argument_list|,
name|w
argument_list|,
name|saveW
argument_list|,
name|saveDir
operator|==
literal|null
condition|?
literal|null
else|:
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAddIndexes
specifier|public
name|void
name|testAddIndexes
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir1
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir1
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"int1"
argument_list|,
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"int2"
argument_list|,
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Different field number assigments:
name|Directory
name|dir2
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|w
operator|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"int2"
argument_list|,
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
literal|"int1"
argument_list|,
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|w
operator|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|w
operator|.
name|addIndexes
argument_list|(
operator|new
name|Directory
index|[]
block|{
name|dir1
block|,
name|dir2
block|}
argument_list|)
expr_stmt|;
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|DirectoryReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|PointRangeQuery
operator|.
name|newIntExact
argument_list|(
literal|"int1"
argument_list|,
literal|17
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|count
argument_list|(
name|PointRangeQuery
operator|.
name|newIntExact
argument_list|(
literal|"int2"
argument_list|,
literal|42
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|switchIndex
specifier|private
name|void
name|switchIndex
parameter_list|(
name|RandomIndexWriter
name|w
parameter_list|,
name|Directory
name|dir
parameter_list|,
name|RandomIndexWriter
name|saveW
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// Add via readers:
try|try
init|(
name|DirectoryReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
init|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// Add via CodecReaders:
name|List
argument_list|<
name|CodecReader
argument_list|>
name|subs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|context
range|:
name|r
operator|.
name|leaves
argument_list|()
control|)
block|{
name|subs
operator|.
name|add
argument_list|(
operator|(
name|CodecReader
operator|)
name|context
operator|.
name|reader
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: now use addIndexes(CodecReader[]) to switch writers"
argument_list|)
expr_stmt|;
block|}
name|saveW
operator|.
name|addIndexes
argument_list|(
name|subs
operator|.
name|toArray
argument_list|(
operator|new
name|CodecReader
index|[
name|subs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: now use TestUtil.addIndexesSlowly(DirectoryReader[]) to switch writers"
argument_list|)
expr_stmt|;
block|}
name|TestUtil
operator|.
name|addIndexesSlowly
argument_list|(
name|saveW
operator|.
name|w
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Add via directory:
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: now use addIndexes(Directory[]) to switch writers"
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|saveW
operator|.
name|addIndexes
argument_list|(
operator|new
name|Directory
index|[]
block|{
name|dir
block|}
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|randomBigInt
specifier|private
name|BigInteger
name|randomBigInt
parameter_list|(
name|int
name|numBytes
parameter_list|)
block|{
name|BigInteger
name|x
init|=
operator|new
name|BigInteger
argument_list|(
name|numBytes
operator|*
literal|8
operator|-
literal|1
argument_list|,
name|random
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|x
operator|=
name|x
operator|.
name|negate
argument_list|()
expr_stmt|;
block|}
return|return
name|x
return|;
block|}
DECL|method|getDirectory
specifier|private
name|Directory
name|getDirectory
parameter_list|(
name|int
name|numPoints
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
name|dir
decl_stmt|;
if|if
condition|(
name|numPoints
operator|>
literal|100000
condition|)
block|{
name|dir
operator|=
name|newFSDirectory
argument_list|(
name|createTempDir
argument_list|(
literal|"TestBKDTree"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
block|}
comment|//dir = FSDirectory.open(createTempDir());
return|return
name|dir
return|;
block|}
annotation|@
name|Override
DECL|method|mergeIsStable
specifier|protected
name|boolean
name|mergeIsStable
parameter_list|()
block|{
comment|// suppress this test from base class: merges for BKD trees are not stable because the tree created by merge will have a different
comment|// structure than the tree created by adding points separately
return|return
literal|false
return|;
block|}
block|}
end_class
end_unit
