begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|VirtualMethod
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CompiledAutomaton
import|;
end_import
begin_comment
comment|/**  * A {@link FilterLeafReader} that can be used to apply  * additional checks for tests.  */
end_comment
begin_class
DECL|class|AssertingLeafReader
specifier|public
class|class
name|AssertingLeafReader
extends|extends
name|FilterLeafReader
block|{
DECL|method|assertThread
specifier|private
specifier|static
name|void
name|assertThread
parameter_list|(
name|String
name|object
parameter_list|,
name|Thread
name|creationThread
parameter_list|)
block|{
if|if
condition|(
name|creationThread
operator|!=
name|Thread
operator|.
name|currentThread
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|object
operator|+
literal|" are only supposed to be consumed in "
operator|+
literal|"the thread in which they have been acquired. But was acquired in "
operator|+
name|creationThread
operator|+
literal|" and consumed in "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|+
literal|"."
argument_list|)
throw|;
block|}
block|}
DECL|method|AssertingLeafReader
specifier|public
name|AssertingLeafReader
parameter_list|(
name|LeafReader
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// check some basic reader sanity
assert|assert
name|in
operator|.
name|maxDoc
argument_list|()
operator|>=
literal|0
assert|;
assert|assert
name|in
operator|.
name|numDocs
argument_list|()
operator|<=
name|in
operator|.
name|maxDoc
argument_list|()
assert|;
assert|assert
name|in
operator|.
name|numDeletedDocs
argument_list|()
operator|+
name|in
operator|.
name|numDocs
argument_list|()
operator|==
name|in
operator|.
name|maxDoc
argument_list|()
assert|;
assert|assert
operator|!
name|in
operator|.
name|hasDeletions
argument_list|()
operator|||
name|in
operator|.
name|numDeletedDocs
argument_list|()
operator|>
literal|0
operator|&&
name|in
operator|.
name|numDocs
argument_list|()
operator|<
name|in
operator|.
name|maxDoc
argument_list|()
assert|;
name|addCoreClosedListener
argument_list|(
operator|new
name|CoreClosedListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|Object
name|ownerCoreCacheKey
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Object
name|expectedKey
init|=
name|getCoreCacheKey
argument_list|()
decl_stmt|;
assert|assert
name|expectedKey
operator|==
name|ownerCoreCacheKey
operator|:
literal|"Core closed listener called on a different key "
operator|+
name|expectedKey
operator|+
literal|"<> "
operator|+
name|ownerCoreCacheKey
assert|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fields
specifier|public
name|Fields
name|fields
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|AssertingFields
argument_list|(
name|super
operator|.
name|fields
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTermVectors
specifier|public
name|Fields
name|getTermVectors
parameter_list|(
name|int
name|docID
parameter_list|)
throws|throws
name|IOException
block|{
name|Fields
name|fields
init|=
name|super
operator|.
name|getTermVectors
argument_list|(
name|docID
argument_list|)
decl_stmt|;
return|return
name|fields
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|AssertingFields
argument_list|(
name|fields
argument_list|)
return|;
block|}
comment|/**    * Wraps a Fields but with additional asserts    */
DECL|class|AssertingFields
specifier|public
specifier|static
class|class
name|AssertingFields
extends|extends
name|FilterFields
block|{
DECL|method|AssertingFields
specifier|public
name|AssertingFields
parameter_list|(
name|Fields
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|super
operator|.
name|iterator
argument_list|()
decl_stmt|;
assert|assert
name|iterator
operator|!=
literal|null
assert|;
return|return
name|iterator
return|;
block|}
annotation|@
name|Override
DECL|method|terms
specifier|public
name|Terms
name|terms
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|Terms
name|terms
init|=
name|super
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|terms
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|AssertingTerms
argument_list|(
name|terms
argument_list|)
return|;
block|}
block|}
comment|/**    * Wraps a Terms but with additional asserts    */
DECL|class|AssertingTerms
specifier|public
specifier|static
class|class
name|AssertingTerms
extends|extends
name|FilterTerms
block|{
DECL|method|AssertingTerms
specifier|public
name|AssertingTerms
parameter_list|(
name|Terms
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|intersect
specifier|public
name|TermsEnum
name|intersect
parameter_list|(
name|CompiledAutomaton
name|automaton
parameter_list|,
name|BytesRef
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|TermsEnum
name|termsEnum
init|=
name|in
operator|.
name|intersect
argument_list|(
name|automaton
argument_list|,
name|bytes
argument_list|)
decl_stmt|;
assert|assert
name|termsEnum
operator|!=
literal|null
assert|;
assert|assert
name|bytes
operator|==
literal|null
operator|||
name|bytes
operator|.
name|isValid
argument_list|()
assert|;
return|return
operator|new
name|AssertingTermsEnum
argument_list|(
name|termsEnum
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMin
specifier|public
name|BytesRef
name|getMin
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesRef
name|v
init|=
name|in
operator|.
name|getMin
argument_list|()
decl_stmt|;
assert|assert
name|v
operator|==
literal|null
operator|||
name|v
operator|.
name|isValid
argument_list|()
assert|;
return|return
name|v
return|;
block|}
annotation|@
name|Override
DECL|method|getMax
specifier|public
name|BytesRef
name|getMax
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesRef
name|v
init|=
name|in
operator|.
name|getMax
argument_list|()
decl_stmt|;
assert|assert
name|v
operator|==
literal|null
operator|||
name|v
operator|.
name|isValid
argument_list|()
assert|;
return|return
name|v
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|TermsEnum
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
name|TermsEnum
name|termsEnum
init|=
name|super
operator|.
name|iterator
argument_list|()
decl_stmt|;
assert|assert
name|termsEnum
operator|!=
literal|null
assert|;
return|return
operator|new
name|AssertingTermsEnum
argument_list|(
name|termsEnum
argument_list|)
return|;
block|}
block|}
DECL|field|SEEK_EXACT
specifier|static
specifier|final
name|VirtualMethod
argument_list|<
name|TermsEnum
argument_list|>
name|SEEK_EXACT
init|=
operator|new
name|VirtualMethod
argument_list|<>
argument_list|(
name|TermsEnum
operator|.
name|class
argument_list|,
literal|"seekExact"
argument_list|,
name|BytesRef
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|AssertingTermsEnum
specifier|static
class|class
name|AssertingTermsEnum
extends|extends
name|FilterTermsEnum
block|{
DECL|field|creationThread
specifier|private
specifier|final
name|Thread
name|creationThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
DECL|enum|State
DECL|enum constant|INITIAL
DECL|enum constant|POSITIONED
DECL|enum constant|UNPOSITIONED
specifier|private
enum|enum
name|State
block|{
name|INITIAL
block|,
name|POSITIONED
block|,
name|UNPOSITIONED
block|}
empty_stmt|;
DECL|field|state
specifier|private
name|State
name|state
init|=
name|State
operator|.
name|INITIAL
decl_stmt|;
DECL|field|delegateOverridesSeekExact
specifier|private
specifier|final
name|boolean
name|delegateOverridesSeekExact
decl_stmt|;
DECL|method|AssertingTermsEnum
specifier|public
name|AssertingTermsEnum
parameter_list|(
name|TermsEnum
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|delegateOverridesSeekExact
operator|=
name|SEEK_EXACT
operator|.
name|isOverriddenAsOf
argument_list|(
name|in
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|postings
specifier|public
name|PostingsEnum
name|postings
parameter_list|(
name|PostingsEnum
name|reuse
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
name|assertThread
argument_list|(
literal|"Terms enums"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|state
operator|==
name|State
operator|.
name|POSITIONED
operator|:
literal|"docs(...) called on unpositioned TermsEnum"
assert|;
comment|// reuse if the codec reused
specifier|final
name|PostingsEnum
name|actualReuse
decl_stmt|;
if|if
condition|(
name|reuse
operator|instanceof
name|AssertingPostingsEnum
condition|)
block|{
name|actualReuse
operator|=
operator|(
operator|(
name|AssertingPostingsEnum
operator|)
name|reuse
operator|)
operator|.
name|in
expr_stmt|;
block|}
else|else
block|{
name|actualReuse
operator|=
literal|null
expr_stmt|;
block|}
name|PostingsEnum
name|docs
init|=
name|super
operator|.
name|postings
argument_list|(
name|actualReuse
argument_list|,
name|flags
argument_list|)
decl_stmt|;
assert|assert
name|docs
operator|!=
literal|null
assert|;
if|if
condition|(
name|docs
operator|==
name|actualReuse
condition|)
block|{
comment|// codec reused, reset asserting state
operator|(
operator|(
name|AssertingPostingsEnum
operator|)
name|reuse
operator|)
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|reuse
return|;
block|}
else|else
block|{
return|return
operator|new
name|AssertingPostingsEnum
argument_list|(
name|docs
argument_list|)
return|;
block|}
block|}
comment|// TODO: we should separately track if we are 'at the end' ?
comment|// someone should not call next() after it returns null!!!!
annotation|@
name|Override
DECL|method|next
specifier|public
name|BytesRef
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|assertThread
argument_list|(
literal|"Terms enums"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|state
operator|==
name|State
operator|.
name|INITIAL
operator|||
name|state
operator|==
name|State
operator|.
name|POSITIONED
operator|:
literal|"next() called on unpositioned TermsEnum"
assert|;
name|BytesRef
name|result
init|=
name|super
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|UNPOSITIONED
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|result
operator|.
name|isValid
argument_list|()
assert|;
name|state
operator|=
name|State
operator|.
name|POSITIONED
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|ord
specifier|public
name|long
name|ord
parameter_list|()
throws|throws
name|IOException
block|{
name|assertThread
argument_list|(
literal|"Terms enums"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|state
operator|==
name|State
operator|.
name|POSITIONED
operator|:
literal|"ord() called on unpositioned TermsEnum"
assert|;
return|return
name|super
operator|.
name|ord
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|()
throws|throws
name|IOException
block|{
name|assertThread
argument_list|(
literal|"Terms enums"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|state
operator|==
name|State
operator|.
name|POSITIONED
operator|:
literal|"docFreq() called on unpositioned TermsEnum"
assert|;
return|return
name|super
operator|.
name|docFreq
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|totalTermFreq
specifier|public
name|long
name|totalTermFreq
parameter_list|()
throws|throws
name|IOException
block|{
name|assertThread
argument_list|(
literal|"Terms enums"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|state
operator|==
name|State
operator|.
name|POSITIONED
operator|:
literal|"totalTermFreq() called on unpositioned TermsEnum"
assert|;
return|return
name|super
operator|.
name|totalTermFreq
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|term
specifier|public
name|BytesRef
name|term
parameter_list|()
throws|throws
name|IOException
block|{
name|assertThread
argument_list|(
literal|"Terms enums"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|state
operator|==
name|State
operator|.
name|POSITIONED
operator|:
literal|"term() called on unpositioned TermsEnum"
assert|;
name|BytesRef
name|ret
init|=
name|super
operator|.
name|term
argument_list|()
decl_stmt|;
assert|assert
name|ret
operator|==
literal|null
operator|||
name|ret
operator|.
name|isValid
argument_list|()
assert|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|seekExact
specifier|public
name|void
name|seekExact
parameter_list|(
name|long
name|ord
parameter_list|)
throws|throws
name|IOException
block|{
name|assertThread
argument_list|(
literal|"Terms enums"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
name|super
operator|.
name|seekExact
argument_list|(
name|ord
argument_list|)
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|POSITIONED
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|seekCeil
specifier|public
name|SeekStatus
name|seekCeil
parameter_list|(
name|BytesRef
name|term
parameter_list|)
throws|throws
name|IOException
block|{
name|assertThread
argument_list|(
literal|"Terms enums"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|term
operator|.
name|isValid
argument_list|()
assert|;
name|SeekStatus
name|result
init|=
name|super
operator|.
name|seekCeil
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|SeekStatus
operator|.
name|END
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|UNPOSITIONED
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|State
operator|.
name|POSITIONED
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|seekExact
specifier|public
name|boolean
name|seekExact
parameter_list|(
name|BytesRef
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|assertThread
argument_list|(
literal|"Terms enums"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|text
operator|.
name|isValid
argument_list|()
assert|;
name|boolean
name|result
decl_stmt|;
if|if
condition|(
name|delegateOverridesSeekExact
condition|)
block|{
name|result
operator|=
name|in
operator|.
name|seekExact
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|super
operator|.
name|seekExact
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|POSITIONED
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|State
operator|.
name|UNPOSITIONED
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|termState
specifier|public
name|TermState
name|termState
parameter_list|()
throws|throws
name|IOException
block|{
name|assertThread
argument_list|(
literal|"Terms enums"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|state
operator|==
name|State
operator|.
name|POSITIONED
operator|:
literal|"termState() called on unpositioned TermsEnum"
assert|;
return|return
name|in
operator|.
name|termState
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|seekExact
specifier|public
name|void
name|seekExact
parameter_list|(
name|BytesRef
name|term
parameter_list|,
name|TermState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|assertThread
argument_list|(
literal|"Terms enums"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|term
operator|.
name|isValid
argument_list|()
assert|;
name|in
operator|.
name|seekExact
argument_list|(
name|term
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|State
operator|.
name|POSITIONED
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AssertingTermsEnum("
operator|+
name|in
operator|+
literal|")"
return|;
block|}
DECL|method|reset
name|void
name|reset
parameter_list|()
block|{
name|state
operator|=
name|State
operator|.
name|INITIAL
expr_stmt|;
block|}
block|}
DECL|enum|DocsEnumState
DECL|enum constant|START
DECL|enum constant|ITERATING
DECL|enum constant|FINISHED
specifier|static
enum|enum
name|DocsEnumState
block|{
name|START
block|,
name|ITERATING
block|,
name|FINISHED
block|}
empty_stmt|;
comment|/** Wraps a docsenum with additional checks */
DECL|class|AssertingPostingsEnum
specifier|public
specifier|static
class|class
name|AssertingPostingsEnum
extends|extends
name|FilterPostingsEnum
block|{
DECL|field|creationThread
specifier|private
specifier|final
name|Thread
name|creationThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
DECL|field|state
specifier|private
name|DocsEnumState
name|state
init|=
name|DocsEnumState
operator|.
name|START
decl_stmt|;
DECL|field|positionCount
name|int
name|positionCount
init|=
literal|0
decl_stmt|;
DECL|field|positionMax
name|int
name|positionMax
init|=
literal|0
decl_stmt|;
DECL|field|doc
specifier|private
name|int
name|doc
decl_stmt|;
DECL|method|AssertingPostingsEnum
specifier|public
name|AssertingPostingsEnum
parameter_list|(
name|PostingsEnum
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|doc
operator|=
name|in
operator|.
name|docID
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|assertThread
argument_list|(
literal|"Docs enums"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|FINISHED
operator|:
literal|"nextDoc() called after NO_MORE_DOCS"
assert|;
name|int
name|nextDoc
init|=
name|super
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
assert|assert
name|nextDoc
operator|>
name|doc
operator|:
literal|"backwards nextDoc from "
operator|+
name|doc
operator|+
literal|" to "
operator|+
name|nextDoc
operator|+
literal|" "
operator|+
name|in
assert|;
if|if
condition|(
name|nextDoc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|state
operator|=
name|DocsEnumState
operator|.
name|FINISHED
expr_stmt|;
name|positionMax
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|DocsEnumState
operator|.
name|ITERATING
expr_stmt|;
name|positionMax
operator|=
name|super
operator|.
name|freq
argument_list|()
expr_stmt|;
block|}
name|positionCount
operator|=
literal|0
expr_stmt|;
assert|assert
name|super
operator|.
name|docID
argument_list|()
operator|==
name|nextDoc
assert|;
return|return
name|doc
operator|=
name|nextDoc
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|assertThread
argument_list|(
literal|"Docs enums"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|FINISHED
operator|:
literal|"advance() called after NO_MORE_DOCS"
assert|;
assert|assert
name|target
operator|>
name|doc
operator|:
literal|"target must be> docID(), got "
operator|+
name|target
operator|+
literal|"<= "
operator|+
name|doc
assert|;
name|int
name|advanced
init|=
name|super
operator|.
name|advance
argument_list|(
name|target
argument_list|)
decl_stmt|;
assert|assert
name|advanced
operator|>=
name|target
operator|:
literal|"backwards advance from: "
operator|+
name|target
operator|+
literal|" to: "
operator|+
name|advanced
assert|;
if|if
condition|(
name|advanced
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|state
operator|=
name|DocsEnumState
operator|.
name|FINISHED
expr_stmt|;
name|positionMax
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|DocsEnumState
operator|.
name|ITERATING
expr_stmt|;
name|positionMax
operator|=
name|super
operator|.
name|freq
argument_list|()
expr_stmt|;
block|}
name|positionCount
operator|=
literal|0
expr_stmt|;
assert|assert
name|super
operator|.
name|docID
argument_list|()
operator|==
name|advanced
assert|;
return|return
name|doc
operator|=
name|advanced
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
name|assertThread
argument_list|(
literal|"Docs enums"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|doc
operator|==
name|super
operator|.
name|docID
argument_list|()
operator|:
literal|" invalid docID() in "
operator|+
name|in
operator|.
name|getClass
argument_list|()
operator|+
literal|" "
operator|+
name|super
operator|.
name|docID
argument_list|()
operator|+
literal|" instead of "
operator|+
name|doc
assert|;
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
name|assertThread
argument_list|(
literal|"Docs enums"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|START
operator|:
literal|"freq() called before nextDoc()/advance()"
assert|;
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|FINISHED
operator|:
literal|"freq() called after NO_MORE_DOCS"
assert|;
name|int
name|freq
init|=
name|super
operator|.
name|freq
argument_list|()
decl_stmt|;
assert|assert
name|freq
operator|>
literal|0
assert|;
return|return
name|freq
return|;
block|}
annotation|@
name|Override
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|START
operator|:
literal|"nextPosition() called before nextDoc()/advance()"
assert|;
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|FINISHED
operator|:
literal|"nextPosition() called after NO_MORE_DOCS"
assert|;
assert|assert
name|positionCount
operator|<
name|positionMax
operator|:
literal|"nextPosition() called more than freq() times!"
assert|;
name|int
name|position
init|=
name|super
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
assert|assert
name|position
operator|>=
literal|0
operator|||
name|position
operator|==
operator|-
literal|1
operator|:
literal|"invalid position: "
operator|+
name|position
assert|;
name|positionCount
operator|++
expr_stmt|;
return|return
name|position
return|;
block|}
annotation|@
name|Override
DECL|method|startOffset
specifier|public
name|int
name|startOffset
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|START
operator|:
literal|"startOffset() called before nextDoc()/advance()"
assert|;
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|FINISHED
operator|:
literal|"startOffset() called after NO_MORE_DOCS"
assert|;
assert|assert
name|positionCount
operator|>
literal|0
operator|:
literal|"startOffset() called before nextPosition()!"
assert|;
return|return
name|super
operator|.
name|startOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|endOffset
specifier|public
name|int
name|endOffset
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|START
operator|:
literal|"endOffset() called before nextDoc()/advance()"
assert|;
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|FINISHED
operator|:
literal|"endOffset() called after NO_MORE_DOCS"
assert|;
assert|assert
name|positionCount
operator|>
literal|0
operator|:
literal|"endOffset() called before nextPosition()!"
assert|;
return|return
name|super
operator|.
name|endOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|START
operator|:
literal|"getPayload() called before nextDoc()/advance()"
assert|;
assert|assert
name|state
operator|!=
name|DocsEnumState
operator|.
name|FINISHED
operator|:
literal|"getPayload() called after NO_MORE_DOCS"
assert|;
assert|assert
name|positionCount
operator|>
literal|0
operator|:
literal|"getPayload() called before nextPosition()!"
assert|;
name|BytesRef
name|payload
init|=
name|super
operator|.
name|getPayload
argument_list|()
decl_stmt|;
assert|assert
name|payload
operator|==
literal|null
operator|||
name|payload
operator|.
name|length
operator|>
literal|0
operator|:
literal|"getPayload() returned payload with invalid length!"
assert|;
return|return
name|payload
return|;
block|}
DECL|method|reset
name|void
name|reset
parameter_list|()
block|{
name|state
operator|=
name|DocsEnumState
operator|.
name|START
expr_stmt|;
name|doc
operator|=
name|in
operator|.
name|docID
argument_list|()
expr_stmt|;
name|positionCount
operator|=
name|positionMax
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|/** Wraps a NumericDocValues but with additional asserts */
DECL|class|AssertingNumericDocValues
specifier|public
specifier|static
class|class
name|AssertingNumericDocValues
extends|extends
name|NumericDocValues
block|{
DECL|field|creationThread
specifier|private
specifier|final
name|Thread
name|creationThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|NumericDocValues
name|in
decl_stmt|;
DECL|field|maxDoc
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|method|AssertingNumericDocValues
specifier|public
name|AssertingNumericDocValues
parameter_list|(
name|NumericDocValues
name|in
parameter_list|,
name|int
name|maxDoc
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|assertThread
argument_list|(
literal|"Numeric doc values"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|docID
operator|>=
literal|0
operator|&&
name|docID
operator|<
name|maxDoc
assert|;
return|return
name|in
operator|.
name|get
argument_list|(
name|docID
argument_list|)
return|;
block|}
block|}
comment|/** Wraps a BinaryDocValues but with additional asserts */
DECL|class|AssertingBinaryDocValues
specifier|public
specifier|static
class|class
name|AssertingBinaryDocValues
extends|extends
name|BinaryDocValues
block|{
DECL|field|creationThread
specifier|private
specifier|final
name|Thread
name|creationThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|BinaryDocValues
name|in
decl_stmt|;
DECL|field|maxDoc
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|method|AssertingBinaryDocValues
specifier|public
name|AssertingBinaryDocValues
parameter_list|(
name|BinaryDocValues
name|in
parameter_list|,
name|int
name|maxDoc
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|BytesRef
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|assertThread
argument_list|(
literal|"Binary doc values"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|docID
operator|>=
literal|0
operator|&&
name|docID
operator|<
name|maxDoc
assert|;
specifier|final
name|BytesRef
name|result
init|=
name|in
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
assert|assert
name|result
operator|.
name|isValid
argument_list|()
assert|;
return|return
name|result
return|;
block|}
block|}
comment|/** Wraps a SortedDocValues but with additional asserts */
DECL|class|AssertingSortedDocValues
specifier|public
specifier|static
class|class
name|AssertingSortedDocValues
extends|extends
name|SortedDocValues
block|{
DECL|field|creationThread
specifier|private
specifier|final
name|Thread
name|creationThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|SortedDocValues
name|in
decl_stmt|;
DECL|field|maxDoc
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|valueCount
specifier|private
specifier|final
name|int
name|valueCount
decl_stmt|;
DECL|method|AssertingSortedDocValues
specifier|public
name|AssertingSortedDocValues
parameter_list|(
name|SortedDocValues
name|in
parameter_list|,
name|int
name|maxDoc
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
name|this
operator|.
name|valueCount
operator|=
name|in
operator|.
name|getValueCount
argument_list|()
expr_stmt|;
assert|assert
name|valueCount
operator|>=
literal|0
operator|&&
name|valueCount
operator|<=
name|maxDoc
assert|;
block|}
annotation|@
name|Override
DECL|method|getOrd
specifier|public
name|int
name|getOrd
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|assertThread
argument_list|(
literal|"Sorted doc values"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|docID
operator|>=
literal|0
operator|&&
name|docID
operator|<
name|maxDoc
assert|;
name|int
name|ord
init|=
name|in
operator|.
name|getOrd
argument_list|(
name|docID
argument_list|)
decl_stmt|;
assert|assert
name|ord
operator|>=
operator|-
literal|1
operator|&&
name|ord
operator|<
name|valueCount
assert|;
return|return
name|ord
return|;
block|}
annotation|@
name|Override
DECL|method|lookupOrd
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
name|assertThread
argument_list|(
literal|"Sorted doc values"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|ord
operator|>=
literal|0
operator|&&
name|ord
operator|<
name|valueCount
assert|;
specifier|final
name|BytesRef
name|result
init|=
name|in
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
decl_stmt|;
assert|assert
name|result
operator|.
name|isValid
argument_list|()
assert|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
name|assertThread
argument_list|(
literal|"Sorted doc values"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
name|int
name|valueCount
init|=
name|in
operator|.
name|getValueCount
argument_list|()
decl_stmt|;
assert|assert
name|valueCount
operator|==
name|this
operator|.
name|valueCount
assert|;
comment|// should not change
return|return
name|valueCount
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|BytesRef
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|assertThread
argument_list|(
literal|"Sorted doc values"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|docID
operator|>=
literal|0
operator|&&
name|docID
operator|<
name|maxDoc
assert|;
specifier|final
name|BytesRef
name|result
init|=
name|in
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
assert|assert
name|result
operator|.
name|isValid
argument_list|()
assert|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|lookupTerm
specifier|public
name|int
name|lookupTerm
parameter_list|(
name|BytesRef
name|key
parameter_list|)
block|{
name|assertThread
argument_list|(
literal|"Sorted doc values"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|key
operator|.
name|isValid
argument_list|()
assert|;
name|int
name|result
init|=
name|in
operator|.
name|lookupTerm
argument_list|(
name|key
argument_list|)
decl_stmt|;
assert|assert
name|result
operator|<
name|valueCount
assert|;
assert|assert
name|key
operator|.
name|isValid
argument_list|()
assert|;
return|return
name|result
return|;
block|}
block|}
comment|/** Wraps a SortedSetDocValues but with additional asserts */
DECL|class|AssertingSortedNumericDocValues
specifier|public
specifier|static
class|class
name|AssertingSortedNumericDocValues
extends|extends
name|SortedNumericDocValues
block|{
DECL|field|creationThread
specifier|private
specifier|final
name|Thread
name|creationThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|SortedNumericDocValues
name|in
decl_stmt|;
DECL|field|maxDoc
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|method|AssertingSortedNumericDocValues
specifier|public
name|AssertingSortedNumericDocValues
parameter_list|(
name|SortedNumericDocValues
name|in
parameter_list|,
name|int
name|maxDoc
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDocument
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|assertThread
argument_list|(
literal|"Sorted numeric doc values"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|doc
operator|>=
literal|0
operator|&&
name|doc
operator|<
name|maxDoc
assert|;
name|in
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// check the values are actually sorted
name|long
name|previous
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|in
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|long
name|v
init|=
name|in
operator|.
name|valueAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
assert|assert
name|v
operator|>=
name|previous
assert|;
name|previous
operator|=
name|v
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|valueAt
specifier|public
name|long
name|valueAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|assertThread
argument_list|(
literal|"Sorted numeric doc values"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|index
operator|<
name|in
operator|.
name|count
argument_list|()
assert|;
return|return
name|in
operator|.
name|valueAt
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|count
specifier|public
name|int
name|count
parameter_list|()
block|{
name|assertThread
argument_list|(
literal|"Sorted numeric doc values"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
return|return
name|in
operator|.
name|count
argument_list|()
return|;
block|}
block|}
comment|/** Wraps a RandomAccessOrds but with additional asserts */
DECL|class|AssertingRandomAccessOrds
specifier|public
specifier|static
class|class
name|AssertingRandomAccessOrds
extends|extends
name|RandomAccessOrds
block|{
DECL|field|creationThread
specifier|private
specifier|final
name|Thread
name|creationThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|RandomAccessOrds
name|in
decl_stmt|;
DECL|field|maxDoc
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|valueCount
specifier|private
specifier|final
name|long
name|valueCount
decl_stmt|;
DECL|field|lastOrd
name|long
name|lastOrd
init|=
name|NO_MORE_ORDS
decl_stmt|;
DECL|method|AssertingRandomAccessOrds
specifier|public
name|AssertingRandomAccessOrds
parameter_list|(
name|RandomAccessOrds
name|in
parameter_list|,
name|int
name|maxDoc
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
name|this
operator|.
name|valueCount
operator|=
name|in
operator|.
name|getValueCount
argument_list|()
expr_stmt|;
assert|assert
name|valueCount
operator|>=
literal|0
assert|;
block|}
annotation|@
name|Override
DECL|method|nextOrd
specifier|public
name|long
name|nextOrd
parameter_list|()
block|{
name|assertThread
argument_list|(
literal|"Sorted numeric doc values"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|lastOrd
operator|!=
name|NO_MORE_ORDS
assert|;
name|long
name|ord
init|=
name|in
operator|.
name|nextOrd
argument_list|()
decl_stmt|;
assert|assert
name|ord
operator|<
name|valueCount
assert|;
assert|assert
name|ord
operator|==
name|NO_MORE_ORDS
operator|||
name|ord
operator|>
name|lastOrd
assert|;
name|lastOrd
operator|=
name|ord
expr_stmt|;
return|return
name|ord
return|;
block|}
annotation|@
name|Override
DECL|method|setDocument
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|assertThread
argument_list|(
literal|"Sorted numeric doc values"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|docID
operator|>=
literal|0
operator|&&
name|docID
operator|<
name|maxDoc
operator|:
literal|"docid="
operator|+
name|docID
operator|+
literal|",maxDoc="
operator|+
name|maxDoc
assert|;
name|in
operator|.
name|setDocument
argument_list|(
name|docID
argument_list|)
expr_stmt|;
name|lastOrd
operator|=
operator|-
literal|2
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lookupOrd
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|long
name|ord
parameter_list|)
block|{
name|assertThread
argument_list|(
literal|"Sorted numeric doc values"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|ord
operator|>=
literal|0
operator|&&
name|ord
operator|<
name|valueCount
assert|;
specifier|final
name|BytesRef
name|result
init|=
name|in
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
decl_stmt|;
assert|assert
name|result
operator|.
name|isValid
argument_list|()
assert|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
name|long
name|getValueCount
parameter_list|()
block|{
name|assertThread
argument_list|(
literal|"Sorted numeric doc values"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
name|long
name|valueCount
init|=
name|in
operator|.
name|getValueCount
argument_list|()
decl_stmt|;
assert|assert
name|valueCount
operator|==
name|this
operator|.
name|valueCount
assert|;
comment|// should not change
return|return
name|valueCount
return|;
block|}
annotation|@
name|Override
DECL|method|lookupTerm
specifier|public
name|long
name|lookupTerm
parameter_list|(
name|BytesRef
name|key
parameter_list|)
block|{
name|assertThread
argument_list|(
literal|"Sorted numeric doc values"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|key
operator|.
name|isValid
argument_list|()
assert|;
name|long
name|result
init|=
name|in
operator|.
name|lookupTerm
argument_list|(
name|key
argument_list|)
decl_stmt|;
assert|assert
name|result
operator|<
name|valueCount
assert|;
assert|assert
name|key
operator|.
name|isValid
argument_list|()
assert|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|ordAt
specifier|public
name|long
name|ordAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|assertThread
argument_list|(
literal|"Sorted numeric doc values"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|index
operator|<
name|in
operator|.
name|cardinality
argument_list|()
assert|;
name|long
name|ord
init|=
name|in
operator|.
name|ordAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
assert|assert
name|ord
operator|>=
literal|0
operator|&&
name|ord
operator|<
name|valueCount
assert|;
return|return
name|ord
return|;
block|}
annotation|@
name|Override
DECL|method|cardinality
specifier|public
name|int
name|cardinality
parameter_list|()
block|{
name|assertThread
argument_list|(
literal|"Sorted numeric doc values"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
name|int
name|cardinality
init|=
name|in
operator|.
name|cardinality
argument_list|()
decl_stmt|;
assert|assert
name|cardinality
operator|>=
literal|0
assert|;
return|return
name|cardinality
return|;
block|}
block|}
comment|/** Wraps a SortedSetDocValues but with additional asserts */
DECL|class|AssertingSortedSetDocValues
specifier|public
specifier|static
class|class
name|AssertingSortedSetDocValues
extends|extends
name|SortedSetDocValues
block|{
DECL|field|creationThread
specifier|private
specifier|final
name|Thread
name|creationThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|SortedSetDocValues
name|in
decl_stmt|;
DECL|field|maxDoc
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|valueCount
specifier|private
specifier|final
name|long
name|valueCount
decl_stmt|;
DECL|field|lastOrd
name|long
name|lastOrd
init|=
name|NO_MORE_ORDS
decl_stmt|;
DECL|method|AssertingSortedSetDocValues
specifier|public
name|AssertingSortedSetDocValues
parameter_list|(
name|SortedSetDocValues
name|in
parameter_list|,
name|int
name|maxDoc
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
name|this
operator|.
name|valueCount
operator|=
name|in
operator|.
name|getValueCount
argument_list|()
expr_stmt|;
assert|assert
name|valueCount
operator|>=
literal|0
assert|;
block|}
annotation|@
name|Override
DECL|method|nextOrd
specifier|public
name|long
name|nextOrd
parameter_list|()
block|{
name|assertThread
argument_list|(
literal|"Sorted numeric doc values"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|lastOrd
operator|!=
name|NO_MORE_ORDS
assert|;
name|long
name|ord
init|=
name|in
operator|.
name|nextOrd
argument_list|()
decl_stmt|;
assert|assert
name|ord
operator|<
name|valueCount
assert|;
assert|assert
name|ord
operator|==
name|NO_MORE_ORDS
operator|||
name|ord
operator|>
name|lastOrd
assert|;
name|lastOrd
operator|=
name|ord
expr_stmt|;
return|return
name|ord
return|;
block|}
annotation|@
name|Override
DECL|method|setDocument
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|assertThread
argument_list|(
literal|"Sorted numeric doc values"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|docID
operator|>=
literal|0
operator|&&
name|docID
operator|<
name|maxDoc
operator|:
literal|"docid="
operator|+
name|docID
operator|+
literal|",maxDoc="
operator|+
name|maxDoc
assert|;
name|in
operator|.
name|setDocument
argument_list|(
name|docID
argument_list|)
expr_stmt|;
name|lastOrd
operator|=
operator|-
literal|2
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lookupOrd
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|long
name|ord
parameter_list|)
block|{
name|assertThread
argument_list|(
literal|"Sorted numeric doc values"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|ord
operator|>=
literal|0
operator|&&
name|ord
operator|<
name|valueCount
assert|;
specifier|final
name|BytesRef
name|result
init|=
name|in
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
decl_stmt|;
assert|assert
name|result
operator|.
name|isValid
argument_list|()
assert|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
name|long
name|getValueCount
parameter_list|()
block|{
name|assertThread
argument_list|(
literal|"Sorted numeric doc values"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
name|long
name|valueCount
init|=
name|in
operator|.
name|getValueCount
argument_list|()
decl_stmt|;
assert|assert
name|valueCount
operator|==
name|this
operator|.
name|valueCount
assert|;
comment|// should not change
return|return
name|valueCount
return|;
block|}
annotation|@
name|Override
DECL|method|lookupTerm
specifier|public
name|long
name|lookupTerm
parameter_list|(
name|BytesRef
name|key
parameter_list|)
block|{
name|assertThread
argument_list|(
literal|"Sorted numeric doc values"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|key
operator|.
name|isValid
argument_list|()
assert|;
name|long
name|result
init|=
name|in
operator|.
name|lookupTerm
argument_list|(
name|key
argument_list|)
decl_stmt|;
assert|assert
name|result
operator|<
name|valueCount
assert|;
assert|assert
name|key
operator|.
name|isValid
argument_list|()
assert|;
return|return
name|result
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNumericDocValues
specifier|public
name|NumericDocValues
name|getNumericDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|NumericDocValues
name|dv
init|=
name|super
operator|.
name|getNumericDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|FieldInfo
name|fi
init|=
name|getFieldInfos
argument_list|()
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|dv
operator|!=
literal|null
condition|)
block|{
assert|assert
name|fi
operator|!=
literal|null
assert|;
assert|assert
name|fi
operator|.
name|getDocValuesType
argument_list|()
operator|==
name|DocValuesType
operator|.
name|NUMERIC
assert|;
return|return
operator|new
name|AssertingNumericDocValues
argument_list|(
name|dv
argument_list|,
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
assert|assert
name|fi
operator|==
literal|null
operator|||
name|fi
operator|.
name|getDocValuesType
argument_list|()
operator|!=
name|DocValuesType
operator|.
name|NUMERIC
assert|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getBinaryDocValues
specifier|public
name|BinaryDocValues
name|getBinaryDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|BinaryDocValues
name|dv
init|=
name|super
operator|.
name|getBinaryDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|FieldInfo
name|fi
init|=
name|getFieldInfos
argument_list|()
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|dv
operator|!=
literal|null
condition|)
block|{
assert|assert
name|fi
operator|!=
literal|null
assert|;
assert|assert
name|fi
operator|.
name|getDocValuesType
argument_list|()
operator|==
name|DocValuesType
operator|.
name|BINARY
assert|;
return|return
operator|new
name|AssertingBinaryDocValues
argument_list|(
name|dv
argument_list|,
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
assert|assert
name|fi
operator|==
literal|null
operator|||
name|fi
operator|.
name|getDocValuesType
argument_list|()
operator|!=
name|DocValuesType
operator|.
name|BINARY
assert|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSortedDocValues
specifier|public
name|SortedDocValues
name|getSortedDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedDocValues
name|dv
init|=
name|super
operator|.
name|getSortedDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|FieldInfo
name|fi
init|=
name|getFieldInfos
argument_list|()
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|dv
operator|!=
literal|null
condition|)
block|{
assert|assert
name|fi
operator|!=
literal|null
assert|;
assert|assert
name|fi
operator|.
name|getDocValuesType
argument_list|()
operator|==
name|DocValuesType
operator|.
name|SORTED
assert|;
return|return
operator|new
name|AssertingSortedDocValues
argument_list|(
name|dv
argument_list|,
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
assert|assert
name|fi
operator|==
literal|null
operator|||
name|fi
operator|.
name|getDocValuesType
argument_list|()
operator|!=
name|DocValuesType
operator|.
name|SORTED
assert|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSortedNumericDocValues
specifier|public
name|SortedNumericDocValues
name|getSortedNumericDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedNumericDocValues
name|dv
init|=
name|super
operator|.
name|getSortedNumericDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|FieldInfo
name|fi
init|=
name|getFieldInfos
argument_list|()
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|dv
operator|!=
literal|null
condition|)
block|{
assert|assert
name|fi
operator|!=
literal|null
assert|;
assert|assert
name|fi
operator|.
name|getDocValuesType
argument_list|()
operator|==
name|DocValuesType
operator|.
name|SORTED_NUMERIC
assert|;
return|return
operator|new
name|AssertingSortedNumericDocValues
argument_list|(
name|dv
argument_list|,
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
assert|assert
name|fi
operator|==
literal|null
operator|||
name|fi
operator|.
name|getDocValuesType
argument_list|()
operator|!=
name|DocValuesType
operator|.
name|SORTED_NUMERIC
assert|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSortedSetDocValues
specifier|public
name|SortedSetDocValues
name|getSortedSetDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedSetDocValues
name|dv
init|=
name|super
operator|.
name|getSortedSetDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|FieldInfo
name|fi
init|=
name|getFieldInfos
argument_list|()
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|dv
operator|!=
literal|null
condition|)
block|{
assert|assert
name|fi
operator|!=
literal|null
assert|;
assert|assert
name|fi
operator|.
name|getDocValuesType
argument_list|()
operator|==
name|DocValuesType
operator|.
name|SORTED_SET
assert|;
if|if
condition|(
name|dv
operator|instanceof
name|RandomAccessOrds
condition|)
block|{
return|return
operator|new
name|AssertingRandomAccessOrds
argument_list|(
operator|(
name|RandomAccessOrds
operator|)
name|dv
argument_list|,
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|AssertingSortedSetDocValues
argument_list|(
name|dv
argument_list|,
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
block|}
else|else
block|{
assert|assert
name|fi
operator|==
literal|null
operator|||
name|fi
operator|.
name|getDocValuesType
argument_list|()
operator|!=
name|DocValuesType
operator|.
name|SORTED_SET
assert|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNormValues
specifier|public
name|NumericDocValues
name|getNormValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|NumericDocValues
name|dv
init|=
name|super
operator|.
name|getNormValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|FieldInfo
name|fi
init|=
name|getFieldInfos
argument_list|()
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|dv
operator|!=
literal|null
condition|)
block|{
assert|assert
name|fi
operator|!=
literal|null
assert|;
assert|assert
name|fi
operator|.
name|hasNorms
argument_list|()
assert|;
return|return
operator|new
name|AssertingNumericDocValues
argument_list|(
name|dv
argument_list|,
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
assert|assert
name|fi
operator|==
literal|null
operator|||
name|fi
operator|.
name|hasNorms
argument_list|()
operator|==
literal|false
assert|;
return|return
literal|null
return|;
block|}
block|}
comment|/** Wraps a Bits but with additional asserts */
DECL|class|AssertingBits
specifier|public
specifier|static
class|class
name|AssertingBits
implements|implements
name|Bits
block|{
DECL|field|creationThread
specifier|private
specifier|final
name|Thread
name|creationThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
DECL|field|in
specifier|final
name|Bits
name|in
decl_stmt|;
DECL|method|AssertingBits
specifier|public
name|AssertingBits
parameter_list|(
name|Bits
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|assertThread
argument_list|(
literal|"Bits"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
assert|assert
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|length
argument_list|()
assert|;
return|return
name|in
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|length
specifier|public
name|int
name|length
parameter_list|()
block|{
name|assertThread
argument_list|(
literal|"Bits"
argument_list|,
name|creationThread
argument_list|)
expr_stmt|;
return|return
name|in
operator|.
name|length
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLiveDocs
specifier|public
name|Bits
name|getLiveDocs
parameter_list|()
block|{
name|Bits
name|liveDocs
init|=
name|super
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|liveDocs
operator|!=
literal|null
condition|)
block|{
assert|assert
name|maxDoc
argument_list|()
operator|==
name|liveDocs
operator|.
name|length
argument_list|()
assert|;
name|liveDocs
operator|=
operator|new
name|AssertingBits
argument_list|(
name|liveDocs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|maxDoc
argument_list|()
operator|==
name|numDocs
argument_list|()
assert|;
assert|assert
operator|!
name|hasDeletions
argument_list|()
assert|;
block|}
return|return
name|liveDocs
return|;
block|}
annotation|@
name|Override
DECL|method|getDocsWithField
specifier|public
name|Bits
name|getDocsWithField
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|Bits
name|docsWithField
init|=
name|super
operator|.
name|getDocsWithField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|FieldInfo
name|fi
init|=
name|getFieldInfos
argument_list|()
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|docsWithField
operator|!=
literal|null
condition|)
block|{
assert|assert
name|fi
operator|!=
literal|null
assert|;
assert|assert
name|fi
operator|.
name|getDocValuesType
argument_list|()
operator|!=
name|DocValuesType
operator|.
name|NONE
assert|;
assert|assert
name|maxDoc
argument_list|()
operator|==
name|docsWithField
operator|.
name|length
argument_list|()
assert|;
name|docsWithField
operator|=
operator|new
name|AssertingBits
argument_list|(
name|docsWithField
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|fi
operator|==
literal|null
operator|||
name|fi
operator|.
name|getDocValuesType
argument_list|()
operator|==
name|DocValuesType
operator|.
name|NONE
assert|;
block|}
return|return
name|docsWithField
return|;
block|}
comment|// we don't change behavior of the reader: just validate the API.
annotation|@
name|Override
DECL|method|getCoreCacheKey
specifier|public
name|Object
name|getCoreCacheKey
parameter_list|()
block|{
return|return
name|in
operator|.
name|getCoreCacheKey
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getCombinedCoreAndDeletesKey
specifier|public
name|Object
name|getCombinedCoreAndDeletesKey
parameter_list|()
block|{
return|return
name|in
operator|.
name|getCombinedCoreAndDeletesKey
argument_list|()
return|;
block|}
block|}
end_class
end_unit
