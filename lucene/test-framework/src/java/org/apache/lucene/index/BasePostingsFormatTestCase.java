begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|asserting
operator|.
name|AssertingCodec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|perfield
operator|.
name|PerFieldPostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
operator|.
name|SeekStatus
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FlushInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LineFileDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageTester
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automaton
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|AutomatonTestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|AutomatonTestUtil
operator|.
name|RandomAcceptedStrings
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CompiledAutomaton
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_comment
comment|/**  * Abstract class to do basic tests for a postings format.  * NOTE: This test focuses on the postings  * (docs/freqs/positions/payloads/offsets) impl, not the  * terms dict.  The [stretch] goal is for this test to be  * so thorough in testing a new PostingsFormat that if this  * test passes, then all Lucene/Solr tests should also pass.  Ie,  * if there is some bug in a given PostingsFormat that this  * test fails to catch then this test needs to be improved! */
end_comment
begin_comment
comment|// TODO can we make it easy for testing to pair up a "random terms dict impl" with your postings base format...
end_comment
begin_comment
comment|// TODO test when you reuse after skipping a term or two, eg the block reuse case
end_comment
begin_comment
comment|/* TODO   - threads   - assert doc=-1 before any nextDoc   - if a PF passes this test but fails other tests then this     test has a bug!!   - test tricky reuse cases, eg across fields   - verify you get null if you pass needFreq/needOffset but     they weren't indexed */
end_comment
begin_class
DECL|class|BasePostingsFormatTestCase
specifier|public
specifier|abstract
class|class
name|BasePostingsFormatTestCase
extends|extends
name|BaseIndexFileFormatTestCase
block|{
DECL|enum|Option
specifier|private
enum|enum
name|Option
block|{
comment|// Sometimes use .advance():
DECL|enum constant|SKIPPING
name|SKIPPING
block|,
comment|// Sometimes reuse the PostingsEnum across terms:
DECL|enum constant|REUSE_ENUMS
name|REUSE_ENUMS
block|,
comment|// Sometimes pass non-null live docs:
DECL|enum constant|LIVE_DOCS
name|LIVE_DOCS
block|,
comment|// Sometimes seek to term using previously saved TermState:
DECL|enum constant|TERM_STATE
name|TERM_STATE
block|,
comment|// Sometimes don't fully consume docs from the enum
DECL|enum constant|PARTIAL_DOC_CONSUME
name|PARTIAL_DOC_CONSUME
block|,
comment|// Sometimes don't fully consume positions at each doc
DECL|enum constant|PARTIAL_POS_CONSUME
name|PARTIAL_POS_CONSUME
block|,
comment|// Sometimes check payloads
DECL|enum constant|PAYLOADS
name|PAYLOADS
block|,
comment|// Test w/ multiple threads
DECL|enum constant|THREADS
name|THREADS
block|}
empty_stmt|;
comment|/** Given the same random seed this always enumerates the    *  same random postings */
DECL|class|SeedPostings
specifier|private
specifier|static
class|class
name|SeedPostings
extends|extends
name|PostingsEnum
block|{
comment|// Used only to generate docIDs; this way if you pull w/
comment|// or w/o positions you get the same docID sequence:
DECL|field|docRandom
specifier|private
specifier|final
name|Random
name|docRandom
decl_stmt|;
DECL|field|random
specifier|private
specifier|final
name|Random
name|random
decl_stmt|;
DECL|field|docFreq
specifier|public
name|int
name|docFreq
decl_stmt|;
DECL|field|maxDocSpacing
specifier|private
specifier|final
name|int
name|maxDocSpacing
decl_stmt|;
DECL|field|payloadSize
specifier|private
specifier|final
name|int
name|payloadSize
decl_stmt|;
DECL|field|fixedPayloads
specifier|private
specifier|final
name|boolean
name|fixedPayloads
decl_stmt|;
DECL|field|liveDocs
specifier|private
specifier|final
name|Bits
name|liveDocs
decl_stmt|;
DECL|field|payload
specifier|private
specifier|final
name|BytesRef
name|payload
decl_stmt|;
DECL|field|options
specifier|private
specifier|final
name|IndexOptions
name|options
decl_stmt|;
DECL|field|doPositions
specifier|private
specifier|final
name|boolean
name|doPositions
decl_stmt|;
DECL|field|allowPayloads
specifier|private
specifier|final
name|boolean
name|allowPayloads
decl_stmt|;
DECL|field|docID
specifier|private
name|int
name|docID
decl_stmt|;
DECL|field|freq
specifier|private
name|int
name|freq
decl_stmt|;
DECL|field|upto
specifier|public
name|int
name|upto
decl_stmt|;
DECL|field|pos
specifier|private
name|int
name|pos
decl_stmt|;
DECL|field|offset
specifier|private
name|int
name|offset
decl_stmt|;
DECL|field|startOffset
specifier|private
name|int
name|startOffset
decl_stmt|;
DECL|field|endOffset
specifier|private
name|int
name|endOffset
decl_stmt|;
DECL|field|posSpacing
specifier|private
name|int
name|posSpacing
decl_stmt|;
DECL|field|posUpto
specifier|private
name|int
name|posUpto
decl_stmt|;
DECL|method|SeedPostings
specifier|public
name|SeedPostings
parameter_list|(
name|long
name|seed
parameter_list|,
name|int
name|minDocFreq
parameter_list|,
name|int
name|maxDocFreq
parameter_list|,
name|Bits
name|liveDocs
parameter_list|,
name|IndexOptions
name|options
parameter_list|,
name|boolean
name|allowPayloads
parameter_list|)
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|docRandom
operator|=
operator|new
name|Random
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|docFreq
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
name|minDocFreq
argument_list|,
name|maxDocFreq
argument_list|)
expr_stmt|;
name|this
operator|.
name|liveDocs
operator|=
name|liveDocs
expr_stmt|;
name|this
operator|.
name|allowPayloads
operator|=
name|allowPayloads
expr_stmt|;
comment|// TODO: more realistic to inversely tie this to numDocs:
name|maxDocSpacing
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
condition|)
block|{
comment|// 10% of the time create big payloads:
name|payloadSize
operator|=
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|payloadSize
operator|=
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|fixedPayloads
operator|=
name|random
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
name|byte
index|[]
name|payloadBytes
init|=
operator|new
name|byte
index|[
name|payloadSize
index|]
decl_stmt|;
name|payload
operator|=
operator|new
name|BytesRef
argument_list|(
name|payloadBytes
argument_list|)
expr_stmt|;
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
name|doPositions
operator|=
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
operator|.
name|compareTo
argument_list|(
name|options
argument_list|)
operator|<=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|_nextDoc
argument_list|()
expr_stmt|;
if|if
condition|(
name|liveDocs
operator|==
literal|null
operator|||
name|docID
operator|==
name|NO_MORE_DOCS
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
condition|)
block|{
return|return
name|docID
return|;
block|}
block|}
block|}
DECL|method|_nextDoc
specifier|private
name|int
name|_nextDoc
parameter_list|()
block|{
comment|// Must consume random:
while|while
condition|(
name|posUpto
operator|<
name|freq
condition|)
block|{
name|nextPosition
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|upto
operator|<
name|docFreq
condition|)
block|{
if|if
condition|(
name|upto
operator|==
literal|0
operator|&&
name|docRandom
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// Sometimes index docID = 0
block|}
elseif|else
if|if
condition|(
name|maxDocSpacing
operator|==
literal|1
condition|)
block|{
name|docID
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: sometimes have a biggish gap here!
name|docID
operator|+=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|docRandom
argument_list|,
literal|1
argument_list|,
name|maxDocSpacing
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|200
argument_list|)
operator|==
literal|17
condition|)
block|{
name|freq
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|17
condition|)
block|{
name|freq
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|freq
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
name|pos
operator|=
literal|0
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
name|posUpto
operator|=
literal|0
expr_stmt|;
name|posSpacing
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|upto
operator|++
expr_stmt|;
return|return
name|docID
return|;
block|}
else|else
block|{
return|return
name|docID
operator|=
name|NO_MORE_DOCS
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docID
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
return|return
name|freq
return|;
block|}
annotation|@
name|Override
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
block|{
if|if
condition|(
operator|!
name|doPositions
condition|)
block|{
name|posUpto
operator|=
name|freq
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
assert|assert
name|posUpto
operator|<
name|freq
assert|;
if|if
condition|(
name|posUpto
operator|==
literal|0
operator|&&
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// Sometimes index pos = 0
block|}
elseif|else
if|if
condition|(
name|posSpacing
operator|==
literal|1
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
else|else
block|{
name|pos
operator|+=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
name|posSpacing
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|payloadSize
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|fixedPayloads
condition|)
block|{
name|payload
operator|.
name|length
operator|=
name|payloadSize
expr_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|payload
operator|.
name|bytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|thisPayloadSize
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|payloadSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|thisPayloadSize
operator|!=
literal|0
condition|)
block|{
name|payload
operator|.
name|length
operator|=
name|payloadSize
expr_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|payload
operator|.
name|bytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|payload
operator|.
name|length
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|payload
operator|.
name|length
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|allowPayloads
condition|)
block|{
name|payload
operator|.
name|length
operator|=
literal|0
expr_stmt|;
block|}
name|startOffset
operator|=
name|offset
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|endOffset
operator|=
name|startOffset
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|offset
operator|=
name|endOffset
expr_stmt|;
name|posUpto
operator|++
expr_stmt|;
return|return
name|pos
return|;
block|}
annotation|@
name|Override
DECL|method|startOffset
specifier|public
name|int
name|startOffset
parameter_list|()
block|{
return|return
name|startOffset
return|;
block|}
annotation|@
name|Override
DECL|method|endOffset
specifier|public
name|int
name|endOffset
parameter_list|()
block|{
return|return
name|endOffset
return|;
block|}
annotation|@
name|Override
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
block|{
return|return
name|payload
operator|.
name|length
operator|==
literal|0
condition|?
literal|null
else|:
name|payload
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|slowAdvance
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|docFreq
return|;
block|}
block|}
DECL|class|FieldAndTerm
specifier|private
specifier|static
class|class
name|FieldAndTerm
block|{
DECL|field|field
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|term
specifier|final
name|BytesRef
name|term
decl_stmt|;
DECL|field|ord
specifier|final
name|long
name|ord
decl_stmt|;
DECL|method|FieldAndTerm
specifier|public
name|FieldAndTerm
parameter_list|(
name|String
name|field
parameter_list|,
name|BytesRef
name|term
parameter_list|,
name|long
name|ord
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|term
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|this
operator|.
name|ord
operator|=
name|ord
expr_stmt|;
block|}
block|}
DECL|class|SeedAndOrd
specifier|private
specifier|static
class|class
name|SeedAndOrd
block|{
DECL|field|seed
specifier|final
name|long
name|seed
decl_stmt|;
DECL|field|ord
name|long
name|ord
decl_stmt|;
DECL|method|SeedAndOrd
specifier|public
name|SeedAndOrd
parameter_list|(
name|long
name|seed
parameter_list|)
block|{
name|this
operator|.
name|seed
operator|=
name|seed
expr_stmt|;
block|}
block|}
comment|// Holds all postings:
DECL|field|fields
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|SortedMap
argument_list|<
name|BytesRef
argument_list|,
name|SeedAndOrd
argument_list|>
argument_list|>
name|fields
decl_stmt|;
DECL|field|fieldInfos
specifier|private
specifier|static
name|FieldInfos
name|fieldInfos
decl_stmt|;
DECL|field|globalLiveDocs
specifier|private
specifier|static
name|FixedBitSet
name|globalLiveDocs
decl_stmt|;
DECL|field|allTerms
specifier|private
specifier|static
name|List
argument_list|<
name|FieldAndTerm
argument_list|>
name|allTerms
decl_stmt|;
DECL|field|maxDoc
specifier|private
specifier|static
name|int
name|maxDoc
decl_stmt|;
DECL|field|totalPostings
specifier|private
specifier|static
name|long
name|totalPostings
decl_stmt|;
DECL|field|totalPayloadBytes
specifier|private
specifier|static
name|long
name|totalPayloadBytes
decl_stmt|;
DECL|method|getSeedPostings
specifier|private
specifier|static
name|SeedPostings
name|getSeedPostings
parameter_list|(
name|String
name|term
parameter_list|,
name|long
name|seed
parameter_list|,
name|boolean
name|withLiveDocs
parameter_list|,
name|IndexOptions
name|options
parameter_list|,
name|boolean
name|allowPayloads
parameter_list|)
block|{
name|int
name|minDocFreq
decl_stmt|,
name|maxDocFreq
decl_stmt|;
if|if
condition|(
name|term
operator|.
name|startsWith
argument_list|(
literal|"big_"
argument_list|)
condition|)
block|{
name|minDocFreq
operator|=
name|RANDOM_MULTIPLIER
operator|*
literal|50000
expr_stmt|;
name|maxDocFreq
operator|=
name|RANDOM_MULTIPLIER
operator|*
literal|70000
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|term
operator|.
name|startsWith
argument_list|(
literal|"medium_"
argument_list|)
condition|)
block|{
name|minDocFreq
operator|=
name|RANDOM_MULTIPLIER
operator|*
literal|3000
expr_stmt|;
name|maxDocFreq
operator|=
name|RANDOM_MULTIPLIER
operator|*
literal|6000
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|term
operator|.
name|startsWith
argument_list|(
literal|"low_"
argument_list|)
condition|)
block|{
name|minDocFreq
operator|=
name|RANDOM_MULTIPLIER
expr_stmt|;
name|maxDocFreq
operator|=
name|RANDOM_MULTIPLIER
operator|*
literal|40
expr_stmt|;
block|}
else|else
block|{
name|minDocFreq
operator|=
literal|1
expr_stmt|;
name|maxDocFreq
operator|=
literal|3
expr_stmt|;
block|}
return|return
operator|new
name|SeedPostings
argument_list|(
name|seed
argument_list|,
name|minDocFreq
argument_list|,
name|maxDocFreq
argument_list|,
name|withLiveDocs
condition|?
name|globalLiveDocs
else|:
literal|null
argument_list|,
name|options
argument_list|,
name|allowPayloads
argument_list|)
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|createPostings
specifier|public
specifier|static
name|void
name|createPostings
parameter_list|()
throws|throws
name|IOException
block|{
name|totalPostings
operator|=
literal|0
expr_stmt|;
name|totalPayloadBytes
operator|=
literal|0
expr_stmt|;
name|fields
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
specifier|final
name|int
name|numFields
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: "
operator|+
name|numFields
operator|+
literal|" fields"
argument_list|)
expr_stmt|;
block|}
name|maxDoc
operator|=
literal|0
expr_stmt|;
name|FieldInfo
index|[]
name|fieldInfoArray
init|=
operator|new
name|FieldInfo
index|[
name|numFields
index|]
decl_stmt|;
name|int
name|fieldUpto
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|fieldUpto
operator|<
name|numFields
condition|)
block|{
name|String
name|field
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|fieldInfoArray
index|[
name|fieldUpto
index|]
operator|=
operator|new
name|FieldInfo
argument_list|(
name|field
argument_list|,
name|fieldUpto
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|,
name|DocValuesType
operator|.
name|NONE
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fieldUpto
operator|++
expr_stmt|;
name|SortedMap
argument_list|<
name|BytesRef
argument_list|,
name|SeedAndOrd
argument_list|>
name|postings
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|postings
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|seenTerms
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numTerms
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
condition|)
block|{
name|numTerms
operator|=
name|atLeast
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|numTerms
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|postings
operator|.
name|size
argument_list|()
operator|<
name|numTerms
condition|)
block|{
name|int
name|termUpto
init|=
name|postings
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Cannot contain surrogates else default Java string sort order (by UTF16 code unit) is different from Lucene:
name|String
name|term
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|seenTerms
operator|.
name|contains
argument_list|(
name|term
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|seenTerms
operator|.
name|add
argument_list|(
name|term
argument_list|)
expr_stmt|;
if|if
condition|(
name|TEST_NIGHTLY
operator|&&
name|termUpto
operator|==
literal|0
operator|&&
name|fieldUpto
operator|==
literal|1
condition|)
block|{
comment|// Make 1 big term:
name|term
operator|=
literal|"big_"
operator|+
name|term
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|termUpto
operator|==
literal|1
operator|&&
name|fieldUpto
operator|==
literal|1
condition|)
block|{
comment|// Make 1 medium term:
name|term
operator|=
literal|"medium_"
operator|+
name|term
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// Low freq term:
name|term
operator|=
literal|"low_"
operator|+
name|term
expr_stmt|;
block|}
else|else
block|{
comment|// Very low freq term (don't multiply by RANDOM_MULTIPLIER):
name|term
operator|=
literal|"verylow_"
operator|+
name|term
expr_stmt|;
block|}
name|long
name|termSeed
init|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|postings
operator|.
name|put
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|term
argument_list|)
argument_list|,
operator|new
name|SeedAndOrd
argument_list|(
name|termSeed
argument_list|)
argument_list|)
expr_stmt|;
comment|// NOTE: sort of silly: we enum all the docs just to
comment|// get the maxDoc
name|PostingsEnum
name|postingsEnum
init|=
name|getSeedPostings
argument_list|(
name|term
argument_list|,
name|termSeed
argument_list|,
literal|false
argument_list|,
name|IndexOptions
operator|.
name|DOCS
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|doc
decl_stmt|;
name|int
name|lastDoc
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|doc
operator|=
name|postingsEnum
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|PostingsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|lastDoc
operator|=
name|doc
expr_stmt|;
block|}
name|maxDoc
operator|=
name|Math
operator|.
name|max
argument_list|(
name|lastDoc
argument_list|,
name|maxDoc
argument_list|)
expr_stmt|;
block|}
comment|// assign ords
name|long
name|ord
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SeedAndOrd
name|ent
range|:
name|postings
operator|.
name|values
argument_list|()
control|)
block|{
name|ent
operator|.
name|ord
operator|=
name|ord
operator|++
expr_stmt|;
block|}
block|}
name|fieldInfos
operator|=
operator|new
name|FieldInfos
argument_list|(
name|fieldInfoArray
argument_list|)
expr_stmt|;
comment|// It's the count, not the last docID:
name|maxDoc
operator|++
expr_stmt|;
name|globalLiveDocs
operator|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
name|double
name|liveRatio
init|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|<=
name|liveRatio
condition|)
block|{
name|globalLiveDocs
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|allTerms
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SortedMap
argument_list|<
name|BytesRef
argument_list|,
name|SeedAndOrd
argument_list|>
argument_list|>
name|fieldEnt
range|:
name|fields
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|field
init|=
name|fieldEnt
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|long
name|ord
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|BytesRef
argument_list|,
name|SeedAndOrd
argument_list|>
name|termEnt
range|:
name|fieldEnt
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|allTerms
operator|.
name|add
argument_list|(
operator|new
name|FieldAndTerm
argument_list|(
name|field
argument_list|,
name|termEnt
operator|.
name|getKey
argument_list|()
argument_list|,
name|ord
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: done init postings; "
operator|+
name|allTerms
operator|.
name|size
argument_list|()
operator|+
literal|" total terms, across "
operator|+
name|fieldInfos
operator|.
name|size
argument_list|()
operator|+
literal|" fields"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|allTerms
operator|=
literal|null
expr_stmt|;
name|fieldInfos
operator|=
literal|null
expr_stmt|;
name|fields
operator|=
literal|null
expr_stmt|;
name|globalLiveDocs
operator|=
literal|null
expr_stmt|;
block|}
DECL|class|SeedFields
specifier|private
specifier|static
class|class
name|SeedFields
extends|extends
name|Fields
block|{
DECL|field|fields
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SortedMap
argument_list|<
name|BytesRef
argument_list|,
name|SeedAndOrd
argument_list|>
argument_list|>
name|fields
decl_stmt|;
DECL|field|fieldInfos
specifier|final
name|FieldInfos
name|fieldInfos
decl_stmt|;
DECL|field|maxAllowed
specifier|final
name|IndexOptions
name|maxAllowed
decl_stmt|;
DECL|field|allowPayloads
specifier|final
name|boolean
name|allowPayloads
decl_stmt|;
DECL|method|SeedFields
specifier|public
name|SeedFields
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|SortedMap
argument_list|<
name|BytesRef
argument_list|,
name|SeedAndOrd
argument_list|>
argument_list|>
name|fields
parameter_list|,
name|FieldInfos
name|fieldInfos
parameter_list|,
name|IndexOptions
name|maxAllowed
parameter_list|,
name|boolean
name|allowPayloads
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
name|this
operator|.
name|fieldInfos
operator|=
name|fieldInfos
expr_stmt|;
name|this
operator|.
name|maxAllowed
operator|=
name|maxAllowed
expr_stmt|;
name|this
operator|.
name|allowPayloads
operator|=
name|allowPayloads
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|fields
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|terms
specifier|public
name|Terms
name|terms
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|BytesRef
argument_list|,
name|SeedAndOrd
argument_list|>
name|terms
init|=
name|fields
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|SeedTerms
argument_list|(
name|terms
argument_list|,
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
argument_list|,
name|maxAllowed
argument_list|,
name|allowPayloads
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|fields
operator|.
name|size
argument_list|()
return|;
block|}
block|}
DECL|class|SeedTerms
specifier|private
specifier|static
class|class
name|SeedTerms
extends|extends
name|Terms
block|{
DECL|field|terms
specifier|final
name|SortedMap
argument_list|<
name|BytesRef
argument_list|,
name|SeedAndOrd
argument_list|>
name|terms
decl_stmt|;
DECL|field|fieldInfo
specifier|final
name|FieldInfo
name|fieldInfo
decl_stmt|;
DECL|field|maxAllowed
specifier|final
name|IndexOptions
name|maxAllowed
decl_stmt|;
DECL|field|allowPayloads
specifier|final
name|boolean
name|allowPayloads
decl_stmt|;
DECL|method|SeedTerms
specifier|public
name|SeedTerms
parameter_list|(
name|SortedMap
argument_list|<
name|BytesRef
argument_list|,
name|SeedAndOrd
argument_list|>
name|terms
parameter_list|,
name|FieldInfo
name|fieldInfo
parameter_list|,
name|IndexOptions
name|maxAllowed
parameter_list|,
name|boolean
name|allowPayloads
parameter_list|)
block|{
name|this
operator|.
name|terms
operator|=
name|terms
expr_stmt|;
name|this
operator|.
name|fieldInfo
operator|=
name|fieldInfo
expr_stmt|;
name|this
operator|.
name|maxAllowed
operator|=
name|maxAllowed
expr_stmt|;
name|this
operator|.
name|allowPayloads
operator|=
name|allowPayloads
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|TermsEnum
name|iterator
parameter_list|(
name|TermsEnum
name|reuse
parameter_list|)
block|{
name|SeedTermsEnum
name|termsEnum
decl_stmt|;
if|if
condition|(
name|reuse
operator|!=
literal|null
operator|&&
name|reuse
operator|instanceof
name|SeedTermsEnum
condition|)
block|{
name|termsEnum
operator|=
operator|(
name|SeedTermsEnum
operator|)
name|reuse
expr_stmt|;
if|if
condition|(
name|termsEnum
operator|.
name|terms
operator|!=
name|terms
condition|)
block|{
name|termsEnum
operator|=
operator|new
name|SeedTermsEnum
argument_list|(
name|terms
argument_list|,
name|maxAllowed
argument_list|,
name|allowPayloads
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|termsEnum
operator|=
operator|new
name|SeedTermsEnum
argument_list|(
name|terms
argument_list|,
name|maxAllowed
argument_list|,
name|allowPayloads
argument_list|)
expr_stmt|;
block|}
name|termsEnum
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|termsEnum
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|terms
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getSumTotalTermFreq
specifier|public
name|long
name|getSumTotalTermFreq
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getSumDocFreq
specifier|public
name|long
name|getSumDocFreq
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getDocCount
specifier|public
name|int
name|getDocCount
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|hasFreqs
specifier|public
name|boolean
name|hasFreqs
parameter_list|()
block|{
return|return
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|)
operator|>=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|hasOffsets
specifier|public
name|boolean
name|hasOffsets
parameter_list|()
block|{
return|return
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
operator|>=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|hasPositions
specifier|public
name|boolean
name|hasPositions
parameter_list|()
block|{
return|return
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
operator|>=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|hasPayloads
specifier|public
name|boolean
name|hasPayloads
parameter_list|()
block|{
return|return
name|allowPayloads
operator|&&
name|fieldInfo
operator|.
name|hasPayloads
argument_list|()
return|;
block|}
block|}
DECL|class|SeedTermsEnum
specifier|private
specifier|static
class|class
name|SeedTermsEnum
extends|extends
name|TermsEnum
block|{
DECL|field|terms
specifier|final
name|SortedMap
argument_list|<
name|BytesRef
argument_list|,
name|SeedAndOrd
argument_list|>
name|terms
decl_stmt|;
DECL|field|maxAllowed
specifier|final
name|IndexOptions
name|maxAllowed
decl_stmt|;
DECL|field|allowPayloads
specifier|final
name|boolean
name|allowPayloads
decl_stmt|;
DECL|field|iterator
specifier|private
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|BytesRef
argument_list|,
name|SeedAndOrd
argument_list|>
argument_list|>
name|iterator
decl_stmt|;
DECL|field|current
specifier|private
name|Map
operator|.
name|Entry
argument_list|<
name|BytesRef
argument_list|,
name|SeedAndOrd
argument_list|>
name|current
decl_stmt|;
DECL|method|SeedTermsEnum
specifier|public
name|SeedTermsEnum
parameter_list|(
name|SortedMap
argument_list|<
name|BytesRef
argument_list|,
name|SeedAndOrd
argument_list|>
name|terms
parameter_list|,
name|IndexOptions
name|maxAllowed
parameter_list|,
name|boolean
name|allowPayloads
parameter_list|)
block|{
name|this
operator|.
name|terms
operator|=
name|terms
expr_stmt|;
name|this
operator|.
name|maxAllowed
operator|=
name|maxAllowed
expr_stmt|;
name|this
operator|.
name|allowPayloads
operator|=
name|allowPayloads
expr_stmt|;
block|}
DECL|method|reset
name|void
name|reset
parameter_list|()
block|{
name|iterator
operator|=
name|terms
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|seekCeil
specifier|public
name|SeekStatus
name|seekCeil
parameter_list|(
name|BytesRef
name|text
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|BytesRef
argument_list|,
name|SeedAndOrd
argument_list|>
name|tailMap
init|=
name|terms
operator|.
name|tailMap
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|tailMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|SeekStatus
operator|.
name|END
return|;
block|}
else|else
block|{
name|iterator
operator|=
name|tailMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|tailMap
operator|.
name|firstKey
argument_list|()
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
return|return
name|SeekStatus
operator|.
name|FOUND
return|;
block|}
else|else
block|{
return|return
name|SeekStatus
operator|.
name|NOT_FOUND
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|BytesRef
name|next
parameter_list|()
block|{
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|current
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|term
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|seekExact
specifier|public
name|void
name|seekExact
parameter_list|(
name|long
name|ord
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|term
specifier|public
name|BytesRef
name|term
parameter_list|()
block|{
return|return
name|current
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|ord
specifier|public
name|long
name|ord
parameter_list|()
block|{
return|return
name|current
operator|.
name|getValue
argument_list|()
operator|.
name|ord
return|;
block|}
annotation|@
name|Override
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|totalTermFreq
specifier|public
name|long
name|totalTermFreq
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|postings
specifier|public
specifier|final
name|PostingsEnum
name|postings
parameter_list|(
name|Bits
name|liveDocs
parameter_list|,
name|PostingsEnum
name|reuse
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|liveDocs
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"liveDocs must be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|PostingsEnum
operator|.
name|featureRequested
argument_list|(
name|flags
argument_list|,
name|PostingsEnum
operator|.
name|POSITIONS
argument_list|)
condition|)
block|{
if|if
condition|(
name|maxAllowed
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|PostingsEnum
operator|.
name|featureRequested
argument_list|(
name|flags
argument_list|,
name|PostingsEnum
operator|.
name|OFFSETS
argument_list|)
operator|&&
name|maxAllowed
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|PostingsEnum
operator|.
name|featureRequested
argument_list|(
name|flags
argument_list|,
name|PostingsEnum
operator|.
name|PAYLOADS
argument_list|)
operator|&&
name|allowPayloads
operator|==
literal|false
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
if|if
condition|(
name|PostingsEnum
operator|.
name|featureRequested
argument_list|(
name|flags
argument_list|,
name|PostingsEnum
operator|.
name|FREQS
argument_list|)
operator|&&
name|maxAllowed
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getSeedPostings
argument_list|(
name|current
operator|.
name|getKey
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|current
operator|.
name|getValue
argument_list|()
operator|.
name|seed
argument_list|,
literal|false
argument_list|,
name|maxAllowed
argument_list|,
name|allowPayloads
argument_list|)
return|;
block|}
block|}
comment|// TODO maybe instead of @BeforeClass just make a single test run: build postings& index& test it?
DECL|field|currentFieldInfos
specifier|private
name|FieldInfos
name|currentFieldInfos
decl_stmt|;
comment|// maxAllowed = the "highest" we can index, but we will still
comment|// randomly index at lower IndexOption
DECL|method|buildIndex
specifier|private
name|FieldsProducer
name|buildIndex
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|IndexOptions
name|maxAllowed
parameter_list|,
name|boolean
name|allowPayloads
parameter_list|,
name|boolean
name|alwaysTestMax
parameter_list|)
throws|throws
name|IOException
block|{
name|Codec
name|codec
init|=
name|getCodec
argument_list|()
decl_stmt|;
name|SegmentInfo
name|segmentInfo
init|=
operator|new
name|SegmentInfo
argument_list|(
name|dir
argument_list|,
name|Version
operator|.
name|LATEST
argument_list|,
literal|"_0"
argument_list|,
name|maxDoc
argument_list|,
literal|false
argument_list|,
name|codec
argument_list|,
literal|null
argument_list|,
name|StringHelper
operator|.
name|randomId
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|maxIndexOption
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|IndexOptions
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|indexOf
argument_list|(
name|maxAllowed
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: now build index"
argument_list|)
expr_stmt|;
block|}
comment|// TODO use allowPayloads
name|FieldInfo
index|[]
name|newFieldInfoArray
init|=
operator|new
name|FieldInfo
index|[
name|fields
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|fieldUpto
init|=
literal|0
init|;
name|fieldUpto
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|fieldUpto
operator|++
control|)
block|{
name|FieldInfo
name|oldFieldInfo
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|fieldUpto
argument_list|)
decl_stmt|;
comment|// Randomly picked the IndexOptions to index this
comment|// field with:
name|IndexOptions
name|indexOptions
init|=
name|IndexOptions
operator|.
name|values
argument_list|()
index|[
name|alwaysTestMax
condition|?
name|maxIndexOption
else|:
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|maxIndexOption
argument_list|)
index|]
decl_stmt|;
name|boolean
name|doPayloads
init|=
name|indexOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
operator|>=
literal|0
operator|&&
name|allowPayloads
decl_stmt|;
name|newFieldInfoArray
index|[
name|fieldUpto
index|]
operator|=
operator|new
name|FieldInfo
argument_list|(
name|oldFieldInfo
operator|.
name|name
argument_list|,
name|fieldUpto
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|doPayloads
argument_list|,
name|indexOptions
argument_list|,
name|DocValuesType
operator|.
name|NONE
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|FieldInfos
name|newFieldInfos
init|=
operator|new
name|FieldInfos
argument_list|(
name|newFieldInfoArray
argument_list|)
decl_stmt|;
comment|// Estimate that flushed segment size will be 25% of
comment|// what we use in RAM:
name|long
name|bytes
init|=
name|totalPostings
operator|*
literal|8
operator|+
name|totalPayloadBytes
decl_stmt|;
name|SegmentWriteState
name|writeState
init|=
operator|new
name|SegmentWriteState
argument_list|(
literal|null
argument_list|,
name|dir
argument_list|,
name|segmentInfo
argument_list|,
name|newFieldInfos
argument_list|,
literal|null
argument_list|,
operator|new
name|IOContext
argument_list|(
operator|new
name|FlushInfo
argument_list|(
name|maxDoc
argument_list|,
name|bytes
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Fields
name|seedFields
init|=
operator|new
name|SeedFields
argument_list|(
name|fields
argument_list|,
name|newFieldInfos
argument_list|,
name|maxAllowed
argument_list|,
name|allowPayloads
argument_list|)
decl_stmt|;
name|FieldsConsumer
name|consumer
init|=
name|codec
operator|.
name|postingsFormat
argument_list|()
operator|.
name|fieldsConsumer
argument_list|(
name|writeState
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|consumer
operator|.
name|write
argument_list|(
name|seedFields
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: after indexing: files="
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|file
range|:
name|dir
operator|.
name|listAll
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|file
operator|+
literal|": "
operator|+
name|dir
operator|.
name|fileLength
argument_list|(
name|file
argument_list|)
operator|+
literal|" bytes"
argument_list|)
expr_stmt|;
block|}
block|}
name|currentFieldInfos
operator|=
name|newFieldInfos
expr_stmt|;
name|SegmentReadState
name|readState
init|=
operator|new
name|SegmentReadState
argument_list|(
name|dir
argument_list|,
name|segmentInfo
argument_list|,
name|newFieldInfos
argument_list|,
name|IOContext
operator|.
name|READ
argument_list|)
decl_stmt|;
return|return
name|codec
operator|.
name|postingsFormat
argument_list|()
operator|.
name|fieldsProducer
argument_list|(
name|readState
argument_list|)
return|;
block|}
DECL|class|ThreadState
specifier|private
specifier|static
class|class
name|ThreadState
block|{
comment|// Only used with REUSE option:
DECL|field|reusePostingsEnum
specifier|public
name|PostingsEnum
name|reusePostingsEnum
decl_stmt|;
block|}
DECL|method|verifyEnum
specifier|private
name|void
name|verifyEnum
parameter_list|(
name|ThreadState
name|threadState
parameter_list|,
name|String
name|field
parameter_list|,
name|BytesRef
name|term
parameter_list|,
name|TermsEnum
name|termsEnum
parameter_list|,
comment|// Maximum options (docs/freqs/positions/offsets) to test:
name|IndexOptions
name|maxTestOptions
parameter_list|,
name|IndexOptions
name|maxIndexOptions
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|,
name|boolean
name|alwaysTestMax
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  verifyEnum: options="
operator|+
name|options
operator|+
literal|" maxTestOptions="
operator|+
name|maxTestOptions
argument_list|)
expr_stmt|;
block|}
comment|// Make sure TermsEnum really is positioned on the
comment|// expected term:
name|assertEquals
argument_list|(
name|term
argument_list|,
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
comment|// 50% of the time time pass liveDocs:
name|boolean
name|useLiveDocs
init|=
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|LIVE_DOCS
argument_list|)
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|Bits
name|liveDocs
decl_stmt|;
if|if
condition|(
name|useLiveDocs
condition|)
block|{
name|liveDocs
operator|=
name|globalLiveDocs
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  use liveDocs"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|liveDocs
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  no liveDocs"
argument_list|)
expr_stmt|;
block|}
block|}
name|FieldInfo
name|fieldInfo
init|=
name|currentFieldInfos
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
comment|// NOTE: can be empty list if we are using liveDocs:
name|SeedPostings
name|expected
init|=
name|getSeedPostings
argument_list|(
name|term
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|fields
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|(
name|term
argument_list|)
operator|.
name|seed
argument_list|,
name|useLiveDocs
argument_list|,
name|maxIndexOptions
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|docFreq
argument_list|,
name|termsEnum
operator|.
name|docFreq
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|allowFreqs
init|=
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|)
operator|>=
literal|0
operator|&&
name|maxTestOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|)
operator|>=
literal|0
decl_stmt|;
name|boolean
name|doCheckFreqs
init|=
name|allowFreqs
operator|&&
operator|(
name|alwaysTestMax
operator|||
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|<=
literal|2
operator|)
decl_stmt|;
name|boolean
name|allowPositions
init|=
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
operator|>=
literal|0
operator|&&
name|maxTestOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
operator|>=
literal|0
decl_stmt|;
name|boolean
name|doCheckPositions
init|=
name|allowPositions
operator|&&
operator|(
name|alwaysTestMax
operator|||
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|<=
literal|2
operator|)
decl_stmt|;
name|boolean
name|allowOffsets
init|=
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
operator|>=
literal|0
operator|&&
name|maxTestOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
operator|>=
literal|0
decl_stmt|;
name|boolean
name|doCheckOffsets
init|=
name|allowOffsets
operator|&&
operator|(
name|alwaysTestMax
operator|||
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|<=
literal|2
operator|)
decl_stmt|;
name|boolean
name|doCheckPayloads
init|=
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|PAYLOADS
argument_list|)
operator|&&
name|allowPositions
operator|&&
name|fieldInfo
operator|.
name|hasPayloads
argument_list|()
operator|&&
operator|(
name|alwaysTestMax
operator|||
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|<=
literal|2
operator|)
decl_stmt|;
name|PostingsEnum
name|prevPostingsEnum
init|=
literal|null
decl_stmt|;
name|PostingsEnum
name|postingsEnum
decl_stmt|;
if|if
condition|(
operator|!
name|doCheckPositions
condition|)
block|{
if|if
condition|(
name|allowPositions
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
condition|)
block|{
comment|// 10% of the time, even though we will not check positions, pull a DocsAndPositions enum
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|REUSE_ENUMS
argument_list|)
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|<
literal|9
condition|)
block|{
name|prevPostingsEnum
operator|=
name|threadState
operator|.
name|reusePostingsEnum
expr_stmt|;
block|}
name|int
name|flags
init|=
name|PostingsEnum
operator|.
name|POSITIONS
decl_stmt|;
if|if
condition|(
name|alwaysTestMax
operator|||
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|flags
operator||=
name|PostingsEnum
operator|.
name|OFFSETS
expr_stmt|;
block|}
if|if
condition|(
name|alwaysTestMax
operator|||
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|flags
operator||=
name|PostingsEnum
operator|.
name|PAYLOADS
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  get DocsEnum (but we won't check positions) flags="
operator|+
name|flags
argument_list|)
expr_stmt|;
block|}
name|threadState
operator|.
name|reusePostingsEnum
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|liveDocs
argument_list|,
name|prevPostingsEnum
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|postingsEnum
operator|=
name|threadState
operator|.
name|reusePostingsEnum
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  get DocsEnum"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|REUSE_ENUMS
argument_list|)
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|<
literal|9
condition|)
block|{
name|prevPostingsEnum
operator|=
name|threadState
operator|.
name|reusePostingsEnum
expr_stmt|;
block|}
name|threadState
operator|.
name|reusePostingsEnum
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|liveDocs
argument_list|,
name|prevPostingsEnum
argument_list|,
name|doCheckFreqs
condition|?
name|PostingsEnum
operator|.
name|FREQS
else|:
name|PostingsEnum
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|postingsEnum
operator|=
name|threadState
operator|.
name|reusePostingsEnum
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|REUSE_ENUMS
argument_list|)
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|<
literal|9
condition|)
block|{
name|prevPostingsEnum
operator|=
name|threadState
operator|.
name|reusePostingsEnum
expr_stmt|;
block|}
name|int
name|flags
init|=
name|PostingsEnum
operator|.
name|POSITIONS
decl_stmt|;
if|if
condition|(
name|alwaysTestMax
operator|||
name|doCheckOffsets
operator|||
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|==
literal|1
condition|)
block|{
name|flags
operator||=
name|PostingsEnum
operator|.
name|OFFSETS
expr_stmt|;
block|}
if|if
condition|(
name|alwaysTestMax
operator|||
name|doCheckPayloads
operator|||
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|==
literal|1
condition|)
block|{
name|flags
operator||=
name|PostingsEnum
operator|.
name|PAYLOADS
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  get DocsEnum flags="
operator|+
name|flags
argument_list|)
expr_stmt|;
block|}
name|threadState
operator|.
name|reusePostingsEnum
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|liveDocs
argument_list|,
name|prevPostingsEnum
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|postingsEnum
operator|=
name|threadState
operator|.
name|reusePostingsEnum
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"null DocsEnum"
argument_list|,
name|postingsEnum
argument_list|)
expr_stmt|;
name|int
name|initialDocID
init|=
name|postingsEnum
operator|.
name|docID
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"inital docID should be -1"
operator|+
name|postingsEnum
argument_list|,
operator|-
literal|1
argument_list|,
name|initialDocID
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
if|if
condition|(
name|prevPostingsEnum
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  got enum="
operator|+
name|postingsEnum
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prevPostingsEnum
operator|==
name|postingsEnum
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  got reuse enum="
operator|+
name|postingsEnum
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  got enum="
operator|+
name|postingsEnum
operator|+
literal|" (reuse of "
operator|+
name|prevPostingsEnum
operator|+
literal|" failed)"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 10% of the time don't consume all docs:
name|int
name|stopAt
decl_stmt|;
if|if
condition|(
operator|!
name|alwaysTestMax
operator|&&
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|PARTIAL_DOC_CONSUME
argument_list|)
operator|&&
name|expected
operator|.
name|docFreq
operator|>
literal|1
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
condition|)
block|{
name|stopAt
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|expected
operator|.
name|docFreq
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  will not consume all docs ("
operator|+
name|stopAt
operator|+
literal|" vs "
operator|+
name|expected
operator|.
name|docFreq
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|stopAt
operator|=
name|expected
operator|.
name|docFreq
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  consume all docs"
argument_list|)
expr_stmt|;
block|}
block|}
name|double
name|skipChance
init|=
name|alwaysTestMax
condition|?
literal|0.5
else|:
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|int
name|numSkips
init|=
name|expected
operator|.
name|docFreq
operator|<
literal|3
condition|?
literal|1
else|:
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|20
argument_list|,
name|expected
operator|.
name|docFreq
operator|/
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|skipInc
init|=
name|expected
operator|.
name|docFreq
operator|/
name|numSkips
decl_stmt|;
name|int
name|skipDocInc
init|=
name|maxDoc
operator|/
name|numSkips
decl_stmt|;
comment|// Sometimes do 100% skipping:
name|boolean
name|doAllSkipping
init|=
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|SKIPPING
argument_list|)
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|7
argument_list|)
operator|==
literal|1
decl_stmt|;
name|double
name|freqAskChance
init|=
name|alwaysTestMax
condition|?
literal|1.0
else|:
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|double
name|payloadCheckChance
init|=
name|alwaysTestMax
condition|?
literal|1.0
else|:
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|double
name|offsetCheckChance
init|=
name|alwaysTestMax
condition|?
literal|1.0
else|:
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|SKIPPING
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  skipChance="
operator|+
name|skipChance
operator|+
literal|" numSkips="
operator|+
name|numSkips
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  no skipping"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doCheckFreqs
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  freqAskChance="
operator|+
name|freqAskChance
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doCheckPayloads
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  payloadCheckChance="
operator|+
name|payloadCheckChance
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doCheckOffsets
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  offsetCheckChance="
operator|+
name|offsetCheckChance
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
name|expected
operator|.
name|upto
operator|<=
name|stopAt
condition|)
block|{
if|if
condition|(
name|expected
operator|.
name|upto
operator|==
name|stopAt
condition|)
block|{
if|if
condition|(
name|stopAt
operator|==
name|expected
operator|.
name|docFreq
condition|)
block|{
name|assertEquals
argument_list|(
literal|"DocsEnum should have ended but didn't"
argument_list|,
name|PostingsEnum
operator|.
name|NO_MORE_DOCS
argument_list|,
name|postingsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// Common bug is to forget to set this.doc=NO_MORE_DOCS in the enum!:
name|assertEquals
argument_list|(
literal|"DocsEnum should have ended but didn't"
argument_list|,
name|PostingsEnum
operator|.
name|NO_MORE_DOCS
argument_list|,
name|postingsEnum
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|SKIPPING
argument_list|)
operator|&&
operator|(
name|doAllSkipping
operator|||
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|<=
name|skipChance
operator|)
condition|)
block|{
name|int
name|targetDocID
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|expected
operator|.
name|upto
operator|<
name|stopAt
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// Pick target we know exists:
specifier|final
name|int
name|skipCount
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|skipInc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|skip
init|=
literal|0
init|;
name|skip
operator|<
name|skipCount
condition|;
name|skip
operator|++
control|)
block|{
if|if
condition|(
name|expected
operator|.
name|nextDoc
argument_list|()
operator|==
name|PostingsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
block|}
block|}
else|else
block|{
comment|// Pick random target (might not exist):
specifier|final
name|int
name|skipDocIDs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|skipDocInc
argument_list|)
decl_stmt|;
if|if
condition|(
name|skipDocIDs
operator|>
literal|0
condition|)
block|{
name|targetDocID
operator|=
name|expected
operator|.
name|docID
argument_list|()
operator|+
name|skipDocIDs
expr_stmt|;
name|expected
operator|.
name|advance
argument_list|(
name|targetDocID
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|expected
operator|.
name|upto
operator|>=
name|stopAt
condition|)
block|{
name|int
name|target
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|maxDoc
else|:
name|PostingsEnum
operator|.
name|NO_MORE_DOCS
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  now advance to end (target="
operator|+
name|target
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"DocsEnum should have ended but didn't"
argument_list|,
name|PostingsEnum
operator|.
name|NO_MORE_DOCS
argument_list|,
name|postingsEnum
operator|.
name|advance
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
if|if
condition|(
name|targetDocID
operator|!=
operator|-
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  now advance to random target="
operator|+
name|targetDocID
operator|+
literal|" ("
operator|+
name|expected
operator|.
name|upto
operator|+
literal|" of "
operator|+
name|stopAt
operator|+
literal|") current="
operator|+
name|postingsEnum
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  now advance to known-exists target="
operator|+
name|expected
operator|.
name|docID
argument_list|()
operator|+
literal|" ("
operator|+
name|expected
operator|.
name|upto
operator|+
literal|" of "
operator|+
name|stopAt
operator|+
literal|") current="
operator|+
name|postingsEnum
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|docID
init|=
name|postingsEnum
operator|.
name|advance
argument_list|(
name|targetDocID
operator|!=
operator|-
literal|1
condition|?
name|targetDocID
else|:
name|expected
operator|.
name|docID
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"docID is wrong"
argument_list|,
name|expected
operator|.
name|docID
argument_list|()
argument_list|,
name|docID
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|expected
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  now nextDoc to "
operator|+
name|expected
operator|.
name|docID
argument_list|()
operator|+
literal|" ("
operator|+
name|expected
operator|.
name|upto
operator|+
literal|" of "
operator|+
name|stopAt
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|int
name|docID
init|=
name|postingsEnum
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"docID is wrong"
argument_list|,
name|expected
operator|.
name|docID
argument_list|()
argument_list|,
name|docID
argument_list|)
expr_stmt|;
if|if
condition|(
name|docID
operator|==
name|PostingsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|doCheckFreqs
operator|&&
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|<=
name|freqAskChance
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    now freq()="
operator|+
name|expected
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|freq
init|=
name|postingsEnum
operator|.
name|freq
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"freq is wrong"
argument_list|,
name|expected
operator|.
name|freq
argument_list|()
argument_list|,
name|freq
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doCheckPositions
condition|)
block|{
name|int
name|freq
init|=
name|postingsEnum
operator|.
name|freq
argument_list|()
decl_stmt|;
name|int
name|numPosToConsume
decl_stmt|;
if|if
condition|(
operator|!
name|alwaysTestMax
operator|&&
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|PARTIAL_POS_CONSUME
argument_list|)
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|1
condition|)
block|{
name|numPosToConsume
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|freq
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|numPosToConsume
operator|=
name|freq
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPosToConsume
condition|;
name|i
operator|++
control|)
block|{
name|int
name|pos
init|=
name|expected
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    now nextPosition to "
operator|+
name|pos
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"position is wrong"
argument_list|,
name|pos
argument_list|,
name|postingsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|doCheckPayloads
condition|)
block|{
name|BytesRef
name|expectedPayload
init|=
name|expected
operator|.
name|getPayload
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|<=
name|payloadCheckChance
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      now check expectedPayload length="
operator|+
operator|(
name|expectedPayload
operator|==
literal|null
condition|?
literal|0
else|:
name|expectedPayload
operator|.
name|length
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectedPayload
operator|==
literal|null
operator|||
name|expectedPayload
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|assertNull
argument_list|(
literal|"should not have payload"
argument_list|,
name|postingsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BytesRef
name|payload
init|=
name|postingsEnum
operator|.
name|getPayload
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"should have payload but doesn't"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"payload length is wrong"
argument_list|,
name|expectedPayload
operator|.
name|length
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|byteUpto
init|=
literal|0
init|;
name|byteUpto
operator|<
name|expectedPayload
operator|.
name|length
condition|;
name|byteUpto
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"payload bytes are wrong"
argument_list|,
name|expectedPayload
operator|.
name|bytes
index|[
name|expectedPayload
operator|.
name|offset
operator|+
name|byteUpto
index|]
argument_list|,
name|payload
operator|.
name|bytes
index|[
name|payload
operator|.
name|offset
operator|+
name|byteUpto
index|]
argument_list|)
expr_stmt|;
block|}
comment|// make a deep copy
name|payload
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2nd call to getPayload returns something different!"
argument_list|,
name|payload
argument_list|,
name|postingsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      skip check payload length="
operator|+
operator|(
name|expectedPayload
operator|==
literal|null
condition|?
literal|0
else|:
name|expectedPayload
operator|.
name|length
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|doCheckOffsets
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|<=
name|offsetCheckChance
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      now check offsets: startOff="
operator|+
name|expected
operator|.
name|startOffset
argument_list|()
operator|+
literal|" endOffset="
operator|+
name|expected
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"startOffset is wrong"
argument_list|,
name|expected
operator|.
name|startOffset
argument_list|()
argument_list|,
name|postingsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"endOffset is wrong"
argument_list|,
name|expected
operator|.
name|endOffset
argument_list|()
argument_list|,
name|postingsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      skip check offsets"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      now check offsets are -1"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"startOffset isn't -1"
argument_list|,
operator|-
literal|1
argument_list|,
name|postingsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"endOffset isn't -1"
argument_list|,
operator|-
literal|1
argument_list|,
name|postingsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|class|TestThread
specifier|private
specifier|static
class|class
name|TestThread
extends|extends
name|Thread
block|{
DECL|field|fieldsSource
specifier|private
name|Fields
name|fieldsSource
decl_stmt|;
DECL|field|options
specifier|private
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
decl_stmt|;
DECL|field|maxIndexOptions
specifier|private
name|IndexOptions
name|maxIndexOptions
decl_stmt|;
DECL|field|maxTestOptions
specifier|private
name|IndexOptions
name|maxTestOptions
decl_stmt|;
DECL|field|alwaysTestMax
specifier|private
name|boolean
name|alwaysTestMax
decl_stmt|;
DECL|field|testCase
specifier|private
name|BasePostingsFormatTestCase
name|testCase
decl_stmt|;
DECL|method|TestThread
specifier|public
name|TestThread
parameter_list|(
name|BasePostingsFormatTestCase
name|testCase
parameter_list|,
name|Fields
name|fieldsSource
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|,
name|IndexOptions
name|maxTestOptions
parameter_list|,
name|IndexOptions
name|maxIndexOptions
parameter_list|,
name|boolean
name|alwaysTestMax
parameter_list|)
block|{
name|this
operator|.
name|fieldsSource
operator|=
name|fieldsSource
expr_stmt|;
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
name|this
operator|.
name|maxTestOptions
operator|=
name|maxTestOptions
expr_stmt|;
name|this
operator|.
name|maxIndexOptions
operator|=
name|maxIndexOptions
expr_stmt|;
name|this
operator|.
name|alwaysTestMax
operator|=
name|alwaysTestMax
expr_stmt|;
name|this
operator|.
name|testCase
operator|=
name|testCase
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
try|try
block|{
name|testCase
operator|.
name|testTermsOneThread
argument_list|(
name|fieldsSource
argument_list|,
name|options
argument_list|,
name|maxTestOptions
argument_list|,
name|maxIndexOptions
argument_list|,
name|alwaysTestMax
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|fieldsSource
operator|=
literal|null
expr_stmt|;
name|testCase
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|method|testTerms
specifier|private
name|void
name|testTerms
parameter_list|(
specifier|final
name|Fields
name|fieldsSource
parameter_list|,
specifier|final
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|,
specifier|final
name|IndexOptions
name|maxTestOptions
parameter_list|,
specifier|final
name|IndexOptions
name|maxIndexOptions
parameter_list|,
specifier|final
name|boolean
name|alwaysTestMax
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|THREADS
argument_list|)
condition|)
block|{
name|int
name|numThreads
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|numThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|threadUpto
init|=
literal|0
init|;
name|threadUpto
operator|<
name|numThreads
condition|;
name|threadUpto
operator|++
control|)
block|{
name|threads
index|[
name|threadUpto
index|]
operator|=
operator|new
name|TestThread
argument_list|(
name|this
argument_list|,
name|fieldsSource
argument_list|,
name|options
argument_list|,
name|maxTestOptions
argument_list|,
name|maxIndexOptions
argument_list|,
name|alwaysTestMax
argument_list|)
expr_stmt|;
name|threads
index|[
name|threadUpto
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|threadUpto
init|=
literal|0
init|;
name|threadUpto
operator|<
name|numThreads
condition|;
name|threadUpto
operator|++
control|)
block|{
name|threads
index|[
name|threadUpto
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|testTermsOneThread
argument_list|(
name|fieldsSource
argument_list|,
name|options
argument_list|,
name|maxTestOptions
argument_list|,
name|maxIndexOptions
argument_list|,
name|alwaysTestMax
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testTermsOneThread
specifier|private
name|void
name|testTermsOneThread
parameter_list|(
name|Fields
name|fieldsSource
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|,
name|IndexOptions
name|maxTestOptions
parameter_list|,
name|IndexOptions
name|maxIndexOptions
parameter_list|,
name|boolean
name|alwaysTestMax
parameter_list|)
throws|throws
name|IOException
block|{
name|ThreadState
name|threadState
init|=
operator|new
name|ThreadState
argument_list|()
decl_stmt|;
comment|// Test random terms/fields:
name|List
argument_list|<
name|TermState
argument_list|>
name|termStates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldAndTerm
argument_list|>
name|termStateTerms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|supportsOrds
init|=
literal|true
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|allTerms
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|upto
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|upto
operator|<
name|allTerms
operator|.
name|size
argument_list|()
condition|)
block|{
name|boolean
name|useTermState
init|=
name|termStates
operator|.
name|size
argument_list|()
operator|!=
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|1
decl_stmt|;
name|boolean
name|useTermOrd
init|=
name|supportsOrds
operator|&&
name|useTermState
operator|==
literal|false
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|1
decl_stmt|;
name|FieldAndTerm
name|fieldAndTerm
decl_stmt|;
name|TermsEnum
name|termsEnum
decl_stmt|;
name|TermState
name|termState
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|useTermState
condition|)
block|{
comment|// Seek by random field+term:
name|fieldAndTerm
operator|=
name|allTerms
operator|.
name|get
argument_list|(
name|upto
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
if|if
condition|(
name|useTermOrd
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: seek to term="
operator|+
name|fieldAndTerm
operator|.
name|field
operator|+
literal|":"
operator|+
name|fieldAndTerm
operator|.
name|term
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|" using ord="
operator|+
name|fieldAndTerm
operator|.
name|ord
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: seek to term="
operator|+
name|fieldAndTerm
operator|.
name|field
operator|+
literal|":"
operator|+
name|fieldAndTerm
operator|.
name|term
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Seek by previous saved TermState
name|int
name|idx
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|termStates
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|fieldAndTerm
operator|=
name|termStateTerms
operator|.
name|get
argument_list|(
name|idx
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: seek using TermState to term="
operator|+
name|fieldAndTerm
operator|.
name|field
operator|+
literal|":"
operator|+
name|fieldAndTerm
operator|.
name|term
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|termState
operator|=
name|termStates
operator|.
name|get
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
name|Terms
name|terms
init|=
name|fieldsSource
operator|.
name|terms
argument_list|(
name|fieldAndTerm
operator|.
name|field
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|terms
argument_list|)
expr_stmt|;
name|termsEnum
operator|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useTermState
condition|)
block|{
if|if
condition|(
name|useTermOrd
condition|)
block|{
comment|// Try seek by ord sometimes:
try|try
block|{
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|fieldAndTerm
operator|.
name|ord
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|uoe
parameter_list|)
block|{
name|supportsOrds
operator|=
literal|false
expr_stmt|;
name|assertTrue
argument_list|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|fieldAndTerm
operator|.
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|fieldAndTerm
operator|.
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|fieldAndTerm
operator|.
name|term
argument_list|,
name|termState
argument_list|)
expr_stmt|;
block|}
name|long
name|termOrd
decl_stmt|;
if|if
condition|(
name|supportsOrds
condition|)
block|{
try|try
block|{
name|termOrd
operator|=
name|termsEnum
operator|.
name|ord
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|uoe
parameter_list|)
block|{
name|supportsOrds
operator|=
literal|false
expr_stmt|;
name|termOrd
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
name|termOrd
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|termOrd
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// PostingsFormat supports ords
name|assertEquals
argument_list|(
name|fieldAndTerm
operator|.
name|ord
argument_list|,
name|termsEnum
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|savedTermState
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|TERM_STATE
argument_list|)
operator|&&
operator|!
name|useTermState
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|1
condition|)
block|{
comment|// Save away this TermState:
name|termStates
operator|.
name|add
argument_list|(
name|termsEnum
operator|.
name|termState
argument_list|()
argument_list|)
expr_stmt|;
name|termStateTerms
operator|.
name|add
argument_list|(
name|fieldAndTerm
argument_list|)
expr_stmt|;
name|savedTermState
operator|=
literal|true
expr_stmt|;
block|}
name|verifyEnum
argument_list|(
name|threadState
argument_list|,
name|fieldAndTerm
operator|.
name|field
argument_list|,
name|fieldAndTerm
operator|.
name|term
argument_list|,
name|termsEnum
argument_list|,
name|maxTestOptions
argument_list|,
name|maxIndexOptions
argument_list|,
name|options
argument_list|,
name|alwaysTestMax
argument_list|)
expr_stmt|;
comment|// Sometimes save term state after pulling the enum:
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|TERM_STATE
argument_list|)
operator|&&
operator|!
name|useTermState
operator|&&
operator|!
name|savedTermState
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|1
condition|)
block|{
comment|// Save away this TermState:
name|termStates
operator|.
name|add
argument_list|(
name|termsEnum
operator|.
name|termState
argument_list|()
argument_list|)
expr_stmt|;
name|termStateTerms
operator|.
name|add
argument_list|(
name|fieldAndTerm
argument_list|)
expr_stmt|;
name|useTermState
operator|=
literal|true
expr_stmt|;
block|}
comment|// 10% of the time make sure you can pull another enum
comment|// from the same term:
if|if
condition|(
name|alwaysTestMax
operator|||
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
condition|)
block|{
comment|// Try same term again
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: try enum again on same term"
argument_list|)
expr_stmt|;
block|}
name|verifyEnum
argument_list|(
name|threadState
argument_list|,
name|fieldAndTerm
operator|.
name|field
argument_list|,
name|fieldAndTerm
operator|.
name|term
argument_list|,
name|termsEnum
argument_list|,
name|maxTestOptions
argument_list|,
name|maxIndexOptions
argument_list|,
name|options
argument_list|,
name|alwaysTestMax
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test Terms.intersect:
for|for
control|(
name|String
name|field
range|:
name|fields
operator|.
name|keySet
argument_list|()
control|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Automaton
name|a
init|=
name|AutomatonTestUtil
operator|.
name|randomAutomaton
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|CompiledAutomaton
name|ca
init|=
operator|new
name|CompiledAutomaton
argument_list|(
name|a
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
if|if
condition|(
name|ca
operator|.
name|type
operator|!=
name|CompiledAutomaton
operator|.
name|AUTOMATON_TYPE
operator|.
name|NORMAL
condition|)
block|{
comment|// Keep retrying until we get an A that will really "use" the PF's intersect code:
continue|continue;
block|}
comment|// System.out.println("A:\n" + a.toDot());
name|BytesRef
name|startTerm
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|RandomAcceptedStrings
name|ras
init|=
operator|new
name|RandomAcceptedStrings
argument_list|(
name|a
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|100
condition|;
name|iter
operator|++
control|)
block|{
name|int
index|[]
name|codePoints
init|=
name|ras
operator|.
name|getRandomAcceptedString
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|codePoints
operator|.
name|length
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|startTerm
operator|=
operator|new
name|BytesRef
argument_list|(
name|UnicodeUtil
operator|.
name|newString
argument_list|(
name|codePoints
argument_list|,
literal|0
argument_list|,
name|codePoints
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// Don't allow empty string startTerm:
if|if
condition|(
name|startTerm
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
block|}
name|TermsEnum
name|intersected
init|=
name|fieldsSource
operator|.
name|terms
argument_list|(
name|field
argument_list|)
operator|.
name|intersect
argument_list|(
name|ca
argument_list|,
name|startTerm
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|BytesRef
argument_list|>
name|intersectedTerms
init|=
operator|new
name|HashSet
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
decl_stmt|;
name|BytesRef
name|term
decl_stmt|;
while|while
condition|(
operator|(
name|term
operator|=
name|intersected
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|startTerm
operator|!=
literal|null
condition|)
block|{
comment|// NOTE: not<=
name|assertTrue
argument_list|(
name|startTerm
operator|.
name|compareTo
argument_list|(
name|term
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
name|intersectedTerms
operator|.
name|add
argument_list|(
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
name|verifyEnum
argument_list|(
name|threadState
argument_list|,
name|field
argument_list|,
name|term
argument_list|,
name|intersected
argument_list|,
name|maxTestOptions
argument_list|,
name|maxIndexOptions
argument_list|,
name|options
argument_list|,
name|alwaysTestMax
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ca
operator|.
name|runAutomaton
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|intersectedTerms
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|BytesRef
name|term2
range|:
name|fields
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|keySet
argument_list|()
control|)
block|{
name|boolean
name|expected
decl_stmt|;
if|if
condition|(
name|startTerm
operator|!=
literal|null
operator|&&
name|startTerm
operator|.
name|compareTo
argument_list|(
name|term2
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|expected
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
name|ca
operator|.
name|runAutomaton
operator|.
name|run
argument_list|(
name|term2
operator|.
name|bytes
argument_list|,
name|term2
operator|.
name|offset
argument_list|,
name|term2
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"term="
operator|+
name|term2
argument_list|,
name|expected
argument_list|,
name|intersectedTerms
operator|.
name|contains
argument_list|(
name|term2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
block|}
DECL|method|testFields
specifier|private
name|void
name|testFields
parameter_list|(
name|Fields
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|fields
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
try|try
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Fields.iterator() allows for removal"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{
comment|// expected;
block|}
block|}
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Fields.iterator() doesn't throw NoSuchElementException when past the end"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|/** Indexes all fields/terms at the specified    *  IndexOptions, and fully tests at that IndexOptions. */
DECL|method|testFull
specifier|private
name|void
name|testFull
parameter_list|(
name|IndexOptions
name|options
parameter_list|,
name|boolean
name|withPayloads
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
name|createTempDir
argument_list|(
literal|"testPostingsFormat.testExact"
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|newFSDirectory
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// TODO test thread safety of buildIndex too
name|FieldsProducer
name|fieldsProducer
init|=
name|buildIndex
argument_list|(
name|dir
argument_list|,
name|options
argument_list|,
name|withPayloads
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|testFields
argument_list|(
name|fieldsProducer
argument_list|)
expr_stmt|;
name|IndexOptions
index|[]
name|allOptions
init|=
name|IndexOptions
operator|.
name|values
argument_list|()
decl_stmt|;
name|int
name|maxIndexOption
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|allOptions
argument_list|)
operator|.
name|indexOf
argument_list|(
name|options
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|maxIndexOption
condition|;
name|i
operator|++
control|)
block|{
name|testTerms
argument_list|(
name|fieldsProducer
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Option
operator|.
name|class
argument_list|)
argument_list|,
name|allOptions
index|[
name|i
index|]
argument_list|,
name|options
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|withPayloads
condition|)
block|{
comment|// If we indexed w/ payloads, also test enums w/o accessing payloads:
name|testTerms
argument_list|(
name|fieldsProducer
argument_list|,
name|EnumSet
operator|.
name|complementOf
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|PAYLOADS
argument_list|)
argument_list|)
argument_list|,
name|allOptions
index|[
name|i
index|]
argument_list|,
name|options
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|fieldsProducer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|rm
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocsOnly
specifier|public
name|void
name|testDocsOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|testFull
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocsAndFreqs
specifier|public
name|void
name|testDocsAndFreqs
parameter_list|()
throws|throws
name|Exception
block|{
name|testFull
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocsAndFreqsAndPositions
specifier|public
name|void
name|testDocsAndFreqsAndPositions
parameter_list|()
throws|throws
name|Exception
block|{
name|testFull
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocsAndFreqsAndPositionsAndPayloads
specifier|public
name|void
name|testDocsAndFreqsAndPositionsAndPayloads
parameter_list|()
throws|throws
name|Exception
block|{
name|testFull
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocsAndFreqsAndPositionsAndOffsets
specifier|public
name|void
name|testDocsAndFreqsAndPositionsAndOffsets
parameter_list|()
throws|throws
name|Exception
block|{
name|testFull
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocsAndFreqsAndPositionsAndOffsetsAndPayloads
specifier|public
name|void
name|testDocsAndFreqsAndPositionsAndOffsetsAndPayloads
parameter_list|()
throws|throws
name|Exception
block|{
name|testFull
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|iters
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
name|Path
name|path
init|=
name|createTempDir
argument_list|(
literal|"testPostingsFormat"
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|newFSDirectory
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|boolean
name|indexPayloads
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
comment|// TODO test thread safety of buildIndex too
name|FieldsProducer
name|fieldsProducer
init|=
name|buildIndex
argument_list|(
name|dir
argument_list|,
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|,
name|indexPayloads
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|testFields
argument_list|(
name|fieldsProducer
argument_list|)
expr_stmt|;
comment|// NOTE: you can also test "weaker" index options than
comment|// you indexed with:
name|testTerms
argument_list|(
name|fieldsProducer
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Option
operator|.
name|class
argument_list|)
argument_list|,
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|,
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fieldsProducer
operator|.
name|close
argument_list|()
expr_stmt|;
name|fieldsProducer
operator|=
literal|null
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|rm
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isPostingsEnumReuseImplemented
specifier|protected
name|boolean
name|isPostingsEnumReuseImplemented
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|testPostingsEnumReuse
specifier|public
name|void
name|testPostingsEnumReuse
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
name|createTempDir
argument_list|(
literal|"testPostingsEnumReuse"
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|newFSDirectory
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|FieldsProducer
name|fieldsProducer
init|=
name|buildIndex
argument_list|(
name|dir
argument_list|,
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|allTerms
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|FieldAndTerm
name|fieldAndTerm
init|=
name|allTerms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Terms
name|terms
init|=
name|fieldsProducer
operator|.
name|terms
argument_list|(
name|fieldAndTerm
operator|.
name|field
argument_list|)
decl_stmt|;
name|TermsEnum
name|te
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|te
operator|.
name|seekExact
argument_list|(
name|fieldAndTerm
operator|.
name|term
argument_list|)
expr_stmt|;
name|checkReuse
argument_list|(
name|te
argument_list|,
name|PostingsEnum
operator|.
name|FREQS
argument_list|,
name|PostingsEnum
operator|.
name|ALL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPostingsEnumReuseImplemented
argument_list|()
condition|)
name|checkReuse
argument_list|(
name|te
argument_list|,
name|PostingsEnum
operator|.
name|ALL
argument_list|,
name|PostingsEnum
operator|.
name|ALL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fieldsProducer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|rm
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
DECL|method|checkReuse
specifier|protected
specifier|static
name|void
name|checkReuse
parameter_list|(
name|TermsEnum
name|termsEnum
parameter_list|,
name|int
name|firstFlags
parameter_list|,
name|int
name|secondFlags
parameter_list|,
name|boolean
name|shouldReuse
parameter_list|)
throws|throws
name|IOException
block|{
name|PostingsEnum
name|postings1
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|firstFlags
argument_list|)
decl_stmt|;
name|PostingsEnum
name|postings2
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|postings1
argument_list|,
name|secondFlags
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldReuse
condition|)
name|assertSame
argument_list|(
literal|"Expected PostingsEnum "
operator|+
name|postings1
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" to be reused"
argument_list|,
name|postings1
argument_list|,
name|postings2
argument_list|)
expr_stmt|;
else|else
name|assertNotSame
argument_list|(
literal|"Expected PostingsEnum "
operator|+
name|postings1
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" to not be reused"
argument_list|,
name|postings1
argument_list|,
name|postings2
argument_list|)
expr_stmt|;
block|}
DECL|method|testJustEmptyField
specifier|public
name|void
name|testJustEmptyField
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|""
argument_list|,
literal|"something"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|LeafReader
name|ar
init|=
name|getOnlySegmentReader
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|Fields
name|fields
init|=
name|ar
operator|.
name|fields
argument_list|()
decl_stmt|;
name|int
name|fieldCount
init|=
name|fields
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// -1 is allowed, if the codec doesn't implement fields.size():
name|assertTrue
argument_list|(
name|fieldCount
operator|==
literal|1
operator|||
name|fieldCount
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|ar
operator|.
name|terms
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|terms
argument_list|)
expr_stmt|;
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|termsEnum
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"something"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|termsEnum
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testEmptyFieldAndEmptyTerm
specifier|public
name|void
name|testEmptyFieldAndEmptyTerm
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|LeafReader
name|ar
init|=
name|getOnlySegmentReader
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|Fields
name|fields
init|=
name|ar
operator|.
name|fields
argument_list|()
decl_stmt|;
name|int
name|fieldCount
init|=
name|fields
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// -1 is allowed, if the codec doesn't implement fields.size():
name|assertTrue
argument_list|(
name|fieldCount
operator|==
literal|1
operator|||
name|fieldCount
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|ar
operator|.
name|terms
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|terms
argument_list|)
expr_stmt|;
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|termsEnum
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|termsEnum
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDidntWantFreqsButAskedAnyway
specifier|public
name|void
name|testDidntWantFreqsButAskedAnyway
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|LeafReader
name|ar
init|=
name|getOnlySegmentReader
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|TermsEnum
name|termsEnum
init|=
name|ar
operator|.
name|terms
argument_list|(
literal|"field"
argument_list|)
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PostingsEnum
name|docsEnum
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|PostingsEnum
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// tests that ghost fields still work
comment|// TODO: can this be improved?
DECL|method|testGhosts
specifier|public
name|void
name|testGhosts
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"ghostField"
argument_list|,
literal|"something"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|iw
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iw
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"ghostField"
argument_list|,
literal|"something"
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete the only term for the field
name|iw
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|DirectoryReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|LeafReader
name|ar
init|=
name|getOnlySegmentReader
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|Fields
name|fields
init|=
name|ar
operator|.
name|fields
argument_list|()
decl_stmt|;
comment|// Ghost busting terms dict impls will have
comment|// fields.size() == 0; all others must be == 1:
name|assertTrue
argument_list|(
name|fields
operator|.
name|size
argument_list|()
operator|<=
literal|1
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
literal|"ghostField"
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|BytesRef
name|term
init|=
name|termsEnum
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|!=
literal|null
condition|)
block|{
name|PostingsEnum
name|postingsEnum
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|postingsEnum
operator|.
name|nextDoc
argument_list|()
operator|==
name|PostingsEnum
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
block|}
block|}
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|TermFreqs
specifier|private
specifier|static
class|class
name|TermFreqs
block|{
DECL|field|totalTermFreq
name|long
name|totalTermFreq
decl_stmt|;
DECL|field|docFreq
name|int
name|docFreq
decl_stmt|;
block|}
empty_stmt|;
comment|// LUCENE-5123: make sure we can visit postings twice
comment|// during flush/merge
DECL|method|testInvertedWrite
specifier|public
name|void
name|testInvertedWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|MockAnalyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|analyzer
operator|.
name|setMaxTokenLength
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|IndexWriter
operator|.
name|MAX_TERM_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
name|analyzer
argument_list|)
decl_stmt|;
comment|// Must be concurrent because thread(s) can be merging
comment|// while up to one thread flushes, and each of those
comment|// threads iterates over the map while the flushing
comment|// thread might be adding to it:
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TermFreqs
argument_list|>
name|termFreqs
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|sumDocFreq
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|sumTotalTermFreq
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
comment|// TODO: would be better to use / delegate to the current
comment|// Codec returned by getCodec()
name|iwc
operator|.
name|setCodec
argument_list|(
operator|new
name|AssertingCodec
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PostingsFormat
name|getPostingsFormatForField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|PostingsFormat
name|p
init|=
name|getCodec
argument_list|()
operator|.
name|postingsFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|instanceof
name|PerFieldPostingsFormat
condition|)
block|{
name|p
operator|=
operator|(
operator|(
name|PerFieldPostingsFormat
operator|)
name|p
operator|)
operator|.
name|getPostingsFormatForField
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
specifier|final
name|PostingsFormat
name|defaultPostingsFormat
init|=
name|p
decl_stmt|;
specifier|final
name|Thread
name|mainThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"body"
argument_list|)
condition|)
block|{
comment|// A PF that counts up some stats and then in
comment|// the end we verify the stats match what the
comment|// final IndexReader says, just to exercise the
comment|// new freedom of iterating the postings more
comment|// than once at flush/merge:
return|return
operator|new
name|PostingsFormat
argument_list|(
name|defaultPostingsFormat
operator|.
name|getName
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|FieldsConsumer
name|fieldsConsumer
parameter_list|(
specifier|final
name|SegmentWriteState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FieldsConsumer
name|fieldsConsumer
init|=
name|defaultPostingsFormat
operator|.
name|fieldsConsumer
argument_list|(
name|state
argument_list|)
decl_stmt|;
return|return
operator|new
name|FieldsConsumer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Fields
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
name|fieldsConsumer
operator|.
name|write
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|boolean
name|isMerge
init|=
name|state
operator|.
name|context
operator|.
name|context
operator|==
name|IOContext
operator|.
name|Context
operator|.
name|MERGE
decl_stmt|;
comment|// We only use one thread for flushing
comment|// in this test:
assert|assert
name|isMerge
operator|||
name|Thread
operator|.
name|currentThread
argument_list|()
operator|==
name|mainThread
assert|;
comment|// We iterate the provided TermsEnum
comment|// twice, so we excercise this new freedom
comment|// with the inverted API; if
comment|// addOnSecondPass is true, we add up
comment|// term stats on the 2nd iteration:
name|boolean
name|addOnSecondPass
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
comment|//System.out.println("write isMerge=" + isMerge + " 2ndPass=" + addOnSecondPass);
comment|// Gather our own stats:
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
literal|"body"
argument_list|)
decl_stmt|;
assert|assert
name|terms
operator|!=
literal|null
assert|;
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|PostingsEnum
name|docs
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|termsEnum
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|BytesRef
name|term
init|=
name|termsEnum
operator|.
name|term
argument_list|()
decl_stmt|;
name|boolean
name|noPositions
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|noPositions
condition|)
block|{
name|docs
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|docs
argument_list|,
name|PostingsEnum
operator|.
name|FREQS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docs
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|PostingsEnum
operator|.
name|POSITIONS
argument_list|)
expr_stmt|;
block|}
name|int
name|docFreq
init|=
literal|0
decl_stmt|;
name|long
name|totalTermFreq
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|docs
operator|.
name|nextDoc
argument_list|()
operator|!=
name|PostingsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|docFreq
operator|++
expr_stmt|;
name|totalTermFreq
operator|+=
name|docs
operator|.
name|freq
argument_list|()
expr_stmt|;
name|int
name|limit
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|docs
operator|.
name|freq
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|noPositions
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
name|i
operator|++
control|)
block|{
name|docs
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|String
name|termString
init|=
name|term
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
comment|// During merge we should only see terms
comment|// we had already seen during a
comment|// previous flush:
name|assertTrue
argument_list|(
name|isMerge
operator|==
literal|false
operator|||
name|termFreqs
operator|.
name|containsKey
argument_list|(
name|termString
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isMerge
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|addOnSecondPass
operator|==
literal|false
condition|)
block|{
name|TermFreqs
name|tf
init|=
name|termFreqs
operator|.
name|get
argument_list|(
name|termString
argument_list|)
decl_stmt|;
if|if
condition|(
name|tf
operator|==
literal|null
condition|)
block|{
name|tf
operator|=
operator|new
name|TermFreqs
argument_list|()
expr_stmt|;
name|termFreqs
operator|.
name|put
argument_list|(
name|termString
argument_list|,
name|tf
argument_list|)
expr_stmt|;
block|}
name|tf
operator|.
name|docFreq
operator|+=
name|docFreq
expr_stmt|;
name|tf
operator|.
name|totalTermFreq
operator|+=
name|totalTermFreq
expr_stmt|;
name|sumDocFreq
operator|.
name|addAndGet
argument_list|(
name|docFreq
argument_list|)
expr_stmt|;
name|sumTotalTermFreq
operator|.
name|addAndGet
argument_list|(
name|totalTermFreq
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|termFreqs
operator|.
name|containsKey
argument_list|(
name|termString
argument_list|)
operator|==
literal|false
condition|)
block|{
comment|// Add placeholder (2nd pass will
comment|// set its counts):
name|termFreqs
operator|.
name|put
argument_list|(
name|termString
argument_list|,
operator|new
name|TermFreqs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Also test seeking the TermsEnum:
for|for
control|(
name|String
name|term
range|:
name|termFreqs
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|term
argument_list|)
argument_list|)
condition|)
block|{
name|boolean
name|noPositions
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|noPositions
condition|)
block|{
name|docs
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|docs
argument_list|,
name|PostingsEnum
operator|.
name|FREQS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docs
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|PostingsEnum
operator|.
name|POSITIONS
argument_list|)
expr_stmt|;
block|}
name|int
name|docFreq
init|=
literal|0
decl_stmt|;
name|long
name|totalTermFreq
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|docs
operator|.
name|nextDoc
argument_list|()
operator|!=
name|PostingsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|docFreq
operator|++
expr_stmt|;
name|totalTermFreq
operator|+=
name|docs
operator|.
name|freq
argument_list|()
expr_stmt|;
name|int
name|limit
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|docs
operator|.
name|freq
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|noPositions
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
name|i
operator|++
control|)
block|{
name|docs
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|isMerge
operator|==
literal|false
operator|&&
name|addOnSecondPass
condition|)
block|{
name|TermFreqs
name|tf
init|=
name|termFreqs
operator|.
name|get
argument_list|(
name|term
argument_list|)
decl_stmt|;
assert|assert
name|tf
operator|!=
literal|null
assert|;
name|tf
operator|.
name|docFreq
operator|+=
name|docFreq
expr_stmt|;
name|tf
operator|.
name|totalTermFreq
operator|+=
name|totalTermFreq
expr_stmt|;
name|sumDocFreq
operator|.
name|addAndGet
argument_list|(
name|docFreq
argument_list|)
expr_stmt|;
name|sumTotalTermFreq
operator|.
name|addAndGet
argument_list|(
name|totalTermFreq
argument_list|)
expr_stmt|;
block|}
comment|//System.out.println("  term=" + term + " docFreq=" + docFreq + " ttDF=" + termToDocFreq.get(term));
name|assertTrue
argument_list|(
name|docFreq
operator|<=
name|termFreqs
operator|.
name|get
argument_list|(
name|term
argument_list|)
operator|.
name|docFreq
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|totalTermFreq
operator|<=
name|termFreqs
operator|.
name|get
argument_list|(
name|term
argument_list|)
operator|.
name|totalTermFreq
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Also test seekCeil
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|10
condition|;
name|iter
operator|++
control|)
block|{
name|BytesRef
name|term
init|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SeekStatus
name|status
init|=
name|termsEnum
operator|.
name|seekCeil
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|SeekStatus
operator|.
name|NOT_FOUND
condition|)
block|{
name|assertTrue
argument_list|(
name|term
operator|.
name|compareTo
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|fieldsConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|FieldsProducer
name|fieldsProducer
parameter_list|(
name|SegmentReadState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|defaultPostingsFormat
operator|.
name|fieldsProducer
argument_list|(
name|state
argument_list|)
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
name|defaultPostingsFormat
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|LineFileDocs
name|docs
init|=
operator|new
name|LineFileDocs
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|bytesToIndex
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
operator|*
literal|1024
decl_stmt|;
name|int
name|bytesIndexed
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|bytesIndexed
operator|<
name|bytesToIndex
condition|)
block|{
name|Document
name|doc
init|=
name|docs
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|bytesIndexed
operator|+=
name|RamUsageTester
operator|.
name|sizeOf
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|Terms
name|terms
init|=
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|r
argument_list|,
literal|"body"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sumDocFreq
operator|.
name|get
argument_list|()
argument_list|,
name|terms
operator|.
name|getSumDocFreq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sumTotalTermFreq
operator|.
name|get
argument_list|()
argument_list|,
name|terms
operator|.
name|getSumTotalTermFreq
argument_list|()
argument_list|)
expr_stmt|;
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|long
name|termCount
init|=
literal|0
decl_stmt|;
name|boolean
name|supportsOrds
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|termsEnum
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|BytesRef
name|term
init|=
name|termsEnum
operator|.
name|term
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|termFreqs
operator|.
name|get
argument_list|(
name|term
operator|.
name|utf8ToString
argument_list|()
argument_list|)
operator|.
name|docFreq
argument_list|,
name|termsEnum
operator|.
name|docFreq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|termFreqs
operator|.
name|get
argument_list|(
name|term
operator|.
name|utf8ToString
argument_list|()
argument_list|)
operator|.
name|totalTermFreq
argument_list|,
name|termsEnum
operator|.
name|totalTermFreq
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|supportsOrds
condition|)
block|{
name|long
name|ord
decl_stmt|;
try|try
block|{
name|ord
operator|=
name|termsEnum
operator|.
name|ord
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|uoe
parameter_list|)
block|{
name|supportsOrds
operator|=
literal|false
expr_stmt|;
name|ord
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|ord
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|termCount
argument_list|,
name|ord
argument_list|)
expr_stmt|;
block|}
block|}
name|termCount
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|termFreqs
operator|.
name|size
argument_list|()
argument_list|,
name|termCount
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addRandomFields
specifier|protected
name|void
name|addRandomFields
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
for|for
control|(
name|IndexOptions
name|opts
range|:
name|IndexOptions
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|opts
operator|==
name|IndexOptions
operator|.
name|NONE
condition|)
block|{
continue|continue;
block|}
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|opts
argument_list|)
expr_stmt|;
name|ft
operator|.
name|freeze
argument_list|()
expr_stmt|;
specifier|final
name|int
name|numFields
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numFields
condition|;
operator|++
name|j
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f_"
operator|+
name|opts
argument_list|,
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ft
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
