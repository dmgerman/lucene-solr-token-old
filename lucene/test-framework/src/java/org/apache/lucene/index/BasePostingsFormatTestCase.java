begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
operator|.
name|ALL
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
operator|.
name|FREQS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
operator|.
name|NONE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
operator|.
name|OFFSETS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
operator|.
name|PAYLOADS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
operator|.
name|POSITIONS
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CannedTokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|asserting
operator|.
name|AssertingCodec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|perfield
operator|.
name|PerFieldPostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
operator|.
name|SeekStatus
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LineFileDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageTester
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_comment
comment|/**  * Abstract class to do basic tests for a postings format.  * NOTE: This test focuses on the postings  * (docs/freqs/positions/payloads/offsets) impl, not the  * terms dict.  The [stretch] goal is for this test to be  * so thorough in testing a new PostingsFormat that if this  * test passes, then all Lucene/Solr tests should also pass.  Ie,  * if there is some bug in a given PostingsFormat that this  * test fails to catch then this test needs to be improved! */
end_comment
begin_comment
comment|// TODO can we make it easy for testing to pair up a "random terms dict impl" with your postings base format...
end_comment
begin_comment
comment|// TODO test when you reuse after skipping a term or two, eg the block reuse case
end_comment
begin_comment
comment|/* TODO   - threads   - assert doc=-1 before any nextDoc   - if a PF passes this test but fails other tests then this     test has a bug!!   - test tricky reuse cases, eg across fields   - verify you get null if you pass needFreq/needOffset but     they weren't indexed */
end_comment
begin_class
DECL|class|BasePostingsFormatTestCase
specifier|public
specifier|abstract
class|class
name|BasePostingsFormatTestCase
extends|extends
name|BaseIndexFileFormatTestCase
block|{
DECL|field|postingsTester
specifier|static
name|RandomPostingsTester
name|postingsTester
decl_stmt|;
comment|// TODO maybe instead of @BeforeClass just make a single test run: build postings& index& test it?
annotation|@
name|BeforeClass
DECL|method|createPostings
specifier|public
specifier|static
name|void
name|createPostings
parameter_list|()
throws|throws
name|IOException
block|{
name|postingsTester
operator|=
operator|new
name|RandomPostingsTester
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|postingsTester
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|testDocsOnly
specifier|public
name|void
name|testDocsOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|postingsTester
operator|.
name|testFull
argument_list|(
name|getCodec
argument_list|()
argument_list|,
name|createTempDir
argument_list|(
literal|"testPostingsFormat.testExact"
argument_list|)
argument_list|,
name|IndexOptions
operator|.
name|DOCS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocsAndFreqs
specifier|public
name|void
name|testDocsAndFreqs
parameter_list|()
throws|throws
name|Exception
block|{
name|postingsTester
operator|.
name|testFull
argument_list|(
name|getCodec
argument_list|()
argument_list|,
name|createTempDir
argument_list|(
literal|"testPostingsFormat.testExact"
argument_list|)
argument_list|,
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocsAndFreqsAndPositions
specifier|public
name|void
name|testDocsAndFreqsAndPositions
parameter_list|()
throws|throws
name|Exception
block|{
name|postingsTester
operator|.
name|testFull
argument_list|(
name|getCodec
argument_list|()
argument_list|,
name|createTempDir
argument_list|(
literal|"testPostingsFormat.testExact"
argument_list|)
argument_list|,
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocsAndFreqsAndPositionsAndPayloads
specifier|public
name|void
name|testDocsAndFreqsAndPositionsAndPayloads
parameter_list|()
throws|throws
name|Exception
block|{
name|postingsTester
operator|.
name|testFull
argument_list|(
name|getCodec
argument_list|()
argument_list|,
name|createTempDir
argument_list|(
literal|"testPostingsFormat.testExact"
argument_list|)
argument_list|,
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocsAndFreqsAndPositionsAndOffsets
specifier|public
name|void
name|testDocsAndFreqsAndPositionsAndOffsets
parameter_list|()
throws|throws
name|Exception
block|{
name|postingsTester
operator|.
name|testFull
argument_list|(
name|getCodec
argument_list|()
argument_list|,
name|createTempDir
argument_list|(
literal|"testPostingsFormat.testExact"
argument_list|)
argument_list|,
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocsAndFreqsAndPositionsAndOffsetsAndPayloads
specifier|public
name|void
name|testDocsAndFreqsAndPositionsAndOffsetsAndPayloads
parameter_list|()
throws|throws
name|Exception
block|{
name|postingsTester
operator|.
name|testFull
argument_list|(
name|getCodec
argument_list|()
argument_list|,
name|createTempDir
argument_list|(
literal|"testPostingsFormat.testExact"
argument_list|)
argument_list|,
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|iters
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
name|Path
name|path
init|=
name|createTempDir
argument_list|(
literal|"testPostingsFormat"
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|newFSDirectory
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|boolean
name|indexPayloads
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
comment|// TODO test thread safety of buildIndex too
name|FieldsProducer
name|fieldsProducer
init|=
name|postingsTester
operator|.
name|buildIndex
argument_list|(
name|getCodec
argument_list|()
argument_list|,
name|dir
argument_list|,
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|,
name|indexPayloads
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|postingsTester
operator|.
name|testFields
argument_list|(
name|fieldsProducer
argument_list|)
expr_stmt|;
comment|// NOTE: you can also test "weaker" index options than
comment|// you indexed with:
name|postingsTester
operator|.
name|testTerms
argument_list|(
name|fieldsProducer
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|RandomPostingsTester
operator|.
name|Option
operator|.
name|class
argument_list|)
argument_list|,
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|,
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fieldsProducer
operator|.
name|close
argument_list|()
expr_stmt|;
name|fieldsProducer
operator|=
literal|null
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|rm
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isPostingsEnumReuseImplemented
specifier|protected
name|boolean
name|isPostingsEnumReuseImplemented
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|testPostingsEnumReuse
specifier|public
name|void
name|testPostingsEnumReuse
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
name|createTempDir
argument_list|(
literal|"testPostingsEnumReuse"
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|newFSDirectory
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|FieldsProducer
name|fieldsProducer
init|=
name|postingsTester
operator|.
name|buildIndex
argument_list|(
name|getCodec
argument_list|()
argument_list|,
name|dir
argument_list|,
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|postingsTester
operator|.
name|allTerms
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|RandomPostingsTester
operator|.
name|FieldAndTerm
name|fieldAndTerm
init|=
name|postingsTester
operator|.
name|allTerms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Terms
name|terms
init|=
name|fieldsProducer
operator|.
name|terms
argument_list|(
name|fieldAndTerm
operator|.
name|field
argument_list|)
decl_stmt|;
name|TermsEnum
name|te
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|te
operator|.
name|seekExact
argument_list|(
name|fieldAndTerm
operator|.
name|term
argument_list|)
expr_stmt|;
name|checkReuse
argument_list|(
name|te
argument_list|,
name|PostingsEnum
operator|.
name|FREQS
argument_list|,
name|PostingsEnum
operator|.
name|ALL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPostingsEnumReuseImplemented
argument_list|()
condition|)
name|checkReuse
argument_list|(
name|te
argument_list|,
name|PostingsEnum
operator|.
name|ALL
argument_list|,
name|PostingsEnum
operator|.
name|ALL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fieldsProducer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|rm
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
DECL|method|checkReuse
specifier|protected
specifier|static
name|void
name|checkReuse
parameter_list|(
name|TermsEnum
name|termsEnum
parameter_list|,
name|int
name|firstFlags
parameter_list|,
name|int
name|secondFlags
parameter_list|,
name|boolean
name|shouldReuse
parameter_list|)
throws|throws
name|IOException
block|{
name|PostingsEnum
name|postings1
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|firstFlags
argument_list|)
decl_stmt|;
name|PostingsEnum
name|postings2
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|postings1
argument_list|,
name|secondFlags
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldReuse
condition|)
name|assertSame
argument_list|(
literal|"Expected PostingsEnum "
operator|+
name|postings1
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" to be reused"
argument_list|,
name|postings1
argument_list|,
name|postings2
argument_list|)
expr_stmt|;
else|else
name|assertNotSame
argument_list|(
literal|"Expected PostingsEnum "
operator|+
name|postings1
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" to not be reused"
argument_list|,
name|postings1
argument_list|,
name|postings2
argument_list|)
expr_stmt|;
block|}
DECL|method|testJustEmptyField
specifier|public
name|void
name|testJustEmptyField
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|""
argument_list|,
literal|"something"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|LeafReader
name|ar
init|=
name|getOnlySegmentReader
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|Fields
name|fields
init|=
name|ar
operator|.
name|fields
argument_list|()
decl_stmt|;
name|int
name|fieldCount
init|=
name|fields
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// -1 is allowed, if the codec doesn't implement fields.size():
name|assertTrue
argument_list|(
name|fieldCount
operator|==
literal|1
operator|||
name|fieldCount
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|ar
operator|.
name|terms
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|terms
argument_list|)
expr_stmt|;
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|termsEnum
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"something"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|termsEnum
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testEmptyFieldAndEmptyTerm
specifier|public
name|void
name|testEmptyFieldAndEmptyTerm
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|LeafReader
name|ar
init|=
name|getOnlySegmentReader
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|Fields
name|fields
init|=
name|ar
operator|.
name|fields
argument_list|()
decl_stmt|;
name|int
name|fieldCount
init|=
name|fields
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// -1 is allowed, if the codec doesn't implement fields.size():
name|assertTrue
argument_list|(
name|fieldCount
operator|==
literal|1
operator|||
name|fieldCount
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|ar
operator|.
name|terms
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|terms
argument_list|)
expr_stmt|;
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|termsEnum
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|termsEnum
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDidntWantFreqsButAskedAnyway
specifier|public
name|void
name|testDidntWantFreqsButAskedAnyway
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|LeafReader
name|ar
init|=
name|getOnlySegmentReader
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|TermsEnum
name|termsEnum
init|=
name|ar
operator|.
name|terms
argument_list|(
literal|"field"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PostingsEnum
name|docsEnum
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|PostingsEnum
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testAskForPositionsWhenNotThere
specifier|public
name|void
name|testAskForPositionsWhenNotThere
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|LeafReader
name|ar
init|=
name|getOnlySegmentReader
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|TermsEnum
name|termsEnum
init|=
name|ar
operator|.
name|terms
argument_list|(
literal|"field"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PostingsEnum
name|docsEnum
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|PostingsEnum
operator|.
name|POSITIONS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// tests that ghost fields still work
comment|// TODO: can this be improved?
DECL|method|testGhosts
specifier|public
name|void
name|testGhosts
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"ghostField"
argument_list|,
literal|"something"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|iw
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iw
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"ghostField"
argument_list|,
literal|"something"
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete the only term for the field
name|iw
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|DirectoryReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|LeafReader
name|ar
init|=
name|getOnlySegmentReader
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|Fields
name|fields
init|=
name|ar
operator|.
name|fields
argument_list|()
decl_stmt|;
comment|// Ghost busting terms dict impls will have
comment|// fields.size() == 0; all others must be == 1:
name|assertTrue
argument_list|(
name|fields
operator|.
name|size
argument_list|()
operator|<=
literal|1
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
literal|"ghostField"
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|BytesRef
name|term
init|=
name|termsEnum
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|!=
literal|null
condition|)
block|{
name|PostingsEnum
name|postingsEnum
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|postingsEnum
operator|.
name|nextDoc
argument_list|()
operator|==
name|PostingsEnum
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
block|}
block|}
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|TermFreqs
specifier|private
specifier|static
class|class
name|TermFreqs
block|{
DECL|field|totalTermFreq
name|long
name|totalTermFreq
decl_stmt|;
DECL|field|docFreq
name|int
name|docFreq
decl_stmt|;
block|}
empty_stmt|;
comment|// LUCENE-5123: make sure we can visit postings twice
comment|// during flush/merge
DECL|method|testInvertedWrite
specifier|public
name|void
name|testInvertedWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|MockAnalyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|analyzer
operator|.
name|setMaxTokenLength
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|IndexWriter
operator|.
name|MAX_TERM_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
name|analyzer
argument_list|)
decl_stmt|;
comment|// Must be concurrent because thread(s) can be merging
comment|// while up to one thread flushes, and each of those
comment|// threads iterates over the map while the flushing
comment|// thread might be adding to it:
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TermFreqs
argument_list|>
name|termFreqs
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|sumDocFreq
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|sumTotalTermFreq
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
comment|// TODO: would be better to use / delegate to the current
comment|// Codec returned by getCodec()
name|iwc
operator|.
name|setCodec
argument_list|(
operator|new
name|AssertingCodec
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PostingsFormat
name|getPostingsFormatForField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|PostingsFormat
name|p
init|=
name|getCodec
argument_list|()
operator|.
name|postingsFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|instanceof
name|PerFieldPostingsFormat
condition|)
block|{
name|p
operator|=
operator|(
operator|(
name|PerFieldPostingsFormat
operator|)
name|p
operator|)
operator|.
name|getPostingsFormatForField
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
specifier|final
name|PostingsFormat
name|defaultPostingsFormat
init|=
name|p
decl_stmt|;
specifier|final
name|Thread
name|mainThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"body"
argument_list|)
condition|)
block|{
comment|// A PF that counts up some stats and then in
comment|// the end we verify the stats match what the
comment|// final IndexReader says, just to exercise the
comment|// new freedom of iterating the postings more
comment|// than once at flush/merge:
return|return
operator|new
name|PostingsFormat
argument_list|(
name|defaultPostingsFormat
operator|.
name|getName
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|FieldsConsumer
name|fieldsConsumer
parameter_list|(
specifier|final
name|SegmentWriteState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FieldsConsumer
name|fieldsConsumer
init|=
name|defaultPostingsFormat
operator|.
name|fieldsConsumer
argument_list|(
name|state
argument_list|)
decl_stmt|;
return|return
operator|new
name|FieldsConsumer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Fields
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
name|fieldsConsumer
operator|.
name|write
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|boolean
name|isMerge
init|=
name|state
operator|.
name|context
operator|.
name|context
operator|==
name|IOContext
operator|.
name|Context
operator|.
name|MERGE
decl_stmt|;
comment|// We only use one thread for flushing
comment|// in this test:
assert|assert
name|isMerge
operator|||
name|Thread
operator|.
name|currentThread
argument_list|()
operator|==
name|mainThread
assert|;
comment|// We iterate the provided TermsEnum
comment|// twice, so we excercise this new freedom
comment|// with the inverted API; if
comment|// addOnSecondPass is true, we add up
comment|// term stats on the 2nd iteration:
name|boolean
name|addOnSecondPass
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
comment|//System.out.println("write isMerge=" + isMerge + " 2ndPass=" + addOnSecondPass);
comment|// Gather our own stats:
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
literal|"body"
argument_list|)
decl_stmt|;
assert|assert
name|terms
operator|!=
literal|null
assert|;
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|PostingsEnum
name|docs
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|termsEnum
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|BytesRef
name|term
init|=
name|termsEnum
operator|.
name|term
argument_list|()
decl_stmt|;
comment|// TODO: also sometimes ask for payloads/offsets?
name|boolean
name|noPositions
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|noPositions
condition|)
block|{
name|docs
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docs
argument_list|,
name|PostingsEnum
operator|.
name|FREQS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docs
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|PostingsEnum
operator|.
name|POSITIONS
argument_list|)
expr_stmt|;
block|}
name|int
name|docFreq
init|=
literal|0
decl_stmt|;
name|long
name|totalTermFreq
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|docs
operator|.
name|nextDoc
argument_list|()
operator|!=
name|PostingsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|docFreq
operator|++
expr_stmt|;
name|totalTermFreq
operator|+=
name|docs
operator|.
name|freq
argument_list|()
expr_stmt|;
name|int
name|limit
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|docs
operator|.
name|freq
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|noPositions
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
name|i
operator|++
control|)
block|{
name|docs
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|String
name|termString
init|=
name|term
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
comment|// During merge we should only see terms
comment|// we had already seen during a
comment|// previous flush:
name|assertTrue
argument_list|(
name|isMerge
operator|==
literal|false
operator|||
name|termFreqs
operator|.
name|containsKey
argument_list|(
name|termString
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isMerge
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|addOnSecondPass
operator|==
literal|false
condition|)
block|{
name|TermFreqs
name|tf
init|=
name|termFreqs
operator|.
name|get
argument_list|(
name|termString
argument_list|)
decl_stmt|;
if|if
condition|(
name|tf
operator|==
literal|null
condition|)
block|{
name|tf
operator|=
operator|new
name|TermFreqs
argument_list|()
expr_stmt|;
name|termFreqs
operator|.
name|put
argument_list|(
name|termString
argument_list|,
name|tf
argument_list|)
expr_stmt|;
block|}
name|tf
operator|.
name|docFreq
operator|+=
name|docFreq
expr_stmt|;
name|tf
operator|.
name|totalTermFreq
operator|+=
name|totalTermFreq
expr_stmt|;
name|sumDocFreq
operator|.
name|addAndGet
argument_list|(
name|docFreq
argument_list|)
expr_stmt|;
name|sumTotalTermFreq
operator|.
name|addAndGet
argument_list|(
name|totalTermFreq
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|termFreqs
operator|.
name|containsKey
argument_list|(
name|termString
argument_list|)
operator|==
literal|false
condition|)
block|{
comment|// Add placeholder (2nd pass will
comment|// set its counts):
name|termFreqs
operator|.
name|put
argument_list|(
name|termString
argument_list|,
operator|new
name|TermFreqs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Also test seeking the TermsEnum:
for|for
control|(
name|String
name|term
range|:
name|termFreqs
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|term
argument_list|)
argument_list|)
condition|)
block|{
comment|// TODO: also sometimes ask for payloads/offsets?
name|boolean
name|noPositions
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|noPositions
condition|)
block|{
name|docs
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docs
argument_list|,
name|PostingsEnum
operator|.
name|FREQS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docs
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|PostingsEnum
operator|.
name|POSITIONS
argument_list|)
expr_stmt|;
block|}
name|int
name|docFreq
init|=
literal|0
decl_stmt|;
name|long
name|totalTermFreq
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|docs
operator|.
name|nextDoc
argument_list|()
operator|!=
name|PostingsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|docFreq
operator|++
expr_stmt|;
name|totalTermFreq
operator|+=
name|docs
operator|.
name|freq
argument_list|()
expr_stmt|;
name|int
name|limit
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|docs
operator|.
name|freq
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|noPositions
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
name|i
operator|++
control|)
block|{
name|docs
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|isMerge
operator|==
literal|false
operator|&&
name|addOnSecondPass
condition|)
block|{
name|TermFreqs
name|tf
init|=
name|termFreqs
operator|.
name|get
argument_list|(
name|term
argument_list|)
decl_stmt|;
assert|assert
name|tf
operator|!=
literal|null
assert|;
name|tf
operator|.
name|docFreq
operator|+=
name|docFreq
expr_stmt|;
name|tf
operator|.
name|totalTermFreq
operator|+=
name|totalTermFreq
expr_stmt|;
name|sumDocFreq
operator|.
name|addAndGet
argument_list|(
name|docFreq
argument_list|)
expr_stmt|;
name|sumTotalTermFreq
operator|.
name|addAndGet
argument_list|(
name|totalTermFreq
argument_list|)
expr_stmt|;
block|}
comment|//System.out.println("  term=" + term + " docFreq=" + docFreq + " ttDF=" + termToDocFreq.get(term));
name|assertTrue
argument_list|(
name|docFreq
operator|<=
name|termFreqs
operator|.
name|get
argument_list|(
name|term
argument_list|)
operator|.
name|docFreq
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|totalTermFreq
operator|<=
name|termFreqs
operator|.
name|get
argument_list|(
name|term
argument_list|)
operator|.
name|totalTermFreq
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Also test seekCeil
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|10
condition|;
name|iter
operator|++
control|)
block|{
name|BytesRef
name|term
init|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SeekStatus
name|status
init|=
name|termsEnum
operator|.
name|seekCeil
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|SeekStatus
operator|.
name|NOT_FOUND
condition|)
block|{
name|assertTrue
argument_list|(
name|term
operator|.
name|compareTo
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|fieldsConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|FieldsProducer
name|fieldsProducer
parameter_list|(
name|SegmentReadState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|defaultPostingsFormat
operator|.
name|fieldsProducer
argument_list|(
name|state
argument_list|)
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
name|defaultPostingsFormat
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|LineFileDocs
name|docs
init|=
operator|new
name|LineFileDocs
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|bytesToIndex
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
operator|*
literal|1024
decl_stmt|;
name|int
name|bytesIndexed
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|bytesIndexed
operator|<
name|bytesToIndex
condition|)
block|{
name|Document
name|doc
init|=
name|docs
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|bytesIndexed
operator|+=
name|RamUsageTester
operator|.
name|sizeOf
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|Terms
name|terms
init|=
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|r
argument_list|,
literal|"body"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sumDocFreq
operator|.
name|get
argument_list|()
argument_list|,
name|terms
operator|.
name|getSumDocFreq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sumTotalTermFreq
operator|.
name|get
argument_list|()
argument_list|,
name|terms
operator|.
name|getSumTotalTermFreq
argument_list|()
argument_list|)
expr_stmt|;
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|long
name|termCount
init|=
literal|0
decl_stmt|;
name|boolean
name|supportsOrds
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|termsEnum
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|BytesRef
name|term
init|=
name|termsEnum
operator|.
name|term
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|termFreqs
operator|.
name|get
argument_list|(
name|term
operator|.
name|utf8ToString
argument_list|()
argument_list|)
operator|.
name|docFreq
argument_list|,
name|termsEnum
operator|.
name|docFreq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|termFreqs
operator|.
name|get
argument_list|(
name|term
operator|.
name|utf8ToString
argument_list|()
argument_list|)
operator|.
name|totalTermFreq
argument_list|,
name|termsEnum
operator|.
name|totalTermFreq
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|supportsOrds
condition|)
block|{
name|long
name|ord
decl_stmt|;
try|try
block|{
name|ord
operator|=
name|termsEnum
operator|.
name|ord
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|uoe
parameter_list|)
block|{
name|supportsOrds
operator|=
literal|false
expr_stmt|;
name|ord
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|ord
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|termCount
argument_list|,
name|ord
argument_list|)
expr_stmt|;
block|}
block|}
name|termCount
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|termFreqs
operator|.
name|size
argument_list|()
argument_list|,
name|termCount
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|assertReused
specifier|protected
name|void
name|assertReused
parameter_list|(
name|String
name|field
parameter_list|,
name|PostingsEnum
name|p1
parameter_list|,
name|PostingsEnum
name|p2
parameter_list|)
block|{
comment|// if its not DirectPF, we should always reuse. This one has trouble.
if|if
condition|(
operator|!
literal|"Direct"
operator|.
name|equals
argument_list|(
name|TestUtil
operator|.
name|getPostingsFormat
argument_list|(
name|field
argument_list|)
argument_list|)
condition|)
block|{
name|assertSame
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPostingsEnumDocsOnly
specifier|public
name|void
name|testPostingsEnumDocsOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|iw
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// sugar method (FREQS)
name|PostingsEnum
name|postings
init|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|postings
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|postings
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postings
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postings
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|postings
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// termsenum reuse (FREQS)
name|TermsEnum
name|termsEnum
init|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|terms
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|termsEnum
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|PostingsEnum
name|postings2
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|postings
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|postings2
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|postings
argument_list|,
name|postings2
argument_list|)
expr_stmt|;
comment|// and it had better work
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|postings
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postings
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postings
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|postings
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// asking for any flags: ok
for|for
control|(
name|int
name|flag
range|:
operator|new
name|int
index|[]
block|{
name|NONE
block|,
name|FREQS
block|,
name|POSITIONS
block|,
name|PAYLOADS
block|,
name|OFFSETS
block|,
name|ALL
block|}
control|)
block|{
name|postings
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|flag
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|postings
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postings
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postings
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|postings
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// reuse that too
name|postings2
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|postings
argument_list|,
name|flag
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|postings2
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|postings
argument_list|,
name|postings2
argument_list|)
expr_stmt|;
comment|// and it had better work
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|postings2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postings2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postings2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|postings2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testPostingsEnumFreqs
specifier|public
name|void
name|testPostingsEnumFreqs
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
operator|new
name|TokenStreamComponents
argument_list|(
operator|new
name|MockTokenizer
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"foo"
argument_list|,
literal|"bar bar"
argument_list|,
name|ft
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|iw
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// sugar method (FREQS)
name|PostingsEnum
name|postings
init|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|postings
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|postings
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postings
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|postings
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|postings
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// termsenum reuse (FREQS)
name|TermsEnum
name|termsEnum
init|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|terms
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|termsEnum
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|PostingsEnum
name|postings2
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|postings
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|postings2
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|postings
argument_list|,
name|postings2
argument_list|)
expr_stmt|;
comment|// and it had better work
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|postings2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postings2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|postings2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|postings2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// asking for docs only: ok
name|PostingsEnum
name|docsOnly
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|PostingsEnum
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsOnly
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsOnly
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsOnly
operator|.
name|freq
argument_list|()
operator|==
literal|1
operator|||
name|docsOnly
operator|.
name|freq
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsOnly
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// reuse that too
name|PostingsEnum
name|docsOnly2
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docsOnly
argument_list|,
name|PostingsEnum
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|docsOnly2
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|docsOnly
argument_list|,
name|docsOnly2
argument_list|)
expr_stmt|;
comment|// and it had better work
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsOnly2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsOnly2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsOnly
operator|.
name|freq
argument_list|()
operator|==
literal|1
operator|||
name|docsOnly
operator|.
name|freq
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsOnly2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// asking for any flags: ok
for|for
control|(
name|int
name|flag
range|:
operator|new
name|int
index|[]
block|{
name|NONE
block|,
name|FREQS
block|,
name|POSITIONS
block|,
name|PAYLOADS
block|,
name|OFFSETS
block|,
name|ALL
block|}
control|)
block|{
name|postings
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|flag
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|postings
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postings
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flag
operator|!=
name|NONE
condition|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|postings
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|postings
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// reuse that too
name|postings2
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|postings
argument_list|,
name|flag
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|postings2
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|postings
argument_list|,
name|postings2
argument_list|)
expr_stmt|;
comment|// and it had better work
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|postings2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postings2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flag
operator|!=
name|NONE
condition|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|postings2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|postings2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testPostingsEnumPositions
specifier|public
name|void
name|testPostingsEnumPositions
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
operator|new
name|TokenStreamComponents
argument_list|(
operator|new
name|MockTokenizer
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"foo"
argument_list|,
literal|"bar bar"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|iw
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// sugar method (FREQS)
name|PostingsEnum
name|postings
init|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|postings
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|postings
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postings
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|postings
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|postings
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// termsenum reuse (FREQS)
name|TermsEnum
name|termsEnum
init|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|terms
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|termsEnum
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|PostingsEnum
name|postings2
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|postings
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|postings2
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|postings
argument_list|,
name|postings2
argument_list|)
expr_stmt|;
comment|// and it had better work
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|postings2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postings2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|postings2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|postings2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// asking for docs only: ok
name|PostingsEnum
name|docsOnly
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|PostingsEnum
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsOnly
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsOnly
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsOnly
operator|.
name|freq
argument_list|()
operator|==
literal|1
operator|||
name|docsOnly
operator|.
name|freq
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsOnly
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// reuse that too
name|PostingsEnum
name|docsOnly2
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docsOnly
argument_list|,
name|PostingsEnum
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|docsOnly2
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|docsOnly
argument_list|,
name|docsOnly2
argument_list|)
expr_stmt|;
comment|// and it had better work
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsOnly2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsOnly2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsOnly2
operator|.
name|freq
argument_list|()
operator|==
literal|1
operator|||
name|docsOnly2
operator|.
name|freq
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsOnly2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// asking for positions, ok
name|PostingsEnum
name|docsAndPositionsEnum
init|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|postings
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|PostingsEnum
operator|.
name|POSITIONS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// now reuse the positions
name|PostingsEnum
name|docsAndPositionsEnum2
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docsAndPositionsEnum
argument_list|,
name|PostingsEnum
operator|.
name|POSITIONS
argument_list|)
decl_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|docsAndPositionsEnum
argument_list|,
name|docsAndPositionsEnum2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// payloads, offsets, etc don't cause an error if they aren't there
name|docsAndPositionsEnum
operator|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|postings
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|PostingsEnum
operator|.
name|PAYLOADS
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|docsAndPositionsEnum
argument_list|)
expr_stmt|;
comment|// but make sure they work
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// reuse
name|docsAndPositionsEnum2
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docsAndPositionsEnum
argument_list|,
name|PostingsEnum
operator|.
name|PAYLOADS
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|docsAndPositionsEnum
argument_list|,
name|docsAndPositionsEnum2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|docsAndPositionsEnum
operator|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|postings
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|PostingsEnum
operator|.
name|OFFSETS
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|docsAndPositionsEnum
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// reuse
name|docsAndPositionsEnum2
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docsAndPositionsEnum
argument_list|,
name|PostingsEnum
operator|.
name|OFFSETS
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|docsAndPositionsEnum
argument_list|,
name|docsAndPositionsEnum2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|docsAndPositionsEnum
operator|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|postings
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|PostingsEnum
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|docsAndPositionsEnum
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|docsAndPositionsEnum2
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docsAndPositionsEnum
argument_list|,
name|PostingsEnum
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|docsAndPositionsEnum
argument_list|,
name|docsAndPositionsEnum2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testPostingsEnumOffsets
specifier|public
name|void
name|testPostingsEnumOffsets
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
operator|new
name|TokenStreamComponents
argument_list|(
operator|new
name|MockTokenizer
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"foo"
argument_list|,
literal|"bar bar"
argument_list|,
name|ft
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|iw
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// sugar method (FREQS)
name|PostingsEnum
name|postings
init|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|postings
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|postings
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postings
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|postings
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|postings
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// termsenum reuse (FREQS)
name|TermsEnum
name|termsEnum
init|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|terms
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|termsEnum
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|PostingsEnum
name|postings2
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|postings
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|postings2
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|postings
argument_list|,
name|postings2
argument_list|)
expr_stmt|;
comment|// and it had better work
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|postings2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postings2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|postings2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|postings2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// asking for docs only: ok
name|PostingsEnum
name|docsOnly
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|PostingsEnum
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsOnly
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsOnly
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsOnly
operator|.
name|freq
argument_list|()
operator|==
literal|1
operator|||
name|docsOnly
operator|.
name|freq
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsOnly
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// reuse that too
name|PostingsEnum
name|docsOnly2
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docsOnly
argument_list|,
name|PostingsEnum
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|docsOnly2
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|docsOnly
argument_list|,
name|docsOnly2
argument_list|)
expr_stmt|;
comment|// and it had better work
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsOnly2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsOnly2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsOnly2
operator|.
name|freq
argument_list|()
operator|==
literal|1
operator|||
name|docsOnly2
operator|.
name|freq
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsOnly2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// asking for positions, ok
name|PostingsEnum
name|docsAndPositionsEnum
init|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|postings
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|PostingsEnum
operator|.
name|POSITIONS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
operator|==
literal|7
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// now reuse the positions
name|PostingsEnum
name|docsAndPositionsEnum2
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docsAndPositionsEnum
argument_list|,
name|PostingsEnum
operator|.
name|POSITIONS
argument_list|)
decl_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|docsAndPositionsEnum
argument_list|,
name|docsAndPositionsEnum2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
operator|==
literal|7
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// payloads don't cause an error if they aren't there
name|docsAndPositionsEnum
operator|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|postings
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|PostingsEnum
operator|.
name|PAYLOADS
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|docsAndPositionsEnum
argument_list|)
expr_stmt|;
comment|// but make sure they work
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
operator|==
literal|7
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// reuse
name|docsAndPositionsEnum2
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docsAndPositionsEnum
argument_list|,
name|PostingsEnum
operator|.
name|PAYLOADS
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|docsAndPositionsEnum
argument_list|,
name|docsAndPositionsEnum2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
operator|==
literal|7
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|docsAndPositionsEnum
operator|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|postings
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|PostingsEnum
operator|.
name|OFFSETS
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|docsAndPositionsEnum
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// reuse
name|docsAndPositionsEnum2
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docsAndPositionsEnum
argument_list|,
name|PostingsEnum
operator|.
name|OFFSETS
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|docsAndPositionsEnum
argument_list|,
name|docsAndPositionsEnum2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|docsAndPositionsEnum
operator|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|postings
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|PostingsEnum
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|docsAndPositionsEnum
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|docsAndPositionsEnum2
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docsAndPositionsEnum
argument_list|,
name|PostingsEnum
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|docsAndPositionsEnum
argument_list|,
name|docsAndPositionsEnum2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testPostingsEnumPayloads
specifier|public
name|void
name|testPostingsEnumPayloads
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Token
name|token1
init|=
operator|new
name|Token
argument_list|(
literal|"bar"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|token1
operator|.
name|setPayload
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"pay1"
argument_list|)
argument_list|)
expr_stmt|;
name|Token
name|token2
init|=
operator|new
name|Token
argument_list|(
literal|"bar"
argument_list|,
literal|4
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|token2
operator|.
name|setPayload
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"pay2"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|CannedTokenStream
argument_list|(
name|token1
argument_list|,
name|token2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|iw
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// sugar method (FREQS)
name|PostingsEnum
name|postings
init|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|postings
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|postings
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postings
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|postings
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|postings
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// termsenum reuse (FREQS)
name|TermsEnum
name|termsEnum
init|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|terms
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|termsEnum
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|PostingsEnum
name|postings2
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|postings
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|postings2
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|postings
argument_list|,
name|postings2
argument_list|)
expr_stmt|;
comment|// and it had better work
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|postings2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postings2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|postings2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|postings2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// asking for docs only: ok
name|PostingsEnum
name|docsOnly
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|PostingsEnum
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsOnly
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsOnly
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsOnly
operator|.
name|freq
argument_list|()
operator|==
literal|1
operator|||
name|docsOnly
operator|.
name|freq
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsOnly
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// reuse that too
name|PostingsEnum
name|docsOnly2
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docsOnly
argument_list|,
name|PostingsEnum
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|docsOnly2
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|docsOnly
argument_list|,
name|docsOnly2
argument_list|)
expr_stmt|;
comment|// and it had better work
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsOnly2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsOnly2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsOnly2
operator|.
name|freq
argument_list|()
operator|==
literal|1
operator|||
name|docsOnly2
operator|.
name|freq
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsOnly2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// asking for positions, ok
name|PostingsEnum
name|docsAndPositionsEnum
init|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|postings
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|PostingsEnum
operator|.
name|POSITIONS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
operator|==
literal|null
operator|||
operator|new
name|BytesRef
argument_list|(
literal|"pay1"
argument_list|)
operator|.
name|equals
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
operator|==
literal|null
operator|||
operator|new
name|BytesRef
argument_list|(
literal|"pay2"
argument_list|)
operator|.
name|equals
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// now reuse the positions
name|PostingsEnum
name|docsAndPositionsEnum2
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docsAndPositionsEnum
argument_list|,
name|PostingsEnum
operator|.
name|POSITIONS
argument_list|)
decl_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|docsAndPositionsEnum
argument_list|,
name|docsAndPositionsEnum2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
operator|==
literal|null
operator|||
operator|new
name|BytesRef
argument_list|(
literal|"pay1"
argument_list|)
operator|.
name|equals
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
operator|==
literal|null
operator|||
operator|new
name|BytesRef
argument_list|(
literal|"pay2"
argument_list|)
operator|.
name|equals
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// payloads
name|docsAndPositionsEnum
operator|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|postings
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|PostingsEnum
operator|.
name|PAYLOADS
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|docsAndPositionsEnum
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"pay1"
argument_list|)
argument_list|,
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"pay2"
argument_list|)
argument_list|,
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// reuse
name|docsAndPositionsEnum2
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docsAndPositionsEnum
argument_list|,
name|PostingsEnum
operator|.
name|PAYLOADS
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|docsAndPositionsEnum
argument_list|,
name|docsAndPositionsEnum2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"pay1"
argument_list|)
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"pay2"
argument_list|)
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|docsAndPositionsEnum
operator|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|postings
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|PostingsEnum
operator|.
name|OFFSETS
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|docsAndPositionsEnum
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
operator|==
literal|null
operator|||
operator|new
name|BytesRef
argument_list|(
literal|"pay1"
argument_list|)
operator|.
name|equals
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
operator|==
literal|null
operator|||
operator|new
name|BytesRef
argument_list|(
literal|"pay2"
argument_list|)
operator|.
name|equals
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// reuse
name|docsAndPositionsEnum2
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docsAndPositionsEnum
argument_list|,
name|PostingsEnum
operator|.
name|OFFSETS
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|docsAndPositionsEnum
argument_list|,
name|docsAndPositionsEnum2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
operator|==
literal|null
operator|||
operator|new
name|BytesRef
argument_list|(
literal|"pay1"
argument_list|)
operator|.
name|equals
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
operator|==
literal|null
operator|||
operator|new
name|BytesRef
argument_list|(
literal|"pay2"
argument_list|)
operator|.
name|equals
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|docsAndPositionsEnum
operator|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|postings
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|PostingsEnum
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|docsAndPositionsEnum
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"pay1"
argument_list|)
argument_list|,
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"pay2"
argument_list|)
argument_list|,
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|docsAndPositionsEnum2
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docsAndPositionsEnum
argument_list|,
name|PostingsEnum
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|docsAndPositionsEnum
argument_list|,
name|docsAndPositionsEnum2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"pay1"
argument_list|)
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"pay2"
argument_list|)
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testPostingsEnumAll
specifier|public
name|void
name|testPostingsEnumAll
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Token
name|token1
init|=
operator|new
name|Token
argument_list|(
literal|"bar"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|token1
operator|.
name|setPayload
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"pay1"
argument_list|)
argument_list|)
expr_stmt|;
name|Token
name|token2
init|=
operator|new
name|Token
argument_list|(
literal|"bar"
argument_list|,
literal|4
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|token2
operator|.
name|setPayload
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"pay2"
argument_list|)
argument_list|)
expr_stmt|;
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|CannedTokenStream
argument_list|(
name|token1
argument_list|,
name|token2
argument_list|)
argument_list|,
name|ft
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|iw
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// sugar method (FREQS)
name|PostingsEnum
name|postings
init|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|postings
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|postings
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postings
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|postings
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|postings
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// termsenum reuse (FREQS)
name|TermsEnum
name|termsEnum
init|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|terms
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|termsEnum
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|PostingsEnum
name|postings2
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|postings
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|postings2
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|postings
argument_list|,
name|postings2
argument_list|)
expr_stmt|;
comment|// and it had better work
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|postings2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postings2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|postings2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|postings2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// asking for docs only: ok
name|PostingsEnum
name|docsOnly
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|PostingsEnum
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsOnly
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsOnly
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsOnly
operator|.
name|freq
argument_list|()
operator|==
literal|1
operator|||
name|docsOnly
operator|.
name|freq
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsOnly
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// reuse that too
name|PostingsEnum
name|docsOnly2
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docsOnly
argument_list|,
name|PostingsEnum
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|docsOnly2
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|docsOnly
argument_list|,
name|docsOnly2
argument_list|)
expr_stmt|;
comment|// and it had better work
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsOnly2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsOnly2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsOnly2
operator|.
name|freq
argument_list|()
operator|==
literal|1
operator|||
name|docsOnly2
operator|.
name|freq
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsOnly2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// asking for positions, ok
name|PostingsEnum
name|docsAndPositionsEnum
init|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|postings
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|PostingsEnum
operator|.
name|POSITIONS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
operator|==
literal|null
operator|||
operator|new
name|BytesRef
argument_list|(
literal|"pay1"
argument_list|)
operator|.
name|equals
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
operator|==
literal|7
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
operator|==
literal|null
operator|||
operator|new
name|BytesRef
argument_list|(
literal|"pay2"
argument_list|)
operator|.
name|equals
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// now reuse the positions
name|PostingsEnum
name|docsAndPositionsEnum2
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docsAndPositionsEnum
argument_list|,
name|PostingsEnum
operator|.
name|POSITIONS
argument_list|)
decl_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|docsAndPositionsEnum
argument_list|,
name|docsAndPositionsEnum2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
operator|==
literal|null
operator|||
operator|new
name|BytesRef
argument_list|(
literal|"pay1"
argument_list|)
operator|.
name|equals
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
operator|==
literal|7
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
operator|==
literal|null
operator|||
operator|new
name|BytesRef
argument_list|(
literal|"pay2"
argument_list|)
operator|.
name|equals
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// payloads
name|docsAndPositionsEnum
operator|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|postings
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|PostingsEnum
operator|.
name|PAYLOADS
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|docsAndPositionsEnum
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"pay1"
argument_list|)
argument_list|,
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
operator|==
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"pay2"
argument_list|)
argument_list|,
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// reuse
name|docsAndPositionsEnum2
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docsAndPositionsEnum
argument_list|,
name|PostingsEnum
operator|.
name|PAYLOADS
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|docsAndPositionsEnum
argument_list|,
name|docsAndPositionsEnum2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"pay1"
argument_list|)
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
operator|==
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"pay2"
argument_list|)
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|docsAndPositionsEnum
operator|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|postings
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|PostingsEnum
operator|.
name|OFFSETS
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|docsAndPositionsEnum
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
operator|==
literal|null
operator|||
operator|new
name|BytesRef
argument_list|(
literal|"pay1"
argument_list|)
operator|.
name|equals
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
operator|==
literal|null
operator|||
operator|new
name|BytesRef
argument_list|(
literal|"pay2"
argument_list|)
operator|.
name|equals
argument_list|(
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// reuse
name|docsAndPositionsEnum2
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docsAndPositionsEnum
argument_list|,
name|PostingsEnum
operator|.
name|OFFSETS
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|docsAndPositionsEnum
argument_list|,
name|docsAndPositionsEnum2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
operator|==
literal|null
operator|||
operator|new
name|BytesRef
argument_list|(
literal|"pay1"
argument_list|)
operator|.
name|equals
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't define what it is, but if its something else, we should look into it?
name|assertTrue
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
operator|==
literal|null
operator|||
operator|new
name|BytesRef
argument_list|(
literal|"pay2"
argument_list|)
operator|.
name|equals
argument_list|(
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|docsAndPositionsEnum
operator|=
name|getOnlySegmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|postings
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|PostingsEnum
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|docsAndPositionsEnum
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"pay1"
argument_list|)
argument_list|,
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"pay2"
argument_list|)
argument_list|,
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|docsAndPositionsEnum2
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docsAndPositionsEnum
argument_list|,
name|PostingsEnum
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|assertReused
argument_list|(
literal|"foo"
argument_list|,
name|docsAndPositionsEnum
argument_list|,
name|docsAndPositionsEnum2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"pay1"
argument_list|)
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"pay2"
argument_list|)
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsAndPositionsEnum2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addRandomFields
specifier|protected
name|void
name|addRandomFields
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
for|for
control|(
name|IndexOptions
name|opts
range|:
name|IndexOptions
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|opts
operator|==
name|IndexOptions
operator|.
name|NONE
condition|)
block|{
continue|continue;
block|}
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|opts
argument_list|)
expr_stmt|;
name|ft
operator|.
name|freeze
argument_list|()
expr_stmt|;
specifier|final
name|int
name|numFields
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numFields
condition|;
operator|++
name|j
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f_"
operator|+
name|opts
argument_list|,
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ft
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
