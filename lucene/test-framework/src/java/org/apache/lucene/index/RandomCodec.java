begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PointsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PointsReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PointsWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|asserting
operator|.
name|AssertingCodec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|asserting
operator|.
name|AssertingDocValuesFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|asserting
operator|.
name|AssertingPointsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|asserting
operator|.
name|AssertingPostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|blockterms
operator|.
name|LuceneFixedGap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|blockterms
operator|.
name|LuceneVarGapDocFreqInterval
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|blockterms
operator|.
name|LuceneVarGapFixedInterval
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|blocktreeords
operator|.
name|BlockTreeOrdsPostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|bloom
operator|.
name|TestBloomFilteredLucenePostings
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene60
operator|.
name|Lucene60PointsReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene60
operator|.
name|Lucene60PointsWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|memory
operator|.
name|DirectDocValuesFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|memory
operator|.
name|DirectPostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|memory
operator|.
name|FSTOrdPostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|memory
operator|.
name|FSTPostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|memory
operator|.
name|MemoryDocValuesFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|memory
operator|.
name|MemoryPostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|mockrandom
operator|.
name|MockRandomPostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextDocValuesFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextPostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
operator|.
name|IntersectVisitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|bkd
operator|.
name|BKDWriter
import|;
end_import
begin_comment
comment|/**  * Codec that assigns per-field random postings formats.  *<p>  * The same field/format assignment will happen regardless of order,  * a hash is computed up front that determines the mapping.  * This means fields can be put into things like HashSets and added to  * documents in different orders and the test will still be deterministic  * and reproducable.  */
end_comment
begin_class
DECL|class|RandomCodec
specifier|public
class|class
name|RandomCodec
extends|extends
name|AssertingCodec
block|{
comment|/** Shuffled list of postings formats to use for new mappings */
DECL|field|formats
specifier|private
name|List
argument_list|<
name|PostingsFormat
argument_list|>
name|formats
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Shuffled list of docvalues formats to use for new mappings */
DECL|field|dvFormats
specifier|private
name|List
argument_list|<
name|DocValuesFormat
argument_list|>
name|dvFormats
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** unique set of format names this codec knows about */
DECL|field|formatNames
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|formatNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** unique set of docvalues format names this codec knows about */
DECL|field|dvFormatNames
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|dvFormatNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|avoidCodecs
specifier|public
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|avoidCodecs
decl_stmt|;
comment|/** memorized field to postingsformat mappings */
comment|// note: we have to sync this map even though it's just for debugging/toString,
comment|// otherwise DWPT's .toString() calls that iterate over the map can
comment|// cause concurrentmodificationexception if indexwriter's infostream is on
DECL|field|previousMappings
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PostingsFormat
argument_list|>
name|previousMappings
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PostingsFormat
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|previousDVMappings
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DocValuesFormat
argument_list|>
name|previousDVMappings
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DocValuesFormat
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|perFieldSeed
specifier|private
specifier|final
name|int
name|perFieldSeed
decl_stmt|;
comment|// a little messy: randomize the default codec's parameters here.
comment|// with the default values, we have e,g, 1024 points in leaf nodes,
comment|// which is less effective for testing.
comment|// TODO: improve how we randomize this...
DECL|field|maxPointsInLeafNode
specifier|private
specifier|final
name|int
name|maxPointsInLeafNode
decl_stmt|;
DECL|field|maxMBSortInHeap
specifier|private
specifier|final
name|double
name|maxMBSortInHeap
decl_stmt|;
DECL|field|bkdSplitRandomSeed
specifier|private
specifier|final
name|int
name|bkdSplitRandomSeed
decl_stmt|;
annotation|@
name|Override
DECL|method|pointsFormat
specifier|public
name|PointsFormat
name|pointsFormat
parameter_list|()
block|{
return|return
operator|new
name|AssertingPointsFormat
argument_list|(
operator|new
name|PointsFormat
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PointsWriter
name|fieldsWriter
parameter_list|(
name|SegmentWriteState
name|writeState
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Randomize how BKDWriter chooses its splis:
return|return
operator|new
name|Lucene60PointsWriter
argument_list|(
name|writeState
argument_list|,
name|maxPointsInLeafNode
argument_list|,
name|maxMBSortInHeap
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|writeField
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|PointsReader
name|values
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|singleValuePerDoc
init|=
name|values
operator|.
name|size
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
operator|==
name|values
operator|.
name|getDocCount
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
decl_stmt|;
try|try
init|(
name|BKDWriter
name|writer
init|=
operator|new
name|RandomlySplittingBKDWriter
argument_list|(
name|writeState
operator|.
name|segmentInfo
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|writeState
operator|.
name|directory
argument_list|,
name|writeState
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|fieldInfo
operator|.
name|getPointDimensionCount
argument_list|()
argument_list|,
name|fieldInfo
operator|.
name|getPointNumBytes
argument_list|()
argument_list|,
name|maxPointsInLeafNode
argument_list|,
name|maxMBSortInHeap
argument_list|,
name|values
operator|.
name|size
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
argument_list|,
name|singleValuePerDoc
argument_list|,
name|bkdSplitRandomSeed
operator|^
name|fieldInfo
operator|.
name|name
operator|.
name|hashCode
argument_list|()
argument_list|)
init|)
block|{
name|values
operator|.
name|intersect
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|,
operator|new
name|IntersectVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|,
name|byte
index|[]
name|packedValue
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|add
argument_list|(
name|packedValue
argument_list|,
name|docID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PointValues
operator|.
name|Relation
name|compare
parameter_list|(
name|byte
index|[]
name|minPackedValue
parameter_list|,
name|byte
index|[]
name|maxPackedValue
parameter_list|)
block|{
return|return
name|PointValues
operator|.
name|Relation
operator|.
name|CELL_CROSSES_QUERY
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// We could have 0 points on merge since all docs with dimensional fields may be deleted:
if|if
condition|(
name|writer
operator|.
name|getPointCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|indexFPs
operator|.
name|put
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|,
name|writer
operator|.
name|finish
argument_list|(
name|dataOut
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|PointsReader
name|fieldsReader
parameter_list|(
name|SegmentReadState
name|readState
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Lucene60PointsReader
argument_list|(
name|readState
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getPostingsFormatForField
specifier|public
name|PostingsFormat
name|getPostingsFormatForField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|PostingsFormat
name|codec
init|=
name|previousMappings
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|codec
operator|==
literal|null
condition|)
block|{
name|codec
operator|=
name|formats
operator|.
name|get
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|perFieldSeed
operator|^
name|name
operator|.
name|hashCode
argument_list|()
argument_list|)
operator|%
name|formats
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|codec
operator|instanceof
name|SimpleTextPostingsFormat
operator|&&
name|perFieldSeed
operator|%
literal|5
operator|!=
literal|0
condition|)
block|{
comment|// make simpletext rarer, choose again
name|codec
operator|=
name|formats
operator|.
name|get
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|perFieldSeed
operator|^
name|name
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
operator|%
name|formats
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|previousMappings
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|codec
argument_list|)
expr_stmt|;
comment|// Safety:
assert|assert
name|previousMappings
operator|.
name|size
argument_list|()
operator|<
literal|10000
operator|:
literal|"test went insane"
assert|;
block|}
return|return
name|codec
return|;
block|}
annotation|@
name|Override
DECL|method|getDocValuesFormatForField
specifier|public
name|DocValuesFormat
name|getDocValuesFormatForField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|DocValuesFormat
name|codec
init|=
name|previousDVMappings
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|codec
operator|==
literal|null
condition|)
block|{
name|codec
operator|=
name|dvFormats
operator|.
name|get
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|perFieldSeed
operator|^
name|name
operator|.
name|hashCode
argument_list|()
argument_list|)
operator|%
name|dvFormats
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|codec
operator|instanceof
name|SimpleTextDocValuesFormat
operator|&&
name|perFieldSeed
operator|%
literal|5
operator|!=
literal|0
condition|)
block|{
comment|// make simpletext rarer, choose again
name|codec
operator|=
name|dvFormats
operator|.
name|get
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|perFieldSeed
operator|^
name|name
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
operator|%
name|dvFormats
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|previousDVMappings
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|codec
argument_list|)
expr_stmt|;
comment|// Safety:
assert|assert
name|previousDVMappings
operator|.
name|size
argument_list|()
operator|<
literal|10000
operator|:
literal|"test went insane"
assert|;
block|}
return|return
name|codec
return|;
block|}
DECL|method|RandomCodec
specifier|public
name|RandomCodec
parameter_list|(
name|Random
name|random
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|avoidCodecs
parameter_list|)
block|{
name|this
operator|.
name|perFieldSeed
operator|=
name|random
operator|.
name|nextInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|avoidCodecs
operator|=
name|avoidCodecs
expr_stmt|;
comment|// TODO: make it possible to specify min/max iterms per
comment|// block via CL:
name|int
name|minItemsPerBlock
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|2
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|maxItemsPerBlock
init|=
literal|2
operator|*
operator|(
name|Math
operator|.
name|max
argument_list|(
literal|2
argument_list|,
name|minItemsPerBlock
operator|-
literal|1
argument_list|)
operator|)
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|int
name|lowFreqCutoff
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|2
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|maxPointsInLeafNode
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|16
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|maxMBSortInHeap
operator|=
literal|5.0
operator|+
operator|(
literal|3
operator|*
name|random
operator|.
name|nextDouble
argument_list|()
operator|)
expr_stmt|;
name|bkdSplitRandomSeed
operator|=
name|random
operator|.
name|nextInt
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|avoidCodecs
argument_list|,
name|TestUtil
operator|.
name|getDefaultPostingsFormat
argument_list|(
name|minItemsPerBlock
argument_list|,
name|maxItemsPerBlock
argument_list|)
argument_list|,
operator|new
name|FSTPostingsFormat
argument_list|()
argument_list|,
operator|new
name|FSTOrdPostingsFormat
argument_list|()
argument_list|,
operator|new
name|DirectPostingsFormat
argument_list|(
name|LuceneTestCase
operator|.
name|rarely
argument_list|(
name|random
argument_list|)
condition|?
literal|1
else|:
operator|(
name|LuceneTestCase
operator|.
name|rarely
argument_list|(
name|random
argument_list|)
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|maxItemsPerBlock
operator|)
argument_list|,
name|LuceneTestCase
operator|.
name|rarely
argument_list|(
name|random
argument_list|)
condition|?
literal|1
else|:
operator|(
name|LuceneTestCase
operator|.
name|rarely
argument_list|(
name|random
argument_list|)
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|lowFreqCutoff
operator|)
argument_list|)
argument_list|,
comment|//TODO as a PostingsFormat which wraps others, we should allow TestBloomFilteredLucenePostings to be constructed
comment|//with a choice of concrete PostingsFormats. Maybe useful to have a generic means of marking and dealing
comment|//with such "wrapper" classes?
operator|new
name|TestBloomFilteredLucenePostings
argument_list|()
argument_list|,
operator|new
name|MockRandomPostingsFormat
argument_list|(
name|random
argument_list|)
argument_list|,
operator|new
name|BlockTreeOrdsPostingsFormat
argument_list|(
name|minItemsPerBlock
argument_list|,
name|maxItemsPerBlock
argument_list|)
argument_list|,
operator|new
name|LuceneFixedGap
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|1000
argument_list|)
argument_list|)
argument_list|,
operator|new
name|LuceneVarGapFixedInterval
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|1000
argument_list|)
argument_list|)
argument_list|,
operator|new
name|LuceneVarGapDocFreqInterval
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|,
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|1000
argument_list|)
argument_list|)
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|?
operator|new
name|SimpleTextPostingsFormat
argument_list|()
else|:
name|TestUtil
operator|.
name|getDefaultPostingsFormat
argument_list|()
argument_list|,
operator|new
name|AssertingPostingsFormat
argument_list|()
argument_list|,
operator|new
name|MemoryPostingsFormat
argument_list|(
literal|true
argument_list|,
name|random
operator|.
name|nextFloat
argument_list|()
argument_list|)
argument_list|,
operator|new
name|MemoryPostingsFormat
argument_list|(
literal|false
argument_list|,
name|random
operator|.
name|nextFloat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addDocValues
argument_list|(
name|avoidCodecs
argument_list|,
name|TestUtil
operator|.
name|getDefaultDocValuesFormat
argument_list|()
argument_list|,
operator|new
name|DirectDocValuesFormat
argument_list|()
argument_list|,
comment|// maybe not a great idea...
operator|new
name|MemoryDocValuesFormat
argument_list|()
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|?
operator|new
name|SimpleTextDocValuesFormat
argument_list|()
else|:
name|TestUtil
operator|.
name|getDefaultDocValuesFormat
argument_list|()
argument_list|,
operator|new
name|AssertingDocValuesFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|formats
argument_list|,
name|random
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|dvFormats
argument_list|,
name|random
argument_list|)
expr_stmt|;
comment|// Avoid too many open files:
if|if
condition|(
name|formats
operator|.
name|size
argument_list|()
operator|>
literal|4
condition|)
block|{
name|formats
operator|=
name|formats
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dvFormats
operator|.
name|size
argument_list|()
operator|>
literal|4
condition|)
block|{
name|dvFormats
operator|=
name|dvFormats
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|RandomCodec
specifier|public
name|RandomCodec
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
name|this
argument_list|(
name|random
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|add
specifier|private
specifier|final
name|void
name|add
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|avoidCodecs
parameter_list|,
name|PostingsFormat
modifier|...
name|postings
parameter_list|)
block|{
for|for
control|(
name|PostingsFormat
name|p
range|:
name|postings
control|)
block|{
if|if
condition|(
operator|!
name|avoidCodecs
operator|.
name|contains
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|formats
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|formatNames
operator|.
name|add
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addDocValues
specifier|private
specifier|final
name|void
name|addDocValues
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|avoidCodecs
parameter_list|,
name|DocValuesFormat
modifier|...
name|docvalues
parameter_list|)
block|{
for|for
control|(
name|DocValuesFormat
name|d
range|:
name|docvalues
control|)
block|{
if|if
condition|(
operator|!
name|avoidCodecs
operator|.
name|contains
argument_list|(
name|d
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|dvFormats
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|dvFormatNames
operator|.
name|add
argument_list|(
name|d
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|": "
operator|+
name|previousMappings
operator|.
name|toString
argument_list|()
operator|+
literal|", docValues:"
operator|+
name|previousDVMappings
operator|.
name|toString
argument_list|()
operator|+
literal|", maxPointsInLeafNode="
operator|+
name|maxPointsInLeafNode
operator|+
literal|", maxMBSortInHeap="
operator|+
name|maxMBSortInHeap
return|;
block|}
comment|/** Just like {@link BKDWriter} except it evilly picks random ways to split cells on    *  recursion to try to provoke geo APIs that get upset at fun rectangles. */
DECL|class|RandomlySplittingBKDWriter
specifier|private
specifier|static
class|class
name|RandomlySplittingBKDWriter
extends|extends
name|BKDWriter
block|{
DECL|field|random
specifier|final
name|Random
name|random
decl_stmt|;
DECL|method|RandomlySplittingBKDWriter
specifier|public
name|RandomlySplittingBKDWriter
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|Directory
name|tempDir
parameter_list|,
name|String
name|tempFileNamePrefix
parameter_list|,
name|int
name|numDims
parameter_list|,
name|int
name|bytesPerDim
parameter_list|,
name|int
name|maxPointsInLeafNode
parameter_list|,
name|double
name|maxMBSortInHeap
parameter_list|,
name|long
name|totalPointCount
parameter_list|,
name|boolean
name|singleValuePerDoc
parameter_list|,
name|int
name|randomSeed
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|maxDoc
argument_list|,
name|tempDir
argument_list|,
name|tempFileNamePrefix
argument_list|,
name|numDims
argument_list|,
name|bytesPerDim
argument_list|,
name|maxPointsInLeafNode
argument_list|,
name|maxMBSortInHeap
argument_list|,
name|totalPointCount
argument_list|,
name|getRandomSingleValuePerDoc
argument_list|(
name|singleValuePerDoc
argument_list|,
name|randomSeed
argument_list|)
argument_list|,
name|getRandomLongOrds
argument_list|(
name|totalPointCount
argument_list|,
name|singleValuePerDoc
argument_list|,
name|randomSeed
argument_list|)
argument_list|,
name|getRandomOfflineSorterBufferMB
argument_list|(
name|randomSeed
argument_list|)
argument_list|,
name|getRandomOfflineSorterMaxTempFiles
argument_list|(
name|randomSeed
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|random
operator|=
operator|new
name|Random
argument_list|(
name|randomSeed
argument_list|)
expr_stmt|;
block|}
DECL|method|getRandomSingleValuePerDoc
specifier|private
specifier|static
name|boolean
name|getRandomSingleValuePerDoc
parameter_list|(
name|boolean
name|singleValuePerDoc
parameter_list|,
name|int
name|randomSeed
parameter_list|)
block|{
comment|// If we are single valued, sometimes pretend we aren't:
return|return
name|singleValuePerDoc
operator|&&
operator|(
operator|new
name|Random
argument_list|(
name|randomSeed
argument_list|)
operator|.
name|nextBoolean
argument_list|()
operator|)
return|;
block|}
DECL|method|getRandomLongOrds
specifier|private
specifier|static
name|boolean
name|getRandomLongOrds
parameter_list|(
name|long
name|totalPointCount
parameter_list|,
name|boolean
name|singleValuePerDoc
parameter_list|,
name|int
name|randomSeed
parameter_list|)
block|{
comment|// Always use long ords if we have too many points, but sometimes randomly use it anyway when singleValuePerDoc is false:
return|return
name|totalPointCount
operator|>
name|Integer
operator|.
name|MAX_VALUE
operator|||
operator|(
name|getRandomSingleValuePerDoc
argument_list|(
name|singleValuePerDoc
argument_list|,
name|randomSeed
argument_list|)
operator|==
literal|false
operator|&&
operator|new
name|Random
argument_list|(
name|randomSeed
argument_list|)
operator|.
name|nextBoolean
argument_list|()
operator|)
return|;
block|}
DECL|method|getRandomOfflineSorterBufferMB
specifier|private
specifier|static
name|long
name|getRandomOfflineSorterBufferMB
parameter_list|(
name|int
name|randomSeed
parameter_list|)
block|{
return|return
name|TestUtil
operator|.
name|nextInt
argument_list|(
operator|new
name|Random
argument_list|(
name|randomSeed
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|)
return|;
block|}
DECL|method|getRandomOfflineSorterMaxTempFiles
specifier|private
specifier|static
name|int
name|getRandomOfflineSorterMaxTempFiles
parameter_list|(
name|int
name|randomSeed
parameter_list|)
block|{
return|return
name|TestUtil
operator|.
name|nextInt
argument_list|(
operator|new
name|Random
argument_list|(
name|randomSeed
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|20
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|split
specifier|protected
name|int
name|split
parameter_list|(
name|byte
index|[]
name|minPackedValue
parameter_list|,
name|byte
index|[]
name|maxPackedValue
parameter_list|)
block|{
comment|// BKD normally defaults by the widest dimension, to try to make as squarish cells as possible, but we just pick a random one ;)
return|return
name|random
operator|.
name|nextInt
argument_list|(
name|numDims
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
