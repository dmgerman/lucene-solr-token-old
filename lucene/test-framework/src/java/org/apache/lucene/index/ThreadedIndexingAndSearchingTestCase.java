begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|BaseDirectoryWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FailOnNonBulkMergesInfoStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LineFileDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NamedThreadFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_comment
comment|// TODO
end_comment
begin_comment
comment|//   - mix in forceMerge, addIndexes
end_comment
begin_comment
comment|//   - randomly mix in non-congruent docs
end_comment
begin_comment
comment|/** Utility class that spawns multiple indexing and  *  searching threads. */
end_comment
begin_class
DECL|class|ThreadedIndexingAndSearchingTestCase
specifier|public
specifier|abstract
class|class
name|ThreadedIndexingAndSearchingTestCase
extends|extends
name|LuceneTestCase
block|{
DECL|field|failed
specifier|protected
specifier|final
name|AtomicBoolean
name|failed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|addCount
specifier|protected
specifier|final
name|AtomicInteger
name|addCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|delCount
specifier|protected
specifier|final
name|AtomicInteger
name|delCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|packCount
specifier|protected
specifier|final
name|AtomicInteger
name|packCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|dir
specifier|protected
name|Directory
name|dir
decl_stmt|;
DECL|field|writer
specifier|protected
name|IndexWriter
name|writer
decl_stmt|;
DECL|class|SubDocs
specifier|private
specifier|static
class|class
name|SubDocs
block|{
DECL|field|packID
specifier|public
specifier|final
name|String
name|packID
decl_stmt|;
DECL|field|subIDs
specifier|public
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|subIDs
decl_stmt|;
DECL|field|deleted
specifier|public
name|boolean
name|deleted
decl_stmt|;
DECL|method|SubDocs
specifier|public
name|SubDocs
parameter_list|(
name|String
name|packID
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|subIDs
parameter_list|)
block|{
name|this
operator|.
name|packID
operator|=
name|packID
expr_stmt|;
name|this
operator|.
name|subIDs
operator|=
name|subIDs
expr_stmt|;
block|}
block|}
comment|// Called per-search
DECL|method|getCurrentSearcher
specifier|protected
specifier|abstract
name|IndexSearcher
name|getCurrentSearcher
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|getFinalSearcher
specifier|protected
specifier|abstract
name|IndexSearcher
name|getFinalSearcher
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|releaseSearcher
specifier|protected
name|void
name|releaseSearcher
parameter_list|(
name|IndexSearcher
name|s
parameter_list|)
throws|throws
name|Exception
block|{   }
comment|// Called once to run searching
DECL|method|doSearching
specifier|protected
specifier|abstract
name|void
name|doSearching
parameter_list|(
name|ExecutorService
name|es
parameter_list|,
name|long
name|stopTime
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|method|getDirectory
specifier|protected
name|Directory
name|getDirectory
parameter_list|(
name|Directory
name|in
parameter_list|)
block|{
return|return
name|in
return|;
block|}
DECL|method|updateDocuments
specifier|protected
name|void
name|updateDocuments
parameter_list|(
name|Term
name|id
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
argument_list|>
name|docs
parameter_list|)
throws|throws
name|Exception
block|{
name|writer
operator|.
name|updateDocuments
argument_list|(
name|id
argument_list|,
name|docs
argument_list|)
expr_stmt|;
block|}
DECL|method|addDocuments
specifier|protected
name|void
name|addDocuments
parameter_list|(
name|Term
name|id
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
argument_list|>
name|docs
parameter_list|)
throws|throws
name|Exception
block|{
name|writer
operator|.
name|addDocuments
argument_list|(
name|docs
argument_list|)
expr_stmt|;
block|}
DECL|method|addDocument
specifier|protected
name|void
name|addDocument
parameter_list|(
name|Term
name|id
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
name|doc
parameter_list|)
throws|throws
name|Exception
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|updateDocument
specifier|protected
name|void
name|updateDocument
parameter_list|(
name|Term
name|term
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
name|doc
parameter_list|)
throws|throws
name|Exception
block|{
name|writer
operator|.
name|updateDocument
argument_list|(
name|term
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteDocuments
specifier|protected
name|void
name|deleteDocuments
parameter_list|(
name|Term
name|term
parameter_list|)
throws|throws
name|Exception
block|{
name|writer
operator|.
name|deleteDocuments
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
DECL|method|doAfterIndexingThreadDone
specifier|protected
name|void
name|doAfterIndexingThreadDone
parameter_list|()
block|{   }
DECL|method|launchIndexingThreads
specifier|private
name|Thread
index|[]
name|launchIndexingThreads
parameter_list|(
specifier|final
name|LineFileDocs
name|docs
parameter_list|,
name|int
name|numThreads
parameter_list|,
specifier|final
name|long
name|stopTime
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|delIDs
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|delPackIDs
parameter_list|,
specifier|final
name|List
argument_list|<
name|SubDocs
argument_list|>
name|allSubDocs
parameter_list|)
block|{
specifier|final
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|numThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|thread
init|=
literal|0
init|;
name|thread
operator|<
name|numThreads
condition|;
name|thread
operator|++
control|)
block|{
name|threads
index|[
name|thread
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// TODO: would be better if this were cross thread, so that we make sure one thread deleting anothers added docs works:
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|toDeleteIDs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SubDocs
argument_list|>
name|toDeleteSubDocs
init|=
operator|new
name|ArrayList
argument_list|<
name|SubDocs
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|stopTime
operator|&&
operator|!
name|failed
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
comment|// Occasional longish pause if running
comment|// nightly
if|if
condition|(
name|LuceneTestCase
operator|.
name|TEST_NIGHTLY
operator|&&
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
operator|==
literal|3
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": now long sleep"
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|50
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Rate limit ingest rate:
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|7
argument_list|)
operator|==
literal|5
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": done sleep"
argument_list|)
expr_stmt|;
block|}
block|}
name|Document
name|doc
init|=
name|docs
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
break|break;
block|}
comment|// Maybe add randomly named field
specifier|final
name|String
name|addedField
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|addedField
operator|=
literal|"extra"
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
name|addedField
argument_list|,
literal|"a random field"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addedField
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// Add/update doc block:
specifier|final
name|String
name|packID
decl_stmt|;
specifier|final
name|SubDocs
name|delSubDocs
decl_stmt|;
if|if
condition|(
name|toDeleteSubDocs
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|delSubDocs
operator|=
name|toDeleteSubDocs
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|toDeleteSubDocs
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|delSubDocs
operator|.
name|deleted
assert|;
name|toDeleteSubDocs
operator|.
name|remove
argument_list|(
name|delSubDocs
argument_list|)
expr_stmt|;
comment|// Update doc block, replacing prior packID
name|packID
operator|=
name|delSubDocs
operator|.
name|packID
expr_stmt|;
block|}
else|else
block|{
name|delSubDocs
operator|=
literal|null
expr_stmt|;
comment|// Add doc block, using new packID
name|packID
operator|=
name|packCount
operator|.
name|getAndIncrement
argument_list|()
operator|+
literal|""
expr_stmt|;
block|}
specifier|final
name|Field
name|packIDField
init|=
name|newStringField
argument_list|(
literal|"packID"
argument_list|,
name|packID
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|docIDs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|SubDocs
name|subDocs
init|=
operator|new
name|SubDocs
argument_list|(
name|packID
argument_list|,
name|docIDs
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Document
argument_list|>
name|docsList
init|=
operator|new
name|ArrayList
argument_list|<
name|Document
argument_list|>
argument_list|()
decl_stmt|;
name|allSubDocs
operator|.
name|add
argument_list|(
name|subDocs
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|packIDField
argument_list|)
expr_stmt|;
name|docsList
operator|.
name|add
argument_list|(
name|_TestUtil
operator|.
name|cloneDocument
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|docIDs
operator|.
name|add
argument_list|(
name|doc
operator|.
name|get
argument_list|(
literal|"docid"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|maxDocCount
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
while|while
condition|(
name|docsList
operator|.
name|size
argument_list|()
operator|<
name|maxDocCount
condition|)
block|{
name|doc
operator|=
name|docs
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|docsList
operator|.
name|add
argument_list|(
name|_TestUtil
operator|.
name|cloneDocument
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|docIDs
operator|.
name|add
argument_list|(
name|doc
operator|.
name|get
argument_list|(
literal|"docid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addCount
operator|.
name|addAndGet
argument_list|(
name|docsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Term
name|packIDTerm
init|=
operator|new
name|Term
argument_list|(
literal|"packID"
argument_list|,
name|packID
argument_list|)
decl_stmt|;
if|if
condition|(
name|delSubDocs
operator|!=
literal|null
condition|)
block|{
name|delSubDocs
operator|.
name|deleted
operator|=
literal|true
expr_stmt|;
name|delIDs
operator|.
name|addAll
argument_list|(
name|delSubDocs
operator|.
name|subIDs
argument_list|)
expr_stmt|;
name|delCount
operator|.
name|addAndGet
argument_list|(
name|delSubDocs
operator|.
name|subIDs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": update pack packID="
operator|+
name|delSubDocs
operator|.
name|packID
operator|+
literal|" count="
operator|+
name|docsList
operator|.
name|size
argument_list|()
operator|+
literal|" docs="
operator|+
name|docIDs
argument_list|)
expr_stmt|;
block|}
name|updateDocuments
argument_list|(
name|packIDTerm
argument_list|,
name|docsList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": add pack packID="
operator|+
name|packID
operator|+
literal|" count="
operator|+
name|docsList
operator|.
name|size
argument_list|()
operator|+
literal|" docs="
operator|+
name|docIDs
argument_list|)
expr_stmt|;
block|}
name|addDocuments
argument_list|(
name|packIDTerm
argument_list|,
name|docsList
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|removeField
argument_list|(
literal|"packID"
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": buffer del id:"
operator|+
name|packID
argument_list|)
expr_stmt|;
block|}
name|toDeleteSubDocs
operator|.
name|add
argument_list|(
name|subDocs
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Add single doc
specifier|final
name|String
name|docid
init|=
name|doc
operator|.
name|get
argument_list|(
literal|"docid"
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": add doc docid:"
operator|+
name|docid
argument_list|)
expr_stmt|;
block|}
name|addDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"docid"
argument_list|,
name|docid
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|addCount
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|3
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": buffer del id:"
operator|+
name|doc
operator|.
name|get
argument_list|(
literal|"docid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|toDeleteIDs
operator|.
name|add
argument_list|(
name|docid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Update single doc, but we never re-use
comment|// and ID so the delete will never
comment|// actually happen:
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": update doc id:"
operator|+
name|doc
operator|.
name|get
argument_list|(
literal|"docid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|docid
init|=
name|doc
operator|.
name|get
argument_list|(
literal|"docid"
argument_list|)
decl_stmt|;
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"docid"
argument_list|,
name|docid
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|addCount
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|3
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": buffer del id:"
operator|+
name|doc
operator|.
name|get
argument_list|(
literal|"docid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|toDeleteIDs
operator|.
name|add
argument_list|(
name|docid
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|30
argument_list|)
operator|==
literal|17
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": apply "
operator|+
name|toDeleteIDs
operator|.
name|size
argument_list|()
operator|+
literal|" deletes"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|id
range|:
name|toDeleteIDs
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": del term=id:"
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"docid"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|count
init|=
name|delCount
operator|.
name|addAndGet
argument_list|(
name|toDeleteIDs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": tot "
operator|+
name|count
operator|+
literal|" deletes"
argument_list|)
expr_stmt|;
block|}
name|delIDs
operator|.
name|addAll
argument_list|(
name|toDeleteIDs
argument_list|)
expr_stmt|;
name|toDeleteIDs
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|SubDocs
name|subDocs
range|:
name|toDeleteSubDocs
control|)
block|{
assert|assert
operator|!
name|subDocs
operator|.
name|deleted
assert|;
name|delPackIDs
operator|.
name|add
argument_list|(
name|subDocs
operator|.
name|packID
argument_list|)
expr_stmt|;
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"packID"
argument_list|,
name|subDocs
operator|.
name|packID
argument_list|)
argument_list|)
expr_stmt|;
name|subDocs
operator|.
name|deleted
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": del subs: "
operator|+
name|subDocs
operator|.
name|subIDs
operator|+
literal|" packID="
operator|+
name|subDocs
operator|.
name|packID
argument_list|)
expr_stmt|;
block|}
name|delIDs
operator|.
name|addAll
argument_list|(
name|subDocs
operator|.
name|subIDs
argument_list|)
expr_stmt|;
name|delCount
operator|.
name|addAndGet
argument_list|(
name|subDocs
operator|.
name|subIDs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toDeleteSubDocs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|addedField
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|removeField
argument_list|(
name|addedField
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": hit exc"
argument_list|)
expr_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|failed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": indexing done"
argument_list|)
expr_stmt|;
block|}
name|doAfterIndexingThreadDone
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|threads
index|[
name|thread
index|]
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|threads
index|[
name|thread
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return
name|threads
return|;
block|}
DECL|method|runSearchThreads
specifier|protected
name|void
name|runSearchThreads
parameter_list|(
specifier|final
name|long
name|stopTimeMS
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numThreads
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|Thread
index|[]
name|searchThreads
init|=
operator|new
name|Thread
index|[
name|numThreads
index|]
decl_stmt|;
specifier|final
name|AtomicInteger
name|totHits
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
comment|// silly starting guess:
specifier|final
name|AtomicInteger
name|totTermCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|100
argument_list|)
decl_stmt|;
comment|// TODO: we should enrich this to do more interesting searches
for|for
control|(
name|int
name|thread
init|=
literal|0
init|;
name|thread
operator|<
name|searchThreads
operator|.
name|length
condition|;
name|thread
operator|++
control|)
block|{
name|searchThreads
index|[
name|thread
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|stopTimeMS
condition|)
block|{
try|try
block|{
specifier|final
name|IndexSearcher
name|s
init|=
name|getCurrentSearcher
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Verify 1) IW is correctly setting
comment|// diagnostics, and 2) segment warming for
comment|// merged segments is actually happening:
for|for
control|(
name|AtomicReader
name|sub
range|:
operator|(
operator|(
name|DirectoryReader
operator|)
name|s
operator|.
name|getIndexReader
argument_list|()
operator|)
operator|.
name|getSequentialSubReaders
argument_list|()
control|)
block|{
name|SegmentReader
name|segReader
init|=
operator|(
name|SegmentReader
operator|)
name|sub
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|diagnostics
init|=
name|segReader
operator|.
name|getSegmentInfo
argument_list|()
operator|.
name|info
operator|.
name|getDiagnostics
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|diagnostics
argument_list|)
expr_stmt|;
name|String
name|source
init|=
name|diagnostics
operator|.
name|get
argument_list|(
literal|"source"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|source
argument_list|)
expr_stmt|;
if|if
condition|(
name|source
operator|.
name|equals
argument_list|(
literal|"merge"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"sub reader "
operator|+
name|sub
operator|+
literal|" wasn't warmed: warmed="
operator|+
name|warmed
operator|+
literal|" diagnostics="
operator|+
name|diagnostics
operator|+
literal|" si="
operator|+
name|segReader
operator|.
name|getSegmentInfo
argument_list|()
argument_list|,
operator|!
name|assertMergedSegmentsWarmed
operator|||
name|warmed
operator|.
name|containsKey
argument_list|(
operator|(
operator|(
name|SegmentReader
operator|)
name|sub
operator|)
operator|.
name|core
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|s
operator|.
name|getIndexReader
argument_list|()
operator|.
name|numDocs
argument_list|()
operator|>
literal|0
condition|)
block|{
name|smokeTestSearcher
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|Fields
name|fields
init|=
name|MultiFields
operator|.
name|getFields
argument_list|(
name|s
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
literal|"body"
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|int
name|seenTermCount
init|=
literal|0
decl_stmt|;
name|int
name|shift
decl_stmt|;
name|int
name|trigger
decl_stmt|;
if|if
condition|(
name|totTermCount
operator|.
name|get
argument_list|()
operator|<
literal|30
condition|)
block|{
name|shift
operator|=
literal|0
expr_stmt|;
name|trigger
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|trigger
operator|=
name|totTermCount
operator|.
name|get
argument_list|()
operator|/
literal|30
expr_stmt|;
name|shift
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|trigger
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|stopTimeMS
condition|)
block|{
name|BytesRef
name|term
init|=
name|termsEnum
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
name|totTermCount
operator|.
name|set
argument_list|(
name|seenTermCount
argument_list|)
expr_stmt|;
break|break;
block|}
name|seenTermCount
operator|++
expr_stmt|;
comment|// search 30 terms
if|if
condition|(
operator|(
name|seenTermCount
operator|+
name|shift
operator|)
operator|%
name|trigger
operator|==
literal|0
condition|)
block|{
comment|//if (VERBOSE) {
comment|//System.out.println(Thread.currentThread().getName() + " now search body:" + term.utf8ToString());
comment|//}
name|totHits
operator|.
name|addAndGet
argument_list|(
name|runQuery
argument_list|(
name|s
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
name|term
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//if (VERBOSE) {
comment|//System.out.println(Thread.currentThread().getName() + ": search done");
comment|//}
block|}
block|}
finally|finally
block|{
name|releaseSearcher
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": hit exc"
argument_list|)
expr_stmt|;
name|failed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
block|}
expr_stmt|;
name|searchThreads
index|[
name|thread
index|]
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|searchThreads
index|[
name|thread
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|thread
init|=
literal|0
init|;
name|thread
operator|<
name|searchThreads
operator|.
name|length
condition|;
name|thread
operator|++
control|)
block|{
name|searchThreads
index|[
name|thread
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: DONE search: totHits="
operator|+
name|totHits
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doAfterWriter
specifier|protected
name|void
name|doAfterWriter
parameter_list|(
name|ExecutorService
name|es
parameter_list|)
throws|throws
name|Exception
block|{   }
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|Exception
block|{   }
DECL|field|assertMergedSegmentsWarmed
specifier|protected
name|boolean
name|assertMergedSegmentsWarmed
init|=
literal|true
decl_stmt|;
DECL|field|warmed
specifier|private
specifier|final
name|Map
argument_list|<
name|SegmentCoreReaders
argument_list|,
name|Boolean
argument_list|>
name|warmed
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|WeakHashMap
argument_list|<
name|SegmentCoreReaders
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|runTest
specifier|public
name|void
name|runTest
parameter_list|(
name|String
name|testName
parameter_list|)
throws|throws
name|Exception
block|{
name|failed
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|addCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|delCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|packCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|LineFileDocs
name|docs
init|=
operator|new
name|LineFileDocs
argument_list|(
name|random
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|File
name|tempDir
init|=
name|_TestUtil
operator|.
name|getTempDir
argument_list|(
name|testName
argument_list|)
decl_stmt|;
name|dir
operator|=
name|newFSDirectory
argument_list|(
name|tempDir
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BaseDirectoryWrapper
operator|)
name|dir
operator|)
operator|.
name|setCheckIndexOnClose
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// don't double-checkIndex, we do it ourselves.
specifier|final
name|IndexWriterConfig
name|conf
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setInfoStream
argument_list|(
operator|new
name|FailOnNonBulkMergesInfoStream
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LuceneTestCase
operator|.
name|TEST_NIGHTLY
condition|)
block|{
comment|// newIWConfig makes smallish max seg size, which
comment|// results in tons and tons of segments for this test
comment|// when run nightly:
name|MergePolicy
name|mp
init|=
name|conf
operator|.
name|getMergePolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|mp
operator|instanceof
name|TieredMergePolicy
condition|)
block|{
operator|(
operator|(
name|TieredMergePolicy
operator|)
name|mp
operator|)
operator|.
name|setMaxMergedSegmentMB
argument_list|(
literal|5000.
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mp
operator|instanceof
name|LogByteSizeMergePolicy
condition|)
block|{
operator|(
operator|(
name|LogByteSizeMergePolicy
operator|)
name|mp
operator|)
operator|.
name|setMaxMergeMB
argument_list|(
literal|1000.
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mp
operator|instanceof
name|LogMergePolicy
condition|)
block|{
operator|(
operator|(
name|LogMergePolicy
operator|)
name|mp
operator|)
operator|.
name|setMaxMergeDocs
argument_list|(
literal|100000
argument_list|)
expr_stmt|;
block|}
block|}
name|conf
operator|.
name|setMergedSegmentWarmer
argument_list|(
operator|new
name|IndexWriter
operator|.
name|IndexReaderWarmer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|warm
parameter_list|(
name|AtomicReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: now warm merged reader="
operator|+
name|reader
argument_list|)
expr_stmt|;
block|}
name|warmed
operator|.
name|put
argument_list|(
operator|(
operator|(
name|SegmentReader
operator|)
name|reader
operator|)
operator|.
name|core
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
specifier|final
name|int
name|maxDoc
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
specifier|final
name|Bits
name|liveDocs
init|=
name|reader
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
name|int
name|sum
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|inc
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|maxDoc
operator|/
literal|50
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|maxDoc
condition|;
name|docID
operator|+=
name|inc
control|)
block|{
if|if
condition|(
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
condition|)
block|{
specifier|final
name|Document
name|doc
init|=
name|reader
operator|.
name|document
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|sum
operator|+=
name|doc
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|sum
operator|+=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"united"
argument_list|)
argument_list|)
argument_list|,
literal|10
argument_list|)
operator|.
name|totalHits
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: warm visited "
operator|+
name|sum
operator|+
literal|" fields"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|_TestUtil
operator|.
name|reduceOpenFiles
argument_list|(
name|writer
argument_list|)
expr_stmt|;
specifier|final
name|ExecutorService
name|es
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|null
else|:
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
operator|new
name|NamedThreadFactory
argument_list|(
name|testName
argument_list|)
argument_list|)
decl_stmt|;
name|doAfterWriter
argument_list|(
name|es
argument_list|)
expr_stmt|;
specifier|final
name|int
name|NUM_INDEX_THREADS
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|int
name|RUN_TIME_SEC
init|=
name|LuceneTestCase
operator|.
name|TEST_NIGHTLY
condition|?
literal|300
else|:
name|RANDOM_MULTIPLIER
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|delIDs
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|delPackIDs
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SubDocs
argument_list|>
name|allSubDocs
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|SubDocs
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|stopTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|RUN_TIME_SEC
operator|*
literal|1000
decl_stmt|;
specifier|final
name|Thread
index|[]
name|indexThreads
init|=
name|launchIndexingThreads
argument_list|(
name|docs
argument_list|,
name|NUM_INDEX_THREADS
argument_list|,
name|stopTime
argument_list|,
name|delIDs
argument_list|,
name|delPackIDs
argument_list|,
name|allSubDocs
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: DONE start indexing threads ["
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
operator|)
operator|+
literal|" ms]"
argument_list|)
expr_stmt|;
block|}
comment|// Let index build up a bit
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|doSearching
argument_list|(
name|es
argument_list|,
name|stopTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: all searching done ["
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
operator|)
operator|+
literal|" ms]"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|thread
init|=
literal|0
init|;
name|thread
operator|<
name|indexThreads
operator|.
name|length
condition|;
name|thread
operator|++
control|)
block|{
name|indexThreads
index|[
name|thread
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: done join indexing threads ["
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
operator|)
operator|+
literal|" ms]; addCount="
operator|+
name|addCount
operator|+
literal|" delCount="
operator|+
name|delCount
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexSearcher
name|s
init|=
name|getFinalSearcher
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: finalSearcher="
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|failed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|doFail
init|=
literal|false
decl_stmt|;
comment|// Verify: make sure delIDs are in fact deleted:
for|for
control|(
name|String
name|id
range|:
name|delIDs
control|)
block|{
specifier|final
name|TopDocs
name|hits
init|=
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"docid"
argument_list|,
name|id
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|hits
operator|.
name|totalHits
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"doc id="
operator|+
name|id
operator|+
literal|" is supposed to be deleted, but got "
operator|+
name|hits
operator|.
name|totalHits
operator|+
literal|" hits; first docID="
operator|+
name|hits
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|doFail
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// Verify: make sure delPackIDs are in fact deleted:
for|for
control|(
name|String
name|id
range|:
name|delPackIDs
control|)
block|{
specifier|final
name|TopDocs
name|hits
init|=
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"packID"
argument_list|,
name|id
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|hits
operator|.
name|totalHits
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"packID="
operator|+
name|id
operator|+
literal|" is supposed to be deleted, but got "
operator|+
name|hits
operator|.
name|totalHits
operator|+
literal|" matches"
argument_list|)
expr_stmt|;
name|doFail
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// Verify: make sure each group of sub-docs are still in docID order:
for|for
control|(
name|SubDocs
name|subDocs
range|:
name|allSubDocs
control|)
block|{
name|TopDocs
name|hits
init|=
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"packID"
argument_list|,
name|subDocs
operator|.
name|packID
argument_list|)
argument_list|)
argument_list|,
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subDocs
operator|.
name|deleted
condition|)
block|{
comment|// We sort by relevance but the scores should be identical so sort falls back to by docID:
if|if
condition|(
name|hits
operator|.
name|totalHits
operator|!=
name|subDocs
operator|.
name|subIDs
operator|.
name|size
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"packID="
operator|+
name|subDocs
operator|.
name|packID
operator|+
literal|": expected "
operator|+
name|subDocs
operator|.
name|subIDs
operator|.
name|size
argument_list|()
operator|+
literal|" hits but got "
operator|+
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|doFail
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|int
name|lastDocID
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|startDocID
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|ScoreDoc
name|scoreDoc
range|:
name|hits
operator|.
name|scoreDocs
control|)
block|{
specifier|final
name|int
name|docID
init|=
name|scoreDoc
operator|.
name|doc
decl_stmt|;
if|if
condition|(
name|lastDocID
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
operator|+
name|lastDocID
argument_list|,
name|docID
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startDocID
operator|=
name|docID
expr_stmt|;
block|}
name|lastDocID
operator|=
name|docID
expr_stmt|;
specifier|final
name|Document
name|doc
init|=
name|s
operator|.
name|doc
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|subDocs
operator|.
name|packID
argument_list|,
name|doc
operator|.
name|get
argument_list|(
literal|"packID"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lastDocID
operator|=
name|startDocID
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|String
name|subID
range|:
name|subDocs
operator|.
name|subIDs
control|)
block|{
name|hits
operator|=
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"docid"
argument_list|,
name|subID
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
specifier|final
name|int
name|docID
init|=
name|hits
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
decl_stmt|;
if|if
condition|(
name|lastDocID
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
operator|+
name|lastDocID
argument_list|,
name|docID
argument_list|)
expr_stmt|;
block|}
name|lastDocID
operator|=
name|docID
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Pack was deleted -- make sure its docs are
comment|// deleted.  We can't verify packID is deleted
comment|// because we can re-use packID for update:
for|for
control|(
name|String
name|subID
range|:
name|subDocs
operator|.
name|subIDs
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"docid"
argument_list|,
name|subID
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Verify: make sure all not-deleted docs are in fact
comment|// not deleted:
specifier|final
name|int
name|endID
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|docs
operator|.
name|nextDoc
argument_list|()
operator|.
name|get
argument_list|(
literal|"docid"
argument_list|)
argument_list|)
decl_stmt|;
name|docs
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|endID
condition|;
name|id
operator|++
control|)
block|{
name|String
name|stringID
init|=
literal|""
operator|+
name|id
decl_stmt|;
if|if
condition|(
operator|!
name|delIDs
operator|.
name|contains
argument_list|(
name|stringID
argument_list|)
condition|)
block|{
specifier|final
name|TopDocs
name|hits
init|=
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"docid"
argument_list|,
name|stringID
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|hits
operator|.
name|totalHits
operator|!=
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"doc id="
operator|+
name|stringID
operator|+
literal|" is not supposed to be deleted, but got hitCount="
operator|+
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|doFail
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|assertFalse
argument_list|(
name|doFail
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"index="
operator|+
name|writer
operator|.
name|segString
argument_list|()
operator|+
literal|" addCount="
operator|+
name|addCount
operator|+
literal|" delCount="
operator|+
name|delCount
argument_list|,
name|addCount
operator|.
name|get
argument_list|()
operator|-
name|delCount
operator|.
name|get
argument_list|()
argument_list|,
name|s
operator|.
name|getIndexReader
argument_list|()
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|releaseSearcher
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"index="
operator|+
name|writer
operator|.
name|segString
argument_list|()
operator|+
literal|" addCount="
operator|+
name|addCount
operator|+
literal|" delCount="
operator|+
name|delCount
argument_list|,
name|addCount
operator|.
name|get
argument_list|()
operator|-
name|delCount
operator|.
name|get
argument_list|()
argument_list|,
name|writer
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|doClose
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Cannot shutdown until after writer is closed because
comment|// writer has merged segment warmer that uses IS to run
comment|// searches, and that IS may be using this es!
if|if
condition|(
name|es
operator|!=
literal|null
condition|)
block|{
name|es
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|es
operator|.
name|awaitTermination
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|_TestUtil
operator|.
name|rmDir
argument_list|(
name|tempDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: done ["
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
operator|)
operator|+
literal|" ms]"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runQuery
specifier|private
name|int
name|runQuery
parameter_list|(
name|IndexSearcher
name|s
parameter_list|,
name|Query
name|q
parameter_list|)
throws|throws
name|Exception
block|{
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|int
name|hitCount
init|=
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"title"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|totalHits
decl_stmt|;
specifier|final
name|Sort
name|dvSort
init|=
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"title"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
decl_stmt|;
name|dvSort
operator|.
name|getSort
argument_list|()
index|[
literal|0
index|]
operator|.
name|setUseIndexValues
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|hitCount2
init|=
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
name|dvSort
argument_list|)
operator|.
name|totalHits
decl_stmt|;
name|assertEquals
argument_list|(
name|hitCount
argument_list|,
name|hitCount2
argument_list|)
expr_stmt|;
return|return
name|hitCount
return|;
block|}
DECL|method|smokeTestSearcher
specifier|protected
name|void
name|smokeTestSearcher
parameter_list|(
name|IndexSearcher
name|s
parameter_list|)
throws|throws
name|Exception
block|{
name|runQuery
argument_list|(
name|s
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"united"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|runQuery
argument_list|(
name|s
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"titleTokenized"
argument_list|,
literal|"states"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PhraseQuery
name|pq
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"united"
argument_list|)
argument_list|)
expr_stmt|;
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"states"
argument_list|)
argument_list|)
expr_stmt|;
name|runQuery
argument_list|(
name|s
argument_list|,
name|pq
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
