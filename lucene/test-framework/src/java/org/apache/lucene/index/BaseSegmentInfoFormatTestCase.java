begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StoredField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import
begin_comment
comment|/**  * Abstract class to do basic tests for si format.  * NOTE: This test focuses on the si impl, nothing else.  * The [stretch] goal is for this test to be  * so thorough in testing a new si format that if this  * test passes, then all Lucene/Solr tests should also pass.  Ie,  * if there is some bug in a given si Format that this  * test fails to catch then this test needs to be improved! */
end_comment
begin_class
DECL|class|BaseSegmentInfoFormatTestCase
specifier|public
specifier|abstract
class|class
name|BaseSegmentInfoFormatTestCase
extends|extends
name|BaseIndexFileFormatTestCase
block|{
comment|/** Test files map */
DECL|method|testFiles
specifier|public
name|void
name|testFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Codec
name|codec
init|=
name|getCodec
argument_list|()
decl_stmt|;
name|SegmentInfo
name|info
init|=
operator|new
name|SegmentInfo
argument_list|(
name|dir
argument_list|,
name|getVersions
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|"_123"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|codec
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|StringHelper
operator|.
name|randomId
argument_list|()
argument_list|)
decl_stmt|;
name|info
operator|.
name|setFiles
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|codec
operator|.
name|segmentInfoFormat
argument_list|()
operator|.
name|write
argument_list|(
name|dir
argument_list|,
name|info
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|SegmentInfo
name|info2
init|=
name|codec
operator|.
name|segmentInfoFormat
argument_list|()
operator|.
name|read
argument_list|(
name|dir
argument_list|,
literal|"_123"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|info
operator|.
name|files
argument_list|()
argument_list|,
name|info2
operator|.
name|files
argument_list|()
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Tests SI writer adds itself to files... */
DECL|method|testAddsSelfToFiles
specifier|public
name|void
name|testAddsSelfToFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Codec
name|codec
init|=
name|getCodec
argument_list|()
decl_stmt|;
name|SegmentInfo
name|info
init|=
operator|new
name|SegmentInfo
argument_list|(
name|dir
argument_list|,
name|getVersions
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|"_123"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|codec
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|StringHelper
operator|.
name|randomId
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|originalFiles
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"_123.a"
argument_list|)
decl_stmt|;
name|info
operator|.
name|setFiles
argument_list|(
name|originalFiles
argument_list|)
expr_stmt|;
name|codec
operator|.
name|segmentInfoFormat
argument_list|()
operator|.
name|write
argument_list|(
name|dir
argument_list|,
name|info
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|modifiedFiles
init|=
name|info
operator|.
name|files
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|modifiedFiles
operator|.
name|containsAll
argument_list|(
name|originalFiles
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"did you forget to add yourself to files()"
argument_list|,
name|modifiedFiles
operator|.
name|size
argument_list|()
operator|>
name|originalFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SegmentInfo
name|info2
init|=
name|codec
operator|.
name|segmentInfoFormat
argument_list|()
operator|.
name|read
argument_list|(
name|dir
argument_list|,
literal|"_123"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|info
operator|.
name|files
argument_list|()
argument_list|,
name|info2
operator|.
name|files
argument_list|()
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Test diagnostics map */
DECL|method|testDiagnostics
specifier|public
name|void
name|testDiagnostics
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Codec
name|codec
init|=
name|getCodec
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|diagnostics
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|diagnostics
operator|.
name|put
argument_list|(
literal|"key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|diagnostics
operator|.
name|put
argument_list|(
literal|"key2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|SegmentInfo
name|info
init|=
operator|new
name|SegmentInfo
argument_list|(
name|dir
argument_list|,
name|getVersions
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|"_123"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|codec
argument_list|,
name|diagnostics
argument_list|,
name|StringHelper
operator|.
name|randomId
argument_list|()
argument_list|)
decl_stmt|;
name|info
operator|.
name|setFiles
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|codec
operator|.
name|segmentInfoFormat
argument_list|()
operator|.
name|write
argument_list|(
name|dir
argument_list|,
name|info
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|SegmentInfo
name|info2
init|=
name|codec
operator|.
name|segmentInfoFormat
argument_list|()
operator|.
name|read
argument_list|(
name|dir
argument_list|,
literal|"_123"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|diagnostics
argument_list|,
name|info2
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Test unique ID */
DECL|method|testUniqueID
specifier|public
name|void
name|testUniqueID
parameter_list|()
throws|throws
name|Exception
block|{
name|Codec
name|codec
init|=
name|getCodec
argument_list|()
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|byte
name|id
index|[]
init|=
name|StringHelper
operator|.
name|randomId
argument_list|()
decl_stmt|;
name|SegmentInfo
name|info
init|=
operator|new
name|SegmentInfo
argument_list|(
name|dir
argument_list|,
name|getVersions
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|"_123"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|codec
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|info
operator|.
name|setFiles
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|codec
operator|.
name|segmentInfoFormat
argument_list|()
operator|.
name|write
argument_list|(
name|dir
argument_list|,
name|info
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|SegmentInfo
name|info2
init|=
name|codec
operator|.
name|segmentInfoFormat
argument_list|()
operator|.
name|read
argument_list|(
name|dir
argument_list|,
literal|"_123"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertIDEquals
argument_list|(
name|id
argument_list|,
name|info2
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Test versions */
DECL|method|testVersions
specifier|public
name|void
name|testVersions
parameter_list|()
throws|throws
name|Exception
block|{
name|Codec
name|codec
init|=
name|getCodec
argument_list|()
decl_stmt|;
for|for
control|(
name|Version
name|v
range|:
name|getVersions
argument_list|()
control|)
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|SegmentInfo
name|info
init|=
operator|new
name|SegmentInfo
argument_list|(
name|dir
argument_list|,
name|v
argument_list|,
literal|"_123"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|codec
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|StringHelper
operator|.
name|randomId
argument_list|()
argument_list|)
decl_stmt|;
name|info
operator|.
name|setFiles
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|codec
operator|.
name|segmentInfoFormat
argument_list|()
operator|.
name|write
argument_list|(
name|dir
argument_list|,
name|info
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|SegmentInfo
name|info2
init|=
name|codec
operator|.
name|segmentInfoFormat
argument_list|()
operator|.
name|read
argument_list|(
name|dir
argument_list|,
literal|"_123"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|info2
operator|.
name|getVersion
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**     * Sets some otherwise hard-to-test properties:     * random segment names, ID values, document count, etc and round-trips    */
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
name|Codec
name|codec
init|=
name|getCodec
argument_list|()
decl_stmt|;
name|Version
index|[]
name|versions
init|=
name|getVersions
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Version
name|version
init|=
name|versions
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|versions
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|String
name|name
init|=
literal|"_"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|Character
operator|.
name|MAX_RADIX
argument_list|)
decl_stmt|;
name|int
name|docCount
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|IndexWriter
operator|.
name|MAX_DOCS
argument_list|)
decl_stmt|;
name|boolean
name|isCompoundFile
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numFiles
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numFiles
condition|;
name|j
operator|++
control|)
block|{
name|String
name|file
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|name
argument_list|,
literal|""
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|dir
operator|.
name|createOutput
argument_list|(
name|file
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|diagnostics
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numDiags
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numDiags
condition|;
name|j
operator|++
control|)
block|{
name|diagnostics
operator|.
name|put
argument_list|(
name|TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|byte
name|id
index|[]
init|=
operator|new
name|byte
index|[
name|StringHelper
operator|.
name|ID_LENGTH
index|]
decl_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|SegmentInfo
name|info
init|=
operator|new
name|SegmentInfo
argument_list|(
name|dir
argument_list|,
name|version
argument_list|,
name|name
argument_list|,
name|docCount
argument_list|,
name|isCompoundFile
argument_list|,
name|codec
argument_list|,
name|diagnostics
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|info
operator|.
name|setFiles
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|codec
operator|.
name|segmentInfoFormat
argument_list|()
operator|.
name|write
argument_list|(
name|dir
argument_list|,
name|info
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|SegmentInfo
name|info2
init|=
name|codec
operator|.
name|segmentInfoFormat
argument_list|()
operator|.
name|read
argument_list|(
name|dir
argument_list|,
name|name
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|,
name|info2
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|assertEquals
specifier|protected
specifier|final
name|void
name|assertEquals
parameter_list|(
name|SegmentInfo
name|expected
parameter_list|,
name|SegmentInfo
name|actual
parameter_list|)
block|{
name|assertSame
argument_list|(
name|expected
operator|.
name|dir
argument_list|,
name|actual
operator|.
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|name
argument_list|,
name|actual
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|files
argument_list|()
argument_list|,
name|actual
operator|.
name|files
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't assert this, because SI format has nothing to do with it... set by SIS
comment|// assertSame(expected.getCodec(), actual.getCodec());
name|assertEquals
argument_list|(
name|expected
operator|.
name|getDiagnostics
argument_list|()
argument_list|,
name|actual
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|actual
operator|.
name|getDocCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertIDEquals
argument_list|(
name|expected
operator|.
name|getId
argument_list|()
argument_list|,
name|actual
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getUseCompoundFile
argument_list|()
argument_list|,
name|actual
operator|.
name|getUseCompoundFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getVersion
argument_list|()
argument_list|,
name|actual
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Returns the versions this SI should test */
DECL|method|getVersions
specifier|protected
specifier|abstract
name|Version
index|[]
name|getVersions
parameter_list|()
function_decl|;
comment|/**     * assert that unique id is equal.     * @deprecated only exists to be overridden by old codecs that didnt support this    */
annotation|@
name|Deprecated
DECL|method|assertIDEquals
specifier|protected
name|void
name|assertIDEquals
parameter_list|(
name|byte
name|expected
index|[]
parameter_list|,
name|byte
name|actual
index|[]
parameter_list|)
block|{
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addRandomFields
specifier|protected
name|void
name|addRandomFields
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
literal|"foobar"
argument_list|,
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|testRamBytesUsed
specifier|public
name|void
name|testRamBytesUsed
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"not applicable for this format"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
