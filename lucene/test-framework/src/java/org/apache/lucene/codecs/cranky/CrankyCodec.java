begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.cranky
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|cranky
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CompoundFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldInfosFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FilterCodec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|LiveDocsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|NormsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|SegmentInfoFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|StoredFieldsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|TermVectorsFormat
import|;
end_import
begin_comment
comment|/** Codec for testing that throws random IOExceptions */
end_comment
begin_class
DECL|class|CrankyCodec
specifier|public
class|class
name|CrankyCodec
extends|extends
name|FilterCodec
block|{
DECL|field|random
specifier|final
name|Random
name|random
decl_stmt|;
comment|/**     * Wrap the provided codec with crankiness.    * Try passing Asserting for the most fun.    */
DECL|method|CrankyCodec
specifier|public
name|CrankyCodec
parameter_list|(
name|Codec
name|delegate
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
comment|// we impersonate the passed-in codec, so we don't need to be in SPI,
comment|// and so we dont change file formats
name|super
argument_list|(
name|delegate
operator|.
name|getName
argument_list|()
argument_list|,
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|random
operator|=
name|random
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docValuesFormat
specifier|public
name|DocValuesFormat
name|docValuesFormat
parameter_list|()
block|{
return|return
operator|new
name|CrankyDocValuesFormat
argument_list|(
name|delegate
operator|.
name|docValuesFormat
argument_list|()
argument_list|,
name|random
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|fieldInfosFormat
specifier|public
name|FieldInfosFormat
name|fieldInfosFormat
parameter_list|()
block|{
return|return
operator|new
name|CrankyFieldInfosFormat
argument_list|(
name|delegate
operator|.
name|fieldInfosFormat
argument_list|()
argument_list|,
name|random
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|liveDocsFormat
specifier|public
name|LiveDocsFormat
name|liveDocsFormat
parameter_list|()
block|{
return|return
operator|new
name|CrankyLiveDocsFormat
argument_list|(
name|delegate
operator|.
name|liveDocsFormat
argument_list|()
argument_list|,
name|random
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|normsFormat
specifier|public
name|NormsFormat
name|normsFormat
parameter_list|()
block|{
return|return
operator|new
name|CrankyNormsFormat
argument_list|(
name|delegate
operator|.
name|normsFormat
argument_list|()
argument_list|,
name|random
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|postingsFormat
specifier|public
name|PostingsFormat
name|postingsFormat
parameter_list|()
block|{
return|return
operator|new
name|CrankyPostingsFormat
argument_list|(
name|delegate
operator|.
name|postingsFormat
argument_list|()
argument_list|,
name|random
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|segmentInfoFormat
specifier|public
name|SegmentInfoFormat
name|segmentInfoFormat
parameter_list|()
block|{
return|return
operator|new
name|CrankySegmentInfoFormat
argument_list|(
name|delegate
operator|.
name|segmentInfoFormat
argument_list|()
argument_list|,
name|random
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|storedFieldsFormat
specifier|public
name|StoredFieldsFormat
name|storedFieldsFormat
parameter_list|()
block|{
return|return
operator|new
name|CrankyStoredFieldsFormat
argument_list|(
name|delegate
operator|.
name|storedFieldsFormat
argument_list|()
argument_list|,
name|random
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|termVectorsFormat
specifier|public
name|TermVectorsFormat
name|termVectorsFormat
parameter_list|()
block|{
return|return
operator|new
name|CrankyTermVectorsFormat
argument_list|(
name|delegate
operator|.
name|termVectorsFormat
argument_list|()
argument_list|,
name|random
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compoundFormat
specifier|public
name|CompoundFormat
name|compoundFormat
parameter_list|()
block|{
return|return
operator|new
name|CrankyCompoundFormat
argument_list|(
name|delegate
operator|.
name|compoundFormat
argument_list|()
argument_list|,
name|random
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Cranky("
operator|+
name|delegate
operator|+
literal|")"
return|;
block|}
block|}
end_class
end_unit
