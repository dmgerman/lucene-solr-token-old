begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.lucene3x
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene3x
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldInfosWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|IndexOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_comment
comment|/**  * @lucene.internal  * @lucene.experimental  */
end_comment
begin_class
DECL|class|PreFlexRWFieldInfosWriter
class|class
name|PreFlexRWFieldInfosWriter
extends|extends
name|FieldInfosWriter
block|{
comment|// TODO move to test-framework preflex RW?
comment|/** Extension of field infos */
DECL|field|FIELD_INFOS_EXTENSION
specifier|static
specifier|final
name|String
name|FIELD_INFOS_EXTENSION
init|=
literal|"fnm"
decl_stmt|;
comment|// First used in 2.9; prior to 2.9 there was no format header
DECL|field|FORMAT_START
specifier|static
specifier|final
name|int
name|FORMAT_START
init|=
operator|-
literal|2
decl_stmt|;
comment|// First used in 3.4: omit only positional information
DECL|field|FORMAT_OMIT_POSITIONS
specifier|static
specifier|final
name|int
name|FORMAT_OMIT_POSITIONS
init|=
operator|-
literal|3
decl_stmt|;
DECL|field|FORMAT_PREFLEX_RW
specifier|static
specifier|final
name|int
name|FORMAT_PREFLEX_RW
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
comment|// whenever you add a new format, make it 1 smaller (negative version logic)!
DECL|field|FORMAT_CURRENT
specifier|static
specifier|final
name|int
name|FORMAT_CURRENT
init|=
name|FORMAT_OMIT_POSITIONS
decl_stmt|;
DECL|field|IS_INDEXED
specifier|static
specifier|final
name|byte
name|IS_INDEXED
init|=
literal|0x1
decl_stmt|;
DECL|field|STORE_TERMVECTOR
specifier|static
specifier|final
name|byte
name|STORE_TERMVECTOR
init|=
literal|0x2
decl_stmt|;
DECL|field|OMIT_NORMS
specifier|static
specifier|final
name|byte
name|OMIT_NORMS
init|=
literal|0x10
decl_stmt|;
DECL|field|STORE_PAYLOADS
specifier|static
specifier|final
name|byte
name|STORE_PAYLOADS
init|=
literal|0x20
decl_stmt|;
DECL|field|OMIT_TERM_FREQ_AND_POSITIONS
specifier|static
specifier|final
name|byte
name|OMIT_TERM_FREQ_AND_POSITIONS
init|=
literal|0x40
decl_stmt|;
DECL|field|OMIT_POSITIONS
specifier|static
specifier|final
name|byte
name|OMIT_POSITIONS
init|=
operator|-
literal|128
decl_stmt|;
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|String
name|segmentName
parameter_list|,
name|FieldInfos
name|infos
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|fileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentName
argument_list|,
literal|""
argument_list|,
name|FIELD_INFOS_EXTENSION
argument_list|)
decl_stmt|;
name|IndexOutput
name|output
init|=
name|directory
operator|.
name|createOutput
argument_list|(
name|fileName
argument_list|,
name|context
argument_list|)
decl_stmt|;
try|try
block|{
name|output
operator|.
name|writeVInt
argument_list|(
name|FORMAT_PREFLEX_RW
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeVInt
argument_list|(
name|infos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldInfo
name|fi
range|:
name|infos
control|)
block|{
assert|assert
name|fi
operator|.
name|getIndexOptions
argument_list|()
operator|==
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
operator|||
operator|!
name|fi
operator|.
name|hasPayloads
argument_list|()
assert|;
name|byte
name|bits
init|=
literal|0x0
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|isIndexed
argument_list|()
condition|)
name|bits
operator||=
name|IS_INDEXED
expr_stmt|;
if|if
condition|(
name|fi
operator|.
name|hasVectors
argument_list|()
condition|)
name|bits
operator||=
name|STORE_TERMVECTOR
expr_stmt|;
if|if
condition|(
name|fi
operator|.
name|omitsNorms
argument_list|()
condition|)
name|bits
operator||=
name|OMIT_NORMS
expr_stmt|;
if|if
condition|(
name|fi
operator|.
name|hasPayloads
argument_list|()
condition|)
name|bits
operator||=
name|STORE_PAYLOADS
expr_stmt|;
if|if
condition|(
name|fi
operator|.
name|getIndexOptions
argument_list|()
operator|==
name|IndexOptions
operator|.
name|DOCS_ONLY
condition|)
block|{
name|bits
operator||=
name|OMIT_TERM_FREQ_AND_POSITIONS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|getIndexOptions
argument_list|()
operator|==
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
condition|)
block|{
name|bits
operator||=
name|OMIT_POSITIONS
expr_stmt|;
block|}
name|output
operator|.
name|writeString
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
comment|/*          * we need to write the field number since IW tries          * to stabelize the field numbers across segments so the          * FI ordinal is not necessarily equivalent to the field number           */
name|output
operator|.
name|writeInt
argument_list|(
name|fi
operator|.
name|number
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeByte
argument_list|(
name|bits
argument_list|)
expr_stmt|;
if|if
condition|(
name|fi
operator|.
name|isIndexed
argument_list|()
operator|&&
operator|!
name|fi
operator|.
name|omitsNorms
argument_list|()
condition|)
block|{
comment|// to allow null norm types we need to indicate if norms are written
comment|// only in RW case
name|output
operator|.
name|writeByte
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|fi
operator|.
name|getNormType
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
