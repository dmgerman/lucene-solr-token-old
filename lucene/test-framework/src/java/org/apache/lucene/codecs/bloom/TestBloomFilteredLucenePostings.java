begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.bloom
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|bloom
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReadState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_comment
comment|/**  * A class used for testing {@link BloomFilteringPostingsFormat} with a concrete  * delegate (Lucene41). Creates a Bloom filter on ALL fields and with tiny  * amounts of memory reserved for the filter. DO NOT USE IN A PRODUCTION  * APPLICATION This is not a realistic application of Bloom Filters as they  * ordinarily are larger and operate on only primary key type fields.  */
end_comment
begin_class
DECL|class|TestBloomFilteredLucenePostings
specifier|public
specifier|final
class|class
name|TestBloomFilteredLucenePostings
extends|extends
name|PostingsFormat
block|{
DECL|field|delegate
specifier|private
name|BloomFilteringPostingsFormat
name|delegate
decl_stmt|;
comment|// Special class used to avoid OOM exceptions where Junit tests create many
comment|// fields.
DECL|class|LowMemoryBloomFactory
specifier|static
class|class
name|LowMemoryBloomFactory
extends|extends
name|BloomFilterFactory
block|{
annotation|@
name|Override
DECL|method|getSetForField
specifier|public
name|FuzzySet
name|getSetForField
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|,
name|FieldInfo
name|info
parameter_list|)
block|{
return|return
name|FuzzySet
operator|.
name|createSetBasedOnMaxMemory
argument_list|(
literal|1024
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isSaturated
specifier|public
name|boolean
name|isSaturated
parameter_list|(
name|FuzzySet
name|bloomFilter
parameter_list|,
name|FieldInfo
name|fieldInfo
parameter_list|)
block|{
comment|// For test purposes always maintain the BloomFilter - even past the point
comment|// of usefulness when all bits are set
return|return
literal|false
return|;
block|}
block|}
DECL|method|TestBloomFilteredLucenePostings
specifier|public
name|TestBloomFilteredLucenePostings
parameter_list|()
block|{
name|super
argument_list|(
literal|"TestBloomFilteredLucenePostings"
argument_list|)
expr_stmt|;
name|delegate
operator|=
operator|new
name|BloomFilteringPostingsFormat
argument_list|(
name|TestUtil
operator|.
name|getDefaultPostingsFormat
argument_list|()
argument_list|,
operator|new
name|LowMemoryBloomFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fieldsConsumer
specifier|public
name|FieldsConsumer
name|fieldsConsumer
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|fieldsConsumer
argument_list|(
name|state
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|fieldsProducer
specifier|public
name|FieldsProducer
name|fieldsProducer
parameter_list|(
name|SegmentReadState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|fieldsProducer
argument_list|(
name|state
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TestBloomFilteredLucenePostings("
operator|+
name|delegate
operator|+
literal|")"
return|;
block|}
block|}
end_class
end_unit
