begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.mocksep
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|mocksep
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|sep
operator|.
name|IntIndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CodecUtil
import|;
end_import
begin_comment
comment|/** Reads IndexInputs written with {@link  *  MockSingleIntIndexOutput}.  NOTE: this class is just for  *  demonstration puprposes (it is a very slow way to read a  *  block of ints).  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|MockSingleIntIndexInput
specifier|public
class|class
name|MockSingleIntIndexInput
extends|extends
name|IntIndexInput
block|{
DECL|field|in
specifier|private
specifier|final
name|IndexInput
name|in
decl_stmt|;
DECL|method|MockSingleIntIndexInput
specifier|public
name|MockSingleIntIndexInput
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|fileName
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|in
argument_list|,
name|MockSingleIntIndexOutput
operator|.
name|CODEC
argument_list|,
name|MockSingleIntIndexOutput
operator|.
name|VERSION_START
argument_list|,
name|MockSingleIntIndexOutput
operator|.
name|VERSION_START
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reader
specifier|public
name|Reader
name|reader
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|Reader
argument_list|(
operator|(
name|IndexInput
operator|)
name|in
operator|.
name|clone
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|Reader
specifier|public
specifier|static
class|class
name|Reader
extends|extends
name|IntIndexInput
operator|.
name|Reader
block|{
comment|// clone:
DECL|field|in
specifier|private
specifier|final
name|IndexInput
name|in
decl_stmt|;
DECL|method|Reader
specifier|public
name|Reader
parameter_list|(
name|IndexInput
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
comment|/** Reads next single int */
annotation|@
name|Override
DECL|method|next
specifier|public
name|int
name|next
parameter_list|()
throws|throws
name|IOException
block|{
comment|//System.out.println("msii.next() fp=" + in.getFilePointer() + " vs " + in.length());
return|return
name|in
operator|.
name|readVInt
argument_list|()
return|;
block|}
block|}
DECL|class|MockSingleIntIndexInputIndex
class|class
name|MockSingleIntIndexInputIndex
extends|extends
name|IntIndexInput
operator|.
name|Index
block|{
DECL|field|fp
specifier|private
name|long
name|fp
decl_stmt|;
annotation|@
name|Override
DECL|method|read
specifier|public
name|void
name|read
parameter_list|(
name|DataInput
name|indexIn
parameter_list|,
name|boolean
name|absolute
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|absolute
condition|)
block|{
name|fp
operator|=
name|indexIn
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fp
operator|+=
name|indexIn
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|copyFrom
specifier|public
name|void
name|copyFrom
parameter_list|(
name|IntIndexInput
operator|.
name|Index
name|other
parameter_list|)
block|{
name|fp
operator|=
operator|(
operator|(
name|MockSingleIntIndexInputIndex
operator|)
name|other
operator|)
operator|.
name|fp
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|seek
specifier|public
name|void
name|seek
parameter_list|(
name|IntIndexInput
operator|.
name|Reader
name|other
parameter_list|)
throws|throws
name|IOException
block|{
operator|(
operator|(
name|Reader
operator|)
name|other
operator|)
operator|.
name|in
operator|.
name|seek
argument_list|(
name|fp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|fp
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|Index
name|clone
parameter_list|()
block|{
name|MockSingleIntIndexInputIndex
name|other
init|=
operator|new
name|MockSingleIntIndexInputIndex
argument_list|()
decl_stmt|;
name|other
operator|.
name|fp
operator|=
name|fp
expr_stmt|;
return|return
name|other
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|index
specifier|public
name|Index
name|index
parameter_list|()
block|{
return|return
operator|new
name|MockSingleIntIndexInputIndex
argument_list|()
return|;
block|}
block|}
end_class
end_unit
