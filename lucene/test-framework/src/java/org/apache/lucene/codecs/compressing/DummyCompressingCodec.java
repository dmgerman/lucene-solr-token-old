begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.compressing
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|compressing
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/** CompressionCodec that does not compress data, useful for testing. */
end_comment
begin_class
DECL|class|DummyCompressingCodec
specifier|public
class|class
name|DummyCompressingCodec
extends|extends
name|CompressingCodec
block|{
DECL|field|DUMMY
specifier|public
specifier|static
specifier|final
name|CompressionMode
name|DUMMY
init|=
operator|new
name|CompressionMode
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Compressor
name|newCompressor
parameter_list|()
block|{
return|return
name|DUMMY_COMPRESSOR
return|;
block|}
annotation|@
name|Override
specifier|public
name|Decompressor
name|newDecompressor
parameter_list|()
block|{
return|return
name|DUMMY_DECOMPRESSOR
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DUMMY"
return|;
block|}
block|}
decl_stmt|;
DECL|field|DUMMY_DECOMPRESSOR
specifier|private
specifier|static
specifier|final
name|Decompressor
name|DUMMY_DECOMPRESSOR
init|=
operator|new
name|Decompressor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|decompress
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|int
name|originalLength
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|BytesRef
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|offset
operator|+
name|length
operator|<=
name|originalLength
assert|;
if|if
condition|(
name|bytes
operator|.
name|bytes
operator|.
name|length
operator|<
name|originalLength
condition|)
block|{
name|bytes
operator|.
name|bytes
operator|=
operator|new
name|byte
index|[
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|originalLength
argument_list|,
literal|1
argument_list|)
index|]
expr_stmt|;
block|}
name|in
operator|.
name|readBytes
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|offset
operator|+
name|length
argument_list|)
expr_stmt|;
name|bytes
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|bytes
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|copyCompressedData
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|int
name|originalLength
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|originalLength
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Decompressor
name|clone
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
decl_stmt|;
DECL|field|DUMMY_COMPRESSOR
specifier|private
specifier|static
specifier|final
name|Compressor
name|DUMMY_COMPRESSOR
init|=
operator|new
name|Compressor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|compress
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeBytes
argument_list|(
name|bytes
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/** Constructor that allows to configure the chunk size. */
DECL|method|DummyCompressingCodec
specifier|public
name|DummyCompressingCodec
parameter_list|(
name|int
name|chunkSize
parameter_list|)
block|{
name|super
argument_list|(
literal|"DummyCompressingStoredFields"
argument_list|,
name|DUMMY
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
block|}
comment|/** Default constructor. */
DECL|method|DummyCompressingCodec
specifier|public
name|DummyCompressingCodec
parameter_list|()
block|{
name|this
argument_list|(
literal|1
operator|<<
literal|14
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
