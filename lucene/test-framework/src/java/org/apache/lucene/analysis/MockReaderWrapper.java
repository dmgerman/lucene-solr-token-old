begin_unit
begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_comment
comment|/** Wraps a Reader, and can throw random or fixed  *  exceptions, and spoon feed read chars. */
end_comment
begin_class
DECL|class|MockReaderWrapper
specifier|public
class|class
name|MockReaderWrapper
extends|extends
name|Reader
block|{
DECL|field|in
specifier|private
specifier|final
name|Reader
name|in
decl_stmt|;
DECL|field|random
specifier|private
specifier|final
name|Random
name|random
decl_stmt|;
DECL|field|excAtChar
specifier|private
name|int
name|excAtChar
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|readSoFar
specifier|private
name|int
name|readSoFar
decl_stmt|;
DECL|field|throwExcNext
specifier|private
name|boolean
name|throwExcNext
decl_stmt|;
DECL|method|MockReaderWrapper
specifier|public
name|MockReaderWrapper
parameter_list|(
name|Random
name|random
parameter_list|,
name|Reader
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|random
operator|=
name|random
expr_stmt|;
block|}
comment|/** Throw an exception after reading this many chars. */
DECL|method|throwExcAfterChar
specifier|public
name|void
name|throwExcAfterChar
parameter_list|(
name|int
name|charUpto
parameter_list|)
block|{
name|excAtChar
operator|=
name|charUpto
expr_stmt|;
comment|// You should only call this on init!:
assert|assert
name|readSoFar
operator|==
literal|0
assert|;
block|}
DECL|method|throwExcNext
specifier|public
name|void
name|throwExcNext
parameter_list|()
block|{
name|throwExcNext
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|(
name|char
index|[]
name|cbuf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|throwExcNext
operator|||
operator|(
name|excAtChar
operator|!=
operator|-
literal|1
operator|&&
name|readSoFar
operator|>=
name|excAtChar
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"fake exception now!"
argument_list|)
throw|;
block|}
specifier|final
name|int
name|read
decl_stmt|;
specifier|final
name|int
name|realLen
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|1
condition|)
block|{
name|realLen
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// Spoon-feed: intentionally maybe return less than
comment|// the consumer asked for
name|realLen
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|excAtChar
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|final
name|int
name|left
init|=
name|excAtChar
operator|-
name|readSoFar
decl_stmt|;
assert|assert
name|left
operator|!=
literal|0
assert|;
name|read
operator|=
name|in
operator|.
name|read
argument_list|(
name|cbuf
argument_list|,
name|off
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|realLen
argument_list|,
name|left
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
name|read
operator|!=
operator|-
literal|1
assert|;
name|readSoFar
operator|+=
name|read
expr_stmt|;
block|}
else|else
block|{
name|read
operator|=
name|in
operator|.
name|read
argument_list|(
name|cbuf
argument_list|,
name|off
argument_list|,
name|realLen
argument_list|)
expr_stmt|;
block|}
return|return
name|read
return|;
block|}
annotation|@
name|Override
DECL|method|markSupported
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|ready
specifier|public
name|boolean
name|ready
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|isMyEvilException
specifier|public
specifier|static
name|boolean
name|isMyEvilException
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
operator|(
name|t
operator|instanceof
name|RuntimeException
operator|)
operator|&&
literal|"fake exception now!"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class
begin_empty_stmt
empty_stmt|;
end_empty_stmt
end_unit
