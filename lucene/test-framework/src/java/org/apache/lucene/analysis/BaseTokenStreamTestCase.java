begin_unit
begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Attribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_comment
comment|/**   * Base class for all Lucene unit tests that use TokenStreams.   *<p>  * When writing unit tests for analysis components, its highly recommended  * to use the helper methods here (especially in conjunction with {@link MockAnalyzer} or  * {@link MockTokenizer}), as they contain many assertions and checks to   * catch bugs.  *   * @see MockAnalyzer  * @see MockTokenizer  */
end_comment
begin_class
DECL|class|BaseTokenStreamTestCase
specifier|public
specifier|abstract
class|class
name|BaseTokenStreamTestCase
extends|extends
name|LuceneTestCase
block|{
comment|// some helpers to test Analyzers and TokenStreams:
comment|/**    * Attribute that records if it was cleared or not.  This is used     * for testing that clearAttributes() was called correctly.    */
DECL|interface|CheckClearAttributesAttribute
specifier|public
specifier|static
interface|interface
name|CheckClearAttributesAttribute
extends|extends
name|Attribute
block|{
DECL|method|getAndResetClearCalled
name|boolean
name|getAndResetClearCalled
parameter_list|()
function_decl|;
block|}
comment|/**    * Attribute that records if it was cleared or not.  This is used     * for testing that clearAttributes() was called correctly.    */
DECL|class|CheckClearAttributesAttributeImpl
specifier|public
specifier|static
specifier|final
class|class
name|CheckClearAttributesAttributeImpl
extends|extends
name|AttributeImpl
implements|implements
name|CheckClearAttributesAttribute
block|{
DECL|field|clearCalled
specifier|private
name|boolean
name|clearCalled
init|=
literal|false
decl_stmt|;
DECL|method|getAndResetClearCalled
specifier|public
name|boolean
name|getAndResetClearCalled
parameter_list|()
block|{
try|try
block|{
return|return
name|clearCalled
return|;
block|}
finally|finally
block|{
name|clearCalled
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|clearCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
return|return
operator|(
name|other
operator|instanceof
name|CheckClearAttributesAttributeImpl
operator|&&
operator|(
operator|(
name|CheckClearAttributesAttributeImpl
operator|)
name|other
operator|)
operator|.
name|clearCalled
operator|==
name|this
operator|.
name|clearCalled
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|76137213
operator|^
name|Boolean
operator|.
name|valueOf
argument_list|(
name|clearCalled
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|copyTo
specifier|public
name|void
name|copyTo
parameter_list|(
name|AttributeImpl
name|target
parameter_list|)
block|{
operator|(
operator|(
name|CheckClearAttributesAttributeImpl
operator|)
name|target
operator|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|assertTokenStreamContents
specifier|public
specifier|static
name|void
name|assertTokenStreamContents
parameter_list|(
name|TokenStream
name|ts
parameter_list|,
name|String
index|[]
name|output
parameter_list|,
name|int
name|startOffsets
index|[]
parameter_list|,
name|int
name|endOffsets
index|[]
parameter_list|,
name|String
name|types
index|[]
parameter_list|,
name|int
name|posIncrements
index|[]
parameter_list|,
name|int
name|posLengths
index|[]
parameter_list|,
name|Integer
name|finalOffset
parameter_list|)
throws|throws
name|IOException
block|{
name|assertNotNull
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|CheckClearAttributesAttribute
name|checkClearAtt
init|=
name|ts
operator|.
name|addAttribute
argument_list|(
name|CheckClearAttributesAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"has no CharTermAttribute"
argument_list|,
name|ts
operator|.
name|hasAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|CharTermAttribute
name|termAtt
init|=
name|ts
operator|.
name|getAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|OffsetAttribute
name|offsetAtt
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|startOffsets
operator|!=
literal|null
operator|||
name|endOffsets
operator|!=
literal|null
operator|||
name|finalOffset
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"has no OffsetAttribute"
argument_list|,
name|ts
operator|.
name|hasAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|offsetAtt
operator|=
name|ts
operator|.
name|getAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|TypeAttribute
name|typeAtt
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"has no TypeAttribute"
argument_list|,
name|ts
operator|.
name|hasAttribute
argument_list|(
name|TypeAttribute
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|typeAtt
operator|=
name|ts
operator|.
name|getAttribute
argument_list|(
name|TypeAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|PositionIncrementAttribute
name|posIncrAtt
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|posIncrements
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"has no PositionIncrementAttribute"
argument_list|,
name|ts
operator|.
name|hasAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|posIncrAtt
operator|=
name|ts
operator|.
name|getAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|PositionLengthAttribute
name|posLengthAtt
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|posLengths
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"has no PositionLengthAttribute"
argument_list|,
name|ts
operator|.
name|hasAttribute
argument_list|(
name|PositionLengthAttribute
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|posLengthAtt
operator|=
name|ts
operator|.
name|getAttribute
argument_list|(
name|PositionLengthAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|ts
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|output
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// extra safety to enforce, that the state is not preserved and also assign bogus values
name|ts
operator|.
name|clearAttributes
argument_list|()
expr_stmt|;
name|termAtt
operator|.
name|setEmpty
argument_list|()
operator|.
name|append
argument_list|(
literal|"bogusTerm"
argument_list|)
expr_stmt|;
if|if
condition|(
name|offsetAtt
operator|!=
literal|null
condition|)
name|offsetAtt
operator|.
name|setOffset
argument_list|(
literal|14584724
argument_list|,
literal|24683243
argument_list|)
expr_stmt|;
if|if
condition|(
name|typeAtt
operator|!=
literal|null
condition|)
name|typeAtt
operator|.
name|setType
argument_list|(
literal|"bogusType"
argument_list|)
expr_stmt|;
if|if
condition|(
name|posIncrAtt
operator|!=
literal|null
condition|)
name|posIncrAtt
operator|.
name|setPositionIncrement
argument_list|(
literal|45987657
argument_list|)
expr_stmt|;
if|if
condition|(
name|posLengthAtt
operator|!=
literal|null
condition|)
name|posLengthAtt
operator|.
name|setPositionLength
argument_list|(
literal|45987653
argument_list|)
expr_stmt|;
name|checkClearAtt
operator|.
name|getAndResetClearCalled
argument_list|()
expr_stmt|;
comment|// reset it, because we called clearAttribute() before
name|assertTrue
argument_list|(
literal|"token "
operator|+
name|i
operator|+
literal|" does not exist"
argument_list|,
name|ts
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"clearAttributes() was not called correctly in TokenStream chain"
argument_list|,
name|checkClearAtt
operator|.
name|getAndResetClearCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"term "
operator|+
name|i
argument_list|,
name|output
index|[
name|i
index|]
argument_list|,
name|termAtt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|startOffsets
operator|!=
literal|null
condition|)
name|assertEquals
argument_list|(
literal|"startOffset "
operator|+
name|i
argument_list|,
name|startOffsets
index|[
name|i
index|]
argument_list|,
name|offsetAtt
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|endOffsets
operator|!=
literal|null
condition|)
name|assertEquals
argument_list|(
literal|"endOffset "
operator|+
name|i
argument_list|,
name|endOffsets
index|[
name|i
index|]
argument_list|,
name|offsetAtt
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
name|assertEquals
argument_list|(
literal|"type "
operator|+
name|i
argument_list|,
name|types
index|[
name|i
index|]
argument_list|,
name|typeAtt
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|posIncrements
operator|!=
literal|null
condition|)
name|assertEquals
argument_list|(
literal|"posIncrement "
operator|+
name|i
argument_list|,
name|posIncrements
index|[
name|i
index|]
argument_list|,
name|posIncrAtt
operator|.
name|getPositionIncrement
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|posLengths
operator|!=
literal|null
condition|)
name|assertEquals
argument_list|(
literal|"posLength "
operator|+
name|i
argument_list|,
name|posLengths
index|[
name|i
index|]
argument_list|,
name|posLengthAtt
operator|.
name|getPositionLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// we can enforce some basic things about a few attributes even if the caller doesn't check:
if|if
condition|(
name|offsetAtt
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"startOffset must be>= 0"
argument_list|,
name|offsetAtt
operator|.
name|startOffset
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"endOffset must be>= 0"
argument_list|,
name|offsetAtt
operator|.
name|endOffset
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"endOffset must be>= startOffset"
argument_list|,
name|offsetAtt
operator|.
name|endOffset
argument_list|()
operator|>=
name|offsetAtt
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|finalOffset
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"startOffset must be<= finalOffset"
argument_list|,
name|offsetAtt
operator|.
name|startOffset
argument_list|()
operator|<=
name|finalOffset
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"endOffset must be<= finalOffset: got endOffset="
operator|+
name|offsetAtt
operator|.
name|endOffset
argument_list|()
operator|+
literal|" vs finalOffset="
operator|+
name|finalOffset
operator|.
name|intValue
argument_list|()
argument_list|,
name|offsetAtt
operator|.
name|endOffset
argument_list|()
operator|<=
name|finalOffset
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|posIncrAtt
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
literal|"first posIncrement must be>= 1"
argument_list|,
name|posIncrAtt
operator|.
name|getPositionIncrement
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"posIncrement must be>= 0"
argument_list|,
name|posIncrAtt
operator|.
name|getPositionIncrement
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|posLengthAtt
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"posLength must be>= 1"
argument_list|,
name|posLengthAtt
operator|.
name|getPositionLength
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
literal|"TokenStream has more tokens than expected"
argument_list|,
name|ts
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
name|ts
operator|.
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
name|finalOffset
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"finalOffset "
argument_list|,
name|finalOffset
operator|.
name|intValue
argument_list|()
argument_list|,
name|offsetAtt
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|offsetAtt
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"finalOffset must be>= 0"
argument_list|,
name|offsetAtt
operator|.
name|endOffset
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
name|ts
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|assertTokenStreamContents
specifier|public
specifier|static
name|void
name|assertTokenStreamContents
parameter_list|(
name|TokenStream
name|ts
parameter_list|,
name|String
index|[]
name|output
parameter_list|,
name|int
name|startOffsets
index|[]
parameter_list|,
name|int
name|endOffsets
index|[]
parameter_list|,
name|String
name|types
index|[]
parameter_list|,
name|int
name|posIncrements
index|[]
parameter_list|,
name|Integer
name|finalOffset
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
name|output
argument_list|,
name|startOffsets
argument_list|,
name|endOffsets
argument_list|,
name|types
argument_list|,
name|posIncrements
argument_list|,
literal|null
argument_list|,
name|finalOffset
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTokenStreamContents
specifier|public
specifier|static
name|void
name|assertTokenStreamContents
parameter_list|(
name|TokenStream
name|ts
parameter_list|,
name|String
index|[]
name|output
parameter_list|,
name|int
name|startOffsets
index|[]
parameter_list|,
name|int
name|endOffsets
index|[]
parameter_list|,
name|String
name|types
index|[]
parameter_list|,
name|int
name|posIncrements
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
name|output
argument_list|,
name|startOffsets
argument_list|,
name|endOffsets
argument_list|,
name|types
argument_list|,
name|posIncrements
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTokenStreamContents
specifier|public
specifier|static
name|void
name|assertTokenStreamContents
parameter_list|(
name|TokenStream
name|ts
parameter_list|,
name|String
index|[]
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
name|output
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTokenStreamContents
specifier|public
specifier|static
name|void
name|assertTokenStreamContents
parameter_list|(
name|TokenStream
name|ts
parameter_list|,
name|String
index|[]
name|output
parameter_list|,
name|String
index|[]
name|types
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
name|output
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|types
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTokenStreamContents
specifier|public
specifier|static
name|void
name|assertTokenStreamContents
parameter_list|(
name|TokenStream
name|ts
parameter_list|,
name|String
index|[]
name|output
parameter_list|,
name|int
index|[]
name|posIncrements
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
name|output
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|posIncrements
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTokenStreamContents
specifier|public
specifier|static
name|void
name|assertTokenStreamContents
parameter_list|(
name|TokenStream
name|ts
parameter_list|,
name|String
index|[]
name|output
parameter_list|,
name|int
name|startOffsets
index|[]
parameter_list|,
name|int
name|endOffsets
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
name|output
argument_list|,
name|startOffsets
argument_list|,
name|endOffsets
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTokenStreamContents
specifier|public
specifier|static
name|void
name|assertTokenStreamContents
parameter_list|(
name|TokenStream
name|ts
parameter_list|,
name|String
index|[]
name|output
parameter_list|,
name|int
name|startOffsets
index|[]
parameter_list|,
name|int
name|endOffsets
index|[]
parameter_list|,
name|Integer
name|finalOffset
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
name|output
argument_list|,
name|startOffsets
argument_list|,
name|endOffsets
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|finalOffset
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTokenStreamContents
specifier|public
specifier|static
name|void
name|assertTokenStreamContents
parameter_list|(
name|TokenStream
name|ts
parameter_list|,
name|String
index|[]
name|output
parameter_list|,
name|int
name|startOffsets
index|[]
parameter_list|,
name|int
name|endOffsets
index|[]
parameter_list|,
name|int
index|[]
name|posIncrements
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
name|output
argument_list|,
name|startOffsets
argument_list|,
name|endOffsets
argument_list|,
literal|null
argument_list|,
name|posIncrements
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTokenStreamContents
specifier|public
specifier|static
name|void
name|assertTokenStreamContents
parameter_list|(
name|TokenStream
name|ts
parameter_list|,
name|String
index|[]
name|output
parameter_list|,
name|int
name|startOffsets
index|[]
parameter_list|,
name|int
name|endOffsets
index|[]
parameter_list|,
name|int
index|[]
name|posIncrements
parameter_list|,
name|Integer
name|finalOffset
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
name|output
argument_list|,
name|startOffsets
argument_list|,
name|endOffsets
argument_list|,
literal|null
argument_list|,
name|posIncrements
argument_list|,
literal|null
argument_list|,
name|finalOffset
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTokenStreamContents
specifier|public
specifier|static
name|void
name|assertTokenStreamContents
parameter_list|(
name|TokenStream
name|ts
parameter_list|,
name|String
index|[]
name|output
parameter_list|,
name|int
name|startOffsets
index|[]
parameter_list|,
name|int
name|endOffsets
index|[]
parameter_list|,
name|int
index|[]
name|posIncrements
parameter_list|,
name|int
index|[]
name|posLengths
parameter_list|,
name|Integer
name|finalOffset
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
name|output
argument_list|,
name|startOffsets
argument_list|,
name|endOffsets
argument_list|,
literal|null
argument_list|,
name|posIncrements
argument_list|,
name|posLengths
argument_list|,
name|finalOffset
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAnalyzesTo
specifier|public
specifier|static
name|void
name|assertAnalyzesTo
parameter_list|(
name|Analyzer
name|a
parameter_list|,
name|String
name|input
parameter_list|,
name|String
index|[]
name|output
parameter_list|,
name|int
name|startOffsets
index|[]
parameter_list|,
name|int
name|endOffsets
index|[]
parameter_list|,
name|String
name|types
index|[]
parameter_list|,
name|int
name|posIncrements
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTokenStreamContents
argument_list|(
name|a
operator|.
name|tokenStream
argument_list|(
literal|"dummy"
argument_list|,
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
argument_list|,
name|output
argument_list|,
name|startOffsets
argument_list|,
name|endOffsets
argument_list|,
name|types
argument_list|,
name|posIncrements
argument_list|,
literal|null
argument_list|,
name|input
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAnalyzesTo
specifier|public
specifier|static
name|void
name|assertAnalyzesTo
parameter_list|(
name|Analyzer
name|a
parameter_list|,
name|String
name|input
parameter_list|,
name|String
index|[]
name|output
parameter_list|,
name|int
name|startOffsets
index|[]
parameter_list|,
name|int
name|endOffsets
index|[]
parameter_list|,
name|String
name|types
index|[]
parameter_list|,
name|int
name|posIncrements
index|[]
parameter_list|,
name|int
name|posLengths
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTokenStreamContents
argument_list|(
name|a
operator|.
name|tokenStream
argument_list|(
literal|"dummy"
argument_list|,
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
argument_list|,
name|output
argument_list|,
name|startOffsets
argument_list|,
name|endOffsets
argument_list|,
name|types
argument_list|,
name|posIncrements
argument_list|,
name|posLengths
argument_list|,
name|input
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAnalyzesTo
specifier|public
specifier|static
name|void
name|assertAnalyzesTo
parameter_list|(
name|Analyzer
name|a
parameter_list|,
name|String
name|input
parameter_list|,
name|String
index|[]
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
name|input
argument_list|,
name|output
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAnalyzesTo
specifier|public
specifier|static
name|void
name|assertAnalyzesTo
parameter_list|(
name|Analyzer
name|a
parameter_list|,
name|String
name|input
parameter_list|,
name|String
index|[]
name|output
parameter_list|,
name|String
index|[]
name|types
parameter_list|)
throws|throws
name|IOException
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
name|input
argument_list|,
name|output
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|types
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAnalyzesTo
specifier|public
specifier|static
name|void
name|assertAnalyzesTo
parameter_list|(
name|Analyzer
name|a
parameter_list|,
name|String
name|input
parameter_list|,
name|String
index|[]
name|output
parameter_list|,
name|int
index|[]
name|posIncrements
parameter_list|)
throws|throws
name|IOException
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
name|input
argument_list|,
name|output
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|posIncrements
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAnalyzesToPositions
specifier|public
specifier|static
name|void
name|assertAnalyzesToPositions
parameter_list|(
name|Analyzer
name|a
parameter_list|,
name|String
name|input
parameter_list|,
name|String
index|[]
name|output
parameter_list|,
name|int
index|[]
name|posIncrements
parameter_list|,
name|int
index|[]
name|posLengths
parameter_list|)
throws|throws
name|IOException
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
name|input
argument_list|,
name|output
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|posIncrements
argument_list|,
name|posLengths
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAnalyzesTo
specifier|public
specifier|static
name|void
name|assertAnalyzesTo
parameter_list|(
name|Analyzer
name|a
parameter_list|,
name|String
name|input
parameter_list|,
name|String
index|[]
name|output
parameter_list|,
name|int
name|startOffsets
index|[]
parameter_list|,
name|int
name|endOffsets
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
name|input
argument_list|,
name|output
argument_list|,
name|startOffsets
argument_list|,
name|endOffsets
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAnalyzesTo
specifier|public
specifier|static
name|void
name|assertAnalyzesTo
parameter_list|(
name|Analyzer
name|a
parameter_list|,
name|String
name|input
parameter_list|,
name|String
index|[]
name|output
parameter_list|,
name|int
name|startOffsets
index|[]
parameter_list|,
name|int
name|endOffsets
index|[]
parameter_list|,
name|int
index|[]
name|posIncrements
parameter_list|)
throws|throws
name|IOException
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
name|input
argument_list|,
name|output
argument_list|,
name|startOffsets
argument_list|,
name|endOffsets
argument_list|,
literal|null
argument_list|,
name|posIncrements
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAnalyzesToReuse
specifier|public
specifier|static
name|void
name|assertAnalyzesToReuse
parameter_list|(
name|Analyzer
name|a
parameter_list|,
name|String
name|input
parameter_list|,
name|String
index|[]
name|output
parameter_list|,
name|int
name|startOffsets
index|[]
parameter_list|,
name|int
name|endOffsets
index|[]
parameter_list|,
name|String
name|types
index|[]
parameter_list|,
name|int
name|posIncrements
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTokenStreamContents
argument_list|(
name|a
operator|.
name|tokenStream
argument_list|(
literal|"dummy"
argument_list|,
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
argument_list|,
name|output
argument_list|,
name|startOffsets
argument_list|,
name|endOffsets
argument_list|,
name|types
argument_list|,
name|posIncrements
argument_list|,
literal|null
argument_list|,
name|input
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAnalyzesToReuse
specifier|public
specifier|static
name|void
name|assertAnalyzesToReuse
parameter_list|(
name|Analyzer
name|a
parameter_list|,
name|String
name|input
parameter_list|,
name|String
index|[]
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|assertAnalyzesToReuse
argument_list|(
name|a
argument_list|,
name|input
argument_list|,
name|output
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAnalyzesToReuse
specifier|public
specifier|static
name|void
name|assertAnalyzesToReuse
parameter_list|(
name|Analyzer
name|a
parameter_list|,
name|String
name|input
parameter_list|,
name|String
index|[]
name|output
parameter_list|,
name|String
index|[]
name|types
parameter_list|)
throws|throws
name|IOException
block|{
name|assertAnalyzesToReuse
argument_list|(
name|a
argument_list|,
name|input
argument_list|,
name|output
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|types
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAnalyzesToReuse
specifier|public
specifier|static
name|void
name|assertAnalyzesToReuse
parameter_list|(
name|Analyzer
name|a
parameter_list|,
name|String
name|input
parameter_list|,
name|String
index|[]
name|output
parameter_list|,
name|int
index|[]
name|posIncrements
parameter_list|)
throws|throws
name|IOException
block|{
name|assertAnalyzesToReuse
argument_list|(
name|a
argument_list|,
name|input
argument_list|,
name|output
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|posIncrements
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAnalyzesToReuse
specifier|public
specifier|static
name|void
name|assertAnalyzesToReuse
parameter_list|(
name|Analyzer
name|a
parameter_list|,
name|String
name|input
parameter_list|,
name|String
index|[]
name|output
parameter_list|,
name|int
name|startOffsets
index|[]
parameter_list|,
name|int
name|endOffsets
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|assertAnalyzesToReuse
argument_list|(
name|a
argument_list|,
name|input
argument_list|,
name|output
argument_list|,
name|startOffsets
argument_list|,
name|endOffsets
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAnalyzesToReuse
specifier|public
specifier|static
name|void
name|assertAnalyzesToReuse
parameter_list|(
name|Analyzer
name|a
parameter_list|,
name|String
name|input
parameter_list|,
name|String
index|[]
name|output
parameter_list|,
name|int
name|startOffsets
index|[]
parameter_list|,
name|int
name|endOffsets
index|[]
parameter_list|,
name|int
index|[]
name|posIncrements
parameter_list|)
throws|throws
name|IOException
block|{
name|assertAnalyzesToReuse
argument_list|(
name|a
argument_list|,
name|input
argument_list|,
name|output
argument_list|,
name|startOffsets
argument_list|,
name|endOffsets
argument_list|,
literal|null
argument_list|,
name|posIncrements
argument_list|)
expr_stmt|;
block|}
comment|// simple utility method for testing stemmers
DECL|method|checkOneTerm
specifier|public
specifier|static
name|void
name|checkOneTerm
parameter_list|(
name|Analyzer
name|a
parameter_list|,
specifier|final
name|String
name|input
parameter_list|,
specifier|final
name|String
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
name|input
argument_list|,
operator|new
name|String
index|[]
block|{
name|expected
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|checkOneTermReuse
specifier|public
specifier|static
name|void
name|checkOneTermReuse
parameter_list|(
name|Analyzer
name|a
parameter_list|,
specifier|final
name|String
name|input
parameter_list|,
specifier|final
name|String
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|assertAnalyzesToReuse
argument_list|(
name|a
argument_list|,
name|input
argument_list|,
operator|new
name|String
index|[]
block|{
name|expected
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** utility method for blasting tokenstreams with data to make sure they don't do anything crazy */
DECL|method|checkRandomData
specifier|public
specifier|static
name|void
name|checkRandomData
parameter_list|(
name|Random
name|random
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|int
name|iterations
parameter_list|)
throws|throws
name|IOException
block|{
name|checkRandomData
argument_list|(
name|random
argument_list|,
name|a
argument_list|,
name|iterations
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**     * utility method for blasting tokenstreams with data to make sure they don't do anything crazy     * @param simple true if only ascii strings will be used (try to avoid)    */
DECL|method|checkRandomData
specifier|public
specifier|static
name|void
name|checkRandomData
parameter_list|(
name|Random
name|random
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|int
name|iterations
parameter_list|,
name|boolean
name|simple
parameter_list|)
throws|throws
name|IOException
block|{
name|checkRandomData
argument_list|(
name|random
argument_list|,
name|a
argument_list|,
name|iterations
argument_list|,
literal|20
argument_list|,
name|simple
argument_list|)
expr_stmt|;
block|}
DECL|class|AnalysisThread
specifier|static
class|class
name|AnalysisThread
extends|extends
name|Thread
block|{
DECL|field|iterations
specifier|final
name|int
name|iterations
decl_stmt|;
DECL|field|maxWordLength
specifier|final
name|int
name|maxWordLength
decl_stmt|;
DECL|field|random
specifier|final
name|Random
name|random
decl_stmt|;
DECL|field|a
specifier|final
name|Analyzer
name|a
decl_stmt|;
DECL|field|simple
specifier|final
name|boolean
name|simple
decl_stmt|;
DECL|method|AnalysisThread
name|AnalysisThread
parameter_list|(
name|Random
name|random
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|int
name|iterations
parameter_list|,
name|int
name|maxWordLength
parameter_list|,
name|boolean
name|simple
parameter_list|)
block|{
name|this
operator|.
name|random
operator|=
name|random
expr_stmt|;
name|this
operator|.
name|a
operator|=
name|a
expr_stmt|;
name|this
operator|.
name|iterations
operator|=
name|iterations
expr_stmt|;
name|this
operator|.
name|maxWordLength
operator|=
name|maxWordLength
expr_stmt|;
name|this
operator|.
name|simple
operator|=
name|simple
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// see the part in checkRandomData where it replays the same text again
comment|// to verify reproducability/reuse: hopefully this would catch thread hazards.
name|checkRandomData
argument_list|(
name|random
argument_list|,
name|a
argument_list|,
name|iterations
argument_list|,
name|maxWordLength
argument_list|,
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|,
name|simple
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
empty_stmt|;
DECL|method|checkRandomData
specifier|public
specifier|static
name|void
name|checkRandomData
parameter_list|(
name|Random
name|random
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|int
name|iterations
parameter_list|,
name|int
name|maxWordLength
parameter_list|,
name|boolean
name|simple
parameter_list|)
throws|throws
name|IOException
block|{
name|checkRandomData
argument_list|(
name|random
argument_list|,
name|a
argument_list|,
name|iterations
argument_list|,
name|maxWordLength
argument_list|,
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|,
name|simple
argument_list|)
expr_stmt|;
comment|// now test with multiple threads
name|int
name|numThreads
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|Thread
name|threads
index|[]
init|=
operator|new
name|Thread
index|[
name|numThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|AnalysisThread
argument_list|(
operator|new
name|Random
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
name|a
argument_list|,
name|iterations
argument_list|,
name|maxWordLength
argument_list|,
name|simple
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|checkRandomData
specifier|private
specifier|static
name|void
name|checkRandomData
parameter_list|(
name|Random
name|random
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|int
name|iterations
parameter_list|,
name|int
name|maxWordLength
parameter_list|,
name|boolean
name|useCharFilter
parameter_list|,
name|boolean
name|simple
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|String
name|text
decl_stmt|;
if|if
condition|(
name|simple
condition|)
block|{
name|text
operator|=
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|_TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|,
name|maxWordLength
argument_list|)
else|:
name|_TestUtil
operator|.
name|randomHtmlishString
argument_list|(
name|random
argument_list|,
name|maxWordLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|text
operator|=
name|_TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|,
name|maxWordLength
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|text
operator|=
name|_TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|,
name|maxWordLength
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|text
operator|=
name|_TestUtil
operator|.
name|randomHtmlishString
argument_list|(
name|random
argument_list|,
name|maxWordLength
argument_list|)
expr_stmt|;
break|break;
default|default:
name|text
operator|=
name|_TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|,
name|maxWordLength
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": NOTE: BaseTokenStreamTestCase: get first token stream now text="
operator|+
name|text
argument_list|)
expr_stmt|;
block|}
name|int
name|remainder
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
name|a
operator|.
name|tokenStream
argument_list|(
literal|"dummy"
argument_list|,
name|useCharFilter
condition|?
operator|new
name|MockCharFilter
argument_list|(
name|reader
argument_list|,
name|remainder
argument_list|)
else|:
name|reader
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"has no CharTermAttribute"
argument_list|,
name|ts
operator|.
name|hasAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|CharTermAttribute
name|termAtt
init|=
name|ts
operator|.
name|getAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|OffsetAttribute
name|offsetAtt
init|=
name|ts
operator|.
name|hasAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
condition|?
name|ts
operator|.
name|getAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
else|:
literal|null
decl_stmt|;
name|PositionIncrementAttribute
name|posIncAtt
init|=
name|ts
operator|.
name|hasAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
condition|?
name|ts
operator|.
name|getAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
else|:
literal|null
decl_stmt|;
name|PositionLengthAttribute
name|posLengthAtt
init|=
name|ts
operator|.
name|hasAttribute
argument_list|(
name|PositionLengthAttribute
operator|.
name|class
argument_list|)
condition|?
name|ts
operator|.
name|getAttribute
argument_list|(
name|PositionLengthAttribute
operator|.
name|class
argument_list|)
else|:
literal|null
decl_stmt|;
name|TypeAttribute
name|typeAtt
init|=
name|ts
operator|.
name|hasAttribute
argument_list|(
name|TypeAttribute
operator|.
name|class
argument_list|)
condition|?
name|ts
operator|.
name|getAttribute
argument_list|(
name|TypeAttribute
operator|.
name|class
argument_list|)
else|:
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|positions
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|positionLengths
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|startOffsets
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|endOffsets
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|ts
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// First pass: save away "correct" tokens
while|while
condition|(
name|ts
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|termAtt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|typeAtt
operator|!=
literal|null
condition|)
name|types
operator|.
name|add
argument_list|(
name|typeAtt
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|posIncAtt
operator|!=
literal|null
condition|)
name|positions
operator|.
name|add
argument_list|(
name|posIncAtt
operator|.
name|getPositionIncrement
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|posLengthAtt
operator|!=
literal|null
condition|)
name|positionLengths
operator|.
name|add
argument_list|(
name|posLengthAtt
operator|.
name|getPositionLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|offsetAtt
operator|!=
literal|null
condition|)
block|{
name|startOffsets
operator|.
name|add
argument_list|(
name|offsetAtt
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|endOffsets
operator|.
name|add
argument_list|(
name|offsetAtt
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ts
operator|.
name|end
argument_list|()
expr_stmt|;
name|ts
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// verify reusing is "reproducable" and also get the normal tokenstream sanity checks
if|if
condition|(
operator|!
name|tokens
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// KWTokenizer (for example) can produce a token
comment|// even when input is length 0:
if|if
condition|(
name|text
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// (Optional) second pass: do something evil:
specifier|final
name|int
name|evilness
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
decl_stmt|;
if|if
condition|(
name|evilness
operator|==
literal|17
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": NOTE: BaseTokenStreamTestCase: re-run analysis w/ exception"
argument_list|)
expr_stmt|;
block|}
comment|// Throw an errant exception from the Reader:
name|MockReaderWrapper
name|evilReader
init|=
operator|new
name|MockReaderWrapper
argument_list|(
name|random
argument_list|,
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
argument_list|)
decl_stmt|;
name|evilReader
operator|.
name|throwExcAfterChar
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|text
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|=
name|evilReader
expr_stmt|;
try|try
block|{
comment|// NOTE: some Tokenizers go and read characters
comment|// when you call .setReader(Reader), eg
comment|// PatternTokenizer.  This is a bit
comment|// iffy... (really, they should only
comment|// pull from the Reader when you call
comment|// .incremenToken(), I think?), but we
comment|// currently allow it, so, we must call
comment|// a.tokenStream inside the try since we may
comment|// hit the exc on init:
name|ts
operator|=
name|a
operator|.
name|tokenStream
argument_list|(
literal|"dummy"
argument_list|,
name|useCharFilter
condition|?
operator|new
name|MockCharFilter
argument_list|(
name|evilReader
argument_list|,
name|remainder
argument_list|)
else|:
name|evilReader
argument_list|)
expr_stmt|;
name|ts
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|ts
operator|.
name|incrementToken
argument_list|()
condition|)
empty_stmt|;
name|fail
argument_list|(
literal|"did not hit exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|MockReaderWrapper
operator|.
name|isMyEvilException
argument_list|(
name|re
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ts
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|ae
parameter_list|)
block|{
comment|// Catch& ignore MockTokenizer's
comment|// anger...
if|if
condition|(
literal|"end() called before incrementToken() returned false!"
operator|.
name|equals
argument_list|(
name|ae
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
comment|// OK
block|}
else|else
block|{
throw|throw
name|ae
throw|;
block|}
block|}
name|ts
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|evilness
operator|==
literal|7
condition|)
block|{
comment|// Only consume a subset of the tokens:
specifier|final
name|int
name|numTokensToRead
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": NOTE: BaseTokenStreamTestCase: re-run analysis, only consuming "
operator|+
name|numTokensToRead
operator|+
literal|" of "
operator|+
name|tokens
operator|.
name|size
argument_list|()
operator|+
literal|" tokens"
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|ts
operator|=
name|a
operator|.
name|tokenStream
argument_list|(
literal|"dummy"
argument_list|,
name|useCharFilter
condition|?
operator|new
name|MockCharFilter
argument_list|(
name|reader
argument_list|,
name|remainder
argument_list|)
else|:
name|reader
argument_list|)
expr_stmt|;
name|ts
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|tokenCount
init|=
literal|0
init|;
name|tokenCount
operator|<
name|numTokensToRead
condition|;
name|tokenCount
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|ts
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ts
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|ae
parameter_list|)
block|{
comment|// Catch& ignore MockTokenizer's
comment|// anger...
if|if
condition|(
literal|"end() called before incrementToken() returned false!"
operator|.
name|equals
argument_list|(
name|ae
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
comment|// OK
block|}
else|else
block|{
throw|throw
name|ae
throw|;
block|}
block|}
name|ts
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Final pass: verify clean tokenization matches
comment|// results from first pass:
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": NOTE: BaseTokenStreamTestCase: re-run analysis; "
operator|+
name|tokens
operator|.
name|size
argument_list|()
operator|+
literal|" tokens"
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|30
argument_list|)
operator|==
literal|7
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": NOTE: BaseTokenStreamTestCase: using spoon-feed reader"
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
operator|new
name|MockReaderWrapper
argument_list|(
name|random
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
name|ts
operator|=
name|a
operator|.
name|tokenStream
argument_list|(
literal|"dummy"
argument_list|,
name|useCharFilter
condition|?
operator|new
name|MockCharFilter
argument_list|(
name|reader
argument_list|,
name|remainder
argument_list|)
else|:
name|reader
argument_list|)
expr_stmt|;
if|if
condition|(
name|typeAtt
operator|!=
literal|null
operator|&&
name|posIncAtt
operator|!=
literal|null
operator|&&
name|posLengthAtt
operator|!=
literal|null
operator|&&
name|offsetAtt
operator|!=
literal|null
condition|)
block|{
comment|// offset + pos + posLength + type
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
name|tokens
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|tokens
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|toIntArray
argument_list|(
name|startOffsets
argument_list|)
argument_list|,
name|toIntArray
argument_list|(
name|endOffsets
argument_list|)
argument_list|,
name|types
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|types
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|toIntArray
argument_list|(
name|positions
argument_list|)
argument_list|,
name|toIntArray
argument_list|(
name|positionLengths
argument_list|)
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeAtt
operator|!=
literal|null
operator|&&
name|posIncAtt
operator|!=
literal|null
operator|&&
name|offsetAtt
operator|!=
literal|null
condition|)
block|{
comment|// offset + pos + type
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
name|tokens
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|tokens
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|toIntArray
argument_list|(
name|startOffsets
argument_list|)
argument_list|,
name|toIntArray
argument_list|(
name|endOffsets
argument_list|)
argument_list|,
name|types
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|types
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|toIntArray
argument_list|(
name|positions
argument_list|)
argument_list|,
literal|null
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|posIncAtt
operator|!=
literal|null
operator|&&
name|posLengthAtt
operator|!=
literal|null
operator|&&
name|offsetAtt
operator|!=
literal|null
condition|)
block|{
comment|// offset + pos + posLength
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
name|tokens
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|tokens
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|toIntArray
argument_list|(
name|startOffsets
argument_list|)
argument_list|,
name|toIntArray
argument_list|(
name|endOffsets
argument_list|)
argument_list|,
literal|null
argument_list|,
name|toIntArray
argument_list|(
name|positions
argument_list|)
argument_list|,
name|toIntArray
argument_list|(
name|positionLengths
argument_list|)
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|posIncAtt
operator|!=
literal|null
operator|&&
name|offsetAtt
operator|!=
literal|null
condition|)
block|{
comment|// offset + pos
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
name|tokens
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|tokens
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|toIntArray
argument_list|(
name|startOffsets
argument_list|)
argument_list|,
name|toIntArray
argument_list|(
name|endOffsets
argument_list|)
argument_list|,
literal|null
argument_list|,
name|toIntArray
argument_list|(
name|positions
argument_list|)
argument_list|,
literal|null
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|offsetAtt
operator|!=
literal|null
condition|)
block|{
comment|// offset
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
name|tokens
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|tokens
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|toIntArray
argument_list|(
name|startOffsets
argument_list|)
argument_list|,
name|toIntArray
argument_list|(
name|endOffsets
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// terms only
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
name|tokens
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|tokens
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|toDot
specifier|protected
name|String
name|toDot
parameter_list|(
name|Analyzer
name|a
parameter_list|,
name|String
name|inputText
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|final
name|TokenStream
name|ts
init|=
name|a
operator|.
name|tokenStream
argument_list|(
literal|"field"
argument_list|,
operator|new
name|StringReader
argument_list|(
name|inputText
argument_list|)
argument_list|)
decl_stmt|;
name|ts
operator|.
name|reset
argument_list|()
expr_stmt|;
operator|new
name|TokenStreamToDot
argument_list|(
name|inputText
argument_list|,
name|ts
argument_list|,
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
argument_list|)
operator|.
name|toDot
argument_list|()
expr_stmt|;
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|toDotFile
specifier|protected
name|void
name|toDotFile
parameter_list|(
name|Analyzer
name|a
parameter_list|,
name|String
name|inputText
parameter_list|,
name|String
name|localFileName
parameter_list|)
throws|throws
name|IOException
block|{
name|Writer
name|w
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|localFileName
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
specifier|final
name|TokenStream
name|ts
init|=
name|a
operator|.
name|tokenStream
argument_list|(
literal|"field"
argument_list|,
operator|new
name|StringReader
argument_list|(
name|inputText
argument_list|)
argument_list|)
decl_stmt|;
name|ts
operator|.
name|reset
argument_list|()
expr_stmt|;
operator|new
name|TokenStreamToDot
argument_list|(
name|inputText
argument_list|,
name|ts
argument_list|,
operator|new
name|PrintWriter
argument_list|(
name|w
argument_list|)
argument_list|)
operator|.
name|toDot
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|toIntArray
specifier|static
name|int
index|[]
name|toIntArray
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|list
parameter_list|)
block|{
name|int
name|ret
index|[]
init|=
operator|new
name|int
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|i
range|:
name|list
control|)
block|{
name|ret
index|[
name|offset
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class
end_unit
