begin_unit
begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionLengthAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RollingBuffer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_comment
comment|// TODO: sometimes remove tokens too...?
end_comment
begin_comment
comment|/** Randomly inserts overlapped (posInc=0) tokens with  *  posLength sometimes> 1.  The chain must have  *  an OffsetAttribute.  */
end_comment
begin_class
DECL|class|MockGraphTokenFilter
specifier|public
specifier|final
class|class
name|MockGraphTokenFilter
extends|extends
name|TokenFilter
block|{
DECL|field|DEBUG
specifier|private
specifier|static
name|boolean
name|DEBUG
init|=
literal|false
decl_stmt|;
DECL|field|termAtt
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posIncAtt
specifier|private
specifier|final
name|PositionIncrementAttribute
name|posIncAtt
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posLengthAtt
specifier|private
specifier|final
name|PositionLengthAttribute
name|posLengthAtt
init|=
name|addAttribute
argument_list|(
name|PositionLengthAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|offsetAtt
specifier|private
specifier|final
name|OffsetAttribute
name|offsetAtt
init|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|seed
specifier|private
specifier|final
name|long
name|seed
decl_stmt|;
DECL|field|random
specifier|private
name|Random
name|random
decl_stmt|;
comment|// Don't init to -1 (caller must first call reset):
DECL|field|inputPos
specifier|private
name|int
name|inputPos
decl_stmt|;
DECL|field|outputPos
specifier|private
name|int
name|outputPos
decl_stmt|;
comment|// Don't init to -1 (caller must first call reset):
DECL|field|lastOutputPos
specifier|private
name|int
name|lastOutputPos
decl_stmt|;
DECL|field|end
specifier|private
name|boolean
name|end
decl_stmt|;
DECL|class|Position
specifier|private
specifier|final
class|class
name|Position
implements|implements
name|RollingBuffer
operator|.
name|Resettable
block|{
DECL|field|states
specifier|final
name|List
argument_list|<
name|AttributeSource
operator|.
name|State
argument_list|>
name|states
init|=
operator|new
name|ArrayList
argument_list|<
name|AttributeSource
operator|.
name|State
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|nextRead
name|int
name|nextRead
decl_stmt|;
comment|// Any token leaving from this position should have this startOffset:
DECL|field|startOffset
name|int
name|startOffset
init|=
operator|-
literal|1
decl_stmt|;
comment|// Any token arriving to this positoin should have this endOffset:
DECL|field|endOffset
name|int
name|endOffset
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|states
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nextRead
operator|=
literal|0
expr_stmt|;
name|startOffset
operator|=
operator|-
literal|1
expr_stmt|;
name|endOffset
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|captureState
specifier|public
name|void
name|captureState
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|startOffset
operator|==
name|offsetAtt
operator|.
name|startOffset
argument_list|()
assert|;
name|states
operator|.
name|add
argument_list|(
name|MockGraphTokenFilter
operator|.
name|this
operator|.
name|captureState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|positions
specifier|private
specifier|final
name|RollingBuffer
argument_list|<
name|Position
argument_list|>
name|positions
init|=
operator|new
name|RollingBuffer
argument_list|<
name|Position
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Position
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|Position
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|method|MockGraphTokenFilter
specifier|public
name|MockGraphTokenFilter
parameter_list|(
name|Random
name|random
parameter_list|,
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|seed
operator|=
name|random
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|end
operator|=
literal|false
expr_stmt|;
name|positions
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// NOTE: must be "deterministically random" because
comment|// BaseTokenStreamTestCase pulls tokens twice on the
comment|// same input and asserts they are the same:
name|this
operator|.
name|random
operator|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|inputPos
operator|=
operator|-
literal|1
expr_stmt|;
name|outputPos
operator|=
literal|0
expr_stmt|;
name|lastOutputPos
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|enum|TOKEN_POS
DECL|enum constant|SAME
DECL|enum constant|NEXT
DECL|enum constant|END
specifier|private
enum|enum
name|TOKEN_POS
block|{
name|SAME
block|,
name|NEXT
block|,
name|END
block|}
empty_stmt|;
DECL|method|nextInputToken
specifier|private
name|TOKEN_POS
name|nextInputToken
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
operator|!
name|end
assert|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  call input.incr"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|result
init|=
name|input
operator|.
name|incrementToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
specifier|final
name|int
name|posInc
init|=
name|posIncAtt
operator|.
name|getPositionIncrement
argument_list|()
decl_stmt|;
specifier|final
name|int
name|posLength
init|=
name|posLengthAtt
operator|.
name|getPositionLength
argument_list|()
decl_stmt|;
comment|// NOTE: when posLength> 1, we have a hole... we
comment|// don't allow injected tokens to start or end
comment|// "inside" a hole, so we don't need to make up
comment|// offsets inside it
assert|assert
name|inputPos
operator|!=
operator|-
literal|1
operator|||
name|posInc
operator|>
literal|0
assert|;
name|inputPos
operator|+=
name|posInc
expr_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    got token term="
operator|+
name|termAtt
operator|+
literal|" posLength="
operator|+
name|posLength
operator|+
literal|" posInc="
operator|+
name|posInc
operator|+
literal|" inputPos="
operator|+
name|inputPos
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Position
name|posData
init|=
name|positions
operator|.
name|get
argument_list|(
name|inputPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|posInc
operator|==
literal|0
condition|)
block|{
assert|assert
name|posData
operator|.
name|startOffset
operator|==
name|offsetAtt
operator|.
name|startOffset
argument_list|()
assert|;
block|}
else|else
block|{
assert|assert
name|posData
operator|.
name|startOffset
operator|==
operator|-
literal|1
assert|;
name|posData
operator|.
name|startOffset
operator|=
name|offsetAtt
operator|.
name|startOffset
argument_list|()
expr_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    record startOffset["
operator|+
name|inputPos
operator|+
literal|"]="
operator|+
name|posData
operator|.
name|startOffset
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Position
name|posEndData
init|=
name|positions
operator|.
name|get
argument_list|(
name|inputPos
operator|+
name|posLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|posEndData
operator|.
name|endOffset
operator|==
operator|-
literal|1
condition|)
block|{
comment|// First time we are seeing a token that
comment|// arrives to this position: record the
comment|// endOffset
name|posEndData
operator|.
name|endOffset
operator|=
name|offsetAtt
operator|.
name|endOffset
argument_list|()
expr_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    record endOffset["
operator|+
operator|(
name|inputPos
operator|+
name|posLength
operator|)
operator|+
literal|"]="
operator|+
name|posEndData
operator|.
name|endOffset
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// We've already seen a token arriving there;
comment|// make sure its endOffset is the same (NOTE:
comment|// some tokenizers, eg WDF, will fail
comment|// this...):
assert|assert
name|posEndData
operator|.
name|endOffset
operator|==
name|offsetAtt
operator|.
name|endOffset
argument_list|()
operator|:
literal|"posEndData.endOffset="
operator|+
name|posEndData
operator|.
name|endOffset
operator|+
literal|" vs offsetAtt.endOffset()="
operator|+
name|offsetAtt
operator|.
name|endOffset
argument_list|()
assert|;
block|}
if|if
condition|(
name|posInc
operator|==
literal|0
condition|)
block|{
return|return
name|TOKEN_POS
operator|.
name|SAME
return|;
block|}
else|else
block|{
return|return
name|TOKEN_POS
operator|.
name|NEXT
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    got END"
argument_list|)
expr_stmt|;
block|}
return|return
name|TOKEN_POS
operator|.
name|END
return|;
block|}
block|}
DECL|method|pushOutputPos
specifier|private
name|void
name|pushOutputPos
parameter_list|()
block|{
name|posIncAtt
operator|.
name|setPositionIncrement
argument_list|(
name|outputPos
operator|-
name|lastOutputPos
argument_list|)
expr_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  pushOutputPos: set posInc="
operator|+
name|posIncAtt
operator|.
name|getPositionIncrement
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|lastOutputPos
operator|=
name|outputPos
expr_stmt|;
name|positions
operator|.
name|freeBefore
argument_list|(
name|outputPos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MockGraphTF.incr inputPos="
operator|+
name|inputPos
operator|+
literal|" outputPos="
operator|+
name|outputPos
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|Position
name|posData
init|=
name|positions
operator|.
name|get
argument_list|(
name|outputPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|posData
operator|.
name|nextRead
operator|<
name|posData
operator|.
name|states
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// Serve up all buffered tokens from this position:
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  restore buffered nextRead="
operator|+
name|posData
operator|.
name|nextRead
operator|+
literal|" vs "
operator|+
name|posData
operator|.
name|states
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|restoreState
argument_list|(
name|posData
operator|.
name|states
operator|.
name|get
argument_list|(
name|posData
operator|.
name|nextRead
operator|++
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    term="
operator|+
name|termAtt
operator|+
literal|" outputPos="
operator|+
name|outputPos
argument_list|)
expr_stmt|;
block|}
name|pushOutputPos
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
name|boolean
name|tokenPending
init|=
literal|false
decl_stmt|;
specifier|final
name|int
name|prevInputPos
init|=
name|inputPos
decl_stmt|;
if|if
condition|(
name|inputPos
operator|==
operator|-
literal|1
operator|||
name|inputPos
operator|==
name|outputPos
condition|)
block|{
comment|// We've used up the buffered tokens; pull the next
comment|// input token:
if|if
condition|(
name|end
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|TOKEN_POS
name|result
init|=
name|nextInputToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|TOKEN_POS
operator|.
name|SAME
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|result
operator|==
name|TOKEN_POS
operator|.
name|NEXT
condition|)
block|{
name|tokenPending
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// NOTE: we don't set end=true here... because we
comment|// are immediately passing through "the end" to
comment|// caller (return false), and caller must not call
comment|// us again:
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
assert|assert
name|inputPos
operator|>
name|outputPos
assert|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  done @ outputPos="
operator|+
name|outputPos
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We're done (above) serving up all tokens leaving
comment|// from the same position; now maybe insert a token.
comment|// Note that we may insert more than one token leaving
comment|// from this position.  We only inject tokens at
comment|// positions where we've seen at least one input token
comment|// (ie, we cannot inject inside holes):
if|if
condition|(
name|prevInputPos
operator|!=
operator|-
literal|1
operator|&&
name|positions
operator|.
name|get
argument_list|(
name|outputPos
argument_list|)
operator|.
name|startOffset
operator|!=
operator|-
literal|1
operator|&&
name|random
operator|.
name|nextInt
argument_list|(
literal|7
argument_list|)
operator|==
literal|5
condition|)
block|{
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  inject @ outputPos="
operator|+
name|outputPos
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tokenPending
condition|)
block|{
name|positions
operator|.
name|get
argument_list|(
name|inputPos
argument_list|)
operator|.
name|captureState
argument_list|()
expr_stmt|;
block|}
specifier|final
name|int
name|posLength
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|Position
name|posEndData
init|=
name|positions
operator|.
name|get
argument_list|(
name|outputPos
operator|+
name|posLength
argument_list|)
decl_stmt|;
comment|// Pull enough tokens until we discover what our
comment|// endOffset should be:
while|while
condition|(
operator|!
name|end
operator|&&
name|posEndData
operator|.
name|endOffset
operator|==
operator|-
literal|1
operator|&&
name|inputPos
operator|<=
operator|(
name|outputPos
operator|+
name|posLength
operator|)
condition|)
block|{
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  lookahead [endPos="
operator|+
operator|(
name|outputPos
operator|+
name|posLength
operator|)
operator|+
literal|"]..."
argument_list|)
expr_stmt|;
block|}
specifier|final
name|TOKEN_POS
name|result
init|=
name|nextInputToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|TOKEN_POS
operator|.
name|END
condition|)
block|{
name|positions
operator|.
name|get
argument_list|(
name|inputPos
argument_list|)
operator|.
name|captureState
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|end
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    force end lookahead"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
comment|// TODO: really, here, on hitting end-of-tokens,
comment|// we'd like to know the ending "posInc", and allow
comment|// our token to extend up until that.  But: a
comment|// TokenFilter is not allowed to call end() from
comment|// within its incrementToken, so we can't do that.
comment|// It may have been better if the ending
comment|// posInc/offsets were set when incrementToken
comment|// returned false (ie, without having to call the
comment|// special end method):
if|if
condition|(
name|posEndData
operator|.
name|endOffset
operator|!=
operator|-
literal|1
condition|)
block|{
assert|assert
name|posEndData
operator|.
name|endOffset
operator|!=
operator|-
literal|1
assert|;
name|clearAttributes
argument_list|()
expr_stmt|;
name|posLengthAtt
operator|.
name|setPositionLength
argument_list|(
name|posLength
argument_list|)
expr_stmt|;
name|termAtt
operator|.
name|append
argument_list|(
name|_TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|)
argument_list|)
expr_stmt|;
name|pushOutputPos
argument_list|()
expr_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|positions
operator|.
name|get
argument_list|(
name|outputPos
argument_list|)
operator|.
name|startOffset
argument_list|,
name|positions
operator|.
name|get
argument_list|(
name|outputPos
operator|+
name|posLength
argument_list|)
operator|.
name|endOffset
argument_list|)
expr_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  inject: outputPos="
operator|+
name|outputPos
operator|+
literal|" startOffset="
operator|+
name|offsetAtt
operator|.
name|startOffset
argument_list|()
operator|+
literal|" endOffset="
operator|+
name|offsetAtt
operator|.
name|endOffset
argument_list|()
operator|+
literal|" posLength="
operator|+
name|posLengthAtt
operator|.
name|getPositionLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO: set TypeAtt too?
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// Either, we hit the end of the tokens (ie, our
comment|// attempted posLength is too long because it
comment|// hangs out over the end), or, our attempted
comment|// posLength ended in the middle of a hole; just
comment|// skip injecting in these cases.  We will still
comment|// test these cases by having a StopFilter after
comment|// MockGraphTokenFilter...
block|}
block|}
elseif|else
if|if
condition|(
name|tokenPending
condition|)
block|{
name|outputPos
operator|=
name|inputPos
expr_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  pass-through"
argument_list|)
expr_stmt|;
block|}
name|pushOutputPos
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// We are skipping over a hole (posInc> 1) from our input:
name|outputPos
operator|++
expr_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  incr outputPos="
operator|+
name|outputPos
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
