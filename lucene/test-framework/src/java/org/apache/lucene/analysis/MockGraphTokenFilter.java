begin_unit
begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_comment
comment|// TODO: sometimes remove tokens too...?
end_comment
begin_comment
comment|/** Randomly inserts overlapped (posInc=0) tokens with  *  posLength sometimes> 1.  The chain must have  *  an OffsetAttribute.  */
end_comment
begin_class
DECL|class|MockGraphTokenFilter
specifier|public
specifier|final
class|class
name|MockGraphTokenFilter
extends|extends
name|LookaheadTokenFilter
argument_list|<
name|LookaheadTokenFilter
operator|.
name|Position
argument_list|>
block|{
DECL|field|DEBUG
specifier|private
specifier|static
name|boolean
name|DEBUG
init|=
literal|false
decl_stmt|;
DECL|field|termAtt
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|seed
specifier|private
specifier|final
name|long
name|seed
decl_stmt|;
DECL|field|random
specifier|private
name|Random
name|random
decl_stmt|;
DECL|method|MockGraphTokenFilter
specifier|public
name|MockGraphTokenFilter
parameter_list|(
name|Random
name|random
parameter_list|,
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|seed
operator|=
name|random
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newPosition
specifier|protected
name|Position
name|newPosition
parameter_list|()
block|{
return|return
operator|new
name|Position
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|afterPosition
specifier|protected
name|void
name|afterPosition
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MockGraphTF.afterPos"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|7
argument_list|)
operator|==
literal|5
condition|)
block|{
specifier|final
name|int
name|posLength
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  do insert! posLen="
operator|+
name|posLength
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Position
name|posEndData
init|=
name|positions
operator|.
name|get
argument_list|(
name|outputPos
operator|+
name|posLength
argument_list|)
decl_stmt|;
comment|// Look ahead as needed until we figure out the right
comment|// endOffset:
while|while
condition|(
operator|!
name|end
operator|&&
name|posEndData
operator|.
name|endOffset
operator|==
operator|-
literal|1
operator|&&
name|inputPos
operator|<=
operator|(
name|outputPos
operator|+
name|posLength
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|peekToken
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|posEndData
operator|.
name|endOffset
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Notify super class that we are injecting a token:
name|insertToken
argument_list|()
expr_stmt|;
name|clearAttributes
argument_list|()
expr_stmt|;
name|posLenAtt
operator|.
name|setPositionLength
argument_list|(
name|posLength
argument_list|)
expr_stmt|;
name|termAtt
operator|.
name|append
argument_list|(
name|_TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|)
argument_list|)
expr_stmt|;
name|posIncAtt
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|positions
operator|.
name|get
argument_list|(
name|outputPos
argument_list|)
operator|.
name|startOffset
argument_list|,
name|posEndData
operator|.
name|endOffset
argument_list|)
expr_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  inject: outputPos="
operator|+
name|outputPos
operator|+
literal|" startOffset="
operator|+
name|offsetAtt
operator|.
name|startOffset
argument_list|()
operator|+
literal|" endOffset="
operator|+
name|offsetAtt
operator|.
name|endOffset
argument_list|()
operator|+
literal|" posLength="
operator|+
name|posLenAtt
operator|.
name|getPositionLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO: set TypeAtt too?
block|}
else|else
block|{
comment|// Either 1) the tokens ended before our posLength,
comment|// or 2) our posLength ended inside a hole from the
comment|// input.  In each case we just skip the inserted
comment|// token.
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// NOTE: must be "deterministically random" because
comment|// BaseTokenStreamTestCase pulls tokens twice on the
comment|// same input and asserts they are the same:
name|this
operator|.
name|random
operator|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MockGraphTF.incr inputPos="
operator|+
name|inputPos
operator|+
literal|" outputPos="
operator|+
name|outputPos
argument_list|)
expr_stmt|;
block|}
return|return
name|nextToken
argument_list|()
return|;
block|}
block|}
end_class
end_unit
