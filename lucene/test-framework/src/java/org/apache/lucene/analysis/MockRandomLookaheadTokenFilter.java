begin_unit
begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_comment
comment|/**  * Uses {@link LookaheadTokenFilter} to randomly peek at future tokens.  */
end_comment
begin_class
DECL|class|MockRandomLookaheadTokenFilter
specifier|public
specifier|final
class|class
name|MockRandomLookaheadTokenFilter
extends|extends
name|LookaheadTokenFilter
argument_list|<
name|LookaheadTokenFilter
operator|.
name|Position
argument_list|>
block|{
DECL|field|DEBUG
specifier|private
specifier|final
specifier|static
name|boolean
name|DEBUG
init|=
literal|false
decl_stmt|;
DECL|field|termAtt
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|random
specifier|private
specifier|final
name|Random
name|random
decl_stmt|;
DECL|method|MockRandomLookaheadTokenFilter
specifier|public
name|MockRandomLookaheadTokenFilter
parameter_list|(
name|Random
name|random
parameter_list|,
name|TokenStream
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|random
operator|=
name|random
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newPosition
specifier|public
name|Position
name|newPosition
parameter_list|()
block|{
return|return
operator|new
name|Position
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|afterPosition
specifier|protected
name|void
name|afterPosition
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|end
operator|&&
name|random
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
operator|==
literal|2
condition|)
block|{
name|peekToken
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": MRLTF.incrToken"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|end
condition|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
comment|// We can use un-re-seeded random, because how far
comment|// ahead we peek should never alter the resulting
comment|// tokens as seen by the consumer:
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|==
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|peekToken
argument_list|()
condition|)
block|{
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  peek; inputPos="
operator|+
name|inputPos
operator|+
literal|" END"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  peek; inputPos="
operator|+
name|inputPos
operator|+
literal|" token="
operator|+
name|termAtt
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  done peek"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
specifier|final
name|boolean
name|result
init|=
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  return nextToken token="
operator|+
name|termAtt
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  return nextToken END"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class
end_unit
