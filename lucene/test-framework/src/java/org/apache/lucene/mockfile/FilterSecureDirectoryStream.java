begin_unit
begin_package
DECL|package|org.apache.lucene.mockfile
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|mockfile
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|SeekableByteChannel
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|LinkOption
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|OpenOption
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|SecureDirectoryStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|FileAttribute
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|FileAttributeView
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_comment
comment|/**    * A {@code FilterSecureDirectoryStream} contains another   * {@code SecureDirectoryStream}, which it uses as its basic   * source of data, possibly transforming the data along the   * way or providing additional functionality.   */
end_comment
begin_class
DECL|class|FilterSecureDirectoryStream
specifier|public
class|class
name|FilterSecureDirectoryStream
parameter_list|<
name|T
parameter_list|>
implements|implements
name|SecureDirectoryStream
argument_list|<
name|T
argument_list|>
block|{
comment|/**     * The underlying {@code SecureDirectoryStream} instance.     */
DECL|field|delegate
specifier|protected
specifier|final
name|SecureDirectoryStream
argument_list|<
name|T
argument_list|>
name|delegate
decl_stmt|;
comment|/**    * Construct a {@code FilterSecureDirectoryStream} based on     * the specified base stream.    *<p>    * Note that base stream is closed if this stream is closed.    * @param delegate specified base stream.    */
DECL|method|FilterSecureDirectoryStream
specifier|public
name|FilterSecureDirectoryStream
parameter_list|(
name|SecureDirectoryStream
argument_list|<
name|T
argument_list|>
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|delegate
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newDirectoryStream
specifier|public
name|SecureDirectoryStream
argument_list|<
name|T
argument_list|>
name|newDirectoryStream
parameter_list|(
name|T
name|path
parameter_list|,
name|LinkOption
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|newDirectoryStream
argument_list|(
name|path
argument_list|,
name|options
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newByteChannel
specifier|public
name|SeekableByteChannel
name|newByteChannel
parameter_list|(
name|T
name|path
parameter_list|,
name|Set
argument_list|<
name|?
extends|extends
name|OpenOption
argument_list|>
name|options
parameter_list|,
name|FileAttribute
argument_list|<
name|?
argument_list|>
modifier|...
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|newByteChannel
argument_list|(
name|path
argument_list|,
name|options
argument_list|,
name|attrs
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|deleteFile
specifier|public
name|void
name|deleteFile
parameter_list|(
name|T
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|delegate
operator|.
name|deleteFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|deleteDirectory
specifier|public
name|void
name|deleteDirectory
parameter_list|(
name|T
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|delegate
operator|.
name|deleteDirectory
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|move
specifier|public
name|void
name|move
parameter_list|(
name|T
name|srcpath
parameter_list|,
name|SecureDirectoryStream
argument_list|<
name|T
argument_list|>
name|targetdir
parameter_list|,
name|T
name|targetpath
parameter_list|)
throws|throws
name|IOException
block|{
name|delegate
operator|.
name|move
argument_list|(
name|srcpath
argument_list|,
name|targetdir
argument_list|,
name|targetpath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFileAttributeView
specifier|public
parameter_list|<
name|V
extends|extends
name|FileAttributeView
parameter_list|>
name|V
name|getFileAttributeView
parameter_list|(
name|Class
argument_list|<
name|V
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getFileAttributeView
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileAttributeView
specifier|public
parameter_list|<
name|V
extends|extends
name|FileAttributeView
parameter_list|>
name|V
name|getFileAttributeView
parameter_list|(
name|T
name|path
parameter_list|,
name|Class
argument_list|<
name|V
argument_list|>
name|type
parameter_list|,
name|LinkOption
modifier|...
name|options
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getFileAttributeView
argument_list|(
name|path
argument_list|,
name|type
argument_list|,
name|options
argument_list|)
return|;
block|}
block|}
end_class
end_unit
