begin_unit
begin_package
DECL|package|org.apache.lucene.mockfile
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|mockfile
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|AccessDeniedException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystem
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_comment
comment|/**   * Acts like Windows, where random programs may open the files you just wrote in an unfriendly  * way preventing deletion (e.g. not passing FILE_SHARE_DELETE) or renaming or overwriting etc.  */
end_comment
begin_class
DECL|class|VirusCheckingFS
specifier|public
class|class
name|VirusCheckingFS
extends|extends
name|FilterFileSystemProvider
block|{
comment|// nocommit cannot use random here
DECL|field|random
specifier|final
name|Random
name|random
decl_stmt|;
DECL|field|enabled
specifier|private
name|boolean
name|enabled
init|=
literal|true
decl_stmt|;
comment|/**     * Create a new instance, wrapping {@code delegate}.    */
DECL|method|VirusCheckingFS
specifier|public
name|VirusCheckingFS
parameter_list|(
name|FileSystem
name|delegate
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
name|super
argument_list|(
literal|"viruschecking://"
argument_list|,
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|random
operator|=
operator|new
name|Random
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|disable
specifier|public
name|void
name|disable
parameter_list|()
block|{
name|enabled
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|enabled
comment|// test infra disables when it's "really" time to delete after test is done
operator|&&
name|Files
operator|.
name|exists
argument_list|(
name|path
argument_list|)
comment|// important that we NOT delay a NoSuchFileException until later
operator|&&
name|path
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|IndexWriter
operator|.
name|WRITE_LOCK_NAME
argument_list|)
operator|==
literal|false
comment|// life is particularly difficult if the virus checker hits our lock file
operator|&&
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|1
condition|)
block|{
if|if
condition|(
literal|true
operator|||
name|LuceneTestCase
operator|.
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"NOTE: VirusCheckingFS now refusing to delete "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"VirusCheckingFS is randomly refusing to delete file \""
operator|+
name|path
operator|+
literal|"\""
argument_list|)
throw|;
block|}
name|super
operator|.
name|delete
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|// TODO: rename?  createOutput?  deleteIfExists?
block|}
end_class
end_unit
