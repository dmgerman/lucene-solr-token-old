begin_unit
begin_package
DECL|package|org.apache.lucene.mockfile
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|mockfile
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystem
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|FileAttribute
import|;
end_import
begin_comment
comment|/**   * Adds extra files/subdirectories when directories are created.  *<p>  * Lucene shouldn't care about these, but sometimes operating systems  * create special files themselves (.DS_Store, thumbs.db, .nfsXXX, ...),  * so we add them and see what breaks.   *<p>  * When a directory is created, sometimes a file or directory named   * "extra0" will be included with it.  * All other filesystem operations are passed thru as normal.  */
end_comment
begin_class
DECL|class|ExtrasFS
specifier|public
class|class
name|ExtrasFS
extends|extends
name|FilterFileSystemProvider
block|{
DECL|field|active
specifier|final
name|boolean
name|active
decl_stmt|;
DECL|field|createDirectory
specifier|final
name|boolean
name|createDirectory
decl_stmt|;
comment|/**     * Create a new instance, wrapping {@code delegate}.    * @param active {@code true} if we should create extra files    * @param createDirectory {@code true} if we should create directories instead of files.    *        Ignored if {@code active} is {@code false}.    */
DECL|method|ExtrasFS
specifier|public
name|ExtrasFS
parameter_list|(
name|FileSystem
name|delegate
parameter_list|,
name|boolean
name|active
parameter_list|,
name|boolean
name|createDirectory
parameter_list|)
block|{
name|super
argument_list|(
literal|"extras://"
argument_list|,
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|active
operator|=
name|active
expr_stmt|;
name|this
operator|.
name|createDirectory
operator|=
name|createDirectory
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createDirectory
specifier|public
name|void
name|createDirectory
parameter_list|(
name|Path
name|dir
parameter_list|,
name|FileAttribute
argument_list|<
name|?
argument_list|>
modifier|...
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|createDirectory
argument_list|(
name|dir
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
comment|// ok, we created the directory successfully.
if|if
condition|(
name|active
condition|)
block|{
comment|// lets add a bogus file... if this fails, we don't care, its best effort.
try|try
block|{
name|Path
name|target
init|=
name|dir
operator|.
name|resolve
argument_list|(
literal|"extra0"
argument_list|)
decl_stmt|;
if|if
condition|(
name|createDirectory
condition|)
block|{
name|super
operator|.
name|createDirectory
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Files
operator|.
name|createFile
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|// best effort
block|}
block|}
block|}
comment|// TODO: would be great if we overrode attributes, so file size was always zero for
comment|// our fake files. But this is tricky because its hooked into several places.
comment|// Currently MDW has a hack so we don't break disk full tests.
block|}
end_class
end_unit
