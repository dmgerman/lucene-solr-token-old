begin_unit
begin_package
DECL|package|org.apache.lucene.mockfile
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|mockfile
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|AsynchronousFileChannel
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystem
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|OpenOption
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|FileAttribute
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**   * Disables actual calls to fsync.  *<p>  * All other filesystem operations are passed thru as normal.  */
end_comment
begin_class
DECL|class|DisableFsyncFS
specifier|public
class|class
name|DisableFsyncFS
extends|extends
name|FilterFileSystemProvider
block|{
comment|/**     * Create a new instance, wrapping {@code delegate}.    */
DECL|method|DisableFsyncFS
specifier|public
name|DisableFsyncFS
parameter_list|(
name|FileSystem
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
literal|"disablefsync://"
argument_list|,
name|delegate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newFileChannel
specifier|public
name|FileChannel
name|newFileChannel
parameter_list|(
name|Path
name|path
parameter_list|,
name|Set
argument_list|<
name|?
extends|extends
name|OpenOption
argument_list|>
name|options
parameter_list|,
name|FileAttribute
argument_list|<
name|?
argument_list|>
modifier|...
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FilterFileChannel
argument_list|(
name|super
operator|.
name|newFileChannel
argument_list|(
name|path
argument_list|,
name|options
argument_list|,
name|attrs
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|force
parameter_list|(
name|boolean
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|newAsynchronousFileChannel
specifier|public
name|AsynchronousFileChannel
name|newAsynchronousFileChannel
parameter_list|(
name|Path
name|path
parameter_list|,
name|Set
argument_list|<
name|?
extends|extends
name|OpenOption
argument_list|>
name|options
parameter_list|,
name|ExecutorService
name|executor
parameter_list|,
name|FileAttribute
argument_list|<
name|?
argument_list|>
modifier|...
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FilterAsynchronousFileChannel
argument_list|(
name|super
operator|.
name|newAsynchronousFileChannel
argument_list|(
name|path
argument_list|,
name|options
argument_list|,
name|executor
argument_list|,
name|attrs
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|force
parameter_list|(
name|boolean
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{}
block|}
return|;
block|}
block|}
end_class
end_unit
