begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import
begin_comment
comment|/** Replacement for Assume jUnit class, so we can add a message with explanation */
end_comment
begin_class
DECL|class|_TestIgnoredException
specifier|final
class|class
name|_TestIgnoredException
extends|extends
name|RuntimeException
block|{
DECL|method|_TestIgnoredException
name|_TestIgnoredException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|_TestIgnoredException
name|_TestIgnoredException
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMessage
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|super
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" - "
argument_list|)
operator|.
name|append
argument_list|(
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// only this one is called by our code, exception is not used outside this class:
annotation|@
name|Override
DECL|method|printStackTrace
specifier|public
name|void
name|printStackTrace
parameter_list|(
name|PrintStream
name|s
parameter_list|)
block|{
if|if
condition|(
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|println
argument_list|(
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" - Caused by:"
argument_list|)
expr_stmt|;
name|getCause
argument_list|()
operator|.
name|printStackTrace
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|printStackTrace
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
