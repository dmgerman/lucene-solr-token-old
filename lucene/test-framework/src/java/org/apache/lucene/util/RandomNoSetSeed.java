begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_comment
comment|/**  * A random with a delegate, preventing calls to {@link Random#setSeed(long)} and  * permitting end-of-lifecycle markers.   */
end_comment
begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|RandomNoSetSeed
specifier|final
class|class
name|RandomNoSetSeed
extends|extends
name|Random
block|{
DECL|field|delegate
specifier|private
specifier|final
name|Random
name|delegate
decl_stmt|;
comment|/**     * If<code>false</code>, the object is dead. Any calls to any method will result    * in an exception.     */
DECL|field|alive
specifier|private
specifier|volatile
name|boolean
name|alive
init|=
literal|true
decl_stmt|;
DECL|method|setDead
name|void
name|setDead
parameter_list|()
block|{
name|alive
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|RandomNoSetSeed
specifier|public
name|RandomNoSetSeed
parameter_list|(
name|Random
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|protected
name|int
name|next
parameter_list|(
name|int
name|bits
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Shouldn't be reachable."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|nextBoolean
specifier|public
name|boolean
name|nextBoolean
parameter_list|()
block|{
name|checkAlive
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|nextBoolean
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nextBytes
specifier|public
name|void
name|nextBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|checkAlive
argument_list|()
expr_stmt|;
name|delegate
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nextDouble
specifier|public
name|double
name|nextDouble
parameter_list|()
block|{
name|checkAlive
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|nextDouble
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nextFloat
specifier|public
name|float
name|nextFloat
parameter_list|()
block|{
name|checkAlive
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|nextFloat
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nextGaussian
specifier|public
name|double
name|nextGaussian
parameter_list|()
block|{
name|checkAlive
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|nextGaussian
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nextInt
specifier|public
name|int
name|nextInt
parameter_list|()
block|{
name|checkAlive
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|nextInt
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nextInt
specifier|public
name|int
name|nextInt
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|checkAlive
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|nextInt
argument_list|(
name|n
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nextLong
specifier|public
name|long
name|nextLong
parameter_list|()
block|{
name|checkAlive
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|nextLong
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setSeed
specifier|public
name|void
name|setSeed
parameter_list|(
name|long
name|seed
parameter_list|)
block|{
comment|// This is an interesting case of observing uninitialized object from an instance method
comment|// (this method is called from the superclass constructor). We allow it.
if|if
condition|(
name|seed
operator|==
literal|0
operator|&&
name|delegate
operator|==
literal|null
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|RandomNoSetSeed
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" prevents changing the seed of its random generators to assure repeatability"
operator|+
literal|" of tests. If you need a mutable instance of Random, create a new instance,"
operator|+
literal|" preferably with the initial seed aquired from this Random instance."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|checkAlive
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|checkAlive
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|checkAlive
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**    * Check the liveness status.    */
DECL|method|checkAlive
specifier|private
name|void
name|checkAlive
parameter_list|()
block|{
if|if
condition|(
operator|!
name|alive
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"This Random is dead. Do not store references to "
operator|+
literal|"Random instances, acquire an instance when you need one."
argument_list|)
throw|;
block|}
block|}
block|}
end_class
end_unit
