begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|notification
operator|.
name|Failure
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|notification
operator|.
name|RunListener
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A {@link RunListener} that detects suite/ test failures. We need it because failures  * due to thread leaks happen outside of any rule contexts.  */
end_comment
begin_class
DECL|class|FailureMarker
specifier|public
class|class
name|FailureMarker
extends|extends
name|RunListener
block|{
DECL|field|failures
specifier|static
specifier|final
name|AtomicInteger
name|failures
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|testFailure
specifier|public
name|void
name|testFailure
parameter_list|(
name|Failure
name|failure
parameter_list|)
throws|throws
name|Exception
block|{
name|failures
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
DECL|method|hadFailures
specifier|public
specifier|static
name|boolean
name|hadFailures
parameter_list|()
block|{
return|return
name|failures
operator|.
name|get
argument_list|()
operator|>
literal|0
return|;
block|}
DECL|method|getFailures
specifier|static
name|int
name|getFailures
parameter_list|()
block|{
return|return
name|failures
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|resetFailures
specifier|public
specifier|static
name|void
name|resetFailures
parameter_list|()
block|{
name|failures
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
