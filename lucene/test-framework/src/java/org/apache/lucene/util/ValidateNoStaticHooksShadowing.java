begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import static
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|MethodCollector
operator|.
name|allDeclaredMethods
import|;
end_import
begin_import
import|import static
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|MethodCollector
operator|.
name|annotatedWith
import|;
end_import
begin_import
import|import static
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|MethodCollector
operator|.
name|flatten
import|;
end_import
begin_import
import|import static
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|MethodCollector
operator|.
name|removeShadowed
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|ClassValidator
import|;
end_import
begin_comment
comment|/**  * Don't allow shadowing of {@link BeforeClass} or {@link AfterClass} hooks  * as it is very likely a user error and will prevent execution of shadowed hooks.  */
end_comment
begin_class
DECL|class|ValidateNoStaticHooksShadowing
specifier|public
class|class
name|ValidateNoStaticHooksShadowing
implements|implements
name|ClassValidator
block|{
annotation|@
name|Override
DECL|method|validate
specifier|public
name|void
name|validate
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|List
argument_list|<
name|Method
argument_list|>
argument_list|>
name|all
init|=
name|allDeclaredMethods
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|checkNoShadows
argument_list|(
name|clazz
argument_list|,
name|all
argument_list|,
name|BeforeClass
operator|.
name|class
argument_list|)
expr_stmt|;
name|checkNoShadows
argument_list|(
name|clazz
argument_list|,
name|all
argument_list|,
name|AfterClass
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|checkNoShadows
specifier|private
name|void
name|checkNoShadows
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|Method
argument_list|>
argument_list|>
name|all
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|ann
parameter_list|)
block|{
name|List
argument_list|<
name|List
argument_list|<
name|Method
argument_list|>
argument_list|>
name|methodHierarchy
init|=
name|annotatedWith
argument_list|(
name|all
argument_list|,
name|ann
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Method
argument_list|>
argument_list|>
name|noShadows
init|=
name|removeShadowed
argument_list|(
name|methodHierarchy
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|noShadows
operator|.
name|equals
argument_list|(
name|methodHierarchy
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|Method
argument_list|>
name|shadowed
init|=
operator|new
name|HashSet
argument_list|<
name|Method
argument_list|>
argument_list|(
name|flatten
argument_list|(
name|methodHierarchy
argument_list|)
argument_list|)
decl_stmt|;
name|shadowed
operator|.
name|removeAll
argument_list|(
name|flatten
argument_list|(
name|noShadows
argument_list|)
argument_list|)
expr_stmt|;
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|shadowed
control|)
block|{
name|String
name|sig
init|=
name|signature
argument_list|(
name|m
argument_list|)
decl_stmt|;
for|for
control|(
name|Method
name|other
range|:
name|flatten
argument_list|(
name|methodHierarchy
argument_list|)
control|)
block|{
if|if
condition|(
name|other
operator|!=
name|m
operator|&&
name|sig
operator|.
name|equals
argument_list|(
name|signature
argument_list|(
name|other
argument_list|)
argument_list|)
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"Method: "
operator|+
name|m
operator|.
name|toString
argument_list|()
operator|+
literal|"#"
operator|+
name|sig
operator|+
literal|" possibly shadowed by "
operator|+
name|other
operator|.
name|toString
argument_list|()
operator|+
literal|"#"
operator|+
name|signature
argument_list|(
name|other
argument_list|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"There are shadowed methods annotated with "
operator|+
name|ann
operator|.
name|getName
argument_list|()
operator|+
literal|". These methods would not be executed by JUnit and need to manually chain themselves which can lead to"
operator|+
literal|" maintenance problems.\n"
operator|+
name|b
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|signature
specifier|private
name|String
name|signature
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
return|return
name|m
operator|.
name|getName
argument_list|()
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|m
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class
end_unit
