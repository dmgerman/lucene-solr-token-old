begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Description
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|internal
operator|.
name|AssumptionViolatedException
import|;
end_import
begin_comment
comment|/**  * We have our own "custom" assumption class because JUnit's {@link AssumptionViolatedException}  * does not allow a cause exception to be set.  *   *<p>We currently subclass and substitute JUnit's internal AVE.  */
end_comment
begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|InternalAssumptionViolatedException
specifier|final
class|class
name|InternalAssumptionViolatedException
extends|extends
name|AssumptionViolatedException
block|{
DECL|field|message
specifier|private
specifier|final
name|String
name|message
decl_stmt|;
DECL|method|InternalAssumptionViolatedException
specifier|public
name|InternalAssumptionViolatedException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|this
argument_list|(
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|InternalAssumptionViolatedException
specifier|public
name|InternalAssumptionViolatedException
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|super
argument_list|(
name|t
argument_list|,
comment|/* no matcher. */
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|getCause
argument_list|()
operator|!=
name|t
condition|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"AssumptionViolationException not setting up getCause() properly? Panic."
argument_list|)
throw|;
block|}
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMessage
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|super
operator|.
name|getMessage
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|describeTo
specifier|public
name|void
name|describeTo
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
name|description
operator|.
name|appendText
argument_list|(
literal|"failed assumption: "
operator|+
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|description
operator|.
name|appendText
argument_list|(
literal|"(throwable: "
operator|+
name|getCause
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
