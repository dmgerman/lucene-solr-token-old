begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|rules
operator|.
name|SystemPropertiesRestoreRule
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|rules
operator|.
name|TestRuleAdapter
import|;
end_import
begin_comment
comment|/**  * Restore a given set of system properties to a snapshot taken at the beginning  * of the rule.  *   * This is semantically similar to {@link SystemPropertiesRestoreRule} but  * the list of properties to restore must be provided explicitly (because the security  * manager prevents us from accessing the whole set of properties).  *   * All properties to be restored must have r/w property permission.  */
end_comment
begin_class
DECL|class|TestRuleRestoreSystemProperties
specifier|public
class|class
name|TestRuleRestoreSystemProperties
extends|extends
name|TestRuleAdapter
block|{
DECL|field|propertyNames
specifier|private
specifier|final
name|String
index|[]
name|propertyNames
decl_stmt|;
DECL|field|restore
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|restore
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|TestRuleRestoreSystemProperties
specifier|public
name|TestRuleRestoreSystemProperties
parameter_list|(
name|String
modifier|...
name|propertyNames
parameter_list|)
block|{
name|this
operator|.
name|propertyNames
operator|=
name|propertyNames
expr_stmt|;
if|if
condition|(
name|propertyNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No properties to restore? Odd."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|before
specifier|protected
name|void
name|before
parameter_list|()
throws|throws
name|Throwable
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
assert|assert
name|restore
operator|.
name|isEmpty
argument_list|()
assert|;
for|for
control|(
name|String
name|key
range|:
name|propertyNames
control|)
block|{
name|restore
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|afterAlways
specifier|protected
name|void
name|afterAlways
parameter_list|(
name|List
argument_list|<
name|Throwable
argument_list|>
name|errors
parameter_list|)
throws|throws
name|Throwable
block|{
for|for
control|(
name|String
name|key
range|:
name|propertyNames
control|)
block|{
try|try
block|{
name|String
name|value
init|=
name|restore
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|clearProperty
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
comment|// We should have permission to write but if we don't, record the error
name|errors
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|restore
operator|.
name|clear
argument_list|()
expr_stmt|;
name|super
operator|.
name|afterAlways
argument_list|(
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
