begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A {@link SecurityManager} that prevents tests calling {@link System#exit(int)}.  * Only the test runner itself is allowed to exit the JVM.  * All other security checks are handled by the default security policy.  *<p>  * Use this with {@code -Djava.security.manager=org.apache.lucene.util.TestSecurityManager}.  */
end_comment
begin_class
DECL|class|TestSecurityManager
specifier|public
specifier|final
class|class
name|TestSecurityManager
extends|extends
name|SecurityManager
block|{
DECL|field|JUNIT4_TEST_RUNNER_PACKAGE
specifier|static
specifier|final
name|String
name|JUNIT4_TEST_RUNNER_PACKAGE
init|=
literal|"com.carrotsearch.ant.tasks.junit4."
decl_stmt|;
DECL|field|ECLIPSE_TEST_RUNNER_PACKAGE
specifier|static
specifier|final
name|String
name|ECLIPSE_TEST_RUNNER_PACKAGE
init|=
literal|"org.eclipse.jdt.internal.junit.runner."
decl_stmt|;
DECL|field|IDEA_TEST_RUNNER_PACKAGE
specifier|static
specifier|final
name|String
name|IDEA_TEST_RUNNER_PACKAGE
init|=
literal|"com.intellij.rt.execution.junit."
decl_stmt|;
comment|/**    * Creates a new TestSecurityManager. This ctor is called on JVM startup,    * when {@code -Djava.security.manager=org.apache.lucene.util.TestSecurityManager}    * is passed to JVM.    */
DECL|method|TestSecurityManager
specifier|public
name|TestSecurityManager
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    *<p>This method inspects the stack trace and checks who is calling    * {@link System#exit(int)} and similar methods    * @throws SecurityException if the caller of this method is not the test runner itself.    */
annotation|@
name|Override
DECL|method|checkExit
specifier|public
name|void
name|checkExit
parameter_list|(
specifier|final
name|int
name|status
parameter_list|)
block|{
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
block|{
specifier|final
name|String
name|systemClassName
init|=
name|System
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|,
name|runtimeClassName
init|=
name|Runtime
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|exitMethodHit
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|StackTraceElement
name|se
range|:
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
control|)
block|{
specifier|final
name|String
name|className
init|=
name|se
operator|.
name|getClassName
argument_list|()
decl_stmt|,
name|methodName
init|=
name|se
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
literal|"exit"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
operator|||
literal|"halt"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
operator|)
operator|&&
operator|(
name|systemClassName
operator|.
name|equals
argument_list|(
name|className
argument_list|)
operator|||
name|runtimeClassName
operator|.
name|equals
argument_list|(
name|className
argument_list|)
operator|)
condition|)
block|{
name|exitMethodHit
operator|=
name|className
operator|+
literal|'#'
operator|+
name|methodName
operator|+
literal|'('
operator|+
name|status
operator|+
literal|')'
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|exitMethodHit
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|className
operator|.
name|startsWith
argument_list|(
name|JUNIT4_TEST_RUNNER_PACKAGE
argument_list|)
operator|||
name|className
operator|.
name|startsWith
argument_list|(
name|ECLIPSE_TEST_RUNNER_PACKAGE
argument_list|)
operator|||
name|className
operator|.
name|startsWith
argument_list|(
name|IDEA_TEST_RUNNER_PACKAGE
argument_list|)
condition|)
block|{
comment|// this exit point is allowed, we return normally from closure:
return|return
comment|/*void*/
literal|null
return|;
block|}
else|else
block|{
comment|// anything else in stack trace is not allowed, break and throw SecurityException below:
break|break;
block|}
block|}
block|}
if|if
condition|(
name|exitMethodHit
operator|==
literal|null
condition|)
block|{
comment|// should never happen, only if JVM hides stack trace - replace by generic:
name|exitMethodHit
operator|=
literal|"JVM exit method"
expr_stmt|;
block|}
throw|throw
operator|new
name|SecurityException
argument_list|(
name|exitMethodHit
operator|+
literal|" calls are not allowed because they terminate the test runner's JVM."
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// we passed the stack check, delegate to super, so default policy can still deny permission:
name|super
operator|.
name|checkExit
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
