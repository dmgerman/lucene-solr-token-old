begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BaseBitSetTestCase
operator|.
name|randomSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_comment
comment|/** Base test class for {@link DocIdSet}s. */
end_comment
begin_class
DECL|class|BaseDocIdSetTestCase
specifier|public
specifier|abstract
class|class
name|BaseDocIdSetTestCase
parameter_list|<
name|T
extends|extends
name|DocIdSet
parameter_list|>
extends|extends
name|LuceneTestCase
block|{
comment|/** Create a copy of the given {@link BitSet} which has<code>length</code> bits. */
DECL|method|copyOf
specifier|public
specifier|abstract
name|T
name|copyOf
parameter_list|(
name|BitSet
name|bs
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Test length=0. */
DECL|method|testNoBit
specifier|public
name|void
name|testNoBit
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|BitSet
name|bs
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|T
name|copy
init|=
name|copyOf
argument_list|(
name|bs
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bs
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
comment|/** Test length=1. */
DECL|method|test1Bit
specifier|public
name|void
name|test1Bit
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|BitSet
name|bs
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|bs
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|final
name|T
name|copy
init|=
name|copyOf
argument_list|(
name|bs
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bs
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
comment|/** Test length=2. */
DECL|method|test2Bits
specifier|public
name|void
name|test2Bits
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|BitSet
name|bs
init|=
operator|new
name|BitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|bs
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|bs
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|T
name|copy
init|=
name|copyOf
argument_list|(
name|bs
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bs
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
comment|/** Compare the content of the set against a {@link BitSet}. */
DECL|method|testAgainstBitSet
specifier|public
name|void
name|testAgainstBitSet
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numBits
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|1
operator|<<
literal|20
argument_list|)
decl_stmt|;
comment|// test various random sets with various load factors
for|for
control|(
name|float
name|percentSet
range|:
operator|new
name|float
index|[]
block|{
literal|0f
block|,
literal|0.0001f
block|,
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
block|,
literal|0.9f
block|,
literal|1f
block|}
control|)
block|{
specifier|final
name|BitSet
name|set
init|=
name|randomSet
argument_list|(
name|numBits
argument_list|,
name|percentSet
argument_list|)
decl_stmt|;
specifier|final
name|T
name|copy
init|=
name|copyOf
argument_list|(
name|set
argument_list|,
name|numBits
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numBits
argument_list|,
name|set
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
comment|// test one doc
name|BitSet
name|set
init|=
operator|new
name|BitSet
argument_list|(
name|numBits
argument_list|)
decl_stmt|;
name|set
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// 0 first
name|T
name|copy
init|=
name|copyOf
argument_list|(
name|set
argument_list|,
name|numBits
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numBits
argument_list|,
name|set
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|set
operator|.
name|clear
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|set
operator|.
name|set
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|numBits
argument_list|)
argument_list|)
expr_stmt|;
name|copy
operator|=
name|copyOf
argument_list|(
name|set
argument_list|,
name|numBits
argument_list|)
expr_stmt|;
comment|// then random index
name|assertEquals
argument_list|(
name|numBits
argument_list|,
name|set
argument_list|,
name|copy
argument_list|)
expr_stmt|;
comment|// test regular increments
for|for
control|(
name|int
name|inc
init|=
literal|2
init|;
name|inc
operator|<
literal|1000
condition|;
name|inc
operator|+=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
control|)
block|{
name|set
operator|=
operator|new
name|BitSet
argument_list|(
name|numBits
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|d
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
init|;
name|d
operator|<
name|numBits
condition|;
name|d
operator|+=
name|inc
control|)
block|{
name|set
operator|.
name|set
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|copy
operator|=
name|copyOf
argument_list|(
name|set
argument_list|,
name|numBits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numBits
argument_list|,
name|set
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Test ram usage estimation. */
DECL|method|testRamBytesUsed
specifier|public
name|void
name|testRamBytesUsed
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|iters
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|pow
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxDoc
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
operator|<<
name|pow
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|maxDoc
argument_list|,
literal|1
operator|<<
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|pow
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|BitSet
name|set
init|=
name|randomSet
argument_list|(
name|maxDoc
argument_list|,
name|numDocs
argument_list|)
decl_stmt|;
specifier|final
name|DocIdSet
name|copy
init|=
name|copyOf
argument_list|(
name|set
argument_list|,
name|maxDoc
argument_list|)
decl_stmt|;
specifier|final
name|long
name|actualBytes
init|=
name|ramBytesUsed
argument_list|(
name|copy
argument_list|,
name|maxDoc
argument_list|)
decl_stmt|;
specifier|final
name|long
name|expectedBytes
init|=
name|copy
operator|.
name|ramBytesUsed
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedBytes
argument_list|,
name|actualBytes
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Assert that the content of the {@link DocIdSet} is the same as the content of the {@link BitSet}. */
DECL|method|assertEquals
specifier|public
name|void
name|assertEquals
parameter_list|(
name|int
name|numBits
parameter_list|,
name|BitSet
name|ds1
parameter_list|,
name|T
name|ds2
parameter_list|)
throws|throws
name|IOException
block|{
comment|// nextDoc
name|DocIdSetIterator
name|it2
init|=
name|ds2
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|it2
operator|==
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|ds1
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|it2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|ds1
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|doc
operator|!=
operator|-
literal|1
condition|;
name|doc
operator|=
name|ds1
operator|.
name|nextSetBit
argument_list|(
name|doc
operator|+
literal|1
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
name|doc
argument_list|,
name|it2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|doc
argument_list|,
name|it2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|it2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|it2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// nextDoc / advance
name|it2
operator|=
name|ds2
operator|.
name|iterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|it2
operator|==
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|ds1
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|doc
init|=
operator|-
literal|1
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|doc
operator|=
name|ds1
operator|.
name|nextSetBit
argument_list|(
name|doc
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
operator|-
literal|1
condition|)
block|{
name|doc
operator|=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|doc
argument_list|,
name|it2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|doc
argument_list|,
name|it2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|target
init|=
name|doc
operator|+
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|64
else|:
name|Math
operator|.
name|max
argument_list|(
name|numBits
operator|/
literal|8
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|doc
operator|=
name|ds1
operator|.
name|nextSetBit
argument_list|(
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
operator|-
literal|1
condition|)
block|{
name|doc
operator|=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|doc
argument_list|,
name|it2
operator|.
name|advance
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|doc
argument_list|,
name|it2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// bits()
specifier|final
name|Bits
name|bits
init|=
name|ds2
operator|.
name|bits
argument_list|()
decl_stmt|;
if|if
condition|(
name|bits
operator|!=
literal|null
condition|)
block|{
comment|// test consistency between bits and iterator
name|it2
operator|=
name|ds2
operator|.
name|iterator
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|previousDoc
init|=
operator|-
literal|1
init|,
name|doc
init|=
name|it2
operator|.
name|nextDoc
argument_list|()
init|;
condition|;
name|previousDoc
operator|=
name|doc
operator|,
name|doc
operator|=
name|it2
operator|.
name|nextDoc
argument_list|()
control|)
block|{
specifier|final
name|int
name|max
init|=
name|doc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|?
name|bits
operator|.
name|length
argument_list|()
else|:
name|doc
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|previousDoc
operator|+
literal|1
init|;
name|i
operator|<
name|max
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bits
operator|.
name|get
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|Dummy
specifier|private
specifier|static
class|class
name|Dummy
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|field|o1
DECL|field|o2
name|Object
name|o1
decl_stmt|,
name|o2
decl_stmt|;
block|}
comment|// same as RamUsageTester.sizeOf but tries to not take into account resources
comment|// that might be shared across instances
DECL|method|ramBytesUsed
specifier|private
name|long
name|ramBytesUsed
parameter_list|(
name|DocIdSet
name|set
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|Dummy
name|dummy
init|=
operator|new
name|Dummy
argument_list|()
decl_stmt|;
name|dummy
operator|.
name|o1
operator|=
name|copyOf
argument_list|(
operator|new
name|BitSet
argument_list|(
name|length
argument_list|)
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|o2
operator|=
name|set
expr_stmt|;
name|long
name|bytes1
init|=
name|RamUsageTester
operator|.
name|sizeOf
argument_list|(
name|dummy
argument_list|)
decl_stmt|;
name|dummy
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|long
name|bytes2
init|=
name|RamUsageTester
operator|.
name|sizeOf
argument_list|(
name|dummy
argument_list|)
decl_stmt|;
return|return
name|bytes1
operator|-
name|bytes2
return|;
block|}
block|}
end_class
end_unit
