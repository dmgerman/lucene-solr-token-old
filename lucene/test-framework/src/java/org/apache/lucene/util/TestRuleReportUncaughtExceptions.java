begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|UncaughtExceptionHandler
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|MultipleFailureException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|Statement
import|;
end_import
begin_comment
comment|/**  * Subscribes to  * {@link Thread#setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)}  * and causes test/ suite failures if uncaught exceptions are detected.  */
end_comment
begin_class
DECL|class|TestRuleReportUncaughtExceptions
specifier|public
class|class
name|TestRuleReportUncaughtExceptions
implements|implements
name|TestRule
block|{
comment|// This was originally volatile, but I don't think it needs to be. It's the same
comment|// thread accessing it, always.
DECL|field|savedUncaughtExceptionHandler
specifier|private
name|UncaughtExceptionHandler
name|savedUncaughtExceptionHandler
decl_stmt|;
DECL|class|UncaughtExceptionEntry
specifier|public
specifier|static
class|class
name|UncaughtExceptionEntry
block|{
DECL|field|thread
specifier|public
specifier|final
name|Thread
name|thread
decl_stmt|;
DECL|field|exception
specifier|public
specifier|final
name|Throwable
name|exception
decl_stmt|;
DECL|method|UncaughtExceptionEntry
specifier|public
name|UncaughtExceptionEntry
parameter_list|(
name|Thread
name|thread
parameter_list|,
name|Throwable
name|exception
parameter_list|)
block|{
name|this
operator|.
name|thread
operator|=
name|thread
expr_stmt|;
name|this
operator|.
name|exception
operator|=
name|exception
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|UncaughtExceptionsInBackgroundThread
specifier|private
specifier|static
class|class
name|UncaughtExceptionsInBackgroundThread
extends|extends
name|RuntimeException
block|{
DECL|method|UncaughtExceptionsInBackgroundThread
specifier|public
name|UncaughtExceptionsInBackgroundThread
parameter_list|(
name|UncaughtExceptionEntry
name|e
parameter_list|)
block|{
name|super
argument_list|(
literal|"Uncaught exception by thread: "
operator|+
name|e
operator|.
name|thread
argument_list|,
name|e
operator|.
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Lock on uncaughtExceptions to access.
DECL|field|uncaughtExceptions
specifier|private
specifier|final
name|List
argument_list|<
name|UncaughtExceptionEntry
argument_list|>
name|uncaughtExceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|UncaughtExceptionEntry
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|apply
specifier|public
name|Statement
name|apply
parameter_list|(
specifier|final
name|Statement
name|s
parameter_list|,
specifier|final
name|Description
name|d
parameter_list|)
block|{
return|return
operator|new
name|Statement
argument_list|()
block|{
specifier|public
name|void
name|evaluate
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
name|errors
init|=
operator|new
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|setupHandler
argument_list|()
expr_stmt|;
name|s
operator|.
name|evaluate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|restoreHandler
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|uncaughtExceptions
init|)
block|{
for|for
control|(
name|UncaughtExceptionEntry
name|e
range|:
name|uncaughtExceptions
control|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|UncaughtExceptionsInBackgroundThread
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|uncaughtExceptions
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|MultipleFailureException
operator|.
name|assertEmpty
argument_list|(
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**    * Just a check if anything's been caught.    */
DECL|method|hasUncaughtExceptions
specifier|public
name|boolean
name|hasUncaughtExceptions
parameter_list|()
block|{
synchronized|synchronized
init|(
name|uncaughtExceptions
init|)
block|{
return|return
operator|!
name|uncaughtExceptions
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
DECL|method|restoreHandler
specifier|private
name|void
name|restoreHandler
parameter_list|()
block|{
name|Thread
operator|.
name|setDefaultUncaughtExceptionHandler
argument_list|(
name|savedUncaughtExceptionHandler
argument_list|)
expr_stmt|;
block|}
DECL|method|setupHandler
specifier|private
name|void
name|setupHandler
parameter_list|()
block|{
name|savedUncaughtExceptionHandler
operator|=
name|Thread
operator|.
name|getDefaultUncaughtExceptionHandler
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|setDefaultUncaughtExceptionHandler
argument_list|(
operator|new
name|Thread
operator|.
name|UncaughtExceptionHandler
argument_list|()
block|{
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
comment|// org.junit.internal.AssumptionViolatedException in older releases
comment|// org.junit.Assume.AssumptionViolatedException in recent ones
if|if
condition|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"AssumptionViolatedException"
argument_list|)
condition|)
block|{
name|String
name|where
init|=
literal|"<unknown>"
decl_stmt|;
for|for
control|(
name|StackTraceElement
name|elem
range|:
name|e
operator|.
name|getStackTrace
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|elem
operator|.
name|getClassName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"org.junit"
argument_list|)
condition|)
block|{
name|where
operator|=
name|elem
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"NOTE: Uncaught exception handler caught a failed assumption at "
operator|+
name|where
operator|+
literal|" (ignored):"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|uncaughtExceptions
init|)
block|{
name|uncaughtExceptions
operator|.
name|add
argument_list|(
operator|new
name|UncaughtExceptionEntry
argument_list|(
name|t
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|sw
operator|.
name|write
argument_list|(
literal|"\n===>\nUncaught exception by thread: "
operator|+
name|t
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|sw
operator|.
name|write
argument_list|(
literal|"<===\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|sw
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
