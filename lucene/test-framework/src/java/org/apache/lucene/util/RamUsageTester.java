begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import
begin_comment
comment|/** Crawls object graph to collect RAM usage for testing */
end_comment
begin_class
DECL|class|RamUsageTester
specifier|public
specifier|final
class|class
name|RamUsageTester
block|{
comment|/**    * A {@link Filter} that accepts all fields.    */
DECL|field|DEFAULT_FILTER
specifier|private
specifier|static
specifier|final
name|Filter
name|DEFAULT_FILTER
init|=
operator|new
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Field
name|field
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|accept
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
comment|/** A filter that allows to decide on what to take into account when measuring RAM usage. */
DECL|interface|Filter
specifier|public
specifier|static
interface|interface
name|Filter
block|{
comment|/** Whether the provided field should be taken into account when measuring RAM usage. */
DECL|method|accept
name|boolean
name|accept
parameter_list|(
name|Field
name|field
parameter_list|)
function_decl|;
comment|/** Whether the provided field value should be taken into account when measuring RAM usage. */
DECL|method|accept
name|boolean
name|accept
parameter_list|(
name|Object
name|o
parameter_list|)
function_decl|;
block|}
comment|/**    * Estimates the RAM usage by the given object. It will    * walk the object tree and sum up all referenced objects.    *    *<p><b>Resource Usage:</b> This method internally uses a set of    * every object seen during traversals so it does allocate memory    * (it isn't side-effect free). After the method exits, this memory    * should be GCed.</p>    */
DECL|method|sizeOf
specifier|public
specifier|static
name|long
name|sizeOf
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
return|return
name|measureObjectSize
argument_list|(
name|obj
argument_list|,
name|filter
argument_list|)
return|;
block|}
comment|/** Same as calling<code>sizeOf(obj, DEFAULT_FILTER)</code>. */
DECL|method|sizeOf
specifier|public
specifier|static
name|long
name|sizeOf
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|sizeOf
argument_list|(
name|obj
argument_list|,
name|DEFAULT_FILTER
argument_list|)
return|;
block|}
comment|/**    * Return a human-readable size of a given object.    * @see #sizeOf(Object)    * @see RamUsageEstimator#humanReadableUnits(long)    */
DECL|method|humanSizeOf
specifier|public
specifier|static
name|String
name|humanSizeOf
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
return|return
name|RamUsageEstimator
operator|.
name|humanReadableUnits
argument_list|(
name|sizeOf
argument_list|(
name|object
argument_list|)
argument_list|)
return|;
block|}
comment|/*    * Non-recursive version of object descend. This consumes more memory than recursive in-depth    * traversal but prevents stack overflows on long chains of objects    * or complex graphs (a max. recursion depth on my machine was ~5000 objects linked in a chain    * so not too much).    */
DECL|method|measureObjectSize
specifier|private
specifier|static
name|long
name|measureObjectSize
parameter_list|(
name|Object
name|root
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
comment|// Objects seen so far.
specifier|final
name|IdentityHashSet
argument_list|<
name|Object
argument_list|>
name|seen
init|=
operator|new
name|IdentityHashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Class cache with reference Field and precalculated shallow size.
specifier|final
name|IdentityHashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|ClassCache
argument_list|>
name|classCache
init|=
operator|new
name|IdentityHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Stack of objects pending traversal. Recursion caused stack overflows.
specifier|final
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|stack
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|stack
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|long
name|totalSize
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|Object
name|ob
init|=
name|stack
operator|.
name|remove
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|ob
operator|==
literal|null
operator|||
name|seen
operator|.
name|contains
argument_list|(
name|ob
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|seen
operator|.
name|add
argument_list|(
name|ob
argument_list|)
expr_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|obClazz
init|=
name|ob
operator|.
name|getClass
argument_list|()
decl_stmt|;
assert|assert
name|obClazz
operator|!=
literal|null
operator|:
literal|"jvm bug detected (Object.getClass() == null). please report this to your vendor"
assert|;
if|if
condition|(
name|obClazz
operator|.
name|isArray
argument_list|()
condition|)
block|{
comment|/*          * Consider an array, possibly of primitive types. Push any of its references to          * the processing stack and accumulate this array's shallow size.           */
name|long
name|size
init|=
name|RamUsageEstimator
operator|.
name|NUM_BYTES_ARRAY_HEADER
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|Array
operator|.
name|getLength
argument_list|(
name|ob
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|componentClazz
init|=
name|obClazz
operator|.
name|getComponentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|componentClazz
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|size
operator|+=
operator|(
name|long
operator|)
name|len
operator|*
name|RamUsageEstimator
operator|.
name|shallowSizeOfInstance
argument_list|(
name|componentClazz
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|size
operator|+=
operator|(
name|long
operator|)
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
operator|*
name|len
expr_stmt|;
comment|// Push refs for traversal later.
for|for
control|(
name|int
name|i
init|=
name|len
init|;
operator|--
name|i
operator|>=
literal|0
condition|;
control|)
block|{
specifier|final
name|Object
name|o
init|=
name|Array
operator|.
name|get
argument_list|(
name|ob
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
operator|&&
operator|!
name|seen
operator|.
name|contains
argument_list|(
name|o
argument_list|)
operator|&&
name|filter
operator|.
name|accept
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|stack
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|totalSize
operator|+=
name|RamUsageEstimator
operator|.
name|alignObjectSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/*          * Consider an object. Push any references it has to the processing stack          * and accumulate this object's shallow size.           */
try|try
block|{
name|ClassCache
name|cachedInfo
init|=
name|classCache
operator|.
name|get
argument_list|(
name|obClazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedInfo
operator|==
literal|null
condition|)
block|{
name|classCache
operator|.
name|put
argument_list|(
name|obClazz
argument_list|,
name|cachedInfo
operator|=
name|createCacheEntry
argument_list|(
name|obClazz
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Field
name|f
range|:
name|cachedInfo
operator|.
name|referenceFields
control|)
block|{
if|if
condition|(
name|filter
operator|.
name|accept
argument_list|(
name|f
argument_list|)
condition|)
block|{
comment|// Fast path to eliminate redundancies.
specifier|final
name|Object
name|o
init|=
name|f
operator|.
name|get
argument_list|(
name|ob
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
operator|&&
operator|!
name|seen
operator|.
name|contains
argument_list|(
name|o
argument_list|)
operator|&&
name|filter
operator|.
name|accept
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|stack
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|totalSize
operator|+=
name|cachedInfo
operator|.
name|alignedShallowInstanceSize
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
comment|// this should never happen as we enabled setAccessible().
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Reflective field access failed?"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// Help the GC (?).
name|seen
operator|.
name|clear
argument_list|()
expr_stmt|;
name|stack
operator|.
name|clear
argument_list|()
expr_stmt|;
name|classCache
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|totalSize
return|;
block|}
comment|/**    * Cached information about a given class.       */
DECL|class|ClassCache
specifier|private
specifier|static
specifier|final
class|class
name|ClassCache
block|{
DECL|field|alignedShallowInstanceSize
specifier|public
specifier|final
name|long
name|alignedShallowInstanceSize
decl_stmt|;
DECL|field|referenceFields
specifier|public
specifier|final
name|Field
index|[]
name|referenceFields
decl_stmt|;
DECL|method|ClassCache
specifier|public
name|ClassCache
parameter_list|(
name|long
name|alignedShallowInstanceSize
parameter_list|,
name|Field
index|[]
name|referenceFields
parameter_list|)
block|{
name|this
operator|.
name|alignedShallowInstanceSize
operator|=
name|alignedShallowInstanceSize
expr_stmt|;
name|this
operator|.
name|referenceFields
operator|=
name|referenceFields
expr_stmt|;
block|}
block|}
comment|/**    * Create a cached information about shallow size and reference fields for     * a given class.    */
DECL|method|createCacheEntry
specifier|private
specifier|static
name|ClassCache
name|createCacheEntry
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|ClassCache
name|cachedInfo
decl_stmt|;
name|long
name|shallowInstanceSize
init|=
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_HEADER
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|Field
argument_list|>
name|referenceFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|32
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|clazz
init|;
name|c
operator|!=
literal|null
condition|;
name|c
operator|=
name|c
operator|.
name|getSuperclass
argument_list|()
control|)
block|{
specifier|final
name|Field
index|[]
name|fields
init|=
name|c
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Field
name|f
range|:
name|fields
control|)
block|{
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|f
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|shallowInstanceSize
operator|=
name|RamUsageEstimator
operator|.
name|adjustForField
argument_list|(
name|shallowInstanceSize
argument_list|,
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|getType
argument_list|()
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|referenceFields
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|cachedInfo
operator|=
operator|new
name|ClassCache
argument_list|(
name|RamUsageEstimator
operator|.
name|alignObjectSize
argument_list|(
name|shallowInstanceSize
argument_list|)
argument_list|,
name|referenceFields
operator|.
name|toArray
argument_list|(
operator|new
name|Field
index|[
name|referenceFields
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cachedInfo
return|;
block|}
comment|/**    * An identity hash set implemented using open addressing. No null keys are allowed.    *     * TODO: If this is useful outside this class, make it public - needs some work    */
DECL|class|IdentityHashSet
specifier|static
specifier|final
class|class
name|IdentityHashSet
parameter_list|<
name|KType
parameter_list|>
implements|implements
name|Iterable
argument_list|<
name|KType
argument_list|>
block|{
comment|/**      * Default load factor.      */
DECL|field|DEFAULT_LOAD_FACTOR
specifier|public
specifier|final
specifier|static
name|float
name|DEFAULT_LOAD_FACTOR
init|=
literal|0.75f
decl_stmt|;
comment|/**      * Minimum capacity for the set.      */
DECL|field|MIN_CAPACITY
specifier|public
specifier|final
specifier|static
name|int
name|MIN_CAPACITY
init|=
literal|4
decl_stmt|;
comment|/**      * All of set entries. Always of power of two length.      */
DECL|field|keys
specifier|public
name|Object
index|[]
name|keys
decl_stmt|;
comment|/**      * Cached number of assigned slots.      */
DECL|field|assigned
specifier|public
name|int
name|assigned
decl_stmt|;
comment|/**      * The load factor for this set (fraction of allocated or deleted slots before      * the buffers must be rehashed or reallocated).      */
DECL|field|loadFactor
specifier|public
specifier|final
name|float
name|loadFactor
decl_stmt|;
comment|/**      * Cached capacity threshold at which we must resize the buffers.      */
DECL|field|resizeThreshold
specifier|private
name|int
name|resizeThreshold
decl_stmt|;
comment|/**      * Creates a hash set with the default capacity of 16.      * load factor of {@value #DEFAULT_LOAD_FACTOR}. `      */
DECL|method|IdentityHashSet
specifier|public
name|IdentityHashSet
parameter_list|()
block|{
name|this
argument_list|(
literal|16
argument_list|,
name|DEFAULT_LOAD_FACTOR
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a hash set with the given capacity, load factor of      * {@value #DEFAULT_LOAD_FACTOR}.      */
DECL|method|IdentityHashSet
specifier|public
name|IdentityHashSet
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|this
argument_list|(
name|initialCapacity
argument_list|,
name|DEFAULT_LOAD_FACTOR
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a hash set with the given capacity and load factor.      */
DECL|method|IdentityHashSet
specifier|public
name|IdentityHashSet
parameter_list|(
name|int
name|initialCapacity
parameter_list|,
name|float
name|loadFactor
parameter_list|)
block|{
name|initialCapacity
operator|=
name|Math
operator|.
name|max
argument_list|(
name|MIN_CAPACITY
argument_list|,
name|initialCapacity
argument_list|)
expr_stmt|;
assert|assert
name|initialCapacity
operator|>
literal|0
operator|:
literal|"Initial capacity must be between (0, "
operator|+
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|"]."
assert|;
assert|assert
name|loadFactor
operator|>
literal|0
operator|&&
name|loadFactor
operator|<
literal|1
operator|:
literal|"Load factor must be between (0, 1)."
assert|;
name|this
operator|.
name|loadFactor
operator|=
name|loadFactor
expr_stmt|;
name|allocateBuffers
argument_list|(
name|roundCapacity
argument_list|(
name|initialCapacity
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a reference to the set. Null keys are not allowed.      */
DECL|method|add
specifier|public
name|boolean
name|add
parameter_list|(
name|KType
name|e
parameter_list|)
block|{
assert|assert
name|e
operator|!=
literal|null
operator|:
literal|"Null keys not allowed."
assert|;
if|if
condition|(
name|assigned
operator|>=
name|resizeThreshold
condition|)
name|expandAndRehash
argument_list|()
expr_stmt|;
specifier|final
name|int
name|mask
init|=
name|keys
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|slot
init|=
name|rehash
argument_list|(
name|e
argument_list|)
operator|&
name|mask
decl_stmt|;
name|Object
name|existing
decl_stmt|;
while|while
condition|(
operator|(
name|existing
operator|=
name|keys
index|[
name|slot
index|]
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|e
operator|==
name|existing
condition|)
block|{
return|return
literal|false
return|;
comment|// already found.
block|}
name|slot
operator|=
operator|(
name|slot
operator|+
literal|1
operator|)
operator|&
name|mask
expr_stmt|;
block|}
name|assigned
operator|++
expr_stmt|;
name|keys
index|[
name|slot
index|]
operator|=
name|e
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Checks if the set contains a given ref.      */
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|KType
name|e
parameter_list|)
block|{
specifier|final
name|int
name|mask
init|=
name|keys
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|slot
init|=
name|rehash
argument_list|(
name|e
argument_list|)
operator|&
name|mask
decl_stmt|;
name|Object
name|existing
decl_stmt|;
while|while
condition|(
operator|(
name|existing
operator|=
name|keys
index|[
name|slot
index|]
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|e
operator|==
name|existing
condition|)
block|{
return|return
literal|true
return|;
block|}
name|slot
operator|=
operator|(
name|slot
operator|+
literal|1
operator|)
operator|&
name|mask
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/** Rehash via MurmurHash.      *       *<p>The implementation is based on the      * finalization step from Austin Appleby's      *<code>MurmurHash3</code>.      *       * @see "http://sites.google.com/site/murmurhash/"      */
DECL|method|rehash
specifier|private
specifier|static
name|int
name|rehash
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|int
name|k
init|=
name|System
operator|.
name|identityHashCode
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|k
operator|^=
name|k
operator|>>>
literal|16
expr_stmt|;
name|k
operator|*=
literal|0x85ebca6b
expr_stmt|;
name|k
operator|^=
name|k
operator|>>>
literal|13
expr_stmt|;
name|k
operator|*=
literal|0xc2b2ae35
expr_stmt|;
name|k
operator|^=
name|k
operator|>>>
literal|16
expr_stmt|;
return|return
name|k
return|;
block|}
comment|/**      * Expand the internal storage buffers (capacity) or rehash current keys and      * values if there are a lot of deleted slots.      */
DECL|method|expandAndRehash
specifier|private
name|void
name|expandAndRehash
parameter_list|()
block|{
specifier|final
name|Object
index|[]
name|oldKeys
init|=
name|this
operator|.
name|keys
decl_stmt|;
assert|assert
name|assigned
operator|>=
name|resizeThreshold
assert|;
name|allocateBuffers
argument_list|(
name|nextCapacity
argument_list|(
name|keys
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
comment|/*        * Rehash all assigned slots from the old hash table.        */
specifier|final
name|int
name|mask
init|=
name|keys
operator|.
name|length
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Object
name|key
init|=
name|oldKeys
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|int
name|slot
init|=
name|rehash
argument_list|(
name|key
argument_list|)
operator|&
name|mask
decl_stmt|;
while|while
condition|(
name|keys
index|[
name|slot
index|]
operator|!=
literal|null
condition|)
block|{
name|slot
operator|=
operator|(
name|slot
operator|+
literal|1
operator|)
operator|&
name|mask
expr_stmt|;
block|}
name|keys
index|[
name|slot
index|]
operator|=
name|key
expr_stmt|;
block|}
block|}
name|Arrays
operator|.
name|fill
argument_list|(
name|oldKeys
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Allocate internal buffers for a given capacity.      *       * @param capacity      *          New capacity (must be a power of two).      */
DECL|method|allocateBuffers
specifier|private
name|void
name|allocateBuffers
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|this
operator|.
name|keys
operator|=
operator|new
name|Object
index|[
name|capacity
index|]
expr_stmt|;
name|this
operator|.
name|resizeThreshold
operator|=
call|(
name|int
call|)
argument_list|(
name|capacity
operator|*
name|DEFAULT_LOAD_FACTOR
argument_list|)
expr_stmt|;
block|}
comment|/**      * Return the next possible capacity, counting from the current buffers' size.      */
DECL|method|nextCapacity
specifier|protected
name|int
name|nextCapacity
parameter_list|(
name|int
name|current
parameter_list|)
block|{
assert|assert
name|current
operator|>
literal|0
operator|&&
name|Long
operator|.
name|bitCount
argument_list|(
name|current
argument_list|)
operator|==
literal|1
operator|:
literal|"Capacity must be a power of two."
assert|;
assert|assert
operator|(
operator|(
name|current
operator|<<
literal|1
operator|)
operator|>
literal|0
operator|)
operator|:
literal|"Maximum capacity exceeded ("
operator|+
operator|(
literal|0x80000000
operator|>>>
literal|1
operator|)
operator|+
literal|")."
assert|;
if|if
condition|(
name|current
operator|<
name|MIN_CAPACITY
operator|/
literal|2
condition|)
name|current
operator|=
name|MIN_CAPACITY
operator|/
literal|2
expr_stmt|;
return|return
name|current
operator|<<
literal|1
return|;
block|}
comment|/**      * Round the capacity to the next allowed value.      */
DECL|method|roundCapacity
specifier|protected
name|int
name|roundCapacity
parameter_list|(
name|int
name|requestedCapacity
parameter_list|)
block|{
comment|// Maximum positive integer that is a power of two.
if|if
condition|(
name|requestedCapacity
operator|>
operator|(
literal|0x80000000
operator|>>>
literal|1
operator|)
condition|)
return|return
operator|(
literal|0x80000000
operator|>>>
literal|1
operator|)
return|;
name|int
name|capacity
init|=
name|MIN_CAPACITY
decl_stmt|;
while|while
condition|(
name|capacity
operator|<
name|requestedCapacity
condition|)
block|{
name|capacity
operator|<<=
literal|1
expr_stmt|;
block|}
return|return
name|capacity
return|;
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|assigned
operator|=
literal|0
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|keys
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|assigned
return|;
block|}
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|KType
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|KType
argument_list|>
argument_list|()
block|{
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
name|Object
name|nextElement
init|=
name|fetchNext
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|nextElement
operator|!=
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|KType
name|next
parameter_list|()
block|{
name|Object
name|r
init|=
name|this
operator|.
name|nextElement
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|this
operator|.
name|nextElement
operator|=
name|fetchNext
argument_list|()
expr_stmt|;
return|return
operator|(
name|KType
operator|)
name|r
return|;
block|}
specifier|private
name|Object
name|fetchNext
parameter_list|()
block|{
name|pos
operator|++
expr_stmt|;
while|while
condition|(
name|pos
operator|<
name|keys
operator|.
name|length
operator|&&
name|keys
index|[
name|pos
index|]
operator|==
literal|null
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
return|return
operator|(
name|pos
operator|>=
name|keys
operator|.
name|length
condition|?
literal|null
else|:
name|keys
index|[
name|pos
index|]
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class
end_unit
