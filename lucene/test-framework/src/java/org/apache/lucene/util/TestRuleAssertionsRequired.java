begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|Statement
import|;
end_import
begin_comment
comment|/**  * Require assertions for Lucene/Solr packages.  */
end_comment
begin_class
DECL|class|TestRuleAssertionsRequired
specifier|public
class|class
name|TestRuleAssertionsRequired
implements|implements
name|TestRule
block|{
annotation|@
name|Override
DECL|method|apply
specifier|public
name|Statement
name|apply
parameter_list|(
specifier|final
name|Statement
name|base
parameter_list|,
specifier|final
name|Description
name|description
parameter_list|)
block|{
return|return
operator|new
name|Statement
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
comment|// Make sure -ea matches -Dtests.asserts, to catch accidental mis-use:
if|if
condition|(
name|LuceneTestCase
operator|.
name|assertsAreEnabled
operator|!=
name|LuceneTestCase
operator|.
name|TEST_ASSERTS_ENABLED
condition|)
block|{
name|String
name|msg
init|=
literal|"Assertions mismatch: "
decl_stmt|;
if|if
condition|(
name|LuceneTestCase
operator|.
name|assertsAreEnabled
condition|)
block|{
name|msg
operator|+=
literal|"-ea was specified"
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|+=
literal|"-ea was not specified"
expr_stmt|;
block|}
if|if
condition|(
name|LuceneTestCase
operator|.
name|TEST_ASSERTS_ENABLED
condition|)
block|{
name|msg
operator|+=
literal|" but -Dtests.asserts=true"
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|+=
literal|" but -Dtests.asserts=false"
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// Ok, enabled.
block|}
name|base
operator|.
name|evaluate
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class
end_unit
