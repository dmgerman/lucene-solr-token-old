begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|ClassModel
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|ClassModel
operator|.
name|MethodModel
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|TestMethodProvider
import|;
end_import
begin_comment
comment|/**  * Backwards compatible test* method provider (public, non-static).  */
end_comment
begin_class
DECL|class|LuceneJUnit3MethodProvider
specifier|public
specifier|final
class|class
name|LuceneJUnit3MethodProvider
implements|implements
name|TestMethodProvider
block|{
annotation|@
name|Override
DECL|method|getTestMethods
specifier|public
name|Collection
argument_list|<
name|Method
argument_list|>
name|getTestMethods
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|suiteClass
parameter_list|,
name|ClassModel
name|classModel
parameter_list|)
block|{
name|Map
argument_list|<
name|Method
argument_list|,
name|MethodModel
argument_list|>
name|methods
init|=
name|classModel
operator|.
name|getMethods
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Method
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MethodModel
name|mm
range|:
name|methods
operator|.
name|values
argument_list|()
control|)
block|{
comment|// Skip any methods that have overrieds/ shadows.
if|if
condition|(
name|mm
operator|.
name|getDown
argument_list|()
operator|!=
literal|null
condition|)
continue|continue;
name|Method
name|m
init|=
name|mm
operator|.
name|element
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"test"
argument_list|)
operator|&&
name|Modifier
operator|.
name|isPublic
argument_list|(
name|m
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|m
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class
end_unit
