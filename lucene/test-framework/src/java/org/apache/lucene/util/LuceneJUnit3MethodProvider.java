begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import static
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|MethodCollector
operator|.
name|flatten
import|;
end_import
begin_import
import|import static
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|MethodCollector
operator|.
name|mutableCopy1
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|TestMethodProvider
import|;
end_import
begin_comment
comment|/**  * Backwards compatible test* method provider (public, non-static).  */
end_comment
begin_class
DECL|class|LuceneJUnit3MethodProvider
specifier|public
specifier|final
class|class
name|LuceneJUnit3MethodProvider
implements|implements
name|TestMethodProvider
block|{
annotation|@
name|Override
DECL|method|getTestMethods
specifier|public
name|Collection
argument_list|<
name|Method
argument_list|>
name|getTestMethods
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|suiteClass
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|Method
argument_list|>
argument_list|>
name|methods
parameter_list|)
block|{
comment|// We will return all methods starting with test* and rely on further validation to weed
comment|// out static or otherwise invalid test methods.
name|List
argument_list|<
name|Method
argument_list|>
name|copy
init|=
name|mutableCopy1
argument_list|(
name|flatten
argument_list|(
name|methods
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Method
argument_list|>
name|i
init|=
name|copy
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Method
name|m
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"test"
argument_list|)
operator|||
operator|!
name|Modifier
operator|.
name|isPublic
argument_list|(
name|m
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|||
name|Modifier
operator|.
name|isStatic
argument_list|(
name|m
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|||
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|copy
return|;
block|}
block|}
end_class
end_unit
