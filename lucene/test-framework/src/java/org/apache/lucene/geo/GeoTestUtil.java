begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.geo
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SloppyMath
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedContext
import|;
end_import
begin_comment
comment|/** static methods for testing geo */
end_comment
begin_class
DECL|class|GeoTestUtil
specifier|public
class|class
name|GeoTestUtil
block|{
comment|/** returns next pseudorandom latitude (anywhere) */
DECL|method|nextLatitude
specifier|public
specifier|static
name|double
name|nextLatitude
parameter_list|()
block|{
return|return
operator|-
literal|90
operator|+
literal|180.0
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
return|;
block|}
comment|/** returns next pseudorandom longitude (anywhere) */
DECL|method|nextLongitude
specifier|public
specifier|static
name|double
name|nextLongitude
parameter_list|()
block|{
return|return
operator|-
literal|180
operator|+
literal|360.0
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
return|;
block|}
comment|/** returns next pseudorandom latitude, kinda close to {@code otherLatitude} */
DECL|method|nextLatitudeNear
specifier|public
specifier|static
name|double
name|nextLatitudeNear
parameter_list|(
name|double
name|otherLatitude
parameter_list|)
block|{
name|GeoUtils
operator|.
name|checkLatitude
argument_list|(
name|otherLatitude
argument_list|)
expr_stmt|;
return|return
name|normalizeLatitude
argument_list|(
name|otherLatitude
operator|+
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|-
literal|0.5
argument_list|)
return|;
block|}
comment|/** returns next pseudorandom longitude, kinda close to {@code otherLongitude} */
DECL|method|nextLongitudeNear
specifier|public
specifier|static
name|double
name|nextLongitudeNear
parameter_list|(
name|double
name|otherLongitude
parameter_list|)
block|{
name|GeoUtils
operator|.
name|checkLongitude
argument_list|(
name|otherLongitude
argument_list|)
expr_stmt|;
return|return
name|normalizeLongitude
argument_list|(
name|otherLongitude
operator|+
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|-
literal|0.5
argument_list|)
return|;
block|}
comment|/**    * returns next pseudorandom latitude, kinda close to {@code minLatitude/maxLatitude}    *<b>NOTE:</b>minLatitude/maxLatitude are merely guidelines. the returned value is sometimes    * outside of that range! this is to facilitate edge testing.    */
DECL|method|nextLatitudeAround
specifier|public
specifier|static
name|double
name|nextLatitudeAround
parameter_list|(
name|double
name|minLatitude
parameter_list|,
name|double
name|maxLatitude
parameter_list|)
block|{
name|GeoUtils
operator|.
name|checkLatitude
argument_list|(
name|minLatitude
argument_list|)
expr_stmt|;
name|GeoUtils
operator|.
name|checkLatitude
argument_list|(
name|maxLatitude
argument_list|)
expr_stmt|;
return|return
name|normalizeLatitude
argument_list|(
name|randomRangeMaybeSlightlyOutside
argument_list|(
name|minLatitude
argument_list|,
name|maxLatitude
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * returns next pseudorandom longitude, kinda close to {@code minLongitude/maxLongitude}    *<b>NOTE:</b>minLongitude/maxLongitude are merely guidelines. the returned value is sometimes    * outside of that range! this is to facilitate edge testing.    */
DECL|method|nextLongitudeAround
specifier|public
specifier|static
name|double
name|nextLongitudeAround
parameter_list|(
name|double
name|minLongitude
parameter_list|,
name|double
name|maxLongitude
parameter_list|)
block|{
name|GeoUtils
operator|.
name|checkLongitude
argument_list|(
name|minLongitude
argument_list|)
expr_stmt|;
name|GeoUtils
operator|.
name|checkLongitude
argument_list|(
name|maxLongitude
argument_list|)
expr_stmt|;
return|return
name|normalizeLongitude
argument_list|(
name|randomRangeMaybeSlightlyOutside
argument_list|(
name|minLongitude
argument_list|,
name|maxLongitude
argument_list|)
argument_list|)
return|;
block|}
comment|/** returns next pseudorandom box: can cross the 180th meridian */
DECL|method|nextBox
specifier|public
specifier|static
name|Rectangle
name|nextBox
parameter_list|()
block|{
return|return
name|nextBoxInternal
argument_list|(
name|nextLatitude
argument_list|()
argument_list|,
name|nextLatitude
argument_list|()
argument_list|,
name|nextLongitude
argument_list|()
argument_list|,
name|nextLongitude
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** returns next pseudorandom box: will not cross the 180th meridian */
DECL|method|nextSimpleBox
specifier|public
specifier|static
name|Rectangle
name|nextSimpleBox
parameter_list|()
block|{
return|return
name|nextBoxInternal
argument_list|(
name|nextLatitude
argument_list|()
argument_list|,
name|nextLatitude
argument_list|()
argument_list|,
name|nextLongitude
argument_list|()
argument_list|,
name|nextLongitude
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** returns next pseudorandom box, can cross the 180th meridian, kinda close to {@code otherLatitude} and {@code otherLongitude} */
DECL|method|nextBoxNear
specifier|public
specifier|static
name|Rectangle
name|nextBoxNear
parameter_list|(
name|double
name|otherLatitude
parameter_list|,
name|double
name|otherLongitude
parameter_list|)
block|{
name|GeoUtils
operator|.
name|checkLongitude
argument_list|(
name|otherLongitude
argument_list|)
expr_stmt|;
name|GeoUtils
operator|.
name|checkLongitude
argument_list|(
name|otherLongitude
argument_list|)
expr_stmt|;
return|return
name|nextBoxInternal
argument_list|(
name|nextLatitudeNear
argument_list|(
name|otherLatitude
argument_list|)
argument_list|,
name|nextLatitudeNear
argument_list|(
name|otherLatitude
argument_list|)
argument_list|,
name|nextLongitudeNear
argument_list|(
name|otherLongitude
argument_list|)
argument_list|,
name|nextLongitudeNear
argument_list|(
name|otherLongitude
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** returns next pseudorandom box, will not cross the 180th meridian, kinda close to {@code otherLatitude} and {@code otherLongitude} */
DECL|method|nextSimpleBoxNear
specifier|public
specifier|static
name|Rectangle
name|nextSimpleBoxNear
parameter_list|(
name|double
name|otherLatitude
parameter_list|,
name|double
name|otherLongitude
parameter_list|)
block|{
name|GeoUtils
operator|.
name|checkLongitude
argument_list|(
name|otherLongitude
argument_list|)
expr_stmt|;
name|GeoUtils
operator|.
name|checkLongitude
argument_list|(
name|otherLongitude
argument_list|)
expr_stmt|;
return|return
name|nextBoxInternal
argument_list|(
name|nextLatitudeNear
argument_list|(
name|otherLatitude
argument_list|)
argument_list|,
name|nextLatitudeNear
argument_list|(
name|otherLatitude
argument_list|)
argument_list|,
name|nextLongitudeNear
argument_list|(
name|otherLongitude
argument_list|)
argument_list|,
name|nextLongitudeNear
argument_list|(
name|otherLongitude
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** returns next pseudorandom polygon */
DECL|method|nextPolygon
specifier|public
specifier|static
name|Polygon
name|nextPolygon
parameter_list|()
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
return|return
name|surpriseMePolygon
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|Rectangle
name|box
init|=
name|nextBoxInternal
argument_list|(
name|nextLatitude
argument_list|()
argument_list|,
name|nextLatitude
argument_list|()
argument_list|,
name|nextLongitude
argument_list|()
argument_list|,
name|nextLongitude
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// box
return|return
name|boxPolygon
argument_list|(
name|box
argument_list|)
return|;
block|}
else|else
block|{
comment|// triangle
return|return
name|trianglePolygon
argument_list|(
name|box
argument_list|)
return|;
block|}
block|}
comment|/** returns next pseudorandom polygon, kinda close to {@code otherLatitude} and {@code otherLongitude} */
DECL|method|nextPolygonNear
specifier|public
specifier|static
name|Polygon
name|nextPolygonNear
parameter_list|(
name|double
name|otherLatitude
parameter_list|,
name|double
name|otherLongitude
parameter_list|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
return|return
name|surpriseMePolygon
argument_list|(
name|otherLatitude
argument_list|,
name|otherLongitude
argument_list|)
return|;
block|}
name|Rectangle
name|box
init|=
name|nextBoxInternal
argument_list|(
name|nextLatitudeNear
argument_list|(
name|otherLatitude
argument_list|)
argument_list|,
name|nextLatitudeNear
argument_list|(
name|otherLatitude
argument_list|)
argument_list|,
name|nextLongitudeNear
argument_list|(
name|otherLongitude
argument_list|)
argument_list|,
name|nextLongitudeNear
argument_list|(
name|otherLongitude
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// box
return|return
name|boxPolygon
argument_list|(
name|box
argument_list|)
return|;
block|}
else|else
block|{
comment|// triangle
return|return
name|trianglePolygon
argument_list|(
name|box
argument_list|)
return|;
block|}
block|}
DECL|method|nextBoxInternal
specifier|private
specifier|static
name|Rectangle
name|nextBoxInternal
parameter_list|(
name|double
name|lat0
parameter_list|,
name|double
name|lat1
parameter_list|,
name|double
name|lon0
parameter_list|,
name|double
name|lon1
parameter_list|,
name|boolean
name|canCrossDateLine
parameter_list|)
block|{
if|if
condition|(
name|lat1
operator|<
name|lat0
condition|)
block|{
name|double
name|x
init|=
name|lat0
decl_stmt|;
name|lat0
operator|=
name|lat1
expr_stmt|;
name|lat1
operator|=
name|x
expr_stmt|;
block|}
if|if
condition|(
name|canCrossDateLine
operator|==
literal|false
operator|&&
name|lon1
operator|<
name|lon0
condition|)
block|{
name|double
name|x
init|=
name|lon0
decl_stmt|;
name|lon0
operator|=
name|lon1
expr_stmt|;
name|lon1
operator|=
name|x
expr_stmt|;
block|}
return|return
operator|new
name|Rectangle
argument_list|(
name|lat0
argument_list|,
name|lat1
argument_list|,
name|lon0
argument_list|,
name|lon1
argument_list|)
return|;
block|}
DECL|method|boxPolygon
specifier|private
specifier|static
name|Polygon
name|boxPolygon
parameter_list|(
name|Rectangle
name|box
parameter_list|)
block|{
assert|assert
name|box
operator|.
name|crossesDateline
argument_list|()
operator|==
literal|false
assert|;
specifier|final
name|double
index|[]
name|polyLats
init|=
operator|new
name|double
index|[
literal|5
index|]
decl_stmt|;
specifier|final
name|double
index|[]
name|polyLons
init|=
operator|new
name|double
index|[
literal|5
index|]
decl_stmt|;
name|polyLats
index|[
literal|0
index|]
operator|=
name|box
operator|.
name|minLat
expr_stmt|;
name|polyLons
index|[
literal|0
index|]
operator|=
name|box
operator|.
name|minLon
expr_stmt|;
name|polyLats
index|[
literal|1
index|]
operator|=
name|box
operator|.
name|maxLat
expr_stmt|;
name|polyLons
index|[
literal|1
index|]
operator|=
name|box
operator|.
name|minLon
expr_stmt|;
name|polyLats
index|[
literal|2
index|]
operator|=
name|box
operator|.
name|maxLat
expr_stmt|;
name|polyLons
index|[
literal|2
index|]
operator|=
name|box
operator|.
name|maxLon
expr_stmt|;
name|polyLats
index|[
literal|3
index|]
operator|=
name|box
operator|.
name|minLat
expr_stmt|;
name|polyLons
index|[
literal|3
index|]
operator|=
name|box
operator|.
name|maxLon
expr_stmt|;
name|polyLats
index|[
literal|4
index|]
operator|=
name|box
operator|.
name|minLat
expr_stmt|;
name|polyLons
index|[
literal|4
index|]
operator|=
name|box
operator|.
name|minLon
expr_stmt|;
return|return
operator|new
name|Polygon
argument_list|(
name|polyLats
argument_list|,
name|polyLons
argument_list|)
return|;
block|}
DECL|method|trianglePolygon
specifier|private
specifier|static
name|Polygon
name|trianglePolygon
parameter_list|(
name|Rectangle
name|box
parameter_list|)
block|{
assert|assert
name|box
operator|.
name|crossesDateline
argument_list|()
operator|==
literal|false
assert|;
specifier|final
name|double
index|[]
name|polyLats
init|=
operator|new
name|double
index|[
literal|4
index|]
decl_stmt|;
specifier|final
name|double
index|[]
name|polyLons
init|=
operator|new
name|double
index|[
literal|4
index|]
decl_stmt|;
name|polyLats
index|[
literal|0
index|]
operator|=
name|box
operator|.
name|minLat
expr_stmt|;
name|polyLons
index|[
literal|0
index|]
operator|=
name|box
operator|.
name|minLon
expr_stmt|;
name|polyLats
index|[
literal|1
index|]
operator|=
name|box
operator|.
name|maxLat
expr_stmt|;
name|polyLons
index|[
literal|1
index|]
operator|=
name|box
operator|.
name|minLon
expr_stmt|;
name|polyLats
index|[
literal|2
index|]
operator|=
name|box
operator|.
name|maxLat
expr_stmt|;
name|polyLons
index|[
literal|2
index|]
operator|=
name|box
operator|.
name|maxLon
expr_stmt|;
name|polyLats
index|[
literal|3
index|]
operator|=
name|box
operator|.
name|minLat
expr_stmt|;
name|polyLons
index|[
literal|3
index|]
operator|=
name|box
operator|.
name|minLon
expr_stmt|;
return|return
operator|new
name|Polygon
argument_list|(
name|polyLats
argument_list|,
name|polyLons
argument_list|)
return|;
block|}
DECL|method|surpriseMePolygon
specifier|private
specifier|static
name|Polygon
name|surpriseMePolygon
parameter_list|(
name|Double
name|otherLatitude
parameter_list|,
name|Double
name|otherLongitude
parameter_list|)
block|{
comment|// repeat until we get a poly that doesn't cross dateline:
name|newPoly
label|:
while|while
condition|(
literal|true
condition|)
block|{
comment|//System.out.println("\nPOLY ITER");
specifier|final
name|double
name|centerLat
decl_stmt|;
specifier|final
name|double
name|centerLon
decl_stmt|;
if|if
condition|(
name|otherLatitude
operator|==
literal|null
condition|)
block|{
name|centerLat
operator|=
name|nextLatitude
argument_list|()
expr_stmt|;
name|centerLon
operator|=
name|nextLongitude
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|GeoUtils
operator|.
name|checkLatitude
argument_list|(
name|otherLatitude
argument_list|)
expr_stmt|;
name|GeoUtils
operator|.
name|checkLongitude
argument_list|(
name|otherLongitude
argument_list|)
expr_stmt|;
name|centerLat
operator|=
name|nextLatitudeNear
argument_list|(
name|otherLatitude
argument_list|)
expr_stmt|;
name|centerLon
operator|=
name|nextLongitudeNear
argument_list|(
name|otherLongitude
argument_list|)
expr_stmt|;
block|}
name|double
name|radius
init|=
literal|0.1
operator|+
literal|20
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|double
name|radiusDelta
init|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|lats
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|lons
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|double
name|angle
init|=
literal|0.0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|angle
operator|+=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
literal|40.0
expr_stmt|;
comment|//System.out.println("  angle " + angle);
if|if
condition|(
name|angle
operator|>
literal|360
condition|)
block|{
break|break;
block|}
name|double
name|len
init|=
name|radius
operator|*
operator|(
literal|1.0
operator|-
name|radiusDelta
operator|+
name|radiusDelta
operator|*
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|)
decl_stmt|;
comment|//System.out.println("    len=" + len);
name|double
name|lat
init|=
name|centerLat
operator|+
name|len
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|Math
operator|.
name|toRadians
argument_list|(
name|angle
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|lon
init|=
name|centerLon
operator|+
name|len
operator|*
name|Math
operator|.
name|sin
argument_list|(
name|Math
operator|.
name|toRadians
argument_list|(
name|angle
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|lon
operator|<=
name|GeoUtils
operator|.
name|MIN_LON_INCL
operator|||
name|lon
operator|>=
name|GeoUtils
operator|.
name|MAX_LON_INCL
condition|)
block|{
comment|// cannot cross dateline: try again!
continue|continue
name|newPoly
continue|;
block|}
if|if
condition|(
name|lat
operator|>
literal|90
condition|)
block|{
comment|// cross the north pole
name|lat
operator|=
literal|180
operator|-
name|lat
expr_stmt|;
name|lon
operator|=
literal|180
operator|-
name|lon
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lat
operator|<
operator|-
literal|90
condition|)
block|{
comment|// cross the south pole
name|lat
operator|=
operator|-
literal|180
operator|-
name|lat
expr_stmt|;
name|lon
operator|=
literal|180
operator|-
name|lon
expr_stmt|;
block|}
if|if
condition|(
name|lon
operator|<=
name|GeoUtils
operator|.
name|MIN_LON_INCL
operator|||
name|lon
operator|>=
name|GeoUtils
operator|.
name|MAX_LON_INCL
condition|)
block|{
comment|// cannot cross dateline: try again!
continue|continue
name|newPoly
continue|;
block|}
name|lats
operator|.
name|add
argument_list|(
name|lat
argument_list|)
expr_stmt|;
name|lons
operator|.
name|add
argument_list|(
name|lon
argument_list|)
expr_stmt|;
comment|//System.out.println("    lat=" + lats.get(lats.size()-1) + " lon=" + lons.get(lons.size()-1));
block|}
comment|// close it
name|lats
operator|.
name|add
argument_list|(
name|lats
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|lons
operator|.
name|add
argument_list|(
name|lons
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|double
index|[]
name|latsArray
init|=
operator|new
name|double
index|[
name|lats
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|double
index|[]
name|lonsArray
init|=
operator|new
name|double
index|[
name|lons
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lats
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|latsArray
index|[
name|i
index|]
operator|=
name|lats
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|lonsArray
index|[
name|i
index|]
operator|=
name|lons
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Polygon
argument_list|(
name|latsArray
argument_list|,
name|lonsArray
argument_list|)
return|;
block|}
block|}
comment|/** Returns random double min to max or up to 1% outside of that range */
DECL|method|randomRangeMaybeSlightlyOutside
specifier|private
specifier|static
name|double
name|randomRangeMaybeSlightlyOutside
parameter_list|(
name|double
name|min
parameter_list|,
name|double
name|max
parameter_list|)
block|{
return|return
name|min
operator|+
operator|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|+
operator|(
literal|0.5
operator|-
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|)
operator|*
literal|.02
operator|)
operator|*
operator|(
name|max
operator|-
name|min
operator|)
return|;
block|}
comment|/** Puts latitude in range of -90 to 90. */
DECL|method|normalizeLatitude
specifier|private
specifier|static
name|double
name|normalizeLatitude
parameter_list|(
name|double
name|latitude
parameter_list|)
block|{
if|if
condition|(
name|latitude
operator|>=
operator|-
literal|90
operator|&&
name|latitude
operator|<=
literal|90
condition|)
block|{
return|return
name|latitude
return|;
comment|//common case, and avoids slight double precision shifting
block|}
name|double
name|off
init|=
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|latitude
operator|+
literal|90
operator|)
operator|%
literal|360
argument_list|)
decl_stmt|;
return|return
operator|(
name|off
operator|<=
literal|180
condition|?
name|off
else|:
literal|360
operator|-
name|off
operator|)
operator|-
literal|90
return|;
block|}
comment|/** Puts longitude in range of -180 to +180. */
DECL|method|normalizeLongitude
specifier|private
specifier|static
name|double
name|normalizeLongitude
parameter_list|(
name|double
name|longitude
parameter_list|)
block|{
if|if
condition|(
name|longitude
operator|>=
operator|-
literal|180
operator|&&
name|longitude
operator|<=
literal|180
condition|)
block|{
return|return
name|longitude
return|;
comment|//common case, and avoids slight double precision shifting
block|}
name|double
name|off
init|=
operator|(
name|longitude
operator|+
literal|180
operator|)
operator|%
literal|360
decl_stmt|;
if|if
condition|(
name|off
operator|<
literal|0
condition|)
block|{
return|return
literal|180
operator|+
name|off
return|;
block|}
elseif|else
if|if
condition|(
name|off
operator|==
literal|0
operator|&&
name|longitude
operator|>
literal|0
condition|)
block|{
return|return
literal|180
return|;
block|}
else|else
block|{
return|return
operator|-
literal|180
operator|+
name|off
return|;
block|}
block|}
comment|/** Keep it simple, we don't need to take arbitrary Random for geo tests */
DECL|method|random
specifier|private
specifier|static
name|Random
name|random
parameter_list|()
block|{
return|return
name|RandomizedContext
operator|.
name|current
argument_list|()
operator|.
name|getRandom
argument_list|()
return|;
block|}
comment|// craziness for plotting stuff :)
DECL|method|wrapLat
specifier|private
specifier|static
name|double
name|wrapLat
parameter_list|(
name|double
name|lat
parameter_list|)
block|{
comment|//System.out.println("wrapLat " + lat);
if|if
condition|(
name|lat
operator|>
literal|90
condition|)
block|{
comment|//System.out.println("  " + (180 - lat));
return|return
literal|180
operator|-
name|lat
return|;
block|}
elseif|else
if|if
condition|(
name|lat
operator|<
operator|-
literal|90
condition|)
block|{
comment|//System.out.println("  " + (-180 - lat));
return|return
operator|-
literal|180
operator|-
name|lat
return|;
block|}
else|else
block|{
comment|//System.out.println("  " + lat);
return|return
name|lat
return|;
block|}
block|}
DECL|method|wrapLon
specifier|private
specifier|static
name|double
name|wrapLon
parameter_list|(
name|double
name|lon
parameter_list|)
block|{
comment|//System.out.println("wrapLon " + lon);
if|if
condition|(
name|lon
operator|>
literal|180
condition|)
block|{
comment|//System.out.println("  " + (lon - 360));
return|return
name|lon
operator|-
literal|360
return|;
block|}
elseif|else
if|if
condition|(
name|lon
operator|<
operator|-
literal|180
condition|)
block|{
comment|//System.out.println("  " + (lon + 360));
return|return
name|lon
operator|+
literal|360
return|;
block|}
else|else
block|{
comment|//System.out.println("  " + lon);
return|return
name|lon
return|;
block|}
block|}
DECL|method|drawRectApproximatelyOnEarthSurface
specifier|private
specifier|static
name|void
name|drawRectApproximatelyOnEarthSurface
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|color
parameter_list|,
name|double
name|minLat
parameter_list|,
name|double
name|maxLat
parameter_list|,
name|double
name|minLon
parameter_list|,
name|double
name|maxLon
parameter_list|)
block|{
name|int
name|steps
init|=
literal|20
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        var "
operator|+
name|name
operator|+
literal|" = WE.polygon(["
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"          // min -> max lat, min lon"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|steps
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"          ["
operator|+
operator|(
name|minLat
operator|+
operator|(
name|maxLat
operator|-
name|minLat
operator|)
operator|*
name|i
operator|/
name|steps
operator|)
operator|+
literal|", "
operator|+
name|minLon
operator|+
literal|"],"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"          // max lat, min -> max lon"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|steps
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"          ["
operator|+
operator|(
name|maxLat
operator|+
literal|", "
operator|+
operator|(
name|minLon
operator|+
operator|(
name|maxLon
operator|-
name|minLon
operator|)
operator|*
name|i
operator|/
name|steps
operator|)
operator|)
operator|+
literal|"],"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"          // max -> min lat, max lon"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|steps
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"          ["
operator|+
operator|(
name|minLat
operator|+
operator|(
name|maxLat
operator|-
name|minLat
operator|)
operator|*
operator|(
name|steps
operator|-
name|i
operator|)
operator|/
name|steps
operator|)
operator|+
literal|", "
operator|+
name|maxLon
operator|+
literal|"],"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"          // min lat, max -> min lon"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|steps
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"          ["
operator|+
name|minLat
operator|+
literal|", "
operator|+
operator|(
name|minLon
operator|+
operator|(
name|maxLon
operator|-
name|minLon
operator|)
operator|*
operator|(
name|steps
operator|-
name|i
operator|)
operator|/
name|steps
operator|)
operator|+
literal|"],"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"          // min lat, min lon"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"          ["
operator|+
name|minLat
operator|+
literal|", "
operator|+
name|minLon
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        ], {color: \""
operator|+
name|color
operator|+
literal|"\", fillColor: \""
operator|+
name|color
operator|+
literal|"\"});"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        "
operator|+
name|name
operator|+
literal|".addTo(earth);"
argument_list|)
expr_stmt|;
block|}
DECL|method|plotLatApproximatelyOnEarthSurface
specifier|private
specifier|static
name|void
name|plotLatApproximatelyOnEarthSurface
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|color
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|minLon
parameter_list|,
name|double
name|maxLon
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        var "
operator|+
name|name
operator|+
literal|" = WE.polygon(["
argument_list|)
expr_stmt|;
name|double
name|lon
decl_stmt|;
for|for
control|(
name|lon
operator|=
name|minLon
init|;
name|lon
operator|<=
name|maxLon
condition|;
name|lon
operator|+=
operator|(
name|maxLon
operator|-
name|minLon
operator|)
operator|/
literal|36
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"          ["
operator|+
name|lat
operator|+
literal|", "
operator|+
name|lon
operator|+
literal|"],"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"          ["
operator|+
name|lat
operator|+
literal|", "
operator|+
name|maxLon
operator|+
literal|"],"
argument_list|)
expr_stmt|;
name|lon
operator|-=
operator|(
name|maxLon
operator|-
name|minLon
operator|)
operator|/
literal|36
expr_stmt|;
for|for
control|(
init|;
name|lon
operator|>=
name|minLon
condition|;
name|lon
operator|-=
operator|(
name|maxLon
operator|-
name|minLon
operator|)
operator|/
literal|36
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"          ["
operator|+
name|lat
operator|+
literal|", "
operator|+
name|lon
operator|+
literal|"],"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        ], {color: \""
operator|+
name|color
operator|+
literal|"\", fillColor: \"#ffffff\", opacity: "
operator|+
operator|(
name|color
operator|.
name|equals
argument_list|(
literal|"#ffffff"
argument_list|)
condition|?
literal|"0.3"
else|:
literal|"1"
operator|)
operator|+
literal|", fillOpacity: 0.0001});"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        "
operator|+
name|name
operator|+
literal|".addTo(earth);"
argument_list|)
expr_stmt|;
block|}
DECL|method|plotLonApproximatelyOnEarthSurface
specifier|private
specifier|static
name|void
name|plotLonApproximatelyOnEarthSurface
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|color
parameter_list|,
name|double
name|lon
parameter_list|,
name|double
name|minLat
parameter_list|,
name|double
name|maxLat
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        var "
operator|+
name|name
operator|+
literal|" = WE.polygon(["
argument_list|)
expr_stmt|;
name|double
name|lat
decl_stmt|;
for|for
control|(
name|lat
operator|=
name|minLat
init|;
name|lat
operator|<=
name|maxLat
condition|;
name|lat
operator|+=
operator|(
name|maxLat
operator|-
name|minLat
operator|)
operator|/
literal|36
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"          ["
operator|+
name|lat
operator|+
literal|", "
operator|+
name|lon
operator|+
literal|"],"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"          ["
operator|+
name|maxLat
operator|+
literal|", "
operator|+
name|lon
operator|+
literal|"],"
argument_list|)
expr_stmt|;
name|lat
operator|-=
operator|(
name|maxLat
operator|-
name|minLat
operator|)
operator|/
literal|36
expr_stmt|;
for|for
control|(
init|;
name|lat
operator|>=
name|minLat
condition|;
name|lat
operator|-=
operator|(
name|maxLat
operator|-
name|minLat
operator|)
operator|/
literal|36
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"          ["
operator|+
name|lat
operator|+
literal|", "
operator|+
name|lon
operator|+
literal|"],"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        ], {color: \""
operator|+
name|color
operator|+
literal|"\", fillColor: \"#ffffff\", opacity: "
operator|+
operator|(
name|color
operator|.
name|equals
argument_list|(
literal|"#ffffff"
argument_list|)
condition|?
literal|"0.3"
else|:
literal|"1"
operator|)
operator|+
literal|", fillOpacity: 0.0001});"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        "
operator|+
name|name
operator|+
literal|".addTo(earth);"
argument_list|)
expr_stmt|;
block|}
comment|// http://www.webglearth.org has API details:
DECL|method|polysToWebGLEarth
specifier|public
specifier|static
name|void
name|polysToWebGLEarth
parameter_list|(
name|List
argument_list|<
name|double
index|[]
index|[]
argument_list|>
name|polys
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<!DOCTYPE HTML>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<html>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<head>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<script src=\"http://www.webglearth.com/v2/api.js\"></script>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<script>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      function initialize() {"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        var earth = new WE.map('earth_div');"
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|double
index|[]
index|[]
name|poly
range|:
name|polys
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        var poly"
operator|+
name|count
operator|+
literal|" = WE.polygon(["
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|poly
index|[
literal|0
index|]
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|double
name|lat
init|=
name|poly
index|[
literal|0
index|]
index|[
name|i
index|]
decl_stmt|;
name|double
name|lon
init|=
name|poly
index|[
literal|1
index|]
index|[
name|i
index|]
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"          ["
operator|+
name|lat
operator|+
literal|", "
operator|+
name|lon
operator|+
literal|"],"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        ], {color: '#00ff00'});"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        poly"
operator|+
name|count
operator|+
literal|".addTo(earth);"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        WE.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',{"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"          attribution: 'Â© OpenStreetMap contributors'"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        }).addTo(earth);"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      }"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"</script>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<style>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      html, body{padding: 0; margin: 0;}"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      #earth_div{top: 0; right: 0; bottom: 0; left: 0; position: absolute !important;}"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"</style>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<title>WebGL Earth API: Hello World</title>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"</head>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<body onload=\"initialize()\">"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<div id=\"earth_div\"></div>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"</body>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"</html>"
argument_list|)
expr_stmt|;
block|}
comment|// http://www.webglearth.org has API details:
DECL|method|toWebGLEarth
specifier|public
specifier|static
name|void
name|toWebGLEarth
parameter_list|(
name|double
name|rectMinLatitude
parameter_list|,
name|double
name|rectMaxLatitude
parameter_list|,
name|double
name|rectMinLongitude
parameter_list|,
name|double
name|rectMaxLongitude
parameter_list|,
name|double
name|centerLatitude
parameter_list|,
name|double
name|centerLongitude
parameter_list|,
name|double
name|radiusMeters
parameter_list|)
block|{
name|Rectangle
name|box
init|=
name|Rectangle
operator|.
name|fromPointDistance
argument_list|(
name|centerLatitude
argument_list|,
name|centerLongitude
argument_list|,
name|radiusMeters
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<!DOCTYPE HTML>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<html>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<head>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<script src=\"http://www.webglearth.com/v2/api.js\"></script>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<script>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      function initialize() {"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        var earth = new WE.map('earth_div', {center: ["
operator|+
name|centerLatitude
operator|+
literal|", "
operator|+
name|centerLongitude
operator|+
literal|"]});"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        var marker = WE.marker(["
operator|+
name|centerLatitude
operator|+
literal|", "
operator|+
name|centerLongitude
operator|+
literal|"]).addTo(earth);"
argument_list|)
expr_stmt|;
name|drawRectApproximatelyOnEarthSurface
argument_list|(
literal|"cell"
argument_list|,
literal|"#ff0000"
argument_list|,
name|rectMinLatitude
argument_list|,
name|rectMaxLatitude
argument_list|,
name|rectMinLongitude
argument_list|,
name|rectMaxLongitude
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        var polygonB = WE.polygon(["
argument_list|)
expr_stmt|;
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|inverseHaversin
argument_list|(
name|b
argument_list|,
name|centerLatitude
argument_list|,
name|centerLongitude
argument_list|,
name|radiusMeters
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        ], {color: '#00ff00'});"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        polygonB.addTo(earth);"
argument_list|)
expr_stmt|;
name|drawRectApproximatelyOnEarthSurface
argument_list|(
literal|"bbox"
argument_list|,
literal|"#00ff00"
argument_list|,
name|box
operator|.
name|minLat
argument_list|,
name|box
operator|.
name|maxLat
argument_list|,
name|box
operator|.
name|minLon
argument_list|,
name|box
operator|.
name|maxLon
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        WE.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',{"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"          attribution: 'Â© OpenStreetMap contributors'"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        }).addTo(earth);"
argument_list|)
expr_stmt|;
name|plotLatApproximatelyOnEarthSurface
argument_list|(
literal|"lat0"
argument_list|,
literal|"#ffffff"
argument_list|,
literal|4.68
argument_list|,
literal|0.0
argument_list|,
literal|360.0
argument_list|)
expr_stmt|;
name|plotLatApproximatelyOnEarthSurface
argument_list|(
literal|"lat1"
argument_list|,
literal|"#ffffff"
argument_list|,
literal|180
operator|-
literal|93.09
argument_list|,
literal|0.0
argument_list|,
literal|360.0
argument_list|)
expr_stmt|;
name|plotLatApproximatelyOnEarthSurface
argument_list|(
literal|"axisLat"
argument_list|,
literal|"#00ff00"
argument_list|,
name|Rectangle
operator|.
name|axisLat
argument_list|(
name|centerLatitude
argument_list|,
name|radiusMeters
argument_list|)
argument_list|,
name|box
operator|.
name|minLon
argument_list|,
name|box
operator|.
name|maxLon
argument_list|)
expr_stmt|;
name|plotLonApproximatelyOnEarthSurface
argument_list|(
literal|"axisLon"
argument_list|,
literal|"#00ff00"
argument_list|,
name|centerLongitude
argument_list|,
name|box
operator|.
name|minLat
argument_list|,
name|box
operator|.
name|maxLat
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      }"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"</script>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<style>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      html, body{padding: 0; margin: 0;}"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      #earth_div{top: 0; right: 0; bottom: 0; left: 0; position: absolute !important;}"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"</style>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<title>WebGL Earth API: Hello World</title>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"</head>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<body onload=\"initialize()\">"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<div id=\"earth_div\"></div>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"</body>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"</html>"
argument_list|)
expr_stmt|;
block|}
DECL|method|inverseHaversin
specifier|private
specifier|static
name|void
name|inverseHaversin
parameter_list|(
name|StringBuilder
name|b
parameter_list|,
name|double
name|centerLat
parameter_list|,
name|double
name|centerLon
parameter_list|,
name|double
name|radiusMeters
parameter_list|)
block|{
name|double
name|angle
init|=
literal|0
decl_stmt|;
name|int
name|steps
init|=
literal|100
decl_stmt|;
name|newAngle
label|:
while|while
condition|(
name|angle
operator|<
literal|360
condition|)
block|{
name|double
name|x
init|=
name|Math
operator|.
name|cos
argument_list|(
name|Math
operator|.
name|toRadians
argument_list|(
name|angle
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y
init|=
name|Math
operator|.
name|sin
argument_list|(
name|Math
operator|.
name|toRadians
argument_list|(
name|angle
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|factor
init|=
literal|2.0
decl_stmt|;
name|double
name|step
init|=
literal|1.0
decl_stmt|;
name|int
name|last
init|=
literal|0
decl_stmt|;
name|double
name|lastDistanceMeters
init|=
literal|0.0
decl_stmt|;
comment|//System.out.println("angle " + angle + " slope=" + slope);
while|while
condition|(
literal|true
condition|)
block|{
name|double
name|lat
init|=
name|wrapLat
argument_list|(
name|centerLat
operator|+
name|y
operator|*
name|factor
argument_list|)
decl_stmt|;
name|double
name|lon
init|=
name|wrapLon
argument_list|(
name|centerLon
operator|+
name|x
operator|*
name|factor
argument_list|)
decl_stmt|;
name|double
name|distanceMeters
init|=
name|SloppyMath
operator|.
name|haversinMeters
argument_list|(
name|centerLat
argument_list|,
name|centerLon
argument_list|,
name|lat
argument_list|,
name|lon
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|==
literal|1
operator|&&
name|distanceMeters
operator|<
name|lastDistanceMeters
condition|)
block|{
comment|// For large enough circles, some angles are not possible:
comment|//System.out.println("  done: give up on angle " + angle);
name|angle
operator|+=
literal|360.
operator|/
name|steps
expr_stmt|;
continue|continue
name|newAngle
continue|;
block|}
if|if
condition|(
name|last
operator|==
operator|-
literal|1
operator|&&
name|distanceMeters
operator|>
name|lastDistanceMeters
condition|)
block|{
comment|// For large enough circles, some angles are not possible:
comment|//System.out.println("  done: give up on angle " + angle);
name|angle
operator|+=
literal|360.
operator|/
name|steps
expr_stmt|;
continue|continue
name|newAngle
continue|;
block|}
name|lastDistanceMeters
operator|=
name|distanceMeters
expr_stmt|;
comment|//System.out.println("  iter lat=" + lat + " lon=" + lon + " distance=" + distanceMeters + " vs " + radiusMeters);
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|distanceMeters
operator|-
name|radiusMeters
argument_list|)
operator|<
literal|0.1
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"          ["
operator|+
name|lat
operator|+
literal|", "
operator|+
name|lon
operator|+
literal|"],\n"
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|distanceMeters
operator|>
name|radiusMeters
condition|)
block|{
comment|// too big
comment|//System.out.println("    smaller");
name|factor
operator|-=
name|step
expr_stmt|;
if|if
condition|(
name|last
operator|==
literal|1
condition|)
block|{
comment|//System.out.println("      half-step");
name|step
operator|/=
literal|2.0
expr_stmt|;
block|}
name|last
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|distanceMeters
operator|<
name|radiusMeters
condition|)
block|{
comment|// too small
comment|//System.out.println("    bigger");
name|factor
operator|+=
name|step
expr_stmt|;
if|if
condition|(
name|last
operator|==
operator|-
literal|1
condition|)
block|{
comment|//System.out.println("      half-step");
name|step
operator|/=
literal|2.0
expr_stmt|;
block|}
name|last
operator|=
literal|1
expr_stmt|;
block|}
block|}
name|angle
operator|+=
literal|360.
operator|/
name|steps
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
