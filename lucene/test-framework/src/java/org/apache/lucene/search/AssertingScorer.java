begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|WeakHashMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AssertingAtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|VirtualMethod
import|;
end_import
begin_comment
comment|/** Wraps a Scorer with additional checks */
end_comment
begin_class
DECL|class|AssertingScorer
specifier|public
class|class
name|AssertingScorer
extends|extends
name|Scorer
block|{
DECL|enum|TopScorer
enum|enum
name|TopScorer
block|{
DECL|enum constant|YES
DECL|enum constant|NO
DECL|enum constant|UNKNOWN
name|YES
block|,
name|NO
block|,
name|UNKNOWN
block|;   }
DECL|field|SCORE_COLLECTOR
specifier|private
specifier|static
specifier|final
name|VirtualMethod
argument_list|<
name|Scorer
argument_list|>
name|SCORE_COLLECTOR
init|=
operator|new
name|VirtualMethod
argument_list|<
name|Scorer
argument_list|>
argument_list|(
name|Scorer
operator|.
name|class
argument_list|,
literal|"score"
argument_list|,
name|Collector
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SCORE_COLLECTOR_RANGE
specifier|private
specifier|static
specifier|final
name|VirtualMethod
argument_list|<
name|Scorer
argument_list|>
name|SCORE_COLLECTOR_RANGE
init|=
operator|new
name|VirtualMethod
argument_list|<
name|Scorer
argument_list|>
argument_list|(
name|Scorer
operator|.
name|class
argument_list|,
literal|"score"
argument_list|,
name|Collector
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// we need to track scorers using a weak hash map because otherwise we
comment|// could loose references because of eg.
comment|// AssertingScorer.score(Collector) which needs to delegate to work correctly
DECL|field|ASSERTING_INSTANCES
specifier|private
specifier|static
name|Map
argument_list|<
name|Scorer
argument_list|,
name|WeakReference
argument_list|<
name|AssertingScorer
argument_list|>
argument_list|>
name|ASSERTING_INSTANCES
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|WeakHashMap
argument_list|<
name|Scorer
argument_list|,
name|WeakReference
argument_list|<
name|AssertingScorer
argument_list|>
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|wrap
specifier|private
specifier|static
name|Scorer
name|wrap
parameter_list|(
name|Random
name|random
parameter_list|,
name|Scorer
name|other
parameter_list|,
name|TopScorer
name|topScorer
parameter_list|,
name|boolean
name|inOrder
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
operator|||
name|other
operator|instanceof
name|AssertingScorer
condition|)
block|{
return|return
name|other
return|;
block|}
specifier|final
name|AssertingScorer
name|assertScorer
init|=
operator|new
name|AssertingScorer
argument_list|(
name|random
argument_list|,
name|other
argument_list|,
name|topScorer
argument_list|,
name|inOrder
argument_list|)
decl_stmt|;
name|ASSERTING_INSTANCES
operator|.
name|put
argument_list|(
name|other
argument_list|,
operator|new
name|WeakReference
argument_list|<
name|AssertingScorer
argument_list|>
argument_list|(
name|assertScorer
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|assertScorer
return|;
block|}
DECL|method|wrap
specifier|static
name|Scorer
name|wrap
parameter_list|(
name|Random
name|random
parameter_list|,
name|Scorer
name|other
parameter_list|,
name|boolean
name|topScorer
parameter_list|,
name|boolean
name|inOrder
parameter_list|)
block|{
return|return
name|wrap
argument_list|(
name|random
argument_list|,
name|other
argument_list|,
name|topScorer
condition|?
name|TopScorer
operator|.
name|YES
else|:
name|TopScorer
operator|.
name|NO
argument_list|,
name|inOrder
argument_list|)
return|;
block|}
DECL|method|getAssertingScorer
specifier|static
name|Scorer
name|getAssertingScorer
parameter_list|(
name|Random
name|random
parameter_list|,
name|Scorer
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
operator|||
name|other
operator|instanceof
name|AssertingScorer
condition|)
block|{
return|return
name|other
return|;
block|}
specifier|final
name|WeakReference
argument_list|<
name|AssertingScorer
argument_list|>
name|assertingScorerRef
init|=
name|ASSERTING_INSTANCES
operator|.
name|get
argument_list|(
name|other
argument_list|)
decl_stmt|;
specifier|final
name|AssertingScorer
name|assertingScorer
init|=
name|assertingScorerRef
operator|==
literal|null
condition|?
literal|null
else|:
name|assertingScorerRef
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|assertingScorer
operator|==
literal|null
condition|)
block|{
comment|// can happen in case of memory pressure or if
comment|// scorer1.score(collector) calls
comment|// collector.setScorer(scorer2) with scorer1 != scorer2, such as
comment|// BooleanScorer. In that case we can't enable all assertions
return|return
operator|new
name|AssertingScorer
argument_list|(
name|random
argument_list|,
name|other
argument_list|,
name|TopScorer
operator|.
name|UNKNOWN
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|assertingScorer
return|;
block|}
block|}
DECL|field|random
specifier|final
name|Random
name|random
decl_stmt|;
DECL|field|in
specifier|final
name|Scorer
name|in
decl_stmt|;
DECL|field|docsEnumIn
specifier|final
name|AssertingAtomicReader
operator|.
name|AssertingDocsEnum
name|docsEnumIn
decl_stmt|;
DECL|field|topScorer
specifier|final
name|TopScorer
name|topScorer
decl_stmt|;
DECL|field|inOrder
specifier|final
name|boolean
name|inOrder
decl_stmt|;
DECL|field|canCallNextDoc
specifier|final
name|boolean
name|canCallNextDoc
decl_stmt|;
DECL|method|AssertingScorer
specifier|private
name|AssertingScorer
parameter_list|(
name|Random
name|random
parameter_list|,
name|Scorer
name|in
parameter_list|,
name|TopScorer
name|topScorer
parameter_list|,
name|boolean
name|inOrder
parameter_list|)
block|{
name|super
argument_list|(
name|in
operator|.
name|weight
argument_list|)
expr_stmt|;
name|this
operator|.
name|random
operator|=
name|random
expr_stmt|;
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|topScorer
operator|=
name|topScorer
expr_stmt|;
name|this
operator|.
name|inOrder
operator|=
name|inOrder
expr_stmt|;
name|this
operator|.
name|docsEnumIn
operator|=
operator|new
name|AssertingAtomicReader
operator|.
name|AssertingDocsEnum
argument_list|(
name|in
argument_list|,
name|topScorer
operator|==
name|TopScorer
operator|.
name|NO
argument_list|)
expr_stmt|;
name|this
operator|.
name|canCallNextDoc
operator|=
name|topScorer
operator|!=
name|TopScorer
operator|.
name|YES
comment|// not a top scorer
operator|||
operator|!
name|SCORE_COLLECTOR_RANGE
operator|.
name|isOverriddenAsOf
argument_list|(
name|in
operator|.
name|getClass
argument_list|()
argument_list|)
comment|// the default impl relies upon nextDoc()
operator|||
operator|!
name|SCORE_COLLECTOR
operator|.
name|isOverriddenAsOf
argument_list|(
name|in
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// the default impl relies upon nextDoc()
block|}
DECL|method|getIn
specifier|public
name|Scorer
name|getIn
parameter_list|()
block|{
return|return
name|in
return|;
block|}
DECL|method|iterating
name|boolean
name|iterating
parameter_list|()
block|{
switch|switch
condition|(
name|docID
argument_list|()
condition|)
block|{
case|case
operator|-
literal|1
case|:
case|case
name|NO_MORE_DOCS
case|:
return|return
literal|false
return|;
default|default:
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|iterating
argument_list|()
assert|;
specifier|final
name|float
name|score
init|=
name|in
operator|.
name|score
argument_list|()
decl_stmt|;
assert|assert
operator|!
name|Float
operator|.
name|isNaN
argument_list|(
name|score
argument_list|)
assert|;
assert|assert
operator|!
name|Float
operator|.
name|isNaN
argument_list|(
name|score
argument_list|)
assert|;
return|return
name|score
return|;
block|}
DECL|class|FakeScorer
specifier|private
specifier|final
specifier|static
class|class
name|FakeScorer
extends|extends
name|Scorer
block|{
DECL|field|score
name|float
name|score
decl_stmt|;
DECL|field|doc
name|int
name|doc
decl_stmt|;
DECL|field|freq
name|int
name|freq
decl_stmt|;
DECL|field|cost
specifier|final
name|long
name|cost
decl_stmt|;
DECL|method|FakeScorer
specifier|public
name|FakeScorer
parameter_list|(
name|Scorer
name|other
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|Weight
operator|)
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|cost
operator|=
name|other
operator|.
name|cost
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
block|{
return|return
name|score
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
return|return
name|freq
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|cost
return|;
block|}
block|}
DECL|method|shuffle
specifier|private
name|void
name|shuffle
parameter_list|(
name|int
index|[]
name|docIDs
parameter_list|,
name|float
index|[]
name|scores
parameter_list|,
name|int
index|[]
name|freqs
parameter_list|,
name|int
name|size
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|size
operator|-
literal|1
init|;
name|i
operator|>
literal|0
condition|;
operator|--
name|i
control|)
block|{
specifier|final
name|int
name|other
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|tmpDoc
init|=
name|docIDs
index|[
name|i
index|]
decl_stmt|;
name|docIDs
index|[
name|i
index|]
operator|=
name|docIDs
index|[
name|other
index|]
expr_stmt|;
name|docIDs
index|[
name|other
index|]
operator|=
name|tmpDoc
expr_stmt|;
specifier|final
name|float
name|tmpScore
init|=
name|scores
index|[
name|i
index|]
decl_stmt|;
name|scores
index|[
name|i
index|]
operator|=
name|scores
index|[
name|other
index|]
expr_stmt|;
name|scores
index|[
name|other
index|]
operator|=
name|tmpScore
expr_stmt|;
specifier|final
name|int
name|tmpFreq
init|=
name|freqs
index|[
name|i
index|]
decl_stmt|;
name|freqs
index|[
name|i
index|]
operator|=
name|freqs
index|[
name|other
index|]
expr_stmt|;
name|freqs
index|[
name|other
index|]
operator|=
name|tmpFreq
expr_stmt|;
block|}
block|}
DECL|method|flush
specifier|private
specifier|static
name|void
name|flush
parameter_list|(
name|int
index|[]
name|docIDs
parameter_list|,
name|float
index|[]
name|scores
parameter_list|,
name|int
index|[]
name|freqs
parameter_list|,
name|int
name|size
parameter_list|,
name|FakeScorer
name|scorer
parameter_list|,
name|Collector
name|collector
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|scorer
operator|.
name|doc
operator|=
name|docIDs
index|[
name|i
index|]
expr_stmt|;
name|scorer
operator|.
name|freq
operator|=
name|freqs
index|[
name|i
index|]
expr_stmt|;
name|scorer
operator|.
name|score
operator|=
name|scores
index|[
name|i
index|]
expr_stmt|;
name|collector
operator|.
name|collect
argument_list|(
name|scorer
operator|.
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|scoreInRandomOrder
specifier|private
name|void
name|scoreInRandomOrder
parameter_list|(
name|Collector
name|collector
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|docID
argument_list|()
operator|==
operator|-
literal|1
assert|;
comment|// not started
name|FakeScorer
name|fake
init|=
operator|new
name|FakeScorer
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|collector
operator|.
name|setScorer
argument_list|(
name|fake
argument_list|)
expr_stmt|;
specifier|final
name|int
name|bufferSize
init|=
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|int
index|[]
name|docIDs
init|=
operator|new
name|int
index|[
name|bufferSize
index|]
decl_stmt|;
specifier|final
name|float
index|[]
name|scores
init|=
operator|new
name|float
index|[
name|bufferSize
index|]
decl_stmt|;
specifier|final
name|int
index|[]
name|freqs
init|=
operator|new
name|int
index|[
name|bufferSize
index|]
decl_stmt|;
name|int
name|buffered
init|=
literal|0
decl_stmt|;
name|int
name|doc
decl_stmt|;
while|while
condition|(
operator|(
name|doc
operator|=
name|nextDoc
argument_list|()
operator|)
operator|!=
name|NO_MORE_DOCS
condition|)
block|{
name|docIDs
index|[
name|buffered
index|]
operator|=
name|doc
expr_stmt|;
name|scores
index|[
name|buffered
index|]
operator|=
name|score
argument_list|()
expr_stmt|;
name|freqs
index|[
name|buffered
index|]
operator|=
name|freq
argument_list|()
expr_stmt|;
if|if
condition|(
operator|++
name|buffered
operator|==
name|bufferSize
condition|)
block|{
name|shuffle
argument_list|(
name|docIDs
argument_list|,
name|scores
argument_list|,
name|freqs
argument_list|,
name|buffered
argument_list|)
expr_stmt|;
name|flush
argument_list|(
name|docIDs
argument_list|,
name|scores
argument_list|,
name|freqs
argument_list|,
name|buffered
argument_list|,
name|fake
argument_list|,
name|collector
argument_list|)
expr_stmt|;
name|buffered
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|shuffle
argument_list|(
name|docIDs
argument_list|,
name|scores
argument_list|,
name|freqs
argument_list|,
name|buffered
argument_list|)
expr_stmt|;
name|flush
argument_list|(
name|docIDs
argument_list|,
name|scores
argument_list|,
name|freqs
argument_list|,
name|buffered
argument_list|,
name|fake
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|void
name|score
parameter_list|(
name|Collector
name|collector
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|topScorer
operator|!=
name|TopScorer
operator|.
name|NO
assert|;
if|if
condition|(
name|SCORE_COLLECTOR
operator|.
name|isOverriddenAsOf
argument_list|(
name|this
operator|.
name|in
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
try|try
block|{
specifier|final
name|boolean
name|remaining
init|=
name|in
operator|.
name|score
argument_list|(
name|collector
argument_list|,
name|DocsEnum
operator|.
name|NO_MORE_DOCS
argument_list|,
name|in
operator|.
name|nextDoc
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
operator|!
name|remaining
assert|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|in
operator|.
name|score
argument_list|(
name|collector
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|in
operator|.
name|score
argument_list|(
name|collector
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// score(Collector) has not been overridden, use the super method in
comment|// order to benefit from all assertions
if|if
condition|(
name|collector
operator|.
name|acceptsDocsOutOfOrder
argument_list|()
operator|&&
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|scoreInRandomOrder
argument_list|(
name|collector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|score
argument_list|(
name|collector
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|boolean
name|score
parameter_list|(
name|Collector
name|collector
parameter_list|,
name|int
name|max
parameter_list|,
name|int
name|firstDocID
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|topScorer
operator|!=
name|TopScorer
operator|.
name|NO
assert|;
if|if
condition|(
name|SCORE_COLLECTOR_RANGE
operator|.
name|isOverriddenAsOf
argument_list|(
name|this
operator|.
name|in
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|in
operator|.
name|score
argument_list|(
name|collector
argument_list|,
name|max
argument_list|,
name|firstDocID
argument_list|)
return|;
block|}
else|else
block|{
comment|// score(Collector,int,int) has not been overridden, use the super
comment|// method in order to benefit from all assertions
return|return
name|super
operator|.
name|score
argument_list|(
name|collector
argument_list|,
name|max
argument_list|,
name|firstDocID
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getChildren
specifier|public
name|Collection
argument_list|<
name|ChildScorer
argument_list|>
name|getChildren
parameter_list|()
block|{
comment|// We cannot hide that we hold a single child, else
comment|// collectors (e.g. ToParentBlockJoinCollector) that
comment|// need to walk the scorer tree will miss/skip the
comment|// Scorer we wrap:
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|ChildScorer
argument_list|(
name|in
argument_list|,
literal|"SHOULD"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|iterating
argument_list|()
assert|;
return|return
name|in
operator|.
name|freq
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|in
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|canCallNextDoc
operator|:
literal|"top scorers should not call nextDoc()"
assert|;
return|return
name|docsEnumIn
operator|.
name|nextDoc
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|canCallNextDoc
operator|:
literal|"top scorers should not call advance(target)"
assert|;
return|return
name|docsEnumIn
operator|.
name|advance
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|in
operator|.
name|cost
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AssertingScorer("
operator|+
name|in
operator|+
literal|")"
return|;
block|}
block|}
end_class
end_unit
