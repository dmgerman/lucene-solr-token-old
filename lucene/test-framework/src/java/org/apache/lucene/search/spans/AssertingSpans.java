begin_unit
begin_package
DECL|package|org.apache.lucene.search.spans
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TwoPhaseIterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**   * Wraps a Spans with additional asserts   */
end_comment
begin_class
DECL|class|AssertingSpans
class|class
name|AssertingSpans
extends|extends
name|Spans
block|{
DECL|field|in
specifier|final
name|Spans
name|in
decl_stmt|;
DECL|field|doc
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
comment|/**     * tracks current state of this spans    */
DECL|enum|State
specifier|static
enum|enum
name|State
block|{
comment|/**      * document iteration has not yet begun ({@link #docID()} = -1)       */
DECL|enum constant|DOC_START
name|DOC_START
block|,
comment|/**      * two-phase iterator has moved to a new docid, but {@link TwoPhaseIterator#matches()} has      * not been called or it returned false (so you should not do things with the enum)      */
DECL|enum constant|DOC_UNVERIFIED
name|DOC_UNVERIFIED
block|,
comment|/**      * iterator set to a valid docID, but position iteration has not yet begun ({@link #startPosition() == -1})      */
DECL|enum constant|POS_START
name|POS_START
block|,
comment|/**      * iterator set to a valid docID, and positioned (-1< {@link #startPosition()}< {@link #NO_MORE_POSITIONS})      */
DECL|enum constant|ITERATING
name|ITERATING
block|,
comment|/**      * positions exhausted ({@link #startPosition()} = {@link #NO_MORE_POSITIONS})      */
DECL|enum constant|POS_FINISHED
name|POS_FINISHED
block|,
comment|/**       * documents exhausted ({@link #docID()} = {@link #NO_MORE_DOCS})       */
DECL|enum constant|DOC_FINISHED
name|DOC_FINISHED
block|}
empty_stmt|;
DECL|field|state
name|State
name|state
init|=
name|State
operator|.
name|DOC_START
decl_stmt|;
DECL|method|AssertingSpans
name|AssertingSpans
parameter_list|(
name|Spans
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nextStartPosition
specifier|public
name|int
name|nextStartPosition
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|!=
name|State
operator|.
name|DOC_START
operator|:
literal|"invalid position access, state="
operator|+
name|state
operator|+
literal|": "
operator|+
name|in
assert|;
assert|assert
name|state
operator|!=
name|State
operator|.
name|DOC_FINISHED
operator|:
literal|"invalid position access, state="
operator|+
name|state
operator|+
literal|": "
operator|+
name|in
assert|;
assert|assert
name|state
operator|!=
name|State
operator|.
name|DOC_UNVERIFIED
operator|:
literal|"invalid position access, state="
operator|+
name|state
operator|+
literal|": "
operator|+
name|in
assert|;
name|checkCurrentPositions
argument_list|()
expr_stmt|;
comment|// move to next position
name|int
name|prev
init|=
name|in
operator|.
name|startPosition
argument_list|()
decl_stmt|;
name|int
name|start
init|=
name|in
operator|.
name|nextStartPosition
argument_list|()
decl_stmt|;
assert|assert
name|start
operator|>=
name|prev
operator|:
literal|"invalid startPosition (positions went backwards, previous="
operator|+
name|prev
operator|+
literal|"): "
operator|+
name|in
assert|;
comment|// transition state if necessary
if|if
condition|(
name|start
operator|==
name|NO_MORE_POSITIONS
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|POS_FINISHED
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|State
operator|.
name|ITERATING
expr_stmt|;
block|}
comment|// check new positions
name|checkCurrentPositions
argument_list|()
expr_stmt|;
return|return
name|start
return|;
block|}
DECL|method|checkCurrentPositions
specifier|private
name|void
name|checkCurrentPositions
parameter_list|()
block|{
name|int
name|start
init|=
name|in
operator|.
name|startPosition
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|in
operator|.
name|endPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|DOC_START
operator|||
name|state
operator|==
name|State
operator|.
name|DOC_UNVERIFIED
operator|||
name|state
operator|==
name|State
operator|.
name|POS_START
condition|)
block|{
assert|assert
name|start
operator|==
operator|-
literal|1
operator|:
literal|"invalid startPosition (should be -1): "
operator|+
name|in
assert|;
assert|assert
name|end
operator|==
operator|-
literal|1
operator|:
literal|"invalid endPosition (should be -1): "
operator|+
name|in
assert|;
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|POS_FINISHED
condition|)
block|{
assert|assert
name|start
operator|==
name|NO_MORE_POSITIONS
operator|:
literal|"invalid startPosition (should be NO_MORE_POSITIONS): "
operator|+
name|in
assert|;
assert|assert
name|end
operator|==
name|NO_MORE_POSITIONS
operator|:
literal|"invalid endPosition (should be NO_MORE_POSITIONS): "
operator|+
name|in
assert|;
block|}
else|else
block|{
assert|assert
name|start
operator|>=
literal|0
operator|:
literal|"invalid startPosition (negative): "
operator|+
name|in
assert|;
assert|assert
name|start
operator|<=
name|end
operator|:
literal|"invalid startPosition (> endPosition): "
operator|+
name|in
assert|;
block|}
block|}
annotation|@
name|Override
DECL|method|startPosition
specifier|public
name|int
name|startPosition
parameter_list|()
block|{
name|checkCurrentPositions
argument_list|()
expr_stmt|;
return|return
name|in
operator|.
name|startPosition
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|endPosition
specifier|public
name|int
name|endPosition
parameter_list|()
block|{
name|checkCurrentPositions
argument_list|()
expr_stmt|;
return|return
name|in
operator|.
name|endPosition
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|SpanCollector
name|collector
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|==
name|State
operator|.
name|ITERATING
operator|:
literal|"collect() called in illegal state: "
operator|+
name|state
operator|+
literal|": "
operator|+
name|in
assert|;
name|in
operator|.
name|collect
argument_list|(
name|collector
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
name|int
name|doc
init|=
name|in
operator|.
name|docID
argument_list|()
decl_stmt|;
assert|assert
name|doc
operator|==
name|this
operator|.
name|doc
operator|:
literal|"broken docID() impl: docID() = "
operator|+
name|doc
operator|+
literal|", but next/advance last returned: "
operator|+
name|this
operator|.
name|doc
operator|+
literal|": "
operator|+
name|in
assert|;
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|!=
name|State
operator|.
name|DOC_FINISHED
operator|:
literal|"nextDoc() called after NO_MORE_DOCS: "
operator|+
name|in
assert|;
name|int
name|nextDoc
init|=
name|in
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
assert|assert
name|nextDoc
operator|>
name|doc
operator|:
literal|"backwards nextDoc from "
operator|+
name|doc
operator|+
literal|" to "
operator|+
name|nextDoc
operator|+
literal|": "
operator|+
name|in
assert|;
if|if
condition|(
name|nextDoc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|DOC_FINISHED
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|in
operator|.
name|startPosition
argument_list|()
operator|==
operator|-
literal|1
operator|:
literal|"invalid initial startPosition() [should be -1]: "
operator|+
name|in
assert|;
assert|assert
name|in
operator|.
name|endPosition
argument_list|()
operator|==
operator|-
literal|1
operator|:
literal|"invalid initial endPosition() [should be -1]: "
operator|+
name|in
assert|;
name|state
operator|=
name|State
operator|.
name|POS_START
expr_stmt|;
block|}
name|doc
operator|=
name|nextDoc
expr_stmt|;
return|return
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|!=
name|State
operator|.
name|DOC_FINISHED
operator|:
literal|"advance() called after NO_MORE_DOCS: "
operator|+
name|in
assert|;
assert|assert
name|target
operator|>
name|doc
operator|:
literal|"target must be> docID(), got "
operator|+
name|target
operator|+
literal|"<= "
operator|+
name|doc
operator|+
literal|": "
operator|+
name|in
assert|;
name|int
name|advanced
init|=
name|in
operator|.
name|advance
argument_list|(
name|target
argument_list|)
decl_stmt|;
assert|assert
name|advanced
operator|>=
name|target
operator|:
literal|"backwards advance from: "
operator|+
name|target
operator|+
literal|" to: "
operator|+
name|advanced
operator|+
literal|": "
operator|+
name|in
assert|;
if|if
condition|(
name|advanced
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|DOC_FINISHED
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|in
operator|.
name|startPosition
argument_list|()
operator|==
operator|-
literal|1
operator|:
literal|"invalid initial startPosition() [should be -1]: "
operator|+
name|in
assert|;
assert|assert
name|in
operator|.
name|endPosition
argument_list|()
operator|==
operator|-
literal|1
operator|:
literal|"invalid initial endPosition() [should be -1]: "
operator|+
name|in
assert|;
name|state
operator|=
name|State
operator|.
name|POS_START
expr_stmt|;
block|}
name|doc
operator|=
name|advanced
expr_stmt|;
return|return
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Asserting("
operator|+
name|in
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|in
operator|.
name|cost
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|asTwoPhaseIterator
specifier|public
name|TwoPhaseIterator
name|asTwoPhaseIterator
parameter_list|()
block|{
specifier|final
name|TwoPhaseIterator
name|iterator
init|=
name|in
operator|.
name|asTwoPhaseIterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|iterator
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|AssertingTwoPhaseView
argument_list|(
name|iterator
argument_list|)
return|;
block|}
DECL|class|AssertingTwoPhaseView
class|class
name|AssertingTwoPhaseView
extends|extends
name|TwoPhaseIterator
block|{
DECL|field|in
specifier|final
name|TwoPhaseIterator
name|in
decl_stmt|;
DECL|field|lastDoc
name|int
name|lastDoc
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|AssertingTwoPhaseView
name|AssertingTwoPhaseView
parameter_list|(
name|TwoPhaseIterator
name|iterator
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|AssertingDISI
argument_list|(
name|iterator
operator|.
name|approximation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|in
operator|=
name|iterator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matches
specifier|public
name|boolean
name|matches
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|approximation
operator|.
name|docID
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|approximation
operator|.
name|docID
argument_list|()
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"matches() should not be called on doc ID "
operator|+
name|approximation
operator|.
name|docID
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|lastDoc
operator|==
name|approximation
operator|.
name|docID
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"matches() has been called twice on doc ID "
operator|+
name|approximation
operator|.
name|docID
argument_list|()
argument_list|)
throw|;
block|}
name|lastDoc
operator|=
name|approximation
operator|.
name|docID
argument_list|()
expr_stmt|;
name|boolean
name|v
init|=
name|in
operator|.
name|matches
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|POS_START
expr_stmt|;
block|}
return|return
name|v
return|;
block|}
block|}
DECL|class|AssertingDISI
class|class
name|AssertingDISI
extends|extends
name|DocIdSetIterator
block|{
DECL|field|in
specifier|final
name|DocIdSetIterator
name|in
decl_stmt|;
DECL|method|AssertingDISI
name|AssertingDISI
parameter_list|(
name|DocIdSetIterator
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
assert|assert
name|in
operator|.
name|docID
argument_list|()
operator|==
name|AssertingSpans
operator|.
name|this
operator|.
name|docID
argument_list|()
assert|;
return|return
name|in
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|!=
name|State
operator|.
name|DOC_FINISHED
operator|:
literal|"nextDoc() called after NO_MORE_DOCS: "
operator|+
name|in
assert|;
name|int
name|nextDoc
init|=
name|in
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
assert|assert
name|nextDoc
operator|>
name|doc
operator|:
literal|"backwards nextDoc from "
operator|+
name|doc
operator|+
literal|" to "
operator|+
name|nextDoc
operator|+
literal|": "
operator|+
name|in
assert|;
if|if
condition|(
name|nextDoc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|DOC_FINISHED
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|State
operator|.
name|DOC_UNVERIFIED
expr_stmt|;
block|}
name|doc
operator|=
name|nextDoc
expr_stmt|;
return|return
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|state
operator|!=
name|State
operator|.
name|DOC_FINISHED
operator|:
literal|"advance() called after NO_MORE_DOCS: "
operator|+
name|in
assert|;
assert|assert
name|target
operator|>
name|doc
operator|:
literal|"target must be> docID(), got "
operator|+
name|target
operator|+
literal|"<= "
operator|+
name|doc
operator|+
literal|": "
operator|+
name|in
assert|;
name|int
name|advanced
init|=
name|in
operator|.
name|advance
argument_list|(
name|target
argument_list|)
decl_stmt|;
assert|assert
name|advanced
operator|>=
name|target
operator|:
literal|"backwards advance from: "
operator|+
name|target
operator|+
literal|" to: "
operator|+
name|advanced
operator|+
literal|": "
operator|+
name|in
assert|;
if|if
condition|(
name|advanced
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|DOC_FINISHED
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|State
operator|.
name|DOC_UNVERIFIED
expr_stmt|;
block|}
name|doc
operator|=
name|advanced
expr_stmt|;
return|return
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|in
operator|.
name|cost
argument_list|()
return|;
block|}
block|}
block|}
end_class
end_unit
