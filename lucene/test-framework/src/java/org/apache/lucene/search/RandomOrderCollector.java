begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_comment
comment|/** Randomize collection order. Don't forget to call {@link #flush()} when  *  collection is finished to collect buffered documents. */
end_comment
begin_class
DECL|class|RandomOrderCollector
specifier|final
class|class
name|RandomOrderCollector
extends|extends
name|FilterLeafCollector
block|{
DECL|field|random
specifier|final
name|Random
name|random
decl_stmt|;
DECL|field|scorer
name|Scorer
name|scorer
decl_stmt|;
DECL|field|fakeScorer
name|FakeScorer
name|fakeScorer
decl_stmt|;
DECL|field|buffered
name|int
name|buffered
decl_stmt|;
DECL|field|bufferSize
specifier|final
name|int
name|bufferSize
decl_stmt|;
DECL|field|docIDs
specifier|final
name|int
index|[]
name|docIDs
decl_stmt|;
DECL|field|scores
specifier|final
name|float
index|[]
name|scores
decl_stmt|;
DECL|field|freqs
specifier|final
name|int
index|[]
name|freqs
decl_stmt|;
DECL|method|RandomOrderCollector
name|RandomOrderCollector
parameter_list|(
name|Random
name|random
parameter_list|,
name|LeafCollector
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|in
operator|.
name|acceptsDocsOutOfOrder
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|this
operator|.
name|random
operator|=
name|random
expr_stmt|;
name|bufferSize
operator|=
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|docIDs
operator|=
operator|new
name|int
index|[
name|bufferSize
index|]
expr_stmt|;
name|scores
operator|=
operator|new
name|float
index|[
name|bufferSize
index|]
expr_stmt|;
name|freqs
operator|=
operator|new
name|int
index|[
name|bufferSize
index|]
expr_stmt|;
name|buffered
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
name|fakeScorer
operator|=
operator|new
name|FakeScorer
argument_list|()
expr_stmt|;
name|in
operator|.
name|setScorer
argument_list|(
name|fakeScorer
argument_list|)
expr_stmt|;
block|}
DECL|method|shuffle
specifier|private
name|void
name|shuffle
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
name|buffered
operator|-
literal|1
init|;
name|i
operator|>
literal|0
condition|;
operator|--
name|i
control|)
block|{
specifier|final
name|int
name|other
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|tmpDoc
init|=
name|docIDs
index|[
name|i
index|]
decl_stmt|;
name|docIDs
index|[
name|i
index|]
operator|=
name|docIDs
index|[
name|other
index|]
expr_stmt|;
name|docIDs
index|[
name|other
index|]
operator|=
name|tmpDoc
expr_stmt|;
specifier|final
name|float
name|tmpScore
init|=
name|scores
index|[
name|i
index|]
decl_stmt|;
name|scores
index|[
name|i
index|]
operator|=
name|scores
index|[
name|other
index|]
expr_stmt|;
name|scores
index|[
name|other
index|]
operator|=
name|tmpScore
expr_stmt|;
specifier|final
name|int
name|tmpFreq
init|=
name|freqs
index|[
name|i
index|]
decl_stmt|;
name|freqs
index|[
name|i
index|]
operator|=
name|freqs
index|[
name|other
index|]
expr_stmt|;
name|freqs
index|[
name|other
index|]
operator|=
name|tmpFreq
expr_stmt|;
block|}
block|}
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|shuffle
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffered
condition|;
operator|++
name|i
control|)
block|{
name|fakeScorer
operator|.
name|doc
operator|=
name|docIDs
index|[
name|i
index|]
expr_stmt|;
name|fakeScorer
operator|.
name|freq
operator|=
name|freqs
index|[
name|i
index|]
expr_stmt|;
name|fakeScorer
operator|.
name|score
operator|=
name|scores
index|[
name|i
index|]
expr_stmt|;
name|in
operator|.
name|collect
argument_list|(
name|fakeScorer
operator|.
name|doc
argument_list|)
expr_stmt|;
block|}
name|buffered
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|docIDs
index|[
name|buffered
index|]
operator|=
name|doc
expr_stmt|;
name|scores
index|[
name|buffered
index|]
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
try|try
block|{
name|freqs
index|[
name|buffered
index|]
operator|=
name|scorer
operator|.
name|freq
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|freqs
index|[
name|buffered
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
operator|++
name|buffered
operator|==
name|bufferSize
condition|)
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|acceptsDocsOutOfOrder
specifier|public
name|boolean
name|acceptsDocsOutOfOrder
parameter_list|()
block|{
return|return
name|in
operator|.
name|acceptsDocsOutOfOrder
argument_list|()
return|;
block|}
block|}
end_class
end_unit
