begin_unit
begin_package
DECL|package|org.apache.lucene.mockfile
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|mockfile
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|AsynchronousFileChannel
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|SeekableByteChannel
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystem
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|NoSuchFileException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|InfoStream
import|;
end_import
begin_comment
comment|/** Basic tests for VerboseFS */
end_comment
begin_class
DECL|class|TestVerboseFS
specifier|public
class|class
name|TestVerboseFS
extends|extends
name|MockFileSystemTestCase
block|{
annotation|@
name|Override
DECL|method|wrap
specifier|protected
name|Path
name|wrap
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|wrap
argument_list|(
name|path
argument_list|,
name|InfoStream
operator|.
name|NO_OUTPUT
argument_list|)
return|;
block|}
DECL|method|wrap
name|Path
name|wrap
parameter_list|(
name|Path
name|path
parameter_list|,
name|InfoStream
name|stream
parameter_list|)
block|{
name|FileSystem
name|fs
init|=
operator|new
name|VerboseFS
argument_list|(
name|path
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|stream
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"file:///"
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|FilterPath
argument_list|(
name|path
argument_list|,
name|fs
argument_list|)
return|;
block|}
comment|/** InfoStream that looks for a substring and indicates if it saw it */
DECL|class|InfoStreamListener
specifier|static
class|class
name|InfoStreamListener
extends|extends
name|InfoStream
block|{
comment|/** True if we saw the message */
DECL|field|seenMessage
specifier|final
name|AtomicBoolean
name|seenMessage
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|/** Expected message */
DECL|field|messageStartsWith
specifier|final
name|String
name|messageStartsWith
decl_stmt|;
DECL|method|InfoStreamListener
name|InfoStreamListener
parameter_list|(
name|String
name|messageStartsWith
parameter_list|)
block|{
name|this
operator|.
name|messageStartsWith
operator|=
name|messageStartsWith
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{}
annotation|@
name|Override
DECL|method|message
specifier|public
name|void
name|message
parameter_list|(
name|String
name|component
parameter_list|,
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
literal|"FS"
operator|.
name|equals
argument_list|(
name|component
argument_list|)
operator|&&
name|message
operator|.
name|startsWith
argument_list|(
name|messageStartsWith
argument_list|)
condition|)
block|{
name|seenMessage
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isEnabled
specifier|public
name|boolean
name|isEnabled
parameter_list|(
name|String
name|component
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
DECL|method|sawMessage
name|boolean
name|sawMessage
parameter_list|()
block|{
return|return
name|seenMessage
operator|.
name|get
argument_list|()
return|;
block|}
block|}
comment|/** Test createDirectory */
DECL|method|testCreateDirectory
specifier|public
name|void
name|testCreateDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|InfoStreamListener
name|stream
init|=
operator|new
name|InfoStreamListener
argument_list|(
literal|"createDirectory"
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|wrap
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|stream
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"subdir"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stream
operator|.
name|sawMessage
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Files
operator|.
name|createDirectory
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"subdir"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"didn't get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{}
block|}
comment|/** Test delete */
DECL|method|testDelete
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|InfoStreamListener
name|stream
init|=
operator|new
name|InfoStreamListener
argument_list|(
literal|"delete"
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|wrap
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|stream
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|delete
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stream
operator|.
name|sawMessage
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Files
operator|.
name|delete
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"didn't get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{}
block|}
comment|/** Test deleteIfExists */
DECL|method|testDeleteIfExists
specifier|public
name|void
name|testDeleteIfExists
parameter_list|()
throws|throws
name|IOException
block|{
name|InfoStreamListener
name|stream
init|=
operator|new
name|InfoStreamListener
argument_list|(
literal|"deleteIfExists"
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|wrap
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|stream
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stream
operator|.
name|sawMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// no exception
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test copy */
DECL|method|testCopy
specifier|public
name|void
name|testCopy
parameter_list|()
throws|throws
name|IOException
block|{
name|InfoStreamListener
name|stream
init|=
operator|new
name|InfoStreamListener
argument_list|(
literal|"copy"
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|wrap
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|stream
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|dir
operator|.
name|resolve
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stream
operator|.
name|sawMessage
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Files
operator|.
name|copy
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"nonexistent"
argument_list|)
argument_list|,
name|dir
operator|.
name|resolve
argument_list|(
literal|"something"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"didn't get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{}
block|}
comment|/** Test move */
DECL|method|testMove
specifier|public
name|void
name|testMove
parameter_list|()
throws|throws
name|IOException
block|{
name|InfoStreamListener
name|stream
init|=
operator|new
name|InfoStreamListener
argument_list|(
literal|"move"
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|wrap
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|stream
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|move
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|dir
operator|.
name|resolve
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stream
operator|.
name|sawMessage
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Files
operator|.
name|move
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"nonexistent"
argument_list|)
argument_list|,
name|dir
operator|.
name|resolve
argument_list|(
literal|"something"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"didn't get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{}
block|}
comment|/** Test newOutputStream */
DECL|method|testNewOutputStream
specifier|public
name|void
name|testNewOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|InfoStreamListener
name|stream
init|=
operator|new
name|InfoStreamListener
argument_list|(
literal|"newOutputStream"
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|wrap
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|stream
argument_list|)
decl_stmt|;
name|OutputStream
name|file
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"output"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|stream
operator|.
name|sawMessage
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|Files
operator|.
name|newOutputStream
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"output"
argument_list|)
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE_NEW
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"didn't get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{}
block|}
comment|/** Test FileChannel.open */
DECL|method|testFileChannel
specifier|public
name|void
name|testFileChannel
parameter_list|()
throws|throws
name|IOException
block|{
name|InfoStreamListener
name|stream
init|=
operator|new
name|InfoStreamListener
argument_list|(
literal|"newFileChannel"
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|wrap
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|stream
argument_list|)
decl_stmt|;
name|FileChannel
name|channel
init|=
name|FileChannel
operator|.
name|open
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE_NEW
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|stream
operator|.
name|sawMessage
argument_list|()
argument_list|)
expr_stmt|;
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|FileChannel
operator|.
name|open
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE_NEW
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"didn't get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{}
block|}
comment|/** Test AsynchronousFileChannel.open */
DECL|method|testAsyncFileChannel
specifier|public
name|void
name|testAsyncFileChannel
parameter_list|()
throws|throws
name|IOException
block|{
name|InfoStreamListener
name|stream
init|=
operator|new
name|InfoStreamListener
argument_list|(
literal|"newAsynchronousFileChannel"
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|wrap
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|stream
argument_list|)
decl_stmt|;
name|AsynchronousFileChannel
name|channel
init|=
name|AsynchronousFileChannel
operator|.
name|open
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE_NEW
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|stream
operator|.
name|sawMessage
argument_list|()
argument_list|)
expr_stmt|;
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|AsynchronousFileChannel
operator|.
name|open
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE_NEW
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"didn't get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{}
block|}
comment|/** Test newByteChannel */
DECL|method|testByteChannel
specifier|public
name|void
name|testByteChannel
parameter_list|()
throws|throws
name|IOException
block|{
name|InfoStreamListener
name|stream
init|=
operator|new
name|InfoStreamListener
argument_list|(
literal|"newByteChannel"
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|wrap
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|stream
argument_list|)
decl_stmt|;
name|SeekableByteChannel
name|channel
init|=
name|Files
operator|.
name|newByteChannel
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE_NEW
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|stream
operator|.
name|sawMessage
argument_list|()
argument_list|)
expr_stmt|;
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|Files
operator|.
name|newByteChannel
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE_NEW
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"didn't get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{}
block|}
comment|/** Test that verbose does not corrumpt file not found exceptions */
DECL|method|testVerboseFSNoSuchFileException
specifier|public
name|void
name|testVerboseFSNoSuchFileException
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|dir
init|=
name|wrap
argument_list|(
name|createTempDir
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|AsynchronousFileChannel
operator|.
name|open
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"doesNotExist.rip"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFileException
name|nsfe
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|FileChannel
operator|.
name|open
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"doesNotExist.rip"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFileException
name|nsfe
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|Files
operator|.
name|newByteChannel
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"stillopen"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFileException
name|nsfe
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
end_class
end_unit
