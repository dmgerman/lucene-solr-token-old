begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.mockfile
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|mockfile
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystem
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_comment
comment|/** Basic tests for HandleLimitFS */
end_comment
begin_class
DECL|class|TestHandleLimitFS
specifier|public
class|class
name|TestHandleLimitFS
extends|extends
name|MockFileSystemTestCase
block|{
annotation|@
name|Override
DECL|method|wrap
specifier|protected
name|Path
name|wrap
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|wrap
argument_list|(
name|path
argument_list|,
literal|4096
argument_list|)
return|;
block|}
DECL|method|wrap
name|Path
name|wrap
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|FileSystem
name|fs
init|=
operator|new
name|HandleLimitFS
argument_list|(
name|path
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|limit
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"file:///"
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|FilterPath
argument_list|(
name|path
argument_list|,
name|fs
argument_list|)
return|;
block|}
comment|/** set a limit at n files, then open more than that and ensure we hit exception */
DECL|method|testTooManyOpenFiles
specifier|public
name|void
name|testTooManyOpenFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|n
init|=
literal|60
decl_stmt|;
name|Path
name|dir
init|=
name|wrap
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|n
argument_list|)
decl_stmt|;
comment|// create open files to exact limit
name|List
argument_list|<
name|Closeable
argument_list|>
name|toClose
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|p
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
name|dir
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|Files
operator|.
name|newOutputStream
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// now exceed
try|try
block|{
name|Files
operator|.
name|newOutputStream
argument_list|(
name|Files
operator|.
name|createTempFile
argument_list|(
name|dir
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"didn't hit exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Too many open files"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|toClose
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
