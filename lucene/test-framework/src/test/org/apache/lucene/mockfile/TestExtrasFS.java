begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.mockfile
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|mockfile
package|;
end_package
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystem
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/** Basic tests for ExtrasFS */
end_comment
begin_class
DECL|class|TestExtrasFS
specifier|public
class|class
name|TestExtrasFS
extends|extends
name|MockFileSystemTestCase
block|{
annotation|@
name|Override
DECL|method|wrap
specifier|protected
name|Path
name|wrap
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|wrap
argument_list|(
name|path
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
return|;
block|}
DECL|method|wrap
name|Path
name|wrap
parameter_list|(
name|Path
name|path
parameter_list|,
name|boolean
name|active
parameter_list|,
name|boolean
name|createDirectory
parameter_list|)
block|{
name|FileSystem
name|fs
init|=
operator|new
name|ExtrasFS
argument_list|(
name|path
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|active
argument_list|,
name|createDirectory
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"file:///"
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|FilterPath
argument_list|(
name|path
argument_list|,
name|fs
argument_list|)
return|;
block|}
comment|/** test where extra file is created */
DECL|method|testExtraFile
specifier|public
name|void
name|testExtraFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
name|wrap
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|seen
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|stream
control|)
block|{
name|seen
operator|.
name|add
argument_list|(
name|path
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"extra0"
argument_list|)
argument_list|,
name|seen
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|isRegularFile
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"extra0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test where extra directory is created */
DECL|method|testExtraDirectory
specifier|public
name|void
name|testExtraDirectory
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
name|wrap
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|seen
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|stream
control|)
block|{
name|seen
operator|.
name|add
argument_list|(
name|path
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"extra0"
argument_list|)
argument_list|,
name|seen
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"extra0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test where no extras are created: its a no-op */
DECL|method|testNoExtras
specifier|public
name|void
name|testNoExtras
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
name|wrap
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|stream
control|)
block|{
name|fail
argument_list|(
literal|"should not have found file: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
