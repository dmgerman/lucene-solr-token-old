begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|JUnitCore
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|Repeat
import|;
end_import
begin_comment
comment|/**  * Test reproduce message is right with {@link Repeat} annotation.  */
end_comment
begin_class
DECL|class|TestReproduceMessageWithRepeated
specifier|public
class|class
name|TestReproduceMessageWithRepeated
extends|extends
name|WithNestedTests
block|{
DECL|class|Nested
specifier|public
specifier|static
class|class
name|Nested
extends|extends
name|AbstractNestedTest
block|{
annotation|@
name|Test
annotation|@
name|Repeat
argument_list|(
name|iterations
operator|=
literal|10
argument_list|)
DECL|method|testMe
specifier|public
name|void
name|testMe
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"bad"
argument_list|)
throw|;
block|}
block|}
DECL|method|TestReproduceMessageWithRepeated
specifier|public
name|TestReproduceMessageWithRepeated
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRepeatedMessage
specifier|public
name|void
name|testRepeatedMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|syserr
init|=
name|runAndReturnSyserr
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|syserr
operator|.
name|contains
argument_list|(
literal|" -Dtests.method=testMe "
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|runAndReturnSyserr
specifier|private
name|String
name|runAndReturnSyserr
parameter_list|()
block|{
name|JUnitCore
operator|.
name|runClasses
argument_list|(
name|Nested
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|err
init|=
name|getSysErr
argument_list|()
decl_stmt|;
return|return
name|err
return|;
block|}
block|}
end_class
end_unit
