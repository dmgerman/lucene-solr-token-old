begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|WithNestedTests
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|JUnitCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Result
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|notification
operator|.
name|Failure
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|notification
operator|.
name|RunListener
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|Repeat
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakAction
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakLingering
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakScope
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakScope
operator|.
name|Scope
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakZombies
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakZombies
operator|.
name|Consequence
import|;
end_import
begin_comment
comment|/**  * @see TestRuleIgnoreAfterMaxFailures  */
end_comment
begin_class
DECL|class|TestMaxFailuresRule
specifier|public
class|class
name|TestMaxFailuresRule
extends|extends
name|WithNestedTests
block|{
DECL|method|TestMaxFailuresRule
specifier|public
name|TestMaxFailuresRule
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|class|Nested
specifier|public
specifier|static
class|class
name|Nested
extends|extends
name|WithNestedTests
operator|.
name|AbstractNestedTest
block|{
DECL|field|TOTAL_ITERS
specifier|public
specifier|static
specifier|final
name|int
name|TOTAL_ITERS
init|=
literal|500
decl_stmt|;
DECL|field|DESIRED_FAILURES
specifier|public
specifier|static
specifier|final
name|int
name|DESIRED_FAILURES
init|=
name|TOTAL_ITERS
operator|/
literal|10
decl_stmt|;
DECL|field|numFails
specifier|private
name|int
name|numFails
init|=
literal|0
decl_stmt|;
DECL|field|numIters
specifier|private
name|int
name|numIters
init|=
literal|0
decl_stmt|;
annotation|@
name|Repeat
argument_list|(
name|iterations
operator|=
name|TOTAL_ITERS
argument_list|)
DECL|method|testFailSometimes
specifier|public
name|void
name|testFailSometimes
parameter_list|()
block|{
name|numIters
operator|++
expr_stmt|;
name|boolean
name|fail
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|0
decl_stmt|;
if|if
condition|(
name|fail
condition|)
name|numFails
operator|++
expr_stmt|;
comment|// some seeds are really lucky ... so cheat.
if|if
condition|(
name|numFails
operator|<
name|DESIRED_FAILURES
operator|&&
name|DESIRED_FAILURES
operator|<=
name|TOTAL_ITERS
operator|-
name|numIters
condition|)
block|{
name|fail
operator|=
literal|true
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|fail
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMaxFailures
specifier|public
name|void
name|testMaxFailures
parameter_list|()
block|{
name|LuceneTestCase
operator|.
name|replaceMaxFailureRule
argument_list|(
operator|new
name|TestRuleIgnoreAfterMaxFailures
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|JUnitCore
name|core
init|=
operator|new
name|JUnitCore
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|results
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|core
operator|.
name|addListener
argument_list|(
operator|new
name|RunListener
argument_list|()
block|{
name|char
name|lastTest
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|testStarted
parameter_list|(
name|Description
name|description
parameter_list|)
throws|throws
name|Exception
block|{
name|lastTest
operator|=
literal|'S'
expr_stmt|;
comment|// success.
block|}
annotation|@
name|Override
specifier|public
name|void
name|testAssumptionFailure
parameter_list|(
name|Failure
name|failure
parameter_list|)
block|{
name|lastTest
operator|=
literal|'A'
expr_stmt|;
comment|// assumption failure.
block|}
annotation|@
name|Override
specifier|public
name|void
name|testFailure
parameter_list|(
name|Failure
name|failure
parameter_list|)
throws|throws
name|Exception
block|{
name|lastTest
operator|=
literal|'F'
expr_stmt|;
comment|// failure
block|}
annotation|@
name|Override
specifier|public
name|void
name|testFinished
parameter_list|(
name|Description
name|description
parameter_list|)
throws|throws
name|Exception
block|{
name|results
operator|.
name|append
argument_list|(
name|lastTest
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|core
operator|.
name|run
argument_list|(
name|Nested
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|result
operator|.
name|getRunCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getIgnoreCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getFailureCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure we had exactly two failures followed by assumption-failures
comment|// resulting from ignored tests.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|results
operator|.
name|toString
argument_list|()
argument_list|,
name|results
operator|.
name|toString
argument_list|()
operator|.
name|matches
argument_list|(
literal|"(S*F){2}A+"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ThreadLeakZombies
argument_list|(
name|Consequence
operator|.
name|IGNORE_REMAINING_TESTS
argument_list|)
annotation|@
name|ThreadLeakAction
argument_list|(
block|{
name|ThreadLeakAction
operator|.
name|Action
operator|.
name|WARN
block|}
argument_list|)
annotation|@
name|ThreadLeakScope
argument_list|(
name|Scope
operator|.
name|TEST
argument_list|)
annotation|@
name|ThreadLeakLingering
argument_list|(
name|linger
operator|=
literal|500
argument_list|)
DECL|class|Nested2
specifier|public
specifier|static
class|class
name|Nested2
extends|extends
name|WithNestedTests
operator|.
name|AbstractNestedTest
block|{
DECL|field|TOTAL_ITERS
specifier|public
specifier|static
specifier|final
name|int
name|TOTAL_ITERS
init|=
literal|10
decl_stmt|;
DECL|field|die
specifier|public
specifier|static
name|CountDownLatch
name|die
decl_stmt|;
DECL|field|zombie
specifier|public
specifier|static
name|Thread
name|zombie
decl_stmt|;
DECL|field|testNum
specifier|public
specifier|static
name|int
name|testNum
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
block|{
assert|assert
name|zombie
operator|==
literal|null
assert|;
name|die
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|testNum
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Repeat
argument_list|(
name|iterations
operator|=
name|TOTAL_ITERS
argument_list|)
DECL|method|testLeaveZombie
specifier|public
name|void
name|testLeaveZombie
parameter_list|()
block|{
if|if
condition|(
operator|++
name|testNum
operator|==
literal|2
condition|)
block|{
name|zombie
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|die
operator|.
name|await
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|/* ignore */
block|}
block|}
block|}
block|}
expr_stmt|;
name|zombie
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testZombieThreadFailures
specifier|public
name|void
name|testZombieThreadFailures
parameter_list|()
throws|throws
name|Exception
block|{
name|LuceneTestCase
operator|.
name|replaceMaxFailureRule
argument_list|(
operator|new
name|TestRuleIgnoreAfterMaxFailures
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|JUnitCore
name|core
init|=
operator|new
name|JUnitCore
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|results
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|core
operator|.
name|addListener
argument_list|(
operator|new
name|RunListener
argument_list|()
block|{
name|char
name|lastTest
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|testStarted
parameter_list|(
name|Description
name|description
parameter_list|)
throws|throws
name|Exception
block|{
name|lastTest
operator|=
literal|'S'
expr_stmt|;
comment|// success.
block|}
annotation|@
name|Override
specifier|public
name|void
name|testAssumptionFailure
parameter_list|(
name|Failure
name|failure
parameter_list|)
block|{
name|lastTest
operator|=
literal|'A'
expr_stmt|;
comment|// assumption failure.
block|}
annotation|@
name|Override
specifier|public
name|void
name|testFailure
parameter_list|(
name|Failure
name|failure
parameter_list|)
throws|throws
name|Exception
block|{
name|lastTest
operator|=
literal|'F'
expr_stmt|;
comment|// failure
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|failure
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testFinished
parameter_list|(
name|Description
name|description
parameter_list|)
throws|throws
name|Exception
block|{
name|results
operator|.
name|append
argument_list|(
name|lastTest
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|core
operator|.
name|run
argument_list|(
name|Nested2
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|Nested2
operator|.
name|die
operator|!=
literal|null
condition|)
block|{
name|Nested2
operator|.
name|die
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Nested2
operator|.
name|zombie
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|prevSysOut
operator|.
name|println
argument_list|(
name|results
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Nested2
operator|.
name|TOTAL_ITERS
argument_list|,
name|result
operator|.
name|getRunCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|results
operator|.
name|toString
argument_list|()
argument_list|,
literal|"SFAAAAAAAA"
argument_list|,
name|results
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
