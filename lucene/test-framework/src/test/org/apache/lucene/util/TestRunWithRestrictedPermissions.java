begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AllPermission
import|;
end_import
begin_class
DECL|class|TestRunWithRestrictedPermissions
specifier|public
class|class
name|TestRunWithRestrictedPermissions
extends|extends
name|LuceneTestCase
block|{
DECL|method|testDefaultsPass
specifier|public
name|void
name|testDefaultsPass
parameter_list|()
throws|throws
name|Exception
block|{
name|runWithRestrictedPermissions
argument_list|(
name|this
operator|::
name|doSomeForbiddenStuff
argument_list|,
operator|new
name|AllPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNormallyAllowedStuff
specifier|public
name|void
name|testNormallyAllowedStuff
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|runWithRestrictedPermissions
argument_list|(
name|this
operator|::
name|doSomeForbiddenStuff
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"this should not pass!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// pass
block|}
block|}
DECL|method|testCompletelyForbidden1
specifier|public
name|void
name|testCompletelyForbidden1
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|runWithRestrictedPermissions
argument_list|(
name|this
operator|::
name|doSomeCompletelyForbiddenStuff
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"this should not pass!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// pass
block|}
block|}
DECL|method|testCompletelyForbidden2
specifier|public
name|void
name|testCompletelyForbidden2
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|runWithRestrictedPermissions
argument_list|(
name|this
operator|::
name|doSomeCompletelyForbiddenStuff
argument_list|,
operator|new
name|AllPermission
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"this should not pass (not even with AllPermission)"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// pass
block|}
block|}
DECL|method|doSomeForbiddenStuff
specifier|private
name|Void
name|doSomeForbiddenStuff
parameter_list|()
throws|throws
name|IOException
block|{
name|createTempDir
argument_list|(
literal|"cannot_create_temp_folder"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// Void
block|}
comment|// something like this should not never pass!!
DECL|method|doSomeCompletelyForbiddenStuff
specifier|private
name|Void
name|doSomeCompletelyForbiddenStuff
parameter_list|()
throws|throws
name|IOException
block|{
name|Files
operator|.
name|createFile
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"denied"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// Void
block|}
block|}
end_class
end_unit
