begin_unit
begin_package
DECL|package|org.apache.lucene.search.grouping
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|BinaryDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|IntField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|DocValuesType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SlowCompositeReaderWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|valuesource
operator|.
name|BytesRefFieldSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|QueryUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|function
operator|.
name|FunctionAllGroupHeadsCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|term
operator|.
name|TermAllGroupHeadsCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_class
DECL|class|AllGroupHeadsCollectorTest
specifier|public
class|class
name|AllGroupHeadsCollectorTest
extends|extends
name|LuceneTestCase
block|{
DECL|field|vts
specifier|private
specifier|static
specifier|final
name|DocValuesType
index|[]
name|vts
init|=
operator|new
name|DocValuesType
index|[]
block|{
name|DocValuesType
operator|.
name|BINARY
block|,
name|DocValuesType
operator|.
name|SORTED
block|}
decl_stmt|;
DECL|method|testBasic
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|groupField
init|=
literal|"author"
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|DocValuesType
name|valueType
init|=
name|vts
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|vts
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
comment|// 0
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addGroupField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"author1"
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"content"
argument_list|,
literal|"random text"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"id_1"
argument_list|,
literal|1
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id_2"
argument_list|,
literal|"1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 1
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addGroupField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"author1"
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"content"
argument_list|,
literal|"some more random text blob"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"id_1"
argument_list|,
literal|2
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id_2"
argument_list|,
literal|"2"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 2
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addGroupField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"author1"
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"content"
argument_list|,
literal|"some more random textual data"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"id_1"
argument_list|,
literal|3
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id_2"
argument_list|,
literal|"3"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// To ensure a second segment
comment|// 3
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addGroupField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"author2"
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"content"
argument_list|,
literal|"some random text"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"id_1"
argument_list|,
literal|4
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id_2"
argument_list|,
literal|"4"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 4
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addGroupField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"author3"
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"content"
argument_list|,
literal|"some more random text"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"id_1"
argument_list|,
literal|5
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id_2"
argument_list|,
literal|"5"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 5
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addGroupField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"author3"
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"content"
argument_list|,
literal|"random blob"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"id_1"
argument_list|,
literal|6
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id_2"
argument_list|,
literal|"6"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 6 -- no author field
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"content"
argument_list|,
literal|"random word stuck in alot of other text"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"id_1"
argument_list|,
literal|6
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id_2"
argument_list|,
literal|"6"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 7 -- no author field
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"content"
argument_list|,
literal|"random word stuck in alot of other text"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"id_1"
argument_list|,
literal|7
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id_2"
argument_list|,
literal|"7"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|indexSearcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|w
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|int
name|maxDoc
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
name|Sort
name|sortWithinGroup
init|=
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"id_1"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|INT
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|AbstractAllGroupHeadsCollector
argument_list|<
name|?
argument_list|>
name|allGroupHeadsCollector
init|=
name|createRandomCollector
argument_list|(
name|groupField
argument_list|,
name|sortWithinGroup
argument_list|)
decl_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"random"
argument_list|)
argument_list|)
argument_list|,
name|allGroupHeadsCollector
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|arrayContains
argument_list|(
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|7
block|}
argument_list|,
name|allGroupHeadsCollector
operator|.
name|retrieveGroupHeads
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|openBitSetContains
argument_list|(
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|7
block|}
argument_list|,
name|allGroupHeadsCollector
operator|.
name|retrieveGroupHeads
argument_list|(
name|maxDoc
argument_list|)
argument_list|,
name|maxDoc
argument_list|)
argument_list|)
expr_stmt|;
name|allGroupHeadsCollector
operator|=
name|createRandomCollector
argument_list|(
name|groupField
argument_list|,
name|sortWithinGroup
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"some"
argument_list|)
argument_list|)
argument_list|,
name|allGroupHeadsCollector
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|arrayContains
argument_list|(
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|4
block|}
argument_list|,
name|allGroupHeadsCollector
operator|.
name|retrieveGroupHeads
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|openBitSetContains
argument_list|(
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|4
block|}
argument_list|,
name|allGroupHeadsCollector
operator|.
name|retrieveGroupHeads
argument_list|(
name|maxDoc
argument_list|)
argument_list|,
name|maxDoc
argument_list|)
argument_list|)
expr_stmt|;
name|allGroupHeadsCollector
operator|=
name|createRandomCollector
argument_list|(
name|groupField
argument_list|,
name|sortWithinGroup
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"blob"
argument_list|)
argument_list|)
argument_list|,
name|allGroupHeadsCollector
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|arrayContains
argument_list|(
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|5
block|}
argument_list|,
name|allGroupHeadsCollector
operator|.
name|retrieveGroupHeads
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|openBitSetContains
argument_list|(
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|5
block|}
argument_list|,
name|allGroupHeadsCollector
operator|.
name|retrieveGroupHeads
argument_list|(
name|maxDoc
argument_list|)
argument_list|,
name|maxDoc
argument_list|)
argument_list|)
expr_stmt|;
comment|// STRING sort type triggers different implementation
name|Sort
name|sortWithinGroup2
init|=
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"id_2"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|allGroupHeadsCollector
operator|=
name|createRandomCollector
argument_list|(
name|groupField
argument_list|,
name|sortWithinGroup2
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"random"
argument_list|)
argument_list|)
argument_list|,
name|allGroupHeadsCollector
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|arrayContains
argument_list|(
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|7
block|}
argument_list|,
name|allGroupHeadsCollector
operator|.
name|retrieveGroupHeads
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|openBitSetContains
argument_list|(
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|7
block|}
argument_list|,
name|allGroupHeadsCollector
operator|.
name|retrieveGroupHeads
argument_list|(
name|maxDoc
argument_list|)
argument_list|,
name|maxDoc
argument_list|)
argument_list|)
expr_stmt|;
name|Sort
name|sortWithinGroup3
init|=
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"id_2"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|STRING
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|allGroupHeadsCollector
operator|=
name|createRandomCollector
argument_list|(
name|groupField
argument_list|,
name|sortWithinGroup3
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"random"
argument_list|)
argument_list|)
argument_list|,
name|allGroupHeadsCollector
argument_list|)
expr_stmt|;
comment|// 7 b/c higher doc id wins, even if order of field is in not in reverse.
name|assertTrue
argument_list|(
name|arrayContains
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|3
block|,
literal|4
block|,
literal|6
block|}
argument_list|,
name|allGroupHeadsCollector
operator|.
name|retrieveGroupHeads
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|openBitSetContains
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|3
block|,
literal|4
block|,
literal|6
block|}
argument_list|,
name|allGroupHeadsCollector
operator|.
name|retrieveGroupHeads
argument_list|(
name|maxDoc
argument_list|)
argument_list|,
name|maxDoc
argument_list|)
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numberOfRuns
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|numberOfRuns
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"TEST: iter=%d total=%d"
argument_list|,
name|iter
argument_list|,
name|numberOfRuns
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|numDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|)
operator|*
name|RANDOM_MULTIPLIER
decl_stmt|;
specifier|final
name|int
name|numGroups
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|numDocs
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: numDocs="
operator|+
name|numDocs
operator|+
literal|" numGroups="
operator|+
name|numGroups
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|BytesRef
argument_list|>
name|groups
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numGroups
condition|;
name|i
operator|++
control|)
block|{
name|String
name|randomValue
decl_stmt|;
do|do
block|{
comment|// B/c of DV based impl we can't see the difference between an empty string and a null value.
comment|// For that reason we don't generate empty string groups.
name|randomValue
operator|=
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|randomValue
argument_list|)
condition|)
do|;
name|groups
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|randomValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
index|[]
name|contentStrings
init|=
operator|new
name|String
index|[
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|20
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: create fake content"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|contentIDX
init|=
literal|0
init|;
name|contentIDX
operator|<
name|contentStrings
operator|.
name|length
condition|;
name|contentIDX
operator|++
control|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"real"
argument_list|)
operator|.
name|append
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
specifier|final
name|int
name|fakeCount
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|fakeIDX
init|=
literal|0
init|;
name|fakeIDX
operator|<
name|fakeCount
condition|;
name|fakeIDX
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"fake "
argument_list|)
expr_stmt|;
block|}
name|contentStrings
index|[
name|contentIDX
index|]
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  content="
operator|+
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|DocValuesType
name|valueType
init|=
name|vts
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|vts
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Document
name|docNoGroup
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|group
init|=
name|newStringField
argument_list|(
literal|"group"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|Field
name|valuesField
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|valueType
condition|)
block|{
case|case
name|BINARY
case|:
name|valuesField
operator|=
operator|new
name|BinaryDocValuesField
argument_list|(
literal|"group_dv"
argument_list|,
operator|new
name|BytesRef
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SORTED
case|:
name|valuesField
operator|=
operator|new
name|SortedDocValuesField
argument_list|(
literal|"group_dv"
argument_list|,
operator|new
name|BytesRef
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"unhandled type"
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
name|valuesField
argument_list|)
expr_stmt|;
name|Field
name|sort1
init|=
name|newStringField
argument_list|(
literal|"sort1"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|sort1
argument_list|)
expr_stmt|;
name|docNoGroup
operator|.
name|add
argument_list|(
name|sort1
argument_list|)
expr_stmt|;
name|Field
name|sort2
init|=
name|newStringField
argument_list|(
literal|"sort2"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|sort2
argument_list|)
expr_stmt|;
name|docNoGroup
operator|.
name|add
argument_list|(
name|sort2
argument_list|)
expr_stmt|;
name|Field
name|sort3
init|=
name|newStringField
argument_list|(
literal|"sort3"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|sort3
argument_list|)
expr_stmt|;
name|docNoGroup
operator|.
name|add
argument_list|(
name|sort3
argument_list|)
expr_stmt|;
name|Field
name|content
init|=
name|newTextField
argument_list|(
literal|"content"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|docNoGroup
operator|.
name|add
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|IntField
name|id
init|=
operator|new
name|IntField
argument_list|(
literal|"id"
argument_list|,
literal|0
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|NumericDocValuesField
name|idDV
init|=
operator|new
name|NumericDocValuesField
argument_list|(
literal|"id"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|docNoGroup
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
specifier|final
name|GroupDoc
index|[]
name|groupDocs
init|=
operator|new
name|GroupDoc
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|BytesRef
name|groupValue
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|24
argument_list|)
operator|==
literal|17
condition|)
block|{
comment|// So we test the "doc doesn't have the group'd
comment|// field" case:
name|groupValue
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|groupValue
operator|=
name|groups
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|groups
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|GroupDoc
name|groupDoc
init|=
operator|new
name|GroupDoc
argument_list|(
name|i
argument_list|,
name|groupValue
argument_list|,
name|groups
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|groups
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|groups
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|groups
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%05d"
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|,
name|contentStrings
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|contentStrings
operator|.
name|length
argument_list|)
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc content="
operator|+
name|groupDoc
operator|.
name|content
operator|+
literal|" id="
operator|+
name|i
operator|+
literal|" group="
operator|+
operator|(
name|groupDoc
operator|.
name|group
operator|==
literal|null
condition|?
literal|"null"
else|:
name|groupDoc
operator|.
name|group
operator|.
name|utf8ToString
argument_list|()
operator|)
operator|+
literal|" sort1="
operator|+
name|groupDoc
operator|.
name|sort1
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|" sort2="
operator|+
name|groupDoc
operator|.
name|sort2
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|" sort3="
operator|+
name|groupDoc
operator|.
name|sort3
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|groupDocs
index|[
name|i
index|]
operator|=
name|groupDoc
expr_stmt|;
if|if
condition|(
name|groupDoc
operator|.
name|group
operator|!=
literal|null
condition|)
block|{
name|group
operator|.
name|setStringValue
argument_list|(
name|groupDoc
operator|.
name|group
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|valuesField
operator|.
name|setBytesValue
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|groupDoc
operator|.
name|group
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sort1
operator|.
name|setStringValue
argument_list|(
name|groupDoc
operator|.
name|sort1
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|sort2
operator|.
name|setStringValue
argument_list|(
name|groupDoc
operator|.
name|sort2
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|sort3
operator|.
name|setStringValue
argument_list|(
name|groupDoc
operator|.
name|sort3
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|content
operator|.
name|setStringValue
argument_list|(
name|groupDoc
operator|.
name|content
argument_list|)
expr_stmt|;
name|id
operator|.
name|setIntValue
argument_list|(
name|groupDoc
operator|.
name|id
argument_list|)
expr_stmt|;
name|idDV
operator|.
name|setLongValue
argument_list|(
name|groupDoc
operator|.
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupDoc
operator|.
name|group
operator|==
literal|null
condition|)
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|docNoGroup
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|DirectoryReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|shutdown
argument_list|()
expr_stmt|;
specifier|final
name|NumericDocValues
name|docIdToFieldId
init|=
name|MultiDocValues
operator|.
name|getNumericValues
argument_list|(
name|r
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
specifier|final
name|int
index|[]
name|fieldIdToDocID
init|=
operator|new
name|int
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|int
name|fieldId
init|=
operator|(
name|int
operator|)
name|docIdToFieldId
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|fieldIdToDocID
index|[
name|fieldId
index|]
operator|=
name|i
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|contentID
init|=
literal|0
init|;
name|contentID
operator|<
literal|3
condition|;
name|contentID
operator|++
control|)
block|{
specifier|final
name|ScoreDoc
index|[]
name|hits
init|=
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"real"
operator|+
name|contentID
argument_list|)
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
for|for
control|(
name|ScoreDoc
name|hit
range|:
name|hits
control|)
block|{
specifier|final
name|GroupDoc
name|gd
init|=
name|groupDocs
index|[
operator|(
name|int
operator|)
name|docIdToFieldId
operator|.
name|get
argument_list|(
name|hit
operator|.
name|doc
argument_list|)
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|gd
operator|.
name|score
operator|==
literal|0.0
argument_list|)
expr_stmt|;
name|gd
operator|.
name|score
operator|=
name|hit
operator|.
name|score
expr_stmt|;
name|int
name|docId
init|=
name|gd
operator|.
name|id
decl_stmt|;
name|assertEquals
argument_list|(
name|docId
argument_list|,
name|docIdToFieldId
operator|.
name|get
argument_list|(
name|hit
operator|.
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|GroupDoc
name|gd
range|:
name|groupDocs
control|)
block|{
name|assertTrue
argument_list|(
name|gd
operator|.
name|score
operator|!=
literal|0.0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|searchIter
init|=
literal|0
init|;
name|searchIter
operator|<
literal|100
condition|;
name|searchIter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: searchIter="
operator|+
name|searchIter
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|searchTerm
init|=
literal|"real"
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|boolean
name|sortByScoreOnly
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|Sort
name|sortWithinGroup
init|=
name|getRandomSort
argument_list|(
name|sortByScoreOnly
argument_list|)
decl_stmt|;
name|AbstractAllGroupHeadsCollector
argument_list|<
name|?
argument_list|>
name|allGroupHeadsCollector
init|=
name|createRandomCollector
argument_list|(
literal|"group"
argument_list|,
name|sortWithinGroup
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
name|searchTerm
argument_list|)
argument_list|)
argument_list|,
name|allGroupHeadsCollector
argument_list|)
expr_stmt|;
name|int
index|[]
name|expectedGroupHeads
init|=
name|createExpectedGroupHeads
argument_list|(
name|searchTerm
argument_list|,
name|groupDocs
argument_list|,
name|sortWithinGroup
argument_list|,
name|sortByScoreOnly
argument_list|,
name|fieldIdToDocID
argument_list|)
decl_stmt|;
name|int
index|[]
name|actualGroupHeads
init|=
name|allGroupHeadsCollector
operator|.
name|retrieveGroupHeads
argument_list|()
decl_stmt|;
comment|// The actual group heads contains Lucene ids. Need to change them into our id value.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actualGroupHeads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|actualGroupHeads
index|[
name|i
index|]
operator|=
operator|(
name|int
operator|)
name|docIdToFieldId
operator|.
name|get
argument_list|(
name|actualGroupHeads
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Allows us the easily iterate and assert the actual and expected results.
name|Arrays
operator|.
name|sort
argument_list|(
name|expectedGroupHeads
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|actualGroupHeads
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Collector: "
operator|+
name|allGroupHeadsCollector
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Sort within group: "
operator|+
name|sortWithinGroup
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Num group: "
operator|+
name|numGroups
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Num doc: "
operator|+
name|numDocs
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n=== Expected: \n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|expectedDocId
range|:
name|expectedGroupHeads
control|)
block|{
name|GroupDoc
name|expectedGroupDoc
init|=
name|groupDocs
index|[
name|expectedDocId
index|]
decl_stmt|;
name|String
name|expectedGroup
init|=
name|expectedGroupDoc
operator|.
name|group
operator|==
literal|null
condition|?
literal|null
else|:
name|expectedGroupDoc
operator|.
name|group
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Group:%10s score%5f Sort1:%10s Sort2:%10s Sort3:%10s doc:%5d"
argument_list|,
name|expectedGroup
argument_list|,
name|expectedGroupDoc
operator|.
name|score
argument_list|,
name|expectedGroupDoc
operator|.
name|sort1
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|expectedGroupDoc
operator|.
name|sort2
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|expectedGroupDoc
operator|.
name|sort3
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|expectedDocId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n=== Actual: \n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|actualDocId
range|:
name|actualGroupHeads
control|)
block|{
name|GroupDoc
name|actualGroupDoc
init|=
name|groupDocs
index|[
name|actualDocId
index|]
decl_stmt|;
name|String
name|actualGroup
init|=
name|actualGroupDoc
operator|.
name|group
operator|==
literal|null
condition|?
literal|null
else|:
name|actualGroupDoc
operator|.
name|group
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Group:%10s score%5f Sort1:%10s Sort2:%10s Sort3:%10s doc:%5d"
argument_list|,
name|actualGroup
argument_list|,
name|actualGroupDoc
operator|.
name|score
argument_list|,
name|actualGroupDoc
operator|.
name|sort1
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|actualGroupDoc
operator|.
name|sort2
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|actualGroupDoc
operator|.
name|sort3
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|actualDocId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n==================================================================================="
argument_list|)
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
name|expectedGroupHeads
argument_list|,
name|actualGroupHeads
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|QueryUtils
operator|.
name|purgeFieldCache
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|arrayContains
specifier|private
name|boolean
name|arrayContains
parameter_list|(
name|int
index|[]
name|expected
parameter_list|,
name|int
index|[]
name|actual
parameter_list|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|actual
argument_list|)
expr_stmt|;
comment|// in some cases the actual docs aren't sorted by docid. This method expects that.
if|if
condition|(
name|expected
operator|.
name|length
operator|!=
name|actual
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|e
range|:
name|expected
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|a
range|:
name|actual
control|)
block|{
if|if
condition|(
name|e
operator|==
name|a
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|openBitSetContains
specifier|private
name|boolean
name|openBitSetContains
parameter_list|(
name|int
index|[]
name|expectedDocs
parameter_list|,
name|FixedBitSet
name|actual
parameter_list|,
name|int
name|maxDoc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|expectedDocs
operator|.
name|length
operator|!=
name|actual
operator|.
name|cardinality
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FixedBitSet
name|expected
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|expectedDoc
range|:
name|expectedDocs
control|)
block|{
name|expected
operator|.
name|set
argument_list|(
name|expectedDoc
argument_list|)
expr_stmt|;
block|}
name|int
name|docId
decl_stmt|;
name|DocIdSetIterator
name|iterator
init|=
name|expected
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|docId
operator|=
name|iterator
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
if|if
condition|(
operator|!
name|actual
operator|.
name|get
argument_list|(
name|docId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|createExpectedGroupHeads
specifier|private
name|int
index|[]
name|createExpectedGroupHeads
parameter_list|(
name|String
name|searchTerm
parameter_list|,
name|GroupDoc
index|[]
name|groupDocs
parameter_list|,
name|Sort
name|docSort
parameter_list|,
name|boolean
name|sortByScoreOnly
parameter_list|,
name|int
index|[]
name|fieldIdToDocID
parameter_list|)
block|{
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|List
argument_list|<
name|GroupDoc
argument_list|>
argument_list|>
name|groupHeads
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|GroupDoc
name|groupDoc
range|:
name|groupDocs
control|)
block|{
if|if
condition|(
operator|!
name|groupDoc
operator|.
name|content
operator|.
name|startsWith
argument_list|(
name|searchTerm
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|groupHeads
operator|.
name|containsKey
argument_list|(
name|groupDoc
operator|.
name|group
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|GroupDoc
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|groupDoc
argument_list|)
expr_stmt|;
name|groupHeads
operator|.
name|put
argument_list|(
name|groupDoc
operator|.
name|group
argument_list|,
name|list
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|groupHeads
operator|.
name|get
argument_list|(
name|groupDoc
operator|.
name|group
argument_list|)
operator|.
name|add
argument_list|(
name|groupDoc
argument_list|)
expr_stmt|;
block|}
name|int
index|[]
name|allGroupHeads
init|=
operator|new
name|int
index|[
name|groupHeads
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BytesRef
name|groupValue
range|:
name|groupHeads
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|GroupDoc
argument_list|>
name|docs
init|=
name|groupHeads
operator|.
name|get
argument_list|(
name|groupValue
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|docs
argument_list|,
name|getComparator
argument_list|(
name|docSort
argument_list|,
name|sortByScoreOnly
argument_list|,
name|fieldIdToDocID
argument_list|)
argument_list|)
expr_stmt|;
name|allGroupHeads
index|[
name|i
operator|++
index|]
operator|=
name|docs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|id
expr_stmt|;
block|}
return|return
name|allGroupHeads
return|;
block|}
DECL|method|getRandomSort
specifier|private
name|Sort
name|getRandomSort
parameter_list|(
name|boolean
name|scoreOnly
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|SortField
argument_list|>
name|sortFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|7
argument_list|)
operator|==
literal|2
operator|||
name|scoreOnly
condition|)
block|{
name|sortFields
operator|.
name|add
argument_list|(
name|SortField
operator|.
name|FIELD_SCORE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|sortFields
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"sort1"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|STRING
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sortFields
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"sort2"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|STRING
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|sortFields
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"sort1"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|STRING
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sortFields
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"sort2"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|STRING
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Break ties:
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
operator|&&
operator|!
name|scoreOnly
condition|)
block|{
name|sortFields
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"sort3"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|scoreOnly
condition|)
block|{
name|sortFields
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"id"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Sort
argument_list|(
name|sortFields
operator|.
name|toArray
argument_list|(
operator|new
name|SortField
index|[
name|sortFields
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getComparator
specifier|private
name|Comparator
argument_list|<
name|GroupDoc
argument_list|>
name|getComparator
parameter_list|(
name|Sort
name|sort
parameter_list|,
specifier|final
name|boolean
name|sortByScoreOnly
parameter_list|,
specifier|final
name|int
index|[]
name|fieldIdToDocID
parameter_list|)
block|{
specifier|final
name|SortField
index|[]
name|sortFields
init|=
name|sort
operator|.
name|getSort
argument_list|()
decl_stmt|;
return|return
operator|new
name|Comparator
argument_list|<
name|GroupDoc
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|GroupDoc
name|d1
parameter_list|,
name|GroupDoc
name|d2
parameter_list|)
block|{
for|for
control|(
name|SortField
name|sf
range|:
name|sortFields
control|)
block|{
specifier|final
name|int
name|cmp
decl_stmt|;
if|if
condition|(
name|sf
operator|.
name|getType
argument_list|()
operator|==
name|SortField
operator|.
name|Type
operator|.
name|SCORE
condition|)
block|{
if|if
condition|(
name|d1
operator|.
name|score
operator|>
name|d2
operator|.
name|score
condition|)
block|{
name|cmp
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d1
operator|.
name|score
operator|<
name|d2
operator|.
name|score
condition|)
block|{
name|cmp
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|cmp
operator|=
name|sortByScoreOnly
condition|?
name|fieldIdToDocID
index|[
name|d1
operator|.
name|id
index|]
operator|-
name|fieldIdToDocID
index|[
name|d2
operator|.
name|id
index|]
else|:
literal|0
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sf
operator|.
name|getField
argument_list|()
operator|.
name|equals
argument_list|(
literal|"sort1"
argument_list|)
condition|)
block|{
name|cmp
operator|=
name|d1
operator|.
name|sort1
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|sort1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sf
operator|.
name|getField
argument_list|()
operator|.
name|equals
argument_list|(
literal|"sort2"
argument_list|)
condition|)
block|{
name|cmp
operator|=
name|d1
operator|.
name|sort2
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|sort2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sf
operator|.
name|getField
argument_list|()
operator|.
name|equals
argument_list|(
literal|"sort3"
argument_list|)
condition|)
block|{
name|cmp
operator|=
name|d1
operator|.
name|sort3
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|sort3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|sf
operator|.
name|getField
argument_list|()
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
name|cmp
operator|=
name|d1
operator|.
name|id
operator|-
name|d2
operator|.
name|id
expr_stmt|;
block|}
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
return|return
name|sf
operator|.
name|getReverse
argument_list|()
condition|?
operator|-
name|cmp
else|:
name|cmp
return|;
block|}
block|}
comment|// Our sort always fully tie breaks:
name|fail
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|createRandomCollector
specifier|private
name|AbstractAllGroupHeadsCollector
argument_list|<
name|?
argument_list|>
name|createRandomCollector
parameter_list|(
name|String
name|groupField
parameter_list|,
name|Sort
name|sortWithinGroup
parameter_list|)
block|{
name|AbstractAllGroupHeadsCollector
argument_list|<
name|?
extends|extends
name|AbstractAllGroupHeadsCollector
operator|.
name|GroupHead
argument_list|>
name|collector
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|ValueSource
name|vs
init|=
operator|new
name|BytesRefFieldSource
argument_list|(
name|groupField
argument_list|)
decl_stmt|;
name|collector
operator|=
operator|new
name|FunctionAllGroupHeadsCollector
argument_list|(
name|vs
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
name|sortWithinGroup
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collector
operator|=
name|TermAllGroupHeadsCollector
operator|.
name|create
argument_list|(
name|groupField
argument_list|,
name|sortWithinGroup
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Selected implementation: "
operator|+
name|collector
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|collector
return|;
block|}
DECL|method|addGroupField
specifier|private
name|void
name|addGroupField
parameter_list|(
name|Document
name|doc
parameter_list|,
name|String
name|groupField
parameter_list|,
name|String
name|value
parameter_list|,
name|DocValuesType
name|valueType
parameter_list|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|groupField
argument_list|,
name|value
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|Field
name|valuesField
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|valueType
condition|)
block|{
case|case
name|BINARY
case|:
name|valuesField
operator|=
operator|new
name|BinaryDocValuesField
argument_list|(
name|groupField
operator|+
literal|"_dv"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|SORTED
case|:
name|valuesField
operator|=
operator|new
name|SortedDocValuesField
argument_list|(
name|groupField
operator|+
literal|"_dv"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"unhandled type"
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
name|valuesField
argument_list|)
expr_stmt|;
block|}
DECL|class|GroupDoc
specifier|private
specifier|static
class|class
name|GroupDoc
block|{
DECL|field|id
specifier|final
name|int
name|id
decl_stmt|;
DECL|field|group
specifier|final
name|BytesRef
name|group
decl_stmt|;
DECL|field|sort1
specifier|final
name|BytesRef
name|sort1
decl_stmt|;
DECL|field|sort2
specifier|final
name|BytesRef
name|sort2
decl_stmt|;
DECL|field|sort3
specifier|final
name|BytesRef
name|sort3
decl_stmt|;
comment|// content must be "realN ..."
DECL|field|content
specifier|final
name|String
name|content
decl_stmt|;
DECL|field|score
name|float
name|score
decl_stmt|;
DECL|method|GroupDoc
specifier|public
name|GroupDoc
parameter_list|(
name|int
name|id
parameter_list|,
name|BytesRef
name|group
parameter_list|,
name|BytesRef
name|sort1
parameter_list|,
name|BytesRef
name|sort2
parameter_list|,
name|BytesRef
name|sort3
parameter_list|,
name|String
name|content
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
name|this
operator|.
name|sort1
operator|=
name|sort1
expr_stmt|;
name|this
operator|.
name|sort2
operator|=
name|sort2
expr_stmt|;
name|this
operator|.
name|sort3
operator|=
name|sort3
expr_stmt|;
name|this
operator|.
name|content
operator|=
name|content
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
