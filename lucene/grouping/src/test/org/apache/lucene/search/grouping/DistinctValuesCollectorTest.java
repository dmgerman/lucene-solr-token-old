begin_unit
begin_package
DECL|package|org.apache.lucene.search.grouping
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|StoredDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|valuesource
operator|.
name|BytesRefFieldSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|function
operator|.
name|FunctionDistinctValuesCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|function
operator|.
name|FunctionFirstPassGroupingCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|term
operator|.
name|TermDistinctValuesCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|term
operator|.
name|TermFirstPassGroupingCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressCodecs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|mutable
operator|.
name|MutableValue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|mutable
operator|.
name|MutableValueStr
import|;
end_import
begin_class
annotation|@
name|SuppressCodecs
argument_list|(
block|{
literal|"Lucene40"
block|,
literal|"Lucene41"
block|,
literal|"Lucene42"
block|}
argument_list|)
comment|// we need missing support... i think?
DECL|class|DistinctValuesCollectorTest
specifier|public
class|class
name|DistinctValuesCollectorTest
extends|extends
name|AbstractGroupingTestCase
block|{
DECL|field|nullComparator
specifier|private
specifier|final
specifier|static
name|NullComparator
name|nullComparator
init|=
operator|new
name|NullComparator
argument_list|()
decl_stmt|;
DECL|field|groupField
specifier|private
specifier|final
name|String
name|groupField
init|=
literal|"author"
decl_stmt|;
DECL|field|countField
specifier|private
specifier|final
name|String
name|countField
init|=
literal|"publisher"
decl_stmt|;
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|countField
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"content"
argument_list|,
literal|"random text"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 1
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|countField
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"content"
argument_list|,
literal|"some more random text blob"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 2
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|countField
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"content"
argument_list|,
literal|"some more random textual data"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// To ensure a second segment
comment|// 3 -- no count field
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"content"
argument_list|,
literal|"some random text"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 4
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|countField
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"content"
argument_list|,
literal|"some more random text"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 5
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|countField
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"content"
argument_list|,
literal|"random blob"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 6 -- no author field
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"content"
argument_list|,
literal|"random word stuck in alot of other text"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|countField
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexSearcher
name|indexSearcher
init|=
name|newSearcher
argument_list|(
name|w
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
name|w
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|Comparator
argument_list|<
name|AbstractDistinctValuesCollector
operator|.
name|GroupCount
argument_list|<
name|Comparable
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|cmp
init|=
operator|new
name|Comparator
argument_list|<
name|AbstractDistinctValuesCollector
operator|.
name|GroupCount
argument_list|<
name|Comparable
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|AbstractDistinctValuesCollector
operator|.
name|GroupCount
argument_list|<
name|Comparable
argument_list|<
name|Object
argument_list|>
argument_list|>
name|groupCount1
parameter_list|,
name|AbstractDistinctValuesCollector
operator|.
name|GroupCount
argument_list|<
name|Comparable
argument_list|<
name|Object
argument_list|>
argument_list|>
name|groupCount2
parameter_list|)
block|{
if|if
condition|(
name|groupCount1
operator|.
name|groupValue
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|groupCount2
operator|.
name|groupValue
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|groupCount2
operator|.
name|groupValue
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
name|groupCount1
operator|.
name|groupValue
operator|.
name|compareTo
argument_list|(
name|groupCount2
operator|.
name|groupValue
argument_list|)
return|;
block|}
block|}
block|}
decl_stmt|;
comment|// === Search for content:random
name|AbstractFirstPassGroupingCollector
argument_list|<
name|Comparable
argument_list|<
name|Object
argument_list|>
argument_list|>
name|firstCollector
init|=
name|createRandomFirstPassCollector
argument_list|(
operator|new
name|Sort
argument_list|()
argument_list|,
name|groupField
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"random"
argument_list|)
argument_list|)
argument_list|,
name|firstCollector
argument_list|)
expr_stmt|;
name|AbstractDistinctValuesCollector
argument_list|<
name|?
extends|extends
name|AbstractDistinctValuesCollector
operator|.
name|GroupCount
argument_list|<
name|Comparable
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|distinctValuesCollector
init|=
name|createDistinctCountCollector
argument_list|(
name|firstCollector
argument_list|,
name|groupField
argument_list|,
name|countField
argument_list|)
decl_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"random"
argument_list|)
argument_list|)
argument_list|,
name|distinctValuesCollector
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|AbstractDistinctValuesCollector
operator|.
name|GroupCount
argument_list|<
name|Comparable
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|gcs
init|=
name|distinctValuesCollector
operator|.
name|getGroups
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|gcs
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|gcs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compareNull
argument_list|(
name|gcs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|groupValue
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|countValues
init|=
operator|new
name|ArrayList
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|gcs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|uniqueValues
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compare
argument_list|(
literal|"1"
argument_list|,
name|countValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|compare
argument_list|(
literal|"1"
argument_list|,
name|gcs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|groupValue
argument_list|)
expr_stmt|;
name|countValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|gcs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueValues
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|countValues
argument_list|,
name|nullComparator
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|countValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compare
argument_list|(
literal|"1"
argument_list|,
name|countValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|compare
argument_list|(
literal|"2"
argument_list|,
name|countValues
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|compare
argument_list|(
literal|"2"
argument_list|,
name|gcs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|groupValue
argument_list|)
expr_stmt|;
name|countValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|gcs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|uniqueValues
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compareNull
argument_list|(
name|countValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|compare
argument_list|(
literal|"3"
argument_list|,
name|gcs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|groupValue
argument_list|)
expr_stmt|;
name|countValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|gcs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|uniqueValues
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compare
argument_list|(
literal|"1"
argument_list|,
name|countValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// === Search for content:some
name|firstCollector
operator|=
name|createRandomFirstPassCollector
argument_list|(
operator|new
name|Sort
argument_list|()
argument_list|,
name|groupField
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"some"
argument_list|)
argument_list|)
argument_list|,
name|firstCollector
argument_list|)
expr_stmt|;
name|distinctValuesCollector
operator|=
name|createDistinctCountCollector
argument_list|(
name|firstCollector
argument_list|,
name|groupField
argument_list|,
name|countField
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"some"
argument_list|)
argument_list|)
argument_list|,
name|distinctValuesCollector
argument_list|)
expr_stmt|;
name|gcs
operator|=
name|distinctValuesCollector
operator|.
name|getGroups
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|gcs
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|gcs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compare
argument_list|(
literal|"1"
argument_list|,
name|gcs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|groupValue
argument_list|)
expr_stmt|;
name|countValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|gcs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|uniqueValues
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|countValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|countValues
argument_list|,
name|nullComparator
argument_list|)
expr_stmt|;
name|compare
argument_list|(
literal|"1"
argument_list|,
name|countValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|compare
argument_list|(
literal|"2"
argument_list|,
name|countValues
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|compare
argument_list|(
literal|"2"
argument_list|,
name|gcs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|groupValue
argument_list|)
expr_stmt|;
name|countValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|gcs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueValues
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compareNull
argument_list|(
name|countValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|compare
argument_list|(
literal|"3"
argument_list|,
name|gcs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|groupValue
argument_list|)
expr_stmt|;
name|countValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|gcs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|uniqueValues
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compare
argument_list|(
literal|"1"
argument_list|,
name|countValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// === Search for content:blob
name|firstCollector
operator|=
name|createRandomFirstPassCollector
argument_list|(
operator|new
name|Sort
argument_list|()
argument_list|,
name|groupField
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"blob"
argument_list|)
argument_list|)
argument_list|,
name|firstCollector
argument_list|)
expr_stmt|;
name|distinctValuesCollector
operator|=
name|createDistinctCountCollector
argument_list|(
name|firstCollector
argument_list|,
name|groupField
argument_list|,
name|countField
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"blob"
argument_list|)
argument_list|)
argument_list|,
name|distinctValuesCollector
argument_list|)
expr_stmt|;
name|gcs
operator|=
name|distinctValuesCollector
operator|.
name|getGroups
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|gcs
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|gcs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compare
argument_list|(
literal|"1"
argument_list|,
name|gcs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|groupValue
argument_list|)
expr_stmt|;
name|countValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|gcs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|uniqueValues
argument_list|)
expr_stmt|;
comment|// B/c the only one document matched with blob inside the author 1 group
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compare
argument_list|(
literal|"1"
argument_list|,
name|countValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|compare
argument_list|(
literal|"3"
argument_list|,
name|gcs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|groupValue
argument_list|)
expr_stmt|;
name|countValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|gcs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueValues
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compare
argument_list|(
literal|"1"
argument_list|,
name|countValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
name|int
name|numberOfRuns
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|indexIter
init|=
literal|0
init|;
name|indexIter
operator|<
name|numberOfRuns
condition|;
name|indexIter
operator|++
control|)
block|{
name|IndexContext
name|context
init|=
name|createIndexContext
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|searchIter
init|=
literal|0
init|;
name|searchIter
operator|<
literal|100
condition|;
name|searchIter
operator|++
control|)
block|{
specifier|final
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|context
operator|.
name|indexReader
argument_list|)
decl_stmt|;
name|String
name|term
init|=
name|context
operator|.
name|contentStrings
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|context
operator|.
name|contentStrings
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|Sort
name|groupSort
init|=
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"id"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|topN
init|=
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AbstractDistinctValuesCollector
operator|.
name|GroupCount
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|expectedResult
init|=
name|createExpectedResult
argument_list|(
name|context
argument_list|,
name|term
argument_list|,
name|groupSort
argument_list|,
name|topN
argument_list|)
decl_stmt|;
name|AbstractFirstPassGroupingCollector
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|firstCollector
init|=
name|createRandomFirstPassCollector
argument_list|(
name|groupSort
argument_list|,
name|groupField
argument_list|,
name|topN
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
name|term
argument_list|)
argument_list|)
argument_list|,
name|firstCollector
argument_list|)
expr_stmt|;
name|AbstractDistinctValuesCollector
argument_list|<
name|?
extends|extends
name|AbstractDistinctValuesCollector
operator|.
name|GroupCount
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|distinctValuesCollector
init|=
name|createDistinctCountCollector
argument_list|(
name|firstCollector
argument_list|,
name|groupField
argument_list|,
name|countField
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
name|term
argument_list|)
argument_list|)
argument_list|,
name|distinctValuesCollector
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|AbstractDistinctValuesCollector
operator|.
name|GroupCount
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|actualResult
init|=
operator|(
name|List
argument_list|<
name|AbstractDistinctValuesCollector
operator|.
name|GroupCount
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
operator|)
name|distinctValuesCollector
operator|.
name|getGroups
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Index iter="
operator|+
name|indexIter
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Search iter="
operator|+
name|searchIter
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"1st pass collector class name="
operator|+
name|firstCollector
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"2nd pass collector class name="
operator|+
name|distinctValuesCollector
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Search term="
operator|+
name|term
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"1st pass groups="
operator|+
name|firstCollector
operator|.
name|getTopGroups
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Expected:"
argument_list|)
expr_stmt|;
name|printGroups
argument_list|(
name|expectedResult
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Actual:"
argument_list|)
expr_stmt|;
name|printGroups
argument_list|(
name|actualResult
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedResult
operator|.
name|size
argument_list|()
argument_list|,
name|actualResult
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedResult
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|AbstractDistinctValuesCollector
operator|.
name|GroupCount
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|expected
init|=
name|expectedResult
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|AbstractDistinctValuesCollector
operator|.
name|GroupCount
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|actual
init|=
name|actualResult
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertValues
argument_list|(
name|expected
operator|.
name|groupValue
argument_list|,
name|actual
operator|.
name|groupValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|uniqueValues
operator|.
name|size
argument_list|()
argument_list|,
name|actual
operator|.
name|uniqueValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|expectedUniqueValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|expected
operator|.
name|uniqueValues
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|expectedUniqueValues
argument_list|,
name|nullComparator
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|actualUniqueValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|actual
operator|.
name|uniqueValues
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|actualUniqueValues
argument_list|,
name|nullComparator
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|expectedUniqueValues
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|assertValues
argument_list|(
name|expectedUniqueValues
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|,
name|actualUniqueValues
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|context
operator|.
name|indexReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|context
operator|.
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|printGroups
specifier|private
name|void
name|printGroups
parameter_list|(
name|List
argument_list|<
name|AbstractDistinctValuesCollector
operator|.
name|GroupCount
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|results
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|AbstractDistinctValuesCollector
operator|.
name|GroupCount
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|group
init|=
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|gv
init|=
name|group
operator|.
name|groupValue
decl_stmt|;
if|if
condition|(
name|gv
operator|instanceof
name|BytesRef
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|i
operator|+
literal|": groupValue="
operator|+
operator|(
operator|(
name|BytesRef
operator|)
name|gv
operator|)
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|i
operator|+
literal|": groupValue="
operator|+
name|gv
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
name|o
range|:
name|group
operator|.
name|uniqueValues
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|BytesRef
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
operator|(
operator|(
name|BytesRef
operator|)
name|o
operator|)
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|o
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|assertValues
specifier|private
name|void
name|assertValues
parameter_list|(
name|Object
name|expected
parameter_list|,
name|Object
name|actual
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|compareNull
argument_list|(
name|actual
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compare
argument_list|(
operator|(
operator|(
name|BytesRef
operator|)
name|expected
operator|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|compare
specifier|private
name|void
name|compare
parameter_list|(
name|String
name|expected
parameter_list|,
name|Object
name|groupValue
parameter_list|)
block|{
if|if
condition|(
name|BytesRef
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|groupValue
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
operator|(
operator|(
name|BytesRef
operator|)
name|groupValue
operator|)
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Double
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|groupValue
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|expected
argument_list|)
argument_list|,
name|groupValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Long
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|groupValue
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|expected
argument_list|)
argument_list|,
name|groupValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MutableValue
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|groupValue
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|MutableValueStr
name|mutableValue
init|=
operator|new
name|MutableValueStr
argument_list|()
decl_stmt|;
name|mutableValue
operator|.
name|value
operator|=
operator|new
name|BytesRef
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mutableValue
argument_list|,
name|groupValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|compareNull
specifier|private
name|void
name|compareNull
parameter_list|(
name|Object
name|groupValue
parameter_list|)
block|{
if|if
condition|(
name|groupValue
operator|==
literal|null
condition|)
block|{
return|return;
comment|// term based impl...
block|}
comment|// DV based impls..
if|if
condition|(
name|BytesRef
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|groupValue
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
operator|(
operator|(
name|BytesRef
operator|)
name|groupValue
operator|)
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Double
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|groupValue
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|0.0d
argument_list|,
name|groupValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Long
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|groupValue
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|groupValue
argument_list|)
expr_stmt|;
comment|// Function based impl
block|}
elseif|else
if|if
condition|(
name|MutableValue
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|groupValue
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
operator|(
operator|(
name|MutableValue
operator|)
name|groupValue
operator|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addField
specifier|private
name|void
name|addField
parameter_list|(
name|Document
name|doc
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|field
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|createDistinctCountCollector
specifier|private
parameter_list|<
name|T
extends|extends
name|Comparable
parameter_list|>
name|AbstractDistinctValuesCollector
argument_list|<
name|AbstractDistinctValuesCollector
operator|.
name|GroupCount
argument_list|<
name|T
argument_list|>
argument_list|>
name|createDistinctCountCollector
parameter_list|(
name|AbstractFirstPassGroupingCollector
argument_list|<
name|T
argument_list|>
name|firstPassGroupingCollector
parameter_list|,
name|String
name|groupField
parameter_list|,
name|String
name|countField
parameter_list|)
block|{
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|T
argument_list|>
argument_list|>
name|searchGroups
init|=
name|firstPassGroupingCollector
operator|.
name|getTopGroups
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|FunctionFirstPassGroupingCollector
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|firstPassGroupingCollector
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|AbstractDistinctValuesCollector
operator|)
operator|new
name|FunctionDistinctValuesCollector
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|BytesRefFieldSource
argument_list|(
name|groupField
argument_list|)
argument_list|,
operator|new
name|BytesRefFieldSource
argument_list|(
name|countField
argument_list|)
argument_list|,
operator|(
name|Collection
operator|)
name|searchGroups
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|AbstractDistinctValuesCollector
operator|)
operator|new
name|TermDistinctValuesCollector
argument_list|(
name|groupField
argument_list|,
name|countField
argument_list|,
operator|(
name|Collection
operator|)
name|searchGroups
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|createRandomFirstPassCollector
specifier|private
parameter_list|<
name|T
parameter_list|>
name|AbstractFirstPassGroupingCollector
argument_list|<
name|T
argument_list|>
name|createRandomFirstPassCollector
parameter_list|(
name|Sort
name|groupSort
parameter_list|,
name|String
name|groupField
parameter_list|,
name|int
name|topNGroups
parameter_list|)
throws|throws
name|IOException
block|{
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
return|return
operator|(
name|AbstractFirstPassGroupingCollector
argument_list|<
name|T
argument_list|>
operator|)
operator|new
name|FunctionFirstPassGroupingCollector
argument_list|(
operator|new
name|BytesRefFieldSource
argument_list|(
name|groupField
argument_list|)
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
name|groupSort
argument_list|,
name|topNGroups
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|AbstractFirstPassGroupingCollector
argument_list|<
name|T
argument_list|>
operator|)
operator|new
name|TermFirstPassGroupingCollector
argument_list|(
name|groupField
argument_list|,
name|groupSort
argument_list|,
name|topNGroups
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|createExpectedResult
specifier|private
name|List
argument_list|<
name|AbstractDistinctValuesCollector
operator|.
name|GroupCount
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|createExpectedResult
parameter_list|(
name|IndexContext
name|context
parameter_list|,
name|String
name|term
parameter_list|,
name|Sort
name|groupSort
parameter_list|,
name|int
name|topN
parameter_list|)
block|{
class|class
name|GroupCount
extends|extends
name|AbstractDistinctValuesCollector
operator|.
name|GroupCount
argument_list|<
name|BytesRef
argument_list|>
block|{
name|GroupCount
parameter_list|(
name|BytesRef
name|groupValue
parameter_list|,
name|Collection
argument_list|<
name|BytesRef
argument_list|>
name|uniqueValues
parameter_list|)
block|{
name|super
argument_list|(
name|groupValue
argument_list|)
expr_stmt|;
name|this
operator|.
name|uniqueValues
operator|.
name|addAll
argument_list|(
name|uniqueValues
argument_list|)
expr_stmt|;
block|}
block|}
name|List
name|result
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|groupCounts
init|=
name|context
operator|.
name|searchTermToGroupCounts
operator|.
name|get
argument_list|(
name|term
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|group
range|:
name|groupCounts
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|topN
operator|<=
name|i
operator|++
condition|)
block|{
break|break;
block|}
name|Set
argument_list|<
name|BytesRef
argument_list|>
name|uniqueValues
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|val
range|:
name|groupCounts
operator|.
name|get
argument_list|(
name|group
argument_list|)
control|)
block|{
name|uniqueValues
operator|.
name|add
argument_list|(
name|val
operator|!=
literal|null
condition|?
operator|new
name|BytesRef
argument_list|(
name|val
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
operator|new
name|GroupCount
argument_list|(
name|group
operator|!=
literal|null
condition|?
operator|new
name|BytesRef
argument_list|(
name|group
argument_list|)
else|:
literal|null
argument_list|,
name|uniqueValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|createIndexContext
specifier|private
name|IndexContext
name|createIndexContext
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
literal|86
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|1087
argument_list|)
operator|*
name|RANDOM_MULTIPLIER
decl_stmt|;
name|String
index|[]
name|groupValues
init|=
operator|new
name|String
index|[
name|numDocs
operator|/
literal|5
index|]
decl_stmt|;
name|String
index|[]
name|countValues
init|=
operator|new
name|String
index|[
name|numDocs
operator|/
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|groupValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|groupValues
index|[
name|i
index|]
operator|=
name|generateRandomNonEmptyString
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|countValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|countValues
index|[
name|i
index|]
operator|=
name|generateRandomNonEmptyString
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|contentStrings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|searchTermToGroupCounts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|String
name|groupValue
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|23
argument_list|)
operator|==
literal|14
condition|?
literal|null
else|:
name|groupValues
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|groupValues
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|String
name|countValue
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|21
argument_list|)
operator|==
literal|13
condition|?
literal|null
else|:
name|countValues
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|countValues
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|String
name|content
init|=
literal|"random"
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|numDocs
operator|/
literal|20
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|groupToCounts
init|=
name|searchTermToGroupCounts
operator|.
name|get
argument_list|(
name|content
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupToCounts
operator|==
literal|null
condition|)
block|{
comment|// Groups sort always DOCID asc...
name|searchTermToGroupCounts
operator|.
name|put
argument_list|(
name|content
argument_list|,
name|groupToCounts
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|contentStrings
operator|.
name|add
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|countsVals
init|=
name|groupToCounts
operator|.
name|get
argument_list|(
name|groupValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|countsVals
operator|==
literal|null
condition|)
block|{
name|groupToCounts
operator|.
name|put
argument_list|(
name|groupValue
argument_list|,
name|countsVals
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|countsVals
operator|.
name|add
argument_list|(
name|countValue
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%09d"
argument_list|,
name|i
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupValue
operator|!=
literal|null
condition|)
block|{
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
name|groupValue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|countValue
operator|!=
literal|null
condition|)
block|{
name|addField
argument_list|(
name|doc
argument_list|,
name|countField
argument_list|,
name|countValue
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"content"
argument_list|,
name|content
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|DirectoryReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|reader
operator|.
name|maxDoc
argument_list|()
condition|;
name|docID
operator|++
control|)
block|{
name|StoredDocument
name|doc
init|=
name|reader
operator|.
name|document
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"docID="
operator|+
name|docID
operator|+
literal|" id="
operator|+
name|doc
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|+
literal|" content="
operator|+
name|doc
operator|.
name|get
argument_list|(
literal|"content"
argument_list|)
operator|+
literal|" author="
operator|+
name|doc
operator|.
name|get
argument_list|(
literal|"author"
argument_list|)
operator|+
literal|" publisher="
operator|+
name|doc
operator|.
name|get
argument_list|(
literal|"publisher"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|w
operator|.
name|shutdown
argument_list|()
expr_stmt|;
return|return
operator|new
name|IndexContext
argument_list|(
name|dir
argument_list|,
name|reader
argument_list|,
name|searchTermToGroupCounts
argument_list|,
name|contentStrings
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|contentStrings
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|class|IndexContext
specifier|private
specifier|static
class|class
name|IndexContext
block|{
DECL|field|directory
specifier|final
name|Directory
name|directory
decl_stmt|;
DECL|field|indexReader
specifier|final
name|DirectoryReader
name|indexReader
decl_stmt|;
DECL|field|searchTermToGroupCounts
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|searchTermToGroupCounts
decl_stmt|;
DECL|field|contentStrings
specifier|final
name|String
index|[]
name|contentStrings
decl_stmt|;
DECL|method|IndexContext
name|IndexContext
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|DirectoryReader
name|indexReader
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|searchTermToGroupCounts
parameter_list|,
name|String
index|[]
name|contentStrings
parameter_list|)
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
name|this
operator|.
name|indexReader
operator|=
name|indexReader
expr_stmt|;
name|this
operator|.
name|searchTermToGroupCounts
operator|=
name|searchTermToGroupCounts
expr_stmt|;
name|this
operator|.
name|contentStrings
operator|=
name|contentStrings
expr_stmt|;
block|}
block|}
DECL|class|NullComparator
specifier|private
specifier|static
class|class
name|NullComparator
implements|implements
name|Comparator
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|Comparable
name|a
parameter_list|,
name|Comparable
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
name|b
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class
end_unit
