begin_unit
begin_package
DECL|package|org.apache.lucene.search.grouping
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NoMergePolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|term
operator|.
name|TermGroupFacetCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import
begin_class
DECL|class|GroupFacetCollectorTest
specifier|public
class|class
name|GroupFacetCollectorTest
extends|extends
name|AbstractGroupingTestCase
block|{
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|groupField
init|=
literal|"hotel"
decl_stmt|;
name|FieldType
name|customType
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|customType
operator|.
name|setStored
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|useDv
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
comment|// 0
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"a"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
literal|"airport"
argument_list|,
literal|"ams"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
literal|"duration"
argument_list|,
literal|"5"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 1
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"a"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
literal|"airport"
argument_list|,
literal|"dus"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
literal|"duration"
argument_list|,
literal|"10"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 2
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"b"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
literal|"airport"
argument_list|,
literal|"ams"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
literal|"duration"
argument_list|,
literal|"10"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// To ensure a second segment
comment|// 3
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"b"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
literal|"airport"
argument_list|,
literal|"ams"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
literal|"duration"
argument_list|,
literal|"5"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 4
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"b"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
literal|"airport"
argument_list|,
literal|"ams"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
literal|"duration"
argument_list|,
literal|"5"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexSearcher
name|indexSearcher
init|=
name|newSearcher
argument_list|(
name|w
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TermGroupFacetCollector
operator|.
name|FacetEntry
argument_list|>
name|entries
decl_stmt|;
name|AbstractGroupFacetCollector
name|groupedAirportFacetCollector
decl_stmt|;
name|TermGroupFacetCollector
operator|.
name|GroupedFacetResult
name|airportResult
decl_stmt|;
for|for
control|(
name|int
name|limit
range|:
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|10
block|,
literal|100
block|,
name|Integer
operator|.
name|MAX_VALUE
block|}
control|)
block|{
comment|// any of these limits is plenty for the data we have
name|groupedAirportFacetCollector
operator|=
name|createRandomCollector
argument_list|(
name|useDv
condition|?
literal|"hotel_dv"
else|:
literal|"hotel"
argument_list|,
name|useDv
condition|?
literal|"airport_dv"
else|:
literal|"airport"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|groupedAirportFacetCollector
argument_list|)
expr_stmt|;
name|int
name|maxOffset
init|=
literal|5
decl_stmt|;
name|airportResult
operator|=
name|groupedAirportFacetCollector
operator|.
name|mergeSegmentResults
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|==
name|limit
condition|?
name|limit
else|:
name|maxOffset
operator|+
name|limit
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|airportResult
operator|.
name|getTotalCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|airportResult
operator|.
name|getTotalMissingCount
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|=
name|airportResult
operator|.
name|getFacetEntries
argument_list|(
name|maxOffset
argument_list|,
name|limit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|=
name|airportResult
operator|.
name|getFacetEntries
argument_list|(
literal|0
argument_list|,
name|limit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ams"
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dus"
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|=
name|airportResult
operator|.
name|getFacetEntries
argument_list|(
literal|1
argument_list|,
name|limit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dus"
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|AbstractGroupFacetCollector
name|groupedDurationFacetCollector
init|=
name|createRandomCollector
argument_list|(
name|useDv
condition|?
literal|"hotel_dv"
else|:
literal|"hotel"
argument_list|,
name|useDv
condition|?
literal|"duration_dv"
else|:
literal|"duration"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|groupedDurationFacetCollector
argument_list|)
expr_stmt|;
name|TermGroupFacetCollector
operator|.
name|GroupedFacetResult
name|durationResult
init|=
name|groupedDurationFacetCollector
operator|.
name|mergeSegmentResults
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|durationResult
operator|.
name|getTotalCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|durationResult
operator|.
name|getTotalMissingCount
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|=
name|durationResult
operator|.
name|getFacetEntries
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"10"
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// 5
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"b"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
comment|// missing airport
if|if
condition|(
name|useDv
condition|)
block|{
name|addField
argument_list|(
name|doc
argument_list|,
literal|"airport"
argument_list|,
literal|""
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
block|}
name|addField
argument_list|(
name|doc
argument_list|,
literal|"duration"
argument_list|,
literal|"5"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 6
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"b"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
literal|"airport"
argument_list|,
literal|"bru"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
literal|"duration"
argument_list|,
literal|"10"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 7
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"b"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
literal|"airport"
argument_list|,
literal|"bru"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
literal|"duration"
argument_list|,
literal|"15"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 8
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"a"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
literal|"airport"
argument_list|,
literal|"bru"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
literal|"duration"
argument_list|,
literal|"10"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|indexSearcher
operator|=
name|newSearcher
argument_list|(
name|w
operator|.
name|getReader
argument_list|()
argument_list|)
expr_stmt|;
name|groupedAirportFacetCollector
operator|=
name|createRandomCollector
argument_list|(
name|useDv
condition|?
literal|"hotel_dv"
else|:
literal|"hotel"
argument_list|,
name|useDv
condition|?
literal|"airport_dv"
else|:
literal|"airport"
argument_list|,
literal|null
argument_list|,
operator|!
name|useDv
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|groupedAirportFacetCollector
argument_list|)
expr_stmt|;
name|airportResult
operator|=
name|groupedAirportFacetCollector
operator|.
name|mergeSegmentResults
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|entries
operator|=
name|airportResult
operator|.
name|getFacetEntries
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|useDv
condition|)
block|{
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|airportResult
operator|.
name|getTotalCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|airportResult
operator|.
name|getTotalMissingCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bru"
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|airportResult
operator|.
name|getTotalCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|airportResult
operator|.
name|getTotalMissingCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bru"
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dus"
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|groupedDurationFacetCollector
operator|=
name|createRandomCollector
argument_list|(
name|useDv
condition|?
literal|"hotel_dv"
else|:
literal|"hotel"
argument_list|,
name|useDv
condition|?
literal|"duration_dv"
else|:
literal|"duration"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|groupedDurationFacetCollector
argument_list|)
expr_stmt|;
name|durationResult
operator|=
name|groupedDurationFacetCollector
operator|.
name|mergeSegmentResults
argument_list|(
literal|10
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|durationResult
operator|.
name|getTotalCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|durationResult
operator|.
name|getTotalMissingCount
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|=
name|durationResult
operator|.
name|getFacetEntries
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// 9
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"c"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
literal|"airport"
argument_list|,
literal|"bru"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
literal|"duration"
argument_list|,
literal|"15"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 10
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"c"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
literal|"airport"
argument_list|,
literal|"dus"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
literal|"duration"
argument_list|,
literal|"10"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|indexSearcher
operator|=
name|newSearcher
argument_list|(
name|w
operator|.
name|getReader
argument_list|()
argument_list|)
expr_stmt|;
name|groupedAirportFacetCollector
operator|=
name|createRandomCollector
argument_list|(
name|useDv
condition|?
literal|"hotel_dv"
else|:
literal|"hotel"
argument_list|,
name|useDv
condition|?
literal|"airport_dv"
else|:
literal|"airport"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|groupedAirportFacetCollector
argument_list|)
expr_stmt|;
name|airportResult
operator|=
name|groupedAirportFacetCollector
operator|.
name|mergeSegmentResults
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|entries
operator|=
name|airportResult
operator|.
name|getFacetEntries
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
name|useDv
condition|)
block|{
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|airportResult
operator|.
name|getTotalCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|airportResult
operator|.
name|getTotalMissingCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ams"
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bru"
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dus"
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|airportResult
operator|.
name|getTotalCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|airportResult
operator|.
name|getTotalMissingCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ams"
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bru"
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dus"
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|groupedDurationFacetCollector
operator|=
name|createRandomCollector
argument_list|(
name|useDv
condition|?
literal|"hotel_dv"
else|:
literal|"hotel"
argument_list|,
name|useDv
condition|?
literal|"duration_dv"
else|:
literal|"duration"
argument_list|,
literal|"1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|groupedDurationFacetCollector
argument_list|)
expr_stmt|;
name|durationResult
operator|=
name|groupedDurationFacetCollector
operator|.
name|mergeSegmentResults
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|durationResult
operator|.
name|getTotalCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|durationResult
operator|.
name|getTotalMissingCount
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|=
name|durationResult
operator|.
name|getFacetEntries
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"10"
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"15"
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|indexSearcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testMVGroupedFacetingWithDeletes
specifier|public
name|void
name|testMVGroupedFacetingWithDeletes
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|groupField
init|=
literal|"hotel"
decl_stmt|;
name|FieldType
name|customType
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|customType
operator|.
name|setStored
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|COMPOUND_FILES
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|useDv
init|=
literal|false
decl_stmt|;
comment|// Cannot assert this since we use NoMergePolicy:
name|w
operator|.
name|setDoRandomForceMergeAssert
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// 0
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"x"
argument_list|,
literal|"x"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 1
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"a"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"airport"
argument_list|,
literal|"ams"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"airport"
argument_list|,
literal|"ams"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"a"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"airport"
argument_list|,
literal|"ams"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 3
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"a"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"airport"
argument_list|,
literal|"dus"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 4
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"b"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"airport"
argument_list|,
literal|"ams"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 5
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"b"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"airport"
argument_list|,
literal|"ams"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 6
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|doc
argument_list|,
name|groupField
argument_list|,
literal|"b"
argument_list|,
name|useDv
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"airport"
argument_list|,
literal|"ams"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// 7
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"x"
argument_list|,
literal|"x"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|indexSearcher
init|=
name|newSearcher
argument_list|(
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
argument_list|)
decl_stmt|;
name|AbstractGroupFacetCollector
name|groupedAirportFacetCollector
init|=
name|createRandomCollector
argument_list|(
name|groupField
argument_list|,
literal|"airport"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|groupedAirportFacetCollector
argument_list|)
expr_stmt|;
name|TermGroupFacetCollector
operator|.
name|GroupedFacetResult
name|airportResult
init|=
name|groupedAirportFacetCollector
operator|.
name|mergeSegmentResults
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|airportResult
operator|.
name|getTotalCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|airportResult
operator|.
name|getTotalMissingCount
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TermGroupFacetCollector
operator|.
name|FacetEntry
argument_list|>
name|entries
init|=
name|airportResult
operator|.
name|getFacetEntries
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ams"
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dus"
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|addField
specifier|private
name|void
name|addField
parameter_list|(
name|Document
name|doc
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|canUseIDV
parameter_list|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
name|field
argument_list|,
name|value
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|canUseIDV
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|field
operator|+
literal|"_dv"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
name|int
name|numberOfRuns
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|indexIter
init|=
literal|0
init|;
name|indexIter
operator|<
name|numberOfRuns
condition|;
name|indexIter
operator|++
control|)
block|{
name|boolean
name|multipleFacetsPerDocument
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|IndexContext
name|context
init|=
name|createIndexContext
argument_list|(
name|multipleFacetsPerDocument
argument_list|)
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|context
operator|.
name|indexReader
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: searcher="
operator|+
name|searcher
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|searchIter
init|=
literal|0
init|;
name|searchIter
operator|<
literal|100
condition|;
name|searchIter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: searchIter="
operator|+
name|searchIter
argument_list|)
expr_stmt|;
block|}
name|boolean
name|useDv
init|=
operator|!
name|multipleFacetsPerDocument
operator|&&
name|context
operator|.
name|useDV
operator|&&
name|random
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|String
name|searchTerm
init|=
name|context
operator|.
name|contentStrings
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|context
operator|.
name|contentStrings
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|int
name|limit
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|context
operator|.
name|facetValues
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|context
operator|.
name|facetValues
operator|.
name|size
argument_list|()
operator|-
name|limit
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|offset
operator|+
name|limit
decl_stmt|;
name|int
name|minCount
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|0
else|:
name|random
operator|.
name|nextInt
argument_list|(
literal|1
operator|+
name|context
operator|.
name|facetWithMostGroups
operator|/
literal|10
argument_list|)
decl_stmt|;
name|boolean
name|orderByCount
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|String
name|randomStr
init|=
name|getFromSet
argument_list|(
name|context
operator|.
name|facetValues
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
name|context
operator|.
name|facetValues
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|facetPrefix
decl_stmt|;
if|if
condition|(
name|randomStr
operator|==
literal|null
condition|)
block|{
name|facetPrefix
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|int
name|codePointLen
init|=
name|randomStr
operator|.
name|codePointCount
argument_list|(
literal|0
argument_list|,
name|randomStr
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|randomLen
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|codePointLen
argument_list|)
decl_stmt|;
if|if
condition|(
name|codePointLen
operator|==
name|randomLen
operator|-
literal|1
condition|)
block|{
name|facetPrefix
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|int
name|end
init|=
name|randomStr
operator|.
name|offsetByCodePoints
argument_list|(
literal|0
argument_list|,
name|randomLen
argument_list|)
decl_stmt|;
name|facetPrefix
operator|=
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|null
else|:
name|randomStr
operator|.
name|substring
argument_list|(
name|end
argument_list|)
expr_stmt|;
block|}
block|}
name|GroupedFacetResult
name|expectedFacetResult
init|=
name|createExpectedFacetResult
argument_list|(
name|searchTerm
argument_list|,
name|context
argument_list|,
name|offset
argument_list|,
name|limit
argument_list|,
name|minCount
argument_list|,
name|orderByCount
argument_list|,
name|facetPrefix
argument_list|)
decl_stmt|;
name|AbstractGroupFacetCollector
name|groupFacetCollector
init|=
name|createRandomCollector
argument_list|(
name|useDv
condition|?
literal|"group_dv"
else|:
literal|"group"
argument_list|,
name|useDv
condition|?
literal|"facet_dv"
else|:
literal|"facet"
argument_list|,
name|facetPrefix
argument_list|,
name|multipleFacetsPerDocument
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
name|searchTerm
argument_list|)
argument_list|)
argument_list|,
name|groupFacetCollector
argument_list|)
expr_stmt|;
name|TermGroupFacetCollector
operator|.
name|GroupedFacetResult
name|actualFacetResult
init|=
name|groupFacetCollector
operator|.
name|mergeSegmentResults
argument_list|(
name|size
argument_list|,
name|minCount
argument_list|,
name|orderByCount
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TermGroupFacetCollector
operator|.
name|FacetEntry
argument_list|>
name|expectedFacetEntries
init|=
name|expectedFacetResult
operator|.
name|getFacetEntries
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TermGroupFacetCollector
operator|.
name|FacetEntry
argument_list|>
name|actualFacetEntries
init|=
name|actualFacetResult
operator|.
name|getFacetEntries
argument_list|(
name|offset
argument_list|,
name|limit
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Use DV: "
operator|+
name|useDv
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Collector: "
operator|+
name|groupFacetCollector
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Num group: "
operator|+
name|context
operator|.
name|numGroups
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Num doc: "
operator|+
name|context
operator|.
name|numDocs
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Index iter: "
operator|+
name|indexIter
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"multipleFacetsPerDocument: "
operator|+
name|multipleFacetsPerDocument
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Search iter: "
operator|+
name|searchIter
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Search term: "
operator|+
name|searchTerm
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Min count: "
operator|+
name|minCount
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Facet offset: "
operator|+
name|offset
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Facet limit: "
operator|+
name|limit
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Facet prefix: "
operator|+
name|facetPrefix
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Order by count: "
operator|+
name|orderByCount
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n=== Expected: \n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total count "
operator|+
name|expectedFacetResult
operator|.
name|getTotalCount
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total missing count "
operator|+
name|expectedFacetResult
operator|.
name|getTotalMissingCount
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TermGroupFacetCollector
operator|.
name|FacetEntry
name|expectedFacetEntry
range|:
name|expectedFacetEntries
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%d. Expected facet value %s with count %d"
argument_list|,
name|counter
operator|++
argument_list|,
name|expectedFacetEntry
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|expectedFacetEntry
operator|.
name|getCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n=== Actual: \n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total count "
operator|+
name|actualFacetResult
operator|.
name|getTotalCount
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total missing count "
operator|+
name|actualFacetResult
operator|.
name|getTotalMissingCount
argument_list|()
argument_list|)
expr_stmt|;
name|counter
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|TermGroupFacetCollector
operator|.
name|FacetEntry
name|actualFacetEntry
range|:
name|actualFacetEntries
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%d. Actual facet value %s with count %d"
argument_list|,
name|counter
operator|++
argument_list|,
name|actualFacetEntry
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|actualFacetEntry
operator|.
name|getCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n==================================================================================="
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedFacetResult
operator|.
name|getTotalCount
argument_list|()
argument_list|,
name|actualFacetResult
operator|.
name|getTotalCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFacetResult
operator|.
name|getTotalMissingCount
argument_list|()
argument_list|,
name|actualFacetResult
operator|.
name|getTotalMissingCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFacetEntries
operator|.
name|size
argument_list|()
argument_list|,
name|actualFacetEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedFacetEntries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|TermGroupFacetCollector
operator|.
name|FacetEntry
name|expectedFacetEntry
init|=
name|expectedFacetEntries
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|TermGroupFacetCollector
operator|.
name|FacetEntry
name|actualFacetEntry
init|=
name|actualFacetEntries
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"i="
operator|+
name|i
operator|+
literal|": "
operator|+
name|expectedFacetEntry
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|" != "
operator|+
name|actualFacetEntry
operator|.
name|getValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|expectedFacetEntry
operator|.
name|getValue
argument_list|()
argument_list|,
name|actualFacetEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"i="
operator|+
name|i
operator|+
literal|": "
operator|+
name|expectedFacetEntry
operator|.
name|getCount
argument_list|()
operator|+
literal|" != "
operator|+
name|actualFacetEntry
operator|.
name|getCount
argument_list|()
argument_list|,
name|expectedFacetEntry
operator|.
name|getCount
argument_list|()
argument_list|,
name|actualFacetEntry
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|context
operator|.
name|indexReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|context
operator|.
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createIndexContext
specifier|private
name|IndexContext
name|createIndexContext
parameter_list|(
name|boolean
name|multipleFacetValuesPerDocument
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|138
argument_list|,
literal|1145
argument_list|)
operator|*
name|RANDOM_MULTIPLIER
decl_stmt|;
specifier|final
name|int
name|numGroups
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
name|numDocs
operator|/
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numFacets
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
name|numDocs
operator|/
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: numDocs="
operator|+
name|numDocs
operator|+
literal|" numGroups="
operator|+
name|numGroups
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numGroups
condition|;
name|i
operator|++
control|)
block|{
name|groups
operator|.
name|add
argument_list|(
name|generateRandomNonEmptyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|facetValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFacets
condition|;
name|i
operator|++
control|)
block|{
name|facetValues
operator|.
name|add
argument_list|(
name|generateRandomNonEmptyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
index|[]
name|contentBrs
init|=
operator|new
name|String
index|[
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|2
argument_list|,
literal|20
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: create fake content"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|contentIDX
init|=
literal|0
init|;
name|contentIDX
operator|<
name|contentBrs
operator|.
name|length
condition|;
name|contentIDX
operator|++
control|)
block|{
name|contentBrs
index|[
name|contentIDX
index|]
operator|=
name|generateRandomNonEmptyString
argument_list|()
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  content="
operator|+
name|contentBrs
index|[
name|contentIDX
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|canUseDV
init|=
literal|true
decl_stmt|;
name|boolean
name|useDv
init|=
name|canUseDV
operator|&&
operator|!
name|multipleFacetValuesPerDocument
operator|&&
name|random
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Document
name|docNoGroup
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Document
name|docNoFacet
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Document
name|docNoGroupNoFacet
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|group
init|=
name|newStringField
argument_list|(
literal|"group"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|Field
name|groupDc
init|=
operator|new
name|SortedDocValuesField
argument_list|(
literal|"group_dv"
argument_list|,
operator|new
name|BytesRef
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|useDv
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|groupDc
argument_list|)
expr_stmt|;
name|docNoFacet
operator|.
name|add
argument_list|(
name|groupDc
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|docNoFacet
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|Field
index|[]
name|facetFields
decl_stmt|;
if|if
condition|(
name|useDv
condition|)
block|{
assert|assert
operator|!
name|multipleFacetValuesPerDocument
assert|;
name|facetFields
operator|=
operator|new
name|Field
index|[
literal|2
index|]
expr_stmt|;
name|facetFields
index|[
literal|0
index|]
operator|=
name|newStringField
argument_list|(
literal|"facet"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|facetFields
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|docNoGroup
operator|.
name|add
argument_list|(
name|facetFields
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|facetFields
index|[
literal|1
index|]
operator|=
operator|new
name|SortedDocValuesField
argument_list|(
literal|"facet_dv"
argument_list|,
operator|new
name|BytesRef
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|facetFields
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|docNoGroup
operator|.
name|add
argument_list|(
name|facetFields
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|facetFields
operator|=
name|multipleFacetValuesPerDocument
condition|?
operator|new
name|Field
index|[
literal|2
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
index|]
else|:
operator|new
name|Field
index|[
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|facetFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|facetFields
index|[
name|i
index|]
operator|=
name|newStringField
argument_list|(
literal|"facet"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|facetFields
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|docNoGroup
operator|.
name|add
argument_list|(
name|facetFields
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|Field
name|content
init|=
name|newStringField
argument_list|(
literal|"content"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|docNoGroup
operator|.
name|add
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|docNoFacet
operator|.
name|add
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|docNoGroupNoFacet
operator|.
name|add
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|NavigableSet
argument_list|<
name|String
argument_list|>
name|uniqueFacetValues
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|a
parameter_list|,
name|String
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
name|b
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|searchTermToFacetToGroups
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|facetWithMostGroups
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|groupValue
decl_stmt|;
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|24
argument_list|)
operator|==
literal|17
condition|)
block|{
comment|// So we test the "doc doesn't have the group'd
comment|// field" case:
if|if
condition|(
name|useDv
condition|)
block|{
name|groupValue
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|groupValue
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|groupValue
operator|=
name|groups
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|groups
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|contentStr
init|=
name|contentBrs
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|contentBrs
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|searchTermToFacetToGroups
operator|.
name|containsKey
argument_list|(
name|contentStr
argument_list|)
condition|)
block|{
name|searchTermToFacetToGroups
operator|.
name|put
argument_list|(
name|contentStr
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|facetToGroups
init|=
name|searchTermToFacetToGroups
operator|.
name|get
argument_list|(
name|contentStr
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|facetVals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|useDv
operator|||
name|random
operator|.
name|nextInt
argument_list|(
literal|24
argument_list|)
operator|!=
literal|18
condition|)
block|{
if|if
condition|(
name|useDv
condition|)
block|{
name|String
name|facetValue
init|=
name|facetValues
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|facetValues
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|uniqueFacetValues
operator|.
name|add
argument_list|(
name|facetValue
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|facetToGroups
operator|.
name|containsKey
argument_list|(
name|facetValue
argument_list|)
condition|)
block|{
name|facetToGroups
operator|.
name|put
argument_list|(
name|facetValue
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|groupsInFacet
init|=
name|facetToGroups
operator|.
name|get
argument_list|(
name|facetValue
argument_list|)
decl_stmt|;
name|groupsInFacet
operator|.
name|add
argument_list|(
name|groupValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupsInFacet
operator|.
name|size
argument_list|()
operator|>
name|facetWithMostGroups
condition|)
block|{
name|facetWithMostGroups
operator|=
name|groupsInFacet
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|facetFields
index|[
literal|0
index|]
operator|.
name|setStringValue
argument_list|(
name|facetValue
argument_list|)
expr_stmt|;
name|facetFields
index|[
literal|1
index|]
operator|.
name|setBytesValue
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|facetValue
argument_list|)
argument_list|)
expr_stmt|;
name|facetVals
operator|.
name|add
argument_list|(
name|facetValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Field
name|facetField
range|:
name|facetFields
control|)
block|{
name|String
name|facetValue
init|=
name|facetValues
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|facetValues
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|uniqueFacetValues
operator|.
name|add
argument_list|(
name|facetValue
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|facetToGroups
operator|.
name|containsKey
argument_list|(
name|facetValue
argument_list|)
condition|)
block|{
name|facetToGroups
operator|.
name|put
argument_list|(
name|facetValue
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|groupsInFacet
init|=
name|facetToGroups
operator|.
name|get
argument_list|(
name|facetValue
argument_list|)
decl_stmt|;
name|groupsInFacet
operator|.
name|add
argument_list|(
name|groupValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupsInFacet
operator|.
name|size
argument_list|()
operator|>
name|facetWithMostGroups
condition|)
block|{
name|facetWithMostGroups
operator|=
name|groupsInFacet
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|facetField
operator|.
name|setStringValue
argument_list|(
name|facetValue
argument_list|)
expr_stmt|;
name|facetVals
operator|.
name|add
argument_list|(
name|facetValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|uniqueFacetValues
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|facetToGroups
operator|.
name|containsKey
argument_list|(
literal|null
argument_list|)
condition|)
block|{
name|facetToGroups
operator|.
name|put
argument_list|(
literal|null
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|groupsInFacet
init|=
name|facetToGroups
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|groupsInFacet
operator|.
name|add
argument_list|(
name|groupValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupsInFacet
operator|.
name|size
argument_list|()
operator|>
name|facetWithMostGroups
condition|)
block|{
name|facetWithMostGroups
operator|=
name|groupsInFacet
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc content="
operator|+
name|contentStr
operator|+
literal|" group="
operator|+
operator|(
name|groupValue
operator|==
literal|null
condition|?
literal|"null"
else|:
name|groupValue
operator|)
operator|+
literal|" facetVals="
operator|+
name|facetVals
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|useDv
condition|)
block|{
name|groupDc
operator|.
name|setBytesValue
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|groupValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|group
operator|.
name|setStringValue
argument_list|(
name|groupValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|useDv
condition|)
block|{
comment|// DV cannot have missing values:
name|groupDc
operator|.
name|setBytesValue
argument_list|(
operator|new
name|BytesRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|content
operator|.
name|setStringValue
argument_list|(
name|contentStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupValue
operator|==
literal|null
operator|&&
name|facetVals
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|docNoGroupNoFacet
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|facetVals
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|docNoFacet
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|groupValue
operator|==
literal|null
condition|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|docNoGroup
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
name|DirectoryReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|new
name|IndexContext
argument_list|(
name|searchTermToFacetToGroups
argument_list|,
name|reader
argument_list|,
name|numDocs
argument_list|,
name|dir
argument_list|,
name|facetWithMostGroups
argument_list|,
name|numGroups
argument_list|,
name|contentBrs
argument_list|,
name|uniqueFacetValues
argument_list|,
name|useDv
argument_list|)
return|;
block|}
DECL|method|createExpectedFacetResult
specifier|private
name|GroupedFacetResult
name|createExpectedFacetResult
parameter_list|(
name|String
name|searchTerm
parameter_list|,
name|IndexContext
name|context
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|limit
parameter_list|,
name|int
name|minCount
parameter_list|,
specifier|final
name|boolean
name|orderByCount
parameter_list|,
name|String
name|facetPrefix
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|facetGroups
init|=
name|context
operator|.
name|searchTermToFacetGroups
operator|.
name|get
argument_list|(
name|searchTerm
argument_list|)
decl_stmt|;
if|if
condition|(
name|facetGroups
operator|==
literal|null
condition|)
block|{
name|facetGroups
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|int
name|totalCount
init|=
literal|0
decl_stmt|;
name|int
name|totalMissCount
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|facetValues
decl_stmt|;
if|if
condition|(
name|facetPrefix
operator|!=
literal|null
condition|)
block|{
name|facetValues
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|facetValue
range|:
name|context
operator|.
name|facetValues
control|)
block|{
if|if
condition|(
name|facetValue
operator|!=
literal|null
operator|&&
name|facetValue
operator|.
name|startsWith
argument_list|(
name|facetPrefix
argument_list|)
condition|)
block|{
name|facetValues
operator|.
name|add
argument_list|(
name|facetValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|facetValues
operator|=
name|context
operator|.
name|facetValues
expr_stmt|;
block|}
name|List
argument_list|<
name|TermGroupFacetCollector
operator|.
name|FacetEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|facetGroups
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// also includes facets with count 0
for|for
control|(
name|String
name|facetValue
range|:
name|facetValues
control|)
block|{
if|if
condition|(
name|facetValue
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|facetGroups
operator|.
name|get
argument_list|(
name|facetValue
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|groups
operator|!=
literal|null
condition|?
name|groups
operator|.
name|size
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|count
operator|>=
name|minCount
condition|)
block|{
name|entries
operator|.
name|add
argument_list|(
operator|new
name|TermGroupFacetCollector
operator|.
name|FacetEntry
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|facetValue
argument_list|)
argument_list|,
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|totalCount
operator|+=
name|count
expr_stmt|;
block|}
comment|// Only include null count when no facet prefix is specified
if|if
condition|(
name|facetPrefix
operator|==
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|facetGroups
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|groups
operator|!=
literal|null
condition|)
block|{
name|totalMissCount
operator|=
name|groups
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|entries
argument_list|,
operator|new
name|Comparator
argument_list|<
name|TermGroupFacetCollector
operator|.
name|FacetEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TermGroupFacetCollector
operator|.
name|FacetEntry
name|a
parameter_list|,
name|TermGroupFacetCollector
operator|.
name|FacetEntry
name|b
parameter_list|)
block|{
if|if
condition|(
name|orderByCount
condition|)
block|{
name|int
name|cmp
init|=
name|b
operator|.
name|getCount
argument_list|()
operator|-
name|a
operator|.
name|getCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
return|return
name|cmp
return|;
block|}
block|}
return|return
name|a
operator|.
name|getValue
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|int
name|endOffset
init|=
name|offset
operator|+
name|limit
decl_stmt|;
name|List
argument_list|<
name|TermGroupFacetCollector
operator|.
name|FacetEntry
argument_list|>
name|entriesResult
decl_stmt|;
if|if
condition|(
name|offset
operator|>=
name|entries
operator|.
name|size
argument_list|()
condition|)
block|{
name|entriesResult
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|endOffset
operator|>=
name|entries
operator|.
name|size
argument_list|()
condition|)
block|{
name|entriesResult
operator|=
name|entries
operator|.
name|subList
argument_list|(
name|offset
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entriesResult
operator|=
name|entries
operator|.
name|subList
argument_list|(
name|offset
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|GroupedFacetResult
argument_list|(
name|totalCount
argument_list|,
name|totalMissCount
argument_list|,
name|entriesResult
argument_list|)
return|;
block|}
DECL|method|createRandomCollector
specifier|private
name|AbstractGroupFacetCollector
name|createRandomCollector
parameter_list|(
name|String
name|groupField
parameter_list|,
name|String
name|facetField
parameter_list|,
name|String
name|facetPrefix
parameter_list|,
name|boolean
name|multipleFacetsPerDocument
parameter_list|)
block|{
name|BytesRef
name|facetPrefixBR
init|=
name|facetPrefix
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|BytesRef
argument_list|(
name|facetPrefix
argument_list|)
decl_stmt|;
comment|// DocValues cannot be multi-valued:
assert|assert
operator|!
name|multipleFacetsPerDocument
operator|||
operator|!
name|groupField
operator|.
name|endsWith
argument_list|(
literal|"_dv"
argument_list|)
assert|;
return|return
name|TermGroupFacetCollector
operator|.
name|createTermGroupFacetCollector
argument_list|(
name|groupField
argument_list|,
name|facetField
argument_list|,
name|multipleFacetsPerDocument
argument_list|,
name|facetPrefixBR
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getFromSet
specifier|private
name|String
name|getFromSet
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|set
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|int
name|currentIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|bytesRef
range|:
name|set
control|)
block|{
if|if
condition|(
name|currentIndex
operator|++
operator|==
name|index
condition|)
block|{
return|return
name|bytesRef
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|class|IndexContext
specifier|private
class|class
name|IndexContext
block|{
DECL|field|numDocs
specifier|final
name|int
name|numDocs
decl_stmt|;
DECL|field|indexReader
specifier|final
name|DirectoryReader
name|indexReader
decl_stmt|;
DECL|field|searchTermToFacetGroups
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|searchTermToFacetGroups
decl_stmt|;
DECL|field|facetValues
specifier|final
name|NavigableSet
argument_list|<
name|String
argument_list|>
name|facetValues
decl_stmt|;
DECL|field|dir
specifier|final
name|Directory
name|dir
decl_stmt|;
DECL|field|facetWithMostGroups
specifier|final
name|int
name|facetWithMostGroups
decl_stmt|;
DECL|field|numGroups
specifier|final
name|int
name|numGroups
decl_stmt|;
DECL|field|contentStrings
specifier|final
name|String
index|[]
name|contentStrings
decl_stmt|;
DECL|field|useDV
specifier|final
name|boolean
name|useDV
decl_stmt|;
DECL|method|IndexContext
specifier|public
name|IndexContext
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|searchTermToFacetGroups
parameter_list|,
name|DirectoryReader
name|r
parameter_list|,
name|int
name|numDocs
parameter_list|,
name|Directory
name|dir
parameter_list|,
name|int
name|facetWithMostGroups
parameter_list|,
name|int
name|numGroups
parameter_list|,
name|String
index|[]
name|contentStrings
parameter_list|,
name|NavigableSet
argument_list|<
name|String
argument_list|>
name|facetValues
parameter_list|,
name|boolean
name|useDV
parameter_list|)
block|{
name|this
operator|.
name|searchTermToFacetGroups
operator|=
name|searchTermToFacetGroups
expr_stmt|;
name|this
operator|.
name|indexReader
operator|=
name|r
expr_stmt|;
name|this
operator|.
name|numDocs
operator|=
name|numDocs
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|facetWithMostGroups
operator|=
name|facetWithMostGroups
expr_stmt|;
name|this
operator|.
name|numGroups
operator|=
name|numGroups
expr_stmt|;
name|this
operator|.
name|contentStrings
operator|=
name|contentStrings
expr_stmt|;
name|this
operator|.
name|facetValues
operator|=
name|facetValues
expr_stmt|;
name|this
operator|.
name|useDV
operator|=
name|useDV
expr_stmt|;
block|}
block|}
DECL|class|GroupedFacetResult
specifier|private
class|class
name|GroupedFacetResult
block|{
DECL|field|totalCount
specifier|final
name|int
name|totalCount
decl_stmt|;
DECL|field|totalMissingCount
specifier|final
name|int
name|totalMissingCount
decl_stmt|;
DECL|field|facetEntries
specifier|final
name|List
argument_list|<
name|TermGroupFacetCollector
operator|.
name|FacetEntry
argument_list|>
name|facetEntries
decl_stmt|;
DECL|method|GroupedFacetResult
specifier|private
name|GroupedFacetResult
parameter_list|(
name|int
name|totalCount
parameter_list|,
name|int
name|totalMissingCount
parameter_list|,
name|List
argument_list|<
name|TermGroupFacetCollector
operator|.
name|FacetEntry
argument_list|>
name|facetEntries
parameter_list|)
block|{
name|this
operator|.
name|totalCount
operator|=
name|totalCount
expr_stmt|;
name|this
operator|.
name|totalMissingCount
operator|=
name|totalMissingCount
expr_stmt|;
name|this
operator|.
name|facetEntries
operator|=
name|facetEntries
expr_stmt|;
block|}
DECL|method|getTotalCount
specifier|public
name|int
name|getTotalCount
parameter_list|()
block|{
return|return
name|totalCount
return|;
block|}
DECL|method|getTotalMissingCount
specifier|public
name|int
name|getTotalMissingCount
parameter_list|()
block|{
return|return
name|totalMissingCount
return|;
block|}
DECL|method|getFacetEntries
specifier|public
name|List
argument_list|<
name|TermGroupFacetCollector
operator|.
name|FacetEntry
argument_list|>
name|getFacetEntries
parameter_list|()
block|{
return|return
name|facetEntries
return|;
block|}
block|}
block|}
end_class
end_unit
