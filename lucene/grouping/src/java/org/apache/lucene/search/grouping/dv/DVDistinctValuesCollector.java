begin_unit
begin_package
DECL|package|org.apache.lucene.search.grouping.dv
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|dv
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|AbstractDistinctValuesCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|SearchGroup
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SentinelIntSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
operator|.
name|Type
import|;
end_import
begin_comment
comment|// javadocs
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * Docvalues implementation of {@link org.apache.lucene.search.grouping.AbstractDistinctValuesCollector}.  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|DVDistinctValuesCollector
specifier|public
specifier|abstract
class|class
name|DVDistinctValuesCollector
parameter_list|<
name|GC
extends|extends
name|AbstractDistinctValuesCollector
operator|.
name|GroupCount
parameter_list|<
name|?
parameter_list|>
parameter_list|>
extends|extends
name|AbstractDistinctValuesCollector
argument_list|<
name|GC
argument_list|>
block|{
DECL|field|groupField
specifier|final
name|String
name|groupField
decl_stmt|;
DECL|field|countField
specifier|final
name|String
name|countField
decl_stmt|;
DECL|field|diskResident
specifier|final
name|boolean
name|diskResident
decl_stmt|;
DECL|field|valueType
specifier|final
name|Type
name|valueType
decl_stmt|;
DECL|method|DVDistinctValuesCollector
name|DVDistinctValuesCollector
parameter_list|(
name|String
name|groupField
parameter_list|,
name|String
name|countField
parameter_list|,
name|boolean
name|diskResident
parameter_list|,
name|Type
name|valueType
parameter_list|)
block|{
name|this
operator|.
name|groupField
operator|=
name|groupField
expr_stmt|;
name|this
operator|.
name|countField
operator|=
name|countField
expr_stmt|;
name|this
operator|.
name|diskResident
operator|=
name|diskResident
expr_stmt|;
name|this
operator|.
name|valueType
operator|=
name|valueType
expr_stmt|;
block|}
comment|/**    * Constructs a docvalues based implementation of {@link org.apache.lucene.search.grouping.AbstractDistinctValuesCollector} based on the specified    * type.    *    * @param groupField    The field to group by    * @param countField    The field to count distinct values for    * @param groups        The top N groups, collected during the first phase search    * @param diskResident  Whether the values to group and count by should be disk resident    * @param type          The {@link Type} which is used to select a concrete implementation    * @return a docvalues based distinct count collector    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|create
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|DVDistinctValuesCollector
argument_list|<
name|GroupCount
argument_list|<
name|T
argument_list|>
argument_list|>
name|create
parameter_list|(
name|String
name|groupField
parameter_list|,
name|String
name|countField
parameter_list|,
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|T
argument_list|>
argument_list|>
name|groups
parameter_list|,
name|boolean
name|diskResident
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|VAR_INTS
case|:
case|case
name|FIXED_INTS_8
case|:
case|case
name|FIXED_INTS_16
case|:
case|case
name|FIXED_INTS_32
case|:
case|case
name|FIXED_INTS_64
case|:
comment|// Type erasure b/c otherwise we have inconvertible types...
return|return
operator|(
name|DVDistinctValuesCollector
operator|)
operator|new
name|NonSorted
operator|.
name|Lng
argument_list|(
name|groupField
argument_list|,
name|countField
argument_list|,
operator|(
name|Collection
operator|)
name|groups
argument_list|,
name|diskResident
argument_list|,
name|type
argument_list|)
return|;
case|case
name|FLOAT_32
case|:
case|case
name|FLOAT_64
case|:
comment|// Type erasure b/c otherwise we have inconvertible types...
return|return
operator|(
name|DVDistinctValuesCollector
operator|)
operator|new
name|NonSorted
operator|.
name|Dbl
argument_list|(
name|groupField
argument_list|,
name|countField
argument_list|,
operator|(
name|Collection
operator|)
name|groups
argument_list|,
name|diskResident
argument_list|,
name|type
argument_list|)
return|;
case|case
name|BYTES_FIXED_STRAIGHT
case|:
case|case
name|BYTES_FIXED_DEREF
case|:
case|case
name|BYTES_VAR_STRAIGHT
case|:
case|case
name|BYTES_VAR_DEREF
case|:
comment|// Type erasure b/c otherwise we have inconvertible types...
return|return
operator|(
name|DVDistinctValuesCollector
operator|)
operator|new
name|NonSorted
operator|.
name|BR
argument_list|(
name|groupField
argument_list|,
name|countField
argument_list|,
operator|(
name|Collection
operator|)
name|groups
argument_list|,
name|diskResident
argument_list|,
name|type
argument_list|)
return|;
case|case
name|BYTES_VAR_SORTED
case|:
case|case
name|BYTES_FIXED_SORTED
case|:
comment|// Type erasure b/c otherwise we have inconvertible types...
return|return
operator|(
name|DVDistinctValuesCollector
operator|)
operator|new
name|Sorted
operator|.
name|BR
argument_list|(
name|groupField
argument_list|,
name|countField
argument_list|,
operator|(
name|Collection
operator|)
name|groups
argument_list|,
name|diskResident
argument_list|,
name|type
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"ValueType %s not supported"
argument_list|,
name|type
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|class|NonSorted
specifier|static
specifier|abstract
class|class
name|NonSorted
parameter_list|<
name|K
parameter_list|>
extends|extends
name|DVDistinctValuesCollector
argument_list|<
name|NonSorted
operator|.
name|GroupCount
argument_list|>
block|{
DECL|field|groupMap
specifier|final
name|Map
argument_list|<
name|K
argument_list|,
name|GroupCount
argument_list|>
name|groupMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|K
argument_list|,
name|GroupCount
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|groupFieldSource
name|DocValues
operator|.
name|Source
name|groupFieldSource
decl_stmt|;
DECL|field|countFieldSource
name|DocValues
operator|.
name|Source
name|countFieldSource
decl_stmt|;
DECL|method|NonSorted
name|NonSorted
parameter_list|(
name|String
name|groupField
parameter_list|,
name|String
name|countField
parameter_list|,
name|boolean
name|diskResident
parameter_list|,
name|Type
name|valueType
parameter_list|)
block|{
name|super
argument_list|(
name|groupField
argument_list|,
name|countField
argument_list|,
name|diskResident
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getGroups
specifier|public
name|List
argument_list|<
name|GroupCount
argument_list|>
name|getGroups
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|GroupCount
argument_list|>
argument_list|(
name|groupMap
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|groupFieldSource
operator|=
name|retrieveSource
argument_list|(
name|groupField
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|countFieldSource
operator|=
name|retrieveSource
argument_list|(
name|countField
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|retrieveSource
specifier|private
name|DocValues
operator|.
name|Source
name|retrieveSource
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|DocValues
name|groupFieldDv
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|docValues
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupFieldDv
operator|!=
literal|null
condition|)
block|{
return|return
name|diskResident
condition|?
name|groupFieldDv
operator|.
name|getDirectSource
argument_list|()
else|:
name|groupFieldDv
operator|.
name|getSource
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|DocValues
operator|.
name|getDefaultSource
argument_list|(
name|valueType
argument_list|)
return|;
block|}
block|}
DECL|class|Dbl
specifier|static
class|class
name|Dbl
extends|extends
name|NonSorted
argument_list|<
name|Double
argument_list|>
block|{
DECL|method|Dbl
name|Dbl
parameter_list|(
name|String
name|groupField
parameter_list|,
name|String
name|countField
parameter_list|,
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|Double
argument_list|>
argument_list|>
name|groups
parameter_list|,
name|boolean
name|diskResident
parameter_list|,
name|Type
name|valueType
parameter_list|)
block|{
name|super
argument_list|(
name|groupField
argument_list|,
name|countField
argument_list|,
name|diskResident
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchGroup
argument_list|<
name|Double
argument_list|>
name|group
range|:
name|groups
control|)
block|{
name|groupMap
operator|.
name|put
argument_list|(
name|group
operator|.
name|groupValue
argument_list|,
operator|new
name|GroupCount
argument_list|(
name|group
operator|.
name|groupValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|GroupCount
name|groupCount
init|=
name|groupMap
operator|.
name|get
argument_list|(
name|groupFieldSource
operator|.
name|getFloat
argument_list|(
name|doc
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupCount
operator|!=
literal|null
condition|)
block|{
name|groupCount
operator|.
name|uniqueValues
operator|.
name|add
argument_list|(
name|countFieldSource
operator|.
name|getFloat
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|Lng
specifier|static
class|class
name|Lng
extends|extends
name|NonSorted
argument_list|<
name|Long
argument_list|>
block|{
DECL|method|Lng
name|Lng
parameter_list|(
name|String
name|groupField
parameter_list|,
name|String
name|countField
parameter_list|,
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|Long
argument_list|>
argument_list|>
name|groups
parameter_list|,
name|boolean
name|diskResident
parameter_list|,
name|Type
name|valueType
parameter_list|)
block|{
name|super
argument_list|(
name|groupField
argument_list|,
name|countField
argument_list|,
name|diskResident
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchGroup
argument_list|<
name|Long
argument_list|>
name|group
range|:
name|groups
control|)
block|{
name|groupMap
operator|.
name|put
argument_list|(
name|group
operator|.
name|groupValue
argument_list|,
operator|new
name|GroupCount
argument_list|(
name|group
operator|.
name|groupValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|GroupCount
name|groupCount
init|=
name|groupMap
operator|.
name|get
argument_list|(
name|groupFieldSource
operator|.
name|getInt
argument_list|(
name|doc
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupCount
operator|!=
literal|null
condition|)
block|{
name|groupCount
operator|.
name|uniqueValues
operator|.
name|add
argument_list|(
name|countFieldSource
operator|.
name|getInt
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|BR
specifier|static
class|class
name|BR
extends|extends
name|NonSorted
argument_list|<
name|BytesRef
argument_list|>
block|{
DECL|field|spare
specifier|private
specifier|final
name|BytesRef
name|spare
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|method|BR
name|BR
parameter_list|(
name|String
name|groupField
parameter_list|,
name|String
name|countField
parameter_list|,
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|groups
parameter_list|,
name|boolean
name|diskResident
parameter_list|,
name|Type
name|valueType
parameter_list|)
block|{
name|super
argument_list|(
name|groupField
argument_list|,
name|countField
argument_list|,
name|diskResident
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
name|group
range|:
name|groups
control|)
block|{
name|groupMap
operator|.
name|put
argument_list|(
name|group
operator|.
name|groupValue
argument_list|,
operator|new
name|GroupCount
argument_list|(
name|group
operator|.
name|groupValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|GroupCount
name|groupCount
init|=
name|groupMap
operator|.
name|get
argument_list|(
name|groupFieldSource
operator|.
name|getBytes
argument_list|(
name|doc
argument_list|,
name|spare
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupCount
operator|!=
literal|null
condition|)
block|{
name|BytesRef
name|countValue
init|=
name|countFieldSource
operator|.
name|getBytes
argument_list|(
name|doc
argument_list|,
name|spare
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|groupCount
operator|.
name|uniqueValues
operator|.
name|contains
argument_list|(
name|countValue
argument_list|)
condition|)
block|{
name|groupCount
operator|.
name|uniqueValues
operator|.
name|add
argument_list|(
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|countValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|GroupCount
specifier|static
class|class
name|GroupCount
extends|extends
name|AbstractDistinctValuesCollector
operator|.
name|GroupCount
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
block|{
DECL|method|GroupCount
name|GroupCount
parameter_list|(
name|Comparable
argument_list|<
name|?
argument_list|>
name|groupValue
parameter_list|)
block|{
name|super
argument_list|(
name|groupValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|Sorted
specifier|static
specifier|abstract
class|class
name|Sorted
extends|extends
name|DVDistinctValuesCollector
argument_list|<
name|Sorted
operator|.
name|GroupCount
argument_list|>
block|{
DECL|field|ordSet
specifier|final
name|SentinelIntSet
name|ordSet
decl_stmt|;
DECL|field|groupCounts
specifier|final
name|GroupCount
name|groupCounts
index|[]
decl_stmt|;
DECL|field|groups
specifier|final
name|List
argument_list|<
name|GroupCount
argument_list|>
name|groups
init|=
operator|new
name|ArrayList
argument_list|<
name|GroupCount
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|groupFieldSource
name|DocValues
operator|.
name|SortedSource
name|groupFieldSource
decl_stmt|;
DECL|field|countFieldSource
name|DocValues
operator|.
name|SortedSource
name|countFieldSource
decl_stmt|;
DECL|method|Sorted
name|Sorted
parameter_list|(
name|String
name|groupField
parameter_list|,
name|String
name|countField
parameter_list|,
name|int
name|groupSize
parameter_list|,
name|boolean
name|diskResident
parameter_list|,
name|Type
name|valueType
parameter_list|)
block|{
name|super
argument_list|(
name|groupField
argument_list|,
name|countField
argument_list|,
name|diskResident
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
name|ordSet
operator|=
operator|new
name|SentinelIntSet
argument_list|(
name|groupSize
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|groupCounts
operator|=
operator|new
name|GroupCount
index|[
name|ordSet
operator|.
name|keys
operator|.
name|length
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getGroups
specifier|public
name|List
argument_list|<
name|GroupCount
argument_list|>
name|getGroups
parameter_list|()
block|{
return|return
name|groups
return|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|groupFieldSource
operator|=
name|retrieveSortedSource
argument_list|(
name|groupField
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|countFieldSource
operator|=
name|retrieveSortedSource
argument_list|(
name|countField
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|ordSet
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|retrieveSortedSource
specifier|private
name|DocValues
operator|.
name|SortedSource
name|retrieveSortedSource
parameter_list|(
name|String
name|field
parameter_list|,
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|DocValues
name|countFieldDv
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|docValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|countFieldDv
operator|!=
literal|null
condition|)
block|{
return|return
name|diskResident
condition|?
name|countFieldDv
operator|.
name|getDirectSource
argument_list|()
operator|.
name|asSortedSource
argument_list|()
else|:
name|countFieldDv
operator|.
name|getSource
argument_list|()
operator|.
name|asSortedSource
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|DocValues
operator|.
name|getDefaultSortedSource
argument_list|(
name|valueType
argument_list|,
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|BR
specifier|static
class|class
name|BR
extends|extends
name|Sorted
block|{
DECL|field|spare
specifier|final
name|BytesRef
name|spare
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|method|BR
name|BR
parameter_list|(
name|String
name|groupField
parameter_list|,
name|String
name|countField
parameter_list|,
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|searchGroups
parameter_list|,
name|boolean
name|diskResident
parameter_list|,
name|Type
name|valueType
parameter_list|)
block|{
name|super
argument_list|(
name|groupField
argument_list|,
name|countField
argument_list|,
name|searchGroups
operator|.
name|size
argument_list|()
argument_list|,
name|diskResident
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
name|group
range|:
name|searchGroups
control|)
block|{
name|this
operator|.
name|groups
operator|.
name|add
argument_list|(
operator|new
name|GroupCount
argument_list|(
name|group
operator|.
name|groupValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|slot
init|=
name|ordSet
operator|.
name|find
argument_list|(
name|groupFieldSource
operator|.
name|ord
argument_list|(
name|doc
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|slot
operator|<
literal|0
condition|)
block|{
return|return;
block|}
name|GroupCount
name|gc
init|=
name|groupCounts
index|[
name|slot
index|]
decl_stmt|;
name|int
name|countOrd
init|=
name|countFieldSource
operator|.
name|ord
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|doesNotContainsOrd
argument_list|(
name|countOrd
argument_list|,
name|gc
operator|.
name|ords
argument_list|)
condition|)
block|{
name|gc
operator|.
name|uniqueValues
operator|.
name|add
argument_list|(
name|countFieldSource
operator|.
name|getByOrd
argument_list|(
name|countOrd
argument_list|,
operator|new
name|BytesRef
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|gc
operator|.
name|ords
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|gc
operator|.
name|ords
argument_list|,
name|gc
operator|.
name|ords
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
name|gc
operator|.
name|ords
index|[
name|gc
operator|.
name|ords
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|countOrd
expr_stmt|;
if|if
condition|(
name|gc
operator|.
name|ords
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|gc
operator|.
name|ords
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doesNotContainsOrd
specifier|private
name|boolean
name|doesNotContainsOrd
parameter_list|(
name|int
name|ord
parameter_list|,
name|int
index|[]
name|ords
parameter_list|)
block|{
if|if
condition|(
name|ords
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|ords
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|ord
operator|!=
name|ords
index|[
literal|0
index|]
return|;
block|}
return|return
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|ords
argument_list|,
name|ord
argument_list|)
operator|<
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
for|for
control|(
name|GroupCount
name|group
range|:
name|groups
control|)
block|{
name|int
name|groupOrd
init|=
name|groupFieldSource
operator|.
name|getOrdByValue
argument_list|(
operator|(
name|BytesRef
operator|)
name|group
operator|.
name|groupValue
argument_list|,
name|spare
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupOrd
operator|<
literal|0
condition|)
block|{
continue|continue;
block|}
name|groupCounts
index|[
name|ordSet
operator|.
name|put
argument_list|(
name|groupOrd
argument_list|)
index|]
operator|=
name|group
expr_stmt|;
name|group
operator|.
name|ords
operator|=
operator|new
name|int
index|[
name|group
operator|.
name|uniqueValues
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|group
operator|.
name|ords
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Comparable
argument_list|<
name|?
argument_list|>
name|value
range|:
name|group
operator|.
name|uniqueValues
control|)
block|{
name|int
name|countOrd
init|=
name|countFieldSource
operator|.
name|getOrdByValue
argument_list|(
operator|(
name|BytesRef
operator|)
name|value
argument_list|,
name|spare
argument_list|)
decl_stmt|;
if|if
condition|(
name|countOrd
operator|>=
literal|0
condition|)
block|{
name|group
operator|.
name|ords
index|[
name|i
operator|++
index|]
operator|=
name|countOrd
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|class|GroupCount
specifier|static
class|class
name|GroupCount
extends|extends
name|AbstractDistinctValuesCollector
operator|.
name|GroupCount
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
block|{
DECL|field|ords
name|int
index|[]
name|ords
decl_stmt|;
DECL|method|GroupCount
name|GroupCount
parameter_list|(
name|Comparable
argument_list|<
name|?
argument_list|>
name|groupValue
parameter_list|)
block|{
name|super
argument_list|(
name|groupValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
