begin_unit
begin_package
DECL|package|org.apache.lucene.validation.ivyde
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|validation
operator|.
name|ivyde
package|;
end_package
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * Assists in the further separation of concerns between the view and the Ivy resolve report. The view looks at the  * IvyNode in a unique way that can lead to expensive operations if we do not achieve this separation.  *   * This class is copied from org/apache/ivyde/eclipse/resolvevisualizer/model/IvyNodeElement.java at   * https://svn.apache.org/repos/asf/ant/ivy/ivyde/trunk/org.apache.ivyde.eclipse.resolvevisualizer/src/  *  * Changes include: uncommenting generics and converting to diamond operators where appropriate;  * removing unnecessary casts; removing javadoc tags with no description; and adding a hashCode() implementation.  */
end_comment
begin_class
DECL|class|IvyNodeElement
specifier|public
class|class
name|IvyNodeElement
block|{
DECL|field|moduleRevisionId
specifier|private
name|ModuleRevisionId
name|moduleRevisionId
decl_stmt|;
DECL|field|evicted
specifier|private
name|boolean
name|evicted
init|=
literal|false
decl_stmt|;
DECL|field|depth
specifier|private
name|int
name|depth
init|=
name|Integer
operator|.
name|MAX_VALUE
operator|/
literal|10
decl_stmt|;
DECL|field|dependencies
specifier|private
name|Collection
argument_list|<
name|IvyNodeElement
argument_list|>
name|dependencies
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|callers
specifier|private
name|Collection
argument_list|<
name|IvyNodeElement
argument_list|>
name|callers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|conflicts
specifier|private
name|Collection
argument_list|<
name|IvyNodeElement
argument_list|>
name|conflicts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * The caller configurations that caused this node to be reached in the resolution, grouped by caller.    */
DECL|field|callerConfigurationMap
specifier|private
name|Map
argument_list|<
name|IvyNodeElement
argument_list|,
name|String
index|[]
argument_list|>
name|callerConfigurationMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * We try to avoid building the list of this nodes deep dependencies by storing them in this cache by depth level.    */
DECL|field|deepDependencyCache
specifier|private
name|IvyNodeElement
index|[]
name|deepDependencyCache
decl_stmt|;
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|IvyNodeElement
condition|)
block|{
name|IvyNodeElement
name|elem
init|=
operator|(
name|IvyNodeElement
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|elem
operator|.
name|getOrganization
argument_list|()
operator|.
name|equals
argument_list|(
name|getOrganization
argument_list|()
argument_list|)
operator|&&
name|elem
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|getName
argument_list|()
argument_list|)
operator|&&
name|elem
operator|.
name|getRevision
argument_list|()
operator|.
name|equals
argument_list|(
name|getRevision
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|result
operator|*
literal|31
operator|+
operator|(
literal|null
operator|==
name|getOrganization
argument_list|()
condition|?
literal|0
else|:
name|getOrganization
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|result
operator|*
literal|31
operator|+
operator|(
literal|null
operator|==
name|getName
argument_list|()
condition|?
literal|0
else|:
name|getName
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|result
operator|*
literal|31
operator|+
operator|(
literal|null
operator|==
name|getRevision
argument_list|()
condition|?
literal|0
else|:
name|getRevision
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getDependencies
specifier|public
name|IvyNodeElement
index|[]
name|getDependencies
parameter_list|()
block|{
return|return
name|dependencies
operator|.
name|toArray
argument_list|(
operator|new
name|IvyNodeElement
index|[
name|dependencies
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Recursive dependency retrieval    *    * @return The array of nodes that represents a node's immediate and transitive dependencies down to an arbitrary    *         depth.    */
DECL|method|getDeepDependencies
specifier|public
name|IvyNodeElement
index|[]
name|getDeepDependencies
parameter_list|()
block|{
if|if
condition|(
name|deepDependencyCache
operator|==
literal|null
condition|)
block|{
name|Collection
name|deepDependencies
init|=
name|getDeepDependencies
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|deepDependencyCache
operator|=
operator|(
name|IvyNodeElement
index|[]
operator|)
name|deepDependencies
operator|.
name|toArray
argument_list|(
operator|new
name|IvyNodeElement
index|[
name|deepDependencies
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|deepDependencyCache
return|;
block|}
comment|/**    * Recursive dependency retrieval    */
DECL|method|getDeepDependencies
specifier|private
name|Collection
argument_list|<
name|IvyNodeElement
argument_list|>
name|getDeepDependencies
parameter_list|(
name|IvyNodeElement
name|node
parameter_list|)
block|{
name|Collection
argument_list|<
name|IvyNodeElement
argument_list|>
name|deepDependencies
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|deepDependencies
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|IvyNodeElement
index|[]
name|directDependencies
init|=
name|node
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|directDependencies
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|deepDependencies
operator|.
name|addAll
argument_list|(
name|getDeepDependencies
argument_list|(
name|directDependencies
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|deepDependencies
return|;
block|}
comment|/**    * @return An array of configurations by which this module was resolved    */
DECL|method|getCallerConfigurations
specifier|public
name|String
index|[]
name|getCallerConfigurations
parameter_list|(
name|IvyNodeElement
name|caller
parameter_list|)
block|{
return|return
name|callerConfigurationMap
operator|.
name|get
argument_list|(
name|caller
argument_list|)
return|;
block|}
DECL|method|setCallerConfigurations
specifier|public
name|void
name|setCallerConfigurations
parameter_list|(
name|IvyNodeElement
name|caller
parameter_list|,
name|String
index|[]
name|configurations
parameter_list|)
block|{
name|callerConfigurationMap
operator|.
name|put
argument_list|(
name|caller
argument_list|,
name|configurations
argument_list|)
expr_stmt|;
block|}
DECL|method|getOrganization
specifier|public
name|String
name|getOrganization
parameter_list|()
block|{
return|return
name|moduleRevisionId
operator|.
name|getOrganisation
argument_list|()
return|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|moduleRevisionId
operator|.
name|getName
argument_list|()
return|;
block|}
DECL|method|getRevision
specifier|public
name|String
name|getRevision
parameter_list|()
block|{
return|return
name|moduleRevisionId
operator|.
name|getRevision
argument_list|()
return|;
block|}
DECL|method|isEvicted
specifier|public
name|boolean
name|isEvicted
parameter_list|()
block|{
return|return
name|evicted
return|;
block|}
DECL|method|setEvicted
specifier|public
name|void
name|setEvicted
parameter_list|(
name|boolean
name|evicted
parameter_list|)
block|{
name|this
operator|.
name|evicted
operator|=
name|evicted
expr_stmt|;
block|}
DECL|method|getDepth
specifier|public
name|int
name|getDepth
parameter_list|()
block|{
return|return
name|depth
return|;
block|}
comment|/**    * Set this node's depth and recursively update the node's children to relative to the new value.    */
DECL|method|setDepth
specifier|public
name|void
name|setDepth
parameter_list|(
name|int
name|depth
parameter_list|)
block|{
name|this
operator|.
name|depth
operator|=
name|depth
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|dependencies
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNodeElement
name|dependency
init|=
operator|(
name|IvyNodeElement
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|dependency
operator|.
name|setDepth
argument_list|(
name|depth
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getConflicts
specifier|public
name|IvyNodeElement
index|[]
name|getConflicts
parameter_list|()
block|{
return|return
name|conflicts
operator|.
name|toArray
argument_list|(
operator|new
name|IvyNodeElement
index|[
name|conflicts
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|setConflicts
specifier|public
name|void
name|setConflicts
parameter_list|(
name|Collection
name|conflicts
parameter_list|)
block|{
name|this
operator|.
name|conflicts
operator|=
name|conflicts
expr_stmt|;
block|}
DECL|method|getModuleRevisionId
specifier|public
name|ModuleRevisionId
name|getModuleRevisionId
parameter_list|()
block|{
return|return
name|moduleRevisionId
return|;
block|}
DECL|method|setModuleRevisionId
specifier|public
name|void
name|setModuleRevisionId
parameter_list|(
name|ModuleRevisionId
name|moduleRevisionId
parameter_list|)
block|{
name|this
operator|.
name|moduleRevisionId
operator|=
name|moduleRevisionId
expr_stmt|;
block|}
DECL|method|addCaller
specifier|public
name|void
name|addCaller
parameter_list|(
name|IvyNodeElement
name|caller
parameter_list|)
block|{
name|callers
operator|.
name|add
argument_list|(
name|caller
argument_list|)
expr_stmt|;
name|caller
operator|.
name|dependencies
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|getCallers
specifier|public
name|IvyNodeElement
index|[]
name|getCallers
parameter_list|()
block|{
return|return
name|callers
operator|.
name|toArray
argument_list|(
operator|new
name|IvyNodeElement
index|[
name|callers
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class
end_unit
