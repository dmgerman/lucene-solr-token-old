begin_unit
begin_package
DECL|package|org.apache.lucene.validation
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|validation
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|ClassReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Label
import|;
end_import
begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|ClassVisitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|FieldVisitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|MethodVisitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
import|;
end_import
begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
import|;
end_import
begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|AntClassLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Task
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|FileSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|Reference
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|Resource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|ResourceCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|resources
operator|.
name|FileResource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|resources
operator|.
name|Resources
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|resources
operator|.
name|FileResource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|resources
operator|.
name|StringResource
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Formatter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_comment
comment|/**  * Task to check if a set of class files contains calls to forbidden APIs  * from a given classpath and list of API signatures (either inline or as pointer to files).  * In contrast to other ANT tasks, this tool does only visit the given classpath  * and the system classloader. It uses the local classpath in preference to the system classpath  * (which violates the spec).  */
end_comment
begin_class
DECL|class|ForbiddenApisCheckTask
specifier|public
class|class
name|ForbiddenApisCheckTask
extends|extends
name|Task
block|{
DECL|field|classFiles
specifier|private
specifier|final
name|Resources
name|classFiles
init|=
operator|new
name|Resources
argument_list|()
decl_stmt|;
DECL|field|apiSignatures
specifier|private
specifier|final
name|Resources
name|apiSignatures
init|=
operator|new
name|Resources
argument_list|()
decl_stmt|;
DECL|field|classpath
specifier|private
name|Path
name|classpath
init|=
literal|null
decl_stmt|;
DECL|field|loader
name|ClassLoader
name|loader
init|=
literal|null
decl_stmt|;
DECL|field|classesToCheck
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ClassSignatureLookup
argument_list|>
name|classesToCheck
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ClassSignatureLookup
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|classpathClassCache
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ClassSignatureLookup
argument_list|>
name|classpathClassCache
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ClassSignatureLookup
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|forbiddenFields
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|forbiddenFields
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|forbiddenMethods
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|forbiddenMethods
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|forbiddenClasses
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|forbiddenClasses
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Reads a class (binary name) from the given {@link ClassLoader}. */
DECL|method|getClassFromClassLoader
name|ClassSignatureLookup
name|getClassFromClassLoader
parameter_list|(
specifier|final
name|String
name|clazz
parameter_list|)
throws|throws
name|BuildException
block|{
name|ClassSignatureLookup
name|c
init|=
name|classpathClassCache
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
try|try
block|{
specifier|final
name|InputStream
name|in
init|=
name|loader
operator|.
name|getResourceAsStream
argument_list|(
name|clazz
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|".class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Loading of class "
operator|+
name|clazz
operator|+
literal|" failed: Not found"
argument_list|)
throw|;
block|}
try|try
block|{
name|classpathClassCache
operator|.
name|put
argument_list|(
name|clazz
argument_list|,
name|c
operator|=
operator|new
name|ClassSignatureLookup
argument_list|(
operator|new
name|ClassReader
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Loading of class "
operator|+
name|clazz
operator|+
literal|" failed."
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
return|return
name|c
return|;
block|}
comment|/** Adds the method signature to the list of disallowed methods. The Signature is checked against the given ClassLoader. */
DECL|method|addSignature
specifier|private
name|void
name|addSignature
parameter_list|(
specifier|final
name|String
name|signature
parameter_list|)
throws|throws
name|BuildException
block|{
specifier|final
name|String
name|clazz
decl_stmt|,
name|field
decl_stmt|;
specifier|final
name|Method
name|method
decl_stmt|;
name|int
name|p
init|=
name|signature
operator|.
name|indexOf
argument_list|(
literal|'#'
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|>=
literal|0
condition|)
block|{
name|clazz
operator|=
name|signature
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
expr_stmt|;
specifier|final
name|String
name|s
init|=
name|signature
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
decl_stmt|;
name|p
operator|=
name|s
operator|.
name|indexOf
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|p
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Invalid method signature (method name missing): "
operator|+
name|signature
argument_list|)
throw|;
block|}
comment|// we ignore the return type, its just to match easier (so return type is void):
try|try
block|{
name|method
operator|=
name|Method
operator|.
name|getMethod
argument_list|(
literal|"void "
operator|+
name|s
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Invalid method signature: "
operator|+
name|signature
argument_list|)
throw|;
block|}
name|field
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|field
operator|=
name|s
expr_stmt|;
name|method
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|clazz
operator|=
name|signature
expr_stmt|;
name|method
operator|=
literal|null
expr_stmt|;
name|field
operator|=
literal|null
expr_stmt|;
block|}
comment|// check class& method/field signature, if it is really existent (in classpath), but we don't really load the class into JVM:
specifier|final
name|ClassSignatureLookup
name|c
init|=
name|getClassFromClassLoader
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
assert|assert
name|field
operator|==
literal|null
assert|;
comment|// list all methods with this signature:
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
specifier|final
name|Method
name|m
range|:
name|c
operator|.
name|methods
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getArgumentTypes
argument_list|()
argument_list|,
name|method
operator|.
name|getArgumentTypes
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|forbiddenMethods
operator|.
name|put
argument_list|(
name|c
operator|.
name|reader
operator|.
name|getClassName
argument_list|()
operator|+
literal|'\000'
operator|+
name|m
argument_list|,
name|signature
argument_list|)
expr_stmt|;
comment|// don't break when found, as there may be more covariant overrides!
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"No method found with following signature: "
operator|+
name|signature
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
assert|assert
name|method
operator|==
literal|null
assert|;
if|if
condition|(
operator|!
name|c
operator|.
name|fields
operator|.
name|contains
argument_list|(
name|field
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"No field found with following name: "
operator|+
name|signature
argument_list|)
throw|;
block|}
name|forbiddenFields
operator|.
name|put
argument_list|(
name|c
operator|.
name|reader
operator|.
name|getClassName
argument_list|()
operator|+
literal|'\000'
operator|+
name|field
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|field
operator|==
literal|null
operator|&&
name|method
operator|==
literal|null
assert|;
comment|// only add the signature as class name
name|forbiddenClasses
operator|.
name|put
argument_list|(
name|c
operator|.
name|reader
operator|.
name|getClassName
argument_list|()
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Reads a list of API signatures. Closes the Reader when done (on Exception, too)! */
DECL|method|parseApiFile
specifier|private
name|void
name|parseApiFile
parameter_list|(
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
name|reader
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|r
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
continue|continue;
name|addSignature
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Parses a class given as (FileSet) Resource */
DECL|method|loadClassFromResource
specifier|private
name|ClassReader
name|loadClassFromResource
parameter_list|(
specifier|final
name|Resource
name|res
parameter_list|)
throws|throws
name|BuildException
block|{
try|try
block|{
specifier|final
name|InputStream
name|stream
init|=
name|res
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
try|try
block|{
return|return
operator|new
name|ClassReader
argument_list|(
name|stream
argument_list|)
return|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"IO problem while reading class file "
operator|+
name|res
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/** Parses a class given as Resource and checks for valid method invocations */
DECL|method|checkClass
specifier|private
name|int
name|checkClass
parameter_list|(
specifier|final
name|ClassReader
name|reader
parameter_list|)
block|{
specifier|final
name|int
index|[]
name|violations
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
name|reader
operator|.
name|accept
argument_list|(
operator|new
name|ClassVisitor
argument_list|(
name|Opcodes
operator|.
name|ASM4
argument_list|)
block|{
specifier|final
name|String
name|className
init|=
name|Type
operator|.
name|getObjectType
argument_list|(
name|reader
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|.
name|getClassName
argument_list|()
decl_stmt|;
name|String
name|source
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|visitSource
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|debug
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MethodVisitor
name|visitMethod
parameter_list|(
name|int
name|access
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|String
name|signature
parameter_list|,
name|String
index|[]
name|exceptions
parameter_list|)
block|{
return|return
operator|new
name|MethodVisitor
argument_list|(
name|Opcodes
operator|.
name|ASM4
argument_list|)
block|{
specifier|private
name|int
name|lineNo
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|ClassSignatureLookup
name|lookupRelatedClass
parameter_list|(
name|String
name|internalName
parameter_list|)
block|{
name|ClassSignatureLookup
name|c
init|=
name|classesToCheck
operator|.
name|get
argument_list|(
name|internalName
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
try|try
block|{
name|c
operator|=
name|getClassFromClassLoader
argument_list|(
name|internalName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BuildException
name|be
parameter_list|)
block|{
comment|// we ignore lookup errors and simply ignore this related class
name|c
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
specifier|private
name|boolean
name|checkClassUse
parameter_list|(
name|String
name|owner
parameter_list|)
block|{
specifier|final
name|String
name|printout
init|=
name|forbiddenClasses
operator|.
name|get
argument_list|(
name|owner
argument_list|)
decl_stmt|;
if|if
condition|(
name|printout
operator|!=
literal|null
condition|)
block|{
name|log
argument_list|(
literal|"Forbidden class use: "
operator|+
name|printout
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|checkMethodAccess
parameter_list|(
name|String
name|owner
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
if|if
condition|(
name|checkClassUse
argument_list|(
name|owner
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
specifier|final
name|String
name|printout
init|=
name|forbiddenMethods
operator|.
name|get
argument_list|(
name|owner
operator|+
literal|'\000'
operator|+
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|printout
operator|!=
literal|null
condition|)
block|{
name|log
argument_list|(
literal|"Forbidden method invocation: "
operator|+
name|printout
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|final
name|ClassSignatureLookup
name|c
init|=
name|lookupRelatedClass
argument_list|(
name|owner
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
operator|!
name|c
operator|.
name|methods
operator|.
name|contains
argument_list|(
name|method
argument_list|)
condition|)
block|{
specifier|final
name|String
name|superName
init|=
name|c
operator|.
name|reader
operator|.
name|getSuperName
argument_list|()
decl_stmt|;
if|if
condition|(
name|superName
operator|!=
literal|null
operator|&&
name|checkMethodAccess
argument_list|(
name|superName
argument_list|,
name|method
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
specifier|final
name|String
index|[]
name|interfaces
init|=
name|c
operator|.
name|reader
operator|.
name|getInterfaces
argument_list|()
decl_stmt|;
if|if
condition|(
name|interfaces
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|intf
range|:
name|interfaces
control|)
block|{
if|if
condition|(
name|intf
operator|!=
literal|null
operator|&&
name|checkMethodAccess
argument_list|(
name|intf
argument_list|,
name|method
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|checkFieldAccess
parameter_list|(
name|String
name|owner
parameter_list|,
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|checkClassUse
argument_list|(
name|owner
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
specifier|final
name|String
name|printout
init|=
name|forbiddenFields
operator|.
name|get
argument_list|(
name|owner
operator|+
literal|'\000'
operator|+
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|printout
operator|!=
literal|null
condition|)
block|{
name|log
argument_list|(
literal|"Forbidden field access: "
operator|+
name|printout
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|final
name|ClassSignatureLookup
name|c
init|=
name|lookupRelatedClass
argument_list|(
name|owner
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
operator|!
name|c
operator|.
name|fields
operator|.
name|contains
argument_list|(
name|field
argument_list|)
condition|)
block|{
specifier|final
name|String
name|superName
init|=
name|c
operator|.
name|reader
operator|.
name|getSuperName
argument_list|()
decl_stmt|;
if|if
condition|(
name|superName
operator|!=
literal|null
operator|&&
name|checkFieldAccess
argument_list|(
name|superName
argument_list|,
name|field
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
specifier|final
name|String
index|[]
name|interfaces
init|=
name|c
operator|.
name|reader
operator|.
name|getInterfaces
argument_list|()
decl_stmt|;
if|if
condition|(
name|interfaces
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|intf
range|:
name|interfaces
control|)
block|{
if|if
condition|(
name|intf
operator|!=
literal|null
operator|&&
name|checkFieldAccess
argument_list|(
name|intf
argument_list|,
name|field
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitMethodInsn
parameter_list|(
name|int
name|opcode
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|)
block|{
if|if
condition|(
name|checkMethodAccess
argument_list|(
name|owner
argument_list|,
operator|new
name|Method
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
argument_list|)
condition|)
block|{
name|violations
index|[
literal|0
index|]
operator|++
expr_stmt|;
name|reportSourceAndLine
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitFieldInsn
parameter_list|(
name|int
name|opcode
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|)
block|{
if|if
condition|(
name|checkFieldAccess
argument_list|(
name|owner
argument_list|,
name|name
argument_list|)
condition|)
block|{
name|violations
index|[
literal|0
index|]
operator|++
expr_stmt|;
name|reportSourceAndLine
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|reportSourceAndLine
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"  in "
argument_list|)
operator|.
name|append
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|!=
literal|null
operator|&&
name|lineNo
operator|>=
literal|0
condition|)
block|{
operator|new
name|Formatter
argument_list|(
name|sb
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|format
argument_list|(
literal|" (%s:%d)"
argument_list|,
name|source
argument_list|,
name|lineNo
argument_list|)
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|log
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitLineNumber
parameter_list|(
name|int
name|lineNo
parameter_list|,
name|Label
name|start
parameter_list|)
block|{
name|this
operator|.
name|lineNo
operator|=
name|lineNo
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
argument_list|,
name|ClassReader
operator|.
name|SKIP_FRAMES
argument_list|)
expr_stmt|;
return|return
name|violations
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|BuildException
block|{
comment|// the checker is not compatible with JDK 1.8+ (changed class format: 52.0), don't fail just report warning:
try|try
block|{
name|Collections
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"emptySortedSet"
argument_list|)
expr_stmt|;
comment|// this is Java 8 :(
name|log
argument_list|(
literal|"Java 8 or later is currently not supported by this checker. Please run the checks with a previous JDK!"
argument_list|,
name|Project
operator|.
name|MSG_WARN
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nsme
parameter_list|)
block|{
comment|// ignore, we are fine!
block|}
name|AntClassLoader
name|antLoader
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|classpath
operator|!=
literal|null
condition|)
block|{
name|classpath
operator|.
name|setProject
argument_list|(
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|loader
operator|=
name|antLoader
operator|=
name|getProject
argument_list|()
operator|.
name|createClassLoader
argument_list|(
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
argument_list|,
name|classpath
argument_list|)
expr_stmt|;
comment|// force that loading from this class loader is done first, then parent is asked.
comment|// This violates spec, but prevents classes in any system classpath to be used if a local one is available:
name|antLoader
operator|.
name|setParentFirst
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|loader
operator|=
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
expr_stmt|;
block|}
name|classFiles
operator|.
name|setProject
argument_list|(
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
name|apiSignatures
operator|.
name|setProject
argument_list|(
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterator
argument_list|<
name|Resource
argument_list|>
name|iter
init|=
operator|(
name|Iterator
argument_list|<
name|Resource
argument_list|>
operator|)
name|apiSignatures
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"You need to supply at least one API signature definition through apiFile=,<apiFileSet/>, or inner text."
argument_list|)
throw|;
block|}
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Resource
name|r
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isExists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Resource does not exist: "
operator|+
name|r
argument_list|)
throw|;
block|}
if|if
condition|(
name|r
operator|instanceof
name|StringResource
condition|)
block|{
specifier|final
name|String
name|s
init|=
operator|(
operator|(
name|StringResource
operator|)
name|r
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
name|s
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|log
argument_list|(
literal|"Reading inline API signatures..."
argument_list|,
name|Project
operator|.
name|MSG_INFO
argument_list|)
expr_stmt|;
name|parseApiFile
argument_list|(
operator|new
name|StringReader
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
argument_list|(
literal|"Reading API signatures: "
operator|+
name|r
argument_list|,
name|Project
operator|.
name|MSG_INFO
argument_list|)
expr_stmt|;
name|parseApiFile
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|r
operator|.
name|getInputStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"IO problem while reading files with API signatures."
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
if|if
condition|(
name|forbiddenMethods
operator|.
name|isEmpty
argument_list|()
operator|&&
name|forbiddenClasses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"No API signatures found; use apiFile=,<apiFileSet/>, or inner text to define those!"
argument_list|)
throw|;
block|}
name|log
argument_list|(
literal|"Loading classes to check..."
argument_list|,
name|Project
operator|.
name|MSG_INFO
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterator
argument_list|<
name|Resource
argument_list|>
name|iter
init|=
operator|(
name|Iterator
argument_list|<
name|Resource
argument_list|>
operator|)
name|classFiles
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"There is no<fileset/> given or the fileset does not contain any class files to check."
argument_list|)
throw|;
block|}
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Resource
name|r
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isExists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Class file does not exist: "
operator|+
name|r
argument_list|)
throw|;
block|}
name|ClassReader
name|reader
init|=
name|loadClassFromResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|classesToCheck
operator|.
name|put
argument_list|(
name|reader
operator|.
name|getClassName
argument_list|()
argument_list|,
operator|new
name|ClassSignatureLookup
argument_list|(
name|reader
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|log
argument_list|(
literal|"Scanning for API signatures and dependencies..."
argument_list|,
name|Project
operator|.
name|MSG_INFO
argument_list|)
expr_stmt|;
name|int
name|errors
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|ClassSignatureLookup
name|c
range|:
name|classesToCheck
operator|.
name|values
argument_list|()
control|)
block|{
name|errors
operator|+=
name|checkClass
argument_list|(
name|c
operator|.
name|reader
argument_list|)
expr_stmt|;
block|}
name|log
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Scanned %d (and %d related) class file(s) for forbidden API invocations (in %.2fs), %d error(s)."
argument_list|,
name|classesToCheck
operator|.
name|size
argument_list|()
argument_list|,
name|classpathClassCache
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|/
literal|1000.0
argument_list|,
name|errors
argument_list|)
argument_list|,
name|errors
operator|>
literal|0
condition|?
name|Project
operator|.
name|MSG_ERR
else|:
name|Project
operator|.
name|MSG_INFO
argument_list|)
expr_stmt|;
if|if
condition|(
name|errors
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Check for forbidden API calls failed, see log."
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|loader
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|antLoader
operator|!=
literal|null
condition|)
name|antLoader
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|antLoader
operator|=
literal|null
expr_stmt|;
name|classesToCheck
operator|.
name|clear
argument_list|()
expr_stmt|;
name|classpathClassCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|forbiddenFields
operator|.
name|clear
argument_list|()
expr_stmt|;
name|forbiddenMethods
operator|.
name|clear
argument_list|()
expr_stmt|;
name|forbiddenClasses
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Set of class files to check */
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|ResourceCollection
name|rc
parameter_list|)
block|{
name|classFiles
operator|.
name|add
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
comment|/** A file with API signatures apiFile= attribute */
DECL|method|setApiFile
specifier|public
name|void
name|setApiFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|apiSignatures
operator|.
name|add
argument_list|(
operator|new
name|FileResource
argument_list|(
name|getProject
argument_list|()
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Set of files with API signatures as<apiFileSet/> nested element */
DECL|method|createApiFileSet
specifier|public
name|FileSet
name|createApiFileSet
parameter_list|()
block|{
specifier|final
name|FileSet
name|fs
init|=
operator|new
name|FileSet
argument_list|()
decl_stmt|;
name|fs
operator|.
name|setProject
argument_list|(
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
name|apiSignatures
operator|.
name|add
argument_list|(
name|fs
argument_list|)
expr_stmt|;
return|return
name|fs
return|;
block|}
comment|/** Support for API signatures list as nested text */
DECL|method|addText
specifier|public
name|void
name|addText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|apiSignatures
operator|.
name|add
argument_list|(
operator|new
name|StringResource
argument_list|(
name|getProject
argument_list|()
argument_list|,
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Classpath as classpath= attribute */
DECL|method|setClasspath
specifier|public
name|void
name|setClasspath
parameter_list|(
name|Path
name|classpath
parameter_list|)
block|{
name|createClasspath
argument_list|()
operator|.
name|append
argument_list|(
name|classpath
argument_list|)
expr_stmt|;
block|}
comment|/** Classpath as classpathRef= attribute */
DECL|method|setClasspathRef
specifier|public
name|void
name|setClasspathRef
parameter_list|(
name|Reference
name|r
parameter_list|)
block|{
name|createClasspath
argument_list|()
operator|.
name|setRefid
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
comment|/** Classpath as<classpath/> nested element */
DECL|method|createClasspath
specifier|public
name|Path
name|createClasspath
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|classpath
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|classpath
operator|=
operator|new
name|Path
argument_list|(
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|classpath
operator|.
name|createPath
argument_list|()
return|;
block|}
DECL|class|ClassSignatureLookup
specifier|static
specifier|final
class|class
name|ClassSignatureLookup
block|{
DECL|field|reader
specifier|public
specifier|final
name|ClassReader
name|reader
decl_stmt|;
DECL|field|methods
specifier|public
specifier|final
name|Set
argument_list|<
name|Method
argument_list|>
name|methods
decl_stmt|;
DECL|field|fields
specifier|public
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|fields
decl_stmt|;
DECL|method|ClassSignatureLookup
specifier|public
name|ClassSignatureLookup
parameter_list|(
specifier|final
name|ClassReader
name|reader
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|Method
argument_list|>
name|methods
init|=
operator|new
name|HashSet
argument_list|<
name|Method
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|fields
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|reader
operator|.
name|accept
argument_list|(
operator|new
name|ClassVisitor
argument_list|(
name|Opcodes
operator|.
name|ASM4
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|MethodVisitor
name|visitMethod
parameter_list|(
name|int
name|access
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|String
name|signature
parameter_list|,
name|String
index|[]
name|exceptions
parameter_list|)
block|{
specifier|final
name|Method
name|m
init|=
operator|new
name|Method
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
decl_stmt|;
name|methods
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|FieldVisitor
name|visitField
parameter_list|(
name|int
name|access
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|String
name|signature
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|ClassReader
operator|.
name|SKIP_CODE
operator||
name|ClassReader
operator|.
name|SKIP_DEBUG
operator||
name|ClassReader
operator|.
name|SKIP_FRAMES
argument_list|)
expr_stmt|;
name|this
operator|.
name|methods
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|methods
argument_list|)
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
