begin_unit
begin_package
DECL|package|org.apache.lucene.validation
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|validation
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Task
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|Mapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|Resource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|ResourceCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|resources
operator|.
name|FileResource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|resources
operator|.
name|Resources
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|util
operator|.
name|FileNameMapper
import|;
end_import
begin_comment
comment|/**  * An ANT task that verifies if JAR file have associated<tt>LICENSE</tt>  * and<tt>NOTICE</tt> files.   */
end_comment
begin_class
DECL|class|LicenseCheckTask
specifier|public
class|class
name|LicenseCheckTask
extends|extends
name|Task
block|{
comment|/**    * All JAR files to check.    */
DECL|field|jarResources
specifier|private
name|Resources
name|jarResources
init|=
operator|new
name|Resources
argument_list|()
decl_stmt|;
comment|/**    * License file mapper.    */
DECL|field|licenseMapper
specifier|private
name|FileNameMapper
name|licenseMapper
decl_stmt|;
comment|/**    * A logging level associated with verbose logging.    */
DECL|field|verboseLevel
specifier|private
name|int
name|verboseLevel
init|=
name|Project
operator|.
name|MSG_VERBOSE
decl_stmt|;
comment|/**    * Failure flag.    */
DECL|field|failures
specifier|private
name|boolean
name|failures
decl_stmt|;
comment|/**    * Adds a set of JAR resources to check.    */
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|ResourceCollection
name|rc
parameter_list|)
block|{
name|jarResources
operator|.
name|add
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds a license mapper.    */
DECL|method|addConfiguredLicenseMapper
specifier|public
name|void
name|addConfiguredLicenseMapper
parameter_list|(
name|Mapper
name|mapper
parameter_list|)
block|{
if|if
condition|(
name|licenseMapper
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Only one license mapper is allowed."
argument_list|)
throw|;
block|}
name|this
operator|.
name|licenseMapper
operator|=
name|mapper
operator|.
name|getImplementation
argument_list|()
expr_stmt|;
block|}
DECL|method|setVerbose
specifier|public
name|void
name|setVerbose
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
name|verboseLevel
operator|=
operator|(
name|verbose
condition|?
name|Project
operator|.
name|MSG_INFO
else|:
name|Project
operator|.
name|MSG_VERBOSE
operator|)
expr_stmt|;
block|}
comment|/**    * Execute the task.    */
annotation|@
name|Override
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|BuildException
block|{
if|if
condition|(
name|licenseMapper
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Expected an embedded<licenseMapper>."
argument_list|)
throw|;
block|}
name|jarResources
operator|.
name|setProject
argument_list|(
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
name|processJars
argument_list|()
expr_stmt|;
if|if
condition|(
name|failures
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"License check failed. Check the logs."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Process all JARs.    */
DECL|method|processJars
specifier|private
name|void
name|processJars
parameter_list|()
block|{
name|log
argument_list|(
literal|"Starting scan."
argument_list|,
name|verboseLevel
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterator
argument_list|<
name|Resource
argument_list|>
name|iter
init|=
operator|(
name|Iterator
argument_list|<
name|Resource
argument_list|>
operator|)
name|jarResources
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|checked
init|=
literal|0
decl_stmt|;
name|int
name|errors
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Resource
name|r
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isExists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"JAR resource does not exist: "
operator|+
name|r
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|r
operator|instanceof
name|FileResource
operator|)
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Only filesystem resource are supported: "
operator|+
name|r
operator|.
name|getName
argument_list|()
operator|+
literal|", was: "
operator|+
name|r
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|File
name|jarFile
init|=
operator|(
operator|(
name|FileResource
operator|)
name|r
operator|)
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|checkJarFile
argument_list|(
name|jarFile
argument_list|)
condition|)
block|{
name|errors
operator|++
expr_stmt|;
block|}
name|checked
operator|++
expr_stmt|;
block|}
name|log
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"Scanned %d JAR file(s) for licenses (in %.2fs.), %d error(s)."
argument_list|,
name|checked
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|/
literal|1000.0
argument_list|,
name|errors
argument_list|)
argument_list|,
name|errors
operator|>
literal|0
condition|?
name|Project
operator|.
name|MSG_ERR
else|:
name|Project
operator|.
name|MSG_INFO
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check a single JAR file.    */
DECL|method|checkJarFile
specifier|private
name|boolean
name|checkJarFile
parameter_list|(
name|File
name|jarFile
parameter_list|)
block|{
name|log
argument_list|(
literal|"Scanning: "
operator|+
name|jarFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|verboseLevel
argument_list|)
expr_stmt|;
comment|// Get the expected license path base from the mapper and search for license files.
name|Map
argument_list|<
name|File
argument_list|,
name|LicenseType
argument_list|>
name|foundLicenses
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|File
argument_list|,
name|LicenseType
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|expectedLocations
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|outer
label|:
for|for
control|(
name|String
name|mappedPath
range|:
name|licenseMapper
operator|.
name|mapFileName
argument_list|(
name|jarFile
operator|.
name|getPath
argument_list|()
argument_list|)
control|)
block|{
for|for
control|(
name|LicenseType
name|licenseType
range|:
name|LicenseType
operator|.
name|values
argument_list|()
control|)
block|{
name|File
name|licensePath
init|=
operator|new
name|File
argument_list|(
name|mappedPath
operator|+
name|licenseType
operator|.
name|licenseFileSuffix
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|licensePath
operator|.
name|exists
argument_list|()
condition|)
block|{
name|foundLicenses
operator|.
name|put
argument_list|(
name|licensePath
argument_list|,
name|licenseType
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|" FOUND "
operator|+
name|licenseType
operator|.
name|name
argument_list|()
operator|+
literal|" license at "
operator|+
name|licensePath
operator|.
name|getPath
argument_list|()
argument_list|,
name|verboseLevel
argument_list|)
expr_stmt|;
comment|// We could continue scanning here to detect duplicate associations?
break|break
name|outer
break|;
block|}
else|else
block|{
name|expectedLocations
operator|.
name|add
argument_list|(
name|licensePath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Check for NOTICE files.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|File
argument_list|,
name|LicenseType
argument_list|>
name|e
range|:
name|foundLicenses
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LicenseType
name|license
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|licensePath
init|=
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|String
name|baseName
init|=
name|licensePath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|licensePath
operator|.
name|length
argument_list|()
operator|-
name|license
operator|.
name|licenseFileSuffix
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|noticeFile
init|=
operator|new
name|File
argument_list|(
name|baseName
operator|+
name|license
operator|.
name|noticeFileSuffix
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|noticeFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
argument_list|(
literal|" FOUND NOTICE file at "
operator|+
name|noticeFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|verboseLevel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|license
operator|.
name|isNoticeRequired
argument_list|()
condition|)
block|{
name|this
operator|.
name|failures
operator|=
literal|true
expr_stmt|;
name|log
argument_list|(
literal|"MISSING NOTICE for the license file:\n  "
operator|+
name|licensePath
operator|+
literal|"\n  Expected location below:\n  "
operator|+
name|noticeFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// In case there is something missing, complain.
if|if
condition|(
name|foundLicenses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|failures
operator|=
literal|true
expr_stmt|;
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"MISSING LICENSE for the following file:\n  "
operator|+
name|jarFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"\n  Expected locations below:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|location
range|:
name|expectedLocations
control|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|"  => "
argument_list|)
operator|.
name|append
argument_list|(
name|location
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|log
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
