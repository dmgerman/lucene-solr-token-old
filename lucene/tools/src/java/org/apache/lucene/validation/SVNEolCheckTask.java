begin_unit
begin_package
DECL|package|org.apache.lucene.validation
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|validation
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Task
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|Resource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|ResourceCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|resources
operator|.
name|FileResource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|resources
operator|.
name|Resources
import|;
end_import
begin_comment
comment|/**  * Checks all files to ensure they have svn:eol-style, or  * have a binary svn:mime-type.  *<p>  * TODO: check that this value is actually correct, not just present.  *<p>  * WARNING: slow!  */
end_comment
begin_class
DECL|class|SVNEolCheckTask
specifier|public
class|class
name|SVNEolCheckTask
extends|extends
name|Task
block|{
DECL|field|files
specifier|private
specifier|final
name|Resources
name|files
init|=
operator|new
name|Resources
argument_list|()
decl_stmt|;
DECL|field|svnExecutable
specifier|private
name|String
name|svnExecutable
decl_stmt|;
comment|/** Set of files to check */
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|ResourceCollection
name|rc
parameter_list|)
block|{
name|files
operator|.
name|add
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
comment|/** svn.exe executable */
DECL|method|setSvnExecutable
specifier|public
name|void
name|setSvnExecutable
parameter_list|(
name|String
name|svnExecutable
parameter_list|)
block|{
name|this
operator|.
name|svnExecutable
operator|=
name|svnExecutable
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|BuildException
block|{
if|if
condition|(
name|svnExecutable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"svnExecutable parameter must be set!"
argument_list|)
throw|;
block|}
name|boolean
name|success
init|=
literal|true
decl_stmt|;
name|files
operator|.
name|setProject
argument_list|(
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Resource
argument_list|>
name|iter
init|=
operator|(
name|Iterator
argument_list|<
name|Resource
argument_list|>
operator|)
name|files
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|r
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|r
operator|instanceof
name|FileResource
operator|)
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Only filesystem resource are supported: "
operator|+
name|r
operator|.
name|getName
argument_list|()
operator|+
literal|", was: "
operator|+
name|r
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|File
name|f
init|=
operator|(
operator|(
name|FileResource
operator|)
name|r
operator|)
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cmd
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|add
argument_list|(
name|svnExecutable
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|add
argument_list|(
literal|"pget"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|add
argument_list|(
literal|"svn:eol-style"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|add
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|eolStyle
init|=
name|exec
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|eolStyle
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cmd
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|add
argument_list|(
name|svnExecutable
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|add
argument_list|(
literal|"pget"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|add
argument_list|(
literal|"svn:mime-type"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|add
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|binProp
init|=
name|exec
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|binProp
operator|.
name|startsWith
argument_list|(
literal|"application/"
argument_list|)
operator|&&
operator|!
name|binProp
operator|.
name|startsWith
argument_list|(
literal|"image/"
argument_list|)
condition|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
name|log
argument_list|(
name|r
operator|.
name|getName
argument_list|()
operator|+
literal|" missing svn:eol-style (or binary svn:mime-type)."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Some svn properties are missing"
argument_list|)
throw|;
block|}
block|}
DECL|method|exec
specifier|private
name|String
name|exec
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|cmd
parameter_list|)
throws|throws
name|BuildException
block|{
name|ProcessBuilder
name|pb
init|=
operator|new
name|ProcessBuilder
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
name|pb
operator|.
name|redirectErrorStream
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BufferedReader
name|r
init|=
literal|null
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|Process
name|p
init|=
name|pb
operator|.
name|start
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
name|p
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|r
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|ch
decl_stmt|;
while|while
condition|(
operator|(
name|ch
operator|=
name|r
operator|.
name|read
argument_list|()
operator|)
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|waitFor
argument_list|()
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{}
block|}
block|}
block|}
block|}
end_class
end_unit
