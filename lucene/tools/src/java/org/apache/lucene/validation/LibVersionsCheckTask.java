begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.validation
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|validation
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|LogOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ResolveReport
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|conflict
operator|.
name|NoConflictManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|dependencies
operator|.
name|InterpolatedProperties
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|validation
operator|.
name|ivyde
operator|.
name|IvyNodeElement
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|validation
operator|.
name|ivyde
operator|.
name|IvyNodeElementAdapter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Task
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|LogLevel
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|Resource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|ResourceCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|resources
operator|.
name|FileResource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|resources
operator|.
name|Resources
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|XMLReaderFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_comment
comment|/**  * An Ant task to verify that the '/org/name' keys in ivy-versions.properties  * are sorted lexically and are neither duplicates nor orphans, and that all  * dependencies in all ivy.xml files use rev="${/org/name}" format.  */
end_comment
begin_class
DECL|class|LibVersionsCheckTask
specifier|public
class|class
name|LibVersionsCheckTask
extends|extends
name|Task
block|{
DECL|field|IVY_XML_FILENAME
specifier|private
specifier|static
specifier|final
name|String
name|IVY_XML_FILENAME
init|=
literal|"ivy.xml"
decl_stmt|;
DECL|field|COORDINATE_KEY_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|COORDINATE_KEY_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(/([^/ \t\f]+)/([^=:/ \t\f]+))"
argument_list|)
decl_stmt|;
DECL|field|BLANK_OR_COMMENT_LINE_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|BLANK_OR_COMMENT_LINE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[ \t\f]*(?:[#!].*)?"
argument_list|)
decl_stmt|;
DECL|field|TRAILING_BACKSLASH_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|TRAILING_BACKSLASH_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[^\\\\]*(\\\\+)$"
argument_list|)
decl_stmt|;
DECL|field|LEADING_WHITESPACE_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|LEADING_WHITESPACE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[ \t\f]+(.*)"
argument_list|)
decl_stmt|;
DECL|field|WHITESPACE_GOODSTUFF_WHITESPACE_BACKSLASH_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|WHITESPACE_GOODSTUFF_WHITESPACE_BACKSLASH_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[ \t\f]*(.*?)(?:(?<!\\\\)[ \t\f]*)?\\\\"
argument_list|)
decl_stmt|;
DECL|field|TRAILING_WHITESPACE_BACKSLASH_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|TRAILING_WHITESPACE_BACKSLASH_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(.*?)(?:(?<!\\\\)[ \t\f]*)?\\\\"
argument_list|)
decl_stmt|;
DECL|field|MODULE_NAME_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|MODULE_NAME_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\smodule\\s*=\\s*[\"']([^\"']+)[\"']"
argument_list|)
decl_stmt|;
DECL|field|MODULE_DIRECTORY_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|MODULE_DIRECTORY_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*[/\\\\]((?:lucene|solr)[/\\\\].*)[/\\\\].*"
argument_list|)
decl_stmt|;
DECL|field|ivy
specifier|private
name|Ivy
name|ivy
decl_stmt|;
comment|/**    * All ivy.xml files to check.    */
DECL|field|ivyXmlResources
specifier|private
name|Resources
name|ivyXmlResources
init|=
operator|new
name|Resources
argument_list|()
decl_stmt|;
comment|/**    * Centralized Ivy versions properties file: ivy-versions.properties    */
DECL|field|centralizedVersionsFile
specifier|private
name|File
name|centralizedVersionsFile
decl_stmt|;
comment|/**    * Centralized Ivy ignore conflicts file: ivy-ignore-conflicts.properties    */
DECL|field|ignoreConflictsFile
specifier|private
name|File
name|ignoreConflictsFile
decl_stmt|;
comment|/**    * Ivy settings file: top-level-ivy-settings.xml    */
DECL|field|topLevelIvySettingsFile
specifier|private
name|File
name|topLevelIvySettingsFile
decl_stmt|;
comment|/**    * Location of common build dir: lucene/build/    */
DECL|field|commonBuildDir
specifier|private
name|File
name|commonBuildDir
decl_stmt|;
comment|/**    * Location of ivy cache resolution directory.    */
DECL|field|ivyResolutionCacheDir
specifier|private
name|File
name|ivyResolutionCacheDir
decl_stmt|;
comment|/**    * Artifact lock strategy that Ivy should use.    */
DECL|field|ivyLockStrategy
specifier|private
name|String
name|ivyLockStrategy
decl_stmt|;
comment|/**    * A logging level associated with verbose logging.    */
DECL|field|verboseLevel
specifier|private
name|int
name|verboseLevel
init|=
name|Project
operator|.
name|MSG_VERBOSE
decl_stmt|;
comment|/**    * All /org/name keys found in ivy-versions.properties,    * mapped to info about direct dependence and what would    * be conflicting indirect dependencies if Lucene/Solr    * were to use transitive dependencies.    */
DECL|field|directDependencies
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Dependency
argument_list|>
name|directDependencies
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * All /org/name keys found in ivy-ignore-conflicts.properties,    * mapped to the set of indirect dependency versions that will    * be ignored, i.e. not trigger a conflict.    */
DECL|field|ignoreConflictVersions
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|ignoreConflictVersions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|class|Dependency
specifier|private
class|class
name|Dependency
block|{
DECL|field|org
name|String
name|org
decl_stmt|;
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|directVersion
name|String
name|directVersion
decl_stmt|;
DECL|field|latestVersion
name|String
name|latestVersion
decl_stmt|;
DECL|field|directlyReferenced
name|boolean
name|directlyReferenced
init|=
literal|false
decl_stmt|;
DECL|field|conflictLocations
name|LinkedHashMap
argument_list|<
name|IvyNodeElement
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|conflictLocations
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// dependency path -> moduleNames
DECL|method|Dependency
name|Dependency
parameter_list|(
name|String
name|org
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|directVersion
parameter_list|)
block|{
name|this
operator|.
name|org
operator|=
name|org
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|directVersion
operator|=
name|directVersion
expr_stmt|;
block|}
block|}
comment|/**    * Adds a set of ivy.xml resources to check.    */
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|ResourceCollection
name|rc
parameter_list|)
block|{
name|ivyXmlResources
operator|.
name|add
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
DECL|method|setVerbose
specifier|public
name|void
name|setVerbose
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
name|verboseLevel
operator|=
operator|(
name|verbose
condition|?
name|Project
operator|.
name|MSG_INFO
else|:
name|Project
operator|.
name|MSG_VERBOSE
operator|)
expr_stmt|;
block|}
DECL|method|setCentralizedVersionsFile
specifier|public
name|void
name|setCentralizedVersionsFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|centralizedVersionsFile
operator|=
name|file
expr_stmt|;
block|}
DECL|method|setTopLevelIvySettingsFile
specifier|public
name|void
name|setTopLevelIvySettingsFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|topLevelIvySettingsFile
operator|=
name|file
expr_stmt|;
block|}
DECL|method|setIvyResolutionCacheDir
specifier|public
name|void
name|setIvyResolutionCacheDir
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|ivyResolutionCacheDir
operator|=
name|dir
expr_stmt|;
block|}
DECL|method|setIvyLockStrategy
specifier|public
name|void
name|setIvyLockStrategy
parameter_list|(
name|String
name|strategy
parameter_list|)
block|{
name|this
operator|.
name|ivyLockStrategy
operator|=
name|strategy
expr_stmt|;
block|}
DECL|method|setCommonBuildDir
specifier|public
name|void
name|setCommonBuildDir
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|commonBuildDir
operator|=
name|file
expr_stmt|;
block|}
DECL|method|setIgnoreConflictsFile
specifier|public
name|void
name|setIgnoreConflictsFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|ignoreConflictsFile
operator|=
name|file
expr_stmt|;
block|}
comment|/**    * Execute the task.    */
annotation|@
name|Override
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|BuildException
block|{
name|log
argument_list|(
literal|"Starting scan."
argument_list|,
name|verboseLevel
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|setupIvy
argument_list|()
expr_stmt|;
name|int
name|numErrors
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|verifySortedCoordinatesPropertiesFile
argument_list|(
name|centralizedVersionsFile
argument_list|)
condition|)
block|{
operator|++
name|numErrors
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|verifySortedCoordinatesPropertiesFile
argument_list|(
name|ignoreConflictsFile
argument_list|)
condition|)
block|{
operator|++
name|numErrors
expr_stmt|;
block|}
name|collectDirectDependencies
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|collectVersionConflictsToIgnore
argument_list|()
condition|)
block|{
operator|++
name|numErrors
expr_stmt|;
block|}
name|int
name|numChecked
init|=
literal|0
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterator
argument_list|<
name|Resource
argument_list|>
name|iter
init|=
operator|(
name|Iterator
argument_list|<
name|Resource
argument_list|>
operator|)
name|ivyXmlResources
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Resource
name|resource
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|resource
operator|.
name|isExists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Resource does not exist: "
operator|+
name|resource
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|resource
operator|instanceof
name|FileResource
operator|)
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Only filesystem resources are supported: "
operator|+
name|resource
operator|.
name|getName
argument_list|()
operator|+
literal|", was: "
operator|+
name|resource
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|File
name|ivyXmlFile
init|=
operator|(
operator|(
name|FileResource
operator|)
name|resource
operator|)
operator|.
name|getFile
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|checkIvyXmlFile
argument_list|(
name|ivyXmlFile
argument_list|)
condition|)
block|{
operator|++
name|numErrors
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|resolveTransitively
argument_list|(
name|ivyXmlFile
argument_list|)
condition|)
block|{
operator|++
name|numErrors
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|findLatestConflictVersions
argument_list|()
condition|)
block|{
operator|++
name|numErrors
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Exception reading file "
operator|+
name|ivyXmlFile
operator|.
name|getPath
argument_list|()
operator|+
literal|" - "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
operator|++
name|numChecked
expr_stmt|;
block|}
name|log
argument_list|(
literal|"Checking for orphans in "
operator|+
name|centralizedVersionsFile
operator|.
name|getName
argument_list|()
argument_list|,
name|verboseLevel
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Dependency
argument_list|>
name|entry
range|:
name|directDependencies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|coordinateKey
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|directlyReferenced
condition|)
block|{
name|log
argument_list|(
literal|"ORPHAN coordinate key '"
operator|+
name|coordinateKey
operator|+
literal|"' in "
operator|+
name|centralizedVersionsFile
operator|.
name|getName
argument_list|()
operator|+
literal|" is not found in any "
operator|+
name|IVY_XML_FILENAME
operator|+
literal|" file."
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
operator|++
name|numErrors
expr_stmt|;
block|}
block|}
name|int
name|numConflicts
init|=
name|emitConflicts
argument_list|()
decl_stmt|;
name|int
name|messageLevel
init|=
name|numErrors
operator|>
literal|0
condition|?
name|Project
operator|.
name|MSG_ERR
else|:
name|Project
operator|.
name|MSG_INFO
decl_stmt|;
name|log
argument_list|(
literal|"Checked that "
operator|+
name|centralizedVersionsFile
operator|.
name|getName
argument_list|()
operator|+
literal|" and "
operator|+
name|ignoreConflictsFile
operator|.
name|getName
argument_list|()
operator|+
literal|" have lexically sorted '/org/name' keys and no duplicates or orphans."
argument_list|,
name|messageLevel
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Scanned "
operator|+
name|numChecked
operator|+
literal|" "
operator|+
name|IVY_XML_FILENAME
operator|+
literal|" files for rev=\"${/org/name}\" format."
argument_list|,
name|messageLevel
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Found "
operator|+
name|numConflicts
operator|+
literal|" indirect dependency version conflicts."
argument_list|)
expr_stmt|;
name|log
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Completed in %.2fs., %d error(s)."
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|/
literal|1000.0
argument_list|,
name|numErrors
argument_list|)
argument_list|,
name|messageLevel
argument_list|)
expr_stmt|;
if|if
condition|(
name|numConflicts
operator|>
literal|0
operator|||
name|numErrors
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Lib versions check failed. Check the logs."
argument_list|)
throw|;
block|}
block|}
DECL|method|findLatestConflictVersions
specifier|private
name|boolean
name|findLatestConflictVersions
parameter_list|()
block|{
name|boolean
name|success
init|=
literal|true
decl_stmt|;
name|StringBuilder
name|latestIvyXml
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|latestIvyXml
operator|.
name|append
argument_list|(
literal|"<ivy-module version=\"2.0\">\n"
argument_list|)
expr_stmt|;
name|latestIvyXml
operator|.
name|append
argument_list|(
literal|"<info organisation=\"org.apache.lucene\" module=\"core-tools-find-latest-revision\"/>\n"
argument_list|)
expr_stmt|;
name|latestIvyXml
operator|.
name|append
argument_list|(
literal|"<configurations>\n"
argument_list|)
expr_stmt|;
name|latestIvyXml
operator|.
name|append
argument_list|(
literal|"<conf name=\"default\" transitive=\"false\"/>\n"
argument_list|)
expr_stmt|;
name|latestIvyXml
operator|.
name|append
argument_list|(
literal|"</configurations>\n"
argument_list|)
expr_stmt|;
name|latestIvyXml
operator|.
name|append
argument_list|(
literal|"<dependencies>\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Dependency
argument_list|>
name|directDependency
range|:
name|directDependencies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Dependency
name|dependency
init|=
name|directDependency
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|dependency
operator|.
name|conflictLocations
operator|.
name|entrySet
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|latestIvyXml
operator|.
name|append
argument_list|(
literal|"<dependency org=\""
argument_list|)
expr_stmt|;
name|latestIvyXml
operator|.
name|append
argument_list|(
name|dependency
operator|.
name|org
argument_list|)
expr_stmt|;
name|latestIvyXml
operator|.
name|append
argument_list|(
literal|"\" name=\""
argument_list|)
expr_stmt|;
name|latestIvyXml
operator|.
name|append
argument_list|(
name|dependency
operator|.
name|name
argument_list|)
expr_stmt|;
name|latestIvyXml
operator|.
name|append
argument_list|(
literal|"\" rev=\"latest.release\" conf=\"default->*\"/>\n"
argument_list|)
expr_stmt|;
block|}
name|latestIvyXml
operator|.
name|append
argument_list|(
literal|"</dependencies>\n"
argument_list|)
expr_stmt|;
name|latestIvyXml
operator|.
name|append
argument_list|(
literal|"</ivy-module>\n"
argument_list|)
expr_stmt|;
name|File
name|buildDir
init|=
operator|new
name|File
argument_list|(
name|commonBuildDir
argument_list|,
literal|"ivy-transitive-resolve"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|buildDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|buildDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Could not create temp directory "
operator|+
name|buildDir
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
name|File
name|findLatestIvyXmlFile
init|=
operator|new
name|File
argument_list|(
name|buildDir
argument_list|,
literal|"find.latest.conflicts.ivy.xml"
argument_list|)
decl_stmt|;
try|try
block|{
try|try
init|(
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|findLatestIvyXmlFile
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|latestIvyXml
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ResolveOptions
name|options
init|=
operator|new
name|ResolveOptions
argument_list|()
decl_stmt|;
name|options
operator|.
name|setDownload
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Download only module descriptors, not artifacts
name|options
operator|.
name|setTransitive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Resolve only direct dependencies
name|options
operator|.
name|setUseCacheOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Download the internet!
name|options
operator|.
name|setOutputReport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Don't print to the console
name|options
operator|.
name|setLog
argument_list|(
name|LogOptions
operator|.
name|LOG_QUIET
argument_list|)
expr_stmt|;
comment|// Don't log to the console
name|options
operator|.
name|setConfs
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|)
expr_stmt|;
comment|// Resolve all configurations
name|ResolveReport
name|resolveReport
init|=
name|ivy
operator|.
name|resolve
argument_list|(
name|findLatestIvyXmlFile
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|IvyNodeElement
name|root
init|=
name|IvyNodeElementAdapter
operator|.
name|adapt
argument_list|(
name|resolveReport
argument_list|)
decl_stmt|;
for|for
control|(
name|IvyNodeElement
name|element
range|:
name|root
operator|.
name|getDependencies
argument_list|()
control|)
block|{
name|String
name|coordinate
init|=
literal|"/"
operator|+
name|element
operator|.
name|getOrganization
argument_list|()
operator|+
literal|"/"
operator|+
name|element
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Dependency
name|dependency
init|=
name|directDependencies
operator|.
name|get
argument_list|(
name|coordinate
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|dependency
condition|)
block|{
name|log
argument_list|(
literal|"ERROR: the following coordinate key does not appear in "
operator|+
name|centralizedVersionsFile
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|coordinate
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|dependency
operator|.
name|latestVersion
operator|=
name|element
operator|.
name|getRevision
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
argument_list|(
literal|"Exception writing to "
operator|+
name|findLatestIvyXmlFile
operator|.
name|getPath
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|log
argument_list|(
literal|"Exception parsing filename "
operator|+
name|findLatestIvyXmlFile
operator|.
name|getPath
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
comment|/**    * Collects indirect dependency version conflicts to ignore     * in ivy-ignore-conflicts.properties, and also checks for orphans    * (coordinates not included in ivy-versions.properties).    *     * Returns true if no orphans are found.    */
DECL|method|collectVersionConflictsToIgnore
specifier|private
name|boolean
name|collectVersionConflictsToIgnore
parameter_list|()
block|{
name|log
argument_list|(
literal|"Checking for orphans in "
operator|+
name|ignoreConflictsFile
operator|.
name|getName
argument_list|()
argument_list|,
name|verboseLevel
argument_list|)
expr_stmt|;
name|boolean
name|orphansFound
init|=
literal|false
decl_stmt|;
name|InterpolatedProperties
name|properties
init|=
operator|new
name|InterpolatedProperties
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|inputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|ignoreConflictsFile
argument_list|)
init|;
name|Reader
name|reader
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|properties
operator|.
name|load
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Exception reading "
operator|+
name|ignoreConflictsFile
operator|+
literal|": "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|Object
name|obj
range|:
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|coordinate
init|=
operator|(
name|String
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|COORDINATE_KEY_PATTERN
operator|.
name|matcher
argument_list|(
name|coordinate
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|directDependencies
operator|.
name|containsKey
argument_list|(
name|coordinate
argument_list|)
condition|)
block|{
name|orphansFound
operator|=
literal|true
expr_stmt|;
name|log
argument_list|(
literal|"ORPHAN coordinate key '"
operator|+
name|coordinate
operator|+
literal|"' in "
operator|+
name|ignoreConflictsFile
operator|.
name|getName
argument_list|()
operator|+
literal|" is not found in "
operator|+
name|centralizedVersionsFile
operator|.
name|getName
argument_list|()
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|versionsToIgnore
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|coordinate
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ignore
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|versionsToIgnore
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\s*,\\s*|\\s+"
argument_list|)
argument_list|)
decl_stmt|;
name|ignoreConflictVersions
operator|.
name|put
argument_list|(
name|coordinate
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|ignore
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|!
name|orphansFound
return|;
block|}
DECL|method|collectDirectDependencies
specifier|private
name|void
name|collectDirectDependencies
parameter_list|()
block|{
name|InterpolatedProperties
name|properties
init|=
operator|new
name|InterpolatedProperties
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|inputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|centralizedVersionsFile
argument_list|)
init|;
name|Reader
name|reader
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|properties
operator|.
name|load
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Exception reading "
operator|+
name|centralizedVersionsFile
operator|+
literal|": "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|Object
name|obj
range|:
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|coordinate
init|=
operator|(
name|String
operator|)
name|obj
decl_stmt|;
name|Matcher
name|matcher
init|=
name|COORDINATE_KEY_PATTERN
operator|.
name|matcher
argument_list|(
name|coordinate
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|org
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|String
name|directVersion
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|coordinate
argument_list|)
decl_stmt|;
name|Dependency
name|dependency
init|=
operator|new
name|Dependency
argument_list|(
name|org
argument_list|,
name|name
argument_list|,
name|directVersion
argument_list|)
decl_stmt|;
name|directDependencies
operator|.
name|put
argument_list|(
name|coordinate
argument_list|,
name|dependency
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Transitively resolves all dependencies in the given ivy.xml file,    * looking for indirect dependencies with versions that conflict    * with those of direct dependencies.  Dependency conflict when a    * direct dependency's version is older than that of an indirect    * dependency with the same /org/name.    *     * Returns true if no version conflicts are found and no resolution    * errors occurred, false otherwise.    */
DECL|method|resolveTransitively
specifier|private
name|boolean
name|resolveTransitively
parameter_list|(
name|File
name|ivyXmlFile
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|true
decl_stmt|;
name|ResolveOptions
name|options
init|=
operator|new
name|ResolveOptions
argument_list|()
decl_stmt|;
name|options
operator|.
name|setDownload
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Download only module descriptors, not artifacts
name|options
operator|.
name|setTransitive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Resolve transitively, if not already specified in the ivy.xml file
name|options
operator|.
name|setUseCacheOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Download the internet!
name|options
operator|.
name|setOutputReport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Don't print to the console
name|options
operator|.
name|setLog
argument_list|(
name|LogOptions
operator|.
name|LOG_QUIET
argument_list|)
expr_stmt|;
comment|// Don't log to the console
name|options
operator|.
name|setConfs
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|)
expr_stmt|;
comment|// Resolve all configurations
comment|// Rewrite the ivy.xml, replacing all 'transitive="false"' with 'transitive="true"'
comment|// The Ivy API is file-based, so we have to write the result to the filesystem.
name|String
name|moduleName
init|=
literal|"unknown"
decl_stmt|;
name|String
name|ivyXmlContent
init|=
name|xmlToString
argument_list|(
name|ivyXmlFile
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|MODULE_NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|ivyXmlContent
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|moduleName
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|ivyXmlContent
operator|=
name|ivyXmlContent
operator|.
name|replaceAll
argument_list|(
literal|"\\btransitive\\s*=\\s*[\"']false[\"']"
argument_list|,
literal|"transitive=\"true\""
argument_list|)
expr_stmt|;
name|File
name|transitiveIvyXmlFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|buildDir
init|=
operator|new
name|File
argument_list|(
name|commonBuildDir
argument_list|,
literal|"ivy-transitive-resolve"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|buildDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|buildDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Could not create temp directory "
operator|+
name|buildDir
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
name|matcher
operator|=
name|MODULE_DIRECTORY_PATTERN
operator|.
name|matcher
argument_list|(
name|ivyXmlFile
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Unknown ivy.xml module directory: "
operator|+
name|ivyXmlFile
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|moduleDirPrefix
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"[/\\\\]"
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
name|transitiveIvyXmlFile
operator|=
operator|new
name|File
argument_list|(
name|buildDir
argument_list|,
literal|"transitive."
operator|+
name|moduleDirPrefix
operator|+
literal|".ivy.xml"
argument_list|)
expr_stmt|;
try|try
init|(
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|transitiveIvyXmlFile
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|ivyXmlContent
argument_list|)
expr_stmt|;
block|}
name|ResolveReport
name|resolveReport
init|=
name|ivy
operator|.
name|resolve
argument_list|(
name|transitiveIvyXmlFile
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|IvyNodeElement
name|root
init|=
name|IvyNodeElementAdapter
operator|.
name|adapt
argument_list|(
name|resolveReport
argument_list|)
decl_stmt|;
for|for
control|(
name|IvyNodeElement
name|directDependency
range|:
name|root
operator|.
name|getDependencies
argument_list|()
control|)
block|{
name|String
name|coordinate
init|=
literal|"/"
operator|+
name|directDependency
operator|.
name|getOrganization
argument_list|()
operator|+
literal|"/"
operator|+
name|directDependency
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Dependency
name|dependency
init|=
name|directDependencies
operator|.
name|get
argument_list|(
name|coordinate
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|dependency
condition|)
block|{
name|log
argument_list|(
literal|"ERROR: the following coordinate key does not appear in "
operator|+
name|centralizedVersionsFile
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|coordinate
argument_list|)
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|dependency
operator|.
name|directlyReferenced
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|collectConflicts
argument_list|(
name|directDependency
argument_list|,
name|directDependency
argument_list|,
name|moduleName
argument_list|)
condition|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
decl||
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|transitiveIvyXmlFile
condition|)
block|{
name|log
argument_list|(
literal|"Exception reading "
operator|+
name|transitiveIvyXmlFile
operator|.
name|getPath
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
comment|/**    * Recursively finds indirect dependencies that have a version conflict with a direct dependency.    * Returns true if one or more conflicts are found, false otherwise    */
DECL|method|collectConflicts
specifier|private
name|boolean
name|collectConflicts
parameter_list|(
name|IvyNodeElement
name|root
parameter_list|,
name|IvyNodeElement
name|parent
parameter_list|,
name|String
name|moduleName
parameter_list|)
block|{
name|boolean
name|conflicts
init|=
literal|false
decl_stmt|;
for|for
control|(
name|IvyNodeElement
name|child
range|:
name|parent
operator|.
name|getDependencies
argument_list|()
control|)
block|{
name|String
name|coordinate
init|=
literal|"/"
operator|+
name|child
operator|.
name|getOrganization
argument_list|()
operator|+
literal|"/"
operator|+
name|child
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Dependency
name|dependency
init|=
name|directDependencies
operator|.
name|get
argument_list|(
name|coordinate
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|dependency
condition|)
block|{
comment|// Ignore this indirect dependency if it's not also a direct dependency
name|String
name|indirectVersion
init|=
name|child
operator|.
name|getRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|isConflict
argument_list|(
name|coordinate
argument_list|,
name|dependency
operator|.
name|directVersion
argument_list|,
name|indirectVersion
argument_list|)
condition|)
block|{
name|conflicts
operator|=
literal|true
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|moduleNames
init|=
name|dependency
operator|.
name|conflictLocations
operator|.
name|get
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|moduleNames
condition|)
block|{
name|moduleNames
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|dependency
operator|.
name|conflictLocations
operator|.
name|put
argument_list|(
name|root
argument_list|,
name|moduleNames
argument_list|)
expr_stmt|;
block|}
name|moduleNames
operator|.
name|add
argument_list|(
name|moduleName
argument_list|)
expr_stmt|;
block|}
name|conflicts
operator||=
name|collectConflicts
argument_list|(
name|root
argument_list|,
name|child
argument_list|,
name|moduleName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|conflicts
return|;
block|}
comment|/**    * Copy-pasted from Ivy's     * org.apache.ivy.plugins.latest.LatestRevisionStrategy    * with minor modifications    */
DECL|field|SPECIAL_MEANINGS
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|SPECIAL_MEANINGS
decl_stmt|;
static|static
block|{
name|SPECIAL_MEANINGS
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|SPECIAL_MEANINGS
operator|.
name|put
argument_list|(
literal|"dev"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|SPECIAL_MEANINGS
operator|.
name|put
argument_list|(
literal|"rc"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|SPECIAL_MEANINGS
operator|.
name|put
argument_list|(
literal|"final"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copy-pasted from Ivy's     * org.apache.ivy.plugins.latest.LatestRevisionStrategy.MridComparator    * with minor modifications    */
DECL|class|LatestVersionComparator
specifier|private
specifier|static
class|class
name|LatestVersionComparator
implements|implements
name|Comparator
argument_list|<
name|String
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|rev1
parameter_list|,
name|String
name|rev2
parameter_list|)
block|{
name|rev1
operator|=
name|rev1
operator|.
name|replaceAll
argument_list|(
literal|"([a-zA-Z])(\\d)"
argument_list|,
literal|"$1.$2"
argument_list|)
expr_stmt|;
name|rev1
operator|=
name|rev1
operator|.
name|replaceAll
argument_list|(
literal|"(\\d)([a-zA-Z])"
argument_list|,
literal|"$1.$2"
argument_list|)
expr_stmt|;
name|rev2
operator|=
name|rev2
operator|.
name|replaceAll
argument_list|(
literal|"([a-zA-Z])(\\d)"
argument_list|,
literal|"$1.$2"
argument_list|)
expr_stmt|;
name|rev2
operator|=
name|rev2
operator|.
name|replaceAll
argument_list|(
literal|"(\\d)([a-zA-Z])"
argument_list|,
literal|"$1.$2"
argument_list|)
expr_stmt|;
name|String
index|[]
name|parts1
init|=
name|rev1
operator|.
name|split
argument_list|(
literal|"[-._+]"
argument_list|)
decl_stmt|;
name|String
index|[]
name|parts2
init|=
name|rev2
operator|.
name|split
argument_list|(
literal|"[-._+]"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|parts1
operator|.
name|length
operator|&&
name|i
operator|<
name|parts2
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|parts1
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|parts2
index|[
name|i
index|]
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|boolean
name|is1Number
init|=
name|isNumber
argument_list|(
name|parts1
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|boolean
name|is2Number
init|=
name|isNumber
argument_list|(
name|parts2
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|is1Number
operator|&&
operator|!
name|is2Number
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|is2Number
operator|&&
operator|!
name|is1Number
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|is1Number
operator|&&
name|is2Number
condition|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|parts1
index|[
name|i
index|]
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|parts2
index|[
name|i
index|]
argument_list|)
argument_list|)
return|;
block|}
comment|// both are strings, we compare them taking into account special meaning
name|Integer
name|sm1
init|=
name|SPECIAL_MEANINGS
operator|.
name|get
argument_list|(
name|parts1
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
name|Integer
name|sm2
init|=
name|SPECIAL_MEANINGS
operator|.
name|get
argument_list|(
name|parts2
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sm1
operator|!=
literal|null
condition|)
block|{
name|sm2
operator|=
name|sm2
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|sm2
expr_stmt|;
return|return
name|sm1
operator|.
name|compareTo
argument_list|(
name|sm2
argument_list|)
return|;
block|}
if|if
condition|(
name|sm2
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
operator|.
name|compareTo
argument_list|(
name|sm2
argument_list|)
return|;
block|}
return|return
name|parts1
index|[
name|i
index|]
operator|.
name|compareTo
argument_list|(
name|parts2
index|[
name|i
index|]
argument_list|)
return|;
block|}
if|if
condition|(
name|i
operator|<
name|parts1
operator|.
name|length
condition|)
block|{
return|return
name|isNumber
argument_list|(
name|parts1
index|[
name|i
index|]
argument_list|)
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|i
operator|<
name|parts2
operator|.
name|length
condition|)
block|{
return|return
name|isNumber
argument_list|(
name|parts2
index|[
name|i
index|]
argument_list|)
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|field|IS_NUMBER
specifier|private
specifier|static
specifier|final
name|Pattern
name|IS_NUMBER
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\d+"
argument_list|)
decl_stmt|;
DECL|method|isNumber
specifier|private
specifier|static
name|boolean
name|isNumber
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|IS_NUMBER
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
block|}
DECL|field|LATEST_VERSION_COMPARATOR
specifier|private
specifier|static
name|LatestVersionComparator
name|LATEST_VERSION_COMPARATOR
init|=
operator|new
name|LatestVersionComparator
argument_list|()
decl_stmt|;
comment|/**    * Returns true if directVersion is less than indirectVersion, and     * coordinate=indirectVersion is not present in ivy-ignore-conflicts.properties.     */
DECL|method|isConflict
specifier|private
name|boolean
name|isConflict
parameter_list|(
name|String
name|coordinate
parameter_list|,
name|String
name|directVersion
parameter_list|,
name|String
name|indirectVersion
parameter_list|)
block|{
name|boolean
name|isConflict
init|=
name|LATEST_VERSION_COMPARATOR
operator|.
name|compare
argument_list|(
name|directVersion
argument_list|,
name|indirectVersion
argument_list|)
operator|<
literal|0
decl_stmt|;
if|if
condition|(
name|isConflict
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|ignoredVersions
init|=
name|ignoreConflictVersions
operator|.
name|get
argument_list|(
name|coordinate
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|ignoredVersions
operator|&&
name|ignoredVersions
operator|.
name|contains
argument_list|(
name|indirectVersion
argument_list|)
condition|)
block|{
name|isConflict
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|isConflict
return|;
block|}
comment|/**    * Returns the number of direct dependencies in conflict with indirect    * dependencies.    */
DECL|method|emitConflicts
specifier|private
name|int
name|emitConflicts
parameter_list|()
block|{
name|int
name|conflicts
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Dependency
argument_list|>
name|directDependency
range|:
name|directDependencies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|coordinate
init|=
name|directDependency
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|IvyNodeElement
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|entrySet
init|=
name|directDependency
operator|.
name|getValue
argument_list|()
operator|.
name|conflictLocations
operator|.
name|entrySet
argument_list|()
decl_stmt|;
if|if
condition|(
name|entrySet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
operator|++
name|conflicts
expr_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|IvyNodeElement
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|first
init|=
name|entrySet
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|notPrinted
init|=
name|entrySet
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"VERSION CONFLICT: transitive dependency in module(s) "
argument_list|)
expr_stmt|;
name|boolean
name|isFirst
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|moduleName
range|:
name|first
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|isFirst
condition|)
block|{
name|isFirst
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|moduleName
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|":\n"
argument_list|)
expr_stmt|;
name|IvyNodeElement
name|element
init|=
name|first
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|element
operator|.
name|getOrganization
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|element
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|element
operator|.
name|getRevision
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|emitConflict
argument_list|(
name|builder
argument_list|,
name|coordinate
argument_list|,
name|first
operator|.
name|getKey
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|notPrinted
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"... and "
argument_list|)
operator|.
name|append
argument_list|(
name|notPrinted
argument_list|)
operator|.
name|append
argument_list|(
literal|" more\n"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|builder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|log
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|conflicts
return|;
block|}
DECL|method|emitConflict
specifier|private
name|boolean
name|emitConflict
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|String
name|conflictCoordinate
parameter_list|,
name|IvyNodeElement
name|parent
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
for|for
control|(
name|IvyNodeElement
name|child
range|:
name|parent
operator|.
name|getDependencies
argument_list|()
control|)
block|{
name|String
name|indirectCoordinate
init|=
literal|"/"
operator|+
name|child
operator|.
name|getOrganization
argument_list|()
operator|+
literal|"/"
operator|+
name|child
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|conflictCoordinate
operator|.
name|equals
argument_list|(
name|indirectCoordinate
argument_list|)
condition|)
block|{
name|Dependency
name|dependency
init|=
name|directDependencies
operator|.
name|get
argument_list|(
name|conflictCoordinate
argument_list|)
decl_stmt|;
name|String
name|directVersion
init|=
name|dependency
operator|.
name|directVersion
decl_stmt|;
if|if
condition|(
name|isConflict
argument_list|(
name|conflictCoordinate
argument_list|,
name|directVersion
argument_list|,
name|child
operator|.
name|getRevision
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|depth
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"+-- "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|indirectCoordinate
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|child
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"<<< Conflict (direct="
argument_list|)
operator|.
name|append
argument_list|(
name|directVersion
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", latest="
argument_list|)
operator|.
name|append
argument_list|(
name|dependency
operator|.
name|latestVersion
argument_list|)
operator|.
name|append
argument_list|(
literal|")\n"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|hasConflicts
argument_list|(
name|conflictCoordinate
argument_list|,
name|child
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|depth
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"+-- "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|indirectCoordinate
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|child
operator|.
name|getRevision
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|emitConflict
argument_list|(
name|builder
argument_list|,
name|conflictCoordinate
argument_list|,
name|child
argument_list|,
name|depth
operator|+
literal|1
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|hasConflicts
specifier|private
name|boolean
name|hasConflicts
parameter_list|(
name|String
name|conflictCoordinate
parameter_list|,
name|IvyNodeElement
name|parent
parameter_list|)
block|{
comment|// the element itself will never be in conflict, since its coordinate is different
for|for
control|(
name|IvyNodeElement
name|child
range|:
name|parent
operator|.
name|getDependencies
argument_list|()
control|)
block|{
name|String
name|indirectCoordinate
init|=
literal|"/"
operator|+
name|child
operator|.
name|getOrganization
argument_list|()
operator|+
literal|"/"
operator|+
name|child
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|conflictCoordinate
operator|.
name|equals
argument_list|(
name|indirectCoordinate
argument_list|)
condition|)
block|{
name|Dependency
name|dependency
init|=
name|directDependencies
operator|.
name|get
argument_list|(
name|conflictCoordinate
argument_list|)
decl_stmt|;
if|if
condition|(
name|isConflict
argument_list|(
name|conflictCoordinate
argument_list|,
name|dependency
operator|.
name|directVersion
argument_list|,
name|child
operator|.
name|getRevision
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|hasConflicts
argument_list|(
name|conflictCoordinate
argument_list|,
name|child
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|xmlToString
specifier|private
name|String
name|xmlToString
parameter_list|(
name|File
name|ivyXmlFile
parameter_list|)
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
block|{
name|StreamSource
name|inputSource
init|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|ivyXmlFile
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Transformer
name|serializer
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|transform
argument_list|(
name|inputSource
argument_list|,
operator|new
name|StreamResult
argument_list|(
name|writer
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Exception reading "
operator|+
name|ivyXmlFile
operator|.
name|getPath
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|setupIvy
specifier|private
name|void
name|setupIvy
parameter_list|()
block|{
name|IvySettings
name|ivySettings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
try|try
block|{
name|ivySettings
operator|.
name|setVariable
argument_list|(
literal|"common.build.dir"
argument_list|,
name|commonBuildDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|ivySettings
operator|.
name|setVariable
argument_list|(
literal|"ivy.exclude.types"
argument_list|,
literal|"source|javadoc"
argument_list|)
expr_stmt|;
name|ivySettings
operator|.
name|setVariable
argument_list|(
literal|"ivy.resolution-cache.dir"
argument_list|,
name|ivyResolutionCacheDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|ivySettings
operator|.
name|setVariable
argument_list|(
literal|"ivy.lock-strategy"
argument_list|,
name|ivyLockStrategy
argument_list|)
expr_stmt|;
name|ivySettings
operator|.
name|setVariable
argument_list|(
literal|"ivysettings.xml"
argument_list|,
name|getProject
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ivysettings.xml"
argument_list|)
argument_list|)
expr_stmt|;
comment|// nested settings file
name|ivySettings
operator|.
name|setBaseDir
argument_list|(
name|commonBuildDir
argument_list|)
expr_stmt|;
name|ivySettings
operator|.
name|setDefaultConflictManager
argument_list|(
operator|new
name|NoConflictManager
argument_list|()
argument_list|)
expr_stmt|;
name|ivy
operator|=
name|Ivy
operator|.
name|newInstance
argument_list|(
name|ivySettings
argument_list|)
expr_stmt|;
name|ivy
operator|.
name|configure
argument_list|(
name|topLevelIvySettingsFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Exception reading "
operator|+
name|topLevelIvySettingsFile
operator|.
name|getPath
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns true if the "/org/name" coordinate keys in the given    * properties file are lexically sorted and are not duplicates.    */
DECL|method|verifySortedCoordinatesPropertiesFile
specifier|private
name|boolean
name|verifySortedCoordinatesPropertiesFile
parameter_list|(
name|File
name|coordinatePropertiesFile
parameter_list|)
block|{
name|log
argument_list|(
literal|"Checking for lexically sorted non-duplicated '/org/name' keys in: "
operator|+
name|coordinatePropertiesFile
argument_list|,
name|verboseLevel
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|true
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
name|String
name|currentKey
init|=
literal|null
decl_stmt|;
name|String
name|previousKey
init|=
literal|null
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
operator|new
name|FileInputStream
argument_list|(
name|coordinatePropertiesFile
argument_list|)
init|;
name|Reader
name|reader
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|stream
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
init|;
name|BufferedReader
name|bufferedReader
operator|=
operator|new
name|BufferedReader
argument_list|(
name|reader
argument_list|)
init|)
block|{
while|while
condition|(
literal|null
operator|!=
operator|(
name|line
operator|=
name|readLogicalPropertiesLine
argument_list|(
name|bufferedReader
argument_list|)
operator|)
condition|)
block|{
specifier|final
name|Matcher
name|keyMatcher
init|=
name|COORDINATE_KEY_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|keyMatcher
operator|.
name|lookingAt
argument_list|()
condition|)
block|{
continue|continue;
comment|// Ignore keys that don't look like "/org/name"
block|}
name|currentKey
operator|=
name|keyMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|previousKey
condition|)
block|{
name|int
name|comparison
init|=
name|currentKey
operator|.
name|compareTo
argument_list|(
name|previousKey
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|comparison
condition|)
block|{
name|log
argument_list|(
literal|"DUPLICATE coordinate key '"
operator|+
name|currentKey
operator|+
literal|"' in "
operator|+
name|coordinatePropertiesFile
operator|.
name|getName
argument_list|()
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|comparison
operator|<
literal|0
condition|)
block|{
name|log
argument_list|(
literal|"OUT-OF-ORDER coordinate key '"
operator|+
name|currentKey
operator|+
literal|"' in "
operator|+
name|coordinatePropertiesFile
operator|.
name|getName
argument_list|()
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|previousKey
operator|=
name|currentKey
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Exception reading "
operator|+
name|coordinatePropertiesFile
operator|.
name|getPath
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|success
return|;
block|}
comment|/**    * Builds up logical {@link java.util.Properties} lines, composed of one non-blank,    * non-comment initial line, either:    *     * 1. without a non-escaped trailing slash; or    * 2. with a non-escaped trailing slash, followed by    *    zero or more lines with a non-escaped trailing slash, followed by    *    one or more lines without a non-escaped trailing slash    *    * All leading non-escaped whitespace and trailing non-escaped whitespace +    * non-escaped slash are trimmed from each line before concatenating.    *     * After composing the logical line, escaped characters are un-escaped.    *     * null is returned if there are no lines left to read.     */
DECL|method|readLogicalPropertiesLine
specifier|private
name|String
name|readLogicalPropertiesLine
parameter_list|(
name|BufferedReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StringBuilder
name|logicalLine
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|line
decl_stmt|;
do|do
block|{
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|line
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
do|while
condition|(
name|BLANK_OR_COMMENT_LINE_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
do|;
name|Matcher
name|backslashMatcher
init|=
name|TRAILING_BACKSLASH_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
comment|// Check for a non-escaped backslash
if|if
condition|(
name|backslashMatcher
operator|.
name|find
argument_list|()
operator|&&
literal|1
operator|==
operator|(
name|backslashMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|length
argument_list|()
operator|%
literal|2
operator|)
condition|)
block|{
specifier|final
name|Matcher
name|firstLineMatcher
init|=
name|TRAILING_WHITESPACE_BACKSLASH_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstLineMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|logicalLine
operator|.
name|append
argument_list|(
name|firstLineMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// trim trailing backslash and any preceding whitespace
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
while|while
condition|(
literal|null
operator|!=
name|line
operator|&&
operator|(
name|backslashMatcher
operator|=
name|TRAILING_BACKSLASH_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
operator|)
operator|.
name|find
argument_list|()
operator|&&
literal|1
operator|==
operator|(
name|backslashMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|length
argument_list|()
operator|%
literal|2
operator|)
condition|)
block|{
comment|// Trim leading whitespace, the trailing backslash and any preceding whitespace
specifier|final
name|Matcher
name|goodStuffMatcher
init|=
name|WHITESPACE_GOODSTUFF_WHITESPACE_BACKSLASH_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|goodStuffMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|logicalLine
operator|.
name|append
argument_list|(
name|goodStuffMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|line
condition|)
block|{
comment|// line can't have a non-escaped trailing backslash
specifier|final
name|Matcher
name|leadingWhitespaceMatcher
init|=
name|LEADING_WHITESPACE_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|leadingWhitespaceMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|line
operator|=
name|leadingWhitespaceMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// trim leading whitespace
block|}
name|logicalLine
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logicalLine
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
comment|// trim non-escaped leading whitespace
specifier|final
name|Matcher
name|leadingWhitespaceMatcher
init|=
name|LEADING_WHITESPACE_PATTERN
operator|.
name|matcher
argument_list|(
name|logicalLine
argument_list|)
decl_stmt|;
specifier|final
name|CharSequence
name|leadingWhitespaceStripped
init|=
name|leadingWhitespaceMatcher
operator|.
name|matches
argument_list|()
condition|?
name|leadingWhitespaceMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
else|:
name|logicalLine
decl_stmt|;
comment|// unescape all chars in the logical line
name|StringBuilder
name|output
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numChars
init|=
name|leadingWhitespaceStripped
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|numChars
operator|-
literal|1
condition|;
operator|++
name|pos
control|)
block|{
name|char
name|ch
init|=
name|leadingWhitespaceStripped
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'\\'
condition|)
block|{
name|ch
operator|=
name|leadingWhitespaceStripped
operator|.
name|charAt
argument_list|(
operator|++
name|pos
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numChars
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|append
argument_list|(
name|leadingWhitespaceStripped
operator|.
name|charAt
argument_list|(
name|numChars
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|output
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Check a single ivy.xml file for dependencies' versions in rev="${/org/name}"    * format.  Returns false if problems are found, true otherwise.    */
DECL|method|checkIvyXmlFile
specifier|private
name|boolean
name|checkIvyXmlFile
parameter_list|(
name|File
name|ivyXmlFile
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|SAXException
throws|,
name|IOException
block|{
name|log
argument_list|(
literal|"Scanning: "
operator|+
name|ivyXmlFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|verboseLevel
argument_list|)
expr_stmt|;
name|XMLReader
name|xmlReader
init|=
name|XMLReaderFactory
operator|.
name|createXMLReader
argument_list|()
decl_stmt|;
name|DependencyRevChecker
name|revChecker
init|=
operator|new
name|DependencyRevChecker
argument_list|(
name|ivyXmlFile
argument_list|)
decl_stmt|;
name|xmlReader
operator|.
name|setContentHandler
argument_list|(
name|revChecker
argument_list|)
expr_stmt|;
name|xmlReader
operator|.
name|setErrorHandler
argument_list|(
name|revChecker
argument_list|)
expr_stmt|;
name|xmlReader
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
name|ivyXmlFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|!
name|revChecker
operator|.
name|fail
return|;
block|}
DECL|class|DependencyRevChecker
specifier|private
class|class
name|DependencyRevChecker
extends|extends
name|DefaultHandler
block|{
DECL|field|ivyXmlFile
specifier|private
specifier|final
name|File
name|ivyXmlFile
decl_stmt|;
DECL|field|tags
specifier|private
specifier|final
name|Stack
argument_list|<
name|String
argument_list|>
name|tags
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|fail
specifier|public
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
DECL|method|DependencyRevChecker
specifier|public
name|DependencyRevChecker
parameter_list|(
name|File
name|ivyXmlFile
parameter_list|)
block|{
name|this
operator|.
name|ivyXmlFile
operator|=
name|ivyXmlFile
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startElement
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"dependency"
argument_list|)
operator|&&
name|insideDependenciesTag
argument_list|()
condition|)
block|{
name|String
name|org
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"org"
argument_list|)
decl_stmt|;
name|boolean
name|foundAllAttributes
init|=
literal|true
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|org
condition|)
block|{
name|log
argument_list|(
literal|"MISSING 'org' attribute on<dependency> in "
operator|+
name|ivyXmlFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
name|foundAllAttributes
operator|=
literal|false
expr_stmt|;
block|}
name|String
name|name
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|name
condition|)
block|{
name|log
argument_list|(
literal|"MISSING 'name' attribute on<dependency> in "
operator|+
name|ivyXmlFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
name|foundAllAttributes
operator|=
literal|false
expr_stmt|;
block|}
name|String
name|rev
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"rev"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|rev
condition|)
block|{
name|log
argument_list|(
literal|"MISSING 'rev' attribute on<dependency> in "
operator|+
name|ivyXmlFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
name|foundAllAttributes
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|foundAllAttributes
condition|)
block|{
name|String
name|coordinateKey
init|=
literal|"/"
operator|+
name|org
operator|+
literal|'/'
operator|+
name|name
decl_stmt|;
name|String
name|expectedRev
init|=
literal|"${"
operator|+
name|coordinateKey
operator|+
literal|'}'
decl_stmt|;
if|if
condition|(
operator|!
name|rev
operator|.
name|equals
argument_list|(
name|expectedRev
argument_list|)
condition|)
block|{
name|log
argument_list|(
literal|"BAD<dependency> 'rev' attribute value '"
operator|+
name|rev
operator|+
literal|"' - expected '"
operator|+
name|expectedRev
operator|+
literal|"'"
operator|+
literal|" in "
operator|+
name|ivyXmlFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|directDependencies
operator|.
name|containsKey
argument_list|(
name|coordinateKey
argument_list|)
condition|)
block|{
name|log
argument_list|(
literal|"MISSING key '"
operator|+
name|coordinateKey
operator|+
literal|"' in "
operator|+
name|centralizedVersionsFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|tags
operator|.
name|push
argument_list|(
name|localName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|endElement
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
name|tags
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
DECL|method|insideDependenciesTag
specifier|private
name|boolean
name|insideDependenciesTag
parameter_list|()
block|{
return|return
name|tags
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|&&
name|tags
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"ivy-module"
argument_list|)
operator|&&
name|tags
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"dependencies"
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
