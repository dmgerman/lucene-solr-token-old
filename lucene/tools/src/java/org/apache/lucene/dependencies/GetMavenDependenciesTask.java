begin_unit
begin_package
DECL|package|org.apache.lucene.dependencies
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|dependencies
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Task
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|Resource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|ResourceCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|resources
operator|.
name|FileResource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|resources
operator|.
name|Resources
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import
begin_comment
comment|/**  * An Ant task to verify that the '/org/name' keys in ivy-versions.properties  * are sorted lexically and are neither duplicates nor orphans, and that all  * dependencies in all ivy.xml files use rev="${/org/name}" format.  */
end_comment
begin_class
DECL|class|GetMavenDependenciesTask
specifier|public
class|class
name|GetMavenDependenciesTask
extends|extends
name|Task
block|{
DECL|field|PROPERTY_PREFIX_FROM_IVY_XML_FILE_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|PROPERTY_PREFIX_FROM_IVY_XML_FILE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[/\\\\](lucene|solr)[/\\\\](?:(?:contrib|(analysis)|(example))[/\\\\])?([^/\\\\]+)[/\\\\]ivy\\.xml"
argument_list|)
decl_stmt|;
DECL|field|COORDINATE_KEY_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|COORDINATE_KEY_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"/([^/]+)/([^/]+)"
argument_list|)
decl_stmt|;
DECL|field|MODULE_DEPENDENCIES_COORDINATE_KEY_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|MODULE_DEPENDENCIES_COORDINATE_KEY_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(.*?)(\\.test)?\\.dependencies"
argument_list|)
decl_stmt|;
comment|// lucene/build/core/classes/java
DECL|field|COMPILATION_OUTPUT_DIRECTORY_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|COMPILATION_OUTPUT_DIRECTORY_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(lucene|solr)/build/(?:contrib/)?(.*)/classes/(?:java|test)"
argument_list|)
decl_stmt|;
comment|// Local:   lucene/build/analysis/common/lucene-analyzers-common-5.0-SNAPSHOT.jar
comment|// Jenkins: lucene/build/analysis/common/lucene-analyzers-common-5.0-2013-10-31_18-52-24.jar
DECL|field|INTERNAL_JAR_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|INTERNAL_JAR_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*(lucene|solr)([^/]*?)-\\d[-._\\d]*(?:-SNAPSHOT)?\\.jar"
argument_list|)
decl_stmt|;
DECL|field|PROPERTY_REFERENCE_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|PROPERTY_REFERENCE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\$\\{([^}]+)\\}"
argument_list|)
decl_stmt|;
DECL|field|UNWANTED_INTERNAL_DEPENDENCIES
specifier|private
specifier|static
specifier|final
name|String
name|UNWANTED_INTERNAL_DEPENDENCIES
init|=
literal|"/(?:test-)?lib/|test-framework/classes/java|/test-files|/resources"
decl_stmt|;
DECL|field|SHARED_EXTERNAL_DEPENDENCIES_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|SHARED_EXTERNAL_DEPENDENCIES_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"((?:solr|lucene)/(?!test-framework).*)/((?:test-)?)lib/"
argument_list|)
decl_stmt|;
DECL|field|DEPENDENCY_MANAGEMENT_PROPERTY
specifier|private
specifier|static
specifier|final
name|String
name|DEPENDENCY_MANAGEMENT_PROPERTY
init|=
literal|"lucene.solr.dependency.management"
decl_stmt|;
DECL|field|IVY_USER_DIR_PROPERTY
specifier|private
specifier|static
specifier|final
name|String
name|IVY_USER_DIR_PROPERTY
init|=
literal|"ivy.default.ivy.user.dir"
decl_stmt|;
DECL|field|allProperties
specifier|private
specifier|static
specifier|final
name|Properties
name|allProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
DECL|field|modulesWithSeparateCompileAndTestPOMs
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|modulesWithSeparateCompileAndTestPOMs
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|optionalExternalDependencies
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|optionalExternalDependencies
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
comment|// Add modules here that have split compile and test POMs
comment|// - they need compile-scope deps to also be test-scope deps.
name|modulesWithSeparateCompileAndTestPOMs
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"lucene-core"
argument_list|,
literal|"lucene-codecs"
argument_list|,
literal|"solr-core"
argument_list|,
literal|"solr-solrj"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add external dependencies here that should be optional (i.e., not invoke Maven's transitive dep mechanism).
comment|// Format is "groupId:artifactId"
name|optionalExternalDependencies
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"org.slf4j:jcl-over-slf4j"
argument_list|,
literal|"org.slf4j:jul-to-slf4j"
argument_list|,
literal|"org.slf4j:slf4j-api"
argument_list|,
literal|"org.slf4j:slf4j-log4j12"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|xpath
specifier|private
specifier|final
name|XPath
name|xpath
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXPath
argument_list|()
decl_stmt|;
DECL|field|internalCompileScopeDependencies
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|internalCompileScopeDependencies
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|nonJarDependencies
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|nonJarDependencies
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|dependencyClassifiers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|dependencyClassifiers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|interModuleExternalCompileScopeDependencies
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|interModuleExternalCompileScopeDependencies
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|interModuleExternalTestScopeDependencies
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|interModuleExternalTestScopeDependencies
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|allExternalDependencies
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|ExternalDependency
argument_list|>
argument_list|>
name|allExternalDependencies
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|ExternalDependency
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|documentBuilder
specifier|private
specifier|final
name|DocumentBuilder
name|documentBuilder
decl_stmt|;
DECL|field|ivyCacheDir
specifier|private
name|File
name|ivyCacheDir
decl_stmt|;
comment|/**    * All ivy.xml files to get external dependencies from.    */
DECL|field|ivyXmlResources
specifier|private
name|Resources
name|ivyXmlResources
init|=
operator|new
name|Resources
argument_list|()
decl_stmt|;
comment|/**    * Centralized Ivy versions properties file    */
DECL|field|centralizedVersionsFile
specifier|private
name|File
name|centralizedVersionsFile
decl_stmt|;
comment|/**    * Module dependencies properties file, generated by task -append-module-dependencies-properties.    */
DECL|field|moduleDependenciesPropertiesFile
specifier|private
name|File
name|moduleDependenciesPropertiesFile
decl_stmt|;
comment|/**    * Where all properties are written, to be used to filter POM templates when copying them.    */
DECL|field|mavenDependenciesFiltersFile
specifier|private
name|File
name|mavenDependenciesFiltersFile
decl_stmt|;
comment|/**    * A logging level associated with verbose logging.    */
DECL|field|verboseLevel
specifier|private
name|int
name|verboseLevel
init|=
name|Project
operator|.
name|MSG_VERBOSE
decl_stmt|;
comment|/**    * Adds a set of ivy.xml resources to check.    */
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|ResourceCollection
name|rc
parameter_list|)
block|{
name|ivyXmlResources
operator|.
name|add
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
DECL|method|setVerbose
specifier|public
name|void
name|setVerbose
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
name|verboseLevel
operator|=
operator|(
name|verbose
condition|?
name|Project
operator|.
name|MSG_INFO
else|:
name|Project
operator|.
name|MSG_VERBOSE
operator|)
expr_stmt|;
block|}
DECL|method|setCentralizedVersionsFile
specifier|public
name|void
name|setCentralizedVersionsFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|centralizedVersionsFile
operator|=
name|file
expr_stmt|;
block|}
DECL|method|setModuleDependenciesPropertiesFile
specifier|public
name|void
name|setModuleDependenciesPropertiesFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|moduleDependenciesPropertiesFile
operator|=
name|file
expr_stmt|;
block|}
DECL|method|setMavenDependenciesFiltersFile
specifier|public
name|void
name|setMavenDependenciesFiltersFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|mavenDependenciesFiltersFile
operator|=
name|file
expr_stmt|;
block|}
DECL|method|GetMavenDependenciesTask
specifier|public
name|GetMavenDependenciesTask
parameter_list|()
block|{
try|try
block|{
name|documentBuilder
operator|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Collect dependency information from Ant build.xml and ivy.xml files    * and from ivy-versions.properties, then write out an Ant filters file    * to be used when copying POMs.    */
annotation|@
name|Override
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|BuildException
block|{
name|setInternalDependencyProperties
argument_list|()
expr_stmt|;
comment|// side-effect: all modules' internal deps are recorded
name|setExternalDependencyProperties
argument_list|()
expr_stmt|;
comment|// side-effect: all modules' external deps are recorded
name|setGrandparentDependencyManagementProperty
argument_list|()
expr_stmt|;
comment|// uses deps recorded in above two methods
name|writeFiltersFile
argument_list|()
expr_stmt|;
block|}
comment|/**    * Write out an Ant filters file to be used when copying POMs.    */
DECL|method|writeFiltersFile
specifier|private
name|void
name|writeFiltersFile
parameter_list|()
block|{
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileOutputStream
name|outputStream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|mavenDependenciesFiltersFile
argument_list|)
decl_stmt|;
name|writer
operator|=
operator|new
name|OutputStreamWriter
argument_list|(
name|outputStream
argument_list|,
literal|"ISO-8859-1"
argument_list|)
expr_stmt|;
name|allProperties
operator|.
name|store
argument_list|(
name|writer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Can't find file: '"
operator|+
name|mavenDependenciesFiltersFile
operator|.
name|getPath
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Exception writing out '"
operator|+
name|mavenDependenciesFiltersFile
operator|.
name|getPath
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|writer
condition|)
block|{
try|try
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
comment|/**    * Collects external dependencies from each ivy.xml file and sets    * external dependency properties to be inserted into modules' POMs.     */
DECL|method|setExternalDependencyProperties
specifier|private
name|void
name|setExternalDependencyProperties
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterator
argument_list|<
name|Resource
argument_list|>
name|iter
init|=
operator|(
name|Iterator
argument_list|<
name|Resource
argument_list|>
operator|)
name|ivyXmlResources
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Resource
name|resource
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|resource
operator|.
name|isExists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Resource does not exist: "
operator|+
name|resource
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|resource
operator|instanceof
name|FileResource
operator|)
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Only filesystem resources are supported: "
operator|+
name|resource
operator|.
name|getName
argument_list|()
operator|+
literal|", was: "
operator|+
name|resource
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|File
name|ivyXmlFile
init|=
operator|(
operator|(
name|FileResource
operator|)
name|resource
operator|)
operator|.
name|getFile
argument_list|()
decl_stmt|;
try|try
block|{
name|collectExternalDependenciesFromIvyXmlFile
argument_list|(
name|ivyXmlFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BuildException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Exception reading file "
operator|+
name|ivyXmlFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|addSharedExternalDependencies
argument_list|()
expr_stmt|;
name|setExternalDependencyXmlProperties
argument_list|()
expr_stmt|;
block|}
comment|/**    * For each module that include other modules' external dependencies via    * including all files under their ".../lib/" dirs in their (test.)classpath,    * add the other modules' dependencies to its set of external dependencies.     */
DECL|method|addSharedExternalDependencies
specifier|private
name|void
name|addSharedExternalDependencies
parameter_list|()
block|{
comment|// Delay adding shared compile-scope dependencies until after all have been processed,
comment|// so dependency sharing is limited to a depth of one.
name|Map
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|ExternalDependency
argument_list|>
argument_list|>
name|sharedDependencies
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|ExternalDependency
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|artifactId
range|:
name|interModuleExternalCompileScopeDependencies
operator|.
name|keySet
argument_list|()
control|)
block|{
name|TreeSet
argument_list|<
name|ExternalDependency
argument_list|>
name|deps
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|sharedDependencies
operator|.
name|put
argument_list|(
name|artifactId
argument_list|,
name|deps
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|moduleDependencies
init|=
name|interModuleExternalCompileScopeDependencies
operator|.
name|get
argument_list|(
name|artifactId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|moduleDependencies
condition|)
block|{
for|for
control|(
name|String
name|otherArtifactId
range|:
name|moduleDependencies
control|)
block|{
name|SortedSet
argument_list|<
name|ExternalDependency
argument_list|>
name|otherExtDeps
init|=
name|allExternalDependencies
operator|.
name|get
argument_list|(
name|otherArtifactId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|otherExtDeps
condition|)
block|{
for|for
control|(
name|ExternalDependency
name|otherDep
range|:
name|otherExtDeps
control|)
block|{
if|if
condition|(
operator|!
name|otherDep
operator|.
name|isTestDependency
condition|)
block|{
name|deps
operator|.
name|add
argument_list|(
name|otherDep
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|String
name|artifactId
range|:
name|interModuleExternalTestScopeDependencies
operator|.
name|keySet
argument_list|()
control|)
block|{
name|SortedSet
argument_list|<
name|ExternalDependency
argument_list|>
name|deps
init|=
name|sharedDependencies
operator|.
name|get
argument_list|(
name|artifactId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|deps
condition|)
block|{
name|deps
operator|=
operator|new
name|TreeSet
argument_list|<
name|ExternalDependency
argument_list|>
argument_list|()
expr_stmt|;
name|sharedDependencies
operator|.
name|put
argument_list|(
name|artifactId
argument_list|,
name|deps
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|moduleDependencies
init|=
name|interModuleExternalTestScopeDependencies
operator|.
name|get
argument_list|(
name|artifactId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|moduleDependencies
condition|)
block|{
for|for
control|(
name|String
name|otherArtifactId
range|:
name|moduleDependencies
control|)
block|{
name|int
name|testScopePos
init|=
name|otherArtifactId
operator|.
name|indexOf
argument_list|(
literal|":test"
argument_list|)
decl_stmt|;
name|boolean
name|isTestScope
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|!=
name|testScopePos
condition|)
block|{
name|otherArtifactId
operator|=
name|otherArtifactId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|testScopePos
argument_list|)
expr_stmt|;
name|isTestScope
operator|=
literal|true
expr_stmt|;
block|}
name|SortedSet
argument_list|<
name|ExternalDependency
argument_list|>
name|otherExtDeps
init|=
name|allExternalDependencies
operator|.
name|get
argument_list|(
name|otherArtifactId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|otherExtDeps
condition|)
block|{
for|for
control|(
name|ExternalDependency
name|otherDep
range|:
name|otherExtDeps
control|)
block|{
if|if
condition|(
name|otherDep
operator|.
name|isTestDependency
operator|==
name|isTestScope
condition|)
block|{
if|if
condition|(
operator|!
name|deps
operator|.
name|contains
argument_list|(
name|otherDep
argument_list|)
operator|&&
operator|(
literal|null
operator|==
name|allExternalDependencies
operator|.
name|get
argument_list|(
name|artifactId
argument_list|)
operator|||
operator|!
name|allExternalDependencies
operator|.
name|get
argument_list|(
name|artifactId
argument_list|)
operator|.
name|contains
argument_list|(
name|otherDep
argument_list|)
operator|)
condition|)
block|{
comment|// Add test-scope clone only if it's not already a compile-scope dependency.
name|ExternalDependency
name|otherDepTestScope
init|=
operator|new
name|ExternalDependency
argument_list|(
name|otherDep
operator|.
name|groupId
argument_list|,
name|otherDep
operator|.
name|artifactId
argument_list|,
name|otherDep
operator|.
name|classifier
argument_list|,
literal|true
argument_list|,
name|otherDep
operator|.
name|isOptional
argument_list|)
decl_stmt|;
name|deps
operator|.
name|add
argument_list|(
name|otherDepTestScope
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|String
name|artifactId
range|:
name|sharedDependencies
operator|.
name|keySet
argument_list|()
control|)
block|{
name|SortedSet
argument_list|<
name|ExternalDependency
argument_list|>
name|deps
init|=
name|allExternalDependencies
operator|.
name|get
argument_list|(
name|artifactId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|deps
condition|)
block|{
name|deps
operator|=
operator|new
name|TreeSet
argument_list|<
name|ExternalDependency
argument_list|>
argument_list|()
expr_stmt|;
name|allExternalDependencies
operator|.
name|put
argument_list|(
name|artifactId
argument_list|,
name|deps
argument_list|)
expr_stmt|;
block|}
name|deps
operator|.
name|addAll
argument_list|(
name|sharedDependencies
operator|.
name|get
argument_list|(
name|artifactId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * For each module, sets a compile-scope and a test-scope property    * with values that contain the appropriate&lt;dependency&gt;    * snippets.    */
DECL|method|setExternalDependencyXmlProperties
specifier|private
name|void
name|setExternalDependencyXmlProperties
parameter_list|()
block|{
for|for
control|(
name|String
name|module
range|:
name|internalCompileScopeDependencies
operator|.
name|keySet
argument_list|()
control|)
block|{
comment|// get full module list
name|StringBuilder
name|compileScopeBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|testScopeBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|SortedSet
argument_list|<
name|ExternalDependency
argument_list|>
name|extDeps
init|=
name|allExternalDependencies
operator|.
name|get
argument_list|(
name|module
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|extDeps
condition|)
block|{
for|for
control|(
name|ExternalDependency
name|dep
range|:
name|extDeps
control|)
block|{
name|StringBuilder
name|builder
init|=
name|dep
operator|.
name|isTestDependency
condition|?
name|testScopeBuilder
else|:
name|compileScopeBuilder
decl_stmt|;
name|appendDependencyXml
argument_list|(
name|builder
argument_list|,
name|dep
operator|.
name|groupId
argument_list|,
name|dep
operator|.
name|artifactId
argument_list|,
literal|"    "
argument_list|,
literal|null
argument_list|,
name|dep
operator|.
name|isTestDependency
argument_list|,
name|dep
operator|.
name|isOptional
argument_list|,
name|dep
operator|.
name|classifier
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Test POMs for solrj, solr-core, lucene-codecs and lucene-core modules
comment|// need to include all compile-scope dependencies as test-scope dependencies
comment|// since we've turned off transitive dependency resolution.
if|if
condition|(
operator|!
name|dep
operator|.
name|isTestDependency
operator|&&
name|modulesWithSeparateCompileAndTestPOMs
operator|.
name|contains
argument_list|(
name|module
argument_list|)
condition|)
block|{
name|appendDependencyXml
argument_list|(
name|testScopeBuilder
argument_list|,
name|dep
operator|.
name|groupId
argument_list|,
name|dep
operator|.
name|artifactId
argument_list|,
literal|"    "
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|dep
operator|.
name|isOptional
argument_list|,
name|dep
operator|.
name|classifier
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|compileScopeBuilder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|compileScopeBuilder
operator|.
name|setLength
argument_list|(
name|compileScopeBuilder
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// drop trailing newline
block|}
if|if
condition|(
name|testScopeBuilder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|testScopeBuilder
operator|.
name|setLength
argument_list|(
name|testScopeBuilder
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// drop trailing newline
block|}
name|allProperties
operator|.
name|setProperty
argument_list|(
name|module
operator|+
literal|".external.dependencies"
argument_list|,
name|compileScopeBuilder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|allProperties
operator|.
name|setProperty
argument_list|(
name|module
operator|+
literal|".external.test.dependencies"
argument_list|,
name|testScopeBuilder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Sets the property to be inserted into the grandparent POM's     *&lt;dependencyManagement&gt; section.    */
DECL|method|setGrandparentDependencyManagementProperty
specifier|private
name|void
name|setGrandparentDependencyManagementProperty
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|appendAllInternalDependencies
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|versionsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|appendAllExternalDependencies
argument_list|(
name|builder
argument_list|,
name|versionsMap
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setLength
argument_list|(
name|builder
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// drop trailing newline
name|allProperties
operator|.
name|setProperty
argument_list|(
name|DEPENDENCY_MANAGEMENT_PROPERTY
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|versionsMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|allProperties
operator|.
name|setProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * For each artifact in the project, append a dependency with version    * ${project.version} to the grandparent POM's&lt;dependencyManagement&gt;    * section.  An&lt;exclusion&gt; is added for each of the artifact's    * dependencies.    */
DECL|method|appendAllInternalDependencies
specifier|private
name|void
name|appendAllInternalDependencies
parameter_list|(
name|StringBuilder
name|builder
parameter_list|)
block|{
for|for
control|(
name|String
name|artifactId
range|:
name|internalCompileScopeDependencies
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|exclusions
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|exclusions
operator|.
name|addAll
argument_list|(
name|internalCompileScopeDependencies
operator|.
name|get
argument_list|(
name|artifactId
argument_list|)
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|ExternalDependency
argument_list|>
name|extDeps
init|=
name|allExternalDependencies
operator|.
name|get
argument_list|(
name|artifactId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|extDeps
condition|)
block|{
for|for
control|(
name|ExternalDependency
name|externalDependency
range|:
name|extDeps
control|)
block|{
if|if
condition|(
operator|!
name|externalDependency
operator|.
name|isTestDependency
operator|&&
operator|!
name|externalDependency
operator|.
name|isOptional
condition|)
block|{
name|exclusions
operator|.
name|add
argument_list|(
name|externalDependency
operator|.
name|groupId
operator|+
literal|':'
operator|+
name|externalDependency
operator|.
name|artifactId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|groupId
init|=
literal|"org.apache."
operator|+
name|artifactId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|artifactId
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
argument_list|)
decl_stmt|;
name|appendDependencyXml
argument_list|(
name|builder
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
literal|"      "
argument_list|,
literal|"${project.version}"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|exclusions
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Sets the ivyCacheDir field, to either the ${ivy.default.ivy.user.dir}     * property, or if that's not set, to the default ~/.ivy2/.    */
DECL|method|getIvyCacheDir
specifier|private
name|File
name|getIvyCacheDir
parameter_list|()
block|{
name|String
name|ivyUserDirName
init|=
name|getProject
argument_list|()
operator|.
name|getUserProperty
argument_list|(
name|IVY_USER_DIR_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ivyUserDirName
condition|)
block|{
name|ivyUserDirName
operator|=
name|getProject
argument_list|()
operator|.
name|getProperty
argument_list|(
name|IVY_USER_DIR_PROPERTY
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|ivyUserDirName
condition|)
block|{
name|ivyUserDirName
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
literal|".ivy2"
expr_stmt|;
block|}
block|}
name|File
name|ivyUserDir
init|=
operator|new
name|File
argument_list|(
name|ivyUserDirName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ivyUserDir
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Ivy user dir does not exist: '"
operator|+
name|ivyUserDir
operator|.
name|getPath
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|ivyUserDir
argument_list|,
literal|"cache"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Ivy cache dir does not exist: '"
operator|+
name|ivyCacheDir
operator|.
name|getPath
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
return|return
name|dir
return|;
block|}
comment|/**    * Append each dependency listed in the centralized Ivy versions file    * to the grandparent POM's&lt;dependencyManagement&gt; section.      * An&lt;exclusion&gt; is added for each of the artifact's dependencies,    * which are collected from the artifact's ivy.xml from the Ivy cache.    *     * Also add a version property for each dependency.    */
DECL|method|appendAllExternalDependencies
specifier|private
name|void
name|appendAllExternalDependencies
parameter_list|(
name|StringBuilder
name|dependenciesBuilder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|versionsMap
parameter_list|)
block|{
name|log
argument_list|(
literal|"Loading centralized ivy versions from: "
operator|+
name|centralizedVersionsFile
argument_list|,
name|verboseLevel
argument_list|)
expr_stmt|;
name|ivyCacheDir
operator|=
name|getIvyCacheDir
argument_list|()
expr_stmt|;
name|Properties
name|versions
init|=
name|loadPropertiesFile
argument_list|(
name|centralizedVersionsFile
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|Map
operator|.
name|Entry
argument_list|>
name|sortedEntries
init|=
operator|new
name|TreeSet
argument_list|<
name|Map
operator|.
name|Entry
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Map
operator|.
name|Entry
name|o1
parameter_list|,
name|Map
operator|.
name|Entry
name|o2
parameter_list|)
block|{
return|return
operator|(
operator|(
name|String
operator|)
name|o1
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
operator|(
name|String
operator|)
name|o2
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|sortedEntries
operator|.
name|addAll
argument_list|(
name|versions
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
name|sortedEntries
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Matcher
name|matcher
init|=
name|COORDINATE_KEY_PATTERN
operator|.
name|matcher
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|lookingAt
argument_list|()
condition|)
block|{
name|String
name|groupId
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|artifactId
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|coordinate
init|=
name|groupId
operator|+
literal|':'
operator|+
name|artifactId
decl_stmt|;
name|String
name|version
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|versionsMap
operator|.
name|put
argument_list|(
name|coordinate
operator|+
literal|".version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nonJarDependencies
operator|.
name|contains
argument_list|(
name|coordinate
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|classifiers
init|=
name|dependencyClassifiers
operator|.
name|get
argument_list|(
name|coordinate
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|classifiers
condition|)
block|{
for|for
control|(
name|String
name|classifier
range|:
name|classifiers
control|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|exclusions
init|=
name|getTransitiveDependenciesFromIvyCache
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|appendDependencyXml
argument_list|(
name|dependenciesBuilder
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
literal|"      "
argument_list|,
name|version
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|classifier
argument_list|,
name|exclusions
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|/**    * Collect transitive compile-scope dependencies for the given artifact's    * ivy.xml from the Ivy cache, using the default ivy pattern     * "[organisation]/[module]/ivy-[revision].xml".  See     *<a href="http://ant.apache.org/ivy/history/latest-milestone/settings/caches.html"    *>the Ivy cache documentation</a>.    */
DECL|method|getTransitiveDependenciesFromIvyCache
specifier|private
name|Collection
argument_list|<
name|String
argument_list|>
name|getTransitiveDependenciesFromIvyCache
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|transitiveDependencies
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|//                                      E.g. ~/.ivy2/cache/xerces/xercesImpl/ivy-2.9.1.xml
name|File
name|ivyXmlFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|ivyCacheDir
argument_list|,
name|groupId
argument_list|)
argument_list|,
name|artifactId
argument_list|)
argument_list|,
literal|"ivy-"
operator|+
name|version
operator|+
literal|".xml"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ivyXmlFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"File not found: "
operator|+
name|ivyXmlFile
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
name|Document
name|document
init|=
name|documentBuilder
operator|.
name|parse
argument_list|(
name|ivyXmlFile
argument_list|)
decl_stmt|;
name|String
name|dependencyPath
init|=
literal|"/ivy-module/dependencies/dependency"
operator|+
literal|"[   not(starts-with(@conf,'test->'))"
operator|+
literal|"and not(starts-with(@conf,'provided->'))"
operator|+
literal|"and not(starts-with(@conf,'optional->'))]"
decl_stmt|;
name|NodeList
name|dependencies
init|=
operator|(
name|NodeList
operator|)
name|xpath
operator|.
name|evaluate
argument_list|(
name|dependencyPath
argument_list|,
name|document
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dependencies
operator|.
name|getLength
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Element
name|dependency
init|=
operator|(
name|Element
operator|)
name|dependencies
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|transitiveDependencies
operator|.
name|add
argument_list|(
name|dependency
operator|.
name|getAttribute
argument_list|(
literal|"org"
argument_list|)
operator|+
literal|':'
operator|+
name|dependency
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Exception collecting transitive dependencies for "
operator|+
name|groupId
operator|+
literal|':'
operator|+
name|artifactId
operator|+
literal|':'
operator|+
name|version
operator|+
literal|" from "
operator|+
name|ivyXmlFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|transitiveDependencies
return|;
block|}
comment|/**    * Sets the internal dependencies compile and test properties to be inserted     * into modules' POMs.                                                                          k    *     * Also collects shared external dependencies,     * e.g. solr-core wants all of solrj's external dependencies     */
DECL|method|setInternalDependencyProperties
specifier|private
name|void
name|setInternalDependencyProperties
parameter_list|()
block|{
name|log
argument_list|(
literal|"Loading module dependencies from: "
operator|+
name|moduleDependenciesPropertiesFile
argument_list|,
name|verboseLevel
argument_list|)
expr_stmt|;
name|Properties
name|moduleDependencies
init|=
name|loadPropertiesFile
argument_list|(
name|moduleDependenciesPropertiesFile
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|testScopeDependencies
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|testScopePropertyKeys
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
name|moduleDependencies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|newPropertyKey
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|StringBuilder
name|newPropertyValue
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|value
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Matcher
name|matcher
init|=
name|MODULE_DEPENDENCIES_COORDINATE_KEY_PATTERN
operator|.
name|matcher
argument_list|(
name|newPropertyKey
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Malformed module dependencies property key: '"
operator|+
name|newPropertyKey
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|String
name|antProjectName
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|isTest
init|=
literal|null
operator|!=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|artifactName
init|=
name|antProjectToArtifactName
argument_list|(
name|antProjectName
argument_list|)
decl_stmt|;
name|newPropertyKey
operator|=
name|artifactName
operator|+
operator|(
name|isTest
condition|?
literal|".internal.test"
else|:
literal|".internal"
operator|)
operator|+
literal|".dependencies"
expr_stmt|;
comment|// Add ".internal"
if|if
condition|(
name|isTest
condition|)
block|{
name|testScopePropertyKeys
operator|.
name|put
argument_list|(
name|artifactName
argument_list|,
name|newPropertyKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|value
operator|||
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|allProperties
operator|.
name|setProperty
argument_list|(
name|newPropertyKey
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|scopedDependencies
init|=
name|isTest
condition|?
name|testScopeDependencies
else|:
name|internalCompileScopeDependencies
decl_stmt|;
name|scopedDependencies
operator|.
name|put
argument_list|(
name|artifactName
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Lucene analysis modules' build dirs do not include hyphens, but Solr contribs' build dirs do
name|String
name|origModuleDir
init|=
name|antProjectName
operator|.
name|replace
argument_list|(
literal|"analyzers-"
argument_list|,
literal|"analysis/"
argument_list|)
decl_stmt|;
name|Pattern
name|unwantedInternalDependencies
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(?:lucene/build/|solr/build/(?:contrib/)?)"
operator|+
name|origModuleDir
operator|+
literal|"|"
operator|+
name|UNWANTED_INTERNAL_DEPENDENCIES
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|sortedDeps
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dependency
range|:
name|value
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|matcher
operator|=
name|SHARED_EXTERNAL_DEPENDENCIES_PATTERN
operator|.
name|matcher
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|otherArtifactName
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|isTestScope
init|=
literal|null
operator|!=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|&&
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
decl_stmt|;
name|otherArtifactName
operator|=
name|otherArtifactName
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'-'
argument_list|)
expr_stmt|;
name|otherArtifactName
operator|=
name|otherArtifactName
operator|.
name|replace
argument_list|(
literal|"lucene-analysis"
argument_list|,
literal|"lucene-analyzers"
argument_list|)
expr_stmt|;
name|otherArtifactName
operator|=
name|otherArtifactName
operator|.
name|replace
argument_list|(
literal|"solr-contrib-solr-"
argument_list|,
literal|"solr-"
argument_list|)
expr_stmt|;
name|otherArtifactName
operator|=
name|otherArtifactName
operator|.
name|replace
argument_list|(
literal|"solr-contrib-"
argument_list|,
literal|"solr-"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|otherArtifactName
operator|.
name|equals
argument_list|(
name|artifactName
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|sharedDeps
init|=
name|isTest
condition|?
name|interModuleExternalTestScopeDependencies
else|:
name|interModuleExternalCompileScopeDependencies
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|sharedSet
init|=
name|sharedDeps
operator|.
name|get
argument_list|(
name|artifactName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|sharedSet
condition|)
block|{
name|sharedSet
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|sharedDeps
operator|.
name|put
argument_list|(
name|artifactName
argument_list|,
name|sharedSet
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isTestScope
condition|)
block|{
name|otherArtifactName
operator|+=
literal|":test"
expr_stmt|;
block|}
name|sharedSet
operator|.
name|add
argument_list|(
name|otherArtifactName
argument_list|)
expr_stmt|;
block|}
block|}
name|matcher
operator|=
name|unwantedInternalDependencies
operator|.
name|matcher
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
continue|continue;
comment|// skip external (/(test-)lib/), and non-jar and unwanted (self) internal deps
block|}
name|String
name|artifactId
init|=
name|dependencyToArtifactId
argument_list|(
name|newPropertyKey
argument_list|,
name|dependency
argument_list|)
decl_stmt|;
name|String
name|groupId
init|=
literal|"org.apache."
operator|+
name|artifactId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|artifactId
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|coordinate
init|=
name|groupId
operator|+
literal|':'
operator|+
name|artifactId
decl_stmt|;
name|sortedDeps
operator|.
name|add
argument_list|(
name|coordinate
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isTest
condition|)
block|{
comment|// Don't set test-scope properties until all compile-scope deps have been seen
name|testScopeDependencies
operator|.
name|put
argument_list|(
name|artifactName
argument_list|,
name|sortedDeps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|internalCompileScopeDependencies
operator|.
name|put
argument_list|(
name|artifactName
argument_list|,
name|sortedDeps
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dependency
range|:
name|sortedDeps
control|)
block|{
name|int
name|splitPos
init|=
name|dependency
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|String
name|groupId
init|=
name|dependency
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|splitPos
argument_list|)
decl_stmt|;
name|String
name|artifactId
init|=
name|dependency
operator|.
name|substring
argument_list|(
name|splitPos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|appendDependencyXml
argument_list|(
name|newPropertyValue
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
literal|"    "
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newPropertyValue
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|newPropertyValue
operator|.
name|setLength
argument_list|(
name|newPropertyValue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// drop trailing newline
block|}
name|allProperties
operator|.
name|setProperty
argument_list|(
name|newPropertyKey
argument_list|,
name|newPropertyValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Now that all compile-scope dependencies have been seen, include only those test-scope
comment|// dependencies that are not also compile-scope dependencies.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|testScopeDependencies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|module
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|testDeps
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|compileDeps
init|=
name|internalCompileScopeDependencies
operator|.
name|get
argument_list|(
name|module
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|compileDeps
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Can't find compile scope dependencies for module "
operator|+
name|module
argument_list|)
throw|;
block|}
name|StringBuilder
name|newPropertyValue
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dependency
range|:
name|testDeps
control|)
block|{
comment|// modules with separate compile-scope and test-scope POMs need their compile-scope deps
comment|// included in their test-scope deps.
if|if
condition|(
name|modulesWithSeparateCompileAndTestPOMs
operator|.
name|contains
argument_list|(
name|module
argument_list|)
operator|||
operator|!
name|compileDeps
operator|.
name|contains
argument_list|(
name|dependency
argument_list|)
condition|)
block|{
name|int
name|splitPos
init|=
name|dependency
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|String
name|groupId
init|=
name|dependency
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|splitPos
argument_list|)
decl_stmt|;
name|String
name|artifactId
init|=
name|dependency
operator|.
name|substring
argument_list|(
name|splitPos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|appendDependencyXml
argument_list|(
name|newPropertyValue
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
literal|"    "
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newPropertyValue
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|newPropertyValue
operator|.
name|setLength
argument_list|(
name|newPropertyValue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// drop trailing newline
block|}
name|allProperties
operator|.
name|setProperty
argument_list|(
name|testScopePropertyKeys
operator|.
name|get
argument_list|(
name|module
argument_list|)
argument_list|,
name|newPropertyValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Converts either a compile output directory or an internal jar    * dependency, taken from an Ant (test.)classpath, into an artifactId    */
DECL|method|dependencyToArtifactId
specifier|private
name|String
name|dependencyToArtifactId
parameter_list|(
name|String
name|newPropertyKey
parameter_list|,
name|String
name|dependency
parameter_list|)
block|{
name|StringBuilder
name|artifactId
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Matcher
name|matcher
init|=
name|COMPILATION_OUTPUT_DIRECTORY_PATTERN
operator|.
name|matcher
argument_list|(
name|dependency
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// Pattern.compile("(lucene|solr)/build/(.*)/classes/java");
name|String
name|artifact
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|artifact
operator|=
name|artifact
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'-'
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|artifact
operator|.
name|replace
argument_list|(
literal|"analysis-"
argument_list|,
literal|"analyzers-"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"lucene"
operator|.
name|equals
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|artifactId
operator|.
name|append
argument_list|(
literal|"lucene-"
argument_list|)
expr_stmt|;
block|}
name|artifactId
operator|.
name|append
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|matcher
operator|=
name|INTERNAL_JAR_PATTERN
operator|.
name|matcher
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// Pattern.compile(".*(lucene|solr)([^/]*?)-(?:\\d\\.)+\\d(?:-SNAPSHOT)?\\.jar)")
name|artifactId
operator|.
name|append
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|artifactId
operator|.
name|append
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Malformed module dependency from '"
operator|+
name|newPropertyKey
operator|+
literal|"': '"
operator|+
name|dependency
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
return|return
name|artifactId
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Convert Ant project names to artifact names: prepend "lucene-"    * to Lucene project names    */
DECL|method|antProjectToArtifactName
specifier|private
name|String
name|antProjectToArtifactName
parameter_list|(
name|String
name|origModule
parameter_list|)
block|{
name|String
name|module
init|=
name|origModule
decl_stmt|;
if|if
condition|(
operator|!
name|origModule
operator|.
name|startsWith
argument_list|(
literal|"solr-"
argument_list|)
condition|)
block|{
comment|// lucene modules names don't have "lucene-" prepended
name|module
operator|=
literal|"lucene-"
operator|+
name|module
expr_stmt|;
block|}
return|return
name|module
return|;
block|}
comment|/**    * Collect external dependencies from the given ivy.xml file, constructing    * property values containing&lt;dependency&gt; snippets, which will be    * filtered (substituted) when copying the POM for the module corresponding    * to the given ivy.xml file.    */
DECL|method|collectExternalDependenciesFromIvyXmlFile
specifier|private
name|void
name|collectExternalDependenciesFromIvyXmlFile
parameter_list|(
name|File
name|ivyXmlFile
parameter_list|)
throws|throws
name|XPathExpressionException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|String
name|module
init|=
name|getModuleName
argument_list|(
name|ivyXmlFile
argument_list|)
decl_stmt|;
name|log
argument_list|(
literal|"Collecting external dependencies from: "
operator|+
name|ivyXmlFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|verboseLevel
argument_list|)
expr_stmt|;
name|Document
name|document
init|=
name|documentBuilder
operator|.
name|parse
argument_list|(
name|ivyXmlFile
argument_list|)
decl_stmt|;
name|String
name|dependencyPath
init|=
literal|"/ivy-module/dependencies/dependency[not(starts-with(@conf,'start->'))]"
decl_stmt|;
name|NodeList
name|dependencies
init|=
operator|(
name|NodeList
operator|)
name|xpath
operator|.
name|evaluate
argument_list|(
name|dependencyPath
argument_list|,
name|document
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|depNum
init|=
literal|0
init|;
name|depNum
operator|<
name|dependencies
operator|.
name|getLength
argument_list|()
condition|;
operator|++
name|depNum
control|)
block|{
name|Element
name|dependency
init|=
operator|(
name|Element
operator|)
name|dependencies
operator|.
name|item
argument_list|(
name|depNum
argument_list|)
decl_stmt|;
name|String
name|groupId
init|=
name|dependency
operator|.
name|getAttribute
argument_list|(
literal|"org"
argument_list|)
decl_stmt|;
name|String
name|artifactId
init|=
name|dependency
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|dependencyCoordinate
init|=
name|groupId
operator|+
literal|':'
operator|+
name|artifactId
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|classifiers
init|=
name|dependencyClassifiers
operator|.
name|get
argument_list|(
name|dependencyCoordinate
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|classifiers
condition|)
block|{
name|classifiers
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|dependencyClassifiers
operator|.
name|put
argument_list|(
name|dependencyCoordinate
argument_list|,
name|classifiers
argument_list|)
expr_stmt|;
block|}
name|String
name|conf
init|=
name|dependency
operator|.
name|getAttribute
argument_list|(
literal|"conf"
argument_list|)
decl_stmt|;
name|boolean
name|confContainsTest
init|=
name|conf
operator|.
name|contains
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|boolean
name|isOptional
init|=
name|optionalExternalDependencies
operator|.
name|contains
argument_list|(
name|dependencyCoordinate
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|ExternalDependency
argument_list|>
name|deps
init|=
name|allExternalDependencies
operator|.
name|get
argument_list|(
name|module
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|deps
condition|)
block|{
name|deps
operator|=
operator|new
name|TreeSet
argument_list|<
name|ExternalDependency
argument_list|>
argument_list|()
expr_stmt|;
name|allExternalDependencies
operator|.
name|put
argument_list|(
name|module
argument_list|,
name|deps
argument_list|)
expr_stmt|;
block|}
name|NodeList
name|artifacts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dependency
operator|.
name|hasChildNodes
argument_list|()
condition|)
block|{
name|artifacts
operator|=
operator|(
name|NodeList
operator|)
name|xpath
operator|.
name|evaluate
argument_list|(
literal|"artifact"
argument_list|,
name|dependency
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|artifacts
operator|&&
name|artifacts
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|artifactNum
init|=
literal|0
init|;
name|artifactNum
operator|<
name|artifacts
operator|.
name|getLength
argument_list|()
condition|;
operator|++
name|artifactNum
control|)
block|{
name|Element
name|artifact
init|=
operator|(
name|Element
operator|)
name|artifacts
operator|.
name|item
argument_list|(
name|artifactNum
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|artifact
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|String
name|ext
init|=
name|artifact
operator|.
name|getAttribute
argument_list|(
literal|"ext"
argument_list|)
decl_stmt|;
comment|// When conf contains BOTH "test" and "compile", and type != "test", this is NOT a test dependency
name|boolean
name|isTestDependency
init|=
name|confContainsTest
operator|&&
operator|(
name|type
operator|.
name|equals
argument_list|(
literal|"test"
argument_list|)
operator|||
operator|!
name|conf
operator|.
name|contains
argument_list|(
literal|"compile"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|type
operator|.
name|isEmpty
argument_list|()
operator|&&
name|ext
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
name|type
operator|.
name|equals
argument_list|(
literal|"jar"
argument_list|)
operator|||
name|ext
operator|.
name|equals
argument_list|(
literal|"jar"
argument_list|)
condition|)
block|{
name|String
name|classifier
init|=
name|artifact
operator|.
name|getAttribute
argument_list|(
literal|"maven:classifier"
argument_list|)
decl_stmt|;
if|if
condition|(
name|classifier
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|classifier
operator|=
literal|null
expr_stmt|;
block|}
name|classifiers
operator|.
name|add
argument_list|(
name|classifier
argument_list|)
expr_stmt|;
name|deps
operator|.
name|add
argument_list|(
operator|new
name|ExternalDependency
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|classifier
argument_list|,
name|isTestDependency
argument_list|,
name|isOptional
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// not a jar
name|nonJarDependencies
operator|.
name|add
argument_list|(
name|dependencyCoordinate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|classifiers
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|deps
operator|.
name|add
argument_list|(
operator|new
name|ExternalDependency
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
literal|null
argument_list|,
name|confContainsTest
argument_list|,
name|isOptional
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Stores information about an external dependency    */
DECL|class|ExternalDependency
specifier|private
class|class
name|ExternalDependency
implements|implements
name|Comparable
argument_list|<
name|ExternalDependency
argument_list|>
block|{
DECL|field|groupId
name|String
name|groupId
decl_stmt|;
DECL|field|artifactId
name|String
name|artifactId
decl_stmt|;
DECL|field|isTestDependency
name|boolean
name|isTestDependency
decl_stmt|;
DECL|field|isOptional
name|boolean
name|isOptional
decl_stmt|;
DECL|field|classifier
name|String
name|classifier
decl_stmt|;
DECL|method|ExternalDependency
specifier|public
name|ExternalDependency
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|classifier
parameter_list|,
name|boolean
name|isTestDependency
parameter_list|,
name|boolean
name|isOptional
parameter_list|)
block|{
name|this
operator|.
name|groupId
operator|=
name|groupId
expr_stmt|;
name|this
operator|.
name|artifactId
operator|=
name|artifactId
expr_stmt|;
name|this
operator|.
name|classifier
operator|=
name|classifier
expr_stmt|;
name|this
operator|.
name|isTestDependency
operator|=
name|isTestDependency
expr_stmt|;
name|this
operator|.
name|isOptional
operator|=
name|isOptional
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|ExternalDependency
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ExternalDependency
name|other
init|=
operator|(
name|ExternalDependency
operator|)
name|o
decl_stmt|;
return|return
name|groupId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|groupId
argument_list|)
operator|&&
name|artifactId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|artifactId
argument_list|)
operator|&&
name|isTestDependency
operator|==
name|other
operator|.
name|isTestDependency
operator|&&
name|isOptional
operator|==
name|other
operator|.
name|isOptional
operator|&&
name|classifier
operator|.
name|equals
argument_list|(
name|other
operator|.
name|classifier
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|groupId
operator|.
name|hashCode
argument_list|()
operator|*
literal|31
operator|+
name|artifactId
operator|.
name|hashCode
argument_list|()
operator|*
literal|31
operator|+
operator|(
name|isTestDependency
condition|?
literal|31
else|:
literal|0
operator|)
operator|+
operator|(
name|isOptional
condition|?
literal|31
else|:
literal|0
operator|)
operator|+
name|classifier
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|ExternalDependency
name|other
parameter_list|)
block|{
name|int
name|comparison
init|=
name|groupId
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|groupId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|!=
name|comparison
condition|)
block|{
return|return
name|comparison
return|;
block|}
name|comparison
operator|=
name|artifactId
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|artifactId
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|!=
name|comparison
condition|)
block|{
return|return
name|comparison
return|;
block|}
if|if
condition|(
literal|null
operator|==
name|classifier
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|other
operator|.
name|classifier
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|null
operator|==
name|other
operator|.
name|classifier
condition|)
block|{
comment|// classifier is not null
return|return
literal|1
return|;
block|}
else|else
block|{
comment|// neither classifier is  null
if|if
condition|(
literal|0
operator|!=
operator|(
name|comparison
operator|=
name|classifier
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|classifier
argument_list|)
operator|)
condition|)
block|{
return|return
name|comparison
return|;
block|}
block|}
comment|// test and optional don't matter in this sort
return|return
literal|0
return|;
block|}
block|}
comment|/**    * Extract module name from ivy.xml path.    */
DECL|method|getModuleName
specifier|private
name|String
name|getModuleName
parameter_list|(
name|File
name|ivyXmlFile
parameter_list|)
block|{
name|String
name|path
init|=
name|ivyXmlFile
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|Matcher
name|matcher
init|=
name|PROPERTY_PREFIX_FROM_IVY_XML_FILE_PATTERN
operator|.
name|matcher
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Can't get module name from ivy.xml path: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
condition|)
block|{
comment|// "lucene/analysis/..."
name|builder
operator|.
name|append
argument_list|(
literal|"-analyzers"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
condition|)
block|{
comment|// "solr/example/..."
name|builder
operator|.
name|append
argument_list|(
literal|"-example"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"solr-solr-"
argument_list|,
literal|"solr-"
argument_list|)
return|;
block|}
comment|/**    * Parse the given properties file, performing non-recursive Ant-like    * property value interpolation, and return the resulting Properties.    */
DECL|method|loadPropertiesFile
specifier|private
name|Properties
name|loadPropertiesFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
specifier|final
name|InputStream
name|stream
decl_stmt|;
try|try
block|{
name|stream
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Properties file does not exist: "
operator|+
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
comment|// Properties files are encoded as Latin-1
specifier|final
name|Reader
name|reader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|stream
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
block|{
name|properties
operator|.
name|load
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Exception reading properties file "
operator|+
name|file
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
comment|// Perform non-recursive Ant-like property value interpolation
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Matcher
name|matcher
init|=
name|PROPERTY_REFERENCE_PATTERN
operator|.
name|matcher
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|interpolatedValue
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|interpolatedValue
condition|)
block|{
name|matcher
operator|.
name|appendReplacement
argument_list|(
name|buffer
argument_list|,
name|interpolatedValue
argument_list|)
expr_stmt|;
block|}
block|}
name|matcher
operator|.
name|appendTail
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
comment|/**  * Appends a&lt;dependency&gt; snippet to the given builder.  */
DECL|method|appendDependencyXml
specifier|private
name|void
name|appendDependencyXml
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|indent
parameter_list|,
name|String
name|version
parameter_list|,
name|boolean
name|isTestDependency
parameter_list|,
name|boolean
name|isOptional
parameter_list|,
name|String
name|classifier
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|exclusions
parameter_list|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"<dependency>\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"<groupId>"
argument_list|)
operator|.
name|append
argument_list|(
name|groupId
argument_list|)
operator|.
name|append
argument_list|(
literal|"</groupId>\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"<artifactId>"
argument_list|)
operator|.
name|append
argument_list|(
name|artifactId
argument_list|)
operator|.
name|append
argument_list|(
literal|"</artifactId>\n"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|version
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"<version>"
argument_list|)
operator|.
name|append
argument_list|(
name|version
argument_list|)
operator|.
name|append
argument_list|(
literal|"</version>\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isTestDependency
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"<scope>test</scope>\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isOptional
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"<optional>true</optional>\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|classifier
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"<classifier>"
argument_list|)
operator|.
name|append
argument_list|(
name|classifier
argument_list|)
operator|.
name|append
argument_list|(
literal|"</classifier>\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|exclusions
operator|&&
operator|!
name|exclusions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"<exclusions>\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dependency
range|:
name|exclusions
control|)
block|{
name|int
name|splitPos
init|=
name|dependency
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|String
name|excludedGroupId
init|=
name|dependency
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|splitPos
argument_list|)
decl_stmt|;
name|String
name|excludedArtifactId
init|=
name|dependency
operator|.
name|substring
argument_list|(
name|splitPos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"<exclusion>\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"<groupId>"
argument_list|)
operator|.
name|append
argument_list|(
name|excludedGroupId
argument_list|)
operator|.
name|append
argument_list|(
literal|"</groupId>\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"<artifactId>"
argument_list|)
operator|.
name|append
argument_list|(
name|excludedArtifactId
argument_list|)
operator|.
name|append
argument_list|(
literal|"</artifactId>\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"</exclusion>\n"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"</exclusions>\n"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"</dependency>\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
