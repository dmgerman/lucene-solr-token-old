begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.dependencies
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|dependencies
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_comment
comment|/**  * Parse a properties file, performing non-recursive Ant-like  * property value interpolation, and return the resulting Properties.  */
end_comment
begin_class
DECL|class|InterpolatedProperties
specifier|public
class|class
name|InterpolatedProperties
extends|extends
name|Properties
block|{
DECL|field|PROPERTY_REFERENCE_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|PROPERTY_REFERENCE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\$\\{([^}]+)\\}"
argument_list|)
decl_stmt|;
comment|/**    * Loads the properties file via {@link Properties#load(InputStream)},    * then performs non-recursive Ant-like property value interpolation.    */
annotation|@
name|Override
DECL|method|load
specifier|public
name|void
name|load
parameter_list|(
name|InputStream
name|inStream
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"InterpolatedProperties.load(InputStream) is not supported."
argument_list|)
throw|;
block|}
comment|/**    * Loads the properties file via {@link Properties#load(Reader)},    * then performs non-recursive Ant-like property value interpolation.    */
annotation|@
name|Override
DECL|method|load
specifier|public
name|void
name|load
parameter_list|(
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|load
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|interpolate
argument_list|()
expr_stmt|;
block|}
comment|/**    * Perform non-recursive Ant-like property value interpolation    */
DECL|method|interpolate
specifier|private
name|void
name|interpolate
parameter_list|()
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|entrySet
argument_list|()
control|)
block|{
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Matcher
name|matcher
init|=
name|PROPERTY_REFERENCE_PATTERN
operator|.
name|matcher
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|interpolatedValue
init|=
name|getProperty
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|interpolatedValue
condition|)
block|{
name|matcher
operator|.
name|appendReplacement
argument_list|(
name|buffer
argument_list|,
name|interpolatedValue
argument_list|)
expr_stmt|;
block|}
block|}
name|matcher
operator|.
name|appendTail
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
