begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.base.distance
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|distance
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|context
operator|.
name|SpatialContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|Point
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|Rectangle
import|;
end_import
begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|toRadians
import|;
end_import
begin_comment
comment|/**  * A base class for a Distance Calculator that assumes a spherical earth model.  * @author dsmiley  */
end_comment
begin_class
DECL|class|GeodesicSphereDistCalc
specifier|public
specifier|abstract
class|class
name|GeodesicSphereDistCalc
extends|extends
name|AbstractDistanceCalculator
block|{
DECL|field|radius
specifier|protected
specifier|final
name|double
name|radius
decl_stmt|;
DECL|method|GeodesicSphereDistCalc
specifier|public
name|GeodesicSphereDistCalc
parameter_list|(
name|double
name|radius
parameter_list|)
block|{
name|this
operator|.
name|radius
operator|=
name|radius
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|distanceToDegrees
specifier|public
name|double
name|distanceToDegrees
parameter_list|(
name|double
name|distance
parameter_list|)
block|{
return|return
name|DistanceUtils
operator|.
name|dist2Degrees
argument_list|(
name|distance
argument_list|,
name|radius
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|degreesToDistance
specifier|public
name|double
name|degreesToDistance
parameter_list|(
name|double
name|degrees
parameter_list|)
block|{
return|return
name|DistanceUtils
operator|.
name|radians2Dist
argument_list|(
name|toRadians
argument_list|(
name|degrees
argument_list|)
argument_list|,
name|radius
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|pointOnBearing
specifier|public
name|Point
name|pointOnBearing
parameter_list|(
name|Point
name|from
parameter_list|,
name|double
name|dist
parameter_list|,
name|double
name|bearingDEG
parameter_list|,
name|SpatialContext
name|ctx
parameter_list|)
block|{
comment|//TODO avoid unnecessary double[] intermediate object
if|if
condition|(
name|dist
operator|==
literal|0
condition|)
return|return
name|from
return|;
name|double
index|[]
name|latLon
init|=
name|DistanceUtils
operator|.
name|pointOnBearingRAD
argument_list|(
name|toRadians
argument_list|(
name|from
operator|.
name|getY
argument_list|()
argument_list|)
argument_list|,
name|toRadians
argument_list|(
name|from
operator|.
name|getX
argument_list|()
argument_list|)
argument_list|,
name|DistanceUtils
operator|.
name|dist2Radians
argument_list|(
name|dist
argument_list|,
name|ctx
operator|.
name|getUnits
argument_list|()
operator|.
name|earthRadius
argument_list|()
argument_list|)
argument_list|,
name|toRadians
argument_list|(
name|bearingDEG
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|ctx
operator|.
name|makePoint
argument_list|(
name|Math
operator|.
name|toDegrees
argument_list|(
name|latLon
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|Math
operator|.
name|toDegrees
argument_list|(
name|latLon
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|calcBoxByDistFromPt
specifier|public
name|Rectangle
name|calcBoxByDistFromPt
parameter_list|(
name|Point
name|from
parameter_list|,
name|double
name|distance
parameter_list|,
name|SpatialContext
name|ctx
parameter_list|)
block|{
assert|assert
name|radius
operator|==
name|ctx
operator|.
name|getUnits
argument_list|()
operator|.
name|earthRadius
argument_list|()
assert|;
if|if
condition|(
name|distance
operator|==
literal|0
condition|)
return|return
name|from
operator|.
name|getBoundingBox
argument_list|()
return|;
return|return
name|DistanceUtils
operator|.
name|calcBoxByDistFromPtDEG
argument_list|(
name|from
operator|.
name|getY
argument_list|()
argument_list|,
name|from
operator|.
name|getX
argument_list|()
argument_list|,
name|distance
argument_list|,
name|ctx
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|calcBoxByDistFromPtHorizAxis
specifier|public
name|double
name|calcBoxByDistFromPtHorizAxis
parameter_list|(
name|Point
name|from
parameter_list|,
name|double
name|distance
parameter_list|,
name|SpatialContext
name|ctx
parameter_list|)
block|{
return|return
name|DistanceUtils
operator|.
name|calcBoxByDistFromPtHorizAxisDEG
argument_list|(
name|from
operator|.
name|getY
argument_list|()
argument_list|,
name|from
operator|.
name|getX
argument_list|()
argument_list|,
name|distance
argument_list|,
name|radius
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|GeodesicSphereDistCalc
name|that
init|=
operator|(
name|GeodesicSphereDistCalc
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|Double
operator|.
name|compare
argument_list|(
name|that
operator|.
name|radius
argument_list|,
name|radius
argument_list|)
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|long
name|temp
init|=
name|radius
operator|!=
operator|+
literal|0.0d
condition|?
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|radius
argument_list|)
else|:
literal|0L
decl_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
name|temp
operator|^
operator|(
name|temp
operator|>>>
literal|32
operator|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|distance
specifier|public
specifier|final
name|double
name|distance
parameter_list|(
name|Point
name|from
parameter_list|,
name|double
name|toX
parameter_list|,
name|double
name|toY
parameter_list|)
block|{
return|return
name|distanceLatLonRAD
argument_list|(
name|toRadians
argument_list|(
name|from
operator|.
name|getY
argument_list|()
argument_list|)
argument_list|,
name|toRadians
argument_list|(
name|from
operator|.
name|getX
argument_list|()
argument_list|)
argument_list|,
name|toRadians
argument_list|(
name|toY
argument_list|)
argument_list|,
name|toRadians
argument_list|(
name|toX
argument_list|)
argument_list|)
operator|*
name|radius
return|;
block|}
DECL|method|distanceLatLonRAD
specifier|protected
specifier|abstract
name|double
name|distanceLatLonRAD
parameter_list|(
name|double
name|lat1
parameter_list|,
name|double
name|lon1
parameter_list|,
name|double
name|lat2
parameter_list|,
name|double
name|lon2
parameter_list|)
function_decl|;
DECL|class|Haversine
specifier|public
specifier|static
class|class
name|Haversine
extends|extends
name|GeodesicSphereDistCalc
block|{
DECL|method|Haversine
specifier|public
name|Haversine
parameter_list|(
name|double
name|radius
parameter_list|)
block|{
name|super
argument_list|(
name|radius
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|distanceLatLonRAD
specifier|protected
name|double
name|distanceLatLonRAD
parameter_list|(
name|double
name|lat1
parameter_list|,
name|double
name|lon1
parameter_list|,
name|double
name|lat2
parameter_list|,
name|double
name|lon2
parameter_list|)
block|{
return|return
name|DistanceUtils
operator|.
name|distHaversineRAD
argument_list|(
name|lat1
argument_list|,
name|lon1
argument_list|,
name|lat2
argument_list|,
name|lon2
argument_list|)
return|;
block|}
block|}
DECL|class|LawOfCosines
specifier|public
specifier|static
class|class
name|LawOfCosines
extends|extends
name|GeodesicSphereDistCalc
block|{
DECL|method|LawOfCosines
specifier|public
name|LawOfCosines
parameter_list|(
name|double
name|radius
parameter_list|)
block|{
name|super
argument_list|(
name|radius
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|distanceLatLonRAD
specifier|protected
name|double
name|distanceLatLonRAD
parameter_list|(
name|double
name|lat1
parameter_list|,
name|double
name|lon1
parameter_list|,
name|double
name|lat2
parameter_list|,
name|double
name|lon2
parameter_list|)
block|{
return|return
name|DistanceUtils
operator|.
name|distLawOfCosinesRAD
argument_list|(
name|lat1
argument_list|,
name|lon1
argument_list|,
name|lat2
argument_list|,
name|lon2
argument_list|)
return|;
block|}
block|}
DECL|class|Vincenty
specifier|public
specifier|static
class|class
name|Vincenty
extends|extends
name|GeodesicSphereDistCalc
block|{
DECL|method|Vincenty
specifier|public
name|Vincenty
parameter_list|(
name|double
name|radius
parameter_list|)
block|{
name|super
argument_list|(
name|radius
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|distanceLatLonRAD
specifier|protected
name|double
name|distanceLatLonRAD
parameter_list|(
name|double
name|lat1
parameter_list|,
name|double
name|lon1
parameter_list|,
name|double
name|lat2
parameter_list|,
name|double
name|lon2
parameter_list|)
block|{
return|return
name|DistanceUtils
operator|.
name|distVincentyRAD
argument_list|(
name|lat1
argument_list|,
name|lon1
argument_list|,
name|lat2
argument_list|,
name|lon2
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
