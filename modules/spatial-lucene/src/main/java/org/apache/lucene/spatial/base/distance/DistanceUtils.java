begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.base.distance
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|distance
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|context
operator|.
name|SpatialContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|Rectangle
import|;
end_import
begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|toRadians
import|;
end_import
begin_comment
comment|/**  * Various distance calculations and constants.  * Originally from Lucene 3x's old spatial module. It has been modified here.  */
end_comment
begin_class
DECL|class|DistanceUtils
specifier|public
class|class
name|DistanceUtils
block|{
comment|//pre-compute some angles that are commonly used
DECL|field|DEG_45_AS_RADS
specifier|public
specifier|static
specifier|final
name|double
name|DEG_45_AS_RADS
init|=
name|Math
operator|.
name|PI
operator|/
literal|4.0
decl_stmt|;
DECL|field|SIN_45_AS_RADS
specifier|public
specifier|static
specifier|final
name|double
name|SIN_45_AS_RADS
init|=
name|Math
operator|.
name|sin
argument_list|(
name|DEG_45_AS_RADS
argument_list|)
decl_stmt|;
DECL|field|DEG_90_AS_RADS
specifier|public
specifier|static
specifier|final
name|double
name|DEG_90_AS_RADS
init|=
name|Math
operator|.
name|PI
operator|/
literal|2
decl_stmt|;
DECL|field|DEG_180_AS_RADS
specifier|public
specifier|static
specifier|final
name|double
name|DEG_180_AS_RADS
init|=
name|Math
operator|.
name|PI
decl_stmt|;
DECL|field|DEG_225_AS_RADS
specifier|public
specifier|static
specifier|final
name|double
name|DEG_225_AS_RADS
init|=
literal|5
operator|*
name|DEG_45_AS_RADS
decl_stmt|;
DECL|field|DEG_270_AS_RADS
specifier|public
specifier|static
specifier|final
name|double
name|DEG_270_AS_RADS
init|=
literal|3
operator|*
name|DEG_90_AS_RADS
decl_stmt|;
DECL|field|KM_TO_MILES
specifier|public
specifier|static
specifier|final
name|double
name|KM_TO_MILES
init|=
literal|0.621371192
decl_stmt|;
DECL|field|MILES_TO_KM
specifier|public
specifier|static
specifier|final
name|double
name|MILES_TO_KM
init|=
literal|1
operator|/
name|KM_TO_MILES
decl_stmt|;
comment|//1.609
comment|/**    * The International Union of Geodesy and Geophysics says the Earth's mean radius in KM is:    *    * [1] http://en.wikipedia.org/wiki/Earth_radius    */
DECL|field|EARTH_MEAN_RADIUS_KM
specifier|public
specifier|static
specifier|final
name|double
name|EARTH_MEAN_RADIUS_KM
init|=
literal|6371.0087714
decl_stmt|;
DECL|field|EARTH_EQUATORIAL_RADIUS_KM
specifier|public
specifier|static
specifier|final
name|double
name|EARTH_EQUATORIAL_RADIUS_KM
init|=
literal|6378.1370
decl_stmt|;
DECL|field|EARTH_MEAN_RADIUS_MI
specifier|public
specifier|static
specifier|final
name|double
name|EARTH_MEAN_RADIUS_MI
init|=
name|EARTH_MEAN_RADIUS_KM
operator|*
name|KM_TO_MILES
decl_stmt|;
DECL|field|EARTH_EQUATORIAL_RADIUS_MI
specifier|public
specifier|static
specifier|final
name|double
name|EARTH_EQUATORIAL_RADIUS_MI
init|=
name|EARTH_EQUATORIAL_RADIUS_KM
operator|*
name|KM_TO_MILES
decl_stmt|;
comment|/**    * Calculate the p-norm (i.e. length) between two vectors    *    * @param vec1  The first vector    * @param vec2  The second vector    * @param power The power (2 for cartesian distance, 1 for manhattan, etc.)    * @return The length.    *<p/>    *         See http://en.wikipedia.org/wiki/Lp_space    * @see #vectorDistance(double[], double[], double, double)    */
DECL|method|vectorDistance
specifier|public
specifier|static
name|double
name|vectorDistance
parameter_list|(
name|double
index|[]
name|vec1
parameter_list|,
name|double
index|[]
name|vec2
parameter_list|,
name|double
name|power
parameter_list|)
block|{
return|return
name|vectorDistance
argument_list|(
name|vec1
argument_list|,
name|vec2
argument_list|,
name|power
argument_list|,
literal|1.0
operator|/
name|power
argument_list|)
return|;
block|}
comment|/**    * Calculate the p-norm (i.e. length) between two vectors    *    * @param vec1         The first vector    * @param vec2         The second vector    * @param power        The power (2 for cartesian distance, 1 for manhattan, etc.)    * @param oneOverPower If you've precalculated oneOverPower and cached it, use this method to save one division operation over {@link #vectorDistance(double[], double[], double)}.    * @return The length.    */
DECL|method|vectorDistance
specifier|public
specifier|static
name|double
name|vectorDistance
parameter_list|(
name|double
index|[]
name|vec1
parameter_list|,
name|double
index|[]
name|vec2
parameter_list|,
name|double
name|power
parameter_list|,
name|double
name|oneOverPower
parameter_list|)
block|{
name|double
name|result
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|power
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vec1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|+=
name|vec1
index|[
name|i
index|]
operator|-
name|vec2
index|[
name|i
index|]
operator|==
literal|0
condition|?
literal|0
else|:
literal|1
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|power
operator|==
literal|1.0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vec1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|+=
name|vec1
index|[
name|i
index|]
operator|-
name|vec2
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|power
operator|==
literal|2.0
condition|)
block|{
name|result
operator|=
name|Math
operator|.
name|sqrt
argument_list|(
name|distSquaredCartesian
argument_list|(
name|vec1
argument_list|,
name|vec2
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|power
operator|==
name|Integer
operator|.
name|MAX_VALUE
operator|||
name|Double
operator|.
name|isInfinite
argument_list|(
name|power
argument_list|)
condition|)
block|{
comment|//infinite norm?
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vec1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|=
name|Math
operator|.
name|max
argument_list|(
name|result
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|vec1
index|[
name|i
index|]
argument_list|,
name|vec2
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vec1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|+=
name|Math
operator|.
name|pow
argument_list|(
name|vec1
index|[
name|i
index|]
operator|-
name|vec2
index|[
name|i
index|]
argument_list|,
name|power
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|Math
operator|.
name|pow
argument_list|(
name|result
argument_list|,
name|oneOverPower
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Return the coordinates of a vector that is the corner of a box (upper right or lower left), assuming a Rectangular    * coordinate system.  Note, this does not apply for points on a sphere or ellipse (although it could be used as an approximation).    *    * @param center     The center point    * @param result Holds the result, potentially resizing if needed.    * @param distance   The d from the center to the corner    * @param upperRight If true, return the coords for the upper right corner, else return the lower left.    * @return The point, either the upperLeft or the lower right    */
DECL|method|vectorBoxCorner
specifier|public
specifier|static
name|double
index|[]
name|vectorBoxCorner
parameter_list|(
name|double
index|[]
name|center
parameter_list|,
name|double
index|[]
name|result
parameter_list|,
name|double
name|distance
parameter_list|,
name|boolean
name|upperRight
parameter_list|)
block|{
if|if
condition|(
name|result
operator|==
literal|null
operator|||
name|result
operator|.
name|length
operator|!=
name|center
operator|.
name|length
condition|)
block|{
name|result
operator|=
operator|new
name|double
index|[
name|center
operator|.
name|length
index|]
expr_stmt|;
block|}
if|if
condition|(
name|upperRight
operator|==
literal|false
condition|)
block|{
name|distance
operator|=
operator|-
name|distance
expr_stmt|;
block|}
comment|//We don't care about the power here,
comment|// b/c we are always in a rectangular coordinate system, so any norm can be used by
comment|//using the definition of sine
name|distance
operator|=
name|SIN_45_AS_RADS
operator|*
name|distance
expr_stmt|;
comment|// sin(Pi/4) == (2^0.5)/2 == opp/hyp == opp/distance, solve for opp, similarly for cosine
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|center
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|center
index|[
name|i
index|]
operator|+
name|distance
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Given a start point (startLat, startLon) and a bearing on a sphere of radius<i>sphereRadius</i>, return the destination point.    *    *    * @param startLat The starting point latitude, in radians    * @param startLon The starting point longitude, in radians    * @param distanceRAD The distance to travel along the bearing in radians.    * @param bearingRAD The bearing, in radians.  North is a 0, moving clockwise till radians(360).    * @param result A preallocated array to hold the results.  If null, a new one is constructed.    * @return The destination point, in radians.  First entry is latitude, second is longitude    */
DECL|method|pointOnBearingRAD
specifier|public
specifier|static
name|double
index|[]
name|pointOnBearingRAD
parameter_list|(
name|double
name|startLat
parameter_list|,
name|double
name|startLon
parameter_list|,
name|double
name|distanceRAD
parameter_list|,
name|double
name|bearingRAD
parameter_list|,
name|double
index|[]
name|result
parameter_list|)
block|{
comment|/*  	lat2 = asin(sin(lat1)*cos(d/R) + cos(lat1)*sin(d/R)*cos(Î¸))   	lon2 = lon1 + atan2(sin(Î¸)*sin(d/R)*cos(lat1), cos(d/R)âsin(lat1)*sin(lat2))       */
name|double
name|cosAngDist
init|=
name|Math
operator|.
name|cos
argument_list|(
name|distanceRAD
argument_list|)
decl_stmt|;
name|double
name|cosStartLat
init|=
name|Math
operator|.
name|cos
argument_list|(
name|startLat
argument_list|)
decl_stmt|;
name|double
name|sinAngDist
init|=
name|Math
operator|.
name|sin
argument_list|(
name|distanceRAD
argument_list|)
decl_stmt|;
name|double
name|sinStartLat
init|=
name|Math
operator|.
name|sin
argument_list|(
name|startLat
argument_list|)
decl_stmt|;
name|double
name|lat2
init|=
name|Math
operator|.
name|asin
argument_list|(
name|sinStartLat
operator|*
name|cosAngDist
operator|+
name|cosStartLat
operator|*
name|sinAngDist
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|bearingRAD
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|lon2
init|=
name|startLon
operator|+
name|Math
operator|.
name|atan2
argument_list|(
name|Math
operator|.
name|sin
argument_list|(
name|bearingRAD
argument_list|)
operator|*
name|sinAngDist
operator|*
name|cosStartLat
argument_list|,
name|cosAngDist
operator|-
name|sinStartLat
operator|*
name|Math
operator|.
name|sin
argument_list|(
name|lat2
argument_list|)
argument_list|)
decl_stmt|;
comment|/*lat2 = (lat2*180)/Math.PI;     lon2 = (lon2*180)/Math.PI;*/
comment|//From Lucene.  Move back to Lucene when synced
comment|// normalize lon first
if|if
condition|(
name|result
operator|==
literal|null
operator|||
name|result
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|result
operator|=
operator|new
name|double
index|[
literal|2
index|]
expr_stmt|;
block|}
name|result
index|[
literal|0
index|]
operator|=
name|lat2
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
name|lon2
expr_stmt|;
name|normLngRAD
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// normalize lat - could flip poles
name|normLatRAD
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * @param latLng The lat/lon, in radians. lat in position 0, lon in position 1    */
DECL|method|normLatRAD
specifier|public
specifier|static
name|void
name|normLatRAD
parameter_list|(
name|double
index|[]
name|latLng
parameter_list|)
block|{
if|if
condition|(
name|latLng
index|[
literal|0
index|]
operator|>
name|DEG_90_AS_RADS
condition|)
block|{
name|latLng
index|[
literal|0
index|]
operator|=
name|DEG_90_AS_RADS
operator|-
operator|(
name|latLng
index|[
literal|0
index|]
operator|-
name|DEG_90_AS_RADS
operator|)
expr_stmt|;
if|if
condition|(
name|latLng
index|[
literal|1
index|]
operator|<
literal|0
condition|)
block|{
name|latLng
index|[
literal|1
index|]
operator|=
name|latLng
index|[
literal|1
index|]
operator|+
name|DEG_180_AS_RADS
expr_stmt|;
block|}
else|else
block|{
name|latLng
index|[
literal|1
index|]
operator|=
name|latLng
index|[
literal|1
index|]
operator|-
name|DEG_180_AS_RADS
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|latLng
index|[
literal|0
index|]
operator|<
operator|-
name|DEG_90_AS_RADS
condition|)
block|{
name|latLng
index|[
literal|0
index|]
operator|=
operator|-
name|DEG_90_AS_RADS
operator|-
operator|(
name|latLng
index|[
literal|0
index|]
operator|+
name|DEG_90_AS_RADS
operator|)
expr_stmt|;
if|if
condition|(
name|latLng
index|[
literal|1
index|]
operator|<
literal|0
condition|)
block|{
name|latLng
index|[
literal|1
index|]
operator|=
name|latLng
index|[
literal|1
index|]
operator|+
name|DEG_180_AS_RADS
expr_stmt|;
block|}
else|else
block|{
name|latLng
index|[
literal|1
index|]
operator|=
name|latLng
index|[
literal|1
index|]
operator|-
name|DEG_180_AS_RADS
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Returns a normalized Lng rectangle shape for the bounding box    *    * @param latLng The lat/lon, in radians, lat in position 0, lon in position 1    */
annotation|@
name|Deprecated
DECL|method|normLngRAD
specifier|public
specifier|static
name|void
name|normLngRAD
parameter_list|(
name|double
index|[]
name|latLng
parameter_list|)
block|{
if|if
condition|(
name|latLng
index|[
literal|1
index|]
operator|>
name|DEG_180_AS_RADS
condition|)
block|{
name|latLng
index|[
literal|1
index|]
operator|=
operator|-
literal|1.0
operator|*
operator|(
name|DEG_180_AS_RADS
operator|-
operator|(
name|latLng
index|[
literal|1
index|]
operator|-
name|DEG_180_AS_RADS
operator|)
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|latLng
index|[
literal|1
index|]
operator|<
operator|-
name|DEG_180_AS_RADS
condition|)
block|{
name|latLng
index|[
literal|1
index|]
operator|=
operator|(
name|latLng
index|[
literal|1
index|]
operator|+
name|DEG_180_AS_RADS
operator|)
operator|+
name|DEG_180_AS_RADS
expr_stmt|;
block|}
block|}
comment|/**    * Puts in range -180<= lon_deg< +180.    */
DECL|method|normLonDEG
specifier|public
specifier|static
name|double
name|normLonDEG
parameter_list|(
name|double
name|lon_deg
parameter_list|)
block|{
if|if
condition|(
name|lon_deg
operator|>=
operator|-
literal|180
operator|&&
name|lon_deg
operator|<
literal|180
condition|)
return|return
name|lon_deg
return|;
comment|//common case, and avoids slight double precision shifting
name|double
name|off
init|=
operator|(
name|lon_deg
operator|+
literal|180
operator|)
operator|%
literal|360
decl_stmt|;
return|return
name|off
operator|<
literal|0
condition|?
literal|180
operator|+
name|off
else|:
operator|-
literal|180
operator|+
name|off
return|;
block|}
comment|/**    * Puts in range -90<= lat_deg<= 90.    */
DECL|method|normLatDEG
specifier|public
specifier|static
name|double
name|normLatDEG
parameter_list|(
name|double
name|lat_deg
parameter_list|)
block|{
if|if
condition|(
name|lat_deg
operator|>=
operator|-
literal|90
operator|&&
name|lat_deg
operator|<=
literal|90
condition|)
return|return
name|lat_deg
return|;
comment|//common case, and avoids slight double precision shifting
name|double
name|off
init|=
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|lat_deg
operator|+
literal|90
operator|)
operator|%
literal|360
argument_list|)
decl_stmt|;
return|return
operator|(
name|off
operator|<=
literal|180
condition|?
name|off
else|:
literal|360
operator|-
name|off
operator|)
operator|-
literal|90
return|;
block|}
DECL|method|calcBoxByDistFromPtDEG
specifier|public
specifier|static
name|Rectangle
name|calcBoxByDistFromPtDEG
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|,
name|double
name|distance
parameter_list|,
name|SpatialContext
name|ctx
parameter_list|)
block|{
comment|//See http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates Section 3.1, 3.2 and 3.3
name|double
name|radius
init|=
name|ctx
operator|.
name|getUnits
argument_list|()
operator|.
name|earthRadius
argument_list|()
decl_stmt|;
name|double
name|dist_rad
init|=
name|distance
operator|/
name|radius
decl_stmt|;
name|double
name|dist_deg
init|=
name|Math
operator|.
name|toDegrees
argument_list|(
name|dist_rad
argument_list|)
decl_stmt|;
if|if
condition|(
name|dist_deg
operator|==
literal|0
condition|)
return|return
name|ctx
operator|.
name|makeRect
argument_list|(
name|lon
argument_list|,
name|lon
argument_list|,
name|lat
argument_list|,
name|lat
argument_list|)
return|;
if|if
condition|(
name|dist_deg
operator|>=
literal|180
condition|)
comment|//distance is>= opposite side of the globe
return|return
name|ctx
operator|.
name|getWorldBounds
argument_list|()
return|;
comment|//--calc latitude bounds
name|double
name|latN_deg
init|=
name|lat
operator|+
name|dist_deg
decl_stmt|;
name|double
name|latS_deg
init|=
name|lat
operator|-
name|dist_deg
decl_stmt|;
if|if
condition|(
name|latN_deg
operator|>=
literal|90
operator|||
name|latS_deg
operator|<=
operator|-
literal|90
condition|)
block|{
comment|//touches either pole
comment|//we have special logic for longitude
name|double
name|lonW_deg
init|=
operator|-
literal|180
decl_stmt|,
name|lonE_deg
init|=
literal|180
decl_stmt|;
comment|//world wrap: 360 deg
if|if
condition|(
name|latN_deg
operator|<=
literal|90
operator|&&
name|latS_deg
operator|>=
operator|-
literal|90
condition|)
block|{
comment|//doesn't pass either pole: 180 deg
name|lonW_deg
operator|=
name|lon
operator|-
literal|90
expr_stmt|;
name|lonE_deg
operator|=
name|lon
operator|+
literal|90
expr_stmt|;
block|}
if|if
condition|(
name|latN_deg
operator|>
literal|90
condition|)
name|latN_deg
operator|=
literal|90
expr_stmt|;
if|if
condition|(
name|latS_deg
operator|<
operator|-
literal|90
condition|)
name|latS_deg
operator|=
operator|-
literal|90
expr_stmt|;
return|return
name|ctx
operator|.
name|makeRect
argument_list|(
name|lonW_deg
argument_list|,
name|lonE_deg
argument_list|,
name|latS_deg
argument_list|,
name|latN_deg
argument_list|)
return|;
block|}
else|else
block|{
comment|//--calc longitude bounds
name|double
name|lon_delta_deg
init|=
name|calcBoxByDistFromPtVertAxisOffsetDEG
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|,
name|distance
argument_list|,
name|radius
argument_list|)
decl_stmt|;
name|double
name|lonW_deg
init|=
name|lon
operator|-
name|lon_delta_deg
decl_stmt|;
name|double
name|lonE_deg
init|=
name|lon
operator|+
name|lon_delta_deg
decl_stmt|;
return|return
name|ctx
operator|.
name|makeRect
argument_list|(
name|lonW_deg
argument_list|,
name|lonE_deg
argument_list|,
name|latS_deg
argument_list|,
name|latN_deg
argument_list|)
return|;
comment|//ctx will normalize longitude
block|}
block|}
DECL|method|calcBoxByDistFromPtVertAxisOffsetDEG
specifier|public
specifier|static
name|double
name|calcBoxByDistFromPtVertAxisOffsetDEG
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|,
name|double
name|distance
parameter_list|,
name|double
name|radius
parameter_list|)
block|{
comment|//http://gis.stackexchange.com/questions/19221/find-tangent-point-on-circle-furthest-east-or-west
if|if
condition|(
name|distance
operator|==
literal|0
condition|)
return|return
literal|0
return|;
name|double
name|lat_rad
init|=
name|toRadians
argument_list|(
name|lat
argument_list|)
decl_stmt|;
name|double
name|dist_rad
init|=
name|distance
operator|/
name|radius
decl_stmt|;
name|double
name|result_rad
init|=
name|Math
operator|.
name|asin
argument_list|(
name|Math
operator|.
name|sin
argument_list|(
name|dist_rad
argument_list|)
operator|/
name|Math
operator|.
name|cos
argument_list|(
name|lat_rad
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Double
operator|.
name|isNaN
argument_list|(
name|result_rad
argument_list|)
condition|)
return|return
name|Math
operator|.
name|toDegrees
argument_list|(
name|result_rad
argument_list|)
return|;
return|return
literal|90
return|;
block|}
DECL|method|calcBoxByDistFromPtHorizAxisDEG
specifier|public
specifier|static
name|double
name|calcBoxByDistFromPtHorizAxisDEG
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|,
name|double
name|distance
parameter_list|,
name|double
name|radius
parameter_list|)
block|{
comment|//http://gis.stackexchange.com/questions/19221/find-tangent-point-on-circle-furthest-east-or-west
if|if
condition|(
name|distance
operator|==
literal|0
condition|)
return|return
name|lat
return|;
name|double
name|lat_rad
init|=
name|toRadians
argument_list|(
name|lat
argument_list|)
decl_stmt|;
name|double
name|dist_rad
init|=
name|distance
operator|/
name|radius
decl_stmt|;
name|double
name|result_rad
init|=
name|Math
operator|.
name|asin
argument_list|(
name|Math
operator|.
name|sin
argument_list|(
name|lat_rad
argument_list|)
operator|/
name|Math
operator|.
name|cos
argument_list|(
name|dist_rad
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Double
operator|.
name|isNaN
argument_list|(
name|result_rad
argument_list|)
condition|)
return|return
name|Math
operator|.
name|toDegrees
argument_list|(
name|result_rad
argument_list|)
return|;
comment|//TODO should we use use ctx.getBoundaryNudgeDegrees() offsets here or let caller?
if|if
condition|(
name|lat
operator|>
literal|0
condition|)
return|return
literal|90
return|;
if|if
condition|(
name|lat
operator|<
literal|0
condition|)
return|return
operator|-
literal|90
return|;
return|return
name|lat
return|;
block|}
comment|/**    * The square of the cartesian Distance.  Not really a distance, but useful if all that matters is    * comparing the result to another one.    *    * @param vec1 The first point    * @param vec2 The second point    * @return The squared cartesian distance    */
DECL|method|distSquaredCartesian
specifier|public
specifier|static
name|double
name|distSquaredCartesian
parameter_list|(
name|double
index|[]
name|vec1
parameter_list|,
name|double
index|[]
name|vec2
parameter_list|)
block|{
name|double
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vec1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|double
name|v
init|=
name|vec1
index|[
name|i
index|]
operator|-
name|vec2
index|[
name|i
index|]
decl_stmt|;
name|result
operator|+=
name|v
operator|*
name|v
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    *    * @param lat1     The y coordinate of the first point, in radians    * @param lon1     The x coordinate of the first point, in radians    * @param lat2     The y coordinate of the second point, in radians    * @param lon2     The x coordinate of the second point, in radians    * @return The distance between the two points, as determined by the Haversine formula, in radians.    */
DECL|method|distHaversineRAD
specifier|public
specifier|static
name|double
name|distHaversineRAD
parameter_list|(
name|double
name|lat1
parameter_list|,
name|double
name|lon1
parameter_list|,
name|double
name|lat2
parameter_list|,
name|double
name|lon2
parameter_list|)
block|{
comment|//TODO investigate slightly different formula using asin() and min() http://www.movable-type.co.uk/scripts/gis-faq-5.1.html
comment|// Check for same position
if|if
condition|(
name|lat1
operator|==
name|lat2
operator|&&
name|lon1
operator|==
name|lon2
condition|)
return|return
literal|0.0
return|;
name|double
name|hsinX
init|=
name|Math
operator|.
name|sin
argument_list|(
operator|(
name|lon1
operator|-
name|lon2
operator|)
operator|*
literal|0.5
argument_list|)
decl_stmt|;
name|double
name|hsinY
init|=
name|Math
operator|.
name|sin
argument_list|(
operator|(
name|lat1
operator|-
name|lat2
operator|)
operator|*
literal|0.5
argument_list|)
decl_stmt|;
name|double
name|h
init|=
name|hsinY
operator|*
name|hsinY
operator|+
operator|(
name|Math
operator|.
name|cos
argument_list|(
name|lat1
argument_list|)
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|lat2
argument_list|)
operator|*
name|hsinX
operator|*
name|hsinX
operator|)
decl_stmt|;
return|return
literal|2
operator|*
name|Math
operator|.
name|atan2
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|h
argument_list|)
argument_list|,
name|Math
operator|.
name|sqrt
argument_list|(
literal|1
operator|-
name|h
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Calculates the distance between two lat/lng's using the Law of Cosines. Due to numeric conditioning    * errors, it is not as accurate as the Haversine formula for small distances.  But with    * double precision, it isn't that bad --<a href="http://www.movable-type.co.uk/scripts/latlong.html">    *   allegedly 1 meter</a>.    *<p/>    * See<a href="http://gis.stackexchange.com/questions/4906/why-is-law-of-cosines-more-preferable-than-haversine-when-calculating-distance-b">    *  Why is law of cosines more preferable than haversine when calculating distance between two latitude-longitude points?</a>    *<p/>    * The arguments and return value are in radians.    */
DECL|method|distLawOfCosinesRAD
specifier|public
specifier|static
name|double
name|distLawOfCosinesRAD
parameter_list|(
name|double
name|lat1
parameter_list|,
name|double
name|lon1
parameter_list|,
name|double
name|lat2
parameter_list|,
name|double
name|lon2
parameter_list|)
block|{
comment|//TODO validate formula
comment|//(MIGRATED FROM org.apache.lucene.spatial.geometry.LatLng.arcDistance())
comment|// Imported from mq java client.  Variable references changed to match.
comment|// Check for same position
if|if
condition|(
name|lat1
operator|==
name|lat2
operator|&&
name|lon1
operator|==
name|lon2
condition|)
return|return
literal|0.0
return|;
comment|// Get the m_dLongitude difference. Don't need to worry about
comment|// crossing 180 since cos(x) = cos(-x)
name|double
name|dLon
init|=
name|lon2
operator|-
name|lon1
decl_stmt|;
name|double
name|a
init|=
name|DEG_90_AS_RADS
operator|-
name|lat1
decl_stmt|;
name|double
name|c
init|=
name|DEG_90_AS_RADS
operator|-
name|lat2
decl_stmt|;
name|double
name|cosB
init|=
operator|(
name|Math
operator|.
name|cos
argument_list|(
name|a
argument_list|)
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|c
argument_list|)
operator|)
operator|+
operator|(
name|Math
operator|.
name|sin
argument_list|(
name|a
argument_list|)
operator|*
name|Math
operator|.
name|sin
argument_list|(
name|c
argument_list|)
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|dLon
argument_list|)
operator|)
decl_stmt|;
comment|// Find angle subtended (with some bounds checking) in radians
if|if
condition|(
name|cosB
operator|<
operator|-
literal|1.0
condition|)
return|return
name|Math
operator|.
name|PI
return|;
elseif|else
if|if
condition|(
name|cosB
operator|>=
literal|1.0
condition|)
return|return
literal|0
return|;
else|else
return|return
name|Math
operator|.
name|acos
argument_list|(
name|cosB
argument_list|)
return|;
block|}
comment|/**    * Calculates the great circle distance using the Vincenty Formula, simplified for a spherical model. This formula    * is accurate for any pair of points. The equation    * was taken from<a href="http://en.wikipedia.org/wiki/Great-circle_distance">Wikipedia</a>.    *<p/>    * The arguments are in radians, and the result is in radians.    */
DECL|method|distVincentyRAD
specifier|public
specifier|static
name|double
name|distVincentyRAD
parameter_list|(
name|double
name|lat1
parameter_list|,
name|double
name|lon1
parameter_list|,
name|double
name|lat2
parameter_list|,
name|double
name|lon2
parameter_list|)
block|{
comment|// Check for same position
if|if
condition|(
name|lat1
operator|==
name|lat2
operator|&&
name|lon1
operator|==
name|lon2
condition|)
return|return
literal|0.0
return|;
name|double
name|cosLat1
init|=
name|Math
operator|.
name|cos
argument_list|(
name|lat1
argument_list|)
decl_stmt|;
name|double
name|cosLat2
init|=
name|Math
operator|.
name|cos
argument_list|(
name|lat2
argument_list|)
decl_stmt|;
name|double
name|sinLat1
init|=
name|Math
operator|.
name|sin
argument_list|(
name|lat1
argument_list|)
decl_stmt|;
name|double
name|sinLat2
init|=
name|Math
operator|.
name|sin
argument_list|(
name|lat2
argument_list|)
decl_stmt|;
name|double
name|dLon
init|=
name|lon2
operator|-
name|lon1
decl_stmt|;
name|double
name|cosDLon
init|=
name|Math
operator|.
name|cos
argument_list|(
name|dLon
argument_list|)
decl_stmt|;
name|double
name|sinDLon
init|=
name|Math
operator|.
name|sin
argument_list|(
name|dLon
argument_list|)
decl_stmt|;
name|double
name|a
init|=
name|cosLat2
operator|*
name|sinDLon
decl_stmt|;
name|double
name|b
init|=
name|cosLat1
operator|*
name|sinLat2
operator|-
name|sinLat1
operator|*
name|cosLat2
operator|*
name|cosDLon
decl_stmt|;
name|double
name|c
init|=
name|sinLat1
operator|*
name|sinLat2
operator|+
name|cosLat1
operator|*
name|cosLat2
operator|*
name|cosDLon
decl_stmt|;
return|return
name|Math
operator|.
name|atan2
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|a
operator|*
name|a
operator|+
name|b
operator|*
name|b
argument_list|)
argument_list|,
name|c
argument_list|)
return|;
block|}
comment|/**    * Converts a distance in the units of the radius to degrees (360 degrees are in a circle). A spherical    * earth model is assumed.    */
DECL|method|dist2Degrees
specifier|public
specifier|static
name|double
name|dist2Degrees
parameter_list|(
name|double
name|dist
parameter_list|,
name|double
name|radius
parameter_list|)
block|{
return|return
name|Math
operator|.
name|toDegrees
argument_list|(
name|dist2Radians
argument_list|(
name|dist
argument_list|,
name|radius
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Converts a distance in the units of the radius to radians (multiples of the radius). A spherical    * earth model is assumed.    */
DECL|method|dist2Radians
specifier|public
specifier|static
name|double
name|dist2Radians
parameter_list|(
name|double
name|dist
parameter_list|,
name|double
name|radius
parameter_list|)
block|{
return|return
name|dist
operator|/
name|radius
return|;
block|}
DECL|method|radians2Dist
specifier|public
specifier|static
name|double
name|radians2Dist
parameter_list|(
name|double
name|radians
parameter_list|,
name|double
name|radius
parameter_list|)
block|{
return|return
name|radians
operator|*
name|radius
return|;
block|}
block|}
end_class
end_unit
