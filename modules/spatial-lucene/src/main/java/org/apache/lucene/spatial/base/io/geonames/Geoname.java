begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.base.io.geonames
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|io
operator|.
name|geonames
package|;
end_package
begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import
begin_class
DECL|class|Geoname
specifier|public
class|class
name|Geoname
block|{
DECL|field|id
specifier|public
name|int
name|id
decl_stmt|;
DECL|field|name
specifier|public
name|String
name|name
decl_stmt|;
comment|// name of geographical point (utf8) varchar(200)
DECL|field|nameASCII
specifier|public
name|String
name|nameASCII
decl_stmt|;
comment|// name of geographical point in plain ascii characters, varchar(200)
DECL|field|alternateNames
specifier|public
name|String
index|[]
name|alternateNames
decl_stmt|;
comment|// alternatenames, comma separated varchar(5000)
DECL|field|latitude
specifier|public
name|double
name|latitude
decl_stmt|;
DECL|field|longitude
specifier|public
name|double
name|longitude
decl_stmt|;
DECL|field|featureClass
specifier|public
name|char
name|featureClass
decl_stmt|;
DECL|field|featureCode
specifier|public
name|String
name|featureCode
decl_stmt|;
comment|// 10
DECL|field|countryCode
specifier|public
name|String
name|countryCode
decl_stmt|;
comment|// 2
DECL|field|countryCode2
specifier|public
name|String
index|[]
name|countryCode2
decl_stmt|;
comment|// alternate country codes, comma separated, ISO-3166 2-letter country code, 60 characters
DECL|field|adminCode1
specifier|public
name|String
name|adminCode1
decl_stmt|;
comment|// fipscode (subject to change to iso code), see exceptions below, see file admin1Codes.txt for display names of this code; varchar(20)
DECL|field|adminCode2
specifier|public
name|String
name|adminCode2
decl_stmt|;
comment|// code for the second administrative division, a county in the US, see file admin2Codes.txt; varchar(80)
DECL|field|adminCode3
specifier|public
name|String
name|adminCode3
decl_stmt|;
comment|// code for third level administrative division, varchar(20)
DECL|field|adminCode4
specifier|public
name|String
name|adminCode4
decl_stmt|;
comment|// code for fourth level administrative division, varchar(20)
DECL|field|population
specifier|public
name|Long
name|population
decl_stmt|;
DECL|field|elevation
specifier|public
name|Integer
name|elevation
decl_stmt|;
comment|// in meters, integer
DECL|field|gtopo30
specifier|public
name|Integer
name|gtopo30
decl_stmt|;
comment|// average elevation of 30'x30' (ca 900mx900m) area in meters, integer
DECL|field|timezone
specifier|public
name|String
name|timezone
decl_stmt|;
DECL|field|modified
specifier|public
name|Date
name|modified
decl_stmt|;
comment|// date of last modification in yyyy-MM-dd format
DECL|method|Geoname
specifier|public
name|Geoname
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|String
index|[]
name|vals
init|=
name|line
operator|.
name|split
argument_list|(
literal|"\t"
argument_list|)
decl_stmt|;
name|id
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|vals
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|name
operator|=
name|vals
index|[
literal|1
index|]
expr_stmt|;
name|nameASCII
operator|=
name|vals
index|[
literal|2
index|]
expr_stmt|;
name|alternateNames
operator|=
name|vals
index|[
literal|3
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|latitude
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|vals
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|longitude
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|vals
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|featureClass
operator|=
name|vals
index|[
literal|6
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|vals
index|[
literal|6
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
else|:
literal|'S'
expr_stmt|;
name|featureCode
operator|=
name|vals
index|[
literal|7
index|]
expr_stmt|;
name|countryCode
operator|=
name|vals
index|[
literal|8
index|]
expr_stmt|;
name|countryCode2
operator|=
name|vals
index|[
literal|9
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|adminCode1
operator|=
name|vals
index|[
literal|10
index|]
expr_stmt|;
name|adminCode2
operator|=
name|vals
index|[
literal|11
index|]
expr_stmt|;
name|adminCode3
operator|=
name|vals
index|[
literal|12
index|]
expr_stmt|;
name|adminCode4
operator|=
name|vals
index|[
literal|13
index|]
expr_stmt|;
if|if
condition|(
name|vals
index|[
literal|14
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|population
operator|=
name|Long
operator|.
name|decode
argument_list|(
name|vals
index|[
literal|14
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|vals
index|[
literal|15
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|elevation
operator|=
name|Integer
operator|.
name|decode
argument_list|(
name|vals
index|[
literal|15
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|vals
index|[
literal|16
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|gtopo30
operator|=
name|Integer
operator|.
name|decode
argument_list|(
name|vals
index|[
literal|16
index|]
argument_list|)
expr_stmt|;
block|}
name|timezone
operator|=
name|vals
index|[
literal|17
index|]
expr_stmt|;
if|if
condition|(
name|vals
index|[
literal|18
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|modified
operator|=
name|Date
operator|.
name|valueOf
argument_list|(
name|vals
index|[
literal|18
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
