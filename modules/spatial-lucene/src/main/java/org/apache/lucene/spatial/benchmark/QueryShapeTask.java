begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.benchmark
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|benchmark
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|PerfRunData
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|tasks
operator|.
name|PerfTask
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|utils
operator|.
name|Config
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|query
operator|.
name|SpatialArgs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|query
operator|.
name|SpatialArgsParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|strategy
operator|.
name|SpatialFieldInfo
import|;
end_import
begin_class
DECL|class|QueryShapeTask
specifier|public
specifier|abstract
class|class
name|QueryShapeTask
parameter_list|<
name|T
extends|extends
name|SpatialFieldInfo
parameter_list|>
extends|extends
name|PerfTask
implements|implements
name|StrategyAware
argument_list|<
name|T
argument_list|>
block|{
DECL|field|spatialArgs
specifier|private
name|SpatialArgs
name|spatialArgs
decl_stmt|;
DECL|method|QueryShapeTask
specifier|public
name|QueryShapeTask
parameter_list|(
name|PerfRunData
name|runData
parameter_list|)
block|{
name|super
argument_list|(
name|runData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|Config
name|config
init|=
name|getRunData
argument_list|()
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|String
name|rawQuery
init|=
name|config
operator|.
name|get
argument_list|(
literal|"query.shapequery"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
comment|// TODO (cmale) - Come up with default query
name|this
operator|.
name|spatialArgs
operator|=
operator|new
name|SpatialArgsParser
argument_list|()
operator|.
name|parse
argument_list|(
name|rawQuery
argument_list|,
name|getSpatialContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doLogic
specifier|public
name|int
name|doLogic
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|createSpatialStrategy
argument_list|()
operator|.
name|makeQuery
argument_list|(
name|spatialArgs
argument_list|,
name|createFieldInfo
argument_list|()
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|getRunData
argument_list|()
operator|.
name|getIndexSearcher
argument_list|()
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Numfound: "
operator|+
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
end_class
end_unit
