begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.base.io
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|io
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_class
DECL|class|LineReader
specifier|public
specifier|abstract
class|class
name|LineReader
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|T
argument_list|>
block|{
DECL|field|count
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
DECL|field|lineNumber
specifier|private
name|int
name|lineNumber
init|=
literal|0
decl_stmt|;
DECL|field|reader
specifier|private
name|BufferedReader
name|reader
decl_stmt|;
DECL|field|nextLine
specifier|private
name|String
name|nextLine
decl_stmt|;
DECL|method|parseLine
specifier|public
specifier|abstract
name|T
name|parseLine
parameter_list|(
name|String
name|line
parameter_list|)
function_decl|;
DECL|method|readComment
specifier|protected
name|void
name|readComment
parameter_list|(
name|String
name|line
parameter_list|)
block|{    }
DECL|method|LineReader
specifier|public
name|LineReader
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|next
argument_list|()
expr_stmt|;
block|}
DECL|method|LineReader
specifier|public
name|LineReader
parameter_list|(
name|Reader
name|r
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|r
operator|instanceof
name|BufferedReader
condition|)
block|{
name|reader
operator|=
operator|(
name|BufferedReader
operator|)
name|r
expr_stmt|;
block|}
else|else
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|next
argument_list|()
expr_stmt|;
block|}
DECL|method|LineReader
specifier|public
name|LineReader
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|next
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|nextLine
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|T
name|next
parameter_list|()
block|{
name|T
name|val
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nextLine
operator|!=
literal|null
condition|)
block|{
name|val
operator|=
name|parseLine
argument_list|(
name|nextLine
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
while|while
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|nextLine
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|lineNumber
operator|++
expr_stmt|;
if|if
condition|(
name|nextLine
operator|==
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nextLine
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|readComment
argument_list|(
name|nextLine
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nextLine
operator|=
name|nextLine
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextLine
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"IOException thrown while reading/closing reader"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
return|return
name|val
return|;
block|}
annotation|@
name|Override
DECL|method|remove
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|getLineNumber
specifier|public
name|int
name|getLineNumber
parameter_list|()
block|{
return|return
name|lineNumber
return|;
block|}
DECL|method|getCount
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
block|}
end_class
end_unit
