begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.base.prefix.geohash
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|prefix
operator|.
name|geohash
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|context
operator|.
name|SpatialContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|context
operator|.
name|simple
operator|.
name|SimpleSpatialContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|distance
operator|.
name|DistanceUnits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|Point
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import
begin_comment
comment|/**  * Tests for {@link GeohashUtils}  */
end_comment
begin_class
DECL|class|TestGeohashUtils
specifier|public
class|class
name|TestGeohashUtils
block|{
DECL|field|ctx
name|SpatialContext
name|ctx
init|=
operator|new
name|SimpleSpatialContext
argument_list|(
name|DistanceUnits
operator|.
name|KILOMETERS
argument_list|)
decl_stmt|;
comment|/**    * Pass condition: lat=42.6, lng=-5.6 should be encoded as "ezs42e44yx96",    * lat=57.64911 lng=10.40744 should be encoded as "u4pruydqqvj8"    */
annotation|@
name|Test
DECL|method|testEncode
specifier|public
name|void
name|testEncode
parameter_list|()
block|{
name|String
name|hash
init|=
name|GeohashUtils
operator|.
name|encodeLatLon
argument_list|(
literal|42.6
argument_list|,
operator|-
literal|5.6
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ezs42e44yx96"
argument_list|,
name|hash
argument_list|)
expr_stmt|;
name|hash
operator|=
name|GeohashUtils
operator|.
name|encodeLatLon
argument_list|(
literal|57.64911
argument_list|,
literal|10.40744
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"u4pruydqqvj8"
argument_list|,
name|hash
argument_list|)
expr_stmt|;
block|}
comment|/**    * Pass condition: lat=52.3738007, lng=4.8909347 should be encoded and then    * decoded within 0.00001 of the original value    */
annotation|@
name|Test
DECL|method|testDecodePreciseLongitudeLatitude
specifier|public
name|void
name|testDecodePreciseLongitudeLatitude
parameter_list|()
block|{
name|String
name|hash
init|=
name|GeohashUtils
operator|.
name|encodeLatLon
argument_list|(
literal|52.3738007
argument_list|,
literal|4.8909347
argument_list|)
decl_stmt|;
name|Point
name|point
init|=
name|GeohashUtils
operator|.
name|decode
argument_list|(
name|hash
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|52.3738007
argument_list|,
name|point
operator|.
name|getY
argument_list|()
argument_list|,
literal|0.00001D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.8909347
argument_list|,
name|point
operator|.
name|getX
argument_list|()
argument_list|,
literal|0.00001D
argument_list|)
expr_stmt|;
block|}
comment|/**    * Pass condition: lat=84.6, lng=10.5 should be encoded and then decoded    * within 0.00001 of the original value    */
annotation|@
name|Test
DECL|method|testDecodeImpreciseLongitudeLatitude
specifier|public
name|void
name|testDecodeImpreciseLongitudeLatitude
parameter_list|()
block|{
name|String
name|hash
init|=
name|GeohashUtils
operator|.
name|encodeLatLon
argument_list|(
literal|84.6
argument_list|,
literal|10.5
argument_list|)
decl_stmt|;
name|Point
name|point
init|=
name|GeohashUtils
operator|.
name|decode
argument_list|(
name|hash
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|84.6
argument_list|,
name|point
operator|.
name|getY
argument_list|()
argument_list|,
literal|0.00001D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10.5
argument_list|,
name|point
operator|.
name|getX
argument_list|()
argument_list|,
literal|0.00001D
argument_list|)
expr_stmt|;
block|}
comment|/*    * see https://issues.apache.org/jira/browse/LUCENE-1815 for details    */
annotation|@
name|Test
DECL|method|testDecodeEncode
specifier|public
name|void
name|testDecodeEncode
parameter_list|()
block|{
name|String
name|geoHash
init|=
literal|"u173zq37x014"
decl_stmt|;
name|assertEquals
argument_list|(
name|geoHash
argument_list|,
name|GeohashUtils
operator|.
name|encodeLatLon
argument_list|(
literal|52.3738007
argument_list|,
literal|4.8909347
argument_list|)
argument_list|)
expr_stmt|;
name|Point
name|point
init|=
name|GeohashUtils
operator|.
name|decode
argument_list|(
name|geoHash
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|52.37380061d
argument_list|,
name|point
operator|.
name|getY
argument_list|()
argument_list|,
literal|0.000001d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.8909343d
argument_list|,
name|point
operator|.
name|getX
argument_list|()
argument_list|,
literal|0.000001d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|geoHash
argument_list|,
name|GeohashUtils
operator|.
name|encodeLatLon
argument_list|(
name|point
operator|.
name|getY
argument_list|()
argument_list|,
name|point
operator|.
name|getX
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|geoHash
operator|=
literal|"u173"
expr_stmt|;
name|point
operator|=
name|GeohashUtils
operator|.
name|decode
argument_list|(
literal|"u173"
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|geoHash
operator|=
name|GeohashUtils
operator|.
name|encodeLatLon
argument_list|(
name|point
operator|.
name|getY
argument_list|()
argument_list|,
name|point
operator|.
name|getX
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Point
name|point2
init|=
name|GeohashUtils
operator|.
name|decode
argument_list|(
name|geoHash
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|point
operator|.
name|getY
argument_list|()
argument_list|,
name|point2
operator|.
name|getY
argument_list|()
argument_list|,
literal|0.000001d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|point
operator|.
name|getX
argument_list|()
argument_list|,
name|point2
operator|.
name|getX
argument_list|()
argument_list|,
literal|0.000001d
argument_list|)
expr_stmt|;
block|}
comment|/** see the table at http://en.wikipedia.org/wiki/Geohash */
annotation|@
name|Test
DECL|method|testHashLenToWidth
specifier|public
name|void
name|testHashLenToWidth
parameter_list|()
block|{
name|double
index|[]
name|box
init|=
name|GeohashUtils
operator|.
name|lookupDegreesSizeForHashLen
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1.40625
argument_list|,
name|box
index|[
literal|0
index|]
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.40625
argument_list|,
name|box
index|[
literal|1
index|]
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
