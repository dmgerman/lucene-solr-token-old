begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.strategy.prefix
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|strategy
operator|.
name|prefix
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  * This is just a quick idea for *simple* tests  */
end_comment
begin_class
DECL|class|TestSpatialPrefixField
specifier|public
class|class
name|TestSpatialPrefixField
block|{
annotation|@
name|Test
DECL|method|testRawTokens
specifier|public
name|void
name|testRawTokens
parameter_list|()
block|{
comment|// Ignoring geometry for now, and focus on what tokens need to match
name|List
argument_list|<
name|String
argument_list|>
name|docA
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"AAAAAA*"
argument_list|,
literal|"AAAAAB+"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|docB
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"A*"
argument_list|,
literal|"BB*"
argument_list|)
decl_stmt|;
comment|// Assumptions:
name|checkQuery
argument_list|(
literal|"AAAAA"
argument_list|,
literal|"docA"
argument_list|,
literal|"docB"
argument_list|)
expr_stmt|;
name|checkQuery
argument_list|(
literal|"AAAAA*"
argument_list|,
literal|"docA"
argument_list|,
literal|"docB"
argument_list|)
expr_stmt|;
comment|// for now * and + are essentially identical
name|checkQuery
argument_list|(
literal|"AAAAA+"
argument_list|,
literal|"docA"
argument_list|,
literal|"docB"
argument_list|)
expr_stmt|;
comment|// down the road, there may be a difference between 'covers' and an edge
name|checkQuery
argument_list|(
literal|"AA*"
argument_list|,
literal|"docB"
argument_list|,
literal|"docA"
argument_list|)
expr_stmt|;
comment|// Bigger input query
name|checkQuery
argument_list|(
literal|"AAAAAAAAAAAA*"
argument_list|,
literal|"docA"
argument_list|,
literal|"docB"
argument_list|)
expr_stmt|;
comment|// small
name|checkQuery
argument_list|(
literal|"BC"
argument_list|)
expr_stmt|;
comment|// nothing
name|checkQuery
argument_list|(
literal|"XX"
argument_list|)
expr_stmt|;
comment|// nothing
comment|// match only B
name|checkQuery
argument_list|(
literal|"B"
argument_list|,
literal|"docB"
argument_list|)
expr_stmt|;
name|checkQuery
argument_list|(
literal|"BBBB"
argument_list|,
literal|"docB"
argument_list|)
expr_stmt|;
name|checkQuery
argument_list|(
literal|"B*"
argument_list|,
literal|"docB"
argument_list|)
expr_stmt|;
name|checkQuery
argument_list|(
literal|"BBBB*"
argument_list|,
literal|"docB"
argument_list|)
expr_stmt|;
block|}
DECL|method|checkQuery
name|void
name|checkQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|String
modifier|...
name|expect
parameter_list|)
block|{
comment|// TODO, check that the query returns the docs in order
block|}
block|}
end_class
end_unit
