begin_unit
begin_package
DECL|package|org.apache.lucene.util.encoding
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|encoding
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * An {@link IntEncoderFilter} which encodes the gap between the given values,  * rather than the values themselves. This encoder usually yields better  * encoding performance space-wise (i.e., the final encoded values consume less  * space) if the values are 'close' to each other.  *<p>  *<b>NOTE:</b> this encoder assumes the values are given to  * {@link #encode(int)} in an ascending sorted manner, which ensures only  * positive values are encoded and thus yields better performance. If you are  * not sure whether the values are sorted or not, it is possible to chain this  * encoder with {@link SortingIntEncoder} to ensure the values will be  * sorted before encoding.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|DGapIntEncoder
specifier|public
class|class
name|DGapIntEncoder
extends|extends
name|IntEncoderFilter
block|{
DECL|field|prev
specifier|private
name|int
name|prev
init|=
literal|0
decl_stmt|;
comment|/** Initializes with the given encoder. */
DECL|method|DGapIntEncoder
specifier|public
name|DGapIntEncoder
parameter_list|(
name|IntEncoder
name|encoder
parameter_list|)
block|{
name|super
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|encode
specifier|public
name|void
name|encode
parameter_list|(
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|encoder
operator|.
name|encode
argument_list|(
name|value
operator|-
name|prev
argument_list|)
expr_stmt|;
name|prev
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createMatchingDecoder
specifier|public
name|IntDecoder
name|createMatchingDecoder
parameter_list|()
block|{
return|return
operator|new
name|DGapIntDecoder
argument_list|(
name|encoder
operator|.
name|createMatchingDecoder
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|reInit
specifier|public
name|void
name|reInit
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
name|super
operator|.
name|reInit
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|prev
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DGap ("
operator|+
name|encoder
operator|.
name|toString
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
end_class
end_unit
