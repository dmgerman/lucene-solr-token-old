begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * This class, much like {@link ByteArrayInputStream} uses a given buffer as a  * source of an InputStream. Unlike ByteArrayInputStream, this class does not  * "waste" memory by creating a local copy of the given buffer, but rather uses  * the given buffer as is. Hence the name Unsafe. While using this class one  * should remember that the byte[] buffer memory is shared and might be changed  * from outside.  *   * For reuse-ability, a call for {@link #reInit(byte[])} can be called, and  * initialize the stream with a new buffer.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|UnsafeByteArrayInputStream
specifier|public
class|class
name|UnsafeByteArrayInputStream
extends|extends
name|InputStream
block|{
DECL|field|buffer
specifier|private
name|byte
index|[]
name|buffer
decl_stmt|;
DECL|field|markIndex
specifier|private
name|int
name|markIndex
decl_stmt|;
DECL|field|upperLimit
specifier|private
name|int
name|upperLimit
decl_stmt|;
DECL|field|index
specifier|private
name|int
name|index
decl_stmt|;
comment|/**    * Creates a new instance by not using any byte[] up front. If you use this    * constructor, you MUST call either of the {@link #reInit(byte[]) reInit}    * methods before you consume any byte from this instance.<br>    * This constructor is for convenience purposes only, so that if one does not    * have the byte[] at the moment of creation, one is not forced to pass a    *<code>new byte[0]</code> or something. Obviously in that case, one will    * call either {@link #reInit(byte[]) reInit} methods before using the class.    */
DECL|method|UnsafeByteArrayInputStream
specifier|public
name|UnsafeByteArrayInputStream
parameter_list|()
block|{
name|markIndex
operator|=
name|upperLimit
operator|=
name|index
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * Creates an UnsafeByteArrayInputStream which uses a given byte array as    * the source of the stream. Default range is [0 , buffer.length)    *     * @param buffer    *            byte array used as the source of this stream    */
DECL|method|UnsafeByteArrayInputStream
specifier|public
name|UnsafeByteArrayInputStream
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|)
block|{
name|reInit
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an UnsafeByteArrayInputStream which uses a given byte array as    * the source of the stream, at the specific range: [startPos, endPos)    *     * @param buffer    *            byte array used as the source of this stream    * @param startPos    *            first index (inclusive) to the data lying in the given buffer    * @param endPos    *            an index (exclusive) where the data ends. data @    *            buffer[endPos] will never be read    */
DECL|method|UnsafeByteArrayInputStream
specifier|public
name|UnsafeByteArrayInputStream
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|startPos
parameter_list|,
name|int
name|endPos
parameter_list|)
block|{
name|reInit
argument_list|(
name|buffer
argument_list|,
name|startPos
argument_list|,
name|endPos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|mark
specifier|public
name|void
name|mark
parameter_list|(
name|int
name|readlimit
parameter_list|)
block|{
name|markIndex
operator|=
name|index
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|markSupported
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**    * Initialize the stream with a given buffer, using the default limits of    * [0, buffer.length)    *     * @param buffer    *            byte array used as the source of this stream    */
DECL|method|reInit
specifier|public
name|void
name|reInit
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|)
block|{
name|reInit
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initialize the stream with a given byte array as the source of the    * stream, at the specific range: [startPos, endPos)    *     * @param buffer    *            byte array used as the source of this stream    * @param startPos    *            first index (inclusive) to the data lying in the given buffer    * @param endPos    *            an index (exclusive) where the data ends. data @    *            buffer[endPos] will never be read    */
DECL|method|reInit
specifier|public
name|void
name|reInit
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|startPos
parameter_list|,
name|int
name|endPos
parameter_list|)
block|{
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
name|markIndex
operator|=
name|startPos
expr_stmt|;
name|upperLimit
operator|=
name|endPos
expr_stmt|;
name|index
operator|=
name|markIndex
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|available
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|upperLimit
operator|-
name|index
return|;
block|}
comment|/**    * Read a byte. Data returned as an integer [0,255] If end of stream    * reached, returns -1    */
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|index
operator|<
name|upperLimit
condition|?
name|buffer
index|[
name|index
operator|++
index|]
operator|&
literal|0xff
else|:
operator|-
literal|1
return|;
block|}
comment|/**    * Resets the stream back to its original state. Basically - moving the    * index back to start position.    */
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|index
operator|=
name|markIndex
expr_stmt|;
block|}
block|}
end_class
end_unit
