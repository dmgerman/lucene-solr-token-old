begin_unit
begin_package
DECL|package|org.apache.lucene
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * An interface which standardizes the process of building an indexable  * {@link Document}.  *<p>  * The idea is that implementations implement {@link #build(Document doc)},  * which adds to the given Document whatever {@link Field}s it wants to add. A  * DocumentBuilder is also allowed to inspect or change existing Fields in the  * Document, if it wishes to.  *<p>  * Implementations should normally have a constructor with parameters which  * determine what {@link #build(Document)} will add to doc.<br>  * To allow reuse of the DocumentBuilder object, implementations are also  * encouraged to have a setter method, which remembers its parameters just like  * the constructor. This setter method cannot be described in this interface,  * because it will take different parameters in each implementation.  *<p>  * The interface defines a builder pattern, which allows applications to invoke  * several document builders in the following way:  *   *<pre>  * builder1.build(builder2.build(builder3.build(new Document())));  *</pre>  *   * @lucene.experimental  */
end_comment
begin_interface
DECL|interface|DocumentBuilder
specifier|public
interface|interface
name|DocumentBuilder
block|{
comment|/** An exception thrown from {@link DocumentBuilder}'s build(). */
DECL|class|DocumentBuilderException
specifier|public
specifier|static
class|class
name|DocumentBuilderException
extends|extends
name|Exception
block|{
DECL|method|DocumentBuilderException
specifier|public
name|DocumentBuilderException
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|DocumentBuilderException
specifier|public
name|DocumentBuilderException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|DocumentBuilderException
specifier|public
name|DocumentBuilderException
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
DECL|method|DocumentBuilderException
specifier|public
name|DocumentBuilderException
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Adds to the given document whatever {@link Field}s the implementation needs    * to add. Return the docunment instance to allow for chaining calls.    */
DECL|method|build
specifier|public
name|Document
name|build
parameter_list|(
name|Document
name|doc
parameter_list|)
throws|throws
name|DocumentBuilderException
function_decl|;
block|}
end_interface
end_unit
