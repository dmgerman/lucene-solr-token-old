begin_unit
begin_package
DECL|package|org.apache.lucene.facet.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|params
operator|.
name|FacetSearchParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|params
operator|.
name|FacetRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|results
operator|.
name|FacetResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Driver for Accumulating facets of faceted search requests over given  * documents.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|FacetsAccumulator
specifier|public
specifier|abstract
class|class
name|FacetsAccumulator
block|{
comment|/**    * Default threshold for using the complements optimization.    * If accumulating facets for a document set larger than this ratio of the index size than     * perform the complement optimization.    * @see #setComplementThreshold(double) for more info on the complements optimization.      */
DECL|field|DEFAULT_COMPLEMENT_THRESHOLD
specifier|public
specifier|static
specifier|final
name|double
name|DEFAULT_COMPLEMENT_THRESHOLD
init|=
literal|0.6
decl_stmt|;
comment|/**    * Passing this to {@link #setComplementThreshold(double)} will disable using complement optimization.    */
DECL|field|DISABLE_COMPLEMENT
specifier|public
specifier|static
specifier|final
name|double
name|DISABLE_COMPLEMENT
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
comment|//> 1 actually
comment|/**    * Passing this to {@link #setComplementThreshold(double)} will force using complement optimization.    */
DECL|field|FORCE_COMPLEMENT
specifier|public
specifier|static
specifier|final
name|double
name|FORCE_COMPLEMENT
init|=
literal|0
decl_stmt|;
comment|//<=0
DECL|field|complementThreshold
specifier|private
name|double
name|complementThreshold
init|=
name|DEFAULT_COMPLEMENT_THRESHOLD
decl_stmt|;
DECL|field|taxonomyReader
specifier|protected
specifier|final
name|TaxonomyReader
name|taxonomyReader
decl_stmt|;
DECL|field|indexReader
specifier|protected
specifier|final
name|IndexReader
name|indexReader
decl_stmt|;
DECL|field|searchParams
specifier|protected
name|FacetSearchParams
name|searchParams
decl_stmt|;
DECL|field|allowLabeling
specifier|private
name|boolean
name|allowLabeling
init|=
literal|true
decl_stmt|;
DECL|method|FacetsAccumulator
specifier|public
name|FacetsAccumulator
parameter_list|(
name|FacetSearchParams
name|searchParams
parameter_list|,
name|IndexReader
name|indexReader
parameter_list|,
name|TaxonomyReader
name|taxonomyReader
parameter_list|)
block|{
name|this
operator|.
name|indexReader
operator|=
name|indexReader
expr_stmt|;
name|this
operator|.
name|taxonomyReader
operator|=
name|taxonomyReader
expr_stmt|;
name|this
operator|.
name|searchParams
operator|=
name|searchParams
expr_stmt|;
block|}
comment|/**    * Accumulate facets over given documents, according to facet requests in effect.    * @param docids documents (and their scores) for which facets are Accumulated.    * @return Accumulated facets.      * @throws IOException on error.    */
comment|// internal API note: it was considered to move the docids into the constructor as well,
comment|// but this prevents nice extension capabilities, especially in the way that
comment|// Sampling Accumulator works with the (any) delegated accumulator.
DECL|method|accumulate
specifier|public
specifier|abstract
name|List
argument_list|<
name|FacetResult
argument_list|>
name|accumulate
parameter_list|(
name|ScoredDocIDs
name|docids
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * @return the complement threshold    * @see #setComplementThreshold(double)    */
DECL|method|getComplementThreshold
specifier|public
name|double
name|getComplementThreshold
parameter_list|()
block|{
return|return
name|complementThreshold
return|;
block|}
comment|/**    * Set the complement threshold.    * This threshold will dictate whether the complements optimization is applied.    * The optimization is to count for less documents. It is useful when the same     * FacetSearchParams are used for varying sets of documents. The first time     * complements is used the "total counts" are computed - counting for all the     * documents in the collection. Then, only the complementing set of documents    * is considered, and used to decrement from the overall counts, thereby     * walking through less documents, which is faster.    *<p>    * Note that this optimization is only available when searching an index    * whose {@link IndexReader} implements both     * {@link IndexReader#directory()} and {@link IndexReader#getVersion()}     * otherwise the optimization is silently disabled regardless of    * the complement threshold settings.    *<p>    * For the default settings see {@link #DEFAULT_COMPLEMENT_THRESHOLD}.    *<p>    * To forcing complements in all cases pass {@link #FORCE_COMPLEMENT}.    * This is mostly useful for testing purposes, as forcing complements when only     * tiny fraction of available documents match the query does not make sense and     * would incur performance degradations.    *<p>    * To disable complements pass {@link #DISABLE_COMPLEMENT}.    * @param complementThreshold the complement threshold to set    */
DECL|method|setComplementThreshold
specifier|public
name|void
name|setComplementThreshold
parameter_list|(
name|double
name|complementThreshold
parameter_list|)
block|{
name|this
operator|.
name|complementThreshold
operator|=
name|complementThreshold
expr_stmt|;
block|}
comment|/**    * Check if labeling is allowed for this accumulator.    *<p>    * By default labeling is allowed.    * This allows one accumulator to invoke other accumulators for accumulation    * but keep to itself the responsibility of labeling.    * This might br handy since labeling is a costly operation.     * @return true of labeling is allowed for this accumulator    * @see #setAllowLabeling(boolean)    */
DECL|method|isAllowLabeling
specifier|protected
name|boolean
name|isAllowLabeling
parameter_list|()
block|{
return|return
name|allowLabeling
return|;
block|}
comment|/**    * Set whether labeling is allowed for this accumulator.    * @param allowLabeling new setting for allow labeling    * @see #isAllowLabeling()    */
DECL|method|setAllowLabeling
specifier|protected
name|void
name|setAllowLabeling
parameter_list|(
name|boolean
name|allowLabeling
parameter_list|)
block|{
name|this
operator|.
name|allowLabeling
operator|=
name|allowLabeling
expr_stmt|;
block|}
comment|/** check if all requests are complementable */
DECL|method|mayComplement
specifier|protected
name|boolean
name|mayComplement
parameter_list|()
block|{
for|for
control|(
name|FacetRequest
name|freq
range|:
name|searchParams
operator|.
name|getFacetRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|freq
operator|.
name|supportsComplements
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
