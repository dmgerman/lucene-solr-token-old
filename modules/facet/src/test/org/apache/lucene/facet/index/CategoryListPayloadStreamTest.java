begin_unit
begin_package
DECL|package|org.apache.lucene.facet.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|CategoryListPayloadStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|encoding
operator|.
name|DGapIntDecoder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|encoding
operator|.
name|DGapIntEncoder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|encoding
operator|.
name|IntDecoder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|encoding
operator|.
name|NOnesIntDecoder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|encoding
operator|.
name|NOnesIntEncoder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|encoding
operator|.
name|UniqueValuesIntEncoder
import|;
end_import
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|CategoryListPayloadStreamTest
specifier|public
class|class
name|CategoryListPayloadStreamTest
extends|extends
name|LuceneTestCase
block|{
comment|/**    * Verifies that a CategoryListPayloadStream can properly encode values into    * a byte stream for later constructing a Payload.    */
annotation|@
name|Test
DECL|method|testStream
specifier|public
name|void
name|testStream
parameter_list|()
throws|throws
name|Exception
block|{
name|CategoryListPayloadStream
name|clps
init|=
operator|new
name|CategoryListPayloadStream
argument_list|(
operator|new
name|UniqueValuesIntEncoder
argument_list|(
operator|new
name|DGapIntEncoder
argument_list|(
operator|new
name|NOnesIntEncoder
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|clps
operator|.
name|appendIntToStream
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|clps
operator|.
name|appendIntToStream
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|clps
operator|.
name|appendIntToStream
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|clps
operator|.
name|appendIntToStream
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|clps
operator|.
name|appendIntToStream
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|clps
operator|.
name|appendIntToStream
argument_list|(
literal|100000
argument_list|)
expr_stmt|;
name|clps
operator|.
name|appendIntToStream
argument_list|(
literal|1000000
argument_list|)
expr_stmt|;
name|clps
operator|.
name|appendIntToStream
argument_list|(
literal|10000000
argument_list|)
expr_stmt|;
name|clps
operator|.
name|appendIntToStream
argument_list|(
literal|100000000
argument_list|)
expr_stmt|;
name|clps
operator|.
name|appendIntToStream
argument_list|(
literal|1000000000
argument_list|)
expr_stmt|;
name|clps
operator|.
name|appendIntToStream
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|clps
operator|.
name|convertStreamToByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|IntDecoder
name|decoder
init|=
operator|new
name|DGapIntDecoder
argument_list|(
operator|new
name|NOnesIntDecoder
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|decoder
operator|.
name|reInit
argument_list|(
name|bais
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong value in byte stream"
argument_list|,
literal|1
argument_list|,
name|decoder
operator|.
name|decode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong value in byte stream"
argument_list|,
literal|10
argument_list|,
name|decoder
operator|.
name|decode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong value in byte stream"
argument_list|,
literal|100
argument_list|,
name|decoder
operator|.
name|decode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong value in byte stream"
argument_list|,
literal|1000
argument_list|,
name|decoder
operator|.
name|decode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong value in byte stream"
argument_list|,
literal|10000
argument_list|,
name|decoder
operator|.
name|decode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong value in byte stream"
argument_list|,
literal|100000
argument_list|,
name|decoder
operator|.
name|decode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong value in byte stream"
argument_list|,
literal|1000000
argument_list|,
name|decoder
operator|.
name|decode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong value in byte stream"
argument_list|,
literal|10000000
argument_list|,
name|decoder
operator|.
name|decode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong value in byte stream"
argument_list|,
literal|100000000
argument_list|,
name|decoder
operator|.
name|decode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong value in byte stream"
argument_list|,
literal|1000000000
argument_list|,
name|decoder
operator|.
name|decode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong value in byte stream"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|decoder
operator|.
name|decode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"End of stream not reached"
argument_list|,
name|IntDecoder
operator|.
name|EOS
argument_list|,
name|decoder
operator|.
name|decode
argument_list|()
argument_list|)
expr_stmt|;
name|clps
operator|.
name|reset
argument_list|()
expr_stmt|;
name|decoder
operator|.
name|reInit
argument_list|(
name|bais
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"End of stream not reached"
argument_list|,
name|IntDecoder
operator|.
name|EOS
argument_list|,
name|decoder
operator|.
name|decode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
