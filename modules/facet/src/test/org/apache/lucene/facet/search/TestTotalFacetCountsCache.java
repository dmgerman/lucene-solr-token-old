begin_unit
begin_package
DECL|package|org.apache.lucene.facet.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|MockDirectoryWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetTestUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetTestUtils
operator|.
name|IndexTaxonomyReaderPair
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetTestUtils
operator|.
name|IndexTaxonomyWriterPair
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|example
operator|.
name|ExampleResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|example
operator|.
name|TestMultiCLExample
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|example
operator|.
name|multiCL
operator|.
name|MultiCLIndexer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|example
operator|.
name|multiCL
operator|.
name|MultiCLSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|CategoryDocumentBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
operator|.
name|DefaultFacetIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
operator|.
name|FacetIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|TotalFacetCounts
operator|.
name|CreationType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|results
operator|.
name|FacetResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|results
operator|.
name|FacetResultNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SlowRAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|TestTotalFacetCountsCache
specifier|public
class|class
name|TestTotalFacetCountsCache
extends|extends
name|LuceneTestCase
block|{
DECL|field|TFC
specifier|static
specifier|final
name|TotalFacetCountsCache
name|TFC
init|=
name|TotalFacetCountsCache
operator|.
name|getSingleton
argument_list|()
decl_stmt|;
comment|/**    * Thread class to be used in tests for this method. This thread gets a TFC    * and records times.    */
DECL|class|TFCThread
specifier|private
specifier|static
class|class
name|TFCThread
extends|extends
name|Thread
block|{
DECL|field|r
specifier|private
specifier|final
name|IndexReader
name|r
decl_stmt|;
DECL|field|tr
specifier|private
specifier|final
name|DirectoryTaxonomyReader
name|tr
decl_stmt|;
DECL|field|iParams
specifier|private
specifier|final
name|FacetIndexingParams
name|iParams
decl_stmt|;
DECL|field|tfc
name|TotalFacetCounts
name|tfc
decl_stmt|;
DECL|method|TFCThread
specifier|public
name|TFCThread
parameter_list|(
name|IndexReader
name|r
parameter_list|,
name|DirectoryTaxonomyReader
name|tr
parameter_list|,
name|FacetIndexingParams
name|iParams
parameter_list|)
block|{
name|this
operator|.
name|r
operator|=
name|r
expr_stmt|;
name|this
operator|.
name|tr
operator|=
name|tr
expr_stmt|;
name|this
operator|.
name|iParams
operator|=
name|iParams
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|tfc
operator|=
name|TFC
operator|.
name|getTotalCounts
argument_list|(
name|r
argument_list|,
name|tr
argument_list|,
name|iParams
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Utility method to add a document and facets to an index/taxonomy. */
DECL|method|addFacets
specifier|static
name|void
name|addFacets
parameter_list|(
name|FacetIndexingParams
name|iParams
parameter_list|,
name|IndexWriter
name|iw
parameter_list|,
name|TaxonomyWriter
name|tw
parameter_list|,
name|String
modifier|...
name|strings
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|CategoryPath
argument_list|>
name|cps
init|=
operator|new
name|ArrayList
argument_list|<
name|CategoryPath
argument_list|>
argument_list|()
decl_stmt|;
name|cps
operator|.
name|add
argument_list|(
operator|new
name|CategoryPath
argument_list|(
name|strings
argument_list|)
argument_list|)
expr_stmt|;
name|CategoryDocumentBuilder
name|builder
init|=
operator|new
name|CategoryDocumentBuilder
argument_list|(
name|tw
argument_list|,
name|iParams
argument_list|)
decl_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|builder
operator|.
name|setCategoryPaths
argument_list|(
name|cps
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Clears the cache and sets its size to one. */
DECL|method|initCache
specifier|static
name|void
name|initCache
parameter_list|()
block|{
name|TFC
operator|.
name|clear
argument_list|()
expr_stmt|;
name|TFC
operator|.
name|setCacheSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Set to keep one in memory
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|initCache
argument_list|()
expr_stmt|;
block|}
comment|/** runs a few instances of {@link MultiCLSearcher} in parallel */
DECL|method|testGeneralSynchronization
specifier|public
name|void
name|testGeneralSynchronization
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numIters
init|=
name|atLeast
argument_list|(
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIters
condition|;
name|i
operator|++
control|)
block|{
name|doTestGeneralSynchronization
argument_list|(
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|,
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
operator|-
literal|1
else|:
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Run many instances of {@link MultiCLSearcher} in parallel, results should    * be sane. Each instance has a random delay for reading bytes, to ensure    * that threads finish in different order than started.    */
annotation|@
name|Test
annotation|@
name|Nightly
DECL|method|testGeneralSynchronizationBig
specifier|public
name|void
name|testGeneralSynchronizationBig
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
name|numThreads
init|=
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|8
block|}
decl_stmt|;
name|int
index|[]
name|sleepMillis
init|=
operator|new
name|int
index|[]
block|{
operator|-
literal|1
block|,
literal|1
block|,
literal|20
block|,
literal|33
block|}
decl_stmt|;
name|int
index|[]
name|cacheSize
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|5
block|}
decl_stmt|;
for|for
control|(
name|int
name|size
range|:
name|cacheSize
control|)
block|{
for|for
control|(
name|int
name|sleep
range|:
name|sleepMillis
control|)
block|{
for|for
control|(
name|int
name|nThreads
range|:
name|numThreads
control|)
block|{
name|doTestGeneralSynchronization
argument_list|(
name|nThreads
argument_list|,
name|sleep
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|doTestGeneralSynchronization
specifier|private
name|void
name|doTestGeneralSynchronization
parameter_list|(
name|int
name|numThreads
parameter_list|,
name|int
name|sleepMillis
parameter_list|,
name|int
name|cacheSize
parameter_list|)
throws|throws
name|Exception
throws|,
name|CorruptIndexException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|TFC
operator|.
name|setCacheSize
argument_list|(
name|cacheSize
argument_list|)
expr_stmt|;
name|SlowRAMDirectory
name|slowIndexDir
init|=
operator|new
name|SlowRAMDirectory
argument_list|(
operator|-
literal|1
argument_list|,
name|random
argument_list|)
decl_stmt|;
name|MockDirectoryWrapper
name|indexDir
init|=
operator|new
name|MockDirectoryWrapper
argument_list|(
name|random
argument_list|,
name|slowIndexDir
argument_list|)
decl_stmt|;
name|SlowRAMDirectory
name|slowTaxoDir
init|=
operator|new
name|SlowRAMDirectory
argument_list|(
operator|-
literal|1
argument_list|,
name|random
argument_list|)
decl_stmt|;
name|MockDirectoryWrapper
name|taxoDir
init|=
operator|new
name|MockDirectoryWrapper
argument_list|(
name|random
argument_list|,
name|slowTaxoDir
argument_list|)
decl_stmt|;
comment|// Index documents without the "slowness"
name|MultiCLIndexer
operator|.
name|index
argument_list|(
name|indexDir
argument_list|,
name|taxoDir
argument_list|)
expr_stmt|;
name|slowIndexDir
operator|.
name|setSleepMillis
argument_list|(
name|sleepMillis
argument_list|)
expr_stmt|;
name|slowTaxoDir
operator|.
name|setSleepMillis
argument_list|(
name|sleepMillis
argument_list|)
expr_stmt|;
comment|// Open the slow readers
name|IndexReader
name|slowIndexReader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|indexDir
argument_list|)
decl_stmt|;
name|TaxonomyReader
name|slowTaxoReader
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|taxoDir
argument_list|)
decl_stmt|;
comment|// Class to perform search and return results as threads
class|class
name|Multi
extends|extends
name|Thread
block|{
specifier|private
name|List
argument_list|<
name|FacetResult
argument_list|>
name|results
decl_stmt|;
specifier|private
name|FacetIndexingParams
name|iParams
decl_stmt|;
specifier|private
name|IndexReader
name|indexReader
decl_stmt|;
specifier|private
name|TaxonomyReader
name|taxoReader
decl_stmt|;
specifier|public
name|Multi
parameter_list|(
name|IndexReader
name|indexReader
parameter_list|,
name|TaxonomyReader
name|taxoReader
parameter_list|,
name|FacetIndexingParams
name|iParams
parameter_list|)
block|{
name|this
operator|.
name|indexReader
operator|=
name|indexReader
expr_stmt|;
name|this
operator|.
name|taxoReader
operator|=
name|taxoReader
expr_stmt|;
name|this
operator|.
name|iParams
operator|=
name|iParams
expr_stmt|;
block|}
specifier|public
name|ExampleResult
name|getResults
parameter_list|()
block|{
name|ExampleResult
name|exampleRes
init|=
operator|new
name|ExampleResult
argument_list|()
decl_stmt|;
name|exampleRes
operator|.
name|setFacetResults
argument_list|(
name|results
argument_list|)
expr_stmt|;
return|return
name|exampleRes
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|results
operator|=
name|MultiCLSearcher
operator|.
name|searchWithFacets
argument_list|(
name|indexReader
argument_list|,
name|taxoReader
argument_list|,
name|iParams
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// Instantiate threads, but do not start them
name|Multi
index|[]
name|multis
init|=
operator|new
name|Multi
index|[
name|numThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|multis
index|[
name|i
index|]
operator|=
operator|new
name|Multi
argument_list|(
name|slowIndexReader
argument_list|,
name|slowTaxoReader
argument_list|,
name|MultiCLIndexer
operator|.
name|MULTI_IPARAMS
argument_list|)
expr_stmt|;
block|}
comment|// The last thread uses ONLY the DefaultFacetIndexingParams so that
comment|// it references a different TFC cache. This will still result
comment|// in valid results, but will only search one of the category lists
comment|// instead of all of them.
name|multis
index|[
name|numThreads
operator|-
literal|1
index|]
operator|=
operator|new
name|Multi
argument_list|(
name|slowIndexReader
argument_list|,
name|slowTaxoReader
argument_list|,
operator|new
name|DefaultFacetIndexingParams
argument_list|()
argument_list|)
expr_stmt|;
comment|// Gentleman, start your engines
for|for
control|(
name|Multi
name|m
range|:
name|multis
control|)
block|{
name|m
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Wait for threads and get results
name|ExampleResult
index|[]
name|multiResults
init|=
operator|new
name|ExampleResult
index|[
name|numThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|multis
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
name|multiResults
index|[
name|i
index|]
operator|=
name|multis
index|[
name|i
index|]
operator|.
name|getResults
argument_list|()
expr_stmt|;
block|}
comment|// Each of the (numThreads-1) should have the same predictable
comment|// results, which we test for here.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|ExampleResult
name|eResults
init|=
name|multiResults
index|[
name|i
index|]
decl_stmt|;
name|TestMultiCLExample
operator|.
name|assertCorrectMultiResults
argument_list|(
name|eResults
argument_list|)
expr_stmt|;
block|}
comment|// The last thread, which only searched over the
comment|// DefaultFacetIndexingParams,
comment|// has its own results
name|ExampleResult
name|eResults
init|=
name|multiResults
index|[
name|numThreads
operator|-
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|results
init|=
name|eResults
operator|.
name|getFacetResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|expLabels
init|=
operator|new
name|String
index|[]
block|{
literal|"5"
block|,
literal|"5/5"
block|,
literal|"6/2"
block|}
decl_stmt|;
name|double
index|[]
name|expValues
init|=
operator|new
name|double
index|[]
block|{
literal|0.0
block|,
literal|0.0
block|,
literal|1.0
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|FacetResult
name|result
init|=
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Result should not be null"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|FacetResultNode
name|resNode
init|=
name|result
operator|.
name|getFacetResultNode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid label"
argument_list|,
name|expLabels
index|[
name|i
index|]
argument_list|,
name|resNode
operator|.
name|getLabel
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid value"
argument_list|,
name|expValues
index|[
name|i
index|]
argument_list|,
name|resNode
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid number of subresults"
argument_list|,
literal|0
argument_list|,
name|resNode
operator|.
name|getNumSubResults
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// we're done, close the index reader and the taxonomy.
name|slowIndexReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|slowTaxoReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|indexDir
operator|.
name|close
argument_list|()
expr_stmt|;
name|taxoDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Simple test to make sure the TotalFacetCountsManager updates the    * TotalFacetCounts array only when it is supposed to, and whether it    * is recomputed or read from disk.    */
annotation|@
name|Test
DECL|method|testGenerationalConsistency
specifier|public
name|void
name|testGenerationalConsistency
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create temporary RAMDirectories
name|Directory
index|[]
index|[]
name|dirs
init|=
name|FacetTestUtils
operator|.
name|createIndexTaxonomyDirs
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Create our index/taxonomy writers
name|IndexTaxonomyWriterPair
index|[]
name|writers
init|=
name|FacetTestUtils
operator|.
name|createIndexTaxonomyWriterPair
argument_list|(
name|dirs
argument_list|)
decl_stmt|;
name|DefaultFacetIndexingParams
name|iParams
init|=
operator|new
name|DefaultFacetIndexingParams
argument_list|()
decl_stmt|;
comment|// Add a facet to the index
name|addFacets
argument_list|(
name|iParams
argument_list|,
name|writers
index|[
literal|0
index|]
operator|.
name|indexWriter
argument_list|,
name|writers
index|[
literal|0
index|]
operator|.
name|taxWriter
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
comment|// Commit Changes
name|writers
index|[
literal|0
index|]
operator|.
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writers
index|[
literal|0
index|]
operator|.
name|taxWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// Open readers
name|IndexTaxonomyReaderPair
index|[]
name|readers
init|=
name|FacetTestUtils
operator|.
name|createIndexTaxonomyReaderPair
argument_list|(
name|dirs
argument_list|)
decl_stmt|;
comment|// As this is the first time we have invoked the TotalFacetCountsManager,
comment|// we should expect to compute and not read from disk.
name|TotalFacetCounts
name|totalCounts
init|=
name|TFC
operator|.
name|getTotalCounts
argument_list|(
name|readers
index|[
literal|0
index|]
operator|.
name|indexReader
argument_list|,
name|readers
index|[
literal|0
index|]
operator|.
name|taxReader
argument_list|,
name|iParams
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|prevGen
init|=
name|assertRecomputed
argument_list|(
name|totalCounts
argument_list|,
literal|0
argument_list|,
literal|"after first attempt to get it!"
argument_list|)
decl_stmt|;
comment|// Repeating same operation should pull from the cache - not recomputed.
name|assertTrue
argument_list|(
literal|"Should be obtained from cache at 2nd attempt"
argument_list|,
name|totalCounts
operator|==
name|TFC
operator|.
name|getTotalCounts
argument_list|(
name|readers
index|[
literal|0
index|]
operator|.
name|indexReader
argument_list|,
name|readers
index|[
literal|0
index|]
operator|.
name|taxReader
argument_list|,
name|iParams
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Repeat the same operation as above. but clear first - now should recompute again
name|initCache
argument_list|()
expr_stmt|;
name|totalCounts
operator|=
name|TFC
operator|.
name|getTotalCounts
argument_list|(
name|readers
index|[
literal|0
index|]
operator|.
name|indexReader
argument_list|,
name|readers
index|[
literal|0
index|]
operator|.
name|taxReader
argument_list|,
name|iParams
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|prevGen
operator|=
name|assertRecomputed
argument_list|(
name|totalCounts
argument_list|,
name|prevGen
argument_list|,
literal|"after cache clear, 3rd attempt to get it!"
argument_list|)
expr_stmt|;
comment|//store to file
name|File
name|outputFile
init|=
name|_TestUtil
operator|.
name|createTempFile
argument_list|(
literal|"test"
argument_list|,
literal|"tmp"
argument_list|,
name|TEMP_DIR
argument_list|)
decl_stmt|;
name|initCache
argument_list|()
expr_stmt|;
name|TFC
operator|.
name|store
argument_list|(
name|outputFile
argument_list|,
name|readers
index|[
literal|0
index|]
operator|.
name|indexReader
argument_list|,
name|readers
index|[
literal|0
index|]
operator|.
name|taxReader
argument_list|,
name|iParams
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|totalCounts
operator|=
name|TFC
operator|.
name|getTotalCounts
argument_list|(
name|readers
index|[
literal|0
index|]
operator|.
name|indexReader
argument_list|,
name|readers
index|[
literal|0
index|]
operator|.
name|taxReader
argument_list|,
name|iParams
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|prevGen
operator|=
name|assertRecomputed
argument_list|(
name|totalCounts
argument_list|,
name|prevGen
argument_list|,
literal|"after cache clear, 4th attempt to get it!"
argument_list|)
expr_stmt|;
comment|//clear and load
name|initCache
argument_list|()
expr_stmt|;
name|TFC
operator|.
name|load
argument_list|(
name|outputFile
argument_list|,
name|readers
index|[
literal|0
index|]
operator|.
name|indexReader
argument_list|,
name|readers
index|[
literal|0
index|]
operator|.
name|taxReader
argument_list|,
name|iParams
argument_list|)
expr_stmt|;
name|totalCounts
operator|=
name|TFC
operator|.
name|getTotalCounts
argument_list|(
name|readers
index|[
literal|0
index|]
operator|.
name|indexReader
argument_list|,
name|readers
index|[
literal|0
index|]
operator|.
name|taxReader
argument_list|,
name|iParams
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|prevGen
operator|=
name|assertReadFromDisc
argument_list|(
name|totalCounts
argument_list|,
name|prevGen
argument_list|,
literal|"after 5th attempt to get it!"
argument_list|)
expr_stmt|;
comment|// Add a new facet to the index, commit and refresh readers
name|addFacets
argument_list|(
name|iParams
argument_list|,
name|writers
index|[
literal|0
index|]
operator|.
name|indexWriter
argument_list|,
name|writers
index|[
literal|0
index|]
operator|.
name|taxWriter
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|writers
index|[
literal|0
index|]
operator|.
name|indexWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|writers
index|[
literal|0
index|]
operator|.
name|taxWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|readers
index|[
literal|0
index|]
operator|.
name|taxReader
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|DirectoryReader
name|r2
init|=
name|DirectoryReader
operator|.
name|openIfChanged
argument_list|(
name|readers
index|[
literal|0
index|]
operator|.
name|indexReader
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|r2
argument_list|)
expr_stmt|;
comment|// Hold on to the 'original' reader so we can do some checks with it
name|IndexReader
name|origReader
init|=
literal|null
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Reader must be updated!"
argument_list|,
name|readers
index|[
literal|0
index|]
operator|.
name|indexReader
operator|!=
name|r2
argument_list|)
expr_stmt|;
comment|// Set the 'original' reader
name|origReader
operator|=
name|readers
index|[
literal|0
index|]
operator|.
name|indexReader
expr_stmt|;
comment|// Set the new master index Reader
name|readers
index|[
literal|0
index|]
operator|.
name|indexReader
operator|=
name|r2
expr_stmt|;
comment|// Try to get total-counts the originalReader AGAIN, just for sanity. Should pull from the cache - not recomputed.
name|assertTrue
argument_list|(
literal|"Should be obtained from cache at 6th attempt"
argument_list|,
name|totalCounts
operator|==
name|TFC
operator|.
name|getTotalCounts
argument_list|(
name|origReader
argument_list|,
name|readers
index|[
literal|0
index|]
operator|.
name|taxReader
argument_list|,
name|iParams
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// now use the new reader - should recompute
name|totalCounts
operator|=
name|TFC
operator|.
name|getTotalCounts
argument_list|(
name|readers
index|[
literal|0
index|]
operator|.
name|indexReader
argument_list|,
name|readers
index|[
literal|0
index|]
operator|.
name|taxReader
argument_list|,
name|iParams
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|prevGen
operator|=
name|assertRecomputed
argument_list|(
name|totalCounts
argument_list|,
name|prevGen
argument_list|,
literal|"after updating the index - 7th attempt!"
argument_list|)
expr_stmt|;
comment|// try again - should not recompute
name|assertTrue
argument_list|(
literal|"Should be obtained from cache at 8th attempt"
argument_list|,
name|totalCounts
operator|==
name|TFC
operator|.
name|getTotalCounts
argument_list|(
name|readers
index|[
literal|0
index|]
operator|.
name|indexReader
argument_list|,
name|readers
index|[
literal|0
index|]
operator|.
name|taxReader
argument_list|,
name|iParams
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|origReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|readers
index|[
literal|0
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
name|r2
operator|.
name|close
argument_list|()
expr_stmt|;
name|outputFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|dirs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|assertReadFromDisc
specifier|private
name|int
name|assertReadFromDisc
parameter_list|(
name|TotalFacetCounts
name|totalCounts
parameter_list|,
name|int
name|prevGen
parameter_list|,
name|String
name|errMsg
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"should read from disk "
operator|+
name|errMsg
argument_list|,
name|CreationType
operator|.
name|Loaded
argument_list|,
name|totalCounts
operator|.
name|createType4test
argument_list|)
expr_stmt|;
name|int
name|gen4test
init|=
name|totalCounts
operator|.
name|gen4test
decl_stmt|;
name|assertTrue
argument_list|(
literal|"should read from disk "
operator|+
name|errMsg
argument_list|,
name|gen4test
operator|>
name|prevGen
argument_list|)
expr_stmt|;
return|return
name|gen4test
return|;
block|}
DECL|method|assertRecomputed
specifier|private
name|int
name|assertRecomputed
parameter_list|(
name|TotalFacetCounts
name|totalCounts
parameter_list|,
name|int
name|prevGen
parameter_list|,
name|String
name|errMsg
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"should recompute "
operator|+
name|errMsg
argument_list|,
name|CreationType
operator|.
name|Computed
argument_list|,
name|totalCounts
operator|.
name|createType4test
argument_list|)
expr_stmt|;
name|int
name|gen4test
init|=
name|totalCounts
operator|.
name|gen4test
decl_stmt|;
name|assertTrue
argument_list|(
literal|"should recompute "
operator|+
name|errMsg
argument_list|,
name|gen4test
operator|>
name|prevGen
argument_list|)
expr_stmt|;
return|return
name|gen4test
return|;
block|}
comment|/**    * This test is to address a bug in a previous version.  If a TFC cache is    * written to disk, and then the taxonomy grows (but the index does not change),    * and then the TFC cache is re-read from disk, there will be an exception    * thrown, as the integers are read off of the disk according to taxonomy    * size, which has changed.    */
annotation|@
name|Test
DECL|method|testGrowingTaxonomy
specifier|public
name|void
name|testGrowingTaxonomy
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create temporary RAMDirectories
name|Directory
index|[]
index|[]
name|dirs
init|=
name|FacetTestUtils
operator|.
name|createIndexTaxonomyDirs
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Create our index/taxonomy writers
name|IndexTaxonomyWriterPair
index|[]
name|writers
init|=
name|FacetTestUtils
operator|.
name|createIndexTaxonomyWriterPair
argument_list|(
name|dirs
argument_list|)
decl_stmt|;
name|DefaultFacetIndexingParams
name|iParams
init|=
operator|new
name|DefaultFacetIndexingParams
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|int
name|fixedPartitionSize
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
block|}
decl_stmt|;
comment|// Add a facet to the index
name|addFacets
argument_list|(
name|iParams
argument_list|,
name|writers
index|[
literal|0
index|]
operator|.
name|indexWriter
argument_list|,
name|writers
index|[
literal|0
index|]
operator|.
name|taxWriter
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
comment|// Commit Changes
name|writers
index|[
literal|0
index|]
operator|.
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writers
index|[
literal|0
index|]
operator|.
name|taxWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
name|IndexTaxonomyReaderPair
index|[]
name|readers
init|=
name|FacetTestUtils
operator|.
name|createIndexTaxonomyReaderPair
argument_list|(
name|dirs
argument_list|)
decl_stmt|;
comment|// Create TFC and write cache to disk
name|File
name|outputFile
init|=
name|_TestUtil
operator|.
name|createTempFile
argument_list|(
literal|"test"
argument_list|,
literal|"tmp"
argument_list|,
name|TEMP_DIR
argument_list|)
decl_stmt|;
name|TFC
operator|.
name|store
argument_list|(
name|outputFile
argument_list|,
name|readers
index|[
literal|0
index|]
operator|.
name|indexReader
argument_list|,
name|readers
index|[
literal|0
index|]
operator|.
name|taxReader
argument_list|,
name|iParams
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Make the taxonomy grow without touching the index
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|writers
index|[
literal|0
index|]
operator|.
name|taxWriter
operator|.
name|addCategory
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"foo"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writers
index|[
literal|0
index|]
operator|.
name|taxWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
name|readers
index|[
literal|0
index|]
operator|.
name|taxReader
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|initCache
argument_list|()
expr_stmt|;
comment|// With the bug, this next call should result in an exception
name|TFC
operator|.
name|load
argument_list|(
name|outputFile
argument_list|,
name|readers
index|[
literal|0
index|]
operator|.
name|indexReader
argument_list|,
name|readers
index|[
literal|0
index|]
operator|.
name|taxReader
argument_list|,
name|iParams
argument_list|)
expr_stmt|;
name|TotalFacetCounts
name|totalCounts
init|=
name|TFC
operator|.
name|getTotalCounts
argument_list|(
name|readers
index|[
literal|0
index|]
operator|.
name|indexReader
argument_list|,
name|readers
index|[
literal|0
index|]
operator|.
name|taxReader
argument_list|,
name|iParams
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertReadFromDisc
argument_list|(
name|totalCounts
argument_list|,
literal|0
argument_list|,
literal|"after reading from disk."
argument_list|)
expr_stmt|;
name|outputFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|writers
index|[
literal|0
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
name|readers
index|[
literal|0
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|dirs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that a new TFC is only calculated and placed in memory (by two    * threads who want it at the same time) only once.    */
annotation|@
name|Test
DECL|method|testMemoryCacheSynchronization
specifier|public
name|void
name|testMemoryCacheSynchronization
parameter_list|()
throws|throws
name|Exception
block|{
name|SlowRAMDirectory
name|indexDir
init|=
operator|new
name|SlowRAMDirectory
argument_list|(
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SlowRAMDirectory
name|taxoDir
init|=
operator|new
name|SlowRAMDirectory
argument_list|(
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Write index using 'normal' directories
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|indexDir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|DirectoryTaxonomyWriter
name|tw
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|taxoDir
argument_list|)
decl_stmt|;
name|DefaultFacetIndexingParams
name|iParams
init|=
operator|new
name|DefaultFacetIndexingParams
argument_list|()
decl_stmt|;
comment|// Add documents and facets
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|addFacets
argument_list|(
name|iParams
argument_list|,
name|w
argument_list|,
name|tw
argument_list|,
literal|"facet"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|tw
operator|.
name|close
argument_list|()
expr_stmt|;
name|indexDir
operator|.
name|setSleepMillis
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|taxoDir
operator|.
name|setSleepMillis
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|indexDir
argument_list|)
decl_stmt|;
name|DirectoryTaxonomyReader
name|tr
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|taxoDir
argument_list|)
decl_stmt|;
comment|// Create and start threads. Thread1 should lock the cache and calculate
comment|// the TFC array. The second thread should block until the first is
comment|// done, then successfully retrieve from the cache without recalculating
comment|// or reading from disk.
name|TFCThread
name|tfcCalc1
init|=
operator|new
name|TFCThread
argument_list|(
name|r
argument_list|,
name|tr
argument_list|,
name|iParams
argument_list|)
decl_stmt|;
name|TFCThread
name|tfcCalc2
init|=
operator|new
name|TFCThread
argument_list|(
name|r
argument_list|,
name|tr
argument_list|,
name|iParams
argument_list|)
decl_stmt|;
name|tfcCalc1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Give thread 1 a head start to ensure correct sequencing for testing
name|Thread
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|tfcCalc2
operator|.
name|start
argument_list|()
expr_stmt|;
name|tfcCalc1
operator|.
name|join
argument_list|()
expr_stmt|;
name|tfcCalc2
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Since this test ends up with references to the same TFC object, we
comment|// can only test the times to make sure that they are the same.
name|assertRecomputed
argument_list|(
name|tfcCalc1
operator|.
name|tfc
argument_list|,
literal|0
argument_list|,
literal|"thread 1 should recompute"
argument_list|)
expr_stmt|;
name|assertRecomputed
argument_list|(
name|tfcCalc2
operator|.
name|tfc
argument_list|,
literal|0
argument_list|,
literal|"thread 2 should recompute"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Both results should be the same (as their inputs are the same objects)"
argument_list|,
name|tfcCalc1
operator|.
name|tfc
operator|==
name|tfcCalc2
operator|.
name|tfc
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|tr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Simple test to make sure the TotalFacetCountsManager updates the    * TotalFacetCounts array only when it is supposed to, and whether it    * is recomputed or read from disk, but this time with TWO different    * TotalFacetCounts    */
annotation|@
name|Test
DECL|method|testMultipleIndices
specifier|public
name|void
name|testMultipleIndices
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Create temporary RAMDirectories
name|Directory
index|[]
index|[]
name|dirs
init|=
name|FacetTestUtils
operator|.
name|createIndexTaxonomyDirs
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|// Create our index/taxonomy writers
name|IndexTaxonomyWriterPair
index|[]
name|writers
init|=
name|FacetTestUtils
operator|.
name|createIndexTaxonomyWriterPair
argument_list|(
name|dirs
argument_list|)
decl_stmt|;
name|DefaultFacetIndexingParams
name|iParams
init|=
operator|new
name|DefaultFacetIndexingParams
argument_list|()
decl_stmt|;
comment|// Add a facet to the index
name|addFacets
argument_list|(
name|iParams
argument_list|,
name|writers
index|[
literal|0
index|]
operator|.
name|indexWriter
argument_list|,
name|writers
index|[
literal|0
index|]
operator|.
name|taxWriter
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|addFacets
argument_list|(
name|iParams
argument_list|,
name|writers
index|[
literal|1
index|]
operator|.
name|indexWriter
argument_list|,
name|writers
index|[
literal|1
index|]
operator|.
name|taxWriter
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
comment|// Commit Changes
name|writers
index|[
literal|0
index|]
operator|.
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writers
index|[
literal|0
index|]
operator|.
name|taxWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writers
index|[
literal|1
index|]
operator|.
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writers
index|[
literal|1
index|]
operator|.
name|taxWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// Open two readers
name|IndexTaxonomyReaderPair
index|[]
name|readers
init|=
name|FacetTestUtils
operator|.
name|createIndexTaxonomyReaderPair
argument_list|(
name|dirs
argument_list|)
decl_stmt|;
comment|// As this is the first time we have invoked the TotalFacetCountsManager, we
comment|// should expect to compute.
name|TotalFacetCounts
name|totalCounts0
init|=
name|TFC
operator|.
name|getTotalCounts
argument_list|(
name|readers
index|[
literal|0
index|]
operator|.
name|indexReader
argument_list|,
name|readers
index|[
literal|0
index|]
operator|.
name|taxReader
argument_list|,
name|iParams
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|prevGen
init|=
operator|-
literal|1
decl_stmt|;
name|prevGen
operator|=
name|assertRecomputed
argument_list|(
name|totalCounts0
argument_list|,
name|prevGen
argument_list|,
literal|"after attempt 1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"attempt 1b for same input [0] shout find it in cache"
argument_list|,
name|totalCounts0
operator|==
name|TFC
operator|.
name|getTotalCounts
argument_list|(
name|readers
index|[
literal|0
index|]
operator|.
name|indexReader
argument_list|,
name|readers
index|[
literal|0
index|]
operator|.
name|taxReader
argument_list|,
name|iParams
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2nd Reader - As this is the first time we have invoked the
comment|// TotalFacetCountsManager, we should expect a state of NEW to be returned.
name|TotalFacetCounts
name|totalCounts1
init|=
name|TFC
operator|.
name|getTotalCounts
argument_list|(
name|readers
index|[
literal|1
index|]
operator|.
name|indexReader
argument_list|,
name|readers
index|[
literal|1
index|]
operator|.
name|taxReader
argument_list|,
name|iParams
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|prevGen
operator|=
name|assertRecomputed
argument_list|(
name|totalCounts1
argument_list|,
name|prevGen
argument_list|,
literal|"after attempt 2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"attempt 2b for same input [1] shout find it in cache"
argument_list|,
name|totalCounts1
operator|==
name|TFC
operator|.
name|getTotalCounts
argument_list|(
name|readers
index|[
literal|1
index|]
operator|.
name|indexReader
argument_list|,
name|readers
index|[
literal|1
index|]
operator|.
name|taxReader
argument_list|,
name|iParams
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Right now cache size is one, so first TFC is gone and should be recomputed
name|totalCounts0
operator|=
name|TFC
operator|.
name|getTotalCounts
argument_list|(
name|readers
index|[
literal|0
index|]
operator|.
name|indexReader
argument_list|,
name|readers
index|[
literal|0
index|]
operator|.
name|taxReader
argument_list|,
name|iParams
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|prevGen
operator|=
name|assertRecomputed
argument_list|(
name|totalCounts0
argument_list|,
name|prevGen
argument_list|,
literal|"after attempt 3"
argument_list|)
expr_stmt|;
comment|// Similarly will recompute the second result
name|totalCounts1
operator|=
name|TFC
operator|.
name|getTotalCounts
argument_list|(
name|readers
index|[
literal|1
index|]
operator|.
name|indexReader
argument_list|,
name|readers
index|[
literal|1
index|]
operator|.
name|taxReader
argument_list|,
name|iParams
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|prevGen
operator|=
name|assertRecomputed
argument_list|(
name|totalCounts1
argument_list|,
name|prevGen
argument_list|,
literal|"after attempt 4"
argument_list|)
expr_stmt|;
comment|// Now we set the cache size to two, meaning both should exist in the
comment|// cache simultaneously
name|TFC
operator|.
name|setCacheSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)
name|totalCounts0
operator|=
name|TFC
operator|.
name|getTotalCounts
argument_list|(
name|readers
index|[
literal|0
index|]
operator|.
name|indexReader
argument_list|,
name|readers
index|[
literal|0
index|]
operator|.
name|taxReader
argument_list|,
name|iParams
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|prevGen
operator|=
name|assertRecomputed
argument_list|(
name|totalCounts0
argument_list|,
name|prevGen
argument_list|,
literal|"after attempt 5"
argument_list|)
expr_stmt|;
comment|// now both are in the larger cache and should not be recomputed
name|totalCounts1
operator|=
name|TFC
operator|.
name|getTotalCounts
argument_list|(
name|readers
index|[
literal|1
index|]
operator|.
name|indexReader
argument_list|,
name|readers
index|[
literal|1
index|]
operator|.
name|taxReader
argument_list|,
name|iParams
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"with cache of size 2 res no. 0 should come from cache"
argument_list|,
name|totalCounts0
operator|==
name|TFC
operator|.
name|getTotalCounts
argument_list|(
name|readers
index|[
literal|0
index|]
operator|.
name|indexReader
argument_list|,
name|readers
index|[
literal|0
index|]
operator|.
name|taxReader
argument_list|,
name|iParams
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"with cache of size 2 res no. 1 should come from cache"
argument_list|,
name|totalCounts1
operator|==
name|TFC
operator|.
name|getTotalCounts
argument_list|(
name|readers
index|[
literal|1
index|]
operator|.
name|indexReader
argument_list|,
name|readers
index|[
literal|1
index|]
operator|.
name|taxReader
argument_list|,
name|iParams
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|writers
index|[
literal|0
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
name|writers
index|[
literal|1
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
name|readers
index|[
literal|0
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
name|readers
index|[
literal|1
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|Directory
index|[]
name|dirset
range|:
name|dirs
control|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|dirset
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
