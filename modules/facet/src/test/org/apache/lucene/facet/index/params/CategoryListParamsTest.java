begin_unit
begin_package
DECL|package|org.apache.lucene.facet.index.params
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|index
operator|.
name|params
operator|.
name|CategoryListParams
import|;
end_import
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|CategoryListParamsTest
specifier|public
class|class
name|CategoryListParamsTest
extends|extends
name|LuceneTestCase
block|{
annotation|@
name|Test
DECL|method|testDefaultSettings
specifier|public
name|void
name|testDefaultSettings
parameter_list|()
block|{
name|CategoryListParams
name|clp
init|=
operator|new
name|CategoryListParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong default term"
argument_list|,
operator|new
name|Term
argument_list|(
literal|"$facets"
argument_list|,
literal|"$fulltree$"
argument_list|)
argument_list|,
name|clp
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected default encoder"
argument_list|,
literal|"Sorting (Unique (DGap (VInt8)))"
argument_list|,
name|clp
operator|.
name|createEncoder
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected default decoder"
argument_list|,
literal|"DGap (VInt8)"
argument_list|,
name|clp
operator|.
name|createEncoder
argument_list|()
operator|.
name|createMatchingDecoder
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that the {@link CategoryListParams#hashCode()} and    * {@link CategoryListParams#equals(Object)} are consistent.    */
annotation|@
name|Test
DECL|method|testIdentity
specifier|public
name|void
name|testIdentity
parameter_list|()
block|{
name|CategoryListParams
name|clParams1
init|=
operator|new
name|CategoryListParams
argument_list|()
decl_stmt|;
comment|// Assert identity is correct - a CategoryListParams equals itself.
name|assertEquals
argument_list|(
literal|"A CategoryListParams object does not equal itself."
argument_list|,
name|clParams1
argument_list|,
name|clParams1
argument_list|)
expr_stmt|;
comment|// For completeness, the object's hashcode equals itself
name|assertEquals
argument_list|(
literal|"A CategoryListParams object's hashCode does not equal itself."
argument_list|,
name|clParams1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|clParams1
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that CategoryListParams behave correctly when compared against each    * other.    */
annotation|@
name|Test
DECL|method|testIdentityConsistency
specifier|public
name|void
name|testIdentityConsistency
parameter_list|()
block|{
comment|// Test 2 CategoryListParams with the default parameter
name|CategoryListParams
name|clParams1
init|=
operator|new
name|CategoryListParams
argument_list|()
decl_stmt|;
name|CategoryListParams
name|clParams2
init|=
operator|new
name|CategoryListParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2 CategoryListParams with the same default term should equal each other."
argument_list|,
name|clParams1
argument_list|,
name|clParams2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2 CategoryListParams with the same default term should have the same hashcode"
argument_list|,
name|clParams1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|clParams2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test 2 CategoryListParams with the same specified Term
name|clParams1
operator|=
operator|new
name|CategoryListParams
argument_list|(
operator|new
name|Term
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|clParams2
operator|=
operator|new
name|CategoryListParams
argument_list|(
operator|new
name|Term
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2 CategoryListParams with the same term should equal each other."
argument_list|,
name|clParams1
argument_list|,
name|clParams2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2 CategoryListParams with the same term should have the same hashcode"
argument_list|,
name|clParams1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|clParams2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test 2 CategoryListParams with DIFFERENT terms
name|clParams1
operator|=
operator|new
name|CategoryListParams
argument_list|(
operator|new
name|Term
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|clParams2
operator|=
operator|new
name|CategoryListParams
argument_list|(
operator|new
name|Term
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"2 CategoryListParams with the different terms should NOT equal each other."
argument_list|,
name|clParams1
operator|.
name|equals
argument_list|(
name|clParams2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"2 CategoryListParams with the different terms should NOT have the same hashcode."
argument_list|,
name|clParams1
operator|.
name|hashCode
argument_list|()
operator|==
name|clParams2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
