begin_unit
begin_package
DECL|package|org.apache.lucene.facet.enhancements
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|enhancements
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|enhancements
operator|.
name|EnhancementsDocumentBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|enhancements
operator|.
name|EnhancementsPayloadIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|enhancements
operator|.
name|params
operator|.
name|DefaultEnhancementsIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|enhancements
operator|.
name|params
operator|.
name|EnhancementsIndexingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|DrillDown
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyWriter
import|;
end_import
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|TwoEnhancementsTest
specifier|public
class|class
name|TwoEnhancementsTest
extends|extends
name|LuceneTestCase
block|{
annotation|@
name|Test
DECL|method|testTwoEmptyAndNonEmptyByteArrays
specifier|public
name|void
name|testTwoEmptyAndNonEmptyByteArrays
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|indexDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Directory
name|taxoDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|EnhancementsIndexingParams
name|indexingParams
init|=
operator|new
name|DefaultEnhancementsIndexingParams
argument_list|(
operator|new
name|CategoryEnhancementDummy1
argument_list|()
argument_list|,
operator|new
name|CategoryEnhancementDummy3
argument_list|()
argument_list|)
decl_stmt|;
comment|// add document with a category containing data for both enhancements
name|List
argument_list|<
name|CategoryPath
argument_list|>
name|categoryPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|CategoryPath
argument_list|>
argument_list|()
decl_stmt|;
name|categoryPaths
operator|.
name|add
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|indexWriter
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|indexDir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TaxonomyWriter
name|taxo
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|taxoDir
argument_list|)
decl_stmt|;
comment|// a category document builder will add the categories to a document
comment|// once build() is called
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
operator|new
name|EnhancementsDocumentBuilder
argument_list|(
name|taxo
argument_list|,
name|indexingParams
argument_list|)
operator|.
name|setCategoryPaths
argument_list|(
name|categoryPaths
argument_list|)
operator|.
name|build
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|IndexReader
name|indexReader
init|=
name|indexWriter
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|indexWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|Term
name|term
init|=
name|DrillDown
operator|.
name|term
argument_list|(
name|indexingParams
argument_list|,
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|EnhancementsPayloadIterator
name|iterator
init|=
operator|new
name|EnhancementsPayloadIterator
argument_list|(
name|indexingParams
operator|.
name|getCategoryEnhancements
argument_list|()
argument_list|,
name|indexReader
argument_list|,
name|term
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"EnhancementsPayloadIterator failure"
argument_list|,
name|iterator
operator|.
name|init
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing document 0"
argument_list|,
name|iterator
operator|.
name|setdoc
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected data for CategoryEnhancementDummy2"
argument_list|,
name|iterator
operator|.
name|getCategoryData
argument_list|(
operator|new
name|CategoryEnhancementDummy1
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|dummy3
init|=
operator|(
name|byte
index|[]
operator|)
name|iterator
operator|.
name|getCategoryData
argument_list|(
operator|new
name|CategoryEnhancementDummy3
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Bad array returned for CategoryEnhancementDummy3"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|dummy3
argument_list|,
name|CategoryEnhancementDummy3
operator|.
name|CATEGORY_TOKEN_BYTES
argument_list|)
argument_list|)
expr_stmt|;
name|indexReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|indexDir
operator|.
name|close
argument_list|()
expr_stmt|;
name|taxo
operator|.
name|close
argument_list|()
expr_stmt|;
name|taxoDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTwoNonEmptyByteArrays
specifier|public
name|void
name|testTwoNonEmptyByteArrays
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add document with a category containing data for both enhancements
name|Directory
name|indexDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Directory
name|taxoDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|EnhancementsIndexingParams
name|indexingParams
init|=
operator|new
name|DefaultEnhancementsIndexingParams
argument_list|(
operator|new
name|CategoryEnhancementDummy2
argument_list|()
argument_list|,
operator|new
name|CategoryEnhancementDummy3
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CategoryPath
argument_list|>
name|categoryPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|CategoryPath
argument_list|>
argument_list|()
decl_stmt|;
name|categoryPaths
operator|.
name|add
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|indexWriter
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|indexDir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TaxonomyWriter
name|taxo
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|taxoDir
argument_list|)
decl_stmt|;
comment|// a category document builder will add the categories to a document
comment|// once build() is called
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
operator|new
name|EnhancementsDocumentBuilder
argument_list|(
name|taxo
argument_list|,
name|indexingParams
argument_list|)
operator|.
name|setCategoryPaths
argument_list|(
name|categoryPaths
argument_list|)
operator|.
name|build
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|IndexReader
name|indexReader
init|=
name|indexWriter
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|indexWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|Term
name|term
init|=
name|DrillDown
operator|.
name|term
argument_list|(
name|indexingParams
argument_list|,
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|EnhancementsPayloadIterator
name|iterator
init|=
operator|new
name|EnhancementsPayloadIterator
argument_list|(
name|indexingParams
operator|.
name|getCategoryEnhancements
argument_list|()
argument_list|,
name|indexReader
argument_list|,
name|term
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"EnhancementsPayloadIterator failure"
argument_list|,
name|iterator
operator|.
name|init
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing document 0"
argument_list|,
name|iterator
operator|.
name|setdoc
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|dummy2
init|=
operator|(
name|byte
index|[]
operator|)
name|iterator
operator|.
name|getCategoryData
argument_list|(
operator|new
name|CategoryEnhancementDummy2
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Bad array returned for CategoryEnhancementDummy2"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|dummy2
argument_list|,
name|CategoryEnhancementDummy2
operator|.
name|CATEGORY_TOKEN_BYTES
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|dummy3
init|=
operator|(
name|byte
index|[]
operator|)
name|iterator
operator|.
name|getCategoryData
argument_list|(
operator|new
name|CategoryEnhancementDummy3
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Bad array returned for CategoryEnhancementDummy3"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|dummy3
argument_list|,
name|CategoryEnhancementDummy3
operator|.
name|CATEGORY_TOKEN_BYTES
argument_list|)
argument_list|)
expr_stmt|;
name|indexReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|taxo
operator|.
name|close
argument_list|()
expr_stmt|;
name|indexDir
operator|.
name|close
argument_list|()
expr_stmt|;
name|taxoDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
