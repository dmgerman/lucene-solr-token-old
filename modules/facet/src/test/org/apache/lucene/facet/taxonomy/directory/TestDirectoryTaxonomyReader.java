begin_unit
begin_package
DECL|package|org.apache.lucene.facet.taxonomy.directory
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|InconsistentTaxonomyException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|TaxonomyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|directory
operator|.
name|DirectoryTaxonomyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
operator|.
name|OpenMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|TestDirectoryTaxonomyReader
specifier|public
class|class
name|TestDirectoryTaxonomyReader
extends|extends
name|LuceneTestCase
block|{
annotation|@
name|Test
DECL|method|testCloseAfterIncRef
specifier|public
name|void
name|testCloseAfterIncRef
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|DirectoryTaxonomyWriter
name|ltw
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|ltw
operator|.
name|addCategory
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|ltw
operator|.
name|close
argument_list|()
expr_stmt|;
name|DirectoryTaxonomyReader
name|ltr
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|ltr
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|ltr
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// should not fail as we incRef() before close
name|ltr
operator|.
name|getSize
argument_list|()
expr_stmt|;
name|ltr
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCloseTwice
specifier|public
name|void
name|testCloseTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|DirectoryTaxonomyWriter
name|ltw
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|ltw
operator|.
name|addCategory
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|ltw
operator|.
name|close
argument_list|()
expr_stmt|;
name|DirectoryTaxonomyReader
name|ltr
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|ltr
operator|.
name|close
argument_list|()
expr_stmt|;
name|ltr
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// no exception should be thrown
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test the boolean returned by TR.refresh    * @throws Exception    */
annotation|@
name|Test
DECL|method|testReaderRefreshResult
specifier|public
name|void
name|testReaderRefreshResult
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
literal|null
decl_stmt|;
name|DirectoryTaxonomyWriter
name|ltw
init|=
literal|null
decl_stmt|;
name|DirectoryTaxonomyReader
name|ltr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|ltw
operator|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|ltw
operator|.
name|addCategory
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|ltw
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ltr
operator|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Nothing has changed"
argument_list|,
name|ltr
operator|.
name|refresh
argument_list|()
argument_list|)
expr_stmt|;
name|ltw
operator|.
name|addCategory
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|ltw
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"changes were committed"
argument_list|,
name|ltr
operator|.
name|refresh
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Nothing has changed"
argument_list|,
name|ltr
operator|.
name|refresh
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|ltw
argument_list|,
name|ltr
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAlreadyClosed
specifier|public
name|void
name|testAlreadyClosed
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|DirectoryTaxonomyWriter
name|ltw
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|ltw
operator|.
name|addCategory
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|ltw
operator|.
name|close
argument_list|()
expr_stmt|;
name|DirectoryTaxonomyReader
name|ltr
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|ltr
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|ltr
operator|.
name|getSize
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"An AlreadyClosedException should have been thrown here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|ace
parameter_list|)
block|{
comment|// good!
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * recreating a taxonomy should work well with a freshly opened taxonomy reader     */
annotation|@
name|Test
DECL|method|testFreshReadRecreatedTaxonomy
specifier|public
name|void
name|testFreshReadRecreatedTaxonomy
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestReadRecreatedTaxono
argument_list|(
name|random
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * recreating a taxonomy should work well with a refreshed taxonomy reader     */
annotation|@
name|Test
DECL|method|testRefreshReadRecreatedTaxonomy
specifier|public
name|void
name|testRefreshReadRecreatedTaxonomy
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestReadRecreatedTaxono
argument_list|(
name|random
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestReadRecreatedTaxono
specifier|private
name|void
name|doTestReadRecreatedTaxono
parameter_list|(
name|Random
name|random
parameter_list|,
name|boolean
name|closeReader
parameter_list|)
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
literal|null
decl_stmt|;
name|TaxonomyWriter
name|tw
init|=
literal|null
decl_stmt|;
name|TaxonomyReader
name|tr
init|=
literal|null
decl_stmt|;
comment|// prepare a few categories
name|int
name|n
init|=
literal|10
decl_stmt|;
name|CategoryPath
index|[]
name|cp
init|=
operator|new
name|CategoryPath
index|[
name|n
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|cp
index|[
name|i
index|]
operator|=
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|tw
operator|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|tw
operator|.
name|addCategory
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|tw
operator|.
name|close
argument_list|()
expr_stmt|;
name|tr
operator|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|int
name|baseNumCategories
init|=
name|tr
operator|.
name|getSize
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|int
name|k
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|tw
operator|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|dir
argument_list|,
name|OpenMode
operator|.
name|CREATE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<=
name|k
condition|;
name|j
operator|++
control|)
block|{
name|tw
operator|.
name|addCategory
argument_list|(
operator|new
name|CategoryPath
argument_list|(
name|cp
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tw
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|closeReader
condition|)
block|{
name|tr
operator|.
name|close
argument_list|()
expr_stmt|;
name|tr
operator|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|tr
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected InconsistentTaxonomyException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InconsistentTaxonomyException
name|e
parameter_list|)
block|{
name|tr
operator|.
name|close
argument_list|()
expr_stmt|;
name|tr
operator|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"Wrong #categories in taxonomy (i="
operator|+
name|i
operator|+
literal|", k="
operator|+
name|k
operator|+
literal|")"
argument_list|,
name|baseNumCategories
operator|+
literal|1
operator|+
name|k
argument_list|,
name|tr
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|tr
argument_list|,
name|tw
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRefreshAndRefCount
specifier|public
name|void
name|testRefreshAndRefCount
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
comment|// no need for random directories here
name|DirectoryTaxonomyWriter
name|taxoWriter
init|=
operator|new
name|DirectoryTaxonomyWriter
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|taxoWriter
operator|.
name|addCategory
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|taxoWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
name|DirectoryTaxonomyReader
name|taxoReader
init|=
operator|new
name|DirectoryTaxonomyReader
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong refCount"
argument_list|,
literal|1
argument_list|,
name|taxoReader
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|taxoReader
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong refCount"
argument_list|,
literal|2
argument_list|,
name|taxoReader
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|taxoWriter
operator|.
name|addCategory
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|taxoWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
name|taxoReader
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong refCount"
argument_list|,
literal|2
argument_list|,
name|taxoReader
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|taxoWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|taxoReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
