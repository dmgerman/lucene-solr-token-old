begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.search.grouping
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|IndexOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ReaderUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_comment
comment|// TODO
end_comment
begin_comment
comment|//   - should test relevance sort too
end_comment
begin_comment
comment|//   - test null
end_comment
begin_comment
comment|//   - test ties
end_comment
begin_comment
comment|//   - test compound sort
end_comment
begin_class
DECL|class|TestGrouping
specifier|public
class|class
name|TestGrouping
extends|extends
name|LuceneTestCase
block|{
DECL|method|testBasic
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|groupField
init|=
literal|"author"
decl_stmt|;
name|FieldType
name|customType
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|customType
operator|.
name|setStored
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// 0
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|groupField
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|,
literal|"author1"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|,
literal|"random text"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
name|customType
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 1
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|groupField
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|,
literal|"author1"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|,
literal|"some more random text"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
name|customType
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 2
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|groupField
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|,
literal|"author1"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|,
literal|"some more random textual data"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
name|customType
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 3
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|groupField
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|,
literal|"author2"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|,
literal|"some random text"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
name|customType
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 4
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|groupField
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|,
literal|"author3"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|,
literal|"some more random text"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
name|customType
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 5
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|groupField
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|,
literal|"author3"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|,
literal|"random"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
name|customType
argument_list|,
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 6 -- no author field
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|,
literal|"random word stuck in alot of other text"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
name|customType
argument_list|,
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexSearcher
name|indexSearcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|w
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|Sort
name|groupSort
init|=
name|Sort
operator|.
name|RELEVANCE
decl_stmt|;
specifier|final
name|TermFirstPassGroupingCollector
name|c1
init|=
operator|new
name|TermFirstPassGroupingCollector
argument_list|(
name|groupField
argument_list|,
name|groupSort
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"random"
argument_list|)
argument_list|)
argument_list|,
name|c1
argument_list|)
expr_stmt|;
specifier|final
name|TermSecondPassGroupingCollector
name|c2
init|=
operator|new
name|TermSecondPassGroupingCollector
argument_list|(
name|groupField
argument_list|,
name|c1
operator|.
name|getTopGroups
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|,
name|groupSort
argument_list|,
literal|null
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"random"
argument_list|)
argument_list|)
argument_list|,
name|c2
argument_list|)
expr_stmt|;
specifier|final
name|TopGroups
name|groups
init|=
name|c2
operator|.
name|getTopGroups
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|groups
operator|.
name|totalHitCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|groups
operator|.
name|totalGroupedHitCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|groups
operator|.
name|groups
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// relevance order: 5, 0, 3, 4, 1, 2, 6
comment|// the later a document is added the higher this docId
comment|// value
name|GroupDocs
name|group
init|=
name|groups
operator|.
name|groups
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"author3"
argument_list|)
argument_list|,
name|group
operator|.
name|groupValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|group
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|group
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|group
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|group
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|score
operator|>
name|group
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|score
argument_list|)
expr_stmt|;
name|group
operator|=
name|groups
operator|.
name|groups
index|[
literal|1
index|]
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"author1"
argument_list|)
argument_list|,
name|group
operator|.
name|groupValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|group
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|group
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|group
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|group
operator|.
name|scoreDocs
index|[
literal|2
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|group
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|score
operator|>
name|group
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|score
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|group
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|score
operator|>
name|group
operator|.
name|scoreDocs
index|[
literal|2
index|]
operator|.
name|score
argument_list|)
expr_stmt|;
name|group
operator|=
name|groups
operator|.
name|groups
index|[
literal|2
index|]
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"author2"
argument_list|)
argument_list|,
name|group
operator|.
name|groupValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|group
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|group
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|group
operator|=
name|groups
operator|.
name|groups
index|[
literal|3
index|]
expr_stmt|;
name|assertNull
argument_list|(
name|group
operator|.
name|groupValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|group
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|group
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|GroupDoc
specifier|private
specifier|static
class|class
name|GroupDoc
block|{
DECL|field|id
specifier|final
name|int
name|id
decl_stmt|;
DECL|field|group
specifier|final
name|BytesRef
name|group
decl_stmt|;
DECL|field|sort1
specifier|final
name|BytesRef
name|sort1
decl_stmt|;
DECL|field|sort2
specifier|final
name|BytesRef
name|sort2
decl_stmt|;
comment|// content must be "realN ..."
DECL|field|content
specifier|final
name|String
name|content
decl_stmt|;
DECL|field|score
name|float
name|score
decl_stmt|;
DECL|field|score2
name|float
name|score2
decl_stmt|;
DECL|method|GroupDoc
specifier|public
name|GroupDoc
parameter_list|(
name|int
name|id
parameter_list|,
name|BytesRef
name|group
parameter_list|,
name|BytesRef
name|sort1
parameter_list|,
name|BytesRef
name|sort2
parameter_list|,
name|String
name|content
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
name|this
operator|.
name|sort1
operator|=
name|sort1
expr_stmt|;
name|this
operator|.
name|sort2
operator|=
name|sort2
expr_stmt|;
name|this
operator|.
name|content
operator|=
name|content
expr_stmt|;
block|}
block|}
DECL|method|getRandomSort
specifier|private
name|Sort
name|getRandomSort
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|SortField
argument_list|>
name|sortFields
init|=
operator|new
name|ArrayList
argument_list|<
name|SortField
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|7
argument_list|)
operator|==
literal|2
condition|)
block|{
name|sortFields
operator|.
name|add
argument_list|(
name|SortField
operator|.
name|FIELD_SCORE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|sortFields
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"sort1"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|STRING
argument_list|,
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sortFields
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"sort2"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|STRING
argument_list|,
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|sortFields
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"sort1"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|STRING
argument_list|,
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sortFields
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"sort2"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|STRING
argument_list|,
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Break ties:
name|sortFields
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"id"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|Sort
argument_list|(
name|sortFields
operator|.
name|toArray
argument_list|(
operator|new
name|SortField
index|[
name|sortFields
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getComparator
specifier|private
name|Comparator
argument_list|<
name|GroupDoc
argument_list|>
name|getComparator
parameter_list|(
name|Sort
name|sort
parameter_list|)
block|{
specifier|final
name|SortField
index|[]
name|sortFields
init|=
name|sort
operator|.
name|getSort
argument_list|()
decl_stmt|;
return|return
operator|new
name|Comparator
argument_list|<
name|GroupDoc
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|GroupDoc
name|d1
parameter_list|,
name|GroupDoc
name|d2
parameter_list|)
block|{
for|for
control|(
name|SortField
name|sf
range|:
name|sortFields
control|)
block|{
specifier|final
name|int
name|cmp
decl_stmt|;
if|if
condition|(
name|sf
operator|.
name|getType
argument_list|()
operator|==
name|SortField
operator|.
name|Type
operator|.
name|SCORE
condition|)
block|{
if|if
condition|(
name|d1
operator|.
name|score
operator|>
name|d2
operator|.
name|score
condition|)
block|{
name|cmp
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d1
operator|.
name|score
operator|<
name|d2
operator|.
name|score
condition|)
block|{
name|cmp
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|cmp
operator|=
literal|0
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sf
operator|.
name|getField
argument_list|()
operator|.
name|equals
argument_list|(
literal|"sort1"
argument_list|)
condition|)
block|{
name|cmp
operator|=
name|d1
operator|.
name|sort1
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|sort1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sf
operator|.
name|getField
argument_list|()
operator|.
name|equals
argument_list|(
literal|"sort2"
argument_list|)
condition|)
block|{
name|cmp
operator|=
name|d1
operator|.
name|sort2
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|sort2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|sf
operator|.
name|getField
argument_list|()
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
name|cmp
operator|=
name|d1
operator|.
name|id
operator|-
name|d2
operator|.
name|id
expr_stmt|;
block|}
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
return|return
name|sf
operator|.
name|getReverse
argument_list|()
condition|?
operator|-
name|cmp
else|:
name|cmp
return|;
block|}
block|}
comment|// Our sort always fully tie breaks:
name|fail
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
return|;
block|}
DECL|method|fillFields
specifier|private
name|Comparable
argument_list|<
name|?
argument_list|>
index|[]
name|fillFields
parameter_list|(
name|GroupDoc
name|d
parameter_list|,
name|Sort
name|sort
parameter_list|)
block|{
specifier|final
name|SortField
index|[]
name|sortFields
init|=
name|sort
operator|.
name|getSort
argument_list|()
decl_stmt|;
specifier|final
name|Comparable
argument_list|<
name|?
argument_list|>
index|[]
name|fields
init|=
operator|new
name|Comparable
index|[
name|sortFields
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|fieldIDX
init|=
literal|0
init|;
name|fieldIDX
operator|<
name|sortFields
operator|.
name|length
condition|;
name|fieldIDX
operator|++
control|)
block|{
specifier|final
name|Comparable
argument_list|<
name|?
argument_list|>
name|c
decl_stmt|;
specifier|final
name|SortField
name|sf
init|=
name|sortFields
index|[
name|fieldIDX
index|]
decl_stmt|;
if|if
condition|(
name|sf
operator|.
name|getType
argument_list|()
operator|==
name|SortField
operator|.
name|Type
operator|.
name|SCORE
condition|)
block|{
name|c
operator|=
operator|new
name|Float
argument_list|(
name|d
operator|.
name|score
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sf
operator|.
name|getField
argument_list|()
operator|.
name|equals
argument_list|(
literal|"sort1"
argument_list|)
condition|)
block|{
name|c
operator|=
name|d
operator|.
name|sort1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sf
operator|.
name|getField
argument_list|()
operator|.
name|equals
argument_list|(
literal|"sort2"
argument_list|)
condition|)
block|{
name|c
operator|=
name|d
operator|.
name|sort2
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"id"
argument_list|,
name|sf
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|=
operator|new
name|Integer
argument_list|(
name|d
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
name|fields
index|[
name|fieldIDX
index|]
operator|=
name|c
expr_stmt|;
block|}
return|return
name|fields
return|;
block|}
DECL|method|groupToString
specifier|private
name|String
name|groupToString
parameter_list|(
name|BytesRef
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|"null"
return|;
block|}
else|else
block|{
return|return
name|b
operator|.
name|utf8ToString
argument_list|()
return|;
block|}
block|}
DECL|method|slowGrouping
specifier|private
name|TopGroups
argument_list|<
name|BytesRef
argument_list|>
name|slowGrouping
parameter_list|(
name|GroupDoc
index|[]
name|groupDocs
parameter_list|,
name|String
name|searchTerm
parameter_list|,
name|boolean
name|fillFields
parameter_list|,
name|boolean
name|getScores
parameter_list|,
name|boolean
name|getMaxScores
parameter_list|,
name|boolean
name|doAllGroups
parameter_list|,
name|Sort
name|groupSort
parameter_list|,
name|Sort
name|docSort
parameter_list|,
name|int
name|topNGroups
parameter_list|,
name|int
name|docsPerGroup
parameter_list|,
name|int
name|groupOffset
parameter_list|,
name|int
name|docOffset
parameter_list|)
block|{
specifier|final
name|Comparator
argument_list|<
name|GroupDoc
argument_list|>
name|groupSortComp
init|=
name|getComparator
argument_list|(
name|groupSort
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|groupDocs
argument_list|,
name|groupSortComp
argument_list|)
expr_stmt|;
specifier|final
name|HashMap
argument_list|<
name|BytesRef
argument_list|,
name|List
argument_list|<
name|GroupDoc
argument_list|>
argument_list|>
name|groups
init|=
operator|new
name|HashMap
argument_list|<
name|BytesRef
argument_list|,
name|List
argument_list|<
name|GroupDoc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|BytesRef
argument_list|>
name|sortedGroups
init|=
operator|new
name|ArrayList
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
index|[]
argument_list|>
name|sortedGroupFields
init|=
operator|new
name|ArrayList
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|totalHitCount
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|BytesRef
argument_list|>
name|knownGroups
init|=
operator|new
name|HashSet
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
decl_stmt|;
comment|//System.out.println("TEST: slowGrouping");
for|for
control|(
name|GroupDoc
name|d
range|:
name|groupDocs
control|)
block|{
comment|// TODO: would be better to filter by searchTerm before sorting!
if|if
condition|(
operator|!
name|d
operator|.
name|content
operator|.
name|startsWith
argument_list|(
name|searchTerm
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|totalHitCount
operator|++
expr_stmt|;
comment|//System.out.println("  match id=" + d.id + " score=" + d.score);
if|if
condition|(
name|doAllGroups
condition|)
block|{
if|if
condition|(
operator|!
name|knownGroups
operator|.
name|contains
argument_list|(
name|d
operator|.
name|group
argument_list|)
condition|)
block|{
name|knownGroups
operator|.
name|add
argument_list|(
name|d
operator|.
name|group
argument_list|)
expr_stmt|;
comment|//System.out.println("    add group=" + groupToString(d.group));
block|}
block|}
name|List
argument_list|<
name|GroupDoc
argument_list|>
name|l
init|=
name|groups
operator|.
name|get
argument_list|(
name|d
operator|.
name|group
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|==
literal|null
condition|)
block|{
comment|//System.out.println("    add sortedGroup=" + groupToString(d.group));
name|sortedGroups
operator|.
name|add
argument_list|(
name|d
operator|.
name|group
argument_list|)
expr_stmt|;
if|if
condition|(
name|fillFields
condition|)
block|{
name|sortedGroupFields
operator|.
name|add
argument_list|(
name|fillFields
argument_list|(
name|d
argument_list|,
name|groupSort
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|l
operator|=
operator|new
name|ArrayList
argument_list|<
name|GroupDoc
argument_list|>
argument_list|()
expr_stmt|;
name|groups
operator|.
name|put
argument_list|(
name|d
operator|.
name|group
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
name|l
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupOffset
operator|>=
name|sortedGroups
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// slice is out of bounds
return|return
literal|null
return|;
block|}
specifier|final
name|int
name|limit
init|=
name|Math
operator|.
name|min
argument_list|(
name|groupOffset
operator|+
name|topNGroups
argument_list|,
name|groups
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Comparator
argument_list|<
name|GroupDoc
argument_list|>
name|docSortComp
init|=
name|getComparator
argument_list|(
name|docSort
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|GroupDocs
argument_list|<
name|BytesRef
argument_list|>
index|[]
name|result
init|=
operator|new
name|GroupDocs
index|[
name|limit
operator|-
name|groupOffset
index|]
decl_stmt|;
name|int
name|totalGroupedHitCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
name|groupOffset
init|;
name|idx
operator|<
name|limit
condition|;
name|idx
operator|++
control|)
block|{
specifier|final
name|BytesRef
name|group
init|=
name|sortedGroups
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|GroupDoc
argument_list|>
name|docs
init|=
name|groups
operator|.
name|get
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|totalGroupedHitCount
operator|+=
name|docs
operator|.
name|size
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|docs
argument_list|,
name|docSortComp
argument_list|)
expr_stmt|;
specifier|final
name|ScoreDoc
index|[]
name|hits
decl_stmt|;
if|if
condition|(
name|docs
operator|.
name|size
argument_list|()
operator|>
name|docOffset
condition|)
block|{
specifier|final
name|int
name|docIDXLimit
init|=
name|Math
operator|.
name|min
argument_list|(
name|docOffset
operator|+
name|docsPerGroup
argument_list|,
name|docs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|hits
operator|=
operator|new
name|ScoreDoc
index|[
name|docIDXLimit
operator|-
name|docOffset
index|]
expr_stmt|;
for|for
control|(
name|int
name|docIDX
init|=
name|docOffset
init|;
name|docIDX
operator|<
name|docIDXLimit
condition|;
name|docIDX
operator|++
control|)
block|{
specifier|final
name|GroupDoc
name|d
init|=
name|docs
operator|.
name|get
argument_list|(
name|docIDX
argument_list|)
decl_stmt|;
specifier|final
name|FieldDoc
name|fd
decl_stmt|;
if|if
condition|(
name|fillFields
condition|)
block|{
name|fd
operator|=
operator|new
name|FieldDoc
argument_list|(
name|d
operator|.
name|id
argument_list|,
name|getScores
condition|?
name|d
operator|.
name|score
else|:
name|Float
operator|.
name|NaN
argument_list|,
name|fillFields
argument_list|(
name|d
argument_list|,
name|docSort
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fd
operator|=
operator|new
name|FieldDoc
argument_list|(
name|d
operator|.
name|id
argument_list|,
name|getScores
condition|?
name|d
operator|.
name|score
else|:
name|Float
operator|.
name|NaN
argument_list|)
expr_stmt|;
block|}
name|hits
index|[
name|docIDX
operator|-
name|docOffset
index|]
operator|=
name|fd
expr_stmt|;
block|}
block|}
else|else
block|{
name|hits
operator|=
operator|new
name|ScoreDoc
index|[
literal|0
index|]
expr_stmt|;
block|}
name|result
index|[
name|idx
operator|-
name|groupOffset
index|]
operator|=
operator|new
name|GroupDocs
argument_list|<
name|BytesRef
argument_list|>
argument_list|(
literal|0.0f
argument_list|,
name|docs
operator|.
name|size
argument_list|()
argument_list|,
name|hits
argument_list|,
name|group
argument_list|,
name|fillFields
condition|?
name|sortedGroupFields
operator|.
name|get
argument_list|(
name|idx
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doAllGroups
condition|)
block|{
return|return
operator|new
name|TopGroups
argument_list|<
name|BytesRef
argument_list|>
argument_list|(
operator|new
name|TopGroups
argument_list|<
name|BytesRef
argument_list|>
argument_list|(
name|groupSort
operator|.
name|getSort
argument_list|()
argument_list|,
name|docSort
operator|.
name|getSort
argument_list|()
argument_list|,
name|totalHitCount
argument_list|,
name|totalGroupedHitCount
argument_list|,
name|result
argument_list|)
argument_list|,
name|knownGroups
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|TopGroups
argument_list|<
name|BytesRef
argument_list|>
argument_list|(
name|groupSort
operator|.
name|getSort
argument_list|()
argument_list|,
name|docSort
operator|.
name|getSort
argument_list|()
argument_list|,
name|totalHitCount
argument_list|,
name|totalGroupedHitCount
argument_list|,
name|result
argument_list|)
return|;
block|}
block|}
DECL|method|getDocBlockReader
specifier|private
name|IndexReader
name|getDocBlockReader
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|GroupDoc
index|[]
name|groupDocs
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Coalesce by group, but in random order:
name|Collections
operator|.
name|shuffle
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|groupDocs
argument_list|)
argument_list|,
name|random
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|List
argument_list|<
name|GroupDoc
argument_list|>
argument_list|>
name|groupMap
init|=
operator|new
name|HashMap
argument_list|<
name|BytesRef
argument_list|,
name|List
argument_list|<
name|GroupDoc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|BytesRef
argument_list|>
name|groupValues
init|=
operator|new
name|ArrayList
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|GroupDoc
name|groupDoc
range|:
name|groupDocs
control|)
block|{
if|if
condition|(
operator|!
name|groupMap
operator|.
name|containsKey
argument_list|(
name|groupDoc
operator|.
name|group
argument_list|)
condition|)
block|{
name|groupValues
operator|.
name|add
argument_list|(
name|groupDoc
operator|.
name|group
argument_list|)
expr_stmt|;
name|groupMap
operator|.
name|put
argument_list|(
name|groupDoc
operator|.
name|group
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|GroupDoc
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|groupMap
operator|.
name|get
argument_list|(
name|groupDoc
operator|.
name|group
argument_list|)
operator|.
name|add
argument_list|(
name|groupDoc
argument_list|)
expr_stmt|;
block|}
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|Document
argument_list|>
argument_list|>
name|updateDocs
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Document
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|//System.out.println("TEST: index groups");
for|for
control|(
name|BytesRef
name|group
range|:
name|groupValues
control|)
block|{
specifier|final
name|List
argument_list|<
name|Document
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<
name|Document
argument_list|>
argument_list|()
decl_stmt|;
comment|//System.out.println("TEST:   group=" + (group == null ? "null" : group.utf8ToString()));
for|for
control|(
name|GroupDoc
name|groupValue
range|:
name|groupMap
operator|.
name|get
argument_list|(
name|group
argument_list|)
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupValue
operator|.
name|group
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"group"
argument_list|,
name|groupValue
operator|.
name|group
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"sort1"
argument_list|,
name|groupValue
operator|.
name|sort1
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"sort2"
argument_list|,
name|groupValue
operator|.
name|sort2
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericField
argument_list|(
literal|"id"
argument_list|)
operator|.
name|setIntValue
argument_list|(
name|groupValue
operator|.
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"content"
argument_list|,
name|groupValue
operator|.
name|content
argument_list|,
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
comment|//System.out.println("TEST:     doc content=" + groupValue.content + " group=" + (groupValue.group == null ? "null" : groupValue.group.utf8ToString()) + " sort1=" + groupValue.sort1.utf8ToString() + " id=" + groupValue.id);
block|}
comment|// So we can pull filter marking last doc in block:
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|(
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_ONLY
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setOmitNorms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Field
name|groupEnd
init|=
name|newField
argument_list|(
literal|"groupend"
argument_list|,
literal|"x"
argument_list|,
name|ft
argument_list|)
decl_stmt|;
name|docs
operator|.
name|get
argument_list|(
name|docs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|add
argument_list|(
name|groupEnd
argument_list|)
expr_stmt|;
comment|// Add as a doc block:
name|w
operator|.
name|addDocuments
argument_list|(
name|docs
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
operator|&&
name|random
operator|.
name|nextInt
argument_list|(
literal|7
argument_list|)
operator|==
literal|4
condition|)
block|{
name|updateDocs
operator|.
name|add
argument_list|(
name|docs
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|List
argument_list|<
name|Document
argument_list|>
name|docs
range|:
name|updateDocs
control|)
block|{
comment|// Just replaces docs w/ same docs:
name|w
operator|.
name|updateDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"group"
argument_list|,
name|docs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"group"
argument_list|)
argument_list|)
argument_list|,
name|docs
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|class|ShardState
specifier|private
specifier|static
class|class
name|ShardState
block|{
DECL|field|subSearchers
specifier|public
specifier|final
name|ShardSearcher
index|[]
name|subSearchers
decl_stmt|;
DECL|field|docStarts
specifier|public
specifier|final
name|int
index|[]
name|docStarts
decl_stmt|;
DECL|method|ShardState
specifier|public
name|ShardState
parameter_list|(
name|IndexSearcher
name|s
parameter_list|)
block|{
name|IndexReader
index|[]
name|subReaders
init|=
name|s
operator|.
name|getIndexReader
argument_list|()
operator|.
name|getSequentialSubReaders
argument_list|()
decl_stmt|;
if|if
condition|(
name|subReaders
operator|==
literal|null
condition|)
block|{
name|subReaders
operator|=
operator|new
name|IndexReader
index|[]
block|{
name|s
operator|.
name|getIndexReader
argument_list|()
block|}
expr_stmt|;
block|}
name|subSearchers
operator|=
operator|new
name|ShardSearcher
index|[
name|subReaders
operator|.
name|length
index|]
expr_stmt|;
specifier|final
name|IndexReader
operator|.
name|ReaderContext
name|ctx
init|=
name|s
operator|.
name|getTopReaderContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|instanceof
name|IndexReader
operator|.
name|AtomicReaderContext
condition|)
block|{
assert|assert
name|subSearchers
operator|.
name|length
operator|==
literal|1
assert|;
name|subSearchers
index|[
literal|0
index|]
operator|=
operator|new
name|ShardSearcher
argument_list|(
operator|(
name|IndexReader
operator|.
name|AtomicReaderContext
operator|)
name|ctx
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|IndexReader
operator|.
name|CompositeReaderContext
name|compCTX
init|=
operator|(
name|IndexReader
operator|.
name|CompositeReaderContext
operator|)
name|ctx
decl_stmt|;
for|for
control|(
name|int
name|searcherIDX
init|=
literal|0
init|;
name|searcherIDX
operator|<
name|subSearchers
operator|.
name|length
condition|;
name|searcherIDX
operator|++
control|)
block|{
name|subSearchers
index|[
name|searcherIDX
index|]
operator|=
operator|new
name|ShardSearcher
argument_list|(
name|compCTX
operator|.
name|leaves
index|[
name|searcherIDX
index|]
argument_list|,
name|compCTX
argument_list|)
expr_stmt|;
block|}
block|}
name|docStarts
operator|=
operator|new
name|int
index|[
name|subSearchers
operator|.
name|length
index|]
expr_stmt|;
name|int
name|docBase
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|subIDX
init|=
literal|0
init|;
name|subIDX
operator|<
name|docStarts
operator|.
name|length
condition|;
name|subIDX
operator|++
control|)
block|{
name|docStarts
index|[
name|subIDX
index|]
operator|=
name|docBase
expr_stmt|;
name|docBase
operator|+=
name|subReaders
index|[
name|subIDX
index|]
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
comment|//System.out.println("docStarts[" + subIDX + "]=" + docStarts[subIDX]);
block|}
block|}
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|3
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|numDocs
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|)
operator|*
name|RANDOM_MULTIPLIER
decl_stmt|;
comment|//final int numDocs = _TestUtil.nextInt(random, 5, 20);
specifier|final
name|int
name|numGroups
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
name|numDocs
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: numDocs="
operator|+
name|numDocs
operator|+
literal|" numGroups="
operator|+
name|numGroups
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|BytesRef
argument_list|>
name|groups
init|=
operator|new
name|ArrayList
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numGroups
condition|;
name|i
operator|++
control|)
block|{
name|groups
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|_TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//groups.add(new BytesRef(_TestUtil.randomSimpleString(random)));
block|}
specifier|final
name|String
index|[]
name|contentStrings
init|=
operator|new
name|String
index|[
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|2
argument_list|,
literal|20
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: create fake content"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|contentIDX
init|=
literal|0
init|;
name|contentIDX
operator|<
name|contentStrings
operator|.
name|length
condition|;
name|contentIDX
operator|++
control|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"real"
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
specifier|final
name|int
name|fakeCount
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|fakeIDX
init|=
literal|0
init|;
name|fakeIDX
operator|<
name|fakeCount
condition|;
name|fakeIDX
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"fake "
argument_list|)
expr_stmt|;
block|}
name|contentStrings
index|[
name|contentIDX
index|]
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  content="
operator|+
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Document
name|docNoGroup
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|group
init|=
name|newField
argument_list|(
literal|"group"
argument_list|,
literal|""
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|Field
name|sort1
init|=
name|newField
argument_list|(
literal|"sort1"
argument_list|,
literal|""
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|sort1
argument_list|)
expr_stmt|;
name|docNoGroup
operator|.
name|add
argument_list|(
name|sort1
argument_list|)
expr_stmt|;
name|Field
name|sort2
init|=
name|newField
argument_list|(
literal|"sort2"
argument_list|,
literal|""
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|sort2
argument_list|)
expr_stmt|;
name|docNoGroup
operator|.
name|add
argument_list|(
name|sort2
argument_list|)
expr_stmt|;
name|Field
name|content
init|=
name|newField
argument_list|(
literal|"content"
argument_list|,
literal|""
argument_list|,
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|docNoGroup
operator|.
name|add
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|NumericField
name|id
init|=
operator|new
name|NumericField
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|docNoGroup
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
specifier|final
name|GroupDoc
index|[]
name|groupDocs
init|=
operator|new
name|GroupDoc
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|BytesRef
name|groupValue
decl_stmt|;
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|24
argument_list|)
operator|==
literal|17
condition|)
block|{
comment|// So we test the "doc doesn't have the group'd
comment|// field" case:
name|groupValue
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|groupValue
operator|=
name|groups
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|groups
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|GroupDoc
name|groupDoc
init|=
operator|new
name|GroupDoc
argument_list|(
name|i
argument_list|,
name|groupValue
argument_list|,
name|groups
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|groups
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|groups
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|groups
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|contentStrings
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|contentStrings
operator|.
name|length
argument_list|)
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  doc content="
operator|+
name|groupDoc
operator|.
name|content
operator|+
literal|" id="
operator|+
name|i
operator|+
literal|" group="
operator|+
operator|(
name|groupDoc
operator|.
name|group
operator|==
literal|null
condition|?
literal|"null"
else|:
name|groupDoc
operator|.
name|group
operator|.
name|utf8ToString
argument_list|()
operator|)
operator|+
literal|" sort1="
operator|+
name|groupDoc
operator|.
name|sort1
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|" sort2="
operator|+
name|groupDoc
operator|.
name|sort2
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|groupDocs
index|[
name|i
index|]
operator|=
name|groupDoc
expr_stmt|;
if|if
condition|(
name|groupDoc
operator|.
name|group
operator|!=
literal|null
condition|)
block|{
name|group
operator|.
name|setValue
argument_list|(
name|groupDoc
operator|.
name|group
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sort1
operator|.
name|setValue
argument_list|(
name|groupDoc
operator|.
name|sort1
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|sort2
operator|.
name|setValue
argument_list|(
name|groupDoc
operator|.
name|sort2
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|content
operator|.
name|setValue
argument_list|(
name|groupDoc
operator|.
name|content
argument_list|)
expr_stmt|;
name|id
operator|.
name|setIntValue
argument_list|(
name|groupDoc
operator|.
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupDoc
operator|.
name|group
operator|==
literal|null
condition|)
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|docNoGroup
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|GroupDoc
index|[]
name|groupDocsByID
init|=
operator|new
name|GroupDoc
index|[
name|groupDocs
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|groupDocs
argument_list|,
literal|0
argument_list|,
name|groupDocsByID
argument_list|,
literal|0
argument_list|,
name|groupDocs
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// NOTE: intentional but temporary field cache insanity!
specifier|final
name|int
index|[]
name|docIDToID
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getInts
argument_list|(
name|r
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|IndexReader
name|r2
init|=
literal|null
decl_stmt|;
name|Directory
name|dir2
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|ShardState
name|shards
init|=
operator|new
name|ShardState
argument_list|(
name|s
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|contentID
init|=
literal|0
init|;
name|contentID
operator|<
literal|3
condition|;
name|contentID
operator|++
control|)
block|{
specifier|final
name|ScoreDoc
index|[]
name|hits
init|=
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"real"
operator|+
name|contentID
argument_list|)
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
for|for
control|(
name|ScoreDoc
name|hit
range|:
name|hits
control|)
block|{
specifier|final
name|GroupDoc
name|gd
init|=
name|groupDocs
index|[
name|docIDToID
index|[
name|hit
operator|.
name|doc
index|]
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|gd
operator|.
name|score
operator|==
literal|0.0
argument_list|)
expr_stmt|;
name|gd
operator|.
name|score
operator|=
name|hit
operator|.
name|score
expr_stmt|;
name|assertEquals
argument_list|(
name|gd
operator|.
name|id
argument_list|,
name|docIDToID
index|[
name|hit
operator|.
name|doc
index|]
argument_list|)
expr_stmt|;
comment|//System.out.println("  score=" + hit.score + " id=" + docIDToID[hit.doc]);
block|}
block|}
for|for
control|(
name|GroupDoc
name|gd
range|:
name|groupDocs
control|)
block|{
name|assertTrue
argument_list|(
name|gd
operator|.
name|score
operator|!=
literal|0.0
argument_list|)
expr_stmt|;
block|}
comment|// Build 2nd index, where docs are added in blocks by
comment|// group, so we can use single pass collector
name|dir2
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|r2
operator|=
name|getDocBlockReader
argument_list|(
name|dir2
argument_list|,
name|groupDocs
argument_list|)
expr_stmt|;
specifier|final
name|Filter
name|lastDocInBlock
init|=
operator|new
name|CachingWrapperFilter
argument_list|(
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"groupend"
argument_list|,
literal|"x"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
index|[]
name|docIDToID2
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getInts
argument_list|(
name|r2
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
specifier|final
name|IndexSearcher
name|s2
init|=
name|newSearcher
argument_list|(
name|r2
argument_list|)
decl_stmt|;
specifier|final
name|ShardState
name|shards2
init|=
operator|new
name|ShardState
argument_list|(
name|s2
argument_list|)
decl_stmt|;
comment|// Reader2 only increases maxDoc() vs reader, which
comment|// means a monotonic shift in scores, so we can
comment|// reliably remap them w/ Map:
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Float
argument_list|,
name|Float
argument_list|>
argument_list|>
name|scoreMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Float
argument_list|,
name|Float
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Tricky: must separately set .score2, because the doc
comment|// block index was created with possible deletions!
comment|//System.out.println("fixup score2");
for|for
control|(
name|int
name|contentID
init|=
literal|0
init|;
name|contentID
operator|<
literal|3
condition|;
name|contentID
operator|++
control|)
block|{
comment|//System.out.println("  term=real" + contentID);
specifier|final
name|Map
argument_list|<
name|Float
argument_list|,
name|Float
argument_list|>
name|termScoreMap
init|=
operator|new
name|HashMap
argument_list|<
name|Float
argument_list|,
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|scoreMap
operator|.
name|put
argument_list|(
literal|"real"
operator|+
name|contentID
argument_list|,
name|termScoreMap
argument_list|)
expr_stmt|;
comment|//System.out.println("term=real" + contentID + " dfold=" + s.docFreq(new Term("content", "real"+contentID)) +
comment|//" dfnew=" + s2.docFreq(new Term("content", "real"+contentID)));
specifier|final
name|ScoreDoc
index|[]
name|hits
init|=
name|s2
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"real"
operator|+
name|contentID
argument_list|)
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
for|for
control|(
name|ScoreDoc
name|hit
range|:
name|hits
control|)
block|{
specifier|final
name|GroupDoc
name|gd
init|=
name|groupDocsByID
index|[
name|docIDToID2
index|[
name|hit
operator|.
name|doc
index|]
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|gd
operator|.
name|score2
operator|==
literal|0.0
argument_list|)
expr_stmt|;
name|gd
operator|.
name|score2
operator|=
name|hit
operator|.
name|score
expr_stmt|;
name|assertEquals
argument_list|(
name|gd
operator|.
name|id
argument_list|,
name|docIDToID2
index|[
name|hit
operator|.
name|doc
index|]
argument_list|)
expr_stmt|;
comment|//System.out.println("    score=" + gd.score + " score2=" + hit.score + " id=" + docIDToID2[hit.doc]);
name|termScoreMap
operator|.
name|put
argument_list|(
name|gd
operator|.
name|score
argument_list|,
name|gd
operator|.
name|score2
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|searchIter
init|=
literal|0
init|;
name|searchIter
operator|<
literal|100
condition|;
name|searchIter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: searchIter="
operator|+
name|searchIter
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|searchTerm
init|=
literal|"real"
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|fillFields
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|boolean
name|getScores
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|getMaxScores
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|Sort
name|groupSort
init|=
name|getRandomSort
argument_list|()
decl_stmt|;
comment|//final Sort groupSort = new Sort(new SortField[] {new SortField("sort1", SortField.STRING), new SortField("id", SortField.INT)});
comment|// TODO: also test null (= sort by relevance)
specifier|final
name|Sort
name|docSort
init|=
name|getRandomSort
argument_list|()
decl_stmt|;
for|for
control|(
name|SortField
name|sf
range|:
name|docSort
operator|.
name|getSort
argument_list|()
control|)
block|{
if|if
condition|(
name|sf
operator|.
name|getType
argument_list|()
operator|==
name|SortField
operator|.
name|Type
operator|.
name|SCORE
condition|)
block|{
name|getScores
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|SortField
name|sf
range|:
name|groupSort
operator|.
name|getSort
argument_list|()
control|)
block|{
if|if
condition|(
name|sf
operator|.
name|getType
argument_list|()
operator|==
name|SortField
operator|.
name|Type
operator|.
name|SCORE
condition|)
block|{
name|getScores
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|final
name|int
name|topNGroups
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|30
argument_list|)
decl_stmt|;
comment|//final int topNGroups = 10;
specifier|final
name|int
name|docsPerGroup
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
specifier|final
name|int
name|groupOffset
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|0
argument_list|,
operator|(
name|topNGroups
operator|-
literal|1
operator|)
operator|/
literal|2
argument_list|)
decl_stmt|;
comment|//final int groupOffset = 0;
specifier|final
name|int
name|docOffset
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|0
argument_list|,
name|docsPerGroup
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|//final int docOffset = 0;
specifier|final
name|boolean
name|doCache
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|doAllGroups
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: groupSort="
operator|+
name|groupSort
operator|+
literal|" docSort="
operator|+
name|docSort
operator|+
literal|" searchTerm="
operator|+
name|searchTerm
operator|+
literal|" topNGroups="
operator|+
name|topNGroups
operator|+
literal|" groupOffset="
operator|+
name|groupOffset
operator|+
literal|" docOffset="
operator|+
name|docOffset
operator|+
literal|" doCache="
operator|+
name|doCache
operator|+
literal|" docsPerGroup="
operator|+
name|docsPerGroup
operator|+
literal|" doAllGroups="
operator|+
name|doAllGroups
operator|+
literal|" getScores="
operator|+
name|getScores
operator|+
literal|" getMaxScores="
operator|+
name|getMaxScores
argument_list|)
expr_stmt|;
block|}
specifier|final
name|TermAllGroupsCollector
name|allGroupsCollector
decl_stmt|;
if|if
condition|(
name|doAllGroups
condition|)
block|{
name|allGroupsCollector
operator|=
operator|new
name|TermAllGroupsCollector
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allGroupsCollector
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|TermFirstPassGroupingCollector
name|c1
init|=
operator|new
name|TermFirstPassGroupingCollector
argument_list|(
literal|"group"
argument_list|,
name|groupSort
argument_list|,
name|groupOffset
operator|+
name|topNGroups
argument_list|)
decl_stmt|;
specifier|final
name|CachingCollector
name|cCache
decl_stmt|;
specifier|final
name|Collector
name|c
decl_stmt|;
specifier|final
name|boolean
name|useWrappingCollector
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|doCache
condition|)
block|{
specifier|final
name|double
name|maxCacheMB
init|=
name|random
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: maxCacheMB="
operator|+
name|maxCacheMB
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useWrappingCollector
condition|)
block|{
if|if
condition|(
name|doAllGroups
condition|)
block|{
name|cCache
operator|=
name|CachingCollector
operator|.
name|create
argument_list|(
name|c1
argument_list|,
literal|true
argument_list|,
name|maxCacheMB
argument_list|)
expr_stmt|;
name|c
operator|=
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|cCache
argument_list|,
name|allGroupsCollector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
operator|=
name|cCache
operator|=
name|CachingCollector
operator|.
name|create
argument_list|(
name|c1
argument_list|,
literal|true
argument_list|,
name|maxCacheMB
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Collect only into cache, then replay multiple times:
name|c
operator|=
name|cCache
operator|=
name|CachingCollector
operator|.
name|create
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|maxCacheMB
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|cCache
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|doAllGroups
condition|)
block|{
name|c
operator|=
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|c1
argument_list|,
name|allGroupsCollector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
operator|=
name|c1
expr_stmt|;
block|}
block|}
comment|// Search top reader:
specifier|final
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
name|searchTerm
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|doCache
operator|&&
operator|!
name|useWrappingCollector
condition|)
block|{
if|if
condition|(
name|cCache
operator|.
name|isCached
argument_list|()
condition|)
block|{
comment|// Replay for first-pass grouping
name|cCache
operator|.
name|replay
argument_list|(
name|c1
argument_list|)
expr_stmt|;
if|if
condition|(
name|doAllGroups
condition|)
block|{
comment|// Replay for all groups:
name|cCache
operator|.
name|replay
argument_list|(
name|allGroupsCollector
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Replay by re-running search:
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
name|searchTerm
argument_list|)
argument_list|)
argument_list|,
name|c1
argument_list|)
expr_stmt|;
if|if
condition|(
name|doAllGroups
condition|)
block|{
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
name|searchTerm
argument_list|)
argument_list|)
argument_list|,
name|allGroupsCollector
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|topGroups
init|=
name|c1
operator|.
name|getTopGroups
argument_list|(
name|groupOffset
argument_list|,
name|fillFields
argument_list|)
decl_stmt|;
specifier|final
name|TopGroups
name|groupsResult
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: topGroups:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|topGroups
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
name|groupx
range|:
name|topGroups
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    "
operator|+
name|groupToString
argument_list|(
name|groupx
operator|.
name|groupValue
argument_list|)
operator|+
literal|" sort="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|groupx
operator|.
name|sortValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|TopGroups
argument_list|<
name|BytesRef
argument_list|>
name|topGroupsShards
init|=
name|searchShards
argument_list|(
name|s
argument_list|,
name|shards
operator|.
name|subSearchers
argument_list|,
name|q
argument_list|,
name|groupSort
argument_list|,
name|docSort
argument_list|,
name|groupOffset
argument_list|,
name|topNGroups
argument_list|,
name|docOffset
argument_list|,
name|docsPerGroup
argument_list|,
name|getScores
argument_list|,
name|getMaxScores
argument_list|)
decl_stmt|;
if|if
condition|(
name|topGroups
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: topGroups"
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
name|searchGroup
range|:
name|topGroups
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
operator|(
name|searchGroup
operator|.
name|groupValue
operator|==
literal|null
condition|?
literal|"null"
else|:
name|searchGroup
operator|.
name|groupValue
operator|.
name|utf8ToString
argument_list|()
operator|)
operator|+
literal|": "
operator|+
name|Arrays
operator|.
name|deepToString
argument_list|(
name|searchGroup
operator|.
name|sortValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|TermSecondPassGroupingCollector
name|c2
init|=
operator|new
name|TermSecondPassGroupingCollector
argument_list|(
literal|"group"
argument_list|,
name|topGroups
argument_list|,
name|groupSort
argument_list|,
name|docSort
argument_list|,
name|docOffset
operator|+
name|docsPerGroup
argument_list|,
name|getScores
argument_list|,
name|getMaxScores
argument_list|,
name|fillFields
argument_list|)
decl_stmt|;
if|if
condition|(
name|doCache
condition|)
block|{
if|if
condition|(
name|cCache
operator|.
name|isCached
argument_list|()
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: cache is intact"
argument_list|)
expr_stmt|;
block|}
name|cCache
operator|.
name|replay
argument_list|(
name|c2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: cache was too large"
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
name|searchTerm
argument_list|)
argument_list|)
argument_list|,
name|c2
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
name|searchTerm
argument_list|)
argument_list|)
argument_list|,
name|c2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doAllGroups
condition|)
block|{
name|TopGroups
argument_list|<
name|BytesRef
argument_list|>
name|tempTopGroups
init|=
name|c2
operator|.
name|getTopGroups
argument_list|(
name|docOffset
argument_list|)
decl_stmt|;
name|groupsResult
operator|=
operator|new
name|TopGroups
argument_list|<
name|BytesRef
argument_list|>
argument_list|(
name|tempTopGroups
argument_list|,
name|allGroupsCollector
operator|.
name|getGroupCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|groupsResult
operator|=
name|c2
operator|.
name|getTopGroups
argument_list|(
name|docOffset
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|groupsResult
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST:   no results"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|TopGroups
argument_list|<
name|BytesRef
argument_list|>
name|expectedGroups
init|=
name|slowGrouping
argument_list|(
name|groupDocs
argument_list|,
name|searchTerm
argument_list|,
name|fillFields
argument_list|,
name|getScores
argument_list|,
name|getMaxScores
argument_list|,
name|doAllGroups
argument_list|,
name|groupSort
argument_list|,
name|docSort
argument_list|,
name|topNGroups
argument_list|,
name|docsPerGroup
argument_list|,
name|groupOffset
argument_list|,
name|docOffset
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
if|if
condition|(
name|expectedGroups
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: no expected groups"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: expected groups"
argument_list|)
expr_stmt|;
for|for
control|(
name|GroupDocs
argument_list|<
name|BytesRef
argument_list|>
name|gd
range|:
name|expectedGroups
operator|.
name|groups
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  group="
operator|+
operator|(
name|gd
operator|.
name|groupValue
operator|==
literal|null
condition|?
literal|"null"
else|:
name|gd
operator|.
name|groupValue
operator|.
name|utf8ToString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ScoreDoc
name|sd
range|:
name|gd
operator|.
name|scoreDocs
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    id="
operator|+
name|sd
operator|.
name|doc
operator|+
literal|" score="
operator|+
name|sd
operator|.
name|score
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
name|docIDToID
argument_list|,
name|expectedGroups
argument_list|,
name|groupsResult
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|getScores
argument_list|)
expr_stmt|;
comment|// Confirm merged shards match:
name|assertEquals
argument_list|(
name|docIDToID
argument_list|,
name|expectedGroups
argument_list|,
name|topGroupsShards
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|fillFields
argument_list|,
name|getScores
argument_list|)
expr_stmt|;
if|if
condition|(
name|topGroupsShards
operator|!=
literal|null
condition|)
block|{
name|verifyShards
argument_list|(
name|shards
operator|.
name|docStarts
argument_list|,
name|topGroupsShards
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|needsScores
init|=
name|getScores
operator|||
name|getMaxScores
operator|||
name|docSort
operator|==
literal|null
decl_stmt|;
specifier|final
name|BlockGroupingCollector
name|c3
init|=
operator|new
name|BlockGroupingCollector
argument_list|(
name|groupSort
argument_list|,
name|groupOffset
operator|+
name|topNGroups
argument_list|,
name|needsScores
argument_list|,
name|lastDocInBlock
argument_list|)
decl_stmt|;
specifier|final
name|TermAllGroupsCollector
name|allGroupsCollector2
decl_stmt|;
specifier|final
name|Collector
name|c4
decl_stmt|;
if|if
condition|(
name|doAllGroups
condition|)
block|{
name|allGroupsCollector2
operator|=
operator|new
name|TermAllGroupsCollector
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|c4
operator|=
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|c3
argument_list|,
name|allGroupsCollector2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allGroupsCollector2
operator|=
literal|null
expr_stmt|;
name|c4
operator|=
name|c3
expr_stmt|;
block|}
name|s2
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
name|searchTerm
argument_list|)
argument_list|)
argument_list|,
name|c4
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|TopGroups
argument_list|<
name|BytesRef
argument_list|>
name|tempTopGroups2
init|=
name|c3
operator|.
name|getTopGroups
argument_list|(
name|docSort
argument_list|,
name|groupOffset
argument_list|,
name|docOffset
argument_list|,
name|docOffset
operator|+
name|docsPerGroup
argument_list|,
name|fillFields
argument_list|)
decl_stmt|;
specifier|final
name|TopGroups
name|groupsResult2
decl_stmt|;
if|if
condition|(
name|doAllGroups
operator|&&
name|tempTopGroups2
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
operator|(
name|int
operator|)
name|tempTopGroups2
operator|.
name|totalGroupCount
argument_list|,
name|allGroupsCollector2
operator|.
name|getGroupCount
argument_list|()
argument_list|)
expr_stmt|;
name|groupsResult2
operator|=
operator|new
name|TopGroups
argument_list|<
name|BytesRef
argument_list|>
argument_list|(
name|tempTopGroups2
argument_list|,
name|allGroupsCollector2
operator|.
name|getGroupCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|groupsResult2
operator|=
name|tempTopGroups2
expr_stmt|;
block|}
specifier|final
name|TopGroups
argument_list|<
name|BytesRef
argument_list|>
name|topGroupsBlockShards
init|=
name|searchShards
argument_list|(
name|s2
argument_list|,
name|shards2
operator|.
name|subSearchers
argument_list|,
name|q
argument_list|,
name|groupSort
argument_list|,
name|docSort
argument_list|,
name|groupOffset
argument_list|,
name|topNGroups
argument_list|,
name|docOffset
argument_list|,
name|docsPerGroup
argument_list|,
name|getScores
argument_list|,
name|getMaxScores
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedGroups
operator|!=
literal|null
condition|)
block|{
comment|// Fixup scores for reader2
for|for
control|(
name|GroupDocs
name|groupDocsHits
range|:
name|expectedGroups
operator|.
name|groups
control|)
block|{
for|for
control|(
name|ScoreDoc
name|hit
range|:
name|groupDocsHits
operator|.
name|scoreDocs
control|)
block|{
specifier|final
name|GroupDoc
name|gd
init|=
name|groupDocsByID
index|[
name|hit
operator|.
name|doc
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|gd
operator|.
name|id
argument_list|,
name|hit
operator|.
name|doc
argument_list|)
expr_stmt|;
comment|//System.out.println("fixup score " + hit.score + " to " + gd.score2 + " vs " + gd.score);
name|hit
operator|.
name|score
operator|=
name|gd
operator|.
name|score2
expr_stmt|;
block|}
block|}
specifier|final
name|SortField
index|[]
name|sortFields
init|=
name|groupSort
operator|.
name|getSort
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Float
argument_list|,
name|Float
argument_list|>
name|termScoreMap
init|=
name|scoreMap
operator|.
name|get
argument_list|(
name|searchTerm
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|groupSortIDX
init|=
literal|0
init|;
name|groupSortIDX
operator|<
name|sortFields
operator|.
name|length
condition|;
name|groupSortIDX
operator|++
control|)
block|{
if|if
condition|(
name|sortFields
index|[
name|groupSortIDX
index|]
operator|.
name|getType
argument_list|()
operator|==
name|SortField
operator|.
name|Type
operator|.
name|SCORE
condition|)
block|{
for|for
control|(
name|GroupDocs
name|groupDocsHits
range|:
name|expectedGroups
operator|.
name|groups
control|)
block|{
if|if
condition|(
name|groupDocsHits
operator|.
name|groupSortValues
operator|!=
literal|null
condition|)
block|{
comment|//System.out.println("remap " + groupDocsHits.groupSortValues[groupSortIDX] + " to " + termScoreMap.get(groupDocsHits.groupSortValues[groupSortIDX]));
name|groupDocsHits
operator|.
name|groupSortValues
index|[
name|groupSortIDX
index|]
operator|=
name|termScoreMap
operator|.
name|get
argument_list|(
name|groupDocsHits
operator|.
name|groupSortValues
index|[
name|groupSortIDX
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|groupDocsHits
operator|.
name|groupSortValues
index|[
name|groupSortIDX
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|final
name|SortField
index|[]
name|docSortFields
init|=
name|docSort
operator|.
name|getSort
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|docSortIDX
init|=
literal|0
init|;
name|docSortIDX
operator|<
name|docSortFields
operator|.
name|length
condition|;
name|docSortIDX
operator|++
control|)
block|{
if|if
condition|(
name|docSortFields
index|[
name|docSortIDX
index|]
operator|.
name|getType
argument_list|()
operator|==
name|SortField
operator|.
name|Type
operator|.
name|SCORE
condition|)
block|{
for|for
control|(
name|GroupDocs
name|groupDocsHits
range|:
name|expectedGroups
operator|.
name|groups
control|)
block|{
for|for
control|(
name|ScoreDoc
name|_hit
range|:
name|groupDocsHits
operator|.
name|scoreDocs
control|)
block|{
name|FieldDoc
name|hit
init|=
operator|(
name|FieldDoc
operator|)
name|_hit
decl_stmt|;
if|if
condition|(
name|hit
operator|.
name|fields
operator|!=
literal|null
condition|)
block|{
name|hit
operator|.
name|fields
index|[
name|docSortIDX
index|]
operator|=
name|termScoreMap
operator|.
name|get
argument_list|(
name|hit
operator|.
name|fields
index|[
name|docSortIDX
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|hit
operator|.
name|fields
index|[
name|docSortIDX
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
name|docIDToID2
argument_list|,
name|expectedGroups
argument_list|,
name|groupsResult2
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|getScores
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|docIDToID2
argument_list|,
name|expectedGroups
argument_list|,
name|topGroupsBlockShards
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|fillFields
argument_list|,
name|getScores
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|s2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|purge
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|r2
operator|!=
literal|null
condition|)
block|{
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|purge
argument_list|(
name|r2
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|r2
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|verifyShards
specifier|private
name|void
name|verifyShards
parameter_list|(
name|int
index|[]
name|docStarts
parameter_list|,
name|TopGroups
argument_list|<
name|BytesRef
argument_list|>
name|topGroups
parameter_list|)
block|{
for|for
control|(
name|GroupDocs
name|group
range|:
name|topGroups
operator|.
name|groups
control|)
block|{
for|for
control|(
name|int
name|hitIDX
init|=
literal|0
init|;
name|hitIDX
operator|<
name|group
operator|.
name|scoreDocs
operator|.
name|length
condition|;
name|hitIDX
operator|++
control|)
block|{
specifier|final
name|ScoreDoc
name|sd
init|=
name|group
operator|.
name|scoreDocs
index|[
name|hitIDX
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"doc="
operator|+
name|sd
operator|.
name|doc
operator|+
literal|" wrong shard"
argument_list|,
name|ReaderUtil
operator|.
name|subIndex
argument_list|(
name|sd
operator|.
name|doc
argument_list|,
name|docStarts
argument_list|)
argument_list|,
name|sd
operator|.
name|shardIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|assertEquals
specifier|private
name|void
name|assertEquals
parameter_list|(
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|groups1
parameter_list|,
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|groups2
parameter_list|,
name|boolean
name|doSortValues
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|groups1
operator|.
name|size
argument_list|()
argument_list|,
name|groups2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Iterator
argument_list|<
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|iter1
init|=
name|groups1
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|iter2
init|=
name|groups2
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|iter2
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
name|group1
init|=
name|iter1
operator|.
name|next
argument_list|()
decl_stmt|;
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
name|group2
init|=
name|iter2
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|group1
operator|.
name|groupValue
argument_list|,
name|group2
operator|.
name|groupValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|doSortValues
condition|)
block|{
name|assertArrayEquals
argument_list|(
name|group1
operator|.
name|sortValues
argument_list|,
name|group2
operator|.
name|sortValues
argument_list|)
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
name|iter2
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|searchShards
specifier|private
name|TopGroups
argument_list|<
name|BytesRef
argument_list|>
name|searchShards
parameter_list|(
name|IndexSearcher
name|topSearcher
parameter_list|,
name|ShardSearcher
index|[]
name|subSearchers
parameter_list|,
name|Query
name|query
parameter_list|,
name|Sort
name|groupSort
parameter_list|,
name|Sort
name|docSort
parameter_list|,
name|int
name|groupOffset
parameter_list|,
name|int
name|topNGroups
parameter_list|,
name|int
name|docOffset
parameter_list|,
name|int
name|topNDocs
parameter_list|,
name|boolean
name|getScores
parameter_list|,
name|boolean
name|getMaxScores
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO: swap in caching, all groups collector here
comment|// too...
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: "
operator|+
name|subSearchers
operator|.
name|length
operator|+
literal|" shards: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|subSearchers
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Run 1st pass collector to get top groups per shard
specifier|final
name|Weight
name|w
init|=
name|topSearcher
operator|.
name|createNormalizedWeight
argument_list|(
name|query
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
argument_list|>
name|shardGroups
init|=
operator|new
name|ArrayList
argument_list|<
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|shardIDX
init|=
literal|0
init|;
name|shardIDX
operator|<
name|subSearchers
operator|.
name|length
condition|;
name|shardIDX
operator|++
control|)
block|{
specifier|final
name|TermFirstPassGroupingCollector
name|c
init|=
operator|new
name|TermFirstPassGroupingCollector
argument_list|(
literal|"group"
argument_list|,
name|groupSort
argument_list|,
name|groupOffset
operator|+
name|topNGroups
argument_list|)
decl_stmt|;
name|subSearchers
index|[
name|shardIDX
index|]
operator|.
name|search
argument_list|(
name|w
argument_list|,
name|c
argument_list|)
expr_stmt|;
specifier|final
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|topGroups
init|=
name|c
operator|.
name|getTopGroups
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|topGroups
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  shard "
operator|+
name|shardIDX
operator|+
literal|" s="
operator|+
name|subSearchers
index|[
name|shardIDX
index|]
operator|+
literal|" "
operator|+
name|topGroups
operator|.
name|size
argument_list|()
operator|+
literal|" groups:"
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
name|group
range|:
name|topGroups
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    "
operator|+
name|groupToString
argument_list|(
name|group
operator|.
name|groupValue
argument_list|)
operator|+
literal|" sort="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|group
operator|.
name|sortValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|shardGroups
operator|.
name|add
argument_list|(
name|topGroups
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|mergedTopGroups
init|=
name|SearchGroup
operator|.
name|merge
argument_list|(
name|shardGroups
argument_list|,
name|groupOffset
argument_list|,
name|topNGroups
argument_list|,
name|groupSort
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  merged:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|mergedTopGroups
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
name|group
range|:
name|mergedTopGroups
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    "
operator|+
name|groupToString
argument_list|(
name|group
operator|.
name|groupValue
argument_list|)
operator|+
literal|" sort="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|group
operator|.
name|sortValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|mergedTopGroups
operator|!=
literal|null
condition|)
block|{
comment|// Now 2nd pass:
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|TopGroups
argument_list|<
name|BytesRef
argument_list|>
index|[]
name|shardTopGroups
init|=
operator|new
name|TopGroups
index|[
name|subSearchers
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|shardIDX
init|=
literal|0
init|;
name|shardIDX
operator|<
name|subSearchers
operator|.
name|length
condition|;
name|shardIDX
operator|++
control|)
block|{
specifier|final
name|TermSecondPassGroupingCollector
name|c
init|=
operator|new
name|TermSecondPassGroupingCollector
argument_list|(
literal|"group"
argument_list|,
name|mergedTopGroups
argument_list|,
name|groupSort
argument_list|,
name|docSort
argument_list|,
name|docOffset
operator|+
name|topNDocs
argument_list|,
name|getScores
argument_list|,
name|getMaxScores
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|subSearchers
index|[
name|shardIDX
index|]
operator|.
name|search
argument_list|(
name|w
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|shardTopGroups
index|[
name|shardIDX
index|]
operator|=
name|c
operator|.
name|getTopGroups
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|TopGroups
operator|.
name|merge
argument_list|(
name|shardTopGroups
argument_list|,
name|groupSort
argument_list|,
name|docSort
argument_list|,
name|docOffset
argument_list|,
name|topNDocs
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|assertEquals
specifier|private
name|void
name|assertEquals
parameter_list|(
name|int
index|[]
name|docIDtoID
parameter_list|,
name|TopGroups
name|expected
parameter_list|,
name|TopGroups
name|actual
parameter_list|,
name|boolean
name|verifyGroupValues
parameter_list|,
name|boolean
name|verifyTotalGroupCount
parameter_list|,
name|boolean
name|verifySortValues
parameter_list|,
name|boolean
name|testScores
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|actual
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertNotNull
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|groups
operator|.
name|length
argument_list|,
name|actual
operator|.
name|groups
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|totalHitCount
argument_list|,
name|actual
operator|.
name|totalHitCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|totalGroupedHitCount
argument_list|,
name|actual
operator|.
name|totalGroupedHitCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|expected
operator|.
name|totalGroupCount
operator|!=
literal|null
operator|&&
name|verifyTotalGroupCount
condition|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|totalGroupCount
argument_list|,
name|actual
operator|.
name|totalGroupCount
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|groupIDX
init|=
literal|0
init|;
name|groupIDX
operator|<
name|expected
operator|.
name|groups
operator|.
name|length
condition|;
name|groupIDX
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  check groupIDX="
operator|+
name|groupIDX
argument_list|)
expr_stmt|;
block|}
specifier|final
name|GroupDocs
name|expectedGroup
init|=
name|expected
operator|.
name|groups
index|[
name|groupIDX
index|]
decl_stmt|;
specifier|final
name|GroupDocs
name|actualGroup
init|=
name|actual
operator|.
name|groups
index|[
name|groupIDX
index|]
decl_stmt|;
if|if
condition|(
name|verifyGroupValues
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedGroup
operator|.
name|groupValue
argument_list|,
name|actualGroup
operator|.
name|groupValue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verifySortValues
condition|)
block|{
name|assertArrayEquals
argument_list|(
name|expectedGroup
operator|.
name|groupSortValues
argument_list|,
name|actualGroup
operator|.
name|groupSortValues
argument_list|)
expr_stmt|;
block|}
comment|// TODO
comment|// assertEquals(expectedGroup.maxScore, actualGroup.maxScore);
name|assertEquals
argument_list|(
name|expectedGroup
operator|.
name|totalHits
argument_list|,
name|actualGroup
operator|.
name|totalHits
argument_list|)
expr_stmt|;
specifier|final
name|ScoreDoc
index|[]
name|expectedFDs
init|=
name|expectedGroup
operator|.
name|scoreDocs
decl_stmt|;
specifier|final
name|ScoreDoc
index|[]
name|actualFDs
init|=
name|actualGroup
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedFDs
operator|.
name|length
argument_list|,
name|actualFDs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|docIDX
init|=
literal|0
init|;
name|docIDX
operator|<
name|expectedFDs
operator|.
name|length
condition|;
name|docIDX
operator|++
control|)
block|{
specifier|final
name|FieldDoc
name|expectedFD
init|=
operator|(
name|FieldDoc
operator|)
name|expectedFDs
index|[
name|docIDX
index|]
decl_stmt|;
specifier|final
name|FieldDoc
name|actualFD
init|=
operator|(
name|FieldDoc
operator|)
name|actualFDs
index|[
name|docIDX
index|]
decl_stmt|;
comment|//System.out.println("  actual doc=" + docIDtoID[actualFD.doc] + " score=" + actualFD.score);
name|assertEquals
argument_list|(
name|expectedFD
operator|.
name|doc
argument_list|,
name|docIDtoID
index|[
name|actualFD
operator|.
name|doc
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|testScores
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedFD
operator|.
name|score
argument_list|,
name|actualFD
operator|.
name|score
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: too anal for now
comment|//assertEquals(Float.NaN, actualFD.score);
block|}
if|if
condition|(
name|verifySortValues
condition|)
block|{
name|assertArrayEquals
argument_list|(
name|expectedFD
operator|.
name|fields
argument_list|,
name|actualFD
operator|.
name|fields
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|ShardSearcher
specifier|private
specifier|static
class|class
name|ShardSearcher
extends|extends
name|IndexSearcher
block|{
DECL|field|ctx
specifier|private
specifier|final
name|IndexReader
operator|.
name|AtomicReaderContext
index|[]
name|ctx
decl_stmt|;
DECL|method|ShardSearcher
specifier|public
name|ShardSearcher
parameter_list|(
name|IndexReader
operator|.
name|AtomicReaderContext
name|ctx
parameter_list|,
name|IndexReader
operator|.
name|ReaderContext
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|ctx
operator|=
operator|new
name|IndexReader
operator|.
name|AtomicReaderContext
index|[]
block|{
name|ctx
block|}
expr_stmt|;
block|}
DECL|method|search
specifier|public
name|void
name|search
parameter_list|(
name|Weight
name|weight
parameter_list|,
name|Collector
name|collector
parameter_list|)
throws|throws
name|IOException
block|{
name|search
argument_list|(
name|ctx
argument_list|,
name|weight
argument_list|,
literal|null
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
DECL|method|search
specifier|public
name|TopDocs
name|search
parameter_list|(
name|Weight
name|weight
parameter_list|,
name|int
name|topN
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|search
argument_list|(
name|ctx
argument_list|,
name|weight
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|topN
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ShardSearcher("
operator|+
name|ctx
index|[
literal|0
index|]
operator|+
literal|")"
return|;
block|}
block|}
block|}
end_class
end_unit
