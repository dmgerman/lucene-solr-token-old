begin_unit
begin_package
DECL|package|org.apache.lucene.search.grouping.term
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|term
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|AbstractAllGroupHeadsCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SentinelIntSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * A base implementation of {@link org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector} for retrieving the most relevant groups when grouping  * on a string based group field. More specifically this all concrete implementations of this base implementation  * use {@link org.apache.lucene.search.FieldCache.DocTermsIndex}.  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|TermAllGroupHeadsCollector
specifier|public
specifier|abstract
class|class
name|TermAllGroupHeadsCollector
parameter_list|<
name|GH
extends|extends
name|AbstractAllGroupHeadsCollector
operator|.
name|GroupHead
parameter_list|<
name|?
parameter_list|>
parameter_list|>
extends|extends
name|AbstractAllGroupHeadsCollector
argument_list|<
name|GH
argument_list|>
block|{
DECL|field|DEFAULT_INITIAL_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_INITIAL_SIZE
init|=
literal|128
decl_stmt|;
DECL|field|groupField
specifier|final
name|String
name|groupField
decl_stmt|;
DECL|field|scratchBytesRef
specifier|final
name|BytesRef
name|scratchBytesRef
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|field|groupIndex
name|FieldCache
operator|.
name|DocTermsIndex
name|groupIndex
decl_stmt|;
DECL|field|readerContext
name|AtomicReaderContext
name|readerContext
decl_stmt|;
DECL|method|TermAllGroupHeadsCollector
specifier|protected
name|TermAllGroupHeadsCollector
parameter_list|(
name|String
name|groupField
parameter_list|,
name|int
name|numberOfSorts
parameter_list|)
block|{
name|super
argument_list|(
name|numberOfSorts
argument_list|)
expr_stmt|;
name|this
operator|.
name|groupField
operator|=
name|groupField
expr_stmt|;
block|}
comment|/**    * Creates an<code>AbstractAllGroupHeadsCollector</code> instance based on the supplied arguments.    * This factory method decides with implementation is best suited.    *    * Delegates to {@link #create(String, org.apache.lucene.search.Sort, int)} with an initialSize of 128.    *    * @param groupField      The field to group by    * @param sortWithinGroup The sort within each group    * @return an<code>AbstractAllGroupHeadsCollector</code> instance based on the supplied arguments    * @throws IOException If I/O related errors occur    */
DECL|method|create
specifier|public
specifier|static
name|AbstractAllGroupHeadsCollector
argument_list|<
name|?
argument_list|>
name|create
parameter_list|(
name|String
name|groupField
parameter_list|,
name|Sort
name|sortWithinGroup
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|groupField
argument_list|,
name|sortWithinGroup
argument_list|,
name|DEFAULT_INITIAL_SIZE
argument_list|)
return|;
block|}
comment|/**    * Creates an<code>AbstractAllGroupHeadsCollector</code> instance based on the supplied arguments.    * This factory method decides with implementation is best suited.    *    * @param groupField      The field to group by    * @param sortWithinGroup The sort within each group    * @param initialSize The initial allocation size of the internal int set and group list which should roughly match    *                    the total number of expected unique groups. Be aware that the heap usage is    *                    4 bytes * initialSize.    * @return an<code>AbstractAllGroupHeadsCollector</code> instance based on the supplied arguments    * @throws IOException If I/O related errors occur    */
DECL|method|create
specifier|public
specifier|static
name|AbstractAllGroupHeadsCollector
argument_list|<
name|?
argument_list|>
name|create
parameter_list|(
name|String
name|groupField
parameter_list|,
name|Sort
name|sortWithinGroup
parameter_list|,
name|int
name|initialSize
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|sortAllScore
init|=
literal|true
decl_stmt|;
name|boolean
name|sortAllFieldValue
init|=
literal|true
decl_stmt|;
for|for
control|(
name|SortField
name|sortField
range|:
name|sortWithinGroup
operator|.
name|getSort
argument_list|()
control|)
block|{
if|if
condition|(
name|sortField
operator|.
name|getType
argument_list|()
operator|==
name|SortField
operator|.
name|Type
operator|.
name|SCORE
condition|)
block|{
name|sortAllFieldValue
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|needGeneralImpl
argument_list|(
name|sortField
argument_list|)
condition|)
block|{
return|return
operator|new
name|GeneralAllGroupHeadsCollector
argument_list|(
name|groupField
argument_list|,
name|sortWithinGroup
argument_list|)
return|;
block|}
else|else
block|{
name|sortAllScore
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sortAllScore
condition|)
block|{
return|return
operator|new
name|ScoreAllGroupHeadsCollector
argument_list|(
name|groupField
argument_list|,
name|sortWithinGroup
argument_list|,
name|initialSize
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|sortAllFieldValue
condition|)
block|{
return|return
operator|new
name|OrdAllGroupHeadsCollector
argument_list|(
name|groupField
argument_list|,
name|sortWithinGroup
argument_list|,
name|initialSize
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|OrdScoreAllGroupHeadsCollector
argument_list|(
name|groupField
argument_list|,
name|sortWithinGroup
argument_list|,
name|initialSize
argument_list|)
return|;
block|}
block|}
comment|// Returns when a sort field needs the general impl.
DECL|method|needGeneralImpl
specifier|private
specifier|static
name|boolean
name|needGeneralImpl
parameter_list|(
name|SortField
name|sortField
parameter_list|)
block|{
name|SortField
operator|.
name|Type
name|sortType
init|=
name|sortField
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// Note (MvG): We can also make an optimized impl when sorting is SortField.DOC
return|return
name|sortType
operator|!=
name|SortField
operator|.
name|Type
operator|.
name|STRING_VAL
operator|&&
name|sortType
operator|!=
name|SortField
operator|.
name|Type
operator|.
name|STRING
operator|&&
name|sortType
operator|!=
name|SortField
operator|.
name|Type
operator|.
name|SCORE
return|;
block|}
comment|// A general impl that works for any group sort.
DECL|class|GeneralAllGroupHeadsCollector
specifier|static
class|class
name|GeneralAllGroupHeadsCollector
extends|extends
name|TermAllGroupHeadsCollector
argument_list|<
name|GeneralAllGroupHeadsCollector
operator|.
name|GroupHead
argument_list|>
block|{
DECL|field|sortWithinGroup
specifier|private
specifier|final
name|Sort
name|sortWithinGroup
decl_stmt|;
DECL|field|groups
specifier|private
specifier|final
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|GroupHead
argument_list|>
name|groups
decl_stmt|;
DECL|field|scorer
specifier|private
name|Scorer
name|scorer
decl_stmt|;
DECL|method|GeneralAllGroupHeadsCollector
name|GeneralAllGroupHeadsCollector
parameter_list|(
name|String
name|groupField
parameter_list|,
name|Sort
name|sortWithinGroup
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|groupField
argument_list|,
name|sortWithinGroup
operator|.
name|getSort
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|sortWithinGroup
operator|=
name|sortWithinGroup
expr_stmt|;
name|groups
operator|=
operator|new
name|HashMap
argument_list|<
name|BytesRef
argument_list|,
name|GroupHead
argument_list|>
argument_list|()
expr_stmt|;
specifier|final
name|SortField
index|[]
name|sortFields
init|=
name|sortWithinGroup
operator|.
name|getSort
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|reversed
index|[
name|i
index|]
operator|=
name|sortFields
index|[
name|i
index|]
operator|.
name|getReverse
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
expr_stmt|;
block|}
block|}
DECL|method|retrieveGroupHeadAndAddIfNotExist
specifier|protected
name|void
name|retrieveGroupHeadAndAddIfNotExist
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|ord
init|=
name|groupIndex
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
decl_stmt|;
specifier|final
name|BytesRef
name|groupValue
init|=
name|ord
operator|==
literal|0
condition|?
literal|null
else|:
name|groupIndex
operator|.
name|lookup
argument_list|(
name|ord
argument_list|,
name|scratchBytesRef
argument_list|)
decl_stmt|;
name|GroupHead
name|groupHead
init|=
name|groups
operator|.
name|get
argument_list|(
name|groupValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupHead
operator|==
literal|null
condition|)
block|{
name|groupHead
operator|=
operator|new
name|GroupHead
argument_list|(
name|groupValue
argument_list|,
name|sortWithinGroup
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|groups
operator|.
name|put
argument_list|(
name|groupValue
operator|==
literal|null
condition|?
literal|null
else|:
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|groupValue
argument_list|)
argument_list|,
name|groupHead
argument_list|)
expr_stmt|;
name|temporalResult
operator|.
name|stop
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|temporalResult
operator|.
name|stop
operator|=
literal|false
expr_stmt|;
block|}
name|temporalResult
operator|.
name|groupHead
operator|=
name|groupHead
expr_stmt|;
block|}
DECL|method|getCollectedGroupHeads
specifier|protected
name|Collection
argument_list|<
name|GroupHead
argument_list|>
name|getCollectedGroupHeads
parameter_list|()
block|{
return|return
name|groups
operator|.
name|values
argument_list|()
return|;
block|}
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|readerContext
operator|=
name|context
expr_stmt|;
name|groupIndex
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTermsIndex
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|groupField
argument_list|)
expr_stmt|;
for|for
control|(
name|GroupHead
name|groupHead
range|:
name|groups
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|groupHead
operator|.
name|comparators
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|groupHead
operator|.
name|comparators
index|[
name|i
index|]
operator|=
name|groupHead
operator|.
name|comparators
index|[
name|i
index|]
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
for|for
control|(
name|GroupHead
name|groupHead
range|:
name|groups
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|FieldComparator
argument_list|<
name|?
argument_list|>
name|comparator
range|:
name|groupHead
operator|.
name|comparators
control|)
block|{
name|comparator
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|GroupHead
class|class
name|GroupHead
extends|extends
name|AbstractAllGroupHeadsCollector
operator|.
name|GroupHead
argument_list|<
name|BytesRef
argument_list|>
block|{
DECL|field|comparators
specifier|final
name|FieldComparator
argument_list|<
name|?
argument_list|>
index|[]
name|comparators
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|GroupHead
specifier|private
name|GroupHead
parameter_list|(
name|BytesRef
name|groupValue
parameter_list|,
name|Sort
name|sort
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|groupValue
argument_list|,
name|doc
operator|+
name|readerContext
operator|.
name|docBase
argument_list|)
expr_stmt|;
specifier|final
name|SortField
index|[]
name|sortFields
init|=
name|sort
operator|.
name|getSort
argument_list|()
decl_stmt|;
name|comparators
operator|=
operator|new
name|FieldComparator
index|[
name|sortFields
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|comparators
index|[
name|i
index|]
operator|=
name|sortFields
index|[
name|i
index|]
operator|.
name|getComparator
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
operator|.
name|setNextReader
argument_list|(
name|readerContext
argument_list|)
expr_stmt|;
name|comparators
index|[
name|i
index|]
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
name|comparators
index|[
name|i
index|]
operator|.
name|copy
argument_list|(
literal|0
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|comparators
index|[
name|i
index|]
operator|.
name|setBottom
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|compIDX
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|comparators
index|[
name|compIDX
index|]
operator|.
name|compareBottom
argument_list|(
name|doc
argument_list|)
return|;
block|}
DECL|method|updateDocHead
specifier|public
name|void
name|updateDocHead
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|FieldComparator
argument_list|<
name|?
argument_list|>
name|comparator
range|:
name|comparators
control|)
block|{
name|comparator
operator|.
name|copy
argument_list|(
literal|0
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|comparator
operator|.
name|setBottom
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|doc
operator|=
name|doc
operator|+
name|readerContext
operator|.
name|docBase
expr_stmt|;
block|}
block|}
block|}
comment|// AbstractAllGroupHeadsCollector optimized for ord fields and scores.
DECL|class|OrdScoreAllGroupHeadsCollector
specifier|static
class|class
name|OrdScoreAllGroupHeadsCollector
extends|extends
name|TermAllGroupHeadsCollector
argument_list|<
name|OrdScoreAllGroupHeadsCollector
operator|.
name|GroupHead
argument_list|>
block|{
DECL|field|ordSet
specifier|private
specifier|final
name|SentinelIntSet
name|ordSet
decl_stmt|;
DECL|field|collectedGroups
specifier|private
specifier|final
name|List
argument_list|<
name|GroupHead
argument_list|>
name|collectedGroups
decl_stmt|;
DECL|field|fields
specifier|private
specifier|final
name|SortField
index|[]
name|fields
decl_stmt|;
DECL|field|sortsIndex
specifier|private
name|FieldCache
operator|.
name|DocTermsIndex
index|[]
name|sortsIndex
decl_stmt|;
DECL|field|scorer
specifier|private
name|Scorer
name|scorer
decl_stmt|;
DECL|field|segmentGroupHeads
specifier|private
name|GroupHead
index|[]
name|segmentGroupHeads
decl_stmt|;
DECL|method|OrdScoreAllGroupHeadsCollector
name|OrdScoreAllGroupHeadsCollector
parameter_list|(
name|String
name|groupField
parameter_list|,
name|Sort
name|sortWithinGroup
parameter_list|,
name|int
name|initialSize
parameter_list|)
block|{
name|super
argument_list|(
name|groupField
argument_list|,
name|sortWithinGroup
operator|.
name|getSort
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|ordSet
operator|=
operator|new
name|SentinelIntSet
argument_list|(
name|initialSize
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|collectedGroups
operator|=
operator|new
name|ArrayList
argument_list|<
name|GroupHead
argument_list|>
argument_list|(
name|initialSize
argument_list|)
expr_stmt|;
specifier|final
name|SortField
index|[]
name|sortFields
init|=
name|sortWithinGroup
operator|.
name|getSort
argument_list|()
decl_stmt|;
name|fields
operator|=
operator|new
name|SortField
index|[
name|sortFields
operator|.
name|length
index|]
expr_stmt|;
name|sortsIndex
operator|=
operator|new
name|FieldCache
operator|.
name|DocTermsIndex
index|[
name|sortFields
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|reversed
index|[
name|i
index|]
operator|=
name|sortFields
index|[
name|i
index|]
operator|.
name|getReverse
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
expr_stmt|;
name|fields
index|[
name|i
index|]
operator|=
name|sortFields
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
DECL|method|getCollectedGroupHeads
specifier|protected
name|Collection
argument_list|<
name|GroupHead
argument_list|>
name|getCollectedGroupHeads
parameter_list|()
block|{
return|return
name|collectedGroups
return|;
block|}
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
block|}
DECL|method|retrieveGroupHeadAndAddIfNotExist
specifier|protected
name|void
name|retrieveGroupHeadAndAddIfNotExist
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|key
init|=
name|groupIndex
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|GroupHead
name|groupHead
decl_stmt|;
if|if
condition|(
operator|!
name|ordSet
operator|.
name|exists
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|ordSet
operator|.
name|put
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|BytesRef
name|term
init|=
name|key
operator|==
literal|0
condition|?
literal|null
else|:
name|groupIndex
operator|.
name|getTerm
argument_list|(
name|doc
argument_list|,
operator|new
name|BytesRef
argument_list|()
argument_list|)
decl_stmt|;
name|groupHead
operator|=
operator|new
name|GroupHead
argument_list|(
name|doc
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|collectedGroups
operator|.
name|add
argument_list|(
name|groupHead
argument_list|)
expr_stmt|;
name|segmentGroupHeads
index|[
name|key
index|]
operator|=
name|groupHead
expr_stmt|;
name|temporalResult
operator|.
name|stop
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|temporalResult
operator|.
name|stop
operator|=
literal|false
expr_stmt|;
name|groupHead
operator|=
name|segmentGroupHeads
index|[
name|key
index|]
expr_stmt|;
block|}
name|temporalResult
operator|.
name|groupHead
operator|=
name|groupHead
expr_stmt|;
block|}
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|readerContext
operator|=
name|context
expr_stmt|;
name|groupIndex
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTermsIndex
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|groupField
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fields
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
operator|==
name|SortField
operator|.
name|Type
operator|.
name|SCORE
condition|)
block|{
continue|continue;
block|}
name|sortsIndex
index|[
name|i
index|]
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTermsIndex
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|fields
index|[
name|i
index|]
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Clear ordSet and fill it with previous encountered groups that can occur in the current segment.
name|ordSet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|segmentGroupHeads
operator|=
operator|new
name|GroupHead
index|[
name|groupIndex
operator|.
name|numOrd
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|GroupHead
name|collectedGroup
range|:
name|collectedGroups
control|)
block|{
name|int
name|ord
init|=
name|groupIndex
operator|.
name|binarySearchLookup
argument_list|(
name|collectedGroup
operator|.
name|groupValue
argument_list|,
name|scratchBytesRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>=
literal|0
condition|)
block|{
name|ordSet
operator|.
name|put
argument_list|(
name|ord
argument_list|)
expr_stmt|;
name|segmentGroupHeads
index|[
name|ord
index|]
operator|=
name|collectedGroup
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortsIndex
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fields
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
operator|==
name|SortField
operator|.
name|Type
operator|.
name|SCORE
condition|)
block|{
continue|continue;
block|}
name|collectedGroup
operator|.
name|sortOrds
index|[
name|i
index|]
operator|=
name|sortsIndex
index|[
name|i
index|]
operator|.
name|binarySearchLookup
argument_list|(
name|collectedGroup
operator|.
name|sortValues
index|[
name|i
index|]
argument_list|,
name|scratchBytesRef
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|GroupHead
class|class
name|GroupHead
extends|extends
name|AbstractAllGroupHeadsCollector
operator|.
name|GroupHead
argument_list|<
name|BytesRef
argument_list|>
block|{
DECL|field|sortValues
name|BytesRef
index|[]
name|sortValues
decl_stmt|;
DECL|field|sortOrds
name|int
index|[]
name|sortOrds
decl_stmt|;
DECL|field|scores
name|float
index|[]
name|scores
decl_stmt|;
DECL|method|GroupHead
specifier|private
name|GroupHead
parameter_list|(
name|int
name|doc
parameter_list|,
name|BytesRef
name|groupValue
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|groupValue
argument_list|,
name|doc
operator|+
name|readerContext
operator|.
name|docBase
argument_list|)
expr_stmt|;
name|sortValues
operator|=
operator|new
name|BytesRef
index|[
name|sortsIndex
operator|.
name|length
index|]
expr_stmt|;
name|sortOrds
operator|=
operator|new
name|int
index|[
name|sortsIndex
operator|.
name|length
index|]
expr_stmt|;
name|scores
operator|=
operator|new
name|float
index|[
name|sortsIndex
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortsIndex
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fields
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
operator|==
name|SortField
operator|.
name|Type
operator|.
name|SCORE
condition|)
block|{
name|scores
index|[
name|i
index|]
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sortValues
index|[
name|i
index|]
operator|=
name|sortsIndex
index|[
name|i
index|]
operator|.
name|getTerm
argument_list|(
name|doc
argument_list|,
operator|new
name|BytesRef
argument_list|()
argument_list|)
expr_stmt|;
name|sortOrds
index|[
name|i
index|]
operator|=
name|sortsIndex
index|[
name|i
index|]
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|compIDX
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fields
index|[
name|compIDX
index|]
operator|.
name|getType
argument_list|()
operator|==
name|SortField
operator|.
name|Type
operator|.
name|SCORE
condition|)
block|{
name|float
name|score
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
if|if
condition|(
name|scores
index|[
name|compIDX
index|]
operator|<
name|score
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|scores
index|[
name|compIDX
index|]
operator|>
name|score
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
else|else
block|{
if|if
condition|(
name|sortOrds
index|[
name|compIDX
index|]
operator|<
literal|0
condition|)
block|{
comment|// The current segment doesn't contain the sort value we encountered before. Therefore the ord is negative.
return|return
name|sortValues
index|[
name|compIDX
index|]
operator|.
name|compareTo
argument_list|(
name|sortsIndex
index|[
name|compIDX
index|]
operator|.
name|getTerm
argument_list|(
name|doc
argument_list|,
name|scratchBytesRef
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|sortOrds
index|[
name|compIDX
index|]
operator|-
name|sortsIndex
index|[
name|compIDX
index|]
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
block|}
DECL|method|updateDocHead
specifier|public
name|void
name|updateDocHead
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortsIndex
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fields
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
operator|==
name|SortField
operator|.
name|Type
operator|.
name|SCORE
condition|)
block|{
name|scores
index|[
name|i
index|]
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sortValues
index|[
name|i
index|]
operator|=
name|sortsIndex
index|[
name|i
index|]
operator|.
name|getTerm
argument_list|(
name|doc
argument_list|,
name|sortValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|sortOrds
index|[
name|i
index|]
operator|=
name|sortsIndex
index|[
name|i
index|]
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|doc
operator|=
name|doc
operator|+
name|readerContext
operator|.
name|docBase
expr_stmt|;
block|}
block|}
block|}
comment|// AbstractAllGroupHeadsCollector optimized for ord fields.
DECL|class|OrdAllGroupHeadsCollector
specifier|static
class|class
name|OrdAllGroupHeadsCollector
extends|extends
name|TermAllGroupHeadsCollector
argument_list|<
name|OrdAllGroupHeadsCollector
operator|.
name|GroupHead
argument_list|>
block|{
DECL|field|ordSet
specifier|private
specifier|final
name|SentinelIntSet
name|ordSet
decl_stmt|;
DECL|field|collectedGroups
specifier|private
specifier|final
name|List
argument_list|<
name|GroupHead
argument_list|>
name|collectedGroups
decl_stmt|;
DECL|field|fields
specifier|private
specifier|final
name|SortField
index|[]
name|fields
decl_stmt|;
DECL|field|sortsIndex
specifier|private
name|FieldCache
operator|.
name|DocTermsIndex
index|[]
name|sortsIndex
decl_stmt|;
DECL|field|segmentGroupHeads
specifier|private
name|GroupHead
index|[]
name|segmentGroupHeads
decl_stmt|;
DECL|method|OrdAllGroupHeadsCollector
name|OrdAllGroupHeadsCollector
parameter_list|(
name|String
name|groupField
parameter_list|,
name|Sort
name|sortWithinGroup
parameter_list|,
name|int
name|initialSize
parameter_list|)
block|{
name|super
argument_list|(
name|groupField
argument_list|,
name|sortWithinGroup
operator|.
name|getSort
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|ordSet
operator|=
operator|new
name|SentinelIntSet
argument_list|(
name|initialSize
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|collectedGroups
operator|=
operator|new
name|ArrayList
argument_list|<
name|GroupHead
argument_list|>
argument_list|(
name|initialSize
argument_list|)
expr_stmt|;
specifier|final
name|SortField
index|[]
name|sortFields
init|=
name|sortWithinGroup
operator|.
name|getSort
argument_list|()
decl_stmt|;
name|fields
operator|=
operator|new
name|SortField
index|[
name|sortFields
operator|.
name|length
index|]
expr_stmt|;
name|sortsIndex
operator|=
operator|new
name|FieldCache
operator|.
name|DocTermsIndex
index|[
name|sortFields
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|reversed
index|[
name|i
index|]
operator|=
name|sortFields
index|[
name|i
index|]
operator|.
name|getReverse
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
expr_stmt|;
name|fields
index|[
name|i
index|]
operator|=
name|sortFields
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
DECL|method|getCollectedGroupHeads
specifier|protected
name|Collection
argument_list|<
name|GroupHead
argument_list|>
name|getCollectedGroupHeads
parameter_list|()
block|{
return|return
name|collectedGroups
return|;
block|}
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{     }
DECL|method|retrieveGroupHeadAndAddIfNotExist
specifier|protected
name|void
name|retrieveGroupHeadAndAddIfNotExist
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|key
init|=
name|groupIndex
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|GroupHead
name|groupHead
decl_stmt|;
if|if
condition|(
operator|!
name|ordSet
operator|.
name|exists
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|ordSet
operator|.
name|put
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|BytesRef
name|term
init|=
name|key
operator|==
literal|0
condition|?
literal|null
else|:
name|groupIndex
operator|.
name|getTerm
argument_list|(
name|doc
argument_list|,
operator|new
name|BytesRef
argument_list|()
argument_list|)
decl_stmt|;
name|groupHead
operator|=
operator|new
name|GroupHead
argument_list|(
name|doc
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|collectedGroups
operator|.
name|add
argument_list|(
name|groupHead
argument_list|)
expr_stmt|;
name|segmentGroupHeads
index|[
name|key
index|]
operator|=
name|groupHead
expr_stmt|;
name|temporalResult
operator|.
name|stop
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|temporalResult
operator|.
name|stop
operator|=
literal|false
expr_stmt|;
name|groupHead
operator|=
name|segmentGroupHeads
index|[
name|key
index|]
expr_stmt|;
block|}
name|temporalResult
operator|.
name|groupHead
operator|=
name|groupHead
expr_stmt|;
block|}
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|readerContext
operator|=
name|context
expr_stmt|;
name|groupIndex
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTermsIndex
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|groupField
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sortsIndex
index|[
name|i
index|]
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTermsIndex
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|fields
index|[
name|i
index|]
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Clear ordSet and fill it with previous encountered groups that can occur in the current segment.
name|ordSet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|segmentGroupHeads
operator|=
operator|new
name|GroupHead
index|[
name|groupIndex
operator|.
name|numOrd
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|GroupHead
name|collectedGroup
range|:
name|collectedGroups
control|)
block|{
name|int
name|groupOrd
init|=
name|groupIndex
operator|.
name|binarySearchLookup
argument_list|(
name|collectedGroup
operator|.
name|groupValue
argument_list|,
name|scratchBytesRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupOrd
operator|>=
literal|0
condition|)
block|{
name|ordSet
operator|.
name|put
argument_list|(
name|groupOrd
argument_list|)
expr_stmt|;
name|segmentGroupHeads
index|[
name|groupOrd
index|]
operator|=
name|collectedGroup
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortsIndex
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|collectedGroup
operator|.
name|sortOrds
index|[
name|i
index|]
operator|=
name|sortsIndex
index|[
name|i
index|]
operator|.
name|binarySearchLookup
argument_list|(
name|collectedGroup
operator|.
name|sortValues
index|[
name|i
index|]
argument_list|,
name|scratchBytesRef
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|GroupHead
class|class
name|GroupHead
extends|extends
name|AbstractAllGroupHeadsCollector
operator|.
name|GroupHead
argument_list|<
name|BytesRef
argument_list|>
block|{
DECL|field|sortValues
name|BytesRef
index|[]
name|sortValues
decl_stmt|;
DECL|field|sortOrds
name|int
index|[]
name|sortOrds
decl_stmt|;
DECL|method|GroupHead
specifier|private
name|GroupHead
parameter_list|(
name|int
name|doc
parameter_list|,
name|BytesRef
name|groupValue
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|groupValue
argument_list|,
name|doc
operator|+
name|readerContext
operator|.
name|docBase
argument_list|)
expr_stmt|;
name|sortValues
operator|=
operator|new
name|BytesRef
index|[
name|sortsIndex
operator|.
name|length
index|]
expr_stmt|;
name|sortOrds
operator|=
operator|new
name|int
index|[
name|sortsIndex
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortsIndex
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sortValues
index|[
name|i
index|]
operator|=
name|sortsIndex
index|[
name|i
index|]
operator|.
name|getTerm
argument_list|(
name|doc
argument_list|,
operator|new
name|BytesRef
argument_list|()
argument_list|)
expr_stmt|;
name|sortOrds
index|[
name|i
index|]
operator|=
name|sortsIndex
index|[
name|i
index|]
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|compIDX
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sortOrds
index|[
name|compIDX
index|]
operator|<
literal|0
condition|)
block|{
comment|// The current segment doesn't contain the sort value we encountered before. Therefore the ord is negative.
return|return
name|sortValues
index|[
name|compIDX
index|]
operator|.
name|compareTo
argument_list|(
name|sortsIndex
index|[
name|compIDX
index|]
operator|.
name|getTerm
argument_list|(
name|doc
argument_list|,
name|scratchBytesRef
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|sortOrds
index|[
name|compIDX
index|]
operator|-
name|sortsIndex
index|[
name|compIDX
index|]
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
DECL|method|updateDocHead
specifier|public
name|void
name|updateDocHead
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortsIndex
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sortValues
index|[
name|i
index|]
operator|=
name|sortsIndex
index|[
name|i
index|]
operator|.
name|getTerm
argument_list|(
name|doc
argument_list|,
name|sortValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|sortOrds
index|[
name|i
index|]
operator|=
name|sortsIndex
index|[
name|i
index|]
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|doc
operator|=
name|doc
operator|+
name|readerContext
operator|.
name|docBase
expr_stmt|;
block|}
block|}
block|}
comment|// AbstractAllGroupHeadsCollector optimized for scores.
DECL|class|ScoreAllGroupHeadsCollector
specifier|static
class|class
name|ScoreAllGroupHeadsCollector
extends|extends
name|TermAllGroupHeadsCollector
argument_list|<
name|ScoreAllGroupHeadsCollector
operator|.
name|GroupHead
argument_list|>
block|{
DECL|field|ordSet
specifier|private
specifier|final
name|SentinelIntSet
name|ordSet
decl_stmt|;
DECL|field|collectedGroups
specifier|private
specifier|final
name|List
argument_list|<
name|GroupHead
argument_list|>
name|collectedGroups
decl_stmt|;
DECL|field|fields
specifier|private
specifier|final
name|SortField
index|[]
name|fields
decl_stmt|;
DECL|field|scorer
specifier|private
name|Scorer
name|scorer
decl_stmt|;
DECL|field|segmentGroupHeads
specifier|private
name|GroupHead
index|[]
name|segmentGroupHeads
decl_stmt|;
DECL|method|ScoreAllGroupHeadsCollector
name|ScoreAllGroupHeadsCollector
parameter_list|(
name|String
name|groupField
parameter_list|,
name|Sort
name|sortWithinGroup
parameter_list|,
name|int
name|initialSize
parameter_list|)
block|{
name|super
argument_list|(
name|groupField
argument_list|,
name|sortWithinGroup
operator|.
name|getSort
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|ordSet
operator|=
operator|new
name|SentinelIntSet
argument_list|(
name|initialSize
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|collectedGroups
operator|=
operator|new
name|ArrayList
argument_list|<
name|GroupHead
argument_list|>
argument_list|(
name|initialSize
argument_list|)
expr_stmt|;
specifier|final
name|SortField
index|[]
name|sortFields
init|=
name|sortWithinGroup
operator|.
name|getSort
argument_list|()
decl_stmt|;
name|fields
operator|=
operator|new
name|SortField
index|[
name|sortFields
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|reversed
index|[
name|i
index|]
operator|=
name|sortFields
index|[
name|i
index|]
operator|.
name|getReverse
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
expr_stmt|;
name|fields
index|[
name|i
index|]
operator|=
name|sortFields
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
DECL|method|getCollectedGroupHeads
specifier|protected
name|Collection
argument_list|<
name|GroupHead
argument_list|>
name|getCollectedGroupHeads
parameter_list|()
block|{
return|return
name|collectedGroups
return|;
block|}
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
block|}
DECL|method|retrieveGroupHeadAndAddIfNotExist
specifier|protected
name|void
name|retrieveGroupHeadAndAddIfNotExist
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|key
init|=
name|groupIndex
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|GroupHead
name|groupHead
decl_stmt|;
if|if
condition|(
operator|!
name|ordSet
operator|.
name|exists
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|ordSet
operator|.
name|put
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|BytesRef
name|term
init|=
name|key
operator|==
literal|0
condition|?
literal|null
else|:
name|groupIndex
operator|.
name|getTerm
argument_list|(
name|doc
argument_list|,
operator|new
name|BytesRef
argument_list|()
argument_list|)
decl_stmt|;
name|groupHead
operator|=
operator|new
name|GroupHead
argument_list|(
name|doc
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|collectedGroups
operator|.
name|add
argument_list|(
name|groupHead
argument_list|)
expr_stmt|;
name|segmentGroupHeads
index|[
name|key
index|]
operator|=
name|groupHead
expr_stmt|;
name|temporalResult
operator|.
name|stop
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|temporalResult
operator|.
name|stop
operator|=
literal|false
expr_stmt|;
name|groupHead
operator|=
name|segmentGroupHeads
index|[
name|key
index|]
expr_stmt|;
block|}
name|temporalResult
operator|.
name|groupHead
operator|=
name|groupHead
expr_stmt|;
block|}
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|readerContext
operator|=
name|context
expr_stmt|;
name|groupIndex
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTermsIndex
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|groupField
argument_list|)
expr_stmt|;
comment|// Clear ordSet and fill it with previous encountered groups that can occur in the current segment.
name|ordSet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|segmentGroupHeads
operator|=
operator|new
name|GroupHead
index|[
name|groupIndex
operator|.
name|numOrd
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|GroupHead
name|collectedGroup
range|:
name|collectedGroups
control|)
block|{
name|int
name|ord
init|=
name|groupIndex
operator|.
name|binarySearchLookup
argument_list|(
name|collectedGroup
operator|.
name|groupValue
argument_list|,
name|scratchBytesRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>=
literal|0
condition|)
block|{
name|ordSet
operator|.
name|put
argument_list|(
name|ord
argument_list|)
expr_stmt|;
name|segmentGroupHeads
index|[
name|ord
index|]
operator|=
name|collectedGroup
expr_stmt|;
block|}
block|}
block|}
DECL|class|GroupHead
class|class
name|GroupHead
extends|extends
name|AbstractAllGroupHeadsCollector
operator|.
name|GroupHead
argument_list|<
name|BytesRef
argument_list|>
block|{
DECL|field|scores
name|float
index|[]
name|scores
decl_stmt|;
DECL|method|GroupHead
specifier|private
name|GroupHead
parameter_list|(
name|int
name|doc
parameter_list|,
name|BytesRef
name|groupValue
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|groupValue
argument_list|,
name|doc
operator|+
name|readerContext
operator|.
name|docBase
argument_list|)
expr_stmt|;
name|scores
operator|=
operator|new
name|float
index|[
name|fields
operator|.
name|length
index|]
expr_stmt|;
name|float
name|score
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scores
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|scores
index|[
name|i
index|]
operator|=
name|score
expr_stmt|;
block|}
block|}
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|compIDX
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|score
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
if|if
condition|(
name|scores
index|[
name|compIDX
index|]
operator|<
name|score
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|scores
index|[
name|compIDX
index|]
operator|>
name|score
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|updateDocHead
specifier|public
name|void
name|updateDocHead
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|score
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scores
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|scores
index|[
name|i
index|]
operator|=
name|score
expr_stmt|;
block|}
name|this
operator|.
name|doc
operator|=
name|doc
operator|+
name|readerContext
operator|.
name|docBase
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
