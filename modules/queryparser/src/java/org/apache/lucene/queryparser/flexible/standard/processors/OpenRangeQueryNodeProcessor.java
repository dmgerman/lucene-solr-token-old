begin_unit
begin_package
DECL|package|org.apache.lucene.queryparser.flexible.standard.processors
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|processors
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|QueryNodeException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|ParametricQueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|ParametricRangeQueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|QueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|processors
operator|.
name|QueryNodeProcessorImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|util
operator|.
name|UnescapedCharSequence
import|;
end_import
begin_class
DECL|class|OpenRangeQueryNodeProcessor
specifier|public
class|class
name|OpenRangeQueryNodeProcessor
extends|extends
name|QueryNodeProcessorImpl
block|{
DECL|field|OPEN_RANGE_TOKEN
specifier|final
specifier|public
specifier|static
name|String
name|OPEN_RANGE_TOKEN
init|=
literal|"*"
decl_stmt|;
DECL|method|OpenRangeQueryNodeProcessor
specifier|public
name|OpenRangeQueryNodeProcessor
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|postProcessNode
specifier|protected
name|QueryNode
name|postProcessNode
parameter_list|(
name|QueryNode
name|node
parameter_list|)
throws|throws
name|QueryNodeException
block|{
if|if
condition|(
name|node
operator|instanceof
name|ParametricRangeQueryNode
condition|)
block|{
name|ParametricRangeQueryNode
name|rangeNode
init|=
operator|(
name|ParametricRangeQueryNode
operator|)
name|node
decl_stmt|;
name|ParametricQueryNode
name|lowerNode
init|=
operator|(
name|ParametricQueryNode
operator|)
name|rangeNode
operator|.
name|getLowerBound
argument_list|()
decl_stmt|;
name|ParametricQueryNode
name|upperNode
init|=
operator|(
name|ParametricQueryNode
operator|)
name|rangeNode
operator|.
name|getUpperBound
argument_list|()
decl_stmt|;
name|CharSequence
name|lowerText
init|=
name|lowerNode
operator|.
name|getText
argument_list|()
decl_stmt|;
name|CharSequence
name|upperText
init|=
name|upperNode
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|OPEN_RANGE_TOKEN
operator|.
name|equals
argument_list|(
name|upperNode
operator|.
name|getTextAsString
argument_list|()
argument_list|)
operator|&&
operator|(
operator|!
operator|(
name|upperText
operator|instanceof
name|UnescapedCharSequence
operator|)
operator|||
operator|!
operator|(
operator|(
name|UnescapedCharSequence
operator|)
name|upperText
operator|)
operator|.
name|wasEscaped
argument_list|(
literal|0
argument_list|)
operator|)
condition|)
block|{
name|upperText
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|OPEN_RANGE_TOKEN
operator|.
name|equals
argument_list|(
name|lowerNode
operator|.
name|getTextAsString
argument_list|()
argument_list|)
operator|&&
operator|(
operator|!
operator|(
name|lowerText
operator|instanceof
name|UnescapedCharSequence
operator|)
operator|||
operator|!
operator|(
operator|(
name|UnescapedCharSequence
operator|)
name|lowerText
operator|)
operator|.
name|wasEscaped
argument_list|(
literal|0
argument_list|)
operator|)
condition|)
block|{
name|lowerText
operator|=
literal|""
expr_stmt|;
block|}
name|lowerNode
operator|.
name|setText
argument_list|(
name|lowerText
argument_list|)
expr_stmt|;
name|upperNode
operator|.
name|setText
argument_list|(
name|upperText
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
annotation|@
name|Override
DECL|method|preProcessNode
specifier|protected
name|QueryNode
name|preProcessNode
parameter_list|(
name|QueryNode
name|node
parameter_list|)
throws|throws
name|QueryNodeException
block|{
return|return
name|node
return|;
block|}
annotation|@
name|Override
DECL|method|setChildrenOrder
specifier|protected
name|List
argument_list|<
name|QueryNode
argument_list|>
name|setChildrenOrder
parameter_list|(
name|List
argument_list|<
name|QueryNode
argument_list|>
name|children
parameter_list|)
throws|throws
name|QueryNodeException
block|{
return|return
name|children
return|;
block|}
block|}
end_class
end_unit
