begin_unit
begin_comment
comment|/* Generated By:JavaCC: Do not edit this line. StandardSyntaxParser.java */
end_comment
begin_package
DECL|package|org.apache.lucene.queryparser.flexible.standard.parser
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|parser
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|messages
operator|.
name|Message
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|messages
operator|.
name|MessageImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|QueryNodeError
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|QueryNodeException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|QueryNodeParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|messages
operator|.
name|QueryParserMessages
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|AndQueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|BooleanQueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|BoostQueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|FieldQueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|FuzzyQueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|ModifierQueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|GroupQueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|OpaqueQueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|OrQueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|ParametricQueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|ParametricRangeQueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|nodes
operator|.
name|RegexpQueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|SlopQueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|ProximityQueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|QueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|QueryNodeImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|nodes
operator|.
name|QuotedFieldQueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|parser
operator|.
name|SyntaxParser
import|;
end_import
begin_class
DECL|class|StandardSyntaxParser
specifier|public
class|class
name|StandardSyntaxParser
implements|implements
name|SyntaxParser
implements|,
name|StandardSyntaxParserConstants
block|{
DECL|field|CONJ_NONE
specifier|private
specifier|static
specifier|final
name|int
name|CONJ_NONE
init|=
literal|0
decl_stmt|;
DECL|field|CONJ_AND
specifier|private
specifier|static
specifier|final
name|int
name|CONJ_AND
init|=
literal|2
decl_stmt|;
DECL|field|CONJ_OR
specifier|private
specifier|static
specifier|final
name|int
name|CONJ_OR
init|=
literal|2
decl_stmt|;
comment|// syntax parser constructor
DECL|method|StandardSyntaxParser
specifier|public
name|StandardSyntaxParser
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Parses a query string, returning a {@link org.apache.lucene.queryparser.flexible.core.nodes.QueryNode}.      *  @param query  the query string to be parsed.      *  @throws ParseException if the parsing fails      */
DECL|method|parse
specifier|public
name|QueryNode
name|parse
parameter_list|(
name|CharSequence
name|query
parameter_list|,
name|CharSequence
name|field
parameter_list|)
throws|throws
name|QueryNodeParseException
block|{
name|ReInit
argument_list|(
operator|new
name|StringReader
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// TopLevelQuery is a Query followed by the end-of-input (EOF)
name|QueryNode
name|querynode
init|=
name|TopLevelQuery
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|querynode
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|tme
parameter_list|)
block|{
name|tme
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
throw|throw
name|tme
throw|;
block|}
catch|catch
parameter_list|(
name|Error
name|tme
parameter_list|)
block|{
name|Message
name|message
init|=
operator|new
name|MessageImpl
argument_list|(
name|QueryParserMessages
operator|.
name|INVALID_SYNTAX_CANNOT_PARSE
argument_list|,
name|query
argument_list|,
name|tme
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|QueryNodeParseException
name|e
init|=
operator|new
name|QueryNodeParseException
argument_list|(
name|tme
argument_list|)
decl_stmt|;
name|e
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|e
operator|.
name|setNonLocalizedMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|// *   Query  ::= ( Clause )*
comment|// *   Clause ::= ["+", "-"] [<TERM> ":"] (<TERM> | "(" Query ")" )
DECL|method|Conjunction
specifier|final
specifier|public
name|int
name|Conjunction
parameter_list|()
throws|throws
name|ParseException
block|{
name|int
name|ret
init|=
name|CONJ_NONE
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AND
case|:
case|case
name|OR
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AND
case|:
name|jj_consume_token
argument_list|(
name|AND
argument_list|)
expr_stmt|;
name|ret
operator|=
name|CONJ_AND
expr_stmt|;
break|break;
case|case
name|OR
case|:
name|jj_consume_token
argument_list|(
name|OR
argument_list|)
expr_stmt|;
name|ret
operator|=
name|CONJ_OR
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|0
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|1
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|ret
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|Modifiers
specifier|final
specifier|public
name|ModifierQueryNode
operator|.
name|Modifier
name|Modifiers
parameter_list|()
throws|throws
name|ParseException
block|{
name|ModifierQueryNode
operator|.
name|Modifier
name|ret
init|=
name|ModifierQueryNode
operator|.
name|Modifier
operator|.
name|MOD_NONE
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|NOT
case|:
case|case
name|PLUS
case|:
case|case
name|MINUS
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|PLUS
case|:
name|jj_consume_token
argument_list|(
name|PLUS
argument_list|)
expr_stmt|;
name|ret
operator|=
name|ModifierQueryNode
operator|.
name|Modifier
operator|.
name|MOD_REQ
expr_stmt|;
break|break;
case|case
name|MINUS
case|:
name|jj_consume_token
argument_list|(
name|MINUS
argument_list|)
expr_stmt|;
name|ret
operator|=
name|ModifierQueryNode
operator|.
name|Modifier
operator|.
name|MOD_NOT
expr_stmt|;
break|break;
case|case
name|NOT
case|:
name|jj_consume_token
argument_list|(
name|NOT
argument_list|)
expr_stmt|;
name|ret
operator|=
name|ModifierQueryNode
operator|.
name|Modifier
operator|.
name|MOD_NOT
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|2
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|3
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|ret
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|// This makes sure that there is no garbage after the query string
DECL|method|TopLevelQuery
specifier|final
specifier|public
name|QueryNode
name|TopLevelQuery
parameter_list|(
name|CharSequence
name|field
parameter_list|)
throws|throws
name|ParseException
block|{
name|QueryNode
name|q
decl_stmt|;
name|q
operator|=
name|Query
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|q
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|// These changes were made to introduce operator precedence:
comment|// - Clause() now returns a QueryNode.
comment|// - The modifiers are consumed by Clause() and returned as part of the QueryNode Object
comment|// - Query does not consume conjunctions (AND, OR) anymore.
comment|// - This is now done by two new non-terminals: ConjClause and DisjClause
comment|// The parse tree looks similar to this:
comment|//       Query ::= DisjQuery ( DisjQuery )*
comment|//   DisjQuery ::= ConjQuery ( OR ConjQuery )*
comment|//   ConjQuery ::= Clause ( AND Clause )*
comment|//      Clause ::= [ Modifier ] ...
DECL|method|Query
specifier|final
specifier|public
name|QueryNode
name|Query
parameter_list|(
name|CharSequence
name|field
parameter_list|)
throws|throws
name|ParseException
block|{
name|Vector
argument_list|<
name|QueryNode
argument_list|>
name|clauses
init|=
literal|null
decl_stmt|;
name|QueryNode
name|c
decl_stmt|,
name|first
init|=
literal|null
decl_stmt|;
name|first
operator|=
name|DisjQuery
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|label_1
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|NOT
case|:
case|case
name|PLUS
case|:
case|case
name|MINUS
case|:
case|case
name|LPAREN
case|:
case|case
name|QUOTED
case|:
case|case
name|TERM
case|:
case|case
name|REGEXPTERM
case|:
case|case
name|RANGEIN_START
case|:
case|case
name|RANGEEX_START
case|:
case|case
name|NUMBER
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|4
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_1
break|;
block|}
name|c
operator|=
name|DisjQuery
argument_list|(
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|clauses
operator|==
literal|null
condition|)
block|{
name|clauses
operator|=
operator|new
name|Vector
argument_list|<
name|QueryNode
argument_list|>
argument_list|()
expr_stmt|;
name|clauses
operator|.
name|addElement
argument_list|(
name|first
argument_list|)
expr_stmt|;
block|}
name|clauses
operator|.
name|addElement
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clauses
operator|!=
literal|null
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|BooleanQueryNode
argument_list|(
name|clauses
argument_list|)
return|;
block|}
block|}
else|else
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|first
return|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|DisjQuery
specifier|final
specifier|public
name|QueryNode
name|DisjQuery
parameter_list|(
name|CharSequence
name|field
parameter_list|)
throws|throws
name|ParseException
block|{
name|QueryNode
name|first
decl_stmt|,
name|c
decl_stmt|;
name|Vector
argument_list|<
name|QueryNode
argument_list|>
name|clauses
init|=
literal|null
decl_stmt|;
name|first
operator|=
name|ConjQuery
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|label_2
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|OR
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|5
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_2
break|;
block|}
name|jj_consume_token
argument_list|(
name|OR
argument_list|)
expr_stmt|;
name|c
operator|=
name|ConjQuery
argument_list|(
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|clauses
operator|==
literal|null
condition|)
block|{
name|clauses
operator|=
operator|new
name|Vector
argument_list|<
name|QueryNode
argument_list|>
argument_list|()
expr_stmt|;
name|clauses
operator|.
name|addElement
argument_list|(
name|first
argument_list|)
expr_stmt|;
block|}
name|clauses
operator|.
name|addElement
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clauses
operator|!=
literal|null
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|OrQueryNode
argument_list|(
name|clauses
argument_list|)
return|;
block|}
block|}
else|else
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|first
return|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|ConjQuery
specifier|final
specifier|public
name|QueryNode
name|ConjQuery
parameter_list|(
name|CharSequence
name|field
parameter_list|)
throws|throws
name|ParseException
block|{
name|QueryNode
name|first
decl_stmt|,
name|c
decl_stmt|;
name|Vector
argument_list|<
name|QueryNode
argument_list|>
name|clauses
init|=
literal|null
decl_stmt|;
name|first
operator|=
name|ModClause
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|label_3
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AND
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|6
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_3
break|;
block|}
name|jj_consume_token
argument_list|(
name|AND
argument_list|)
expr_stmt|;
name|c
operator|=
name|ModClause
argument_list|(
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|clauses
operator|==
literal|null
condition|)
block|{
name|clauses
operator|=
operator|new
name|Vector
argument_list|<
name|QueryNode
argument_list|>
argument_list|()
expr_stmt|;
name|clauses
operator|.
name|addElement
argument_list|(
name|first
argument_list|)
expr_stmt|;
block|}
name|clauses
operator|.
name|addElement
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clauses
operator|!=
literal|null
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|AndQueryNode
argument_list|(
name|clauses
argument_list|)
return|;
block|}
block|}
else|else
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|first
return|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|// QueryNode Query(CharSequence field) :
comment|// {
comment|// List clauses = new ArrayList();
comment|//   List modifiers = new ArrayList();
comment|//   QueryNode q, firstQuery=null;
comment|//   ModifierQueryNode.Modifier mods;
comment|//   int conj;
comment|// }
comment|// {
comment|//   mods=Modifiers() q=Clause(field)
comment|//   {
comment|//     if (mods == ModifierQueryNode.Modifier.MOD_NONE) firstQuery=q;
comment|//
comment|//     // do not create modifier nodes with MOD_NONE
comment|//    	if (mods != ModifierQueryNode.Modifier.MOD_NONE) {
comment|//    		q = new ModifierQueryNode(q, mods);
comment|//    	}
comment|//    	clauses.add(q);
comment|//   }
comment|//   (
comment|//     conj=Conjunction() mods=Modifiers() q=Clause(field)
comment|//     {
comment|// 	    // do not create modifier nodes with MOD_NONE
comment|// 	   	if (mods != ModifierQueryNode.Modifier.MOD_NONE) {
comment|// 	   		q = new ModifierQueryNode(q, mods);
comment|// 	   	}
comment|// 	   	clauses.add(q);
comment|// 	   	//TODO: figure out what to do with AND and ORs
comment|//   }
comment|//   )*
comment|//     {
comment|//      if (clauses.size() == 1&& firstQuery != null)
comment|//         return firstQuery;
comment|//       else {
comment|//   		return new BooleanQueryNode(clauses);
comment|//       }
comment|//     }
comment|// }
DECL|method|ModClause
specifier|final
specifier|public
name|QueryNode
name|ModClause
parameter_list|(
name|CharSequence
name|field
parameter_list|)
throws|throws
name|ParseException
block|{
name|QueryNode
name|q
decl_stmt|;
name|ModifierQueryNode
operator|.
name|Modifier
name|mods
decl_stmt|;
name|mods
operator|=
name|Modifiers
argument_list|()
expr_stmt|;
name|q
operator|=
name|Clause
argument_list|(
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|mods
operator|!=
name|ModifierQueryNode
operator|.
name|Modifier
operator|.
name|MOD_NONE
condition|)
block|{
name|q
operator|=
operator|new
name|ModifierQueryNode
argument_list|(
name|q
argument_list|,
name|mods
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|q
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|Clause
specifier|final
specifier|public
name|QueryNode
name|Clause
parameter_list|(
name|CharSequence
name|field
parameter_list|)
throws|throws
name|ParseException
block|{
name|QueryNode
name|q
decl_stmt|;
name|Token
name|fieldToken
init|=
literal|null
decl_stmt|,
name|boost
init|=
literal|null
decl_stmt|;
name|boolean
name|group
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|jj_2_1
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|fieldToken
operator|=
name|jj_consume_token
argument_list|(
name|TERM
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|field
operator|=
name|EscapeQuerySyntaxImpl
operator|.
name|discardEscapeChar
argument_list|(
name|fieldToken
operator|.
name|image
argument_list|)
expr_stmt|;
block|}
else|else
block|{
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|QUOTED
case|:
case|case
name|TERM
case|:
case|case
name|REGEXPTERM
case|:
case|case
name|RANGEIN_START
case|:
case|case
name|RANGEEX_START
case|:
case|case
name|NUMBER
case|:
name|q
operator|=
name|Term
argument_list|(
name|field
argument_list|)
expr_stmt|;
break|break;
case|case
name|LPAREN
case|:
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|q
operator|=
name|Query
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CARAT
case|:
name|jj_consume_token
argument_list|(
name|CARAT
argument_list|)
expr_stmt|;
name|boost
operator|=
name|jj_consume_token
argument_list|(
name|NUMBER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|7
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|group
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|8
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
if|if
condition|(
name|boost
operator|!=
literal|null
condition|)
block|{
name|float
name|f
init|=
operator|(
name|float
operator|)
literal|1.0
decl_stmt|;
try|try
block|{
name|f
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|boost
operator|.
name|image
argument_list|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
comment|// avoid boosting null queries, such as those caused by stop words
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|q
operator|=
operator|new
name|BoostQueryNode
argument_list|(
name|q
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|/* Should this be handled somehow? (defaults to "no boost", if              * boost number is invalid)              */
block|}
block|}
if|if
condition|(
name|group
condition|)
block|{
name|q
operator|=
operator|new
name|GroupQueryNode
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|q
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|Term
specifier|final
specifier|public
name|QueryNode
name|Term
parameter_list|(
name|CharSequence
name|field
parameter_list|)
throws|throws
name|ParseException
block|{
name|Token
name|term
decl_stmt|,
name|boost
init|=
literal|null
decl_stmt|,
name|fuzzySlop
init|=
literal|null
decl_stmt|,
name|goop1
decl_stmt|,
name|goop2
decl_stmt|;
name|boolean
name|fuzzy
init|=
literal|false
decl_stmt|;
name|boolean
name|regexp
init|=
literal|false
decl_stmt|;
name|QueryNode
name|q
init|=
literal|null
decl_stmt|;
name|ParametricQueryNode
name|qLower
decl_stmt|,
name|qUpper
decl_stmt|;
name|float
name|defaultMinSimilarity
init|=
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FuzzyQuery
operator|.
name|defaultMinSimilarity
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|TERM
case|:
case|case
name|REGEXPTERM
case|:
case|case
name|NUMBER
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|TERM
case|:
name|term
operator|=
name|jj_consume_token
argument_list|(
name|TERM
argument_list|)
expr_stmt|;
name|q
operator|=
operator|new
name|FieldQueryNode
argument_list|(
name|field
argument_list|,
name|EscapeQuerySyntaxImpl
operator|.
name|discardEscapeChar
argument_list|(
name|term
operator|.
name|image
argument_list|)
argument_list|,
name|term
operator|.
name|beginColumn
argument_list|,
name|term
operator|.
name|endColumn
argument_list|)
expr_stmt|;
break|break;
case|case
name|REGEXPTERM
case|:
name|term
operator|=
name|jj_consume_token
argument_list|(
name|REGEXPTERM
argument_list|)
expr_stmt|;
name|regexp
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|NUMBER
case|:
name|term
operator|=
name|jj_consume_token
argument_list|(
name|NUMBER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|9
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|FUZZY_SLOP
case|:
name|fuzzySlop
operator|=
name|jj_consume_token
argument_list|(
name|FUZZY_SLOP
argument_list|)
expr_stmt|;
name|fuzzy
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|10
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CARAT
case|:
name|jj_consume_token
argument_list|(
name|CARAT
argument_list|)
expr_stmt|;
name|boost
operator|=
name|jj_consume_token
argument_list|(
name|NUMBER
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|FUZZY_SLOP
case|:
name|fuzzySlop
operator|=
name|jj_consume_token
argument_list|(
name|FUZZY_SLOP
argument_list|)
expr_stmt|;
name|fuzzy
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|11
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|12
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
if|if
condition|(
name|fuzzy
condition|)
block|{
name|float
name|fms
init|=
name|defaultMinSimilarity
decl_stmt|;
try|try
block|{
name|fms
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|fuzzySlop
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{ }
if|if
condition|(
name|fms
operator|<
literal|0.0f
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|new
name|ParseException
argument_list|(
operator|new
name|MessageImpl
argument_list|(
name|QueryParserMessages
operator|.
name|INVALID_SYNTAX_FUZZY_LIMITS
argument_list|)
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|fms
operator|>=
literal|1.0f
operator|&&
name|fms
operator|!=
operator|(
name|int
operator|)
name|fms
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|new
name|ParseException
argument_list|(
operator|new
name|MessageImpl
argument_list|(
name|QueryParserMessages
operator|.
name|INVALID_SYNTAX_FUZZY_EDITS
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|q
operator|=
operator|new
name|FuzzyQueryNode
argument_list|(
name|field
argument_list|,
name|EscapeQuerySyntaxImpl
operator|.
name|discardEscapeChar
argument_list|(
name|term
operator|.
name|image
argument_list|)
argument_list|,
name|fms
argument_list|,
name|term
operator|.
name|beginColumn
argument_list|,
name|term
operator|.
name|endColumn
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|regexp
condition|)
block|{
name|q
operator|=
operator|new
name|RegexpQueryNode
argument_list|(
name|field
argument_list|,
name|term
operator|.
name|image
argument_list|,
name|term
operator|.
name|beginColumn
argument_list|,
name|term
operator|.
name|endColumn
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|RANGEIN_START
case|:
name|jj_consume_token
argument_list|(
name|RANGEIN_START
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|RANGEIN_GOOP
case|:
name|goop1
operator|=
name|jj_consume_token
argument_list|(
name|RANGEIN_GOOP
argument_list|)
expr_stmt|;
break|break;
case|case
name|RANGEIN_QUOTED
case|:
name|goop1
operator|=
name|jj_consume_token
argument_list|(
name|RANGEIN_QUOTED
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|13
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|RANGEIN_TO
case|:
name|jj_consume_token
argument_list|(
name|RANGEIN_TO
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|14
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|RANGEIN_GOOP
case|:
name|goop2
operator|=
name|jj_consume_token
argument_list|(
name|RANGEIN_GOOP
argument_list|)
expr_stmt|;
break|break;
case|case
name|RANGEIN_QUOTED
case|:
name|goop2
operator|=
name|jj_consume_token
argument_list|(
name|RANGEIN_QUOTED
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|15
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|jj_consume_token
argument_list|(
name|RANGEIN_END
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CARAT
case|:
name|jj_consume_token
argument_list|(
name|CARAT
argument_list|)
expr_stmt|;
name|boost
operator|=
name|jj_consume_token
argument_list|(
name|NUMBER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|16
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
if|if
condition|(
name|goop1
operator|.
name|kind
operator|==
name|RANGEIN_QUOTED
condition|)
block|{
name|goop1
operator|.
name|image
operator|=
name|goop1
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|goop1
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|goop2
operator|.
name|kind
operator|==
name|RANGEIN_QUOTED
condition|)
block|{
name|goop2
operator|.
name|image
operator|=
name|goop2
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|goop2
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|qLower
operator|=
operator|new
name|ParametricQueryNode
argument_list|(
name|field
argument_list|,
name|ParametricQueryNode
operator|.
name|CompareOperator
operator|.
name|GE
argument_list|,
name|EscapeQuerySyntaxImpl
operator|.
name|discardEscapeChar
argument_list|(
name|goop1
operator|.
name|image
argument_list|)
argument_list|,
name|goop1
operator|.
name|beginColumn
argument_list|,
name|goop1
operator|.
name|endColumn
argument_list|)
expr_stmt|;
name|qUpper
operator|=
operator|new
name|ParametricQueryNode
argument_list|(
name|field
argument_list|,
name|ParametricQueryNode
operator|.
name|CompareOperator
operator|.
name|LE
argument_list|,
name|EscapeQuerySyntaxImpl
operator|.
name|discardEscapeChar
argument_list|(
name|goop2
operator|.
name|image
argument_list|)
argument_list|,
name|goop2
operator|.
name|beginColumn
argument_list|,
name|goop2
operator|.
name|endColumn
argument_list|)
expr_stmt|;
name|q
operator|=
operator|new
name|ParametricRangeQueryNode
argument_list|(
name|qLower
argument_list|,
name|qUpper
argument_list|)
expr_stmt|;
break|break;
case|case
name|RANGEEX_START
case|:
name|jj_consume_token
argument_list|(
name|RANGEEX_START
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|RANGEEX_GOOP
case|:
name|goop1
operator|=
name|jj_consume_token
argument_list|(
name|RANGEEX_GOOP
argument_list|)
expr_stmt|;
break|break;
case|case
name|RANGEEX_QUOTED
case|:
name|goop1
operator|=
name|jj_consume_token
argument_list|(
name|RANGEEX_QUOTED
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|17
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|RANGEEX_TO
case|:
name|jj_consume_token
argument_list|(
name|RANGEEX_TO
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|18
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|RANGEEX_GOOP
case|:
name|goop2
operator|=
name|jj_consume_token
argument_list|(
name|RANGEEX_GOOP
argument_list|)
expr_stmt|;
break|break;
case|case
name|RANGEEX_QUOTED
case|:
name|goop2
operator|=
name|jj_consume_token
argument_list|(
name|RANGEEX_QUOTED
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|19
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|jj_consume_token
argument_list|(
name|RANGEEX_END
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CARAT
case|:
name|jj_consume_token
argument_list|(
name|CARAT
argument_list|)
expr_stmt|;
name|boost
operator|=
name|jj_consume_token
argument_list|(
name|NUMBER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|20
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
if|if
condition|(
name|goop1
operator|.
name|kind
operator|==
name|RANGEEX_QUOTED
condition|)
block|{
name|goop1
operator|.
name|image
operator|=
name|goop1
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|goop1
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|goop2
operator|.
name|kind
operator|==
name|RANGEEX_QUOTED
condition|)
block|{
name|goop2
operator|.
name|image
operator|=
name|goop2
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|goop2
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|qLower
operator|=
operator|new
name|ParametricQueryNode
argument_list|(
name|field
argument_list|,
name|ParametricQueryNode
operator|.
name|CompareOperator
operator|.
name|GT
argument_list|,
name|EscapeQuerySyntaxImpl
operator|.
name|discardEscapeChar
argument_list|(
name|goop1
operator|.
name|image
argument_list|)
argument_list|,
name|goop1
operator|.
name|beginColumn
argument_list|,
name|goop1
operator|.
name|endColumn
argument_list|)
expr_stmt|;
name|qUpper
operator|=
operator|new
name|ParametricQueryNode
argument_list|(
name|field
argument_list|,
name|ParametricQueryNode
operator|.
name|CompareOperator
operator|.
name|LT
argument_list|,
name|EscapeQuerySyntaxImpl
operator|.
name|discardEscapeChar
argument_list|(
name|goop2
operator|.
name|image
argument_list|)
argument_list|,
name|goop2
operator|.
name|beginColumn
argument_list|,
name|goop2
operator|.
name|endColumn
argument_list|)
expr_stmt|;
name|q
operator|=
operator|new
name|ParametricRangeQueryNode
argument_list|(
name|qLower
argument_list|,
name|qUpper
argument_list|)
expr_stmt|;
break|break;
case|case
name|QUOTED
case|:
name|term
operator|=
name|jj_consume_token
argument_list|(
name|QUOTED
argument_list|)
expr_stmt|;
name|q
operator|=
operator|new
name|QuotedFieldQueryNode
argument_list|(
name|field
argument_list|,
name|EscapeQuerySyntaxImpl
operator|.
name|discardEscapeChar
argument_list|(
name|term
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|term
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|,
name|term
operator|.
name|beginColumn
operator|+
literal|1
argument_list|,
name|term
operator|.
name|endColumn
operator|-
literal|1
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|FUZZY_SLOP
case|:
name|fuzzySlop
operator|=
name|jj_consume_token
argument_list|(
name|FUZZY_SLOP
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|21
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CARAT
case|:
name|jj_consume_token
argument_list|(
name|CARAT
argument_list|)
expr_stmt|;
name|boost
operator|=
name|jj_consume_token
argument_list|(
name|NUMBER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|22
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|int
name|phraseSlop
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|fuzzySlop
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|phraseSlop
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|fuzzySlop
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|q
operator|=
operator|new
name|SlopQueryNode
argument_list|(
name|q
argument_list|,
name|phraseSlop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|/* Should this be handled somehow? (defaults to "no PhraseSlop", if 	         * slop number is invalid) 	         */
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|23
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
if|if
condition|(
name|boost
operator|!=
literal|null
condition|)
block|{
name|float
name|f
init|=
operator|(
name|float
operator|)
literal|1.0
decl_stmt|;
try|try
block|{
name|f
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|boost
operator|.
name|image
argument_list|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
comment|// avoid boosting null queries, such as those caused by stop words
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|q
operator|=
operator|new
name|BoostQueryNode
argument_list|(
name|q
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|/* Should this be handled somehow? (defaults to "no boost", if 	         * boost number is invalid) 	         */
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|q
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|jj_2_1
specifier|private
name|boolean
name|jj_2_1
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_1
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|0
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|jj_3_1
specifier|private
name|boolean
name|jj_3_1
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|TERM
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|COLON
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
comment|/** Generated Token Manager. */
DECL|field|token_source
specifier|public
name|StandardSyntaxParserTokenManager
name|token_source
decl_stmt|;
DECL|field|jj_input_stream
name|JavaCharStream
name|jj_input_stream
decl_stmt|;
comment|/** Current token. */
DECL|field|token
specifier|public
name|Token
name|token
decl_stmt|;
comment|/** Next token. */
DECL|field|jj_nt
specifier|public
name|Token
name|jj_nt
decl_stmt|;
DECL|field|jj_ntk
specifier|private
name|int
name|jj_ntk
decl_stmt|;
DECL|field|jj_scanpos
DECL|field|jj_lastpos
specifier|private
name|Token
name|jj_scanpos
decl_stmt|,
name|jj_lastpos
decl_stmt|;
DECL|field|jj_la
specifier|private
name|int
name|jj_la
decl_stmt|;
DECL|field|jj_gen
specifier|private
name|int
name|jj_gen
decl_stmt|;
DECL|field|jj_la1
specifier|final
specifier|private
name|int
index|[]
name|jj_la1
init|=
operator|new
name|int
index|[
literal|24
index|]
decl_stmt|;
DECL|field|jj_la1_0
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_0
decl_stmt|;
static|static
block|{
name|jj_la1_init_0
argument_list|()
expr_stmt|;
block|}
DECL|method|jj_la1_init_0
specifier|private
specifier|static
name|void
name|jj_la1_init_0
parameter_list|()
block|{
name|jj_la1_0
operator|=
operator|new
name|int
index|[]
block|{
literal|0x300
block|,
literal|0x300
block|,
literal|0x1c00
block|,
literal|0x1c00
block|,
literal|0xf63c00
block|,
literal|0x200
block|,
literal|0x100
block|,
literal|0x10000
block|,
literal|0xf62000
block|,
literal|0x940000
block|,
literal|0x80000
block|,
literal|0x80000
block|,
literal|0x10000
block|,
literal|0xc000000
block|,
literal|0x1000000
block|,
literal|0xc000000
block|,
literal|0x10000
block|,
literal|0xc0000000
block|,
literal|0x10000000
block|,
literal|0xc0000000
block|,
literal|0x10000
block|,
literal|0x80000
block|,
literal|0x10000
block|,
literal|0xf60000
block|,}
expr_stmt|;
block|}
DECL|field|jj_2_rtns
specifier|final
specifier|private
name|JJCalls
index|[]
name|jj_2_rtns
init|=
operator|new
name|JJCalls
index|[
literal|1
index|]
decl_stmt|;
DECL|field|jj_rescan
specifier|private
name|boolean
name|jj_rescan
init|=
literal|false
decl_stmt|;
DECL|field|jj_gc
specifier|private
name|int
name|jj_gc
init|=
literal|0
decl_stmt|;
comment|/** Constructor with InputStream. */
DECL|method|StandardSyntaxParser
specifier|public
name|StandardSyntaxParser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|this
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Constructor with InputStream and supplied encoding */
DECL|method|StandardSyntaxParser
specifier|public
name|StandardSyntaxParser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
try|try
block|{
name|jj_input_stream
operator|=
operator|new
name|JavaCharStream
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|token_source
operator|=
operator|new
name|StandardSyntaxParserTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|24
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
comment|/** Reinitialise. */
DECL|method|ReInit
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Reinitialise. */
DECL|method|ReInit
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
try|try
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|24
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
comment|/** Constructor. */
DECL|method|StandardSyntaxParser
specifier|public
name|StandardSyntaxParser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|=
operator|new
name|JavaCharStream
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|=
operator|new
name|StandardSyntaxParserTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|24
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
comment|/** Reinitialise. */
DECL|method|ReInit
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|24
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
comment|/** Constructor with generated Token Manager. */
DECL|method|StandardSyntaxParser
specifier|public
name|StandardSyntaxParser
parameter_list|(
name|StandardSyntaxParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|24
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
comment|/** Reinitialise. */
DECL|method|ReInit
specifier|public
name|void
name|ReInit
parameter_list|(
name|StandardSyntaxParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|24
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
DECL|method|jj_consume_token
specifier|private
name|Token
name|jj_consume_token
parameter_list|(
name|int
name|kind
parameter_list|)
throws|throws
name|ParseException
block|{
name|Token
name|oldToken
decl_stmt|;
if|if
condition|(
operator|(
name|oldToken
operator|=
name|token
operator|)
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|kind
operator|==
name|kind
condition|)
block|{
name|jj_gen
operator|++
expr_stmt|;
if|if
condition|(
operator|++
name|jj_gc
operator|>
literal|100
condition|)
block|{
name|jj_gc
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|JJCalls
name|c
init|=
name|jj_2_rtns
index|[
name|i
index|]
decl_stmt|;
while|while
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|gen
operator|<
name|jj_gen
condition|)
name|c
operator|.
name|first
operator|=
literal|null
expr_stmt|;
name|c
operator|=
name|c
operator|.
name|next
expr_stmt|;
block|}
block|}
block|}
return|return
name|token
return|;
block|}
name|token
operator|=
name|oldToken
expr_stmt|;
name|jj_kind
operator|=
name|kind
expr_stmt|;
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
DECL|class|LookaheadSuccess
specifier|static
specifier|private
specifier|final
class|class
name|LookaheadSuccess
extends|extends
name|java
operator|.
name|lang
operator|.
name|Error
block|{ }
DECL|field|jj_ls
specifier|final
specifier|private
name|LookaheadSuccess
name|jj_ls
init|=
operator|new
name|LookaheadSuccess
argument_list|()
decl_stmt|;
DECL|method|jj_scan_token
specifier|private
name|boolean
name|jj_scan_token
parameter_list|(
name|int
name|kind
parameter_list|)
block|{
if|if
condition|(
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
block|{
name|jj_la
operator|--
expr_stmt|;
if|if
condition|(
name|jj_scanpos
operator|.
name|next
operator|==
literal|null
condition|)
block|{
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
expr_stmt|;
block|}
block|}
else|else
block|{
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
expr_stmt|;
block|}
if|if
condition|(
name|jj_rescan
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|Token
name|tok
init|=
name|token
decl_stmt|;
while|while
condition|(
name|tok
operator|!=
literal|null
operator|&&
name|tok
operator|!=
name|jj_scanpos
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|tok
operator|=
name|tok
operator|.
name|next
expr_stmt|;
block|}
if|if
condition|(
name|tok
operator|!=
literal|null
condition|)
name|jj_add_error_token
argument_list|(
name|kind
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jj_scanpos
operator|.
name|kind
operator|!=
name|kind
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_la
operator|==
literal|0
operator|&&
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
throw|throw
name|jj_ls
throw|;
return|return
literal|false
return|;
block|}
comment|/** Get the next Token. */
DECL|method|getNextToken
specifier|final
specifier|public
name|Token
name|getNextToken
parameter_list|()
block|{
if|if
condition|(
name|token
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|++
expr_stmt|;
return|return
name|token
return|;
block|}
comment|/** Get the specific Token. */
DECL|method|getToken
specifier|final
specifier|public
name|Token
name|getToken
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Token
name|t
init|=
name|token
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|.
name|next
operator|!=
literal|null
condition|)
name|t
operator|=
name|t
operator|.
name|next
expr_stmt|;
else|else
name|t
operator|=
name|t
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
DECL|method|jj_ntk
specifier|private
name|int
name|jj_ntk
parameter_list|()
block|{
if|if
condition|(
operator|(
name|jj_nt
operator|=
name|token
operator|.
name|next
operator|)
operator|==
literal|null
condition|)
return|return
operator|(
name|jj_ntk
operator|=
operator|(
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
operator|)
operator|.
name|kind
operator|)
return|;
else|else
return|return
operator|(
name|jj_ntk
operator|=
name|jj_nt
operator|.
name|kind
operator|)
return|;
block|}
DECL|field|jj_expentries
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|int
index|[]
argument_list|>
name|jj_expentries
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|int
index|[]
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|jj_expentry
specifier|private
name|int
index|[]
name|jj_expentry
decl_stmt|;
DECL|field|jj_kind
specifier|private
name|int
name|jj_kind
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|jj_lasttokens
specifier|private
name|int
index|[]
name|jj_lasttokens
init|=
operator|new
name|int
index|[
literal|100
index|]
decl_stmt|;
DECL|field|jj_endpos
specifier|private
name|int
name|jj_endpos
decl_stmt|;
DECL|method|jj_add_error_token
specifier|private
name|void
name|jj_add_error_token
parameter_list|(
name|int
name|kind
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|>=
literal|100
condition|)
return|return;
if|if
condition|(
name|pos
operator|==
name|jj_endpos
operator|+
literal|1
condition|)
block|{
name|jj_lasttokens
index|[
name|jj_endpos
operator|++
index|]
operator|=
name|kind
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|jj_endpos
operator|!=
literal|0
condition|)
block|{
name|jj_expentry
operator|=
operator|new
name|int
index|[
name|jj_endpos
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_endpos
condition|;
name|i
operator|++
control|)
block|{
name|jj_expentry
index|[
name|i
index|]
operator|=
name|jj_lasttokens
index|[
name|i
index|]
expr_stmt|;
block|}
name|jj_entries_loop
label|:
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Iterator
name|it
init|=
name|jj_expentries
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|int
index|[]
name|oldentry
init|=
operator|(
name|int
index|[]
operator|)
operator|(
name|it
operator|.
name|next
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|oldentry
operator|.
name|length
operator|==
name|jj_expentry
operator|.
name|length
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_expentry
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|oldentry
index|[
name|i
index|]
operator|!=
name|jj_expentry
index|[
name|i
index|]
condition|)
block|{
continue|continue
name|jj_entries_loop
continue|;
block|}
block|}
name|jj_expentries
operator|.
name|add
argument_list|(
name|jj_expentry
argument_list|)
expr_stmt|;
break|break
name|jj_entries_loop
break|;
block|}
block|}
if|if
condition|(
name|pos
operator|!=
literal|0
condition|)
name|jj_lasttokens
index|[
operator|(
name|jj_endpos
operator|=
name|pos
operator|)
operator|-
literal|1
index|]
operator|=
name|kind
expr_stmt|;
block|}
block|}
comment|/** Generate ParseException. */
DECL|method|generateParseException
specifier|public
name|ParseException
name|generateParseException
parameter_list|()
block|{
name|jj_expentries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|boolean
index|[]
name|la1tokens
init|=
operator|new
name|boolean
index|[
literal|32
index|]
decl_stmt|;
if|if
condition|(
name|jj_kind
operator|>=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|jj_kind
index|]
operator|=
literal|true
expr_stmt|;
name|jj_kind
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|24
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|jj_la1
index|[
name|i
index|]
operator|==
name|jj_gen
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|32
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|jj_la1_0
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|32
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|la1tokens
index|[
name|i
index|]
condition|)
block|{
name|jj_expentry
operator|=
operator|new
name|int
index|[
literal|1
index|]
expr_stmt|;
name|jj_expentry
index|[
literal|0
index|]
operator|=
name|i
expr_stmt|;
name|jj_expentries
operator|.
name|add
argument_list|(
name|jj_expentry
argument_list|)
expr_stmt|;
block|}
block|}
name|jj_endpos
operator|=
literal|0
expr_stmt|;
name|jj_rescan_token
argument_list|()
expr_stmt|;
name|jj_add_error_token
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|exptokseq
init|=
operator|new
name|int
index|[
name|jj_expentries
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_expentries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|exptokseq
index|[
name|i
index|]
operator|=
name|jj_expentries
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ParseException
argument_list|(
name|token
argument_list|,
name|exptokseq
argument_list|,
name|tokenImage
argument_list|)
return|;
block|}
comment|/** Enable tracing. */
DECL|method|enable_tracing
specifier|final
specifier|public
name|void
name|enable_tracing
parameter_list|()
block|{   }
comment|/** Disable tracing. */
DECL|method|disable_tracing
specifier|final
specifier|public
name|void
name|disable_tracing
parameter_list|()
block|{   }
DECL|method|jj_rescan_token
specifier|private
name|void
name|jj_rescan_token
parameter_list|()
block|{
name|jj_rescan
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|JJCalls
name|p
init|=
name|jj_2_rtns
index|[
name|i
index|]
decl_stmt|;
do|do
block|{
if|if
condition|(
name|p
operator|.
name|gen
operator|>
name|jj_gen
condition|)
block|{
name|jj_la
operator|=
name|p
operator|.
name|arg
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|p
operator|.
name|first
expr_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
name|jj_3_1
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|p
operator|=
name|p
operator|.
name|next
expr_stmt|;
block|}
do|while
condition|(
name|p
operator|!=
literal|null
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{ }
block|}
name|jj_rescan
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|jj_save
specifier|private
name|void
name|jj_save
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|xla
parameter_list|)
block|{
name|JJCalls
name|p
init|=
name|jj_2_rtns
index|[
name|index
index|]
decl_stmt|;
while|while
condition|(
name|p
operator|.
name|gen
operator|>
name|jj_gen
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|next
operator|==
literal|null
condition|)
block|{
name|p
operator|=
name|p
operator|.
name|next
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
break|break;
block|}
name|p
operator|=
name|p
operator|.
name|next
expr_stmt|;
block|}
name|p
operator|.
name|gen
operator|=
name|jj_gen
operator|+
name|xla
operator|-
name|jj_la
expr_stmt|;
name|p
operator|.
name|first
operator|=
name|token
expr_stmt|;
name|p
operator|.
name|arg
operator|=
name|xla
expr_stmt|;
block|}
DECL|class|JJCalls
specifier|static
specifier|final
class|class
name|JJCalls
block|{
DECL|field|gen
name|int
name|gen
decl_stmt|;
DECL|field|first
name|Token
name|first
decl_stmt|;
DECL|field|arg
name|int
name|arg
decl_stmt|;
DECL|field|next
name|JJCalls
name|next
decl_stmt|;
block|}
block|}
end_class
end_unit
