begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.el
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|el
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|CharArraySet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A stemmer for Greek words, according to:<i>Development of a Stemmer for the  * Greek Language.</i> Georgios Ntais  *<p>  * NOTE: Input is expected to be casefolded for Greek (including folding of final  * sigma to sigma), and with diacritics removed. This can be achieved with   * either {@link GreekLowerCaseFilter} or ICUFoldingFilter.  * @lucene.experimental  */
end_comment
begin_class
DECL|class|GreekStemmer
specifier|public
class|class
name|GreekStemmer
block|{
DECL|method|stem
specifier|public
name|int
name|stem
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|<
literal|4
condition|)
comment|// too short
return|return
name|len
return|;
specifier|final
name|int
name|origLen
init|=
name|len
decl_stmt|;
comment|// "short rules": if it hits one of these, it skips the "long list"
name|len
operator|=
name|rule0
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
name|rule1
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
name|rule2
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
name|rule3
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
name|rule4
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
name|rule5
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
name|rule6
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
name|rule7
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
name|rule8
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
name|rule9
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
name|rule10
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
name|rule11
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
name|rule12
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
name|rule13
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
name|rule14
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
name|rule15
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
name|rule16
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
name|rule17
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
name|rule18
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
name|rule19
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
name|rule20
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
expr_stmt|;
comment|// "long list"
if|if
condition|(
name|len
operator|==
name|origLen
condition|)
name|len
operator|=
name|rule21
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|rule22
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
return|;
block|}
DECL|method|rule0
specifier|private
name|int
name|rule0
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|>
literal|9
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎºÎ±Î¸ÎµÏÏÏÏÎ¿Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎºÎ±Î¸ÎµÏÏÏÏÏÎ½"
argument_list|)
operator|)
condition|)
return|return
name|len
operator|-
literal|4
return|;
if|if
condition|(
name|len
operator|>
literal|8
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î³ÎµÎ³Î¿Î½Î¿ÏÎ¿Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î³ÎµÎ³Î¿Î½Î¿ÏÏÎ½"
argument_list|)
operator|)
condition|)
return|return
name|len
operator|-
literal|4
return|;
if|if
condition|(
name|len
operator|>
literal|8
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎºÎ±Î¸ÎµÏÏÏÏÎ±"
argument_list|)
condition|)
return|return
name|len
operator|-
literal|3
return|;
if|if
condition|(
name|len
operator|>
literal|7
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ±ÏÎ¿Î³Î¹Î¿Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ±ÏÎ¿Î³Î¹ÏÎ½"
argument_list|)
operator|)
condition|)
return|return
name|len
operator|-
literal|4
return|;
if|if
condition|(
name|len
operator|>
literal|7
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î³ÎµÎ³Î¿Î½Î¿ÏÎ±"
argument_list|)
condition|)
return|return
name|len
operator|-
literal|3
return|;
if|if
condition|(
name|len
operator|>
literal|7
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎºÎ±Î¸ÎµÏÏÏÏ"
argument_list|)
condition|)
return|return
name|len
operator|-
literal|2
return|;
if|if
condition|(
name|len
operator|>
literal|6
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎºÎ±Î³Î¹Î¿Ï"
argument_list|)
operator|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎºÎ±Î³Î¹ÏÎ½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Î»Î¿Î³Î¹Î¿Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Î»Î¿Î³Î¹ÏÎ½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎºÏÎµÎ±ÏÎ¿Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎºÏÎµÎ±ÏÏÎ½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎµÏÎ±ÏÎ¿Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎµÏÎ±ÏÏÎ½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎµÏÎ±ÏÎ¿Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎµÏÎ±ÏÏÎ½"
argument_list|)
condition|)
return|return
name|len
operator|-
literal|4
return|;
if|if
condition|(
name|len
operator|>
literal|6
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ±ÏÎ¿Î³Î¹Î±"
argument_list|)
condition|)
return|return
name|len
operator|-
literal|3
return|;
if|if
condition|(
name|len
operator|>
literal|6
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î³ÎµÎ³Î¿Î½Î¿Ï"
argument_list|)
condition|)
return|return
name|len
operator|-
literal|2
return|;
if|if
condition|(
name|len
operator|>
literal|5
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ±Î³Î¹Î¿Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ±Î³Î¹ÏÎ½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ¿Î³Î¹Î¿Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ¿Î³Î¹ÏÎ½"
argument_list|)
operator|)
condition|)
return|return
name|len
operator|-
literal|4
return|;
if|if
condition|(
name|len
operator|>
literal|5
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎºÎ±Î³Î¹Î±"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Î»Î¿Î³Î¹Î±"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎºÏÎµÎ±ÏÎ±"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎµÏÎ±ÏÎ±"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎµÏÎ±ÏÎ±"
argument_list|)
operator|)
condition|)
return|return
name|len
operator|-
literal|3
return|;
if|if
condition|(
name|len
operator|>
literal|4
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ±Î³Î¹Î±"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ¿Î³Î¹Î±"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏÏÎ¿Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏÏÏÎ½"
argument_list|)
operator|)
condition|)
return|return
name|len
operator|-
literal|3
return|;
if|if
condition|(
name|len
operator|>
literal|4
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎºÏÎµÎ±Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎµÏÎ±Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎµÏÎ±Ï"
argument_list|)
operator|)
condition|)
return|return
name|len
operator|-
literal|2
return|;
if|if
condition|(
name|len
operator|>
literal|3
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏÏÎ±"
argument_list|)
condition|)
return|return
name|len
operator|-
literal|2
return|;
if|if
condition|(
name|len
operator|>
literal|2
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏÏ"
argument_list|)
condition|)
return|return
name|len
operator|-
literal|1
return|;
return|return
name|len
return|;
block|}
DECL|method|rule1
specifier|private
name|int
name|rule1
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|>
literal|4
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±Î´ÎµÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±Î´ÏÎ½"
argument_list|)
operator|)
condition|)
block|{
name|len
operator|-=
literal|4
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Îº"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¼Î±Î¼"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¼Î±Î½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¼ÏÎ±Î¼Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ±ÏÎµÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î³Î¹Î±Î³Î¹"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î½ÏÎ±Î½Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎºÏÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¸ÎµÎ¹"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎµÎ¸ÎµÏ"
argument_list|)
operator|)
condition|)
name|len
operator|+=
literal|2
expr_stmt|;
comment|// add back -Î±Î´
block|}
return|return
name|len
return|;
block|}
DECL|method|rule2
specifier|private
name|int
name|rule2
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|>
literal|4
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎµÎ´ÎµÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎµÎ´ÏÎ½"
argument_list|)
operator|)
condition|)
block|{
name|len
operator|-=
literal|4
expr_stmt|;
if|if
condition|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎµÎ¼Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î³Î·Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î´Î±Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎºÏÎ±ÏÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¼Î¹Î»"
argument_list|)
condition|)
name|len
operator|+=
literal|2
expr_stmt|;
comment|// add back -ÎµÎ´
block|}
return|return
name|len
return|;
block|}
DECL|method|rule3
specifier|private
name|int
name|rule3
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|>
literal|5
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÎ´ÎµÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÎ´ÏÎ½"
argument_list|)
operator|)
condition|)
block|{
name|len
operator|-=
literal|5
expr_stmt|;
if|if
condition|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±ÏÎº"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎºÎ±Î»Î¹Î±Îº"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎµÏÎ±Î»"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î»Î¹Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ»ÎµÎ¾"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎº"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ»"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î²ÎµÎ»"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î»Î¿ÏÎ»"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏÎ±Î³"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎµ"
argument_list|)
condition|)
name|len
operator|+=
literal|3
expr_stmt|;
comment|// add back -Î¿ÏÎ´
block|}
return|return
name|len
return|;
block|}
DECL|field|exc4
specifier|private
specifier|static
specifier|final
name|CharArraySet
name|exc4
init|=
operator|new
name|CharArraySet
argument_list|(
name|Version
operator|.
name|LUCENE_31
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Î¸"
argument_list|,
literal|"Î´"
argument_list|,
literal|"ÎµÎ»"
argument_list|,
literal|"Î³Î±Î»"
argument_list|,
literal|"Î½"
argument_list|,
literal|"Ï"
argument_list|,
literal|"Î¹Î´"
argument_list|,
literal|"ÏÎ±Ï"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|method|rule4
specifier|private
name|int
name|rule4
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|>
literal|3
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎµÏÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎµÏÎ½"
argument_list|)
operator|)
condition|)
block|{
name|len
operator|-=
literal|3
expr_stmt|;
if|if
condition|(
name|exc4
operator|.
name|contains
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
condition|)
name|len
operator|++
expr_stmt|;
comment|// add back -Îµ
block|}
return|return
name|len
return|;
block|}
DECL|method|rule5
specifier|private
name|int
name|rule5
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|>
literal|2
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹Î±"
argument_list|)
condition|)
block|{
name|len
operator|-=
literal|2
expr_stmt|;
if|if
condition|(
name|endsWithVowel
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
condition|)
name|len
operator|++
expr_stmt|;
comment|// add back -Î¹
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|3
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹Î¿Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹ÏÎ½"
argument_list|)
operator|)
condition|)
block|{
name|len
operator|-=
literal|3
expr_stmt|;
if|if
condition|(
name|endsWithVowel
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
condition|)
name|len
operator|++
expr_stmt|;
comment|// add back -Î¹
block|}
return|return
name|len
return|;
block|}
DECL|field|exc6
specifier|private
specifier|static
specifier|final
name|CharArraySet
name|exc6
init|=
operator|new
name|CharArraySet
argument_list|(
name|Version
operator|.
name|LUCENE_31
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Î±Î»"
argument_list|,
literal|"Î±Î´"
argument_list|,
literal|"ÎµÎ½Î´"
argument_list|,
literal|"Î±Î¼Î±Î½"
argument_list|,
literal|"Î±Î¼Î¼Î¿ÏÎ±Î»"
argument_list|,
literal|"Î·Î¸"
argument_list|,
literal|"Î±Î½Î·Î¸"
argument_list|,
literal|"Î±Î½ÏÎ¹Î´"
argument_list|,
literal|"ÏÏÏ"
argument_list|,
literal|"Î²ÏÏÎ¼"
argument_list|,
literal|"Î³ÎµÏ"
argument_list|,
literal|"ÎµÎ¾ÏÎ´"
argument_list|,
literal|"ÎºÎ±Î»Ï"
argument_list|,
literal|"ÎºÎ±Î»Î»Î¹Î½"
argument_list|,
literal|"ÎºÎ±ÏÎ±Î´"
argument_list|,
literal|"Î¼Î¿ÏÎ»"
argument_list|,
literal|"Î¼ÏÎ±Î½"
argument_list|,
literal|"Î¼ÏÎ±Î³Î¹Î±Ï"
argument_list|,
literal|"Î¼ÏÎ¿Î»"
argument_list|,
literal|"Î¼ÏÎ¿Ï"
argument_list|,
literal|"Î½Î¹Ï"
argument_list|,
literal|"Î¾Î¹Îº"
argument_list|,
literal|"ÏÏÎ½Î¿Î¼Î·Î»"
argument_list|,
literal|"ÏÎµÏÏ"
argument_list|,
literal|"ÏÎ¹ÏÏ"
argument_list|,
literal|"ÏÎ¹ÎºÎ±Î½Ï"
argument_list|,
literal|"ÏÎ»Î¹Î±ÏÏ"
argument_list|,
literal|"ÏÎ¿ÏÏÎµÎ»Î½"
argument_list|,
literal|"ÏÏÏÏÎ¿Î´"
argument_list|,
literal|"ÏÎµÏÏ"
argument_list|,
literal|"ÏÏÎ½Î±Î´"
argument_list|,
literal|"ÏÏÎ±Î¼"
argument_list|,
literal|"ÏÏÎ¿Î´"
argument_list|,
literal|"ÏÎ¹Î»Î¿Î½"
argument_list|,
literal|"ÏÏÎ»Î¿Î´"
argument_list|,
literal|"ÏÎ±Ï"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|method|rule6
specifier|private
name|int
name|rule6
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|3
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹ÎºÎ±"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹ÎºÎ¿"
argument_list|)
operator|)
condition|)
block|{
name|len
operator|-=
literal|3
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|4
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹ÎºÎ¿Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹ÎºÏÎ½"
argument_list|)
operator|)
condition|)
block|{
name|len
operator|-=
literal|4
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|removed
condition|)
block|{
if|if
condition|(
name|endsWithVowel
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
operator|||
name|exc6
operator|.
name|contains
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
condition|)
name|len
operator|+=
literal|2
expr_stmt|;
comment|// add back -Î¹Îº
block|}
return|return
name|len
return|;
block|}
DECL|field|exc7
specifier|private
specifier|static
specifier|final
name|CharArraySet
name|exc7
init|=
operator|new
name|CharArraySet
argument_list|(
name|Version
operator|.
name|LUCENE_31
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Î±Î½Î±Ï"
argument_list|,
literal|"Î±ÏÎ¿Î¸"
argument_list|,
literal|"Î±ÏÎ¿Îº"
argument_list|,
literal|"Î±ÏÎ¿ÏÏ"
argument_list|,
literal|"Î²Î¿ÏÎ²"
argument_list|,
literal|"Î¾ÎµÎ¸"
argument_list|,
literal|"Î¿ÏÎ»"
argument_list|,
literal|"ÏÎµÎ¸"
argument_list|,
literal|"ÏÎ¹ÎºÏ"
argument_list|,
literal|"ÏÎ¿Ï"
argument_list|,
literal|"ÏÎ¹Ï"
argument_list|,
literal|"Ï"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|method|rule7
specifier|private
name|int
name|rule7
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|==
literal|5
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±Î³Î±Î¼Îµ"
argument_list|)
condition|)
return|return
name|len
operator|-
literal|1
return|;
if|if
condition|(
name|len
operator|>
literal|7
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·Î¸Î·ÎºÎ±Î¼Îµ"
argument_list|)
condition|)
name|len
operator|-=
literal|7
expr_stmt|;
elseif|else
if|if
condition|(
name|len
operator|>
literal|6
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÏÎ±Î¼Îµ"
argument_list|)
condition|)
name|len
operator|-=
literal|6
expr_stmt|;
elseif|else
if|if
condition|(
name|len
operator|>
literal|5
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±Î³Î±Î¼Îµ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·ÏÎ±Î¼Îµ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·ÎºÎ±Î¼Îµ"
argument_list|)
operator|)
condition|)
name|len
operator|-=
literal|5
expr_stmt|;
if|if
condition|(
name|len
operator|>
literal|3
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±Î¼Îµ"
argument_list|)
condition|)
block|{
name|len
operator|-=
literal|3
expr_stmt|;
if|if
condition|(
name|exc7
operator|.
name|contains
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
condition|)
name|len
operator|+=
literal|2
expr_stmt|;
comment|// add back -Î±Î¼
block|}
return|return
name|len
return|;
block|}
DECL|field|exc8a
specifier|private
specifier|static
specifier|final
name|CharArraySet
name|exc8a
init|=
operator|new
name|CharArraySet
argument_list|(
name|Version
operator|.
name|LUCENE_31
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ÏÏ"
argument_list|,
literal|"ÏÏ"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|exc8b
specifier|private
specifier|static
specifier|final
name|CharArraySet
name|exc8b
init|=
operator|new
name|CharArraySet
argument_list|(
name|Version
operator|.
name|LUCENE_31
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Î²ÎµÏÎµÏ"
argument_list|,
literal|"Î²Î¿ÏÎ»Îº"
argument_list|,
literal|"Î²ÏÎ±ÏÎ¼"
argument_list|,
literal|"Î³"
argument_list|,
literal|"Î´ÏÎ±Î´Î¿ÏÎ¼"
argument_list|,
literal|"Î¸"
argument_list|,
literal|"ÎºÎ±Î»ÏÎ¿ÏÎ¶"
argument_list|,
literal|"ÎºÎ±ÏÏÎµÎ»"
argument_list|,
literal|"ÎºÎ¿ÏÎ¼Î¿Ï"
argument_list|,
literal|"Î»Î±Î¿ÏÎ»"
argument_list|,
literal|"Î¼ÏÎ±Î¼ÎµÎ¸"
argument_list|,
literal|"Î¼"
argument_list|,
literal|"Î¼Î¿ÏÏÎ¿ÏÎ»Î¼"
argument_list|,
literal|"Î½"
argument_list|,
literal|"Î¿ÏÎ»"
argument_list|,
literal|"Ï"
argument_list|,
literal|"ÏÎµÎ»ÎµÎº"
argument_list|,
literal|"ÏÎ»"
argument_list|,
literal|"ÏÎ¿Î»Î¹Ï"
argument_list|,
literal|"ÏÎ¿ÏÏÎ¿Î»"
argument_list|,
literal|"ÏÎ±ÏÎ±ÎºÎ±ÏÏ"
argument_list|,
literal|"ÏÎ¿ÏÎ»Ï"
argument_list|,
literal|"ÏÏÎ±ÏÎ»Î±Ï"
argument_list|,
literal|"Î¿ÏÏ"
argument_list|,
literal|"ÏÏÎ¹Î³Î³"
argument_list|,
literal|"ÏÏÎ¿Ï"
argument_list|,
literal|"ÏÏÏÎ¿ÏÏÎµÏ"
argument_list|,
literal|"Ï"
argument_list|,
literal|"ÏÏÏÎ¿ÏÎ»"
argument_list|,
literal|"Î±Î³"
argument_list|,
literal|"Î¿ÏÏ"
argument_list|,
literal|"Î³Î±Î»"
argument_list|,
literal|"Î³ÎµÏ"
argument_list|,
literal|"Î´ÎµÎº"
argument_list|,
literal|"Î´Î¹ÏÎ»"
argument_list|,
literal|"Î±Î¼ÎµÏÎ¹ÎºÎ±Î½"
argument_list|,
literal|"Î¿ÏÏ"
argument_list|,
literal|"ÏÎ¹Î¸"
argument_list|,
literal|"ÏÎ¿ÏÏÎ¹Ï"
argument_list|,
literal|"Ï"
argument_list|,
literal|"Î¶ÏÎ½Ï"
argument_list|,
literal|"Î¹Îº"
argument_list|,
literal|"ÎºÎ±ÏÏ"
argument_list|,
literal|"ÎºÎ¿Ï"
argument_list|,
literal|"Î»Î¹Ï"
argument_list|,
literal|"Î»Î¿ÏÎ¸Î·Ï"
argument_list|,
literal|"Î¼Î±Î¹Î½Ï"
argument_list|,
literal|"Î¼ÎµÎ»"
argument_list|,
literal|"ÏÎ¹Î³"
argument_list|,
literal|"ÏÏ"
argument_list|,
literal|"ÏÏÎµÎ³"
argument_list|,
literal|"ÏÏÎ±Î³"
argument_list|,
literal|"ÏÏÎ±Î³"
argument_list|,
literal|"Ï"
argument_list|,
literal|"ÎµÏ"
argument_list|,
literal|"Î±Î´Î±Ï"
argument_list|,
literal|"Î±Î¸Î¹Î³Î³"
argument_list|,
literal|"Î±Î¼Î·Ï"
argument_list|,
literal|"Î±Î½Î¹Îº"
argument_list|,
literal|"Î±Î½Î¿ÏÎ³"
argument_list|,
literal|"Î±ÏÎ·Î³"
argument_list|,
literal|"Î±ÏÎ¹Î¸"
argument_list|,
literal|"Î±ÏÏÎ¹Î³Î³"
argument_list|,
literal|"Î²Î±Ï"
argument_list|,
literal|"Î²Î±ÏÎº"
argument_list|,
literal|"Î²Î±Î¸ÏÎ³Î±Î»"
argument_list|,
literal|"Î²Î¹Î¿Î¼Î·Ï"
argument_list|,
literal|"Î²ÏÎ±ÏÏÎº"
argument_list|,
literal|"Î´Î¹Î±Ï"
argument_list|,
literal|"Î´Î¹Î±Ï"
argument_list|,
literal|"ÎµÎ½Î¿ÏÎ³"
argument_list|,
literal|"Î¸ÏÏ"
argument_list|,
literal|"ÎºÎ±ÏÎ½Î¿Î²Î¹Î¿Î¼Î·Ï"
argument_list|,
literal|"ÎºÎ±ÏÎ±Î³Î±Î»"
argument_list|,
literal|"ÎºÎ»Î¹Î²"
argument_list|,
literal|"ÎºÎ¿Î¹Î»Î±ÏÏ"
argument_list|,
literal|"Î»Î¹Î²"
argument_list|,
literal|"Î¼ÎµÎ³Î»Î¿Î²Î¹Î¿Î¼Î·Ï"
argument_list|,
literal|"Î¼Î¹ÎºÏÎ¿Î²Î¹Î¿Î¼Î·Ï"
argument_list|,
literal|"Î½ÏÎ±Î²"
argument_list|,
literal|"Î¾Î·ÏÎ¿ÎºÎ»Î¹Î²"
argument_list|,
literal|"Î¿Î»Î¹Î³Î¿Î´Î±Î¼"
argument_list|,
literal|"Î¿Î»Î¿Î³Î±Î»"
argument_list|,
literal|"ÏÎµÎ½ÏÎ±ÏÏ"
argument_list|,
literal|"ÏÎµÏÎ·Ï"
argument_list|,
literal|"ÏÎµÏÎ¹ÏÏ"
argument_list|,
literal|"ÏÎ»Î±Ï"
argument_list|,
literal|"ÏÎ¿Î»ÏÎ´Î±Ï"
argument_list|,
literal|"ÏÎ¿Î»ÏÎ¼Î·Ï"
argument_list|,
literal|"ÏÏÎµÏ"
argument_list|,
literal|"ÏÎ±Î²"
argument_list|,
literal|"ÏÎµÏ"
argument_list|,
literal|"ÏÏÎµÏÎ·Ï"
argument_list|,
literal|"ÏÏÎ¿ÎºÎ¿Ï"
argument_list|,
literal|"ÏÎ±Î¼Î·Î»Î¿Î´Î±Ï"
argument_list|,
literal|"ÏÎ·Î»Î¿ÏÎ±Î²"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|method|rule8
specifier|private
name|int
name|rule8
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|8
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹Î¿ÏÎ½ÏÎ±Î½Îµ"
argument_list|)
condition|)
block|{
name|len
operator|-=
literal|8
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|7
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹Î¿Î½ÏÎ±Î½Îµ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÎ½ÏÎ±Î½Îµ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·Î¸Î·ÎºÎ±Î½Îµ"
argument_list|)
condition|)
block|{
name|len
operator|-=
literal|7
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|6
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹Î¿ÏÎ±Î½Îµ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Î½ÏÎ±Î½Îµ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÏÎ±Î½Îµ"
argument_list|)
condition|)
block|{
name|len
operator|-=
literal|6
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|5
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±Î³Î±Î½Îµ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·ÏÎ±Î½Îµ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÎ±Î½Îµ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·ÎºÎ±Î½Îµ"
argument_list|)
condition|)
block|{
name|len
operator|-=
literal|5
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|removed
operator|&&
name|exc8a
operator|.
name|contains
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
condition|)
block|{
comment|// add -Î±Î³Î±Î½ (we removed> 4 chars so its safe)
name|len
operator|+=
literal|4
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|4
index|]
operator|=
literal|'Î±'
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|3
index|]
operator|=
literal|'Î³'
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|2
index|]
operator|=
literal|'Î±'
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|1
index|]
operator|=
literal|'Î½'
expr_stmt|;
block|}
if|if
condition|(
name|len
operator|>
literal|3
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±Î½Îµ"
argument_list|)
condition|)
block|{
name|len
operator|-=
literal|3
expr_stmt|;
if|if
condition|(
name|endsWithVowelNoY
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
operator|||
name|exc8b
operator|.
name|contains
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
condition|)
block|{
name|len
operator|+=
literal|2
expr_stmt|;
comment|// add back -Î±Î½
block|}
block|}
return|return
name|len
return|;
block|}
DECL|field|exc9
specifier|private
specifier|static
specifier|final
name|CharArraySet
name|exc9
init|=
operator|new
name|CharArraySet
argument_list|(
name|Version
operator|.
name|LUCENE_31
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Î±Î²Î±Ï"
argument_list|,
literal|"Î²ÎµÎ½"
argument_list|,
literal|"ÎµÎ½Î±Ï"
argument_list|,
literal|"Î±Î²Ï"
argument_list|,
literal|"Î±Î´"
argument_list|,
literal|"Î±Î¸"
argument_list|,
literal|"Î±Î½"
argument_list|,
literal|"Î±ÏÎ»"
argument_list|,
literal|"Î²Î±ÏÎ¿Î½"
argument_list|,
literal|"Î½ÏÏ"
argument_list|,
literal|"ÏÎº"
argument_list|,
literal|"ÎºÎ¿Ï"
argument_list|,
literal|"Î¼ÏÎ¿Ï"
argument_list|,
literal|"Î½Î¹Ï"
argument_list|,
literal|"ÏÎ±Î³"
argument_list|,
literal|"ÏÎ±ÏÎ±ÎºÎ±Î»"
argument_list|,
literal|"ÏÎµÏÏ"
argument_list|,
literal|"ÏÎºÎµÎ»"
argument_list|,
literal|"ÏÏÏÏ"
argument_list|,
literal|"ÏÎ¿Îº"
argument_list|,
literal|"Ï"
argument_list|,
literal|"Î´"
argument_list|,
literal|"ÎµÎ¼"
argument_list|,
literal|"Î¸Î±ÏÏ"
argument_list|,
literal|"Î¸"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|method|rule9
specifier|private
name|int
name|rule9
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|>
literal|5
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·ÏÎµÏÎµ"
argument_list|)
condition|)
name|len
operator|-=
literal|5
expr_stmt|;
if|if
condition|(
name|len
operator|>
literal|3
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎµÏÎµ"
argument_list|)
condition|)
block|{
name|len
operator|-=
literal|3
expr_stmt|;
if|if
condition|(
name|exc9
operator|.
name|contains
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
operator|||
name|endsWithVowelNoY
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Î´"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±Î¹Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ¿Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ±Î¸"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î´Î¹Î±Î¸"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎµÎ½Î´"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎµÏÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ¹Î¸"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏÎµÏÎ¸"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ±Î¸"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎµÎ½Î¸"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ¿Î¸"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ¸"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±Î¹Î½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏÎ½Î´"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏÎ½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏÎ½Î¸"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ¿Î½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î²Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎºÎ±Î¸"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎµÏÎ¸"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎµÎºÎ¸"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î½ÎµÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ¿Î½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±ÏÎº"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î²Î±Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î²Î¿Î»"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏÎµÎ»"
argument_list|)
condition|)
block|{
name|len
operator|+=
literal|2
expr_stmt|;
comment|// add back -ÎµÏ
block|}
block|}
return|return
name|len
return|;
block|}
DECL|method|rule10
specifier|private
name|int
name|rule10
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|>
literal|5
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Î½ÏÎ±Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ½ÏÎ±Ï"
argument_list|)
operator|)
condition|)
block|{
name|len
operator|-=
literal|5
expr_stmt|;
if|if
condition|(
name|len
operator|==
literal|3
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±ÏÏ"
argument_list|)
condition|)
block|{
name|len
operator|+=
literal|3
expr_stmt|;
comment|// add back *Î½Ï
name|s
index|[
name|len
operator|-
literal|3
index|]
operator|=
literal|'Î¿'
expr_stmt|;
block|}
if|if
condition|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎºÏÎµ"
argument_list|)
condition|)
block|{
name|len
operator|+=
literal|3
expr_stmt|;
comment|// add back *Î½Ï
name|s
index|[
name|len
operator|-
literal|3
index|]
operator|=
literal|'Ï'
expr_stmt|;
block|}
block|}
return|return
name|len
return|;
block|}
DECL|method|rule11
specifier|private
name|int
name|rule11
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|>
literal|6
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Î¼Î±ÏÏÎµ"
argument_list|)
condition|)
block|{
name|len
operator|-=
literal|6
expr_stmt|;
if|if
condition|(
name|len
operator|==
literal|2
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Î½"
argument_list|)
condition|)
block|{
name|len
operator|+=
literal|5
expr_stmt|;
comment|// add back -Î¿Î¼Î±ÏÏ
block|}
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|7
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹Î¿Î¼Î±ÏÏÎµ"
argument_list|)
condition|)
block|{
name|len
operator|-=
literal|7
expr_stmt|;
if|if
condition|(
name|len
operator|==
literal|2
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Î½"
argument_list|)
condition|)
block|{
name|len
operator|+=
literal|5
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|5
index|]
operator|=
literal|'Î¿'
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|4
index|]
operator|=
literal|'Î¼'
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|3
index|]
operator|=
literal|'Î±'
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|2
index|]
operator|=
literal|'Ï'
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|1
index|]
operator|=
literal|'Ï'
expr_stmt|;
block|}
block|}
return|return
name|len
return|;
block|}
DECL|field|exc12a
specifier|private
specifier|static
specifier|final
name|CharArraySet
name|exc12a
init|=
operator|new
name|CharArraySet
argument_list|(
name|Version
operator|.
name|LUCENE_31
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Ï"
argument_list|,
literal|"Î±Ï"
argument_list|,
literal|"ÏÏÎ¼Ï"
argument_list|,
literal|"Î±ÏÏÎ¼Ï"
argument_list|,
literal|"Î±ÎºÎ±ÏÎ±Ï"
argument_list|,
literal|"Î±Î¼ÎµÏÎ±Î¼Ï"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|exc12b
specifier|private
specifier|static
specifier|final
name|CharArraySet
name|exc12b
init|=
operator|new
name|CharArraySet
argument_list|(
name|Version
operator|.
name|LUCENE_31
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Î±Î»"
argument_list|,
literal|"Î±Ï"
argument_list|,
literal|"ÎµÎºÏÎµÎ»"
argument_list|,
literal|"Î¶"
argument_list|,
literal|"Î¼"
argument_list|,
literal|"Î¾"
argument_list|,
literal|"ÏÎ±ÏÎ±ÎºÎ±Î»"
argument_list|,
literal|"Î±Ï"
argument_list|,
literal|"ÏÏÎ¿"
argument_list|,
literal|"Î½Î¹Ï"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|method|rule12
specifier|private
name|int
name|rule12
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|>
literal|5
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹ÎµÏÏÎµ"
argument_list|)
condition|)
block|{
name|len
operator|-=
literal|5
expr_stmt|;
if|if
condition|(
name|exc12a
operator|.
name|contains
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
condition|)
name|len
operator|+=
literal|4
expr_stmt|;
comment|// add back -Î¹ÎµÏÏ
block|}
if|if
condition|(
name|len
operator|>
literal|4
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎµÏÏÎµ"
argument_list|)
condition|)
block|{
name|len
operator|-=
literal|4
expr_stmt|;
if|if
condition|(
name|exc12b
operator|.
name|contains
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
condition|)
name|len
operator|+=
literal|3
expr_stmt|;
comment|// add back -ÎµÏÏ
block|}
return|return
name|len
return|;
block|}
DECL|field|exc13
specifier|private
specifier|static
specifier|final
name|CharArraySet
name|exc13
init|=
operator|new
name|CharArraySet
argument_list|(
name|Version
operator|.
name|LUCENE_31
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Î´Î¹Î±Î¸"
argument_list|,
literal|"Î¸"
argument_list|,
literal|"ÏÎ±ÏÎ±ÎºÎ±ÏÎ±Î¸"
argument_list|,
literal|"ÏÏÎ¿ÏÎ¸"
argument_list|,
literal|"ÏÏÎ½Î¸"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|method|rule13
specifier|private
name|int
name|rule13
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|>
literal|6
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·Î¸Î·ÎºÎµÏ"
argument_list|)
condition|)
block|{
name|len
operator|-=
literal|6
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|5
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·Î¸Î·ÎºÎ±"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·Î¸Î·ÎºÎµ"
argument_list|)
operator|)
condition|)
block|{
name|len
operator|-=
literal|5
expr_stmt|;
block|}
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|4
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·ÎºÎµÏ"
argument_list|)
condition|)
block|{
name|len
operator|-=
literal|4
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|3
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·ÎºÎ±"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·ÎºÎµ"
argument_list|)
operator|)
condition|)
block|{
name|len
operator|-=
literal|3
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|removed
operator|&&
operator|(
name|exc13
operator|.
name|contains
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎºÏÎ»"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎºÎ¿ÏÎ»"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î½Î±ÏÎ¸"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Î¸"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ¹Î¸"
argument_list|)
operator|)
condition|)
block|{
name|len
operator|+=
literal|2
expr_stmt|;
comment|// add back the -Î·Îº
block|}
return|return
name|len
return|;
block|}
DECL|field|exc14
specifier|private
specifier|static
specifier|final
name|CharArraySet
name|exc14
init|=
operator|new
name|CharArraySet
argument_list|(
name|Version
operator|.
name|LUCENE_31
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ÏÎ±ÏÎ¼Î±Îº"
argument_list|,
literal|"ÏÎ±Î´"
argument_list|,
literal|"Î±Î³Îº"
argument_list|,
literal|"Î±Î½Î±ÏÏ"
argument_list|,
literal|"Î²ÏÎ¿Î¼"
argument_list|,
literal|"ÎµÎºÎ»Î¹Ï"
argument_list|,
literal|"Î»Î±Î¼ÏÎ¹Î´"
argument_list|,
literal|"Î»ÎµÏ"
argument_list|,
literal|"Î¼"
argument_list|,
literal|"ÏÎ±Ï"
argument_list|,
literal|"Ï"
argument_list|,
literal|"Î»"
argument_list|,
literal|"Î¼ÎµÎ´"
argument_list|,
literal|"Î¼ÎµÏÎ±Î¶"
argument_list|,
literal|"ÏÏÎ¿ÏÎµÎ¹Î½"
argument_list|,
literal|"Î±Î¼"
argument_list|,
literal|"Î±Î¹Î¸"
argument_list|,
literal|"Î±Î½Î·Îº"
argument_list|,
literal|"Î´ÎµÏÏÎ¿Î¶"
argument_list|,
literal|"ÎµÎ½Î´Î¹Î±ÏÎµÏ"
argument_list|,
literal|"Î´Îµ"
argument_list|,
literal|"Î´ÎµÏÏÎµÏÎµÏ"
argument_list|,
literal|"ÎºÎ±Î¸Î±ÏÎµÏ"
argument_list|,
literal|"ÏÎ»Îµ"
argument_list|,
literal|"ÏÏÎ±"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|method|rule14
specifier|private
name|int
name|rule14
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|5
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÏÎµÏ"
argument_list|)
condition|)
block|{
name|len
operator|-=
literal|5
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|4
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÏÎ±"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÏÎµ"
argument_list|)
operator|)
condition|)
block|{
name|len
operator|-=
literal|4
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|removed
operator|&&
operator|(
name|exc14
operator|.
name|contains
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
operator|||
name|endsWithVowel
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ¿Î´Î±Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î²Î»ÎµÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ±Î½ÏÎ±Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏÏÎ´"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¼Î±Î½ÏÎ¹Î»"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¼Î±Î»Î»"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎºÏÎ¼Î±Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î»Î±Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î»Î·Î³"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ±Î³"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Î¼"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏÏÏ"
argument_list|)
operator|)
condition|)
block|{
name|len
operator|+=
literal|3
expr_stmt|;
comment|// add back -Î¿ÏÏ
block|}
return|return
name|len
return|;
block|}
DECL|field|exc15a
specifier|private
specifier|static
specifier|final
name|CharArraySet
name|exc15a
init|=
operator|new
name|CharArraySet
argument_list|(
name|Version
operator|.
name|LUCENE_31
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Î±Î²Î±ÏÏ"
argument_list|,
literal|"ÏÎ¿Î»ÏÏ"
argument_list|,
literal|"Î±Î´Î·Ï"
argument_list|,
literal|"ÏÎ±Î¼Ï"
argument_list|,
literal|"Ï"
argument_list|,
literal|"Î±ÏÏ"
argument_list|,
literal|"Î±Ï"
argument_list|,
literal|"Î±Î¼Î±Î»"
argument_list|,
literal|"Î±Î¼Î±Î»Î»Î¹"
argument_list|,
literal|"Î±Î½ÏÏÏ"
argument_list|,
literal|"Î±ÏÎµÏ"
argument_list|,
literal|"Î±ÏÏÎ±Ï"
argument_list|,
literal|"Î±ÏÎ±Ï"
argument_list|,
literal|"Î´ÎµÏÎ²ÎµÎ½"
argument_list|,
literal|"Î´ÏÎ¿ÏÎ¿Ï"
argument_list|,
literal|"Î¾ÎµÏ"
argument_list|,
literal|"Î½ÎµÎ¿Ï"
argument_list|,
literal|"Î½Î¿Î¼Î¿Ï"
argument_list|,
literal|"Î¿Î»Î¿Ï"
argument_list|,
literal|"Î¿Î¼Î¿Ï"
argument_list|,
literal|"ÏÏÎ¿ÏÏ"
argument_list|,
literal|"ÏÏÎ¿ÏÏÏÎ¿Ï"
argument_list|,
literal|"ÏÏÎ¼Ï"
argument_list|,
literal|"ÏÏÎ½Ï"
argument_list|,
literal|"Ï"
argument_list|,
literal|"ÏÏÎ¿Ï"
argument_list|,
literal|"ÏÎ±Ï"
argument_list|,
literal|"Î±ÎµÎ¹Ï"
argument_list|,
literal|"Î±Î¹Î¼Î¿ÏÏ"
argument_list|,
literal|"Î±Î½ÏÏ"
argument_list|,
literal|"Î±ÏÎ¿Ï"
argument_list|,
literal|"Î±ÏÏÎ¹Ï"
argument_list|,
literal|"Î´Î¹Î±Ï"
argument_list|,
literal|"ÎµÎ½"
argument_list|,
literal|"ÎµÏÎ¹Ï"
argument_list|,
literal|"ÎºÏÎ¿ÎºÎ±Î»Î¿Ï"
argument_list|,
literal|"ÏÎ¹Î´Î·ÏÎ¿Ï"
argument_list|,
literal|"Î»"
argument_list|,
literal|"Î½Î±Ï"
argument_list|,
literal|"Î¿ÏÎ»Î±Î¼"
argument_list|,
literal|"Î¿ÏÏ"
argument_list|,
literal|"Ï"
argument_list|,
literal|"ÏÏ"
argument_list|,
literal|"Î¼"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|exc15b
specifier|private
specifier|static
specifier|final
name|CharArraySet
name|exc15b
init|=
operator|new
name|CharArraySet
argument_list|(
name|Version
operator|.
name|LUCENE_31
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ÏÎ¿Ï"
argument_list|,
literal|"Î½Î±ÏÎ»Î¿Ï"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|method|rule15
specifier|private
name|int
name|rule15
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|4
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±Î³ÎµÏ"
argument_list|)
condition|)
block|{
name|len
operator|-=
literal|4
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|3
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±Î³Î±"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±Î³Îµ"
argument_list|)
operator|)
condition|)
block|{
name|len
operator|-=
literal|3
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|removed
condition|)
block|{
specifier|final
name|boolean
name|cond1
init|=
name|exc15a
operator|.
name|contains
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎµÎ»"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ¿ÏÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î»Î»"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î»Î¿Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ¼Î·Î½"
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|cond2
init|=
name|exc15b
operator|.
name|contains
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎºÎ¿Î»Î»"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cond1
operator|&&
operator|!
name|cond2
condition|)
name|len
operator|+=
literal|2
expr_stmt|;
comment|// add back -Î±Î³
block|}
return|return
name|len
return|;
block|}
DECL|field|exc16
specifier|private
specifier|static
specifier|final
name|CharArraySet
name|exc16
init|=
operator|new
name|CharArraySet
argument_list|(
name|Version
operator|.
name|LUCENE_31
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Î½"
argument_list|,
literal|"ÏÎµÏÏÎ¿Î½"
argument_list|,
literal|"Î´ÏÎ´ÎµÎºÎ±Î½"
argument_list|,
literal|"ÎµÏÎ·Î¼Î¿Î½"
argument_list|,
literal|"Î¼ÎµÎ³Î±Î»Î¿Î½"
argument_list|,
literal|"ÎµÏÏÎ±Î½"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|method|rule16
specifier|private
name|int
name|rule16
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|4
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·ÏÎ¿Ï"
argument_list|)
condition|)
block|{
name|len
operator|-=
literal|4
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|3
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·ÏÎµ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·ÏÎ±"
argument_list|)
operator|)
condition|)
block|{
name|len
operator|-=
literal|3
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|removed
operator|&&
name|exc16
operator|.
name|contains
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
condition|)
name|len
operator|+=
literal|2
expr_stmt|;
comment|// add back -Î·Ï
return|return
name|len
return|;
block|}
DECL|field|exc17
specifier|private
specifier|static
specifier|final
name|CharArraySet
name|exc17
init|=
operator|new
name|CharArraySet
argument_list|(
name|Version
operator|.
name|LUCENE_31
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Î±ÏÎ²"
argument_list|,
literal|"ÏÎ²"
argument_list|,
literal|"Î±ÏÏ"
argument_list|,
literal|"ÏÏ"
argument_list|,
literal|"Î±ÏÎ»"
argument_list|,
literal|"Î±ÎµÎ¹Î¼Î½"
argument_list|,
literal|"Î´ÏÏÏÏ"
argument_list|,
literal|"ÎµÏÏÏ"
argument_list|,
literal|"ÎºÎ¿Î¹Î½Î¿ÏÏ"
argument_list|,
literal|"ÏÎ±Î»Î¹Î¼Ï"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|method|rule17
specifier|private
name|int
name|rule17
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|>
literal|4
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·ÏÏÎµ"
argument_list|)
condition|)
block|{
name|len
operator|-=
literal|4
expr_stmt|;
if|if
condition|(
name|exc17
operator|.
name|contains
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
condition|)
name|len
operator|+=
literal|3
expr_stmt|;
comment|// add back the -Î·ÏÏ
block|}
return|return
name|len
return|;
block|}
DECL|field|exc18
specifier|private
specifier|static
specifier|final
name|CharArraySet
name|exc18
init|=
operator|new
name|CharArraySet
argument_list|(
name|Version
operator|.
name|LUCENE_31
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Î½"
argument_list|,
literal|"Ï"
argument_list|,
literal|"ÏÏÎ¹"
argument_list|,
literal|"ÏÏÏÎ±Î²Î¿Î¼Î¿ÏÏÏ"
argument_list|,
literal|"ÎºÎ±ÎºÎ¿Î¼Î¿ÏÏÏ"
argument_list|,
literal|"ÎµÎ¾ÏÎ½"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|method|rule18
specifier|private
name|int
name|rule18
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|6
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·ÏÎ¿ÏÎ½Îµ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·Î¸Î¿ÏÎ½Îµ"
argument_list|)
operator|)
condition|)
block|{
name|len
operator|-=
literal|6
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|4
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÎ½Îµ"
argument_list|)
condition|)
block|{
name|len
operator|-=
literal|4
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|removed
operator|&&
name|exc18
operator|.
name|contains
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
condition|)
block|{
name|len
operator|+=
literal|3
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|3
index|]
operator|=
literal|'Î¿'
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|2
index|]
operator|=
literal|'Ï'
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|1
index|]
operator|=
literal|'Î½'
expr_stmt|;
block|}
return|return
name|len
return|;
block|}
DECL|field|exc19
specifier|private
specifier|static
specifier|final
name|CharArraySet
name|exc19
init|=
operator|new
name|CharArraySet
argument_list|(
name|Version
operator|.
name|LUCENE_31
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ÏÎ±ÏÎ±ÏÎ¿ÏÏ"
argument_list|,
literal|"Ï"
argument_list|,
literal|"Ï"
argument_list|,
literal|"ÏÏÎ¹Î¿ÏÎ»"
argument_list|,
literal|"Î±Î¶"
argument_list|,
literal|"Î±Î»Î»Î¿ÏÎ¿ÏÏ"
argument_list|,
literal|"Î±ÏÎ¿ÏÏ"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|method|rule19
specifier|private
name|int
name|rule19
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|6
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·ÏÎ¿ÏÎ¼Îµ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·Î¸Î¿ÏÎ¼Îµ"
argument_list|)
operator|)
condition|)
block|{
name|len
operator|-=
literal|6
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|4
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÎ¼Îµ"
argument_list|)
condition|)
block|{
name|len
operator|-=
literal|4
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|removed
operator|&&
name|exc19
operator|.
name|contains
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
condition|)
block|{
name|len
operator|+=
literal|3
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|3
index|]
operator|=
literal|'Î¿'
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|2
index|]
operator|=
literal|'Ï'
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|1
index|]
operator|=
literal|'Î¼'
expr_stmt|;
block|}
return|return
name|len
return|;
block|}
DECL|method|rule20
specifier|private
name|int
name|rule20
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|>
literal|5
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¼Î±ÏÏÎ½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¼Î±ÏÎ¿Ï"
argument_list|)
operator|)
condition|)
name|len
operator|-=
literal|3
expr_stmt|;
elseif|else
if|if
condition|(
name|len
operator|>
literal|4
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¼Î±ÏÎ±"
argument_list|)
condition|)
name|len
operator|-=
literal|2
expr_stmt|;
return|return
name|len
return|;
block|}
DECL|method|rule21
specifier|private
name|int
name|rule21
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|>
literal|9
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹Î¿Î½ÏÎ¿ÏÏÎ±Î½"
argument_list|)
condition|)
return|return
name|len
operator|-
literal|9
return|;
if|if
condition|(
name|len
operator|>
literal|8
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹Î¿Î¼Î±ÏÏÎ±Î½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹Î¿ÏÎ±ÏÏÎ±Î½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹Î¿ÏÎ¼Î±ÏÏÎµ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Î½ÏÎ¿ÏÏÎ±Î½"
argument_list|)
operator|)
condition|)
return|return
name|len
operator|-
literal|8
return|;
if|if
condition|(
name|len
operator|>
literal|7
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹ÎµÎ¼Î±ÏÏÎµ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹ÎµÏÎ±ÏÏÎµ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹Î¿Î¼Î¿ÏÎ½Î±"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹Î¿ÏÎ±ÏÏÎµ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹Î¿ÏÎ¿ÏÎ½Î±"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹Î¿ÏÎ½ÏÎ±Î¹"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹Î¿ÏÎ½ÏÎ±Î½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·Î¸Î·ÎºÎ±ÏÎµ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Î¼Î±ÏÏÎ±Î½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÎ±ÏÏÎ±Î½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÎ¼Î±ÏÏÎµ"
argument_list|)
operator|)
condition|)
return|return
name|len
operator|-
literal|7
return|;
if|if
condition|(
name|len
operator|>
literal|6
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹Î¿Î¼Î¿ÏÎ½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹Î¿Î½ÏÎ±Î½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹Î¿ÏÎ¿ÏÎ½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·Î¸ÎµÎ¹ÏÎµ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·Î¸Î·ÎºÎ±Î½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Î¼Î¿ÏÎ½Î±"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÎ±ÏÏÎµ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÎ¿ÏÎ½Î±"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÎ½ÏÎ±Î¹"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÎ½ÏÎ±Î½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÏÎ±ÏÎµ"
argument_list|)
operator|)
condition|)
return|return
name|len
operator|-
literal|6
return|;
if|if
condition|(
name|len
operator|>
literal|5
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±Î³Î±ÏÎµ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹ÎµÎ¼Î±Î¹"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹ÎµÏÎ±Î¹"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹ÎµÏÎ±Î¹"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹Î¿ÏÎ±Î½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¹Î¿ÏÎ¼Î±"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·Î¸ÎµÎ¹Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·Î¸Î¿ÏÎ½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·ÎºÎ±ÏÎµ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·ÏÎ±ÏÎµ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·ÏÎ¿ÏÎ½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Î¼Î¿ÏÎ½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Î½ÏÎ±Î¹"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Î½ÏÎ±Î½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÎ¿ÏÎ½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÎ¼Î±Î¹"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÏÎ±Î½"
argument_list|)
operator|)
condition|)
return|return
name|len
operator|-
literal|5
return|;
if|if
condition|(
name|len
operator|>
literal|4
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±Î³Î±Î½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±Î¼Î±Î¹"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±ÏÎ±Î¹"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±ÏÎ±Î¹"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎµÎ¹ÏÎµ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎµÏÎ±Î¹"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎµÏÎ±Î¹"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·Î´ÎµÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·Î´ÏÎ½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·Î¸ÎµÎ¹"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·ÎºÎ±Î½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·ÏÎ±Î½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·ÏÎµÎ¹"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·ÏÎµÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Î¼Î±Î¹"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÎ±Î½"
argument_list|)
operator|)
condition|)
return|return
name|len
operator|-
literal|4
return|;
if|if
condition|(
name|len
operator|>
literal|3
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±ÎµÎ¹"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎµÎ¹Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·Î¸Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·ÏÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÎ½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÏ"
argument_list|)
operator|)
condition|)
return|return
name|len
operator|-
literal|3
return|;
if|if
condition|(
name|len
operator|>
literal|2
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±Î½"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î±Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎµÎ¹"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎµÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î·Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Î¹"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÎ½"
argument_list|)
operator|)
condition|)
return|return
name|len
operator|-
literal|2
return|;
if|if
condition|(
name|len
operator|>
literal|1
operator|&&
name|endsWithVowel
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
condition|)
return|return
name|len
operator|-
literal|1
return|;
return|return
name|len
return|;
block|}
DECL|method|rule22
specifier|private
name|int
name|rule22
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎµÏÏÎµÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÎµÏÏÎ±Ï"
argument_list|)
condition|)
return|return
name|len
operator|-
literal|5
return|;
if|if
condition|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÎµÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Î¿ÏÎ±Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏÎµÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏÎ±Ï"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏÎµÏ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÏÏÎ±Ï"
argument_list|)
condition|)
return|return
name|len
operator|-
literal|4
return|;
return|return
name|len
return|;
block|}
DECL|method|endsWith
specifier|private
name|boolean
name|endsWith
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
specifier|final
name|int
name|suffixLen
init|=
name|suffix
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|suffixLen
operator|>
name|len
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
name|suffixLen
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
if|if
condition|(
name|s
index|[
name|len
operator|-
operator|(
name|suffixLen
operator|-
name|i
operator|)
index|]
operator|!=
name|suffix
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
DECL|method|endsWithVowel
specifier|private
name|boolean
name|endsWithVowel
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|==
literal|0
condition|)
return|return
literal|false
return|;
switch|switch
condition|(
name|s
index|[
name|len
operator|-
literal|1
index|]
condition|)
block|{
case|case
literal|'Î±'
case|:
case|case
literal|'Îµ'
case|:
case|case
literal|'Î·'
case|:
case|case
literal|'Î¹'
case|:
case|case
literal|'Î¿'
case|:
case|case
literal|'Ï'
case|:
case|case
literal|'Ï'
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
DECL|method|endsWithVowelNoY
specifier|private
name|boolean
name|endsWithVowelNoY
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|==
literal|0
condition|)
return|return
literal|false
return|;
switch|switch
condition|(
name|s
index|[
name|len
operator|-
literal|1
index|]
condition|)
block|{
case|case
literal|'Î±'
case|:
case|case
literal|'Îµ'
case|:
case|case
literal|'Î·'
case|:
case|case
literal|'Î¹'
case|:
case|case
literal|'Î¿'
case|:
case|case
literal|'Ï'
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
block|}
end_class
end_unit
