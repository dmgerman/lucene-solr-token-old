begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|BreakIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_comment
comment|/**  * Breaks text into sentences with a {@link BreakIterator} and  * allows subclasses to decompose these sentences into words.  *<p>  * This can be used by subclasses that need sentence context   * for tokenization purposes, such as CJK segmenters.  *<p>  * Additionally it can be used by subclasses that want to mark  * sentence boundaries (with a custom attribute, extra token, position  * increment, etc) for downstream processing.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|SegmentingTokenizerBase
specifier|public
specifier|abstract
class|class
name|SegmentingTokenizerBase
extends|extends
name|Tokenizer
block|{
DECL|field|BUFFERMAX
specifier|protected
specifier|static
specifier|final
name|int
name|BUFFERMAX
init|=
literal|4096
decl_stmt|;
DECL|field|buffer
specifier|protected
specifier|final
name|char
name|buffer
index|[]
init|=
operator|new
name|char
index|[
name|BUFFERMAX
index|]
decl_stmt|;
comment|/** true length of text in the buffer */
DECL|field|length
specifier|private
name|int
name|length
init|=
literal|0
decl_stmt|;
comment|/** length in buffer that can be evaluated safely, up to a safe end point */
DECL|field|usableLength
specifier|private
name|int
name|usableLength
init|=
literal|0
decl_stmt|;
comment|/** accumulated offset of previous buffers for this reader, for offsetAtt */
DECL|field|offset
specifier|protected
name|int
name|offset
init|=
literal|0
decl_stmt|;
DECL|field|iterator
specifier|private
specifier|final
name|BreakIterator
name|iterator
decl_stmt|;
DECL|field|wrapper
specifier|private
specifier|final
name|CharArrayIterator
name|wrapper
init|=
name|CharArrayIterator
operator|.
name|newSentenceInstance
argument_list|()
decl_stmt|;
DECL|field|offsetAtt
specifier|private
specifier|final
name|OffsetAttribute
name|offsetAtt
init|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Construct a new SegmenterBase from the given Reader, using    * the provided BreakIterator for sentence segmentation.    *<p>    * Note that you should never share BreakIterators across different    * TokenStreams, instead a newly created or cloned one should always    * be provided to this constructor.    */
DECL|method|SegmentingTokenizerBase
specifier|public
name|SegmentingTokenizerBase
parameter_list|(
name|Reader
name|input
parameter_list|,
name|BreakIterator
name|iterator
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|iterator
operator|=
name|iterator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
specifier|final
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|length
operator|==
literal|0
operator|||
operator|!
name|incrementWord
argument_list|()
condition|)
block|{
while|while
condition|(
operator|!
name|incrementSentence
argument_list|()
condition|)
block|{
name|refill
argument_list|()
expr_stmt|;
if|if
condition|(
name|length
operator|<=
literal|0
condition|)
comment|// no more bytes to read;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|wrapper
operator|.
name|setText
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|setText
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
name|length
operator|=
name|usableLength
operator|=
name|offset
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|Reader
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|end
specifier|public
specifier|final
name|void
name|end
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|finalOffset
init|=
name|correctOffset
argument_list|(
name|length
operator|<
literal|0
condition|?
name|offset
else|:
name|offset
operator|+
name|length
argument_list|)
decl_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|finalOffset
argument_list|,
name|finalOffset
argument_list|)
expr_stmt|;
block|}
comment|/** Returns the last unambiguous break position in the text. */
DECL|method|findSafeEnd
specifier|private
name|int
name|findSafeEnd
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
if|if
condition|(
name|isSafeEnd
argument_list|(
name|buffer
index|[
name|i
index|]
argument_list|)
condition|)
return|return
name|i
operator|+
literal|1
return|;
return|return
operator|-
literal|1
return|;
block|}
comment|/** For sentence tokenization, these are the unambiguous break positions. */
DECL|method|isSafeEnd
specifier|protected
name|boolean
name|isSafeEnd
parameter_list|(
name|char
name|ch
parameter_list|)
block|{
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|0x000D
case|:
case|case
literal|0x000A
case|:
case|case
literal|0x0085
case|:
case|case
literal|0x2028
case|:
case|case
literal|0x2029
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Refill the buffer, accumulating the offset and setting usableLength to the    * last unambiguous break position    */
DECL|method|refill
specifier|private
name|void
name|refill
parameter_list|()
throws|throws
name|IOException
block|{
name|offset
operator|+=
name|usableLength
expr_stmt|;
name|int
name|leftover
init|=
name|length
operator|-
name|usableLength
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|usableLength
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|leftover
argument_list|)
expr_stmt|;
name|int
name|requested
init|=
name|buffer
operator|.
name|length
operator|-
name|leftover
decl_stmt|;
name|int
name|returned
init|=
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|leftover
argument_list|,
name|requested
argument_list|)
decl_stmt|;
name|length
operator|=
name|returned
operator|<
literal|0
condition|?
name|leftover
else|:
name|returned
operator|+
name|leftover
expr_stmt|;
if|if
condition|(
name|returned
operator|<
name|requested
condition|)
comment|/* reader has been emptied, process the rest */
name|usableLength
operator|=
name|length
expr_stmt|;
else|else
block|{
comment|/* still more data to be read, find a safe-stopping place */
name|usableLength
operator|=
name|findSafeEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|usableLength
operator|<
literal|0
condition|)
name|usableLength
operator|=
name|length
expr_stmt|;
comment|/*                                 * more than IOBUFFER of text without breaks,                                 * gonna possibly truncate tokens                                 */
block|}
name|wrapper
operator|.
name|setText
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|usableLength
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|setText
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
comment|/**    * return true if there is a token from the buffer, or null if it is    * exhausted.    */
DECL|method|incrementSentence
specifier|private
name|boolean
name|incrementSentence
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|length
operator|==
literal|0
condition|)
comment|// we must refill the buffer
return|return
literal|false
return|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|start
init|=
name|iterator
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|==
name|BreakIterator
operator|.
name|DONE
condition|)
return|return
literal|false
return|;
comment|// BreakIterator exhausted
comment|// find the next set of boundaries
name|int
name|end
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|end
operator|==
name|BreakIterator
operator|.
name|DONE
condition|)
return|return
literal|false
return|;
comment|// BreakIterator exhausted
name|setNextSentence
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
if|if
condition|(
name|incrementWord
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
comment|/** Provides the next input sentence for analysis */
DECL|method|setNextSentence
specifier|protected
specifier|abstract
name|void
name|setNextSentence
parameter_list|(
name|int
name|sentenceStart
parameter_list|,
name|int
name|sentenceEnd
parameter_list|)
function_decl|;
comment|/** Returns true if another word is available */
DECL|method|incrementWord
specifier|protected
specifier|abstract
name|boolean
name|incrementWord
parameter_list|()
function_decl|;
block|}
end_class
end_unit
