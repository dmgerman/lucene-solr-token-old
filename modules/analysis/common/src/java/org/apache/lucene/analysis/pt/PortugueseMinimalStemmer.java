begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.pt
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|pt
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|CharArraySet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Minimal Stemmer for Portuguese  *<p>  * This follows the "RSLP-S" algorithm presented in:  *<i>A study on the Use of Stemming for Monolingual Ad-Hoc Portuguese  * Information Retrieval</i> (Orengo, et al)  * which is just the plural reduction step of the RSLP  * algorithm from<i>A Stemming Algorithmm for the Portuguese Language</i>,  * Orengo et al.  */
end_comment
begin_class
DECL|class|PortugueseMinimalStemmer
specifier|public
class|class
name|PortugueseMinimalStemmer
block|{
DECL|field|excIS
specifier|private
specifier|static
specifier|final
name|CharArraySet
name|excIS
init|=
operator|new
name|CharArraySet
argument_list|(
name|Version
operator|.
name|LUCENE_31
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"lÃ¡pis"
argument_list|,
literal|"cais"
argument_list|,
literal|"mais"
argument_list|,
literal|"crÃºcis"
argument_list|,
literal|"biquÃ­nis"
argument_list|,
literal|"pois"
argument_list|,
literal|"depois"
argument_list|,
literal|"dois"
argument_list|,
literal|"leis"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|excS
specifier|private
specifier|static
specifier|final
name|CharArraySet
name|excS
init|=
operator|new
name|CharArraySet
argument_list|(
name|Version
operator|.
name|LUCENE_31
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"aliÃ¡s"
argument_list|,
literal|"pires"
argument_list|,
literal|"lÃ¡pis"
argument_list|,
literal|"cais"
argument_list|,
literal|"mais"
argument_list|,
literal|"mas"
argument_list|,
literal|"menos"
argument_list|,
literal|"fÃ©rias"
argument_list|,
literal|"fezes"
argument_list|,
literal|"pÃªsames"
argument_list|,
literal|"crÃºcis"
argument_list|,
literal|"gÃ¡s"
argument_list|,
literal|"atrÃ¡s"
argument_list|,
literal|"moisÃ©s"
argument_list|,
literal|"atravÃ©s"
argument_list|,
literal|"convÃ©s"
argument_list|,
literal|"Ãªs"
argument_list|,
literal|"paÃ­s"
argument_list|,
literal|"apÃ³s"
argument_list|,
literal|"ambas"
argument_list|,
literal|"ambos"
argument_list|,
literal|"messias"
argument_list|,
literal|"depois"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|method|stem
specifier|public
name|int
name|stem
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|<
literal|3
operator|||
name|s
index|[
name|len
operator|-
literal|1
index|]
operator|!=
literal|'s'
condition|)
return|return
name|len
return|;
if|if
condition|(
name|s
index|[
name|len
operator|-
literal|2
index|]
operator|==
literal|'n'
condition|)
block|{
name|len
operator|--
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|1
index|]
operator|=
literal|'m'
expr_stmt|;
return|return
name|len
return|;
block|}
if|if
condition|(
name|len
operator|>=
literal|6
operator|&&
name|s
index|[
name|len
operator|-
literal|3
index|]
operator|==
literal|'Ãµ'
operator|&&
name|s
index|[
name|len
operator|-
literal|2
index|]
operator|==
literal|'e'
condition|)
block|{
name|len
operator|--
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|2
index|]
operator|=
literal|'Ã£'
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|1
index|]
operator|=
literal|'o'
expr_stmt|;
return|return
name|len
return|;
block|}
if|if
condition|(
name|len
operator|>=
literal|4
operator|&&
name|s
index|[
name|len
operator|-
literal|3
index|]
operator|==
literal|'Ã£'
operator|&&
name|s
index|[
name|len
operator|-
literal|2
index|]
operator|==
literal|'e'
condition|)
if|if
condition|(
operator|!
operator|(
name|len
operator|==
literal|4
operator|&&
name|s
index|[
literal|0
index|]
operator|==
literal|'m'
operator|)
condition|)
block|{
name|len
operator|--
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|1
index|]
operator|=
literal|'o'
expr_stmt|;
return|return
name|len
return|;
block|}
if|if
condition|(
name|len
operator|>=
literal|4
operator|&&
name|s
index|[
name|len
operator|-
literal|2
index|]
operator|==
literal|'i'
condition|)
block|{
if|if
condition|(
name|s
index|[
name|len
operator|-
literal|3
index|]
operator|==
literal|'a'
condition|)
if|if
condition|(
operator|!
operator|(
name|len
operator|==
literal|4
operator|&&
operator|(
name|s
index|[
literal|0
index|]
operator|==
literal|'c'
operator|||
name|s
index|[
literal|0
index|]
operator|==
literal|'m'
operator|)
operator|)
condition|)
block|{
name|len
operator|--
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|1
index|]
operator|=
literal|'l'
expr_stmt|;
return|return
name|len
return|;
block|}
if|if
condition|(
name|len
operator|>=
literal|5
operator|&&
name|s
index|[
name|len
operator|-
literal|3
index|]
operator|==
literal|'Ã©'
condition|)
block|{
name|len
operator|--
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|2
index|]
operator|=
literal|'e'
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|1
index|]
operator|=
literal|'l'
expr_stmt|;
return|return
name|len
return|;
block|}
if|if
condition|(
name|len
operator|>=
literal|5
operator|&&
name|s
index|[
name|len
operator|-
literal|3
index|]
operator|==
literal|'e'
condition|)
block|{
name|len
operator|--
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|1
index|]
operator|=
literal|'l'
expr_stmt|;
return|return
name|len
return|;
block|}
if|if
condition|(
name|len
operator|>=
literal|5
operator|&&
name|s
index|[
name|len
operator|-
literal|3
index|]
operator|==
literal|'Ã³'
condition|)
block|{
name|len
operator|--
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|2
index|]
operator|=
literal|'o'
expr_stmt|;
name|s
index|[
name|len
operator|-
literal|1
index|]
operator|=
literal|'l'
expr_stmt|;
return|return
name|len
return|;
block|}
if|if
condition|(
operator|!
name|excIS
operator|.
name|contains
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
condition|)
block|{
name|s
index|[
name|len
operator|-
literal|1
index|]
operator|=
literal|'l'
expr_stmt|;
return|return
name|len
return|;
block|}
block|}
if|if
condition|(
name|len
operator|>=
literal|6
operator|&&
name|s
index|[
name|len
operator|-
literal|3
index|]
operator|==
literal|'l'
operator|&&
name|s
index|[
name|len
operator|-
literal|2
index|]
operator|==
literal|'e'
condition|)
return|return
name|len
operator|-
literal|2
return|;
if|if
condition|(
name|len
operator|>=
literal|6
operator|&&
name|s
index|[
name|len
operator|-
literal|3
index|]
operator|==
literal|'r'
operator|&&
name|s
index|[
name|len
operator|-
literal|2
index|]
operator|==
literal|'e'
condition|)
if|if
condition|(
operator|!
operator|(
name|len
operator|==
literal|7
operator|&&
name|s
index|[
literal|0
index|]
operator|==
literal|'Ã¡'
operator|&&
name|s
index|[
literal|1
index|]
operator|==
literal|'r'
operator|&&
name|s
index|[
literal|2
index|]
operator|==
literal|'v'
operator|&&
name|s
index|[
literal|3
index|]
operator|==
literal|'o'
operator|)
condition|)
return|return
name|len
operator|-
literal|2
return|;
if|if
condition|(
name|excS
operator|.
name|contains
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
condition|)
return|return
name|len
return|;
else|else
return|return
name|len
operator|-
literal|1
return|;
block|}
block|}
end_class
end_unit
