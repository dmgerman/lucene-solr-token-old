begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.en
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|en
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Minimal plural stemmer for English.  *<p>  * This stemmer implements the "S-Stemmer" from  *<i>How Effective Is Suffixing?</i>  * Donna Harman.  */
end_comment
begin_class
DECL|class|EnglishMinimalStemmer
specifier|public
class|class
name|EnglishMinimalStemmer
block|{
DECL|method|stem
specifier|public
name|int
name|stem
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|<
literal|3
operator|||
name|s
index|[
name|len
operator|-
literal|1
index|]
operator|!=
literal|'s'
condition|)
return|return
name|len
return|;
switch|switch
condition|(
name|s
index|[
name|len
operator|-
literal|2
index|]
condition|)
block|{
case|case
literal|'u'
case|:
case|case
literal|'s'
case|:
return|return
name|len
return|;
case|case
literal|'e'
case|:
if|if
condition|(
name|len
operator|>
literal|3
operator|&&
name|s
index|[
name|len
operator|-
literal|3
index|]
operator|==
literal|'i'
operator|&&
name|s
index|[
name|len
operator|-
literal|4
index|]
operator|!=
literal|'a'
operator|&&
name|s
index|[
name|len
operator|-
literal|4
index|]
operator|!=
literal|'e'
condition|)
block|{
name|s
index|[
name|len
operator|-
literal|3
index|]
operator|=
literal|'y'
expr_stmt|;
return|return
name|len
operator|-
literal|2
return|;
block|}
if|if
condition|(
name|s
index|[
name|len
operator|-
literal|3
index|]
operator|==
literal|'i'
operator|||
name|s
index|[
name|len
operator|-
literal|3
index|]
operator|==
literal|'a'
operator|||
name|s
index|[
name|len
operator|-
literal|3
index|]
operator|==
literal|'o'
operator|||
name|s
index|[
name|len
operator|-
literal|3
index|]
operator|==
literal|'e'
condition|)
return|return
name|len
return|;
default|default:
return|return
name|len
operator|-
literal|1
return|;
block|}
block|}
block|}
end_class
end_unit
