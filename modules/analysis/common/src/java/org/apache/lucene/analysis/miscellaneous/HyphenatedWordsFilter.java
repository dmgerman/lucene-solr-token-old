begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.miscellaneous
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_comment
comment|/**  * When the plain text is extracted from documents, we will often have many words hyphenated and broken into  * two lines. This is often the case with documents where narrow text columns are used, such as newsletters.  * In order to increase search efficiency, this filter puts hyphenated words broken into two lines back together.  * This filter should be used on indexing time only.  * Example field definition in schema.xml:  *<pre>  *&lt;fieldtype name="text" class="solr.TextField" positionIncrementGap="100"&gt;  *&lt;analyzer type="index"&gt;  *&lt;tokenizer class="solr.WhitespaceTokenizerFactory"/&gt;  *&lt;filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/&gt;  *&lt;filter class="solr.StopFilterFactory" ignoreCase="true"/&gt;  *&lt;filter class="solr.HyphenatedWordsFilterFactory"/&gt;  *&lt;filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0"/&gt;  *&lt;filter class="solr.LowerCaseFilterFactory"/&gt;  *&lt;filter class="solr.RemoveDuplicatesTokenFilterFactory"/&gt;  *&lt;/analyzer&gt;  *&lt;analyzer type="query"&gt;  *&lt;tokenizer class="solr.WhitespaceTokenizerFactory"/&gt;  *&lt;filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/&gt;  *&lt;filter class="solr.StopFilterFactory" ignoreCase="true"/&gt;  *&lt;filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0"/&gt;  *&lt;filter class="solr.LowerCaseFilterFactory"/&gt;  *&lt;filter class="solr.RemoveDuplicatesTokenFilterFactory"/&gt;  *&lt;/analyzer&gt;  *&lt;/fieldtype&gt;  *</pre>  *   */
end_comment
begin_class
DECL|class|HyphenatedWordsFilter
specifier|public
specifier|final
class|class
name|HyphenatedWordsFilter
extends|extends
name|TokenFilter
block|{
DECL|field|termAttribute
specifier|private
specifier|final
name|CharTermAttribute
name|termAttribute
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|offsetAttribute
specifier|private
specifier|final
name|OffsetAttribute
name|offsetAttribute
init|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|hyphenated
specifier|private
specifier|final
name|StringBuilder
name|hyphenated
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
DECL|field|savedState
specifier|private
name|State
name|savedState
decl_stmt|;
DECL|field|exhausted
specifier|private
name|boolean
name|exhausted
init|=
literal|false
decl_stmt|;
comment|/**    * Creates a new HyphenatedWordsFilter    *    * @param in TokenStream that will be filtered    */
DECL|method|HyphenatedWordsFilter
specifier|public
name|HyphenatedWordsFilter
parameter_list|(
name|TokenStream
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
operator|!
name|exhausted
operator|&&
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|char
index|[]
name|term
init|=
name|termAttribute
operator|.
name|buffer
argument_list|()
decl_stmt|;
name|int
name|termLength
init|=
name|termAttribute
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|termLength
operator|>
literal|0
operator|&&
name|term
index|[
name|termLength
operator|-
literal|1
index|]
operator|==
literal|'-'
condition|)
block|{
comment|// a hyphenated word
comment|// capture the state of the first token only
if|if
condition|(
name|savedState
operator|==
literal|null
condition|)
block|{
name|savedState
operator|=
name|captureState
argument_list|()
expr_stmt|;
block|}
name|hyphenated
operator|.
name|append
argument_list|(
name|term
argument_list|,
literal|0
argument_list|,
name|termLength
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|savedState
operator|==
literal|null
condition|)
block|{
comment|// not part of a hyphenated word.
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// the final portion of a hyphenated word
name|hyphenated
operator|.
name|append
argument_list|(
name|term
argument_list|,
literal|0
argument_list|,
name|termLength
argument_list|)
expr_stmt|;
name|unhyphenate
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|exhausted
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|savedState
operator|!=
literal|null
condition|)
block|{
comment|// the final term ends with a hyphen
comment|// add back the hyphen, for backwards compatibility.
name|hyphenated
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|unhyphenate
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|hyphenated
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|savedState
operator|=
literal|null
expr_stmt|;
name|exhausted
operator|=
literal|false
expr_stmt|;
block|}
comment|// ================================================= Helper Methods ================================================
comment|/**    * Writes the joined unhyphenated term    */
DECL|method|unhyphenate
specifier|private
name|void
name|unhyphenate
parameter_list|()
block|{
name|int
name|endOffset
init|=
name|offsetAttribute
operator|.
name|endOffset
argument_list|()
decl_stmt|;
name|restoreState
argument_list|(
name|savedState
argument_list|)
expr_stmt|;
name|savedState
operator|=
literal|null
expr_stmt|;
name|char
name|term
index|[]
init|=
name|termAttribute
operator|.
name|buffer
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|hyphenated
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|>
name|termAttribute
operator|.
name|length
argument_list|()
condition|)
block|{
name|term
operator|=
name|termAttribute
operator|.
name|resizeBuffer
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
name|hyphenated
operator|.
name|getChars
argument_list|(
literal|0
argument_list|,
name|length
argument_list|,
name|term
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|termAttribute
operator|.
name|setLength
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|offsetAttribute
operator|.
name|setOffset
argument_list|(
name|offsetAttribute
operator|.
name|startOffset
argument_list|()
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
name|hyphenated
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
