begin_unit
begin_comment
comment|/* The following code was generated by JFlex 1.5.0-SNAPSHOT on 9/15/10 3:01 AM */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.standard
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TypeAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeSource
import|;
end_import
begin_comment
comment|/**  * This class implements Word Break rules from the Unicode Text Segmentation   * algorithm, as specified in   *<a href="http://unicode.org/reports/tr29/">Unicode Standard Annex #29</a>   *<p/>  * Tokens produced are of the following types:  *<ul>  *<li>&lt;ALPHANUM&gt;: A sequence of alphabetic and numeric characters</li>  *<li>&lt;NUM&gt;: A number</li>  *<li>&lt;SOUTHEAST_ASIAN&gt;: A sequence of characters from South and Southeast  *       Asian languages, including Thai, Lao, Myanmar, and Khmer</li>  *<li>&lt;IDEOGRAPHIC&gt;: A single CJKV ideographic character</li>  *<li>&lt;HIRAGANA&gt;: A single hiragana character</li>  *</ul>  *<b>WARNING</b>: Because JFlex does not support Unicode supplementary   * characters (characters above the Basic Multilingual Plane, which contains  * those up to and including U+FFFF), this scanner will not recognize them  * properly.  If you need to be able to process text containing supplementary   * characters, consider using the ICU4J-backed implementation in contrib/icu    * ({@link org.apache.lucene.analysis.icu.segmentation.ICUTokenizer})  * instead of this class, since the ICU4J-backed implementation does not have  * this limitation.  */
end_comment
begin_class
DECL|class|UAX29Tokenizer
specifier|public
specifier|final
class|class
name|UAX29Tokenizer
extends|extends
name|Tokenizer
block|{
comment|/** This character denotes the end of file */
DECL|field|YYEOF
specifier|private
specifier|static
specifier|final
name|int
name|YYEOF
init|=
operator|-
literal|1
decl_stmt|;
comment|/** initial size of the lookahead buffer */
DECL|field|ZZ_BUFFERSIZE
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_BUFFERSIZE
init|=
literal|16384
decl_stmt|;
comment|/** lexical states */
DECL|field|YYINITIAL
specifier|private
specifier|static
specifier|final
name|int
name|YYINITIAL
init|=
literal|0
decl_stmt|;
comment|/**    * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l    * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l    *                  at the beginning of a line    * l is of the form l = 2*k, k a non negative integer    */
DECL|field|ZZ_LEXSTATE
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_LEXSTATE
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
comment|/**     * Translates characters to character classes    */
DECL|field|ZZ_CMAP_PACKED
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_CMAP_PACKED
init|=
literal|"\47\0\1\7\4\0\1\6\1\0\1\7\1\0\12\3\1\5\1\6"
operator|+
literal|"\5\0\32\1\4\0\1\10\1\0\32\1\57\0\1\1\2\0\1\2"
operator|+
literal|"\7\0\1\1\1\0\1\5\2\0\1\1\5\0\27\1\1\0\37\1"
operator|+
literal|"\1\0\u01ca\1\4\0\14\1\16\0\5\1\7\0\1\1\1\0\1\1"
operator|+
literal|"\21\0\160\2\5\1\1\0\2\1\2\0\4\1\1\6\7\0\1\1"
operator|+
literal|"\1\5\3\1\1\0\1\1\1\0\24\1\1\0\123\1\1\0\213\1"
operator|+
literal|"\1\0\7\2\234\1\13\0\46\1\2\0\1\1\7\0\47\1\1\0"
operator|+
literal|"\1\6\7\0\55\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0"
operator|+
literal|"\1\2\10\0\33\1\5\0\4\1\1\5\13\0\4\2\10\0\2\6"
operator|+
literal|"\2\0\13\2\6\0\52\1\24\2\1\0\12\3\1\0\1\3\1\6"
operator|+
literal|"\1\0\2\1\1\2\143\1\1\0\1\1\17\2\2\1\2\2\1\0"
operator|+
literal|"\4\2\2\1\12\3\3\1\2\0\1\1\17\0\1\2\1\1\1\2"
operator|+
literal|"\36\1\33\2\2\0\131\1\13\2\1\1\16\0\12\3\41\1\11\2"
operator|+
literal|"\2\1\2\0\1\6\1\0\1\1\5\0\26\1\4\2\1\1\11\2"
operator|+
literal|"\1\1\3\2\1\1\5\2\322\0\4\2\66\1\2\0\1\2\1\1"
operator|+
literal|"\21\2\1\0\1\1\5\2\2\0\12\1\2\2\2\0\12\3\1\0"
operator|+
literal|"\2\1\6\0\7\1\1\0\3\2\1\0\10\1\2\0\2\1\2\0"
operator|+
literal|"\26\1\1\0\7\1\1\0\1\1\3\0\4\1\2\0\1\2\1\1"
operator|+
literal|"\7\2\2\0\2\2\2\0\3\2\1\1\10\0\1\2\4\0\2\1"
operator|+
literal|"\1\0\3\1\2\2\2\0\12\3\2\1\17\0\3\2\1\0\6\1"
operator|+
literal|"\4\0\2\1\2\0\26\1\1\0\7\1\1\0\2\1\1\0\2\1"
operator|+
literal|"\1\0\2\1\2\0\1\2\1\0\5\2\4\0\2\2\2\0\3\2"
operator|+
literal|"\3\0\1\2\7\0\4\1\1\0\1\1\7\0\12\3\2\2\3\1"
operator|+
literal|"\1\2\13\0\3\2\1\0\11\1\1\0\3\1\1\0\26\1\1\0"
operator|+
literal|"\7\1\1\0\2\1\1\0\5\1\2\0\1\2\1\1\10\2\1\0"
operator|+
literal|"\3\2\1\0\3\2\2\0\1\1\17\0\2\1\2\2\2\0\12\3"
operator|+
literal|"\21\0\3\2\1\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1"
operator|+
literal|"\1\0\2\1\1\0\5\1\2\0\1\2\1\1\7\2\2\0\2\2"
operator|+
literal|"\2\0\3\2\10\0\2\2\4\0\2\1\1\0\3\1\2\2\2\0"
operator|+
literal|"\12\3\1\0\1\1\20\0\1\2\1\1\1\0\6\1\3\0\3\1"
operator|+
literal|"\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1"
operator|+
literal|"\3\0\3\1\3\0\14\1\4\0\5\2\3\0\3\2\1\0\4\2"
operator|+
literal|"\2\0\1\1\6\0\1\2\16\0\12\3\21\0\3\2\1\0\10\1"
operator|+
literal|"\1\0\3\1\1\0\27\1\1\0\12\1\1\0\5\1\3\0\1\1"
operator|+
literal|"\7\2\1\0\3\2\1\0\4\2\7\0\2\2\1\0\2\1\6\0"
operator|+
literal|"\2\1\2\2\2\0\12\3\22\0\2\2\1\0\10\1\1\0\3\1"
operator|+
literal|"\1\0\27\1\1\0\12\1\1\0\5\1\2\0\1\2\1\1\7\2"
operator|+
literal|"\1\0\3\2\1\0\4\2\7\0\2\2\7\0\1\1\1\0\2\1"
operator|+
literal|"\2\2\2\0\12\3\22\0\2\2\1\0\10\1\1\0\3\1\1\0"
operator|+
literal|"\27\1\1\0\20\1\3\0\1\1\7\2\1\0\3\2\1\0\4\2"
operator|+
literal|"\11\0\1\2\10\0\2\1\2\2\2\0\12\3\12\0\6\1\2\0"
operator|+
literal|"\2\2\1\0\22\1\3\0\30\1\1\0\11\1\1\0\1\1\2\0"
operator|+
literal|"\7\1\3\0\1\2\4\0\6\2\1\0\1\2\1\0\10\2\22\0"
operator|+
literal|"\2\2\15\0\60\11\1\12\2\11\7\12\5\0\7\11\10\12\1\0"
operator|+
literal|"\12\3\47\0\2\11\1\0\1\11\2\0\2\11\1\0\1\11\2\0"
operator|+
literal|"\1\11\6\0\4\11\1\0\7\11\1\0\3\11\1\0\1\11\1\0"
operator|+
literal|"\1\11\2\0\2\11\1\0\4\11\1\12\2\11\6\12\1\0\2\12"
operator|+
literal|"\1\11\2\0\5\11\1\0\1\11\1\0\6\12\2\0\12\3\2\0"
operator|+
literal|"\2\11\42\0\1\1\27\0\2\2\6\0\12\3\13\0\1\2\1\0"
operator|+
literal|"\1\2\1\0\1\2\4\0\2\2\10\1\1\0\44\1\4\0\24\2"
operator|+
literal|"\1\0\2\2\4\1\4\0\10\2\1\0\44\2\11\0\1\2\71\0"
operator|+
literal|"\53\11\24\12\1\11\12\3\6\0\6\11\4\12\4\11\3\12\1\11"
operator|+
literal|"\3\12\2\11\7\12\3\11\4\12\15\11\14\12\1\11\1\12\12\3"
operator|+
literal|"\4\12\2\11\46\1\12\0\53\1\1\0\1\1\3\0\u0149\1\1\0"
operator|+
literal|"\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\51\1\1\0"
operator|+
literal|"\4\1\2\0\41\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0"
operator|+
literal|"\4\1\2\0\17\1\1\0\71\1\1\0\4\1\2\0\103\1\4\0"
operator|+
literal|"\1\2\40\0\20\1\20\0\125\1\14\0\u026c\1\2\0\21\1\1\0"
operator|+
literal|"\32\1\5\0\113\1\3\0\3\1\17\0\15\1\1\0\4\1\3\2"
operator|+
literal|"\13\0\22\1\3\2\13\0\22\1\2\2\14\0\15\1\1\0\3\1"
operator|+
literal|"\1\0\2\2\14\0\64\11\40\12\3\0\1\11\4\0\1\11\1\12"
operator|+
literal|"\2\0\12\3\41\0\3\2\2\0\12\3\6\0\130\1\10\0\51\1"
operator|+
literal|"\1\2\1\1\5\0\106\1\12\0\35\1\3\0\14\2\4\0\14\2"
operator|+
literal|"\12\0\12\3\36\11\2\0\5\11\13\0\54\11\4\0\21\12\7\11"
operator|+
literal|"\2\12\6\0\13\3\3\0\2\11\40\0\27\1\5\2\4\0\65\11"
operator|+
literal|"\12\12\1\0\35\12\2\0\1\2\12\3\6\0\12\3\6\0\16\11"
operator|+
literal|"\122\0\5\2\57\1\21\2\7\1\4\0\12\3\21\0\11\2\14\0"
operator|+
literal|"\3\2\36\1\12\2\3\0\2\1\12\3\106\0\44\1\24\2\10\0"
operator|+
literal|"\12\3\3\0\3\1\12\3\44\1\122\0\3\2\1\0\25\2\4\1"
operator|+
literal|"\1\2\4\1\1\2\15\0\300\1\47\2\26\0\3\2\u0116\1\2\0"
operator|+
literal|"\6\1\2\0\46\1\2\0\6\1\2\0\10\1\1\0\1\1\1\0"
operator|+
literal|"\1\1\1\0\1\1\1\0\37\1\2\0\65\1\1\0\7\1\1\0"
operator|+
literal|"\1\1\3\0\3\1\1\0\7\1\3\0\4\1\2\0\6\1\4\0"
operator|+
literal|"\15\1\5\0\3\1\1\0\7\1\17\0\4\2\10\0\2\7\12\0"
operator|+
literal|"\1\7\2\0\1\5\2\0\5\2\20\0\2\10\3\0\1\6\17\0"
operator|+
literal|"\1\10\13\0\5\2\5\0\6\2\1\0\1\1\15\0\1\1\20\0"
operator|+
literal|"\5\1\73\0\41\2\21\0\1\1\4\0\1\1\2\0\12\1\1\0"
operator|+
literal|"\1\1\3\0\5\1\6\0\1\1\1\0\1\1\1\0\1\1\1\0"
operator|+
literal|"\4\1\1\0\13\1\2\0\4\1\5\0\5\1\4\0\1\1\21\0"
operator|+
literal|"\51\1\u032d\0\64\1\u0716\0\57\1\1\0\57\1\1\0\205\1\6\0"
operator|+
literal|"\4\1\3\2\16\0\46\1\12\0\66\1\11\0\1\1\20\0\27\1"
operator|+
literal|"\11\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1"
operator|+
literal|"\1\0\7\1\1\0\7\1\1\0\7\1\1\0\40\2\57\0\1\1"
operator|+
literal|"\120\0\32\13\1\0\131\13\14\0\326\13\57\0\1\1\1\0\1\13"
operator|+
literal|"\31\0\11\13\6\2\1\0\5\4\2\0\3\13\1\1\1\1\4\0"
operator|+
literal|"\126\14\2\0\2\2\2\4\3\14\133\4\1\0\4\4\5\0\51\1"
operator|+
literal|"\3\0\136\1\21\0\30\1\70\0\20\4\320\0\57\4\1\0\130\4"
operator|+
literal|"\250\0\u19b6\13\112\0\u51cc\13\64\0\u048d\1\103\0\56\1\2\0\u010d\1"
operator|+
literal|"\3\0\20\1\12\3\2\1\24\0\40\1\2\0\15\1\4\2\11\0"
operator|+
literal|"\2\2\1\0\31\1\10\0\120\1\2\2\45\0\11\1\2\0\147\1"
operator|+
literal|"\2\0\2\1\156\0\7\1\1\2\3\1\1\2\4\1\1\2\27\1"
operator|+
literal|"\5\2\30\0\64\1\14\0\2\2\62\1\21\2\13\0\12\3\6\0"
operator|+
literal|"\22\2\6\1\3\0\1\1\4\0\12\3\34\1\10\2\2\0\27\1"
operator|+
literal|"\15\2\14\0\35\1\3\0\4\2\57\1\16\2\16\0\1\1\12\3"
operator|+
literal|"\46\0\51\1\16\2\11\0\3\1\1\2\10\1\2\2\2\0\12\3"
operator|+
literal|"\6\0\33\11\1\12\4\0\60\11\1\12\1\11\3\12\2\11\2\12"
operator|+
literal|"\5\11\2\12\1\11\1\12\1\11\30\0\5\11\340\0\43\1\10\2"
operator|+
literal|"\1\0\2\2\2\0\12\3\6\0\u2ba4\1\14\0\27\1\4\0\61\1"
operator|+
literal|"\u2104\0\u012e\13\2\0\76\13\2\0\152\13\46\0\7\1\14\0\5\1"
operator|+
literal|"\5\0\1\1\1\2\12\1\1\0\15\1\1\0\5\1\1\0\1\1"
operator|+
literal|"\1\0\2\1\1\0\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1"
operator|+
literal|"\2\0\66\1\50\0\14\1\4\0\20\2\1\6\2\0\1\5\1\6"
operator|+
literal|"\13\0\7\2\14\0\2\10\30\0\3\10\1\6\1\0\1\7\1\0"
operator|+
literal|"\1\6\1\5\32\0\5\1\1\0\207\1\2\0\1\2\7\0\1\7"
operator|+
literal|"\4\0\1\6\1\0\1\7\1\0\12\3\1\5\1\6\5\0\32\1"
operator|+
literal|"\4\0\1\10\1\0\32\1\13\0\70\4\2\2\37\1\3\0\6\1"
operator|+
literal|"\2\0\6\1\2\0\6\1\2\0\3\1\34\0\3\2\4\0"
decl_stmt|;
comment|/**     * Translates characters to character classes    */
DECL|field|ZZ_CMAP
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|ZZ_CMAP
init|=
name|zzUnpackCMap
argument_list|(
name|ZZ_CMAP_PACKED
argument_list|)
decl_stmt|;
comment|/**     * Translates DFA states to action switch labels.    */
DECL|field|ZZ_ACTION
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_ACTION
init|=
name|zzUnpackAction
argument_list|()
decl_stmt|;
DECL|field|ZZ_ACTION_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ACTION_PACKED_0
init|=
literal|"\1\0\1\1\1\2\1\3\1\2\1\1\1\4\1\5"
operator|+
literal|"\1\6\1\2\1\0\1\2\1\0\1\3\2\0"
decl_stmt|;
DECL|method|zzUnpackAction
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackAction
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|16
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackAction
argument_list|(
name|ZZ_ACTION_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackAction
specifier|private
specifier|static
name|int
name|zzUnpackAction
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
do|do
name|result
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|j
return|;
block|}
comment|/**     * Translates a state to a row index in the transition table    */
DECL|field|ZZ_ROWMAP
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_ROWMAP
init|=
name|zzUnpackRowMap
argument_list|()
decl_stmt|;
DECL|field|ZZ_ROWMAP_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ROWMAP_PACKED_0
init|=
literal|"\0\0\0\15\0\32\0\47\0\64\0\101\0\116\0\15"
operator|+
literal|"\0\15\0\133\0\150\0\165\0\202\0\217\0\101\0\234"
decl_stmt|;
DECL|method|zzUnpackRowMap
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackRowMap
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|16
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackRowMap
argument_list|(
name|ZZ_ROWMAP_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackRowMap
specifier|private
specifier|static
name|int
name|zzUnpackRowMap
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|high
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
operator|<<
literal|16
decl_stmt|;
name|result
index|[
name|j
operator|++
index|]
operator|=
name|high
operator||
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
expr_stmt|;
block|}
return|return
name|j
return|;
block|}
comment|/**     * The transition table of the DFA    */
DECL|field|ZZ_TRANS
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_TRANS
init|=
name|zzUnpackTrans
argument_list|()
decl_stmt|;
DECL|field|ZZ_TRANS_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_TRANS_PACKED_0
init|=
literal|"\1\2\1\3\1\2\1\4\1\5\3\2\1\6\2\7"
operator|+
literal|"\1\10\1\11\16\0\2\3\1\12\1\0\1\13\1\0"
operator|+
literal|"\1\13\1\14\1\0\1\3\3\0\1\3\2\4\2\0"
operator|+
literal|"\2\15\1\16\1\0\1\4\4\0\1\5\1\0\1\5"
operator|+
literal|"\3\0\1\14\1\0\1\5\3\0\1\3\1\17\1\4"
operator|+
literal|"\1\5\3\0\1\17\1\0\1\17\13\0\2\7\3\0"
operator|+
literal|"\1\3\2\12\2\0\2\20\1\14\1\0\1\12\3\0"
operator|+
literal|"\1\3\1\13\7\0\1\13\3\0\1\3\1\14\1\12"
operator|+
literal|"\1\5\3\0\1\14\1\0\1\14\4\0\1\15\1\4"
operator|+
literal|"\6\0\1\15\3\0\1\3\1\16\1\4\1\5\3\0"
operator|+
literal|"\1\16\1\0\1\16\4\0\1\20\1\12\6\0\1\20"
operator|+
literal|"\2\0"
decl_stmt|;
DECL|method|zzUnpackTrans
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackTrans
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|169
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackTrans
argument_list|(
name|ZZ_TRANS_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackTrans
specifier|private
specifier|static
name|int
name|zzUnpackTrans
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|value
operator|--
expr_stmt|;
do|do
name|result
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|j
return|;
block|}
comment|/* error codes */
DECL|field|ZZ_UNKNOWN_ERROR
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_UNKNOWN_ERROR
init|=
literal|0
decl_stmt|;
DECL|field|ZZ_NO_MATCH
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_NO_MATCH
init|=
literal|1
decl_stmt|;
DECL|field|ZZ_PUSHBACK_2BIG
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_PUSHBACK_2BIG
init|=
literal|2
decl_stmt|;
comment|/* error messages for the codes above */
DECL|field|ZZ_ERROR_MSG
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ERROR_MSG
index|[]
init|=
block|{
literal|"Unkown internal scanner error"
block|,
literal|"Error: could not match input"
block|,
literal|"Error: pushback value was too large"
block|}
decl_stmt|;
comment|/**    * ZZ_ATTRIBUTE[aState] contains the attributes of state<code>aState</code>    */
DECL|field|ZZ_ATTRIBUTE
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_ATTRIBUTE
init|=
name|zzUnpackAttribute
argument_list|()
decl_stmt|;
DECL|field|ZZ_ATTRIBUTE_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ATTRIBUTE_PACKED_0
init|=
literal|"\1\0\1\11\5\1\2\11\1\1\1\0\1\1\1\0"
operator|+
literal|"\1\1\2\0"
decl_stmt|;
DECL|method|zzUnpackAttribute
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackAttribute
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|16
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackAttribute
argument_list|(
name|ZZ_ATTRIBUTE_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackAttribute
specifier|private
specifier|static
name|int
name|zzUnpackAttribute
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
do|do
name|result
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|j
return|;
block|}
comment|/** the input device */
DECL|field|zzReader
specifier|private
name|java
operator|.
name|io
operator|.
name|Reader
name|zzReader
decl_stmt|;
comment|/** the current state of the DFA */
DECL|field|zzState
specifier|private
name|int
name|zzState
decl_stmt|;
comment|/** the current lexical state */
DECL|field|zzLexicalState
specifier|private
name|int
name|zzLexicalState
init|=
name|YYINITIAL
decl_stmt|;
comment|/** this buffer contains the current text to be matched and is       the source of the yytext() string */
DECL|field|zzBuffer
specifier|private
name|char
name|zzBuffer
index|[]
init|=
operator|new
name|char
index|[
name|ZZ_BUFFERSIZE
index|]
decl_stmt|;
comment|/** the textposition at the last accepting state */
DECL|field|zzMarkedPos
specifier|private
name|int
name|zzMarkedPos
decl_stmt|;
comment|/** the current text position in the buffer */
DECL|field|zzCurrentPos
specifier|private
name|int
name|zzCurrentPos
decl_stmt|;
comment|/** startRead marks the beginning of the yytext() string in the buffer */
DECL|field|zzStartRead
specifier|private
name|int
name|zzStartRead
decl_stmt|;
comment|/** endRead marks the last character in the buffer, that has been read       from input */
DECL|field|zzEndRead
specifier|private
name|int
name|zzEndRead
decl_stmt|;
comment|/** number of newlines encountered up to the start of the matched text */
DECL|field|yyline
specifier|private
name|int
name|yyline
decl_stmt|;
comment|/** the number of characters up to the start of the matched text */
DECL|field|yychar
specifier|private
name|int
name|yychar
decl_stmt|;
comment|/**    * the number of characters from the last newline up to the start of the     * matched text    */
DECL|field|yycolumn
specifier|private
name|int
name|yycolumn
decl_stmt|;
comment|/**     * zzAtBOL == true<=> the scanner is currently at the beginning of a line    */
DECL|field|zzAtBOL
specifier|private
name|boolean
name|zzAtBOL
init|=
literal|true
decl_stmt|;
comment|/** zzAtEOF == true<=> the scanner is at the EOF */
DECL|field|zzAtEOF
specifier|private
name|boolean
name|zzAtEOF
decl_stmt|;
comment|/** denotes if the user-EOF-code has already been executed */
DECL|field|zzEOFDone
specifier|private
name|boolean
name|zzEOFDone
decl_stmt|;
comment|/* user code: */
comment|/** Alphanumeric sequences */
DECL|field|WORD_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|WORD_TYPE
init|=
literal|"<ALPHANUM>"
decl_stmt|;
comment|/** Numbers */
DECL|field|NUMERIC_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|NUMERIC_TYPE
init|=
literal|"<NUM>"
decl_stmt|;
comment|/**    * Chars in class \p{Line_Break = Complex_Context} are from South East Asian    * scripts (Thai, Lao, Myanmar, Khmer, etc.).  Sequences of these are kept     * together as as a single token rather than broken up, because the logic    * required to break them at word boundaries is too complex for UAX#29.    * {@see Unicode Line Breaking Algorithm http://www.unicode.org/reports/tr14/#SA}    */
DECL|field|SOUTH_EAST_ASIAN_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|SOUTH_EAST_ASIAN_TYPE
init|=
literal|"<SOUTHEAST_ASIAN>"
decl_stmt|;
DECL|field|IDEOGRAPHIC_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|IDEOGRAPHIC_TYPE
init|=
literal|"<IDEOGRAPHIC>"
decl_stmt|;
DECL|field|HIRAGANA_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|HIRAGANA_TYPE
init|=
literal|"<HIRAGANA>"
decl_stmt|;
DECL|field|termAtt
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|offsetAtt
specifier|private
specifier|final
name|OffsetAttribute
name|offsetAtt
init|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posIncrAtt
specifier|private
specifier|final
name|PositionIncrementAttribute
name|posIncrAtt
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|typeAtt
specifier|private
specifier|final
name|TypeAttribute
name|typeAtt
init|=
name|addAttribute
argument_list|(
name|TypeAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|maxTokenLength
specifier|private
name|int
name|maxTokenLength
init|=
name|StandardAnalyzer
operator|.
name|DEFAULT_MAX_TOKEN_LENGTH
decl_stmt|;
DECL|field|posIncr
specifier|private
name|int
name|posIncr
decl_stmt|;
comment|/**    * @param source The AttributeSource to use    * @param input The input reader    */
DECL|method|UAX29Tokenizer
specifier|public
name|UAX29Tokenizer
parameter_list|(
name|AttributeSource
name|source
parameter_list|,
name|Reader
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|source
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|zzReader
operator|=
name|input
expr_stmt|;
block|}
comment|/**    * @param factory The AttributeFactory to use    * @param input The input reader    */
DECL|method|UAX29Tokenizer
specifier|public
name|UAX29Tokenizer
parameter_list|(
name|AttributeFactory
name|factory
parameter_list|,
name|Reader
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|factory
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|zzReader
operator|=
name|input
expr_stmt|;
block|}
comment|/**     * Set the max allowed token length.  Any token longer than this is skipped.    * @param length the new max allowed token length    */
DECL|method|setMaxTokenLength
specifier|public
name|void
name|setMaxTokenLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|maxTokenLength
operator|=
name|length
expr_stmt|;
block|}
comment|/**    * Returns the max allowed token length.  Any token longer than this is     * skipped.    * @return the max allowed token length     */
DECL|method|getMaxTokenLength
specifier|public
name|int
name|getMaxTokenLength
parameter_list|()
block|{
return|return
name|maxTokenLength
return|;
block|}
annotation|@
name|Override
DECL|method|end
specifier|public
specifier|final
name|void
name|end
parameter_list|()
block|{
comment|// set final offset
name|int
name|finalOffset
init|=
name|correctOffset
argument_list|(
name|yychar
operator|+
name|yylength
argument_list|()
argument_list|)
decl_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|finalOffset
argument_list|,
name|finalOffset
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|yyreset
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
specifier|final
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
comment|// This method is required because of two JFlex limitations:
comment|// 1. No way to insert code at the beginning of the generated scanning
comment|//    get-next-token method; and
comment|// 2. No way to declare @Override on the generated scanning method.
name|clearAttributes
argument_list|()
expr_stmt|;
name|posIncr
operator|=
literal|1
expr_stmt|;
return|return
name|getNextToken
argument_list|()
return|;
block|}
comment|/**    * Populates this TokenStream's CharTermAttribute and OffsetAttribute from    * the current match, the TypeAttribute from the passed-in tokenType, and    * the PositionIncrementAttribute to one, unless the immediately previous    * token(s) was/were skipped because maxTokenLength was exceeded, in which    * case the PositionIncrementAttribute is set to one plus the number of    * skipped overly long tokens.     *<p/>     * If maxTokenLength is exceeded, the CharTermAttribute is set back to empty    * and false is returned.    *     * @param tokenType The type of the matching token    * @return true there is a token available (not too long); false otherwise     */
DECL|method|populateAttributes
specifier|private
name|boolean
name|populateAttributes
parameter_list|(
name|String
name|tokenType
parameter_list|)
block|{
name|boolean
name|isTokenAvailable
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|yylength
argument_list|()
operator|>
name|maxTokenLength
condition|)
block|{
comment|// When we skip a too-long token, we treat it like a stopword, introducing
comment|// a position increment gap
operator|++
name|posIncr
expr_stmt|;
block|}
else|else
block|{
name|termAtt
operator|.
name|copyBuffer
argument_list|(
name|zzBuffer
argument_list|,
name|zzStartRead
argument_list|,
name|yylength
argument_list|()
argument_list|)
expr_stmt|;
name|posIncrAtt
operator|.
name|setPositionIncrement
argument_list|(
name|posIncr
argument_list|)
expr_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|correctOffset
argument_list|(
name|yychar
argument_list|)
argument_list|,
name|correctOffset
argument_list|(
name|yychar
operator|+
name|yylength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|typeAtt
operator|.
name|setType
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
name|isTokenAvailable
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|isTokenAvailable
return|;
block|}
comment|/**    * Creates a new scanner    * There is also a java.io.InputStream version of this constructor.    *    * @param   in  the java.io.Reader to read input from.    */
DECL|method|UAX29Tokenizer
specifier|public
name|UAX29Tokenizer
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|zzReader
operator|=
name|in
expr_stmt|;
block|}
comment|/**    * Creates a new scanner.    * There is also java.io.Reader version of this constructor.    *    * @param   in  the java.io.Inputstream to read input from.    */
DECL|method|UAX29Tokenizer
specifier|public
name|UAX29Tokenizer
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|in
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|java
operator|.
name|io
operator|.
name|InputStreamReader
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**     * Unpacks the compressed character translation table.    *    * @param packed   the packed character translation table    * @return         the unpacked character translation table    */
DECL|method|zzUnpackCMap
specifier|private
specifier|static
name|char
index|[]
name|zzUnpackCMap
parameter_list|(
name|String
name|packed
parameter_list|)
block|{
name|char
index|[]
name|map
init|=
operator|new
name|char
index|[
literal|0x10000
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
literal|0
decl_stmt|;
comment|/* index in unpacked array */
while|while
condition|(
name|i
operator|<
literal|2138
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|char
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
do|do
name|map
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|map
return|;
block|}
comment|/**    * Refills the input buffer.    *    * @return<code>false</code>, iff there was new input.    *     * @exception   java.io.IOException  if any I/O-Error occurs    */
DECL|method|zzRefill
specifier|private
name|boolean
name|zzRefill
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
comment|/* first: make room (if you can) */
if|if
condition|(
name|zzStartRead
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|zzBuffer
argument_list|,
name|zzStartRead
argument_list|,
name|zzBuffer
argument_list|,
literal|0
argument_list|,
name|zzEndRead
operator|-
name|zzStartRead
argument_list|)
expr_stmt|;
comment|/* translate stored positions */
name|zzEndRead
operator|-=
name|zzStartRead
expr_stmt|;
name|zzCurrentPos
operator|-=
name|zzStartRead
expr_stmt|;
name|zzMarkedPos
operator|-=
name|zzStartRead
expr_stmt|;
name|zzStartRead
operator|=
literal|0
expr_stmt|;
block|}
comment|/* is the buffer big enough? */
if|if
condition|(
name|zzCurrentPos
operator|>=
name|zzBuffer
operator|.
name|length
condition|)
block|{
comment|/* if not: blow it up */
name|char
name|newBuffer
index|[]
init|=
operator|new
name|char
index|[
name|zzCurrentPos
operator|*
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|zzBuffer
argument_list|,
literal|0
argument_list|,
name|newBuffer
argument_list|,
literal|0
argument_list|,
name|zzBuffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|zzBuffer
operator|=
name|newBuffer
expr_stmt|;
block|}
comment|/* finally: fill the buffer with new input */
name|int
name|numRead
init|=
name|zzReader
operator|.
name|read
argument_list|(
name|zzBuffer
argument_list|,
name|zzEndRead
argument_list|,
name|zzBuffer
operator|.
name|length
operator|-
name|zzEndRead
argument_list|)
decl_stmt|;
if|if
condition|(
name|numRead
operator|>
literal|0
condition|)
block|{
name|zzEndRead
operator|+=
name|numRead
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// unlikely but not impossible: read 0 characters, but not at end of stream
if|if
condition|(
name|numRead
operator|==
literal|0
condition|)
block|{
name|int
name|c
init|=
name|zzReader
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|zzBuffer
index|[
name|zzEndRead
operator|++
index|]
operator|=
operator|(
name|char
operator|)
name|c
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// numRead< 0
return|return
literal|true
return|;
block|}
comment|/**    * Closes the input stream.    */
DECL|method|yyclose
specifier|private
specifier|final
name|void
name|yyclose
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|zzAtEOF
operator|=
literal|true
expr_stmt|;
comment|/* indicate end of file */
name|zzEndRead
operator|=
name|zzStartRead
expr_stmt|;
comment|/* invalidate buffer    */
if|if
condition|(
name|zzReader
operator|!=
literal|null
condition|)
name|zzReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Resets the scanner to read from a new input stream.    * Does not close the old reader.    *    * All internal variables are reset, the old input stream     *<b>cannot</b> be reused (internal buffer is discarded and lost).    * Lexical state is set to<tt>ZZ_INITIAL</tt>.    *    * Internal scan buffer is resized down to its initial length, if it has grown.    *    * @param reader   the new input stream     */
DECL|method|yyreset
specifier|private
specifier|final
name|void
name|yyreset
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|reader
parameter_list|)
block|{
name|zzReader
operator|=
name|reader
expr_stmt|;
name|zzAtBOL
operator|=
literal|true
expr_stmt|;
name|zzAtEOF
operator|=
literal|false
expr_stmt|;
name|zzEOFDone
operator|=
literal|false
expr_stmt|;
name|zzEndRead
operator|=
name|zzStartRead
operator|=
literal|0
expr_stmt|;
name|zzCurrentPos
operator|=
name|zzMarkedPos
operator|=
literal|0
expr_stmt|;
name|yyline
operator|=
name|yychar
operator|=
name|yycolumn
operator|=
literal|0
expr_stmt|;
name|zzLexicalState
operator|=
name|YYINITIAL
expr_stmt|;
if|if
condition|(
name|zzBuffer
operator|.
name|length
operator|>
name|ZZ_BUFFERSIZE
condition|)
name|zzBuffer
operator|=
operator|new
name|char
index|[
name|ZZ_BUFFERSIZE
index|]
expr_stmt|;
block|}
comment|/**    * Returns the current lexical state.    */
DECL|method|yystate
specifier|private
specifier|final
name|int
name|yystate
parameter_list|()
block|{
return|return
name|zzLexicalState
return|;
block|}
comment|/**    * Enters a new lexical state    *    * @param newState the new lexical state    */
DECL|method|yybegin
specifier|private
specifier|final
name|void
name|yybegin
parameter_list|(
name|int
name|newState
parameter_list|)
block|{
name|zzLexicalState
operator|=
name|newState
expr_stmt|;
block|}
comment|/**    * Returns the text matched by the current regular expression.    */
DECL|method|yytext
specifier|private
specifier|final
name|String
name|yytext
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|zzBuffer
argument_list|,
name|zzStartRead
argument_list|,
name|zzMarkedPos
operator|-
name|zzStartRead
argument_list|)
return|;
block|}
comment|/**    * Returns the character at position<tt>pos</tt> from the     * matched text.     *     * It is equivalent to yytext().charAt(pos), but faster    *    * @param pos the position of the character to fetch.     *            A value from 0 to yylength()-1.    *    * @return the character at position pos    */
DECL|method|yycharat
specifier|private
specifier|final
name|char
name|yycharat
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
name|zzBuffer
index|[
name|zzStartRead
operator|+
name|pos
index|]
return|;
block|}
comment|/**    * Returns the length of the matched text region.    */
DECL|method|yylength
specifier|private
specifier|final
name|int
name|yylength
parameter_list|()
block|{
return|return
name|zzMarkedPos
operator|-
name|zzStartRead
return|;
block|}
comment|/**    * Reports an error that occured while scanning.    *    * In a wellformed scanner (no or only correct usage of     * yypushback(int) and a match-all fallback rule) this method     * will only be called with things that "Can't Possibly Happen".    * If this method is called, something is seriously wrong    * (e.g. a JFlex bug producing a faulty scanner etc.).    *    * Usual syntax/scanner level error handling should be done    * in error fallback rules.    *    * @param   errorCode  the code of the errormessage to display    */
DECL|method|zzScanError
specifier|private
name|void
name|zzScanError
parameter_list|(
name|int
name|errorCode
parameter_list|)
block|{
name|String
name|message
decl_stmt|;
try|try
block|{
name|message
operator|=
name|ZZ_ERROR_MSG
index|[
name|errorCode
index|]
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
name|message
operator|=
name|ZZ_ERROR_MSG
index|[
name|ZZ_UNKNOWN_ERROR
index|]
expr_stmt|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|/**    * Pushes the specified amount of characters back into the input stream.    *    * They will be read again by then next call of the scanning method    *    * @param number  the number of characters to be read again.    *                This number must not be greater than yylength()!    */
DECL|method|yypushback
specifier|private
name|void
name|yypushback
parameter_list|(
name|int
name|number
parameter_list|)
block|{
if|if
condition|(
name|number
operator|>
name|yylength
argument_list|()
condition|)
name|zzScanError
argument_list|(
name|ZZ_PUSHBACK_2BIG
argument_list|)
expr_stmt|;
name|zzMarkedPos
operator|-=
name|number
expr_stmt|;
block|}
comment|/**    * Resumes scanning until the next regular expression is matched,    * the end of input is encountered or an I/O-Error occurs.    *    * @return      the next token    * @exception   java.io.IOException  if any I/O-Error occurs    */
DECL|method|getNextToken
specifier|private
name|boolean
name|getNextToken
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|int
name|zzInput
decl_stmt|;
name|int
name|zzAction
decl_stmt|;
comment|// cached fields:
name|int
name|zzCurrentPosL
decl_stmt|;
name|int
name|zzMarkedPosL
decl_stmt|;
name|int
name|zzEndReadL
init|=
name|zzEndRead
decl_stmt|;
name|char
index|[]
name|zzBufferL
init|=
name|zzBuffer
decl_stmt|;
name|char
index|[]
name|zzCMapL
init|=
name|ZZ_CMAP
decl_stmt|;
name|int
index|[]
name|zzTransL
init|=
name|ZZ_TRANS
decl_stmt|;
name|int
index|[]
name|zzRowMapL
init|=
name|ZZ_ROWMAP
decl_stmt|;
name|int
index|[]
name|zzAttrL
init|=
name|ZZ_ATTRIBUTE
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|zzMarkedPosL
operator|=
name|zzMarkedPos
expr_stmt|;
name|yychar
operator|+=
name|zzMarkedPosL
operator|-
name|zzStartRead
expr_stmt|;
name|zzAction
operator|=
operator|-
literal|1
expr_stmt|;
name|zzCurrentPosL
operator|=
name|zzCurrentPos
operator|=
name|zzStartRead
operator|=
name|zzMarkedPosL
expr_stmt|;
name|zzState
operator|=
name|ZZ_LEXSTATE
index|[
name|zzLexicalState
index|]
expr_stmt|;
name|zzForAction
label|:
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|zzCurrentPosL
operator|<
name|zzEndReadL
condition|)
name|zzInput
operator|=
name|zzBufferL
index|[
name|zzCurrentPosL
operator|++
index|]
expr_stmt|;
elseif|else
if|if
condition|(
name|zzAtEOF
condition|)
block|{
name|zzInput
operator|=
name|YYEOF
expr_stmt|;
break|break
name|zzForAction
break|;
block|}
else|else
block|{
comment|// store back cached positions
name|zzCurrentPos
operator|=
name|zzCurrentPosL
expr_stmt|;
name|zzMarkedPos
operator|=
name|zzMarkedPosL
expr_stmt|;
name|boolean
name|eof
init|=
name|zzRefill
argument_list|()
decl_stmt|;
comment|// get translated positions and possibly new buffer
name|zzCurrentPosL
operator|=
name|zzCurrentPos
expr_stmt|;
name|zzMarkedPosL
operator|=
name|zzMarkedPos
expr_stmt|;
name|zzBufferL
operator|=
name|zzBuffer
expr_stmt|;
name|zzEndReadL
operator|=
name|zzEndRead
expr_stmt|;
if|if
condition|(
name|eof
condition|)
block|{
name|zzInput
operator|=
name|YYEOF
expr_stmt|;
break|break
name|zzForAction
break|;
block|}
else|else
block|{
name|zzInput
operator|=
name|zzBufferL
index|[
name|zzCurrentPosL
operator|++
index|]
expr_stmt|;
block|}
block|}
name|int
name|zzNext
init|=
name|zzTransL
index|[
name|zzRowMapL
index|[
name|zzState
index|]
operator|+
name|zzCMapL
index|[
name|zzInput
index|]
index|]
decl_stmt|;
if|if
condition|(
name|zzNext
operator|==
operator|-
literal|1
condition|)
break|break
name|zzForAction
break|;
name|zzState
operator|=
name|zzNext
expr_stmt|;
name|int
name|zzAttributes
init|=
name|zzAttrL
index|[
name|zzState
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|zzAttributes
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
name|zzAction
operator|=
name|zzState
expr_stmt|;
name|zzMarkedPosL
operator|=
name|zzCurrentPosL
expr_stmt|;
if|if
condition|(
operator|(
name|zzAttributes
operator|&
literal|8
operator|)
operator|==
literal|8
condition|)
break|break
name|zzForAction
break|;
block|}
block|}
block|}
comment|// store back cached position
name|zzMarkedPos
operator|=
name|zzMarkedPosL
expr_stmt|;
switch|switch
condition|(
name|zzAction
operator|<
literal|0
condition|?
name|zzAction
else|:
name|ZZ_ACTION
index|[
name|zzAction
index|]
condition|)
block|{
case|case
literal|5
case|:
block|{
if|if
condition|(
name|populateAttributes
argument_list|(
name|IDEOGRAPHIC_TYPE
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
case|case
literal|7
case|:
break|break;
case|case
literal|1
case|:
block|{
comment|/* Not numeric, word, ideographic, hiragana, or SE Asian -- ignore it. */
block|}
case|case
literal|8
case|:
break|break;
case|case
literal|3
case|:
block|{
if|if
condition|(
name|populateAttributes
argument_list|(
name|NUMERIC_TYPE
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
case|case
literal|9
case|:
break|break;
case|case
literal|6
case|:
block|{
if|if
condition|(
name|populateAttributes
argument_list|(
name|HIRAGANA_TYPE
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
case|case
literal|10
case|:
break|break;
case|case
literal|4
case|:
block|{
if|if
condition|(
name|populateAttributes
argument_list|(
name|SOUTH_EAST_ASIAN_TYPE
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
case|case
literal|11
case|:
break|break;
case|case
literal|2
case|:
block|{
if|if
condition|(
name|populateAttributes
argument_list|(
name|WORD_TYPE
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
case|case
literal|12
case|:
break|break;
default|default:
if|if
condition|(
name|zzInput
operator|==
name|YYEOF
operator|&&
name|zzStartRead
operator|==
name|zzCurrentPos
condition|)
block|{
name|zzAtEOF
operator|=
literal|true
expr_stmt|;
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|zzScanError
argument_list|(
name|ZZ_NO_MATCH
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
