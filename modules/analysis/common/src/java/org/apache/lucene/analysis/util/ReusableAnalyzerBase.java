begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|PerFieldAnalyzerWrapper
import|;
end_import
begin_comment
comment|// javadocs
end_comment
begin_comment
comment|/**  * An convenience subclass of Analyzer that makes it easy to implement  * {@link TokenStream} reuse.  *<p>  * ReusableAnalyzerBase is a simplification of Analyzer that supports easy reuse  * for the most common use-cases. Analyzers such as  * {@link PerFieldAnalyzerWrapper} that behave differently depending upon the  * field name need to subclass Analyzer directly instead.  *</p>  *<p>  * To prevent consistency problems, this class does not allow subclasses to  * extend {@link #reusableTokenStream(String, Reader)} or  * {@link #tokenStream(String, Reader)} directly. Instead, subclasses must  * implement {@link #createComponents(String, Reader)}.  *</p>  */
end_comment
begin_class
DECL|class|ReusableAnalyzerBase
specifier|public
specifier|abstract
class|class
name|ReusableAnalyzerBase
extends|extends
name|Analyzer
block|{
comment|/**    * Creates a new {@link TokenStreamComponents} instance for this analyzer.    *     * @param fieldName    *          the name of the fields content passed to the    *          {@link TokenStreamComponents} sink as a reader    * @param aReader    *          the reader passed to the {@link Tokenizer} constructor    * @return the {@link TokenStreamComponents} for this analyzer.    */
DECL|method|createComponents
specifier|protected
specifier|abstract
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|aReader
parameter_list|)
function_decl|;
comment|/**    * This method uses {@link #createComponents(String, Reader)} to obtain an    * instance of {@link TokenStreamComponents}. It returns the sink of the    * components and stores the components internally. Subsequent calls to this    * method will reuse the previously stored components if and only if the    * {@link TokenStreamComponents#reset(Reader)} method returned    *<code>true</code>. Otherwise a new instance of    * {@link TokenStreamComponents} is created.    *     * @param fieldName the name of the field the created TokenStream is used for    * @param reader the reader the streams source reads from    */
annotation|@
name|Override
DECL|method|reusableTokenStream
specifier|public
specifier|final
name|TokenStream
name|reusableTokenStream
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|,
specifier|final
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|TokenStreamComponents
name|streamChain
init|=
operator|(
name|TokenStreamComponents
operator|)
name|getPreviousTokenStream
argument_list|()
decl_stmt|;
specifier|final
name|Reader
name|r
init|=
name|initReader
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|streamChain
operator|==
literal|null
operator|||
operator|!
name|streamChain
operator|.
name|reset
argument_list|(
name|r
argument_list|)
condition|)
block|{
name|streamChain
operator|=
name|createComponents
argument_list|(
name|fieldName
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|setPreviousTokenStream
argument_list|(
name|streamChain
argument_list|)
expr_stmt|;
block|}
return|return
name|streamChain
operator|.
name|getTokenStream
argument_list|()
return|;
block|}
comment|/**    * This method uses {@link #createComponents(String, Reader)} to obtain an    * instance of {@link TokenStreamComponents} and returns the sink of the    * components. Each calls to this method will create a new instance of    * {@link TokenStreamComponents}. Created {@link TokenStream} instances are     * never reused.    *     * @param fieldName the name of the field the created TokenStream is used for    * @param reader the reader the streams source reads from    */
annotation|@
name|Override
DECL|method|tokenStream
specifier|public
specifier|final
name|TokenStream
name|tokenStream
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|,
specifier|final
name|Reader
name|reader
parameter_list|)
block|{
return|return
name|createComponents
argument_list|(
name|fieldName
argument_list|,
name|initReader
argument_list|(
name|reader
argument_list|)
argument_list|)
operator|.
name|getTokenStream
argument_list|()
return|;
block|}
comment|/**    * Override this if you want to add a CharFilter chain.    */
DECL|method|initReader
specifier|protected
name|Reader
name|initReader
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
return|return
name|reader
return|;
block|}
comment|/**    * This class encapsulates the outer components of a token stream. It provides    * access to the source ({@link Tokenizer}) and the outer end (sink), an    * instance of {@link TokenFilter} which also serves as the    * {@link TokenStream} returned by    * {@link Analyzer#tokenStream(String, Reader)} and    * {@link Analyzer#reusableTokenStream(String, Reader)}.    */
DECL|class|TokenStreamComponents
specifier|public
specifier|static
class|class
name|TokenStreamComponents
block|{
DECL|field|source
specifier|protected
specifier|final
name|Tokenizer
name|source
decl_stmt|;
DECL|field|sink
specifier|protected
specifier|final
name|TokenStream
name|sink
decl_stmt|;
comment|/**      * Creates a new {@link TokenStreamComponents} instance.      *       * @param source      *          the analyzer's tokenizer      * @param result      *          the analyzer's resulting token stream      */
DECL|method|TokenStreamComponents
specifier|public
name|TokenStreamComponents
parameter_list|(
specifier|final
name|Tokenizer
name|source
parameter_list|,
specifier|final
name|TokenStream
name|result
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|sink
operator|=
name|result
expr_stmt|;
block|}
comment|/**      * Creates a new {@link TokenStreamComponents} instance.      *       * @param source      *          the analyzer's tokenizer      */
DECL|method|TokenStreamComponents
specifier|public
name|TokenStreamComponents
parameter_list|(
specifier|final
name|Tokenizer
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|sink
operator|=
name|source
expr_stmt|;
block|}
comment|/**      * Resets the encapsulated components with the given reader. This method by      * default returns<code>true</code> indicating that the components have      * been reset successfully. Subclasses of {@link ReusableAnalyzerBase} might use      * their own {@link TokenStreamComponents} returning<code>false</code> if      * the components cannot be reset.      *       * @param reader      *          a reader to reset the source component      * @return<code>true</code> if the components were reset, otherwise      *<code>false</code>      * @throws IOException      *           if the component's reset method throws an {@link IOException}      */
DECL|method|reset
specifier|protected
name|boolean
name|reset
parameter_list|(
specifier|final
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|source
operator|.
name|reset
argument_list|(
name|reader
argument_list|)
expr_stmt|;
if|if
condition|(
name|sink
operator|!=
name|source
condition|)
name|sink
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// only reset if the sink reference is different from source
return|return
literal|true
return|;
block|}
comment|/**      * Returns the sink {@link TokenStream}      *       * @return the sink {@link TokenStream}      */
DECL|method|getTokenStream
specifier|protected
name|TokenStream
name|getTokenStream
parameter_list|()
block|{
return|return
name|sink
return|;
block|}
block|}
block|}
end_class
end_unit
