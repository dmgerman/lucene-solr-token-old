begin_unit
begin_comment
comment|/* The following code was generated by JFlex 1.5.0-SNAPSHOT on 1/6/11 12:09 AM */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.standard
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_comment
comment|/**  * This class implements Word Break rules from the Unicode Text Segmentation   * algorithm, as specified in   *<a href="http://unicode.org/reports/tr29/">Unicode Standard Annex #29</a>   *<p/>  * Tokens produced are of the following types:  *<ul>  *<li>&lt;ALPHANUM&gt;: A sequence of alphabetic and numeric characters</li>  *<li>&lt;NUM&gt;: A number</li>  *<li>&lt;SOUTHEAST_ASIAN&gt;: A sequence of characters from South and Southeast  *       Asian languages, including Thai, Lao, Myanmar, and Khmer</li>  *<li>&lt;IDEOGRAPHIC&gt;: A single CJKV ideographic character</li>  *<li>&lt;HIRAGANA&gt;: A single hiragana character</li>  *</ul>  */
end_comment
begin_class
DECL|class|StandardTokenizerImpl
specifier|public
specifier|final
class|class
name|StandardTokenizerImpl
implements|implements
name|StandardTokenizerInterface
block|{
comment|/** This character denotes the end of file */
DECL|field|YYEOF
specifier|public
specifier|static
specifier|final
name|int
name|YYEOF
init|=
operator|-
literal|1
decl_stmt|;
comment|/** initial size of the lookahead buffer */
DECL|field|ZZ_BUFFERSIZE
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_BUFFERSIZE
init|=
literal|16384
decl_stmt|;
comment|/** lexical states */
DECL|field|YYINITIAL
specifier|public
specifier|static
specifier|final
name|int
name|YYINITIAL
init|=
literal|0
decl_stmt|;
comment|/**    * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l    * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l    *                  at the beginning of a line    * l is of the form l = 2*k, k a non negative integer    */
DECL|field|ZZ_LEXSTATE
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_LEXSTATE
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
comment|/**     * Translates characters to character classes    */
DECL|field|ZZ_CMAP_PACKED
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_CMAP_PACKED
init|=
literal|"\47\0\1\140\4\0\1\137\1\0\1\140\1\0\12\134\1\136\1\137"
operator|+
literal|"\5\0\32\132\4\0\1\141\1\0\32\132\57\0\1\132\2\0\1\133"
operator|+
literal|"\7\0\1\132\1\0\1\136\2\0\1\132\5\0\27\132\1\0\37\132"
operator|+
literal|"\1\0\u01ca\132\4\0\14\132\16\0\5\132\7\0\1\132\1\0\1\132"
operator|+
literal|"\21\0\160\133\5\132\1\0\2\132\2\0\4\132\1\137\7\0\1\132"
operator|+
literal|"\1\136\3\132\1\0\1\132\1\0\24\132\1\0\123\132\1\0\213\132"
operator|+
literal|"\1\0\7\133\236\132\11\0\46\132\2\0\1\132\7\0\47\132\1\0"
operator|+
literal|"\1\137\7\0\55\133\1\0\1\133\1\0\2\133\1\0\2\133\1\0"
operator|+
literal|"\1\133\10\0\33\132\5\0\4\132\1\136\13\0\4\133\10\0\2\137"
operator|+
literal|"\2\0\13\133\5\0\53\132\25\133\12\134\1\0\1\134\1\137\1\0"
operator|+
literal|"\2\132\1\133\143\132\1\0\1\132\7\133\1\133\1\0\6\133\2\132"
operator|+
literal|"\2\133\1\0\4\133\2\132\12\134\3\132\2\0\1\132\17\0\1\133"
operator|+
literal|"\1\132\1\133\36\132\33\133\2\0\131\132\13\133\1\132\16\0\12\134"
operator|+
literal|"\41\132\11\133\2\132\2\0\1\137\1\0\1\132\5\0\26\132\4\133"
operator|+
literal|"\1\132\11\133\1\132\3\133\1\132\5\133\22\0\31\132\3\133\244\0"
operator|+
literal|"\4\133\66\132\3\133\1\132\22\133\1\132\7\133\12\132\2\133\2\0"
operator|+
literal|"\12\134\1\0\7\132\1\0\7\132\1\0\3\133\1\0\10\132\2\0"
operator|+
literal|"\2\132\2\0\26\132\1\0\7\132\1\0\1\132\3\0\4\132\2\0"
operator|+
literal|"\1\133\1\132\7\133\2\0\2\133\2\0\3\133\1\132\10\0\1\133"
operator|+
literal|"\4\0\2\132\1\0\3\132\2\133\2\0\12\134\2\132\17\0\3\133"
operator|+
literal|"\1\0\6\132\4\0\2\132\2\0\26\132\1\0\7\132\1\0\2\132"
operator|+
literal|"\1\0\2\132\1\0\2\132\2\0\1\133\1\0\5\133\4\0\2\133"
operator|+
literal|"\2\0\3\133\3\0\1\133\7\0\4\132\1\0\1\132\7\0\12\134"
operator|+
literal|"\2\133\3\132\1\133\13\0\3\133\1\0\11\132\1\0\3\132\1\0"
operator|+
literal|"\26\132\1\0\7\132\1\0\2\132\1\0\5\132\2\0\1\133\1\132"
operator|+
literal|"\10\133\1\0\3\133\1\0\3\133\2\0\1\132\17\0\2\132\2\133"
operator|+
literal|"\2\0\12\134\21\0\3\133\1\0\10\132\2\0\2\132\2\0\26\132"
operator|+
literal|"\1\0\7\132\1\0\2\132\1\0\5\132\2\0\1\133\1\132\7\133"
operator|+
literal|"\2\0\2\133\2\0\3\133\10\0\2\133\4\0\2\132\1\0\3\132"
operator|+
literal|"\2\133\2\0\12\134\1\0\1\132\20\0\1\133\1\132\1\0\6\132"
operator|+
literal|"\3\0\3\132\1\0\4\132\3\0\2\132\1\0\1\132\1\0\2\132"
operator|+
literal|"\3\0\2\132\3\0\3\132\3\0\14\132\4\0\5\133\3\0\3\133"
operator|+
literal|"\1\0\4\133\2\0\1\132\6\0\1\133\16\0\12\134\21\0\3\133"
operator|+
literal|"\1\0\10\132\1\0\3\132\1\0\27\132\1\0\12\132\1\0\5\132"
operator|+
literal|"\3\0\1\132\7\133\1\0\3\133\1\0\4\133\7\0\2\133\1\0"
operator|+
literal|"\2\132\6\0\2\132\2\133\2\0\12\134\22\0\2\133\1\0\10\132"
operator|+
literal|"\1\0\3\132\1\0\27\132\1\0\12\132\1\0\5\132\2\0\1\133"
operator|+
literal|"\1\132\7\133\1\0\3\133\1\0\4\133\7\0\2\133\7\0\1\132"
operator|+
literal|"\1\0\2\132\2\133\2\0\12\134\1\0\2\132\17\0\2\133\1\0"
operator|+
literal|"\10\132\1\0\3\132\1\0\51\132\2\0\1\132\7\133\1\0\3\133"
operator|+
literal|"\1\0\4\133\1\132\10\0\1\133\10\0\2\132\2\133\2\0\12\134"
operator|+
literal|"\12\0\6\132\2\0\2\133\1\0\22\132\3\0\30\132\1\0\11\132"
operator|+
literal|"\1\0\1\132\2\0\7\132\3\0\1\133\4\0\6\133\1\0\1\133"
operator|+
literal|"\1\0\10\133\22\0\2\133\15\0\60\142\1\143\2\142\7\143\5\0"
operator|+
literal|"\7\142\10\143\1\0\12\134\47\0\2\142\1\0\1\142\2\0\2\142"
operator|+
literal|"\1\0\1\142\2\0\1\142\6\0\4\142\1\0\7\142\1\0\3\142"
operator|+
literal|"\1\0\1\142\1\0\1\142\2\0\2\142\1\0\4\142\1\143\2\142"
operator|+
literal|"\6\143\1\0\2\143\1\142\2\0\5\142\1\0\1\142\1\0\6\143"
operator|+
literal|"\2\0\12\134\2\0\2\142\42\0\1\132\27\0\2\133\6\0\12\134"
operator|+
literal|"\13\0\1\133\1\0\1\133\1\0\1\133\4\0\2\133\10\132\1\0"
operator|+
literal|"\44\132\4\0\24\133\1\0\2\133\5\132\13\133\1\0\44\133\11\0"
operator|+
literal|"\1\133\71\0\53\142\24\143\1\142\12\134\6\0\6\142\4\143\4\142"
operator|+
literal|"\3\143\1\142\3\143\2\142\7\143\3\142\4\143\15\142\14\143\1\142"
operator|+
literal|"\1\143\12\134\4\143\2\142\46\132\12\0\53\132\1\0\1\132\3\0"
operator|+
literal|"\u0149\132\1\0\4\132\2\0\7\132\1\0\1\132\1\0\4\132\2\0"
operator|+
literal|"\51\132\1\0\4\132\2\0\41\132\1\0\4\132\2\0\7\132\1\0"
operator|+
literal|"\1\132\1\0\4\132\2\0\17\132\1\0\71\132\1\0\4\132\2\0"
operator|+
literal|"\103\132\2\0\3\133\40\0\20\132\20\0\125\132\14\0\u026c\132\2\0"
operator|+
literal|"\21\132\1\0\32\132\5\0\113\132\3\0\3\132\17\0\15\132\1\0"
operator|+
literal|"\4\132\3\133\13\0\22\132\3\133\13\0\22\132\2\133\14\0\15\132"
operator|+
literal|"\1\0\3\132\1\0\2\133\14\0\64\142\2\143\36\143\3\0\1\142"
operator|+
literal|"\4\0\1\142\1\143\2\0\12\134\41\0\3\133\2\0\12\134\6\0"
operator|+
literal|"\130\132\10\0\51\132\1\133\1\132\5\0\106\132\12\0\35\132\3\0"
operator|+
literal|"\14\133\4\0\14\133\12\0\12\134\36\142\2\0\5\142\13\0\54\142"
operator|+
literal|"\4\0\21\143\7\142\2\143\6\0\12\134\1\142\3\0\2\142\40\0"
operator|+
literal|"\27\132\5\133\4\0\65\142\12\143\1\0\35\143\2\0\1\133\12\134"
operator|+
literal|"\6\0\12\134\6\0\16\142\122\0\5\133\57\132\21\133\7\132\4\0"
operator|+
literal|"\12\134\21\0\11\133\14\0\3\133\36\132\12\133\3\0\2\132\12\134"
operator|+
literal|"\6\0\46\132\16\133\14\0\44\132\24\133\10\0\12\134\3\0\3\132"
operator|+
literal|"\12\134\44\132\122\0\3\133\1\0\25\133\4\132\1\133\4\132\1\133"
operator|+
literal|"\15\0\300\132\47\133\25\0\4\133\u0116\132\2\0\6\132\2\0\46\132"
operator|+
literal|"\2\0\6\132\2\0\10\132\1\0\1\132\1\0\1\132\1\0\1\132"
operator|+
literal|"\1\0\37\132\2\0\65\132\1\0\7\132\1\0\1\132\3\0\3\132"
operator|+
literal|"\1\0\7\132\3\0\4\132\2\0\6\132\4\0\15\132\5\0\3\132"
operator|+
literal|"\1\0\7\132\17\0\2\133\2\133\10\0\2\140\12\0\1\140\2\0"
operator|+
literal|"\1\136\2\0\5\133\20\0\2\141\3\0\1\137\17\0\1\141\13\0"
operator|+
literal|"\5\133\5\0\6\133\1\0\1\132\15\0\1\132\20\0\15\132\63\0"
operator|+
literal|"\41\133\21\0\1\132\4\0\1\132\2\0\12\132\1\0\1\132\3\0"
operator|+
literal|"\5\132\6\0\1\132\1\0\1\132\1\0\1\132\1\0\4\132\1\0"
operator|+
literal|"\13\132\2\0\4\132\5\0\5\132\4\0\1\132\21\0\51\132\u032d\0"
operator|+
literal|"\64\132\u0716\0\57\132\1\0\57\132\1\0\205\132\6\0\4\132\3\133"
operator|+
literal|"\16\0\46\132\12\0\66\132\11\0\1\132\17\0\1\133\27\132\11\0"
operator|+
literal|"\7\132\1\0\7\132\1\0\7\132\1\0\7\132\1\0\7\132\1\0"
operator|+
literal|"\7\132\1\0\7\132\1\0\7\132\1\0\40\133\57\0\1\132\120\0"
operator|+
literal|"\32\144\1\0\131\144\14\0\326\144\57\0\1\132\1\0\1\144\31\0"
operator|+
literal|"\11\144\6\133\1\0\5\135\2\0\3\144\1\132\1\132\4\0\126\145"
operator|+
literal|"\2\0\2\133\2\135\3\145\133\135\1\0\4\135\5\0\51\132\3\0"
operator|+
literal|"\136\132\21\0\33\132\65\0\20\135\320\0\57\135\1\0\130\135\250\0"
operator|+
literal|"\u19b6\144\112\0\u51cc\144\64\0\u048d\132\103\0\56\132\2\0\u010d\132\3\0"
operator|+
literal|"\20\132\12\134\2\132\24\0\57\132\4\133\11\0\2\133\1\0\31\132"
operator|+
literal|"\10\0\120\132\2\133\45\0\11\132\2\0\147\132\2\0\4\132\1\0"
operator|+
literal|"\2\132\16\0\12\132\120\0\10\132\1\133\3\132\1\133\4\132\1\133"
operator|+
literal|"\27\132\5\133\30\0\64\132\14\0\2\133\62\132\21\133\13\0\12\134"
operator|+
literal|"\6\0\22\133\6\132\3\0\1\132\4\0\12\134\34\132\10\133\2\0"
operator|+
literal|"\27\132\15\133\14\0\35\132\3\0\4\133\57\132\16\133\16\0\1\132"
operator|+
literal|"\12\134\46\0\51\132\16\133\11\0\3\132\1\133\10\132\2\133\2\0"
operator|+
literal|"\12\134\6\0\33\142\1\143\4\0\60\142\1\143\1\142\3\143\2\142"
operator|+
literal|"\2\143\5\142\2\143\1\142\1\143\1\142\30\0\5\142\41\0\6\132"
operator|+
literal|"\2\0\6\132\2\0\6\132\11\0\7\132\1\0\7\132\221\0\43\132"
operator|+
literal|"\10\133\1\0\2\133\2\0\12\134\6\0\u2ba4\132\14\0\27\132\4\0"
operator|+
literal|"\61\132\4\0\1\31\1\25\1\46\1\43\1\13\3\0\1\7\1\5"
operator|+
literal|"\2\0\1\3\1\1\14\0\1\11\21\0\1\112\7\0\1\65\1\17"
operator|+
literal|"\6\0\1\130\3\0\1\120\1\120\1\120\1\120\1\120\1\120\1\120"
operator|+
literal|"\1\120\1\120\1\120\1\120\1\120\1\120\1\120\1\120\1\120\1\120"
operator|+
literal|"\1\120\1\120\1\120\1\120\1\120\1\120\1\120\1\120\1\120\1\120"
operator|+
literal|"\1\120\1\120\1\120\1\120\1\120\1\120\1\120\1\120\1\120\1\120"
operator|+
literal|"\1\120\1\120\1\120\1\120\1\121\1\120\1\120\1\120\1\125\1\123"
operator|+
literal|"\17\0\1\114\u02c1\0\1\70\277\0\1\113\1\71\1\2\3\124\2\35"
operator|+
literal|"\1\124\1\35\2\124\1\14\21\124\2\60\7\73\1\72\7\73\7\52"
operator|+
literal|"\1\15\1\52\1\75\2\45\1\44\1\75\1\45\1\44\10\75\2\63"
operator|+
literal|"\5\61\2\54\5\61\1\6\10\37\5\21\3\27\12\106\20\27\3\42"
operator|+
literal|"\32\30\1\26\2\24\2\110\1\111\2\110\2\111\2\110\1\111\3\24"
operator|+
literal|"\1\16\2\24\12\64\1\74\1\41\1\34\1\64\6\41\1\34\66\41"
operator|+
literal|"\5\115\6\103\1\51\4\103\2\51\10\103\1\51\7\100\1\12\2\100"
operator|+
literal|"\32\103\1\12\4\100\1\12\5\102\1\101\1\102\3\101\7\102\1\101"
operator|+
literal|"\23\102\5\67\3\102\6\67\2\67\6\66\10\66\2\100\7\66\36\100"
operator|+
literal|"\4\66\102\100\15\115\1\77\2\115\1\131\3\117\1\115\2\117\5\115"
operator|+
literal|"\4\117\4\116\1\115\3\116\1\115\5\116\26\56\4\23\1\105\2\104"
operator|+
literal|"\4\122\1\104\2\122\3\76\33\122\35\55\3\122\35\126\3\122\6\126"
operator|+
literal|"\2\33\31\126\1\33\17\126\6\122\4\22\1\10\37\22\1\10\4\22"
operator|+
literal|"\25\62\1\127\11\62\21\55\5\62\1\57\12\40\13\62\4\55\1\50"
operator|+
literal|"\6\55\12\122\17\55\1\47\3\53\15\20\11\36\1\32\24\36\2\20"
operator|+
literal|"\11\36\1\32\31\36\1\32\4\20\4\36\2\32\2\107\1\4\5\107"
operator|+
literal|"\52\4\u1900\0\u012e\144\2\0\76\144\2\0\152\144\46\0\7\132\14\0"
operator|+
literal|"\5\132\5\0\1\132\1\133\12\132\1\0\15\132\1\0\5\132\1\0"
operator|+
literal|"\1\132\1\0\2\132\1\0\2\132\1\0\154\132\41\0\u016b\132\22\0"
operator|+
literal|"\100\132\2\0\66\132\50\0\14\132\4\0\20\133\1\137\2\0\1\136"
operator|+
literal|"\1\137\13\0\7\133\14\0\2\141\30\0\3\141\1\137\1\0\1\140"
operator|+
literal|"\1\0\1\137\1\136\32\0\5\132\1\0\207\132\2\0\1\133\7\0"
operator|+
literal|"\1\140\4\0\1\137\1\0\1\140\1\0\12\134\1\136\1\137\5\0"
operator|+
literal|"\32\132\4\0\1\141\1\0\32\132\13\0\70\135\2\133\37\132\3\0"
operator|+
literal|"\6\132\2\0\6\132\2\0\6\132\2\0\3\132\34\0\3\133\4\0"
decl_stmt|;
comment|/**     * Translates characters to character classes    */
DECL|field|ZZ_CMAP
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|ZZ_CMAP
init|=
name|zzUnpackCMap
argument_list|(
name|ZZ_CMAP_PACKED
argument_list|)
decl_stmt|;
comment|/**     * Translates DFA states to action switch labels.    */
DECL|field|ZZ_ACTION
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_ACTION
init|=
name|zzUnpackAction
argument_list|()
decl_stmt|;
DECL|field|ZZ_ACTION_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ACTION_PACKED_0
init|=
literal|"\1\0\23\1\1\2\1\3\1\2\1\1\1\4\1\5"
operator|+
literal|"\1\6\15\0\1\2\1\0\1\2\10\0\1\3\61\0"
decl_stmt|;
DECL|method|zzUnpackAction
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackAction
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|101
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackAction
argument_list|(
name|ZZ_ACTION_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackAction
specifier|private
specifier|static
name|int
name|zzUnpackAction
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
do|do
name|result
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|j
return|;
block|}
comment|/**     * Translates a state to a row index in the transition table    */
DECL|field|ZZ_ROWMAP
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_ROWMAP
init|=
name|zzUnpackRowMap
argument_list|()
decl_stmt|;
DECL|field|ZZ_ROWMAP_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ROWMAP_PACKED_0
init|=
literal|"\0\0\0\146\0\314\0\u0132\0\u0198\0\u01fe\0\u0264\0\u02ca"
operator|+
literal|"\0\u0330\0\u0396\0\u03fc\0\u0462\0\u04c8\0\u052e\0\u0594\0\u05fa"
operator|+
literal|"\0\u0660\0\u06c6\0\u072c\0\u0792\0\u07f8\0\u085e\0\u08c4\0\u092a"
operator|+
literal|"\0\u0990\0\146\0\146\0\314\0\u0132\0\u0198\0\u01fe\0\u0264"
operator|+
literal|"\0\u09f6\0\u0a5c\0\u0ac2\0\u0b28\0\u0462\0\u0b8e\0\u0bf4\0\u0c5a"
operator|+
literal|"\0\u0cc0\0\u0d26\0\u0d8c\0\u0df2\0\u0330\0\u0396\0\u0e58\0\u0ebe"
operator|+
literal|"\0\u0f24\0\u0f8a\0\u0ff0\0\u1056\0\u10bc\0\u1122\0\u1188\0\u11ee"
operator|+
literal|"\0\u1254\0\u12ba\0\u1320\0\u1386\0\u13ec\0\u1452\0\u14b8\0\u092a"
operator|+
literal|"\0\u151e\0\u1584\0\u15ea\0\u1650\0\u16b6\0\u171c\0\u1782\0\u17e8"
operator|+
literal|"\0\u184e\0\u18b4\0\u191a\0\u1980\0\u19e6\0\u1a4c\0\u1ab2\0\u1b18"
operator|+
literal|"\0\u1b7e\0\u1be4\0\u1c4a\0\u1cb0\0\u1d16\0\u1d7c\0\u1de2\0\u1e48"
operator|+
literal|"\0\u1eae\0\u1f14\0\u1f7a\0\u1fe0\0\u2046\0\u20ac\0\u2112\0\u2178"
operator|+
literal|"\0\u21de\0\u2244\0\u22aa\0\u2310\0\u2376"
decl_stmt|;
DECL|method|zzUnpackRowMap
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackRowMap
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|101
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackRowMap
argument_list|(
name|ZZ_ROWMAP_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackRowMap
specifier|private
specifier|static
name|int
name|zzUnpackRowMap
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|high
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
operator|<<
literal|16
decl_stmt|;
name|result
index|[
name|j
operator|++
index|]
operator|=
name|high
operator||
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
expr_stmt|;
block|}
return|return
name|j
return|;
block|}
comment|/**     * The transition table of the DFA    */
DECL|field|ZZ_TRANS
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_TRANS
init|=
name|zzUnpackTrans
argument_list|()
decl_stmt|;
DECL|field|ZZ_TRANS_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_TRANS_PACKED_0
init|=
literal|"\1\2\1\3\1\2\1\4\1\2\1\5\1\2\1\6"
operator|+
literal|"\1\2\1\7\1\2\1\10\3\2\1\11\5\2\1\12"
operator|+
literal|"\3\2\1\13\11\2\1\14\2\2\1\15\43\2\1\16"
operator|+
literal|"\1\2\1\17\3\2\1\20\1\21\1\2\1\22\1\2"
operator|+
literal|"\1\23\2\2\1\24\1\2\1\25\1\2\1\26\1\27"
operator|+
literal|"\3\2\1\30\2\31\1\32\1\33\150\0\1\25\11\0"
operator|+
literal|"\1\25\20\0\1\25\22\0\1\25\10\0\3\25\17\0"
operator|+
literal|"\1\25\10\0\1\25\23\0\1\25\1\0\1\25\1\0"
operator|+
literal|"\1\25\1\0\1\25\1\0\1\25\1\0\3\25\1\0"
operator|+
literal|"\5\25\1\0\3\25\1\0\11\25\1\0\2\25\1\0"
operator|+
literal|"\16\25\1\0\2\25\1\0\21\25\1\0\1\25\1\0"
operator|+
literal|"\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\0"
operator|+
literal|"\1\25\16\0\1\25\3\0\1\25\5\0\2\25\3\0"
operator|+
literal|"\1\25\13\0\1\25\1\0\1\25\4\0\2\25\4\0"
operator|+
literal|"\1\25\1\0\1\25\3\0\2\25\1\0\1\25\5\0"
operator|+
literal|"\3\25\1\0\1\25\15\0\1\25\10\0\1\25\23\0"
operator|+
literal|"\1\25\3\0\1\25\1\0\1\25\1\0\1\25\1\0"
operator|+
literal|"\3\25\2\0\4\25\1\0\3\25\2\0\3\25\1\0"
operator|+
literal|"\4\25\1\0\2\25\2\0\3\25\1\0\11\25\1\0"
operator|+
literal|"\2\25\1\0\16\25\1\0\2\25\1\0\1\25\1\0"
operator|+
literal|"\3\25\2\0\1\25\1\0\1\25\1\0\2\25\1\0"
operator|+
literal|"\1\25\16\0\1\25\3\0\1\25\3\0\1\25\1\0"
operator|+
literal|"\3\25\2\0\1\25\1\0\2\25\1\0\3\25\3\0"
operator|+
literal|"\2\25\1\0\1\25\1\0\2\25\1\0\2\25\3\0"
operator|+
literal|"\2\25\1\0\1\25\1\0\1\25\1\0\2\25\1\0"
operator|+
literal|"\2\25\1\0\2\25\1\0\5\25\1\0\5\25\1\0"
operator|+
literal|"\2\25\1\0\2\25\1\0\1\25\1\0\3\25\4\0"
operator|+
literal|"\1\25\4\0\1\25\30\0\3\25\5\0\1\25\1\0"
operator|+
literal|"\1\25\1\0\1\25\4\0\1\25\14\0\1\25\5\0"
operator|+
literal|"\1\25\11\0\2\25\12\0\1\26\1\0\2\25\12\0"
operator|+
literal|"\1\25\23\0\1\25\1\0\1\26\7\0\2\25\2\0"
operator|+
literal|"\5\25\2\0\2\25\4\0\6\25\1\0\2\25\4\0"
operator|+
literal|"\5\25\1\0\5\25\1\0\2\25\1\0\3\25\1\0"
operator|+
literal|"\4\25\1\0\5\25\1\26\1\0\1\25\1\0\1\25"
operator|+
literal|"\1\0\3\25\2\0\1\25\1\0\1\25\1\0\1\25"
operator|+
literal|"\2\0\1\25\16\0\1\25\3\0\1\25\5\0\2\25"
operator|+
literal|"\3\0\1\25\4\0\3\25\4\0\1\25\1\0\1\25"
operator|+
literal|"\2\0\1\25\1\0\2\25\4\0\1\25\1\0\1\25"
operator|+
literal|"\3\0\2\25\1\0\1\25\5\0\3\25\1\0\1\25"
operator|+
literal|"\10\0\1\25\1\0\2\26\1\0\1\25\10\0\1\25"
operator|+
literal|"\23\0\1\25\3\0\1\25\6\0\2\25\5\0\1\25"
operator|+
literal|"\1\0\1\25\1\0\1\25\1\0\11\25\2\0\1\25"
operator|+
literal|"\4\0\1\25\4\0\6\25\2\0\1\25\1\0\1\25"
operator|+
literal|"\1\0\3\25\3\0\2\25\4\0\3\25\1\0\1\25"
operator|+
literal|"\10\0\1\25\1\0\2\25\20\0\1\25\11\0\2\25"
operator|+
literal|"\17\0\1\25\6\0\2\25\4\0\1\25\5\0\1\25"
operator|+
literal|"\2\0\1\25\5\0\3\25\1\0\1\25\15\0\1\25"
operator|+
literal|"\10\0\1\25\23\0\1\25\3\0\1\25\5\0\1\25"
operator|+
literal|"\32\0\15\25\5\0\3\25\1\0\1\25\5\0\1\25"
operator|+
literal|"\7\0\1\25\2\0\1\25\5\0\1\25\2\0\1\25"
operator|+
literal|"\1\0\1\25\105\0\1\33\21\0\1\27\34\0\1\32"
operator|+
literal|"\3\0\1\32\3\0\1\32\1\0\3\32\2\0\1\32"
operator|+
literal|"\2\0\1\32\1\0\3\32\3\0\2\32\1\0\1\32"
operator|+
literal|"\1\0\2\32\1\0\2\32\3\0\2\32\1\0\1\32"
operator|+
literal|"\3\0\2\32\1\0\2\32\1\0\2\32\1\0\5\32"
operator|+
literal|"\1\0\5\32\2\0\1\32\1\0\2\32\1\0\1\32"
operator|+
literal|"\1\0\3\32\4\0\1\32\4\0\1\32\16\0\1\32"
operator|+
literal|"\1\0\1\32\1\0\1\32\1\0\1\32\1\0\1\32"
operator|+
literal|"\1\0\3\32\1\0\5\32\1\0\3\32\1\0\11\32"
operator|+
literal|"\1\0\2\32\1\0\16\32\1\0\2\32\1\0\21\32"
operator|+
literal|"\1\0\1\32\1\0\3\32\2\0\1\32\1\0\1\32"
operator|+
literal|"\1\0\2\32\1\0\1\32\16\0\1\32\1\0\1\32"
operator|+
literal|"\1\0\1\32\3\0\1\32\1\0\3\32\1\0\2\32"
operator|+
literal|"\1\0\2\32\1\0\3\32\1\0\11\32\1\0\2\32"
operator|+
literal|"\1\0\16\32\1\0\2\32\1\0\21\32\1\0\1\32"
operator|+
literal|"\1\0\3\32\2\0\1\32\1\0\1\32\1\0\2\32"
operator|+
literal|"\1\0\1\32\16\0\1\32\11\0\1\32\20\0\1\32"
operator|+
literal|"\33\0\1\32\21\0\1\32\10\0\1\32\23\0\1\32"
operator|+
literal|"\1\0\1\32\1\0\1\32\1\0\1\32\1\0\1\32"
operator|+
literal|"\1\0\3\32\1\0\5\32\1\0\3\32\1\0\6\32"
operator|+
literal|"\1\0\2\32\1\0\2\32\1\0\10\32\1\0\5\32"
operator|+
literal|"\1\0\2\32\1\0\21\32\1\0\1\32\1\0\3\32"
operator|+
literal|"\2\0\1\32\1\0\1\32\1\0\2\32\1\0\1\32"
operator|+
literal|"\145\0\1\33\15\0\1\34\1\0\1\35\1\0\1\36"
operator|+
literal|"\1\0\1\37\1\0\1\40\1\0\1\41\3\0\1\42"
operator|+
literal|"\5\0\1\43\3\0\1\44\11\0\1\45\2\0\1\46"
operator|+
literal|"\16\0\1\47\2\0\1\50\41\0\2\25\1\51\1\0"
operator|+
literal|"\1\52\1\0\1\52\1\53\1\0\1\25\3\0\1\34"
operator|+
literal|"\1\0\1\35\1\0\1\36\1\0\1\37\1\0\1\40"
operator|+
literal|"\1\0\1\54\3\0\1\55\5\0\1\56\3\0\1\57"
operator|+
literal|"\11\0\1\45\2\0\1\60\16\0\1\61\2\0\1\62"
operator|+
literal|"\41\0\1\25\2\26\2\0\2\63\1\64\1\0\1\26"
operator|+
literal|"\15\0\1\65\15\0\1\66\14\0\1\67\16\0\1\70"
operator|+
literal|"\2\0\1\71\21\0\1\72\20\0\1\27\1\0\1\27"
operator|+
literal|"\3\0\1\53\1\0\1\27\3\0\1\34\1\0\1\35"
operator|+
literal|"\1\0\1\36\1\0\1\37\1\0\1\40\1\0\1\73"
operator|+
literal|"\3\0\1\55\5\0\1\56\3\0\1\74\11\0\1\45"
operator|+
literal|"\2\0\1\75\16\0\1\76\2\0\1\77\21\0\1\72"
operator|+
literal|"\17\0\1\25\1\100\1\26\1\27\3\0\1\100\1\0"
operator|+
literal|"\1\100\144\0\2\31\4\0\1\25\11\0\3\25\5\0"
operator|+
literal|"\1\25\1\0\1\25\1\0\1\25\4\0\1\25\4\0"
operator|+
literal|"\1\25\1\0\2\25\4\0\1\25\5\0\1\25\3\0"
operator|+
literal|"\1\25\4\0\5\25\10\0\1\51\1\0\2\25\1\0"
operator|+
literal|"\1\25\10\0\1\25\23\0\1\25\1\0\1\51\7\0"
operator|+
literal|"\2\25\2\0\5\25\2\0\2\25\4\0\6\25\1\0"
operator|+
literal|"\2\25\4\0\5\25\1\0\5\25\1\0\2\25\1\0"
operator|+
literal|"\3\25\1\0\4\25\1\0\5\25\1\51\1\0\1\25"
operator|+
literal|"\1\0\1\25\1\0\3\25\2\0\1\25\1\0\1\25"
operator|+
literal|"\1\0\1\25\2\0\1\25\16\0\1\25\3\0\1\25"
operator|+
literal|"\5\0\2\25\3\0\1\25\4\0\3\25\4\0\1\25"
operator|+
literal|"\1\0\1\25\2\0\1\25\1\0\2\25\4\0\1\25"
operator|+
literal|"\1\0\1\25\3\0\2\25\1\0\1\25\5\0\3\25"
operator|+
literal|"\1\0\1\25\10\0\1\25\1\0\2\51\1\0\1\25"
operator|+
literal|"\10\0\1\25\23\0\1\25\3\0\1\25\6\0\2\25"
operator|+
literal|"\5\0\1\25\1\0\1\25\1\0\1\25\1\0\11\25"
operator|+
literal|"\2\0\1\25\4\0\1\25\4\0\6\25\2\0\1\25"
operator|+
literal|"\1\0\1\25\1\0\3\25\1\0\1\25\1\0\2\25"
operator|+
literal|"\4\0\3\25\1\0\1\25\10\0\1\25\1\0\2\25"
operator|+
literal|"\20\0\1\25\3\0\1\25\5\0\1\25\32\0\15\25"
operator|+
literal|"\5\0\3\25\1\0\1\25\5\0\3\25\5\0\1\25"
operator|+
literal|"\2\0\2\25\4\0\1\25\2\0\1\25\1\0\1\25"
operator|+
literal|"\102\0\2\25\6\0\1\25\55\0\1\25\3\0\1\25"
operator|+
literal|"\2\0\1\25\3\0\1\25\5\0\1\25\7\0\1\25"
operator|+
literal|"\4\0\2\25\3\0\2\25\1\0\1\25\4\0\1\25"
operator|+
literal|"\1\0\1\25\2\0\2\25\1\0\3\25\1\0\1\25"
operator|+
literal|"\2\0\4\25\2\0\1\25\40\0\1\34\1\0\1\35"
operator|+
literal|"\1\0\1\36\1\0\1\37\1\0\1\40\1\0\1\101"
operator|+
literal|"\3\0\1\42\5\0\1\43\3\0\1\102\11\0\1\45"
operator|+
literal|"\2\0\1\103\16\0\1\104\2\0\1\105\41\0\1\25"
operator|+
literal|"\2\51\2\0\2\106\1\53\1\0\1\51\3\0\1\34"
operator|+
literal|"\1\0\1\35\1\0\1\36\1\0\1\37\1\0\1\40"
operator|+
literal|"\1\0\1\107\3\0\1\110\5\0\1\111\3\0\1\112"
operator|+
literal|"\11\0\1\45\2\0\1\113\16\0\1\114\2\0\1\115"
operator|+
literal|"\41\0\1\25\1\52\7\0\1\52\3\0\1\34\1\0"
operator|+
literal|"\1\35\1\0\1\36\1\0\1\37\1\0\1\40\1\0"
operator|+
literal|"\1\116\3\0\1\42\5\0\1\43\3\0\1\117\11\0"
operator|+
literal|"\1\45\2\0\1\120\16\0\1\121\2\0\1\122\21\0"
operator|+
literal|"\1\72\17\0\1\25\1\53\1\51\1\27\3\0\1\53"
operator|+
literal|"\1\0\1\53\4\0\1\26\11\0\3\25\5\0\1\25"
operator|+
literal|"\1\0\1\25\1\0\1\25\4\0\1\25\4\0\1\26"
operator|+
literal|"\1\0\2\26\4\0\1\25\5\0\1\25\3\0\1\26"
operator|+
literal|"\4\0\1\26\2\25\2\26\10\0\1\26\1\0\2\25"
operator|+
literal|"\1\0\1\26\10\0\1\25\23\0\1\25\3\0\1\25"
operator|+
literal|"\6\0\2\25\5\0\1\25\1\0\1\25\1\0\1\25"
operator|+
literal|"\1\0\11\25\2\0\1\25\4\0\1\25\4\0\6\25"
operator|+
literal|"\2\0\1\25\1\0\1\25\1\0\3\25\1\0\1\26"
operator|+
literal|"\1\0\2\25\4\0\3\25\1\0\1\25\10\0\1\25"
operator|+
literal|"\1\0\2\25\20\0\1\25\3\0\1\25\5\0\1\25"
operator|+
literal|"\32\0\15\25\5\0\3\25\1\0\1\25\5\0\1\25"
operator|+
literal|"\2\26\5\0\1\25\2\0\1\25\1\26\4\0\1\25"
operator|+
literal|"\2\0\1\25\1\0\1\25\102\0\2\26\6\0\1\26"
operator|+
literal|"\55\0\1\26\3\0\1\26\2\0\1\26\3\0\1\26"
operator|+
literal|"\5\0\1\26\7\0\1\26\4\0\2\26\3\0\2\26"
operator|+
literal|"\1\0\1\26\4\0\1\26\1\0\1\26\2\0\2\26"
operator|+
literal|"\1\0\3\26\1\0\1\26\2\0\4\26\2\0\1\26"
operator|+
literal|"\52\0\1\123\3\0\1\124\5\0\1\125\3\0\1\126"
operator|+
literal|"\14\0\1\127\16\0\1\130\2\0\1\131\42\0\1\63"
operator|+
literal|"\1\26\6\0\1\63\3\0\1\34\1\0\1\35\1\0"
operator|+
literal|"\1\36\1\0\1\37\1\0\1\40\1\0\1\132\3\0"
operator|+
literal|"\1\55\5\0\1\56\3\0\1\133\11\0\1\45\2\0"
operator|+
literal|"\1\134\16\0\1\135\2\0\1\136\21\0\1\72\17\0"
operator|+
literal|"\1\25\1\64\1\26\1\27\3\0\1\64\1\0\1\64"
operator|+
literal|"\4\0\1\27\37\0\1\27\1\0\2\27\16\0\1\27"
operator|+
literal|"\4\0\1\27\2\0\2\27\15\0\1\27\131\0\1\27"
operator|+
literal|"\152\0\2\27\11\0\1\27\114\0\2\27\6\0\1\27"
operator|+
literal|"\55\0\1\27\3\0\1\27\2\0\1\27\3\0\1\27"
operator|+
literal|"\5\0\1\27\7\0\1\27\4\0\2\27\3\0\2\27"
operator|+
literal|"\1\0\1\27\4\0\1\27\1\0\1\27\2\0\2\27"
operator|+
literal|"\1\0\3\27\1\0\1\27\2\0\4\27\2\0\1\27"
operator|+
literal|"\152\0\1\27\34\0\1\100\11\0\3\25\5\0\1\25"
operator|+
literal|"\1\0\1\25\1\0\1\25\4\0\1\25\4\0\1\100"
operator|+
literal|"\1\0\2\100\4\0\1\25\5\0\1\25\3\0\1\100"
operator|+
literal|"\4\0\1\100\2\25\2\100\10\0\1\26\1\0\2\25"
operator|+
literal|"\1\0\1\100\10\0\1\25\23\0\1\25\3\0\1\25"
operator|+
literal|"\6\0\2\25\5\0\1\25\1\0\1\25\1\0\1\25"
operator|+
literal|"\1\0\11\25\2\0\1\25\4\0\1\25\4\0\6\25"
operator|+
literal|"\2\0\1\25\1\0\1\25\1\0\3\25\1\0\1\100"
operator|+
literal|"\1\0\2\25\4\0\3\25\1\0\1\25\10\0\1\25"
operator|+
literal|"\1\0\2\25\20\0\1\25\3\0\1\25\5\0\1\25"
operator|+
literal|"\32\0\15\25\5\0\3\25\1\0\1\25\5\0\1\25"
operator|+
literal|"\2\100\5\0\1\25\2\0\1\25\1\100\4\0\1\25"
operator|+
literal|"\2\0\1\25\1\0\1\25\102\0\2\100\6\0\1\100"
operator|+
literal|"\55\0\1\100\3\0\1\100\2\0\1\100\3\0\1\100"
operator|+
literal|"\5\0\1\100\7\0\1\100\4\0\2\100\3\0\2\100"
operator|+
literal|"\1\0\1\100\4\0\1\100\1\0\1\100\2\0\2\100"
operator|+
literal|"\1\0\3\100\1\0\1\100\2\0\4\100\2\0\1\100"
operator|+
literal|"\41\0\1\51\11\0\3\25\5\0\1\25\1\0\1\25"
operator|+
literal|"\1\0\1\25\4\0\1\25\4\0\1\51\1\0\2\51"
operator|+
literal|"\4\0\1\25\5\0\1\25\3\0\1\51\4\0\1\51"
operator|+
literal|"\2\25\2\51\10\0\1\51\1\0\2\25\1\0\1\51"
operator|+
literal|"\10\0\1\25\23\0\1\25\3\0\1\25\6\0\2\25"
operator|+
literal|"\5\0\1\25\1\0\1\25\1\0\1\25\1\0\11\25"
operator|+
literal|"\2\0\1\25\4\0\1\25\4\0\6\25\2\0\1\25"
operator|+
literal|"\1\0\1\25\1\0\3\25\1\0\1\51\1\0\2\25"
operator|+
literal|"\4\0\3\25\1\0\1\25\10\0\1\25\1\0\2\25"
operator|+
literal|"\20\0\1\25\3\0\1\25\5\0\1\25\32\0\15\25"
operator|+
literal|"\5\0\3\25\1\0\1\25\5\0\1\25\2\51\5\0"
operator|+
literal|"\1\25\2\0\1\25\1\51\4\0\1\25\2\0\1\25"
operator|+
literal|"\1\0\1\25\102\0\2\51\6\0\1\51\55\0\1\51"
operator|+
literal|"\3\0\1\51\2\0\1\51\3\0\1\51\5\0\1\51"
operator|+
literal|"\7\0\1\51\4\0\2\51\3\0\2\51\1\0\1\51"
operator|+
literal|"\4\0\1\51\1\0\1\51\2\0\2\51\1\0\3\51"
operator|+
literal|"\1\0\1\51\2\0\4\51\2\0\1\51\52\0\1\137"
operator|+
literal|"\3\0\1\140\5\0\1\141\3\0\1\142\14\0\1\143"
operator|+
literal|"\16\0\1\144\2\0\1\145\42\0\1\106\1\51\6\0"
operator|+
literal|"\1\106\4\0\1\52\11\0\3\25\5\0\1\25\1\0"
operator|+
literal|"\1\25\1\0\1\25\4\0\1\25\4\0\1\52\1\0"
operator|+
literal|"\2\52\4\0\1\25\5\0\1\25\3\0\1\52\4\0"
operator|+
literal|"\1\52\2\25\2\52\12\0\2\25\1\0\1\52\10\0"
operator|+
literal|"\1\25\23\0\1\25\11\0\2\25\2\0\5\25\2\0"
operator|+
literal|"\2\25\4\0\6\25\1\0\2\25\4\0\5\25\1\0"
operator|+
literal|"\5\25\1\0\2\25\1\0\3\25\1\0\4\25\1\0"
operator|+
literal|"\5\25\2\0\1\25\1\0\1\25\1\0\3\25\2\0"
operator|+
literal|"\1\25\1\0\1\25\1\0\1\25\2\0\1\25\16\0"
operator|+
literal|"\1\25\3\0\1\25\5\0\2\25\3\0\1\25\4\0"
operator|+
literal|"\3\25\4\0\1\25\1\0\1\25\2\0\1\25\1\0"
operator|+
literal|"\2\25\4\0\1\25\1\0\1\25\3\0\2\25\1\0"
operator|+
literal|"\1\25\5\0\3\25\1\0\1\25\10\0\1\25\4\0"
operator|+
literal|"\1\25\10\0\1\25\23\0\1\25\3\0\1\25\6\0"
operator|+
literal|"\2\25\5\0\1\25\1\0\1\25\1\0\1\25\1\0"
operator|+
literal|"\11\25\2\0\1\25\4\0\1\25\4\0\6\25\2\0"
operator|+
literal|"\1\25\1\0\1\25\1\0\3\25\1\0\1\52\1\0"
operator|+
literal|"\2\25\4\0\3\25\1\0\1\25\10\0\1\25\1\0"
operator|+
literal|"\2\25\20\0\1\25\3\0\1\25\5\0\1\25\32\0"
operator|+
literal|"\15\25\5\0\3\25\1\0\1\25\5\0\1\25\2\52"
operator|+
literal|"\5\0\1\25\2\0\1\25\1\52\4\0\1\25\2\0"
operator|+
literal|"\1\25\1\0\1\25\102\0\2\52\6\0\1\52\55\0"
operator|+
literal|"\1\52\3\0\1\52\2\0\1\52\3\0\1\52\5\0"
operator|+
literal|"\1\52\7\0\1\52\4\0\2\52\3\0\2\52\1\0"
operator|+
literal|"\1\52\4\0\1\52\1\0\1\52\2\0\2\52\1\0"
operator|+
literal|"\3\52\1\0\1\52\2\0\4\52\2\0\1\52\41\0"
operator|+
literal|"\1\53\11\0\3\25\5\0\1\25\1\0\1\25\1\0"
operator|+
literal|"\1\25\4\0\1\25\4\0\1\53\1\0\2\53\4\0"
operator|+
literal|"\1\25\5\0\1\25\3\0\1\53\4\0\1\53\2\25"
operator|+
literal|"\2\53\10\0\1\51\1\0\2\25\1\0\1\53\10\0"
operator|+
literal|"\1\25\23\0\1\25\3\0\1\25\6\0\2\25\5\0"
operator|+
literal|"\1\25\1\0\1\25\1\0\1\25\1\0\11\25\2\0"
operator|+
literal|"\1\25\4\0\1\25\4\0\6\25\2\0\1\25\1\0"
operator|+
literal|"\1\25\1\0\3\25\1\0\1\53\1\0\2\25\4\0"
operator|+
literal|"\3\25\1\0\1\25\10\0\1\25\1\0\2\25\20\0"
operator|+
literal|"\1\25\3\0\1\25\5\0\1\25\32\0\15\25\5\0"
operator|+
literal|"\3\25\1\0\1\25\5\0\1\25\2\53\5\0\1\25"
operator|+
literal|"\2\0\1\25\1\53\4\0\1\25\2\0\1\25\1\0"
operator|+
literal|"\1\25\102\0\2\53\6\0\1\53\55\0\1\53\3\0"
operator|+
literal|"\1\53\2\0\1\53\3\0\1\53\5\0\1\53\7\0"
operator|+
literal|"\1\53\4\0\2\53\3\0\2\53\1\0\1\53\4\0"
operator|+
literal|"\1\53\1\0\1\53\2\0\2\53\1\0\3\53\1\0"
operator|+
literal|"\1\53\2\0\4\53\2\0\1\53\41\0\1\63\37\0"
operator|+
literal|"\1\63\1\0\2\63\16\0\1\63\4\0\1\63\2\0"
operator|+
literal|"\2\63\10\0\1\26\4\0\1\63\36\0\1\26\102\0"
operator|+
literal|"\1\26\146\0\2\26\133\0\1\63\152\0\2\63\11\0"
operator|+
literal|"\1\63\114\0\2\63\6\0\1\63\55\0\1\63\3\0"
operator|+
literal|"\1\63\2\0\1\63\3\0\1\63\5\0\1\63\7\0"
operator|+
literal|"\1\63\4\0\2\63\3\0\2\63\1\0\1\63\4\0"
operator|+
literal|"\1\63\1\0\1\63\2\0\2\63\1\0\3\63\1\0"
operator|+
literal|"\1\63\2\0\4\63\2\0\1\63\41\0\1\64\11\0"
operator|+
literal|"\3\25\5\0\1\25\1\0\1\25\1\0\1\25\4\0"
operator|+
literal|"\1\25\4\0\1\64\1\0\2\64\4\0\1\25\5\0"
operator|+
literal|"\1\25\3\0\1\64\4\0\1\64\2\25\2\64\10\0"
operator|+
literal|"\1\26\1\0\2\25\1\0\1\64\10\0\1\25\23\0"
operator|+
literal|"\1\25\3\0\1\25\6\0\2\25\5\0\1\25\1\0"
operator|+
literal|"\1\25\1\0\1\25\1\0\11\25\2\0\1\25\4\0"
operator|+
literal|"\1\25\4\0\6\25\2\0\1\25\1\0\1\25\1\0"
operator|+
literal|"\3\25\1\0\1\64\1\0\2\25\4\0\3\25\1\0"
operator|+
literal|"\1\25\10\0\1\25\1\0\2\25\20\0\1\25\3\0"
operator|+
literal|"\1\25\5\0\1\25\32\0\15\25\5\0\3\25\1\0"
operator|+
literal|"\1\25\5\0\1\25\2\64\5\0\1\25\2\0\1\25"
operator|+
literal|"\1\64\4\0\1\25\2\0\1\25\1\0\1\25\102\0"
operator|+
literal|"\2\64\6\0\1\64\55\0\1\64\3\0\1\64\2\0"
operator|+
literal|"\1\64\3\0\1\64\5\0\1\64\7\0\1\64\4\0"
operator|+
literal|"\2\64\3\0\2\64\1\0\1\64\4\0\1\64\1\0"
operator|+
literal|"\1\64\2\0\2\64\1\0\3\64\1\0\1\64\2\0"
operator|+
literal|"\4\64\2\0\1\64\41\0\1\106\37\0\1\106\1\0"
operator|+
literal|"\2\106\16\0\1\106\4\0\1\106\2\0\2\106\10\0"
operator|+
literal|"\1\51\4\0\1\106\36\0\1\51\102\0\1\51\146\0"
operator|+
literal|"\2\51\133\0\1\106\152\0\2\106\11\0\1\106\114\0"
operator|+
literal|"\2\106\6\0\1\106\55\0\1\106\3\0\1\106\2\0"
operator|+
literal|"\1\106\3\0\1\106\5\0\1\106\7\0\1\106\4\0"
operator|+
literal|"\2\106\3\0\2\106\1\0\1\106\4\0\1\106\1\0"
operator|+
literal|"\1\106\2\0\2\106\1\0\3\106\1\0\1\106\2\0"
operator|+
literal|"\4\106\2\0\1\106\37\0"
decl_stmt|;
DECL|method|zzUnpackTrans
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackTrans
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|9180
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackTrans
argument_list|(
name|ZZ_TRANS_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackTrans
specifier|private
specifier|static
name|int
name|zzUnpackTrans
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|value
operator|--
expr_stmt|;
do|do
name|result
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|j
return|;
block|}
comment|/* error codes */
DECL|field|ZZ_UNKNOWN_ERROR
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_UNKNOWN_ERROR
init|=
literal|0
decl_stmt|;
DECL|field|ZZ_NO_MATCH
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_NO_MATCH
init|=
literal|1
decl_stmt|;
DECL|field|ZZ_PUSHBACK_2BIG
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_PUSHBACK_2BIG
init|=
literal|2
decl_stmt|;
comment|/* error messages for the codes above */
DECL|field|ZZ_ERROR_MSG
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ERROR_MSG
index|[]
init|=
block|{
literal|"Unkown internal scanner error"
block|,
literal|"Error: could not match input"
block|,
literal|"Error: pushback value was too large"
block|}
decl_stmt|;
comment|/**    * ZZ_ATTRIBUTE[aState] contains the attributes of state<code>aState</code>    */
DECL|field|ZZ_ATTRIBUTE
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_ATTRIBUTE
init|=
name|zzUnpackAttribute
argument_list|()
decl_stmt|;
DECL|field|ZZ_ATTRIBUTE_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ATTRIBUTE_PACKED_0
init|=
literal|"\1\0\1\11\27\1\2\11\15\0\1\1\1\0\1\1"
operator|+
literal|"\10\0\1\1\61\0"
decl_stmt|;
DECL|method|zzUnpackAttribute
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackAttribute
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|101
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackAttribute
argument_list|(
name|ZZ_ATTRIBUTE_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackAttribute
specifier|private
specifier|static
name|int
name|zzUnpackAttribute
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
do|do
name|result
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|j
return|;
block|}
comment|/** the input device */
DECL|field|zzReader
specifier|private
name|java
operator|.
name|io
operator|.
name|Reader
name|zzReader
decl_stmt|;
comment|/** the current state of the DFA */
DECL|field|zzState
specifier|private
name|int
name|zzState
decl_stmt|;
comment|/** the current lexical state */
DECL|field|zzLexicalState
specifier|private
name|int
name|zzLexicalState
init|=
name|YYINITIAL
decl_stmt|;
comment|/** this buffer contains the current text to be matched and is       the source of the yytext() string */
DECL|field|zzBuffer
specifier|private
name|char
name|zzBuffer
index|[]
init|=
operator|new
name|char
index|[
name|ZZ_BUFFERSIZE
index|]
decl_stmt|;
comment|/** the textposition at the last accepting state */
DECL|field|zzMarkedPos
specifier|private
name|int
name|zzMarkedPos
decl_stmt|;
comment|/** the current text position in the buffer */
DECL|field|zzCurrentPos
specifier|private
name|int
name|zzCurrentPos
decl_stmt|;
comment|/** startRead marks the beginning of the yytext() string in the buffer */
DECL|field|zzStartRead
specifier|private
name|int
name|zzStartRead
decl_stmt|;
comment|/** endRead marks the last character in the buffer, that has been read       from input */
DECL|field|zzEndRead
specifier|private
name|int
name|zzEndRead
decl_stmt|;
comment|/** number of newlines encountered up to the start of the matched text */
DECL|field|yyline
specifier|private
name|int
name|yyline
decl_stmt|;
comment|/** the number of characters up to the start of the matched text */
DECL|field|yychar
specifier|private
name|int
name|yychar
decl_stmt|;
comment|/**    * the number of characters from the last newline up to the start of the     * matched text    */
DECL|field|yycolumn
specifier|private
name|int
name|yycolumn
decl_stmt|;
comment|/**     * zzAtBOL == true<=> the scanner is currently at the beginning of a line    */
DECL|field|zzAtBOL
specifier|private
name|boolean
name|zzAtBOL
init|=
literal|true
decl_stmt|;
comment|/** zzAtEOF == true<=> the scanner is at the EOF */
DECL|field|zzAtEOF
specifier|private
name|boolean
name|zzAtEOF
decl_stmt|;
comment|/** denotes if the user-EOF-code has already been executed */
DECL|field|zzEOFDone
specifier|private
name|boolean
name|zzEOFDone
decl_stmt|;
comment|/* user code: */
comment|/** Alphanumeric sequences */
DECL|field|WORD_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|WORD_TYPE
init|=
name|StandardTokenizer
operator|.
name|ALPHANUM
decl_stmt|;
comment|/** Numbers */
DECL|field|NUMERIC_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|NUMERIC_TYPE
init|=
name|StandardTokenizer
operator|.
name|NUM
decl_stmt|;
comment|/**    * Chars in class \p{Line_Break = Complex_Context} are from South East Asian    * scripts (Thai, Lao, Myanmar, Khmer, etc.).  Sequences of these are kept     * together as as a single token rather than broken up, because the logic    * required to break them at word boundaries is too complex for UAX#29.    *<p>    * See Unicode Line Breaking Algorithm: http://www.unicode.org/reports/tr14/#SA    */
DECL|field|SOUTH_EAST_ASIAN_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|SOUTH_EAST_ASIAN_TYPE
init|=
name|StandardTokenizer
operator|.
name|SOUTHEAST_ASIAN
decl_stmt|;
DECL|field|IDEOGRAPHIC_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|IDEOGRAPHIC_TYPE
init|=
name|StandardTokenizer
operator|.
name|IDEOGRAPHIC
decl_stmt|;
DECL|field|HIRAGANA_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|HIRAGANA_TYPE
init|=
name|StandardTokenizer
operator|.
name|HIRAGANA
decl_stmt|;
DECL|method|yychar
specifier|public
specifier|final
name|int
name|yychar
parameter_list|()
block|{
return|return
name|yychar
return|;
block|}
comment|/**    * Fills CharTermAttribute with the current token text.    */
DECL|method|getText
specifier|public
specifier|final
name|void
name|getText
parameter_list|(
name|CharTermAttribute
name|t
parameter_list|)
block|{
name|t
operator|.
name|copyBuffer
argument_list|(
name|zzBuffer
argument_list|,
name|zzStartRead
argument_list|,
name|zzMarkedPos
operator|-
name|zzStartRead
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new scanner    * There is also a java.io.InputStream version of this constructor.    *    * @param   in  the java.io.Reader to read input from.    */
DECL|method|StandardTokenizerImpl
specifier|public
name|StandardTokenizerImpl
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|in
parameter_list|)
block|{
name|this
operator|.
name|zzReader
operator|=
name|in
expr_stmt|;
block|}
comment|/**    * Creates a new scanner.    * There is also java.io.Reader version of this constructor.    *    * @param   in  the java.io.Inputstream to read input from.    */
DECL|method|StandardTokenizerImpl
specifier|public
name|StandardTokenizerImpl
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|in
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|java
operator|.
name|io
operator|.
name|InputStreamReader
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**     * Unpacks the compressed character translation table.    *    * @param packed   the packed character translation table    * @return         the unpacked character translation table    */
DECL|method|zzUnpackCMap
specifier|private
specifier|static
name|char
index|[]
name|zzUnpackCMap
parameter_list|(
name|String
name|packed
parameter_list|)
block|{
name|char
index|[]
name|map
init|=
operator|new
name|char
index|[
literal|0x10000
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
literal|0
decl_stmt|;
comment|/* index in unpacked array */
while|while
condition|(
name|i
operator|<
literal|2640
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|char
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
do|do
name|map
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|map
return|;
block|}
comment|/**    * Refills the input buffer.    *    * @return<code>false</code>, iff there was new input.    *     * @exception   java.io.IOException  if any I/O-Error occurs    */
DECL|method|zzRefill
specifier|private
name|boolean
name|zzRefill
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
comment|/* first: make room (if you can) */
if|if
condition|(
name|zzStartRead
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|zzBuffer
argument_list|,
name|zzStartRead
argument_list|,
name|zzBuffer
argument_list|,
literal|0
argument_list|,
name|zzEndRead
operator|-
name|zzStartRead
argument_list|)
expr_stmt|;
comment|/* translate stored positions */
name|zzEndRead
operator|-=
name|zzStartRead
expr_stmt|;
name|zzCurrentPos
operator|-=
name|zzStartRead
expr_stmt|;
name|zzMarkedPos
operator|-=
name|zzStartRead
expr_stmt|;
name|zzStartRead
operator|=
literal|0
expr_stmt|;
block|}
comment|/* is the buffer big enough? */
if|if
condition|(
name|zzCurrentPos
operator|>=
name|zzBuffer
operator|.
name|length
condition|)
block|{
comment|/* if not: blow it up */
name|char
name|newBuffer
index|[]
init|=
operator|new
name|char
index|[
name|zzCurrentPos
operator|*
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|zzBuffer
argument_list|,
literal|0
argument_list|,
name|newBuffer
argument_list|,
literal|0
argument_list|,
name|zzBuffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|zzBuffer
operator|=
name|newBuffer
expr_stmt|;
block|}
comment|/* finally: fill the buffer with new input */
name|int
name|numRead
init|=
name|zzReader
operator|.
name|read
argument_list|(
name|zzBuffer
argument_list|,
name|zzEndRead
argument_list|,
name|zzBuffer
operator|.
name|length
operator|-
name|zzEndRead
argument_list|)
decl_stmt|;
if|if
condition|(
name|numRead
operator|>
literal|0
condition|)
block|{
name|zzEndRead
operator|+=
name|numRead
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// unlikely but not impossible: read 0 characters, but not at end of stream
if|if
condition|(
name|numRead
operator|==
literal|0
condition|)
block|{
name|int
name|c
init|=
name|zzReader
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|zzBuffer
index|[
name|zzEndRead
operator|++
index|]
operator|=
operator|(
name|char
operator|)
name|c
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// numRead< 0
return|return
literal|true
return|;
block|}
comment|/**    * Closes the input stream.    */
DECL|method|yyclose
specifier|public
specifier|final
name|void
name|yyclose
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|zzAtEOF
operator|=
literal|true
expr_stmt|;
comment|/* indicate end of file */
name|zzEndRead
operator|=
name|zzStartRead
expr_stmt|;
comment|/* invalidate buffer    */
if|if
condition|(
name|zzReader
operator|!=
literal|null
condition|)
name|zzReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Resets the scanner to read from a new input stream.    * Does not close the old reader.    *    * All internal variables are reset, the old input stream     *<b>cannot</b> be reused (internal buffer is discarded and lost).    * Lexical state is set to<tt>ZZ_INITIAL</tt>.    *    * Internal scan buffer is resized down to its initial length, if it has grown.    *    * @param reader   the new input stream     */
DECL|method|yyreset
specifier|public
specifier|final
name|void
name|yyreset
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|reader
parameter_list|)
block|{
name|zzReader
operator|=
name|reader
expr_stmt|;
name|zzAtBOL
operator|=
literal|true
expr_stmt|;
name|zzAtEOF
operator|=
literal|false
expr_stmt|;
name|zzEOFDone
operator|=
literal|false
expr_stmt|;
name|zzEndRead
operator|=
name|zzStartRead
operator|=
literal|0
expr_stmt|;
name|zzCurrentPos
operator|=
name|zzMarkedPos
operator|=
literal|0
expr_stmt|;
name|yyline
operator|=
name|yychar
operator|=
name|yycolumn
operator|=
literal|0
expr_stmt|;
name|zzLexicalState
operator|=
name|YYINITIAL
expr_stmt|;
if|if
condition|(
name|zzBuffer
operator|.
name|length
operator|>
name|ZZ_BUFFERSIZE
condition|)
name|zzBuffer
operator|=
operator|new
name|char
index|[
name|ZZ_BUFFERSIZE
index|]
expr_stmt|;
block|}
comment|/**    * Returns the current lexical state.    */
DECL|method|yystate
specifier|public
specifier|final
name|int
name|yystate
parameter_list|()
block|{
return|return
name|zzLexicalState
return|;
block|}
comment|/**    * Enters a new lexical state    *    * @param newState the new lexical state    */
DECL|method|yybegin
specifier|public
specifier|final
name|void
name|yybegin
parameter_list|(
name|int
name|newState
parameter_list|)
block|{
name|zzLexicalState
operator|=
name|newState
expr_stmt|;
block|}
comment|/**    * Returns the text matched by the current regular expression.    */
DECL|method|yytext
specifier|public
specifier|final
name|String
name|yytext
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|zzBuffer
argument_list|,
name|zzStartRead
argument_list|,
name|zzMarkedPos
operator|-
name|zzStartRead
argument_list|)
return|;
block|}
comment|/**    * Returns the character at position<tt>pos</tt> from the     * matched text.     *     * It is equivalent to yytext().charAt(pos), but faster    *    * @param pos the position of the character to fetch.     *            A value from 0 to yylength()-1.    *    * @return the character at position pos    */
DECL|method|yycharat
specifier|public
specifier|final
name|char
name|yycharat
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
name|zzBuffer
index|[
name|zzStartRead
operator|+
name|pos
index|]
return|;
block|}
comment|/**    * Returns the length of the matched text region.    */
DECL|method|yylength
specifier|public
specifier|final
name|int
name|yylength
parameter_list|()
block|{
return|return
name|zzMarkedPos
operator|-
name|zzStartRead
return|;
block|}
comment|/**    * Reports an error that occured while scanning.    *    * In a wellformed scanner (no or only correct usage of     * yypushback(int) and a match-all fallback rule) this method     * will only be called with things that "Can't Possibly Happen".    * If this method is called, something is seriously wrong    * (e.g. a JFlex bug producing a faulty scanner etc.).    *    * Usual syntax/scanner level error handling should be done    * in error fallback rules.    *    * @param   errorCode  the code of the errormessage to display    */
DECL|method|zzScanError
specifier|private
name|void
name|zzScanError
parameter_list|(
name|int
name|errorCode
parameter_list|)
block|{
name|String
name|message
decl_stmt|;
try|try
block|{
name|message
operator|=
name|ZZ_ERROR_MSG
index|[
name|errorCode
index|]
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
name|message
operator|=
name|ZZ_ERROR_MSG
index|[
name|ZZ_UNKNOWN_ERROR
index|]
expr_stmt|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|/**    * Pushes the specified amount of characters back into the input stream.    *    * They will be read again by then next call of the scanning method    *    * @param number  the number of characters to be read again.    *                This number must not be greater than yylength()!    */
DECL|method|yypushback
specifier|public
name|void
name|yypushback
parameter_list|(
name|int
name|number
parameter_list|)
block|{
if|if
condition|(
name|number
operator|>
name|yylength
argument_list|()
condition|)
name|zzScanError
argument_list|(
name|ZZ_PUSHBACK_2BIG
argument_list|)
expr_stmt|;
name|zzMarkedPos
operator|-=
name|number
expr_stmt|;
block|}
comment|/**    * Resumes scanning until the next regular expression is matched,    * the end of input is encountered or an I/O-Error occurs.    *    * @return      the next token    * @exception   java.io.IOException  if any I/O-Error occurs    */
DECL|method|getNextToken
specifier|public
name|int
name|getNextToken
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|int
name|zzInput
decl_stmt|;
name|int
name|zzAction
decl_stmt|;
comment|// cached fields:
name|int
name|zzCurrentPosL
decl_stmt|;
name|int
name|zzMarkedPosL
decl_stmt|;
name|int
name|zzEndReadL
init|=
name|zzEndRead
decl_stmt|;
name|char
index|[]
name|zzBufferL
init|=
name|zzBuffer
decl_stmt|;
name|char
index|[]
name|zzCMapL
init|=
name|ZZ_CMAP
decl_stmt|;
name|int
index|[]
name|zzTransL
init|=
name|ZZ_TRANS
decl_stmt|;
name|int
index|[]
name|zzRowMapL
init|=
name|ZZ_ROWMAP
decl_stmt|;
name|int
index|[]
name|zzAttrL
init|=
name|ZZ_ATTRIBUTE
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|zzMarkedPosL
operator|=
name|zzMarkedPos
expr_stmt|;
name|yychar
operator|+=
name|zzMarkedPosL
operator|-
name|zzStartRead
expr_stmt|;
name|zzAction
operator|=
operator|-
literal|1
expr_stmt|;
name|zzCurrentPosL
operator|=
name|zzCurrentPos
operator|=
name|zzStartRead
operator|=
name|zzMarkedPosL
expr_stmt|;
name|zzState
operator|=
name|ZZ_LEXSTATE
index|[
name|zzLexicalState
index|]
expr_stmt|;
comment|// set up zzAction for empty match case:
name|int
name|zzAttributes
init|=
name|zzAttrL
index|[
name|zzState
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|zzAttributes
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
name|zzAction
operator|=
name|zzState
expr_stmt|;
block|}
name|zzForAction
label|:
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|zzCurrentPosL
operator|<
name|zzEndReadL
condition|)
name|zzInput
operator|=
name|zzBufferL
index|[
name|zzCurrentPosL
operator|++
index|]
expr_stmt|;
elseif|else
if|if
condition|(
name|zzAtEOF
condition|)
block|{
name|zzInput
operator|=
name|YYEOF
expr_stmt|;
break|break
name|zzForAction
break|;
block|}
else|else
block|{
comment|// store back cached positions
name|zzCurrentPos
operator|=
name|zzCurrentPosL
expr_stmt|;
name|zzMarkedPos
operator|=
name|zzMarkedPosL
expr_stmt|;
name|boolean
name|eof
init|=
name|zzRefill
argument_list|()
decl_stmt|;
comment|// get translated positions and possibly new buffer
name|zzCurrentPosL
operator|=
name|zzCurrentPos
expr_stmt|;
name|zzMarkedPosL
operator|=
name|zzMarkedPos
expr_stmt|;
name|zzBufferL
operator|=
name|zzBuffer
expr_stmt|;
name|zzEndReadL
operator|=
name|zzEndRead
expr_stmt|;
if|if
condition|(
name|eof
condition|)
block|{
name|zzInput
operator|=
name|YYEOF
expr_stmt|;
break|break
name|zzForAction
break|;
block|}
else|else
block|{
name|zzInput
operator|=
name|zzBufferL
index|[
name|zzCurrentPosL
operator|++
index|]
expr_stmt|;
block|}
block|}
name|int
name|zzNext
init|=
name|zzTransL
index|[
name|zzRowMapL
index|[
name|zzState
index|]
operator|+
name|zzCMapL
index|[
name|zzInput
index|]
index|]
decl_stmt|;
if|if
condition|(
name|zzNext
operator|==
operator|-
literal|1
condition|)
break|break
name|zzForAction
break|;
name|zzState
operator|=
name|zzNext
expr_stmt|;
name|zzAttributes
operator|=
name|zzAttrL
index|[
name|zzState
index|]
expr_stmt|;
if|if
condition|(
operator|(
name|zzAttributes
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
name|zzAction
operator|=
name|zzState
expr_stmt|;
name|zzMarkedPosL
operator|=
name|zzCurrentPosL
expr_stmt|;
if|if
condition|(
operator|(
name|zzAttributes
operator|&
literal|8
operator|)
operator|==
literal|8
condition|)
break|break
name|zzForAction
break|;
block|}
block|}
block|}
comment|// store back cached position
name|zzMarkedPos
operator|=
name|zzMarkedPosL
expr_stmt|;
switch|switch
condition|(
name|zzAction
operator|<
literal|0
condition|?
name|zzAction
else|:
name|ZZ_ACTION
index|[
name|zzAction
index|]
condition|)
block|{
case|case
literal|2
case|:
block|{
return|return
name|WORD_TYPE
return|;
block|}
case|case
literal|7
case|:
break|break;
case|case
literal|4
case|:
block|{
return|return
name|SOUTH_EAST_ASIAN_TYPE
return|;
block|}
case|case
literal|8
case|:
break|break;
case|case
literal|5
case|:
block|{
return|return
name|IDEOGRAPHIC_TYPE
return|;
block|}
case|case
literal|9
case|:
break|break;
case|case
literal|1
case|:
block|{
comment|/* Not numeric, word, ideographic, hiragana, or SE Asian -- ignore it. */
block|}
case|case
literal|10
case|:
break|break;
case|case
literal|3
case|:
block|{
return|return
name|NUMERIC_TYPE
return|;
block|}
case|case
literal|11
case|:
break|break;
case|case
literal|6
case|:
block|{
return|return
name|HIRAGANA_TYPE
return|;
block|}
case|case
literal|12
case|:
break|break;
default|default:
if|if
condition|(
name|zzInput
operator|==
name|YYEOF
operator|&&
name|zzStartRead
operator|==
name|zzCurrentPos
condition|)
block|{
name|zzAtEOF
operator|=
literal|true
expr_stmt|;
block|{
return|return
name|StandardTokenizerInterface
operator|.
name|YYEOF
return|;
block|}
block|}
else|else
block|{
name|zzScanError
argument_list|(
name|ZZ_NO_MATCH
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
