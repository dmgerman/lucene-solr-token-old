begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.pattern
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|pattern
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CharReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CharStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|WhitespaceTokenizer
import|;
end_import
begin_comment
comment|/**  * Tests {@link PatternReplaceCharFilter}  */
end_comment
begin_class
DECL|class|TestPatternReplaceCharFilter
specifier|public
class|class
name|TestPatternReplaceCharFilter
extends|extends
name|BaseTokenStreamTestCase
block|{
comment|//           1111
comment|// 01234567890123
comment|// this is test.
DECL|method|testNothingChange
specifier|public
name|void
name|testNothingChange
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|BLOCK
init|=
literal|"this is test."
decl_stmt|;
name|CharStream
name|cs
init|=
operator|new
name|PatternReplaceCharFilter
argument_list|(
name|pattern
argument_list|(
literal|"(aa)\\s+(bb)\\s+(cc)"
argument_list|)
argument_list|,
literal|"$1$2$3"
argument_list|,
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|BLOCK
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|cs
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"this"
block|,
literal|"is"
block|,
literal|"test."
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|5
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|7
block|,
literal|13
block|}
argument_list|)
expr_stmt|;
block|}
comment|// 012345678
comment|// aa bb cc
DECL|method|testReplaceByEmpty
specifier|public
name|void
name|testReplaceByEmpty
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|BLOCK
init|=
literal|"aa bb cc"
decl_stmt|;
name|CharStream
name|cs
init|=
operator|new
name|PatternReplaceCharFilter
argument_list|(
name|pattern
argument_list|(
literal|"(aa)\\s+(bb)\\s+(cc)"
argument_list|)
argument_list|,
literal|""
argument_list|,
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|BLOCK
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|cs
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|ts
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// 012345678
comment|// aa bb cc
comment|// aa#bb#cc
DECL|method|test1block1matchSameLength
specifier|public
name|void
name|test1block1matchSameLength
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|BLOCK
init|=
literal|"aa bb cc"
decl_stmt|;
name|CharStream
name|cs
init|=
operator|new
name|PatternReplaceCharFilter
argument_list|(
name|pattern
argument_list|(
literal|"(aa)\\s+(bb)\\s+(cc)"
argument_list|)
argument_list|,
literal|"$1#$2#$3"
argument_list|,
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|BLOCK
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|cs
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"aa#bb#cc"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|8
block|}
argument_list|)
expr_stmt|;
block|}
comment|//           11111
comment|// 012345678901234
comment|// aa bb cc dd
comment|// aa##bb###cc dd
DECL|method|test1block1matchLonger
specifier|public
name|void
name|test1block1matchLonger
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|BLOCK
init|=
literal|"aa bb cc dd"
decl_stmt|;
name|CharStream
name|cs
init|=
operator|new
name|PatternReplaceCharFilter
argument_list|(
name|pattern
argument_list|(
literal|"(aa)\\s+(bb)\\s+(cc)"
argument_list|)
argument_list|,
literal|"$1##$2###$3"
argument_list|,
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|BLOCK
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|cs
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"aa##bb###cc"
block|,
literal|"dd"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|8
block|,
literal|11
block|}
argument_list|)
expr_stmt|;
block|}
comment|// 01234567
comment|//  a  a
comment|//  aa  aa
DECL|method|test1block2matchLonger
specifier|public
name|void
name|test1block2matchLonger
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|BLOCK
init|=
literal|" a  a"
decl_stmt|;
name|CharStream
name|cs
init|=
operator|new
name|PatternReplaceCharFilter
argument_list|(
name|pattern
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|"aa"
argument_list|,
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|BLOCK
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|cs
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"aa"
block|,
literal|"aa"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|4
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|5
block|}
argument_list|)
expr_stmt|;
block|}
comment|//           11111
comment|// 012345678901234
comment|// aa  bb   cc dd
comment|// aa#bb dd
DECL|method|test1block1matchShorter
specifier|public
name|void
name|test1block1matchShorter
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|BLOCK
init|=
literal|"aa  bb   cc dd"
decl_stmt|;
name|CharStream
name|cs
init|=
operator|new
name|PatternReplaceCharFilter
argument_list|(
name|pattern
argument_list|(
literal|"(aa)\\s+(bb)\\s+(cc)"
argument_list|)
argument_list|,
literal|"$1#$2"
argument_list|,
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|BLOCK
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|cs
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"aa#bb"
block|,
literal|"dd"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|12
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|11
block|,
literal|14
block|}
argument_list|)
expr_stmt|;
block|}
comment|//           111111111122222222223333
comment|// 0123456789012345678901234567890123
comment|//   aa bb cc --- aa bb aa   bb   cc
comment|//   aa  bb  cc --- aa bb aa  bb  cc
DECL|method|test1blockMultiMatches
specifier|public
name|void
name|test1blockMultiMatches
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|BLOCK
init|=
literal|"  aa bb cc --- aa bb aa   bb   cc"
decl_stmt|;
name|CharStream
name|cs
init|=
operator|new
name|PatternReplaceCharFilter
argument_list|(
name|pattern
argument_list|(
literal|"(aa)\\s+(bb)\\s+(cc)"
argument_list|)
argument_list|,
literal|"$1  $2  $3"
argument_list|,
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|BLOCK
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|cs
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"aa"
block|,
literal|"bb"
block|,
literal|"cc"
block|,
literal|"---"
block|,
literal|"aa"
block|,
literal|"bb"
block|,
literal|"aa"
block|,
literal|"bb"
block|,
literal|"cc"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|6
block|,
literal|9
block|,
literal|11
block|,
literal|15
block|,
literal|18
block|,
literal|21
block|,
literal|25
block|,
literal|29
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|8
block|,
literal|10
block|,
literal|14
block|,
literal|17
block|,
literal|20
block|,
literal|23
block|,
literal|27
block|,
literal|33
block|}
argument_list|)
expr_stmt|;
block|}
comment|//           11111111112222222222333333333
comment|// 012345678901234567890123456789012345678
comment|//   aa bb cc --- aa bb aa. bb aa   bb cc
comment|//   aa##bb cc --- aa##bb aa. bb aa##bb cc
DECL|method|test2blocksMultiMatches
specifier|public
name|void
name|test2blocksMultiMatches
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|BLOCK
init|=
literal|"  aa bb cc --- aa bb aa. bb aa   bb cc"
decl_stmt|;
name|CharStream
name|cs
init|=
operator|new
name|PatternReplaceCharFilter
argument_list|(
name|pattern
argument_list|(
literal|"(aa)\\s+(bb)"
argument_list|)
argument_list|,
literal|"$1##$2"
argument_list|,
literal|"."
argument_list|,
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|BLOCK
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|cs
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"aa##bb"
block|,
literal|"cc"
block|,
literal|"---"
block|,
literal|"aa##bb"
block|,
literal|"aa."
block|,
literal|"bb"
block|,
literal|"aa##bb"
block|,
literal|"cc"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|8
block|,
literal|11
block|,
literal|15
block|,
literal|21
block|,
literal|25
block|,
literal|28
block|,
literal|36
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|7
block|,
literal|10
block|,
literal|14
block|,
literal|20
block|,
literal|24
block|,
literal|27
block|,
literal|35
block|,
literal|38
block|}
argument_list|)
expr_stmt|;
block|}
comment|//           11111111112222222222333333333
comment|// 012345678901234567890123456789012345678
comment|//  a bb - ccc . --- bb a . ccc ccc bb
comment|//  aa b - c . --- b aa . c c b
DECL|method|testChain
specifier|public
name|void
name|testChain
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|BLOCK
init|=
literal|" a bb - ccc . --- bb a . ccc ccc bb"
decl_stmt|;
name|CharStream
name|cs
init|=
operator|new
name|PatternReplaceCharFilter
argument_list|(
name|pattern
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|"aa"
argument_list|,
literal|"."
argument_list|,
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|BLOCK
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|cs
operator|=
operator|new
name|PatternReplaceCharFilter
argument_list|(
name|pattern
argument_list|(
literal|"bb"
argument_list|)
argument_list|,
literal|"b"
argument_list|,
literal|"."
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|cs
operator|=
operator|new
name|PatternReplaceCharFilter
argument_list|(
name|pattern
argument_list|(
literal|"ccc"
argument_list|)
argument_list|,
literal|"c"
argument_list|,
literal|"."
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|cs
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"aa"
block|,
literal|"b"
block|,
literal|"-"
block|,
literal|"c"
block|,
literal|"."
block|,
literal|"---"
block|,
literal|"b"
block|,
literal|"aa"
block|,
literal|"."
block|,
literal|"c"
block|,
literal|"c"
block|,
literal|"b"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|,
literal|6
block|,
literal|8
block|,
literal|12
block|,
literal|14
block|,
literal|18
block|,
literal|21
block|,
literal|23
block|,
literal|25
block|,
literal|29
block|,
literal|33
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|5
block|,
literal|7
block|,
literal|11
block|,
literal|13
block|,
literal|17
block|,
literal|20
block|,
literal|22
block|,
literal|24
block|,
literal|28
block|,
literal|32
block|,
literal|35
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|pattern
specifier|private
name|Pattern
name|pattern
parameter_list|(
name|String
name|p
parameter_list|)
block|{
return|return
name|Pattern
operator|.
name|compile
argument_list|(
name|p
argument_list|)
return|;
block|}
block|}
end_class
end_unit
