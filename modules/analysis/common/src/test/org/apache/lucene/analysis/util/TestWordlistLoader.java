begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|WordlistLoader
import|;
end_import
begin_class
DECL|class|TestWordlistLoader
specifier|public
class|class
name|TestWordlistLoader
extends|extends
name|LuceneTestCase
block|{
DECL|method|testWordlistLoading
specifier|public
name|void
name|testWordlistLoading
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|s
init|=
literal|"ONE\n  two \nthree"
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|wordSet1
init|=
name|WordlistLoader
operator|.
name|getWordSet
argument_list|(
operator|new
name|StringReader
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|checkSet
argument_list|(
name|wordSet1
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|wordSet2
init|=
name|WordlistLoader
operator|.
name|getWordSet
argument_list|(
operator|new
name|BufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|checkSet
argument_list|(
name|wordSet2
argument_list|)
expr_stmt|;
block|}
DECL|method|testComments
specifier|public
name|void
name|testComments
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|s
init|=
literal|"ONE\n  two \nthree\n#comment"
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|wordSet1
init|=
name|WordlistLoader
operator|.
name|getWordSet
argument_list|(
operator|new
name|StringReader
argument_list|(
name|s
argument_list|)
argument_list|,
literal|"#"
argument_list|)
decl_stmt|;
name|checkSet
argument_list|(
name|wordSet1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|wordSet1
operator|.
name|contains
argument_list|(
literal|"#comment"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|wordSet1
operator|.
name|contains
argument_list|(
literal|"comment"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkSet
specifier|private
name|void
name|checkSet
parameter_list|(
name|HashSet
argument_list|<
name|String
argument_list|>
name|wordset
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|wordset
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wordset
operator|.
name|contains
argument_list|(
literal|"ONE"
argument_list|)
argument_list|)
expr_stmt|;
comment|// case is not modified
name|assertTrue
argument_list|(
name|wordset
operator|.
name|contains
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
comment|// surrounding whitespace is removed
name|assertTrue
argument_list|(
name|wordset
operator|.
name|contains
argument_list|(
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|wordset
operator|.
name|contains
argument_list|(
literal|"four"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test stopwords in snowball format    */
DECL|method|testSnowballListLoading
specifier|public
name|void
name|testSnowballListLoading
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|s
init|=
literal|"|comment\n"
operator|+
comment|// commented line
literal|" |comment\n"
operator|+
comment|// commented line with leading whitespace
literal|"\n"
operator|+
comment|// blank line
literal|"  \t\n"
operator|+
comment|// line with only whitespace
literal|" |comment | comment\n"
operator|+
comment|// commented line with comment
literal|"ONE\n"
operator|+
comment|// stopword, in uppercase
literal|"   two   \n"
operator|+
comment|// stopword with leading/trailing space
literal|" three   four five \n"
operator|+
comment|// multiple stopwords
literal|"six seven | comment\n"
decl_stmt|;
comment|//multiple stopwords + comment
name|Set
argument_list|<
name|String
argument_list|>
name|wordset
init|=
name|WordlistLoader
operator|.
name|getSnowballWordSet
argument_list|(
operator|new
name|StringReader
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|wordset
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wordset
operator|.
name|contains
argument_list|(
literal|"ONE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wordset
operator|.
name|contains
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wordset
operator|.
name|contains
argument_list|(
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wordset
operator|.
name|contains
argument_list|(
literal|"four"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wordset
operator|.
name|contains
argument_list|(
literal|"five"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wordset
operator|.
name|contains
argument_list|(
literal|"six"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wordset
operator|.
name|contains
argument_list|(
literal|"seven"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
