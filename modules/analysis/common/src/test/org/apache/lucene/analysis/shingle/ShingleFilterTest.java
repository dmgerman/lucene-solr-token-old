begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.shingle
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|shingle
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|WhitespaceTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|*
import|;
end_import
begin_class
DECL|class|ShingleFilterTest
specifier|public
class|class
name|ShingleFilterTest
extends|extends
name|BaseTokenStreamTestCase
block|{
DECL|class|TestTokenStream
specifier|public
class|class
name|TestTokenStream
extends|extends
name|TokenStream
block|{
DECL|field|index
specifier|protected
name|int
name|index
init|=
literal|0
decl_stmt|;
DECL|field|testToken
specifier|protected
name|Token
index|[]
name|testToken
decl_stmt|;
DECL|field|termAtt
specifier|private
name|CharTermAttribute
name|termAtt
decl_stmt|;
DECL|field|offsetAtt
specifier|private
name|OffsetAttribute
name|offsetAtt
decl_stmt|;
DECL|field|posIncrAtt
specifier|private
name|PositionIncrementAttribute
name|posIncrAtt
decl_stmt|;
DECL|field|typeAtt
specifier|private
name|TypeAttribute
name|typeAtt
decl_stmt|;
DECL|method|TestTokenStream
specifier|public
name|TestTokenStream
parameter_list|(
name|Token
index|[]
name|testToken
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|testToken
operator|=
name|testToken
expr_stmt|;
name|this
operator|.
name|termAtt
operator|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|offsetAtt
operator|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|posIncrAtt
operator|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|typeAtt
operator|=
name|addAttribute
argument_list|(
name|TypeAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
specifier|final
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
name|clearAttributes
argument_list|()
expr_stmt|;
if|if
condition|(
name|index
operator|<
name|testToken
operator|.
name|length
condition|)
block|{
name|Token
name|t
init|=
name|testToken
index|[
name|index
operator|++
index|]
decl_stmt|;
name|termAtt
operator|.
name|copyBuffer
argument_list|(
name|t
operator|.
name|buffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|t
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|t
operator|.
name|startOffset
argument_list|()
argument_list|,
name|t
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|posIncrAtt
operator|.
name|setPositionIncrement
argument_list|(
name|t
operator|.
name|getPositionIncrement
argument_list|()
argument_list|)
expr_stmt|;
name|typeAtt
operator|.
name|setType
argument_list|(
name|TypeAttributeImpl
operator|.
name|DEFAULT_TYPE
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
DECL|field|TEST_TOKEN
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|TEST_TOKEN
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide"
argument_list|,
literal|7
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this"
argument_list|,
literal|14
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence"
argument_list|,
literal|19
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into"
argument_list|,
literal|28
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"shingles"
argument_list|,
literal|33
argument_list|,
literal|39
argument_list|)
block|,   }
decl_stmt|;
DECL|field|UNIGRAM_ONLY_POSITION_INCREMENTS
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|UNIGRAM_ONLY_POSITION_INCREMENTS
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
DECL|field|UNIGRAM_ONLY_TYPES
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|UNIGRAM_ONLY_TYPES
init|=
operator|new
name|String
index|[]
block|{
literal|"word"
block|,
literal|"word"
block|,
literal|"word"
block|,
literal|"word"
block|,
literal|"word"
block|,
literal|"word"
block|}
decl_stmt|;
DECL|field|testTokenWithHoles
specifier|public
specifier|static
name|Token
index|[]
name|testTokenWithHoles
decl_stmt|;
DECL|field|BI_GRAM_TOKENS
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|BI_GRAM_TOKENS
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please divide"
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide"
argument_list|,
literal|7
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this"
argument_list|,
literal|7
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this"
argument_list|,
literal|14
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence"
argument_list|,
literal|14
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence"
argument_list|,
literal|19
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence into"
argument_list|,
literal|19
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into"
argument_list|,
literal|28
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into shingles"
argument_list|,
literal|28
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"shingles"
argument_list|,
literal|33
argument_list|,
literal|39
argument_list|)
block|,   }
decl_stmt|;
DECL|field|BI_GRAM_POSITION_INCREMENTS
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|BI_GRAM_POSITION_INCREMENTS
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
DECL|field|BI_GRAM_TYPES
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|BI_GRAM_TYPES
init|=
operator|new
name|String
index|[]
block|{
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|}
decl_stmt|;
DECL|field|BI_GRAM_TOKENS_WITH_HOLES
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|BI_GRAM_TOKENS_WITH_HOLES
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please divide"
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide"
argument_list|,
literal|7
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide _"
argument_list|,
literal|7
argument_list|,
literal|19
argument_list|)
block|,
name|createToken
argument_list|(
literal|"_ sentence"
argument_list|,
literal|19
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence"
argument_list|,
literal|19
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence _"
argument_list|,
literal|19
argument_list|,
literal|33
argument_list|)
block|,
name|createToken
argument_list|(
literal|"_ shingles"
argument_list|,
literal|33
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"shingles"
argument_list|,
literal|33
argument_list|,
literal|39
argument_list|)
block|,   }
decl_stmt|;
DECL|field|BI_GRAM_POSITION_INCREMENTS_WITH_HOLES
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|BI_GRAM_POSITION_INCREMENTS_WITH_HOLES
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
DECL|field|BI_GRAM_TYPES_WITH_HOLES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|BI_GRAM_TYPES_WITH_HOLES
init|=
block|{
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|}
decl_stmt|;
DECL|field|BI_GRAM_TOKENS_WITHOUT_UNIGRAMS
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|BI_GRAM_TOKENS_WITHOUT_UNIGRAMS
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please divide"
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this"
argument_list|,
literal|7
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence"
argument_list|,
literal|14
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence into"
argument_list|,
literal|19
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into shingles"
argument_list|,
literal|28
argument_list|,
literal|39
argument_list|)
block|,   }
decl_stmt|;
DECL|field|BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
DECL|field|BI_GRAM_TYPES_WITHOUT_UNIGRAMS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|BI_GRAM_TYPES_WITHOUT_UNIGRAMS
init|=
operator|new
name|String
index|[]
block|{
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|}
decl_stmt|;
DECL|field|BI_GRAM_TOKENS_WITH_HOLES_WITHOUT_UNIGRAMS
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|BI_GRAM_TOKENS_WITH_HOLES_WITHOUT_UNIGRAMS
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please divide"
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide _"
argument_list|,
literal|7
argument_list|,
literal|19
argument_list|)
block|,
name|createToken
argument_list|(
literal|"_ sentence"
argument_list|,
literal|19
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence _"
argument_list|,
literal|19
argument_list|,
literal|33
argument_list|)
block|,
name|createToken
argument_list|(
literal|"_ shingles"
argument_list|,
literal|33
argument_list|,
literal|39
argument_list|)
block|,   }
decl_stmt|;
DECL|field|BI_GRAM_POSITION_INCREMENTS_WITH_HOLES_WITHOUT_UNIGRAMS
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|BI_GRAM_POSITION_INCREMENTS_WITH_HOLES_WITHOUT_UNIGRAMS
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
DECL|field|TEST_SINGLE_TOKEN
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|TEST_SINGLE_TOKEN
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
block|}
decl_stmt|;
DECL|field|SINGLE_TOKEN
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|SINGLE_TOKEN
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
block|}
decl_stmt|;
DECL|field|SINGLE_TOKEN_INCREMENTS
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|SINGLE_TOKEN_INCREMENTS
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|}
decl_stmt|;
DECL|field|SINGLE_TOKEN_TYPES
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|SINGLE_TOKEN_TYPES
init|=
operator|new
name|String
index|[]
block|{
literal|"word"
block|}
decl_stmt|;
DECL|field|EMPTY_TOKEN_ARRAY
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|EMPTY_TOKEN_ARRAY
init|=
operator|new
name|Token
index|[]
block|{   }
decl_stmt|;
DECL|field|EMPTY_TOKEN_INCREMENTS_ARRAY
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|EMPTY_TOKEN_INCREMENTS_ARRAY
init|=
operator|new
name|int
index|[]
block|{   }
decl_stmt|;
DECL|field|EMPTY_TOKEN_TYPES_ARRAY
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|EMPTY_TOKEN_TYPES_ARRAY
init|=
operator|new
name|String
index|[]
block|{   }
decl_stmt|;
DECL|field|TRI_GRAM_TOKENS
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|TRI_GRAM_TOKENS
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please divide"
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please divide this"
argument_list|,
literal|0
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide"
argument_list|,
literal|7
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this"
argument_list|,
literal|7
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this sentence"
argument_list|,
literal|7
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this"
argument_list|,
literal|14
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence"
argument_list|,
literal|14
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence into"
argument_list|,
literal|14
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence"
argument_list|,
literal|19
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence into"
argument_list|,
literal|19
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence into shingles"
argument_list|,
literal|19
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into"
argument_list|,
literal|28
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into shingles"
argument_list|,
literal|28
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"shingles"
argument_list|,
literal|33
argument_list|,
literal|39
argument_list|)
block|}
decl_stmt|;
DECL|field|TRI_GRAM_POSITION_INCREMENTS
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|TRI_GRAM_POSITION_INCREMENTS
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
DECL|field|TRI_GRAM_TYPES
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|TRI_GRAM_TYPES
init|=
operator|new
name|String
index|[]
block|{
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|}
decl_stmt|;
DECL|field|TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please divide"
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please divide this"
argument_list|,
literal|0
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this"
argument_list|,
literal|7
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this sentence"
argument_list|,
literal|7
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence"
argument_list|,
literal|14
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence into"
argument_list|,
literal|14
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence into"
argument_list|,
literal|19
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence into shingles"
argument_list|,
literal|19
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into shingles"
argument_list|,
literal|28
argument_list|,
literal|39
argument_list|)
block|,   }
decl_stmt|;
DECL|field|TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
DECL|field|TRI_GRAM_TYPES_WITHOUT_UNIGRAMS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|TRI_GRAM_TYPES_WITHOUT_UNIGRAMS
init|=
operator|new
name|String
index|[]
block|{
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,   }
decl_stmt|;
DECL|field|FOUR_GRAM_TOKENS
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|FOUR_GRAM_TOKENS
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please divide"
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please divide this"
argument_list|,
literal|0
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please divide this sentence"
argument_list|,
literal|0
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide"
argument_list|,
literal|7
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this"
argument_list|,
literal|7
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this sentence"
argument_list|,
literal|7
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this sentence into"
argument_list|,
literal|7
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this"
argument_list|,
literal|14
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence"
argument_list|,
literal|14
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence into"
argument_list|,
literal|14
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence into shingles"
argument_list|,
literal|14
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence"
argument_list|,
literal|19
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence into"
argument_list|,
literal|19
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence into shingles"
argument_list|,
literal|19
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into"
argument_list|,
literal|28
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into shingles"
argument_list|,
literal|28
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"shingles"
argument_list|,
literal|33
argument_list|,
literal|39
argument_list|)
block|}
decl_stmt|;
DECL|field|FOUR_GRAM_POSITION_INCREMENTS
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|FOUR_GRAM_POSITION_INCREMENTS
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
DECL|field|FOUR_GRAM_TYPES
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|FOUR_GRAM_TYPES
init|=
operator|new
name|String
index|[]
block|{
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|}
decl_stmt|;
DECL|field|FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please divide"
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please divide this"
argument_list|,
literal|0
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please divide this sentence"
argument_list|,
literal|0
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this"
argument_list|,
literal|7
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this sentence"
argument_list|,
literal|7
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this sentence into"
argument_list|,
literal|7
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence"
argument_list|,
literal|14
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence into"
argument_list|,
literal|14
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence into shingles"
argument_list|,
literal|14
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence into"
argument_list|,
literal|19
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence into shingles"
argument_list|,
literal|19
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into shingles"
argument_list|,
literal|28
argument_list|,
literal|39
argument_list|)
block|,   }
decl_stmt|;
DECL|field|FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
DECL|field|FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS
init|=
operator|new
name|String
index|[]
block|{
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,    }
decl_stmt|;
DECL|field|TRI_GRAM_TOKENS_MIN_TRI_GRAM
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|TRI_GRAM_TOKENS_MIN_TRI_GRAM
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please divide this"
argument_list|,
literal|0
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide"
argument_list|,
literal|7
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this sentence"
argument_list|,
literal|7
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this"
argument_list|,
literal|14
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence into"
argument_list|,
literal|14
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence"
argument_list|,
literal|19
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence into shingles"
argument_list|,
literal|19
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into"
argument_list|,
literal|28
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"shingles"
argument_list|,
literal|33
argument_list|,
literal|39
argument_list|)
block|}
decl_stmt|;
DECL|field|TRI_GRAM_POSITION_INCREMENTS_MIN_TRI_GRAM
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|TRI_GRAM_POSITION_INCREMENTS_MIN_TRI_GRAM
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
DECL|field|TRI_GRAM_TYPES_MIN_TRI_GRAM
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|TRI_GRAM_TYPES_MIN_TRI_GRAM
init|=
operator|new
name|String
index|[]
block|{
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"word"
block|}
decl_stmt|;
DECL|field|TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please divide this"
argument_list|,
literal|0
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this sentence"
argument_list|,
literal|7
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence into"
argument_list|,
literal|14
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence into shingles"
argument_list|,
literal|19
argument_list|,
literal|39
argument_list|)
block|}
decl_stmt|;
DECL|field|TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
DECL|field|TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_TRI_GRAM
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_TRI_GRAM
init|=
operator|new
name|String
index|[]
block|{
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|}
decl_stmt|;
DECL|field|FOUR_GRAM_TOKENS_MIN_TRI_GRAM
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|FOUR_GRAM_TOKENS_MIN_TRI_GRAM
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please divide this"
argument_list|,
literal|0
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please divide this sentence"
argument_list|,
literal|0
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide"
argument_list|,
literal|7
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this sentence"
argument_list|,
literal|7
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this sentence into"
argument_list|,
literal|7
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this"
argument_list|,
literal|14
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence into"
argument_list|,
literal|14
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence into shingles"
argument_list|,
literal|14
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence"
argument_list|,
literal|19
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence into shingles"
argument_list|,
literal|19
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into"
argument_list|,
literal|28
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"shingles"
argument_list|,
literal|33
argument_list|,
literal|39
argument_list|)
block|}
decl_stmt|;
DECL|field|FOUR_GRAM_POSITION_INCREMENTS_MIN_TRI_GRAM
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|FOUR_GRAM_POSITION_INCREMENTS_MIN_TRI_GRAM
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
DECL|field|FOUR_GRAM_TYPES_MIN_TRI_GRAM
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|FOUR_GRAM_TYPES_MIN_TRI_GRAM
init|=
operator|new
name|String
index|[]
block|{
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"word"
block|}
decl_stmt|;
DECL|field|FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please divide this"
argument_list|,
literal|0
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please divide this sentence"
argument_list|,
literal|0
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this sentence"
argument_list|,
literal|7
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this sentence into"
argument_list|,
literal|7
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence into"
argument_list|,
literal|14
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence into shingles"
argument_list|,
literal|14
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence into shingles"
argument_list|,
literal|19
argument_list|,
literal|39
argument_list|)
block|,   }
decl_stmt|;
DECL|field|FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
DECL|field|FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_TRI_GRAM
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_TRI_GRAM
init|=
operator|new
name|String
index|[]
block|{
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|}
decl_stmt|;
DECL|field|FOUR_GRAM_TOKENS_MIN_FOUR_GRAM
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|FOUR_GRAM_TOKENS_MIN_FOUR_GRAM
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please divide this sentence"
argument_list|,
literal|0
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide"
argument_list|,
literal|7
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this sentence into"
argument_list|,
literal|7
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this"
argument_list|,
literal|14
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence into shingles"
argument_list|,
literal|14
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence"
argument_list|,
literal|19
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into"
argument_list|,
literal|28
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"shingles"
argument_list|,
literal|33
argument_list|,
literal|39
argument_list|)
block|}
decl_stmt|;
DECL|field|FOUR_GRAM_POSITION_INCREMENTS_MIN_FOUR_GRAM
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|FOUR_GRAM_POSITION_INCREMENTS_MIN_FOUR_GRAM
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
DECL|field|FOUR_GRAM_TYPES_MIN_FOUR_GRAM
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|FOUR_GRAM_TYPES_MIN_FOUR_GRAM
init|=
operator|new
name|String
index|[]
block|{
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"word"
block|,
literal|"word"
block|}
decl_stmt|;
DECL|field|FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please divide this sentence"
argument_list|,
literal|0
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this sentence into"
argument_list|,
literal|7
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence into shingles"
argument_list|,
literal|14
argument_list|,
literal|39
argument_list|)
block|,   }
decl_stmt|;
DECL|field|FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
DECL|field|FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM
init|=
operator|new
name|String
index|[]
block|{
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|}
decl_stmt|;
DECL|field|BI_GRAM_TOKENS_NO_SEPARATOR
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|BI_GRAM_TOKENS_NO_SEPARATOR
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
block|,
name|createToken
argument_list|(
literal|"pleasedivide"
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide"
argument_list|,
literal|7
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"dividethis"
argument_list|,
literal|7
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this"
argument_list|,
literal|14
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"thissentence"
argument_list|,
literal|14
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence"
argument_list|,
literal|19
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentenceinto"
argument_list|,
literal|19
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into"
argument_list|,
literal|28
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"intoshingles"
argument_list|,
literal|28
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"shingles"
argument_list|,
literal|33
argument_list|,
literal|39
argument_list|)
block|,   }
decl_stmt|;
DECL|field|BI_GRAM_POSITION_INCREMENTS_NO_SEPARATOR
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|BI_GRAM_POSITION_INCREMENTS_NO_SEPARATOR
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
DECL|field|BI_GRAM_TYPES_NO_SEPARATOR
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|BI_GRAM_TYPES_NO_SEPARATOR
init|=
operator|new
name|String
index|[]
block|{
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|}
decl_stmt|;
DECL|field|BI_GRAM_TOKENS_WITHOUT_UNIGRAMS_NO_SEPARATOR
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|BI_GRAM_TOKENS_WITHOUT_UNIGRAMS_NO_SEPARATOR
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"pleasedivide"
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"dividethis"
argument_list|,
literal|7
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"thissentence"
argument_list|,
literal|14
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentenceinto"
argument_list|,
literal|19
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"intoshingles"
argument_list|,
literal|28
argument_list|,
literal|39
argument_list|)
block|,   }
decl_stmt|;
DECL|field|BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_NO_SEPARATOR
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_NO_SEPARATOR
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
DECL|field|BI_GRAM_TYPES_WITHOUT_UNIGRAMS_NO_SEPARATOR
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|BI_GRAM_TYPES_WITHOUT_UNIGRAMS_NO_SEPARATOR
init|=
operator|new
name|String
index|[]
block|{
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|}
decl_stmt|;
DECL|field|TRI_GRAM_TOKENS_NO_SEPARATOR
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|TRI_GRAM_TOKENS_NO_SEPARATOR
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
block|,
name|createToken
argument_list|(
literal|"pleasedivide"
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"pleasedividethis"
argument_list|,
literal|0
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide"
argument_list|,
literal|7
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"dividethis"
argument_list|,
literal|7
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"dividethissentence"
argument_list|,
literal|7
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this"
argument_list|,
literal|14
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"thissentence"
argument_list|,
literal|14
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"thissentenceinto"
argument_list|,
literal|14
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence"
argument_list|,
literal|19
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentenceinto"
argument_list|,
literal|19
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentenceintoshingles"
argument_list|,
literal|19
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into"
argument_list|,
literal|28
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"intoshingles"
argument_list|,
literal|28
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"shingles"
argument_list|,
literal|33
argument_list|,
literal|39
argument_list|)
block|}
decl_stmt|;
DECL|field|TRI_GRAM_POSITION_INCREMENTS_NO_SEPARATOR
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|TRI_GRAM_POSITION_INCREMENTS_NO_SEPARATOR
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
DECL|field|TRI_GRAM_TYPES_NO_SEPARATOR
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|TRI_GRAM_TYPES_NO_SEPARATOR
init|=
operator|new
name|String
index|[]
block|{
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|}
decl_stmt|;
DECL|field|TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_NO_SEPARATOR
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_NO_SEPARATOR
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"pleasedivide"
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"pleasedividethis"
argument_list|,
literal|0
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"dividethis"
argument_list|,
literal|7
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"dividethissentence"
argument_list|,
literal|7
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"thissentence"
argument_list|,
literal|14
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"thissentenceinto"
argument_list|,
literal|14
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentenceinto"
argument_list|,
literal|19
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentenceintoshingles"
argument_list|,
literal|19
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"intoshingles"
argument_list|,
literal|28
argument_list|,
literal|39
argument_list|)
block|,   }
decl_stmt|;
DECL|field|TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_NO_SEPARATOR
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_NO_SEPARATOR
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
DECL|field|TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_NO_SEPARATOR
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_NO_SEPARATOR
init|=
operator|new
name|String
index|[]
block|{
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,   }
decl_stmt|;
DECL|field|BI_GRAM_TOKENS_ALT_SEPARATOR
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|BI_GRAM_TOKENS_ALT_SEPARATOR
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please<SEP>divide"
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide"
argument_list|,
literal|7
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide<SEP>this"
argument_list|,
literal|7
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this"
argument_list|,
literal|14
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this<SEP>sentence"
argument_list|,
literal|14
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence"
argument_list|,
literal|19
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence<SEP>into"
argument_list|,
literal|19
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into"
argument_list|,
literal|28
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into<SEP>shingles"
argument_list|,
literal|28
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"shingles"
argument_list|,
literal|33
argument_list|,
literal|39
argument_list|)
block|,   }
decl_stmt|;
DECL|field|BI_GRAM_POSITION_INCREMENTS_ALT_SEPARATOR
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|BI_GRAM_POSITION_INCREMENTS_ALT_SEPARATOR
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
DECL|field|BI_GRAM_TYPES_ALT_SEPARATOR
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|BI_GRAM_TYPES_ALT_SEPARATOR
init|=
operator|new
name|String
index|[]
block|{
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|}
decl_stmt|;
DECL|field|BI_GRAM_TOKENS_WITHOUT_UNIGRAMS_ALT_SEPARATOR
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|BI_GRAM_TOKENS_WITHOUT_UNIGRAMS_ALT_SEPARATOR
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please<SEP>divide"
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide<SEP>this"
argument_list|,
literal|7
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this<SEP>sentence"
argument_list|,
literal|14
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence<SEP>into"
argument_list|,
literal|19
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into<SEP>shingles"
argument_list|,
literal|28
argument_list|,
literal|39
argument_list|)
block|,   }
decl_stmt|;
DECL|field|BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_ALT_SEPARATOR
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_ALT_SEPARATOR
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
DECL|field|BI_GRAM_TYPES_WITHOUT_UNIGRAMS_ALT_SEPARATOR
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|BI_GRAM_TYPES_WITHOUT_UNIGRAMS_ALT_SEPARATOR
init|=
operator|new
name|String
index|[]
block|{
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|}
decl_stmt|;
DECL|field|TRI_GRAM_TOKENS_ALT_SEPARATOR
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|TRI_GRAM_TOKENS_ALT_SEPARATOR
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please<SEP>divide"
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please<SEP>divide<SEP>this"
argument_list|,
literal|0
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide"
argument_list|,
literal|7
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide<SEP>this"
argument_list|,
literal|7
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide<SEP>this<SEP>sentence"
argument_list|,
literal|7
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this"
argument_list|,
literal|14
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this<SEP>sentence"
argument_list|,
literal|14
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this<SEP>sentence<SEP>into"
argument_list|,
literal|14
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence"
argument_list|,
literal|19
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence<SEP>into"
argument_list|,
literal|19
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence<SEP>into<SEP>shingles"
argument_list|,
literal|19
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into"
argument_list|,
literal|28
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into<SEP>shingles"
argument_list|,
literal|28
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"shingles"
argument_list|,
literal|33
argument_list|,
literal|39
argument_list|)
block|}
decl_stmt|;
DECL|field|TRI_GRAM_POSITION_INCREMENTS_ALT_SEPARATOR
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|TRI_GRAM_POSITION_INCREMENTS_ALT_SEPARATOR
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
DECL|field|TRI_GRAM_TYPES_ALT_SEPARATOR
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|TRI_GRAM_TYPES_ALT_SEPARATOR
init|=
operator|new
name|String
index|[]
block|{
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|}
decl_stmt|;
DECL|field|TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_ALT_SEPARATOR
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_ALT_SEPARATOR
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please<SEP>divide"
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please<SEP>divide<SEP>this"
argument_list|,
literal|0
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide<SEP>this"
argument_list|,
literal|7
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide<SEP>this<SEP>sentence"
argument_list|,
literal|7
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this<SEP>sentence"
argument_list|,
literal|14
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this<SEP>sentence<SEP>into"
argument_list|,
literal|14
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence<SEP>into"
argument_list|,
literal|19
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence<SEP>into<SEP>shingles"
argument_list|,
literal|19
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into<SEP>shingles"
argument_list|,
literal|28
argument_list|,
literal|39
argument_list|)
block|,   }
decl_stmt|;
DECL|field|TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_ALT_SEPARATOR
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_ALT_SEPARATOR
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
DECL|field|TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_ALT_SEPARATOR
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_ALT_SEPARATOR
init|=
operator|new
name|String
index|[]
block|{
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,   }
decl_stmt|;
DECL|field|TRI_GRAM_TOKENS_NULL_SEPARATOR
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|TRI_GRAM_TOKENS_NULL_SEPARATOR
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
block|,
name|createToken
argument_list|(
literal|"pleasedivide"
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"pleasedividethis"
argument_list|,
literal|0
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide"
argument_list|,
literal|7
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"dividethis"
argument_list|,
literal|7
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"dividethissentence"
argument_list|,
literal|7
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this"
argument_list|,
literal|14
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"thissentence"
argument_list|,
literal|14
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"thissentenceinto"
argument_list|,
literal|14
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence"
argument_list|,
literal|19
argument_list|,
literal|27
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentenceinto"
argument_list|,
literal|19
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentenceintoshingles"
argument_list|,
literal|19
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into"
argument_list|,
literal|28
argument_list|,
literal|32
argument_list|)
block|,
name|createToken
argument_list|(
literal|"intoshingles"
argument_list|,
literal|28
argument_list|,
literal|39
argument_list|)
block|,
name|createToken
argument_list|(
literal|"shingles"
argument_list|,
literal|33
argument_list|,
literal|39
argument_list|)
block|}
decl_stmt|;
DECL|field|TRI_GRAM_POSITION_INCREMENTS_NULL_SEPARATOR
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|TRI_GRAM_POSITION_INCREMENTS_NULL_SEPARATOR
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
DECL|field|TRI_GRAM_TYPES_NULL_SEPARATOR
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|TRI_GRAM_TYPES_NULL_SEPARATOR
init|=
operator|new
name|String
index|[]
block|{
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|}
decl_stmt|;
DECL|field|TEST_TOKEN_POS_INCR_EQUAL_TO_N
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|TEST_TOKEN_POS_INCR_EQUAL_TO_N
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide"
argument_list|,
literal|7
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this"
argument_list|,
literal|14
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence"
argument_list|,
literal|29
argument_list|,
literal|37
argument_list|,
literal|3
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into"
argument_list|,
literal|38
argument_list|,
literal|42
argument_list|)
block|,
name|createToken
argument_list|(
literal|"shingles"
argument_list|,
literal|43
argument_list|,
literal|49
argument_list|)
block|,   }
decl_stmt|;
DECL|field|TRI_GRAM_TOKENS_POS_INCR_EQUAL_TO_N
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|TRI_GRAM_TOKENS_POS_INCR_EQUAL_TO_N
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please divide"
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please divide this"
argument_list|,
literal|0
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide"
argument_list|,
literal|7
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this"
argument_list|,
literal|7
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this _"
argument_list|,
literal|7
argument_list|,
literal|29
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this"
argument_list|,
literal|14
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this _"
argument_list|,
literal|14
argument_list|,
literal|29
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this _ _"
argument_list|,
literal|14
argument_list|,
literal|29
argument_list|)
block|,
name|createToken
argument_list|(
literal|"_ _ sentence"
argument_list|,
literal|29
argument_list|,
literal|37
argument_list|)
block|,
name|createToken
argument_list|(
literal|"_ sentence"
argument_list|,
literal|29
argument_list|,
literal|37
argument_list|)
block|,
name|createToken
argument_list|(
literal|"_ sentence into"
argument_list|,
literal|29
argument_list|,
literal|42
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence"
argument_list|,
literal|29
argument_list|,
literal|37
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence into"
argument_list|,
literal|29
argument_list|,
literal|42
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence into shingles"
argument_list|,
literal|29
argument_list|,
literal|49
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into"
argument_list|,
literal|38
argument_list|,
literal|42
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into shingles"
argument_list|,
literal|38
argument_list|,
literal|49
argument_list|)
block|,
name|createToken
argument_list|(
literal|"shingles"
argument_list|,
literal|43
argument_list|,
literal|49
argument_list|)
block|}
decl_stmt|;
DECL|field|TRI_GRAM_POSITION_INCREMENTS_POS_INCR_EQUAL_TO_N
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|TRI_GRAM_POSITION_INCREMENTS_POS_INCR_EQUAL_TO_N
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
DECL|field|TRI_GRAM_TYPES_POS_INCR_EQUAL_TO_N
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|TRI_GRAM_TYPES_POS_INCR_EQUAL_TO_N
init|=
operator|new
name|String
index|[]
block|{
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|}
decl_stmt|;
DECL|field|TRI_GRAM_TOKENS_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|TRI_GRAM_TOKENS_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please divide"
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please divide this"
argument_list|,
literal|0
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this"
argument_list|,
literal|7
argument_list|,
literal|18
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this _"
argument_list|,
literal|7
argument_list|,
literal|29
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this _"
argument_list|,
literal|14
argument_list|,
literal|29
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this _ _"
argument_list|,
literal|14
argument_list|,
literal|29
argument_list|)
block|,
name|createToken
argument_list|(
literal|"_ _ sentence"
argument_list|,
literal|29
argument_list|,
literal|37
argument_list|)
block|,
name|createToken
argument_list|(
literal|"_ sentence"
argument_list|,
literal|29
argument_list|,
literal|37
argument_list|)
block|,
name|createToken
argument_list|(
literal|"_ sentence into"
argument_list|,
literal|29
argument_list|,
literal|42
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence into"
argument_list|,
literal|29
argument_list|,
literal|42
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence into shingles"
argument_list|,
literal|29
argument_list|,
literal|49
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into shingles"
argument_list|,
literal|38
argument_list|,
literal|49
argument_list|)
block|,   }
decl_stmt|;
DECL|field|TRI_GRAM_POSITION_INCREMENTS_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|TRI_GRAM_POSITION_INCREMENTS_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
DECL|field|TRI_GRAM_TYPES_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|TRI_GRAM_TYPES_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS
init|=
operator|new
name|String
index|[]
block|{
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,   }
decl_stmt|;
DECL|field|TEST_TOKEN_POS_INCR_GREATER_THAN_N
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|TEST_TOKEN_POS_INCR_GREATER_THAN_N
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide"
argument_list|,
literal|57
argument_list|,
literal|63
argument_list|,
literal|8
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this"
argument_list|,
literal|64
argument_list|,
literal|68
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence"
argument_list|,
literal|69
argument_list|,
literal|77
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into"
argument_list|,
literal|78
argument_list|,
literal|82
argument_list|)
block|,
name|createToken
argument_list|(
literal|"shingles"
argument_list|,
literal|83
argument_list|,
literal|89
argument_list|)
block|,   }
decl_stmt|;
DECL|field|TRI_GRAM_TOKENS_POS_INCR_GREATER_THAN_N
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|TRI_GRAM_TOKENS_POS_INCR_GREATER_THAN_N
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please _"
argument_list|,
literal|0
argument_list|,
literal|57
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please _ _"
argument_list|,
literal|0
argument_list|,
literal|57
argument_list|)
block|,
name|createToken
argument_list|(
literal|"_ _ divide"
argument_list|,
literal|57
argument_list|,
literal|63
argument_list|)
block|,
name|createToken
argument_list|(
literal|"_ divide"
argument_list|,
literal|57
argument_list|,
literal|63
argument_list|)
block|,
name|createToken
argument_list|(
literal|"_ divide this"
argument_list|,
literal|57
argument_list|,
literal|68
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide"
argument_list|,
literal|57
argument_list|,
literal|63
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this"
argument_list|,
literal|57
argument_list|,
literal|68
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this sentence"
argument_list|,
literal|57
argument_list|,
literal|77
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this"
argument_list|,
literal|64
argument_list|,
literal|68
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence"
argument_list|,
literal|64
argument_list|,
literal|77
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence into"
argument_list|,
literal|64
argument_list|,
literal|82
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence"
argument_list|,
literal|69
argument_list|,
literal|77
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence into"
argument_list|,
literal|69
argument_list|,
literal|82
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence into shingles"
argument_list|,
literal|69
argument_list|,
literal|89
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into"
argument_list|,
literal|78
argument_list|,
literal|82
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into shingles"
argument_list|,
literal|78
argument_list|,
literal|89
argument_list|)
block|,
name|createToken
argument_list|(
literal|"shingles"
argument_list|,
literal|83
argument_list|,
literal|89
argument_list|)
block|}
decl_stmt|;
DECL|field|TRI_GRAM_POSITION_INCREMENTS_POS_INCR_GREATER_THAN_N
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|TRI_GRAM_POSITION_INCREMENTS_POS_INCR_GREATER_THAN_N
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
DECL|field|TRI_GRAM_TYPES_POS_INCR_GREATER_THAN_N
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|TRI_GRAM_TYPES_POS_INCR_GREATER_THAN_N
init|=
operator|new
name|String
index|[]
block|{
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"word"
block|,
literal|"shingle"
block|,
literal|"word"
block|}
decl_stmt|;
DECL|field|TRI_GRAM_TOKENS_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS
specifier|public
specifier|static
specifier|final
name|Token
index|[]
name|TRI_GRAM_TOKENS_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS
init|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please _"
argument_list|,
literal|0
argument_list|,
literal|57
argument_list|)
block|,
name|createToken
argument_list|(
literal|"please _ _"
argument_list|,
literal|0
argument_list|,
literal|57
argument_list|)
block|,
name|createToken
argument_list|(
literal|"_ _ divide"
argument_list|,
literal|57
argument_list|,
literal|63
argument_list|)
block|,
name|createToken
argument_list|(
literal|"_ divide"
argument_list|,
literal|57
argument_list|,
literal|63
argument_list|)
block|,
name|createToken
argument_list|(
literal|"_ divide this"
argument_list|,
literal|57
argument_list|,
literal|68
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this"
argument_list|,
literal|57
argument_list|,
literal|68
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide this sentence"
argument_list|,
literal|57
argument_list|,
literal|77
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence"
argument_list|,
literal|64
argument_list|,
literal|77
argument_list|)
block|,
name|createToken
argument_list|(
literal|"this sentence into"
argument_list|,
literal|64
argument_list|,
literal|82
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence into"
argument_list|,
literal|69
argument_list|,
literal|82
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence into shingles"
argument_list|,
literal|69
argument_list|,
literal|89
argument_list|)
block|,
name|createToken
argument_list|(
literal|"into shingles"
argument_list|,
literal|78
argument_list|,
literal|89
argument_list|)
block|,   }
decl_stmt|;
DECL|field|TRI_GRAM_POSITION_INCREMENTS_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|TRI_GRAM_POSITION_INCREMENTS_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
DECL|field|TRI_GRAM_TYPES_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|TRI_GRAM_TYPES_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS
init|=
operator|new
name|String
index|[]
block|{
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,
literal|"shingle"
block|,   }
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|testTokenWithHoles
operator|=
operator|new
name|Token
index|[]
block|{
name|createToken
argument_list|(
literal|"please"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
block|,
name|createToken
argument_list|(
literal|"divide"
argument_list|,
literal|7
argument_list|,
literal|13
argument_list|)
block|,
name|createToken
argument_list|(
literal|"sentence"
argument_list|,
literal|19
argument_list|,
literal|27
argument_list|,
literal|2
argument_list|)
block|,
name|createToken
argument_list|(
literal|"shingles"
argument_list|,
literal|33
argument_list|,
literal|39
argument_list|,
literal|2
argument_list|)
block|,     }
expr_stmt|;
block|}
comment|/*    * Class under test for void ShingleFilter(TokenStream, int)    */
DECL|method|testBiGramFilter
specifier|public
name|void
name|testBiGramFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|2
argument_list|,
name|TEST_TOKEN
argument_list|,
name|BI_GRAM_TOKENS
argument_list|,
name|BI_GRAM_POSITION_INCREMENTS
argument_list|,
name|BI_GRAM_TYPES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testBiGramFilterWithHoles
specifier|public
name|void
name|testBiGramFilterWithHoles
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|2
argument_list|,
name|testTokenWithHoles
argument_list|,
name|BI_GRAM_TOKENS_WITH_HOLES
argument_list|,
name|BI_GRAM_POSITION_INCREMENTS_WITH_HOLES
argument_list|,
name|BI_GRAM_TYPES_WITH_HOLES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testBiGramFilterWithoutUnigrams
specifier|public
name|void
name|testBiGramFilterWithoutUnigrams
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|2
argument_list|,
name|TEST_TOKEN
argument_list|,
name|BI_GRAM_TOKENS_WITHOUT_UNIGRAMS
argument_list|,
name|BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS
argument_list|,
name|BI_GRAM_TYPES_WITHOUT_UNIGRAMS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testBiGramFilterWithHolesWithoutUnigrams
specifier|public
name|void
name|testBiGramFilterWithHolesWithoutUnigrams
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|2
argument_list|,
name|testTokenWithHoles
argument_list|,
name|BI_GRAM_TOKENS_WITH_HOLES_WITHOUT_UNIGRAMS
argument_list|,
name|BI_GRAM_POSITION_INCREMENTS_WITH_HOLES_WITHOUT_UNIGRAMS
argument_list|,
name|BI_GRAM_TYPES_WITHOUT_UNIGRAMS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testBiGramFilterWithSingleToken
specifier|public
name|void
name|testBiGramFilterWithSingleToken
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|2
argument_list|,
name|TEST_SINGLE_TOKEN
argument_list|,
name|SINGLE_TOKEN
argument_list|,
name|SINGLE_TOKEN_INCREMENTS
argument_list|,
name|SINGLE_TOKEN_TYPES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testBiGramFilterWithSingleTokenWithoutUnigrams
specifier|public
name|void
name|testBiGramFilterWithSingleTokenWithoutUnigrams
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|2
argument_list|,
name|TEST_SINGLE_TOKEN
argument_list|,
name|EMPTY_TOKEN_ARRAY
argument_list|,
name|EMPTY_TOKEN_INCREMENTS_ARRAY
argument_list|,
name|EMPTY_TOKEN_TYPES_ARRAY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testBiGramFilterWithEmptyTokenStream
specifier|public
name|void
name|testBiGramFilterWithEmptyTokenStream
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|2
argument_list|,
name|EMPTY_TOKEN_ARRAY
argument_list|,
name|EMPTY_TOKEN_ARRAY
argument_list|,
name|EMPTY_TOKEN_INCREMENTS_ARRAY
argument_list|,
name|EMPTY_TOKEN_TYPES_ARRAY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testBiGramFilterWithEmptyTokenStreamWithoutUnigrams
specifier|public
name|void
name|testBiGramFilterWithEmptyTokenStreamWithoutUnigrams
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|2
argument_list|,
name|EMPTY_TOKEN_ARRAY
argument_list|,
name|EMPTY_TOKEN_ARRAY
argument_list|,
name|EMPTY_TOKEN_INCREMENTS_ARRAY
argument_list|,
name|EMPTY_TOKEN_TYPES_ARRAY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testTriGramFilter
specifier|public
name|void
name|testTriGramFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|3
argument_list|,
name|TEST_TOKEN
argument_list|,
name|TRI_GRAM_TOKENS
argument_list|,
name|TRI_GRAM_POSITION_INCREMENTS
argument_list|,
name|TRI_GRAM_TYPES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testTriGramFilterWithoutUnigrams
specifier|public
name|void
name|testTriGramFilterWithoutUnigrams
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|3
argument_list|,
name|TEST_TOKEN
argument_list|,
name|TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS
argument_list|,
name|TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS
argument_list|,
name|TRI_GRAM_TYPES_WITHOUT_UNIGRAMS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testFourGramFilter
specifier|public
name|void
name|testFourGramFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|4
argument_list|,
name|TEST_TOKEN
argument_list|,
name|FOUR_GRAM_TOKENS
argument_list|,
name|FOUR_GRAM_POSITION_INCREMENTS
argument_list|,
name|FOUR_GRAM_TYPES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testFourGramFilterWithoutUnigrams
specifier|public
name|void
name|testFourGramFilterWithoutUnigrams
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|4
argument_list|,
name|TEST_TOKEN
argument_list|,
name|FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS
argument_list|,
name|FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS
argument_list|,
name|FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testTriGramFilterMinTriGram
specifier|public
name|void
name|testTriGramFilterMinTriGram
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
name|TEST_TOKEN
argument_list|,
name|TRI_GRAM_TOKENS_MIN_TRI_GRAM
argument_list|,
name|TRI_GRAM_POSITION_INCREMENTS_MIN_TRI_GRAM
argument_list|,
name|TRI_GRAM_TYPES_MIN_TRI_GRAM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testTriGramFilterWithoutUnigramsMinTriGram
specifier|public
name|void
name|testTriGramFilterWithoutUnigramsMinTriGram
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
name|TEST_TOKEN
argument_list|,
name|TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM
argument_list|,
name|TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM
argument_list|,
name|TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_TRI_GRAM
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testFourGramFilterMinTriGram
specifier|public
name|void
name|testFourGramFilterMinTriGram
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|,
name|TEST_TOKEN
argument_list|,
name|FOUR_GRAM_TOKENS_MIN_TRI_GRAM
argument_list|,
name|FOUR_GRAM_POSITION_INCREMENTS_MIN_TRI_GRAM
argument_list|,
name|FOUR_GRAM_TYPES_MIN_TRI_GRAM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testFourGramFilterWithoutUnigramsMinTriGram
specifier|public
name|void
name|testFourGramFilterWithoutUnigramsMinTriGram
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|,
name|TEST_TOKEN
argument_list|,
name|FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM
argument_list|,
name|FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM
argument_list|,
name|FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_TRI_GRAM
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testFourGramFilterMinFourGram
specifier|public
name|void
name|testFourGramFilterMinFourGram
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
name|TEST_TOKEN
argument_list|,
name|FOUR_GRAM_TOKENS_MIN_FOUR_GRAM
argument_list|,
name|FOUR_GRAM_POSITION_INCREMENTS_MIN_FOUR_GRAM
argument_list|,
name|FOUR_GRAM_TYPES_MIN_FOUR_GRAM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testFourGramFilterWithoutUnigramsMinFourGram
specifier|public
name|void
name|testFourGramFilterWithoutUnigramsMinFourGram
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
name|TEST_TOKEN
argument_list|,
name|FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM
argument_list|,
name|FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM
argument_list|,
name|FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_FOUR_GRAM
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testBiGramFilterNoSeparator
specifier|public
name|void
name|testBiGramFilterNoSeparator
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|""
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|TEST_TOKEN
argument_list|,
name|BI_GRAM_TOKENS_NO_SEPARATOR
argument_list|,
name|BI_GRAM_POSITION_INCREMENTS_NO_SEPARATOR
argument_list|,
name|BI_GRAM_TYPES_NO_SEPARATOR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testBiGramFilterWithoutUnigramsNoSeparator
specifier|public
name|void
name|testBiGramFilterWithoutUnigramsNoSeparator
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|""
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|TEST_TOKEN
argument_list|,
name|BI_GRAM_TOKENS_WITHOUT_UNIGRAMS_NO_SEPARATOR
argument_list|,
name|BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_NO_SEPARATOR
argument_list|,
name|BI_GRAM_TYPES_WITHOUT_UNIGRAMS_NO_SEPARATOR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testTriGramFilterNoSeparator
specifier|public
name|void
name|testTriGramFilterNoSeparator
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|""
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
name|TEST_TOKEN
argument_list|,
name|TRI_GRAM_TOKENS_NO_SEPARATOR
argument_list|,
name|TRI_GRAM_POSITION_INCREMENTS_NO_SEPARATOR
argument_list|,
name|TRI_GRAM_TYPES_NO_SEPARATOR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testTriGramFilterWithoutUnigramsNoSeparator
specifier|public
name|void
name|testTriGramFilterWithoutUnigramsNoSeparator
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|""
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
name|TEST_TOKEN
argument_list|,
name|TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_NO_SEPARATOR
argument_list|,
name|TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_NO_SEPARATOR
argument_list|,
name|TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_NO_SEPARATOR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testBiGramFilterAltSeparator
specifier|public
name|void
name|testBiGramFilterAltSeparator
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|"<SEP>"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|TEST_TOKEN
argument_list|,
name|BI_GRAM_TOKENS_ALT_SEPARATOR
argument_list|,
name|BI_GRAM_POSITION_INCREMENTS_ALT_SEPARATOR
argument_list|,
name|BI_GRAM_TYPES_ALT_SEPARATOR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testBiGramFilterWithoutUnigramsAltSeparator
specifier|public
name|void
name|testBiGramFilterWithoutUnigramsAltSeparator
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|"<SEP>"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|TEST_TOKEN
argument_list|,
name|BI_GRAM_TOKENS_WITHOUT_UNIGRAMS_ALT_SEPARATOR
argument_list|,
name|BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_ALT_SEPARATOR
argument_list|,
name|BI_GRAM_TYPES_WITHOUT_UNIGRAMS_ALT_SEPARATOR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testTriGramFilterAltSeparator
specifier|public
name|void
name|testTriGramFilterAltSeparator
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|"<SEP>"
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
name|TEST_TOKEN
argument_list|,
name|TRI_GRAM_TOKENS_ALT_SEPARATOR
argument_list|,
name|TRI_GRAM_POSITION_INCREMENTS_ALT_SEPARATOR
argument_list|,
name|TRI_GRAM_TYPES_ALT_SEPARATOR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testTriGramFilterWithoutUnigramsAltSeparator
specifier|public
name|void
name|testTriGramFilterWithoutUnigramsAltSeparator
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|"<SEP>"
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
name|TEST_TOKEN
argument_list|,
name|TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_ALT_SEPARATOR
argument_list|,
name|TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_ALT_SEPARATOR
argument_list|,
name|TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_ALT_SEPARATOR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testTriGramFilterNullSeparator
specifier|public
name|void
name|testTriGramFilterNullSeparator
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|null
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
name|TEST_TOKEN
argument_list|,
name|TRI_GRAM_TOKENS_NULL_SEPARATOR
argument_list|,
name|TRI_GRAM_POSITION_INCREMENTS_NULL_SEPARATOR
argument_list|,
name|TRI_GRAM_TYPES_NULL_SEPARATOR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testPositionIncrementEqualToN
specifier|public
name|void
name|testPositionIncrementEqualToN
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
name|TEST_TOKEN_POS_INCR_EQUAL_TO_N
argument_list|,
name|TRI_GRAM_TOKENS_POS_INCR_EQUAL_TO_N
argument_list|,
name|TRI_GRAM_POSITION_INCREMENTS_POS_INCR_EQUAL_TO_N
argument_list|,
name|TRI_GRAM_TYPES_POS_INCR_EQUAL_TO_N
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testPositionIncrementEqualToNWithoutUnigrams
specifier|public
name|void
name|testPositionIncrementEqualToNWithoutUnigrams
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
name|TEST_TOKEN_POS_INCR_EQUAL_TO_N
argument_list|,
name|TRI_GRAM_TOKENS_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS
argument_list|,
name|TRI_GRAM_POSITION_INCREMENTS_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS
argument_list|,
name|TRI_GRAM_TYPES_POS_INCR_EQUAL_TO_N_WITHOUT_UNIGRAMS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testPositionIncrementGreaterThanN
specifier|public
name|void
name|testPositionIncrementGreaterThanN
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
name|TEST_TOKEN_POS_INCR_GREATER_THAN_N
argument_list|,
name|TRI_GRAM_TOKENS_POS_INCR_GREATER_THAN_N
argument_list|,
name|TRI_GRAM_POSITION_INCREMENTS_POS_INCR_GREATER_THAN_N
argument_list|,
name|TRI_GRAM_TYPES_POS_INCR_GREATER_THAN_N
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testPositionIncrementGreaterThanNWithoutUnigrams
specifier|public
name|void
name|testPositionIncrementGreaterThanNWithoutUnigrams
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
name|TEST_TOKEN_POS_INCR_GREATER_THAN_N
argument_list|,
name|TRI_GRAM_TOKENS_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS
argument_list|,
name|TRI_GRAM_POSITION_INCREMENTS_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS
argument_list|,
name|TRI_GRAM_TYPES_POS_INCR_GREATER_THAN_N_WITHOUT_UNIGRAMS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testReset
specifier|public
name|void
name|testReset
parameter_list|()
throws|throws
name|Exception
block|{
name|Tokenizer
name|wsTokenizer
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|StringReader
argument_list|(
literal|"please divide this sentence"
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|filter
init|=
operator|new
name|ShingleFilter
argument_list|(
name|wsTokenizer
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|filter
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"please"
block|,
literal|"please divide"
block|,
literal|"divide"
block|,
literal|"divide this"
block|,
literal|"this"
block|,
literal|"this sentence"
block|,
literal|"sentence"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|7
block|,
literal|7
block|,
literal|14
block|,
literal|14
block|,
literal|19
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|13
block|,
literal|13
block|,
literal|18
block|,
literal|18
block|,
literal|27
block|,
literal|27
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|TypeAttributeImpl
operator|.
name|DEFAULT_TYPE
block|,
literal|"shingle"
block|,
name|TypeAttributeImpl
operator|.
name|DEFAULT_TYPE
block|,
literal|"shingle"
block|,
name|TypeAttributeImpl
operator|.
name|DEFAULT_TYPE
block|,
literal|"shingle"
block|,
name|TypeAttributeImpl
operator|.
name|DEFAULT_TYPE
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
name|wsTokenizer
operator|.
name|reset
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"please divide this sentence"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|filter
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"please"
block|,
literal|"please divide"
block|,
literal|"divide"
block|,
literal|"divide this"
block|,
literal|"this"
block|,
literal|"this sentence"
block|,
literal|"sentence"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|7
block|,
literal|7
block|,
literal|14
block|,
literal|14
block|,
literal|19
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|13
block|,
literal|13
block|,
literal|18
block|,
literal|18
block|,
literal|27
block|,
literal|27
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|TypeAttributeImpl
operator|.
name|DEFAULT_TYPE
block|,
literal|"shingle"
block|,
name|TypeAttributeImpl
operator|.
name|DEFAULT_TYPE
block|,
literal|"shingle"
block|,
name|TypeAttributeImpl
operator|.
name|DEFAULT_TYPE
block|,
literal|"shingle"
block|,
name|TypeAttributeImpl
operator|.
name|DEFAULT_TYPE
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testOutputUnigramsIfNoShinglesSingleTokenCase
specifier|public
name|void
name|testOutputUnigramsIfNoShinglesSingleTokenCase
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Single token input with outputUnigrams==false is the primary case where
comment|// enabling this option should alter program behavior.
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
name|TEST_SINGLE_TOKEN
argument_list|,
name|SINGLE_TOKEN
argument_list|,
name|SINGLE_TOKEN_INCREMENTS
argument_list|,
name|SINGLE_TOKEN_TYPES
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testOutputUnigramsIfNoShinglesWithSimpleBigram
specifier|public
name|void
name|testOutputUnigramsIfNoShinglesWithSimpleBigram
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Here we expect the same result as with testBiGramFilter().
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
name|TEST_TOKEN
argument_list|,
name|BI_GRAM_TOKENS
argument_list|,
name|BI_GRAM_POSITION_INCREMENTS
argument_list|,
name|BI_GRAM_TYPES
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testOutputUnigramsIfNoShinglesWithSimpleUnigramlessBigram
specifier|public
name|void
name|testOutputUnigramsIfNoShinglesWithSimpleUnigramlessBigram
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Here we expect the same result as with testBiGramFilterWithoutUnigrams().
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
name|TEST_TOKEN
argument_list|,
name|BI_GRAM_TOKENS_WITHOUT_UNIGRAMS
argument_list|,
name|BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS
argument_list|,
name|BI_GRAM_TYPES_WITHOUT_UNIGRAMS
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testOutputUnigramsIfNoShinglesWithMultipleInputTokens
specifier|public
name|void
name|testOutputUnigramsIfNoShinglesWithMultipleInputTokens
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test when the minimum shingle size is greater than the number of input tokens
name|this
operator|.
name|shingleFilterTest
argument_list|(
literal|7
argument_list|,
literal|7
argument_list|,
name|TEST_TOKEN
argument_list|,
name|TEST_TOKEN
argument_list|,
name|UNIGRAM_ONLY_POSITION_INCREMENTS
argument_list|,
name|UNIGRAM_ONLY_TYPES
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|shingleFilterTest
specifier|protected
name|void
name|shingleFilterTest
parameter_list|(
name|int
name|maxSize
parameter_list|,
name|Token
index|[]
name|tokensToShingle
parameter_list|,
name|Token
index|[]
name|tokensToCompare
parameter_list|,
name|int
index|[]
name|positionIncrements
parameter_list|,
name|String
index|[]
name|types
parameter_list|,
name|boolean
name|outputUnigrams
parameter_list|)
throws|throws
name|IOException
block|{
name|ShingleFilter
name|filter
init|=
operator|new
name|ShingleFilter
argument_list|(
operator|new
name|TestTokenStream
argument_list|(
name|tokensToShingle
argument_list|)
argument_list|,
name|maxSize
argument_list|)
decl_stmt|;
name|filter
operator|.
name|setOutputUnigrams
argument_list|(
name|outputUnigrams
argument_list|)
expr_stmt|;
name|shingleFilterTestCommon
argument_list|(
name|filter
argument_list|,
name|tokensToCompare
argument_list|,
name|positionIncrements
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
DECL|method|shingleFilterTest
specifier|protected
name|void
name|shingleFilterTest
parameter_list|(
name|int
name|minSize
parameter_list|,
name|int
name|maxSize
parameter_list|,
name|Token
index|[]
name|tokensToShingle
parameter_list|,
name|Token
index|[]
name|tokensToCompare
parameter_list|,
name|int
index|[]
name|positionIncrements
parameter_list|,
name|String
index|[]
name|types
parameter_list|,
name|boolean
name|outputUnigrams
parameter_list|)
throws|throws
name|IOException
block|{
name|ShingleFilter
name|filter
init|=
operator|new
name|ShingleFilter
argument_list|(
operator|new
name|TestTokenStream
argument_list|(
name|tokensToShingle
argument_list|)
argument_list|,
name|minSize
argument_list|,
name|maxSize
argument_list|)
decl_stmt|;
name|filter
operator|.
name|setOutputUnigrams
argument_list|(
name|outputUnigrams
argument_list|)
expr_stmt|;
name|shingleFilterTestCommon
argument_list|(
name|filter
argument_list|,
name|tokensToCompare
argument_list|,
name|positionIncrements
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
DECL|method|shingleFilterTest
specifier|protected
name|void
name|shingleFilterTest
parameter_list|(
name|int
name|minSize
parameter_list|,
name|int
name|maxSize
parameter_list|,
name|Token
index|[]
name|tokensToShingle
parameter_list|,
name|Token
index|[]
name|tokensToCompare
parameter_list|,
name|int
index|[]
name|positionIncrements
parameter_list|,
name|String
index|[]
name|types
parameter_list|,
name|boolean
name|outputUnigrams
parameter_list|,
name|boolean
name|outputUnigramsIfNoShingles
parameter_list|)
throws|throws
name|IOException
block|{
name|ShingleFilter
name|filter
init|=
operator|new
name|ShingleFilter
argument_list|(
operator|new
name|TestTokenStream
argument_list|(
name|tokensToShingle
argument_list|)
argument_list|,
name|minSize
argument_list|,
name|maxSize
argument_list|)
decl_stmt|;
name|filter
operator|.
name|setOutputUnigrams
argument_list|(
name|outputUnigrams
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setOutputUnigramsIfNoShingles
argument_list|(
name|outputUnigramsIfNoShingles
argument_list|)
expr_stmt|;
name|shingleFilterTestCommon
argument_list|(
name|filter
argument_list|,
name|tokensToCompare
argument_list|,
name|positionIncrements
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
DECL|method|shingleFilterTest
specifier|protected
name|void
name|shingleFilterTest
parameter_list|(
name|String
name|tokenSeparator
parameter_list|,
name|int
name|minSize
parameter_list|,
name|int
name|maxSize
parameter_list|,
name|Token
index|[]
name|tokensToShingle
parameter_list|,
name|Token
index|[]
name|tokensToCompare
parameter_list|,
name|int
index|[]
name|positionIncrements
parameter_list|,
name|String
index|[]
name|types
parameter_list|,
name|boolean
name|outputUnigrams
parameter_list|)
throws|throws
name|IOException
block|{
name|ShingleFilter
name|filter
init|=
operator|new
name|ShingleFilter
argument_list|(
operator|new
name|TestTokenStream
argument_list|(
name|tokensToShingle
argument_list|)
argument_list|,
name|minSize
argument_list|,
name|maxSize
argument_list|)
decl_stmt|;
name|filter
operator|.
name|setTokenSeparator
argument_list|(
name|tokenSeparator
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setOutputUnigrams
argument_list|(
name|outputUnigrams
argument_list|)
expr_stmt|;
name|shingleFilterTestCommon
argument_list|(
name|filter
argument_list|,
name|tokensToCompare
argument_list|,
name|positionIncrements
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
DECL|method|shingleFilterTestCommon
specifier|protected
name|void
name|shingleFilterTestCommon
parameter_list|(
name|ShingleFilter
name|filter
parameter_list|,
name|Token
index|[]
name|tokensToCompare
parameter_list|,
name|int
index|[]
name|positionIncrements
parameter_list|,
name|String
index|[]
name|types
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|text
index|[]
init|=
operator|new
name|String
index|[
name|tokensToCompare
operator|.
name|length
index|]
decl_stmt|;
name|int
name|startOffsets
index|[]
init|=
operator|new
name|int
index|[
name|tokensToCompare
operator|.
name|length
index|]
decl_stmt|;
name|int
name|endOffsets
index|[]
init|=
operator|new
name|int
index|[
name|tokensToCompare
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tokensToCompare
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|text
index|[
name|i
index|]
operator|=
operator|new
name|String
argument_list|(
name|tokensToCompare
index|[
name|i
index|]
operator|.
name|buffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|tokensToCompare
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|startOffsets
index|[
name|i
index|]
operator|=
name|tokensToCompare
index|[
name|i
index|]
operator|.
name|startOffset
argument_list|()
expr_stmt|;
name|endOffsets
index|[
name|i
index|]
operator|=
name|tokensToCompare
index|[
name|i
index|]
operator|.
name|endOffset
argument_list|()
expr_stmt|;
block|}
name|assertTokenStreamContents
argument_list|(
name|filter
argument_list|,
name|text
argument_list|,
name|startOffsets
argument_list|,
name|endOffsets
argument_list|,
name|types
argument_list|,
name|positionIncrements
argument_list|)
expr_stmt|;
block|}
DECL|method|createToken
specifier|private
specifier|static
name|Token
name|createToken
parameter_list|(
name|String
name|term
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
name|createToken
argument_list|(
name|term
argument_list|,
name|start
argument_list|,
name|offset
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|createToken
specifier|private
specifier|static
name|Token
name|createToken
parameter_list|(
name|String
name|term
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|positionIncrement
parameter_list|)
block|{
name|Token
name|token
init|=
operator|new
name|Token
argument_list|(
name|start
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|token
operator|.
name|copyBuffer
argument_list|(
name|term
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|term
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|.
name|setPositionIncrement
argument_list|(
name|positionIncrement
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
comment|/** blast some random strings through the analyzer */
DECL|method|testRandomStrings
specifier|public
name|void
name|testRandomStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|Tokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|(
name|reader
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|ShingleFilter
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|checkRandomData
argument_list|(
name|random
argument_list|,
name|a
argument_list|,
literal|10000
operator|*
name|RANDOM_MULTIPLIER
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
