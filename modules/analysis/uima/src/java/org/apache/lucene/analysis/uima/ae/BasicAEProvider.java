begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.uima.ae
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|uima
operator|.
name|ae
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|uima
operator|.
name|UIMAFramework
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|uima
operator|.
name|analysis_engine
operator|.
name|AnalysisEngine
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|uima
operator|.
name|analysis_engine
operator|.
name|AnalysisEngineDescription
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|uima
operator|.
name|resource
operator|.
name|ResourceInitializationException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|uima
operator|.
name|util
operator|.
name|XMLInputSource
import|;
end_import
begin_comment
comment|/**  * Basic {@link AEProvider} which just instantiates a UIMA {@link AnalysisEngine} with no additional metadata,  * parameters or resources  */
end_comment
begin_class
DECL|class|BasicAEProvider
specifier|public
class|class
name|BasicAEProvider
implements|implements
name|AEProvider
block|{
DECL|field|aePath
specifier|private
specifier|final
name|String
name|aePath
decl_stmt|;
DECL|field|cachedAE
specifier|private
name|AnalysisEngine
name|cachedAE
decl_stmt|;
DECL|method|BasicAEProvider
specifier|public
name|BasicAEProvider
parameter_list|(
name|String
name|aePath
parameter_list|)
block|{
name|this
operator|.
name|aePath
operator|=
name|aePath
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAE
specifier|public
specifier|synchronized
name|AnalysisEngine
name|getAE
parameter_list|()
throws|throws
name|ResourceInitializationException
block|{
try|try
block|{
if|if
condition|(
name|cachedAE
operator|==
literal|null
condition|)
block|{
comment|// get Resource Specifier from XML file
name|XMLInputSource
name|in
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|XMLInputSource
argument_list|(
name|aePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|in
operator|=
operator|new
name|XMLInputSource
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|aePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// get AE description
name|AnalysisEngineDescription
name|desc
init|=
name|UIMAFramework
operator|.
name|getXMLParser
argument_list|()
operator|.
name|parseAnalysisEngineDescription
argument_list|(
name|in
argument_list|)
decl_stmt|;
comment|// create AE here
name|cachedAE
operator|=
name|UIMAFramework
operator|.
name|produceAnalysisEngine
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cachedAE
operator|.
name|reconfigure
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|cachedAE
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|ResourceInitializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|cachedAE
return|;
block|}
block|}
end_class
end_unit
