begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.ja.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ja
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|LineNumberReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetDecoder
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CodingErrorAction
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ja
operator|.
name|dict
operator|.
name|CharacterDefinition
import|;
end_import
begin_class
DECL|class|UnknownDictionaryBuilder
specifier|public
class|class
name|UnknownDictionaryBuilder
block|{
DECL|field|NGRAM_DICTIONARY_ENTRY
specifier|private
specifier|static
specifier|final
name|String
name|NGRAM_DICTIONARY_ENTRY
init|=
literal|"NGRAM,5,5,-32768,è¨å·,ä¸è¬,*,*,*,*,*,*,*"
decl_stmt|;
DECL|field|encoding
specifier|private
name|String
name|encoding
init|=
literal|"euc-jp"
decl_stmt|;
DECL|method|UnknownDictionaryBuilder
specifier|public
name|UnknownDictionaryBuilder
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|this
operator|.
name|encoding
operator|=
name|encoding
expr_stmt|;
block|}
DECL|method|build
specifier|public
name|UnknownDictionaryWriter
name|build
parameter_list|(
name|String
name|dirname
parameter_list|)
throws|throws
name|IOException
block|{
name|UnknownDictionaryWriter
name|unkDictionary
init|=
name|readDictionaryFile
argument_list|(
name|dirname
operator|+
name|File
operator|.
name|separator
operator|+
literal|"unk.def"
argument_list|)
decl_stmt|;
comment|//Should be only one file
name|readCharacterDefinition
argument_list|(
name|dirname
operator|+
name|File
operator|.
name|separator
operator|+
literal|"char.def"
argument_list|,
name|unkDictionary
argument_list|)
expr_stmt|;
return|return
name|unkDictionary
return|;
block|}
DECL|method|readDictionaryFile
specifier|public
name|UnknownDictionaryWriter
name|readDictionaryFile
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readDictionaryFile
argument_list|(
name|filename
argument_list|,
name|encoding
argument_list|)
return|;
block|}
DECL|method|readDictionaryFile
specifier|public
name|UnknownDictionaryWriter
name|readDictionaryFile
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|UnknownDictionaryWriter
name|dictionary
init|=
operator|new
name|UnknownDictionaryWriter
argument_list|(
literal|5
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|FileInputStream
name|inputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|Charset
name|cs
init|=
name|Charset
operator|.
name|forName
argument_list|(
name|encoding
argument_list|)
decl_stmt|;
name|CharsetDecoder
name|decoder
init|=
name|cs
operator|.
name|newDecoder
argument_list|()
operator|.
name|onMalformedInput
argument_list|(
name|CodingErrorAction
operator|.
name|REPORT
argument_list|)
operator|.
name|onUnmappableCharacter
argument_list|(
name|CodingErrorAction
operator|.
name|REPORT
argument_list|)
decl_stmt|;
name|InputStreamReader
name|streamReader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|,
name|decoder
argument_list|)
decl_stmt|;
name|LineNumberReader
name|lineReader
init|=
operator|new
name|LineNumberReader
argument_list|(
name|streamReader
argument_list|)
decl_stmt|;
name|dictionary
operator|.
name|put
argument_list|(
name|CSVUtil
operator|.
name|parse
argument_list|(
name|NGRAM_DICTIONARY_ENTRY
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|lineReader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
comment|// note: unk.def only has 10 fields, it simplifies the writer to just append empty reading and pronunciation,
comment|// even though the unknown dictionary returns hardcoded null here.
specifier|final
name|String
index|[]
name|parsed
init|=
name|CSVUtil
operator|.
name|parse
argument_list|(
name|line
operator|+
literal|",*,*"
argument_list|)
decl_stmt|;
comment|// Probably we don't need to validate entry
name|lines
operator|.
name|add
argument_list|(
name|parsed
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|lines
argument_list|,
operator|new
name|Comparator
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|String
index|[]
name|left
parameter_list|,
name|String
index|[]
name|right
parameter_list|)
block|{
name|int
name|leftId
init|=
name|CharacterDefinition
operator|.
name|lookupCharacterClass
argument_list|(
name|left
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|rightId
init|=
name|CharacterDefinition
operator|.
name|lookupCharacterClass
argument_list|(
name|right
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
return|return
name|leftId
operator|-
name|rightId
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|String
index|[]
name|entry
range|:
name|lines
control|)
block|{
name|dictionary
operator|.
name|put
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
return|return
name|dictionary
return|;
block|}
DECL|method|readCharacterDefinition
specifier|public
name|void
name|readCharacterDefinition
parameter_list|(
name|String
name|filename
parameter_list|,
name|UnknownDictionaryWriter
name|dictionary
parameter_list|)
throws|throws
name|IOException
block|{
name|FileInputStream
name|inputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|InputStreamReader
name|streamReader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
name|LineNumberReader
name|lineReader
init|=
operator|new
name|LineNumberReader
argument_list|(
name|streamReader
argument_list|)
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|lineReader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|replaceAll
argument_list|(
literal|"^\\s"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|line
operator|=
name|line
operator|.
name|replaceAll
argument_list|(
literal|"\\s*#.*"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|line
operator|=
name|line
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
comment|// Skip empty line or comment line
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"0x"
argument_list|)
condition|)
block|{
comment|// Category mapping
name|String
index|[]
name|values
init|=
name|line
operator|.
name|split
argument_list|(
literal|" "
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// Split only first space
if|if
condition|(
operator|!
name|values
index|[
literal|0
index|]
operator|.
name|contains
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
name|int
name|cp
init|=
name|Integer
operator|.
name|decode
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|dictionary
operator|.
name|putCharacterCategory
argument_list|(
name|cp
argument_list|,
name|values
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|codePoints
init|=
name|values
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|"\\.\\."
argument_list|)
decl_stmt|;
name|int
name|cpFrom
init|=
name|Integer
operator|.
name|decode
argument_list|(
name|codePoints
index|[
literal|0
index|]
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|cpTo
init|=
name|Integer
operator|.
name|decode
argument_list|(
name|codePoints
index|[
literal|1
index|]
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|cpFrom
init|;
name|i
operator|<=
name|cpTo
condition|;
name|i
operator|++
control|)
block|{
name|dictionary
operator|.
name|putCharacterCategory
argument_list|(
name|i
argument_list|,
name|values
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Invoke definition
name|String
index|[]
name|values
init|=
name|line
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
comment|// Consecutive space is merged above
name|String
name|characterClassName
init|=
name|values
index|[
literal|0
index|]
decl_stmt|;
name|int
name|invoke
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|int
name|group
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|values
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|values
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
name|dictionary
operator|.
name|putInvokeDefinition
argument_list|(
name|characterClassName
argument_list|,
name|invoke
argument_list|,
name|group
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
