begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.kuromoji.viterbi
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|kuromoji
operator|.
name|viterbi
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|ViterbiNode
specifier|public
specifier|final
class|class
name|ViterbiNode
block|{
DECL|enum|Type
specifier|public
enum|enum
name|Type
block|{
DECL|enum constant|KNOWN
name|KNOWN
block|,
DECL|enum constant|UNKNOWN
name|UNKNOWN
block|,
DECL|enum constant|USER
name|USER
block|}
DECL|field|wordId
specifier|private
specifier|final
name|int
name|wordId
decl_stmt|;
DECL|field|surfaceForm
specifier|private
specifier|final
name|char
index|[]
name|surfaceForm
decl_stmt|;
DECL|field|offset
specifier|private
specifier|final
name|int
name|offset
decl_stmt|;
DECL|field|length
specifier|private
specifier|final
name|int
name|length
decl_stmt|;
DECL|field|leftId
specifier|private
specifier|final
name|int
name|leftId
decl_stmt|;
DECL|field|rightId
specifier|private
specifier|final
name|int
name|rightId
decl_stmt|;
comment|/** word cost for this node */
DECL|field|wordCost
specifier|private
specifier|final
name|int
name|wordCost
decl_stmt|;
comment|/** minimum path cost found thus far */
DECL|field|pathCost
specifier|private
name|int
name|pathCost
decl_stmt|;
DECL|field|leftNode
specifier|private
name|ViterbiNode
name|leftNode
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|Type
name|type
decl_stmt|;
DECL|field|startIndex
specifier|private
specifier|final
name|int
name|startIndex
decl_stmt|;
DECL|method|ViterbiNode
specifier|public
name|ViterbiNode
parameter_list|(
name|int
name|wordId
parameter_list|,
name|char
index|[]
name|surfaceForm
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|leftId
parameter_list|,
name|int
name|rightId
parameter_list|,
name|int
name|wordCost
parameter_list|,
name|int
name|startIndex
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
name|this
operator|.
name|wordId
operator|=
name|wordId
expr_stmt|;
name|this
operator|.
name|surfaceForm
operator|=
name|surfaceForm
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|leftId
operator|=
name|leftId
expr_stmt|;
name|this
operator|.
name|rightId
operator|=
name|rightId
expr_stmt|;
name|this
operator|.
name|wordCost
operator|=
name|wordCost
expr_stmt|;
name|this
operator|.
name|startIndex
operator|=
name|startIndex
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/**    * @return the wordId    */
DECL|method|getWordId
specifier|public
name|int
name|getWordId
parameter_list|()
block|{
return|return
name|wordId
return|;
block|}
comment|/**    * @return the surfaceForm    */
DECL|method|getSurfaceForm
specifier|public
name|char
index|[]
name|getSurfaceForm
parameter_list|()
block|{
return|return
name|surfaceForm
return|;
block|}
comment|/**    * @return start offset into surfaceForm    */
DECL|method|getOffset
specifier|public
name|int
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
comment|/**    * @return length of surfaceForm    */
DECL|method|getLength
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
comment|/**    * @return the surfaceForm as a String    */
DECL|method|getSurfaceFormString
specifier|public
name|String
name|getSurfaceFormString
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|surfaceForm
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/**    * @return the leftId    */
DECL|method|getLeftId
specifier|public
name|int
name|getLeftId
parameter_list|()
block|{
return|return
name|leftId
return|;
block|}
comment|/**    * @return the rightId    */
DECL|method|getRightId
specifier|public
name|int
name|getRightId
parameter_list|()
block|{
return|return
name|rightId
return|;
block|}
comment|/**    * @return the cost    */
DECL|method|getWordCost
specifier|public
name|int
name|getWordCost
parameter_list|()
block|{
return|return
name|wordCost
return|;
block|}
comment|/**    * @return the cost    */
DECL|method|getPathCost
specifier|public
name|int
name|getPathCost
parameter_list|()
block|{
return|return
name|pathCost
return|;
block|}
comment|/**    * param cost minimum path cost found this far    */
DECL|method|setPathCost
specifier|public
name|void
name|setPathCost
parameter_list|(
name|int
name|pathCost
parameter_list|)
block|{
name|this
operator|.
name|pathCost
operator|=
name|pathCost
expr_stmt|;
block|}
DECL|method|setLeftNode
specifier|public
name|void
name|setLeftNode
parameter_list|(
name|ViterbiNode
name|node
parameter_list|)
block|{
name|leftNode
operator|=
name|node
expr_stmt|;
block|}
DECL|method|getLeftNode
specifier|public
name|ViterbiNode
name|getLeftNode
parameter_list|()
block|{
return|return
name|leftNode
return|;
block|}
DECL|method|getStartIndex
specifier|public
name|int
name|getStartIndex
parameter_list|()
block|{
return|return
name|startIndex
return|;
block|}
DECL|method|getType
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
block|}
end_class
end_unit
