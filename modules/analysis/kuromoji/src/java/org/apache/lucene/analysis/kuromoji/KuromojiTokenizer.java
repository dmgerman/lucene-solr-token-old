begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.kuromoji
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|kuromoji
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|BreakIterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|kuromoji
operator|.
name|tokenattributes
operator|.
name|BaseFormAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|kuromoji
operator|.
name|tokenattributes
operator|.
name|InflectionAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|kuromoji
operator|.
name|tokenattributes
operator|.
name|PartOfSpeechAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|kuromoji
operator|.
name|tokenattributes
operator|.
name|ReadingAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|SegmentingTokenizerBase
import|;
end_import
begin_class
DECL|class|KuromojiTokenizer
specifier|public
specifier|final
class|class
name|KuromojiTokenizer
extends|extends
name|SegmentingTokenizerBase
block|{
DECL|field|proto
specifier|private
specifier|static
specifier|final
name|BreakIterator
name|proto
init|=
name|BreakIterator
operator|.
name|getSentenceInstance
argument_list|(
name|Locale
operator|.
name|JAPAN
argument_list|)
decl_stmt|;
DECL|field|termAtt
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|offsetAtt
specifier|private
specifier|final
name|OffsetAttribute
name|offsetAtt
init|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|basicFormAtt
specifier|private
specifier|final
name|BaseFormAttribute
name|basicFormAtt
init|=
name|addAttribute
argument_list|(
name|BaseFormAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posAtt
specifier|private
specifier|final
name|PartOfSpeechAttribute
name|posAtt
init|=
name|addAttribute
argument_list|(
name|PartOfSpeechAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|readingAtt
specifier|private
specifier|final
name|ReadingAttribute
name|readingAtt
init|=
name|addAttribute
argument_list|(
name|ReadingAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|inflectionAtt
specifier|private
specifier|final
name|InflectionAttribute
name|inflectionAtt
init|=
name|addAttribute
argument_list|(
name|InflectionAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|segmenter
specifier|private
specifier|final
name|Segmenter
name|segmenter
decl_stmt|;
DECL|field|tokens
specifier|private
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
decl_stmt|;
DECL|field|tokenIndex
specifier|private
name|int
name|tokenIndex
init|=
literal|0
decl_stmt|;
DECL|field|sentenceStart
specifier|private
name|int
name|sentenceStart
init|=
literal|0
decl_stmt|;
DECL|method|KuromojiTokenizer
specifier|public
name|KuromojiTokenizer
parameter_list|(
name|Reader
name|input
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|Segmenter
argument_list|()
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
DECL|method|KuromojiTokenizer
specifier|public
name|KuromojiTokenizer
parameter_list|(
name|Segmenter
name|segmenter
parameter_list|,
name|Reader
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|,
operator|(
name|BreakIterator
operator|)
name|proto
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|segmenter
operator|=
name|segmenter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextSentence
specifier|protected
name|void
name|setNextSentence
parameter_list|(
name|int
name|sentenceStart
parameter_list|,
name|int
name|sentenceEnd
parameter_list|)
block|{
name|this
operator|.
name|sentenceStart
operator|=
name|sentenceStart
expr_stmt|;
comment|// TODO: maybe don't pass 0 here, so kuromoji tracks offsets for us?
name|tokens
operator|=
name|segmenter
operator|.
name|doTokenize
argument_list|(
literal|0
argument_list|,
name|buffer
argument_list|,
name|sentenceStart
argument_list|,
name|sentenceEnd
operator|-
name|sentenceStart
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tokenIndex
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementWord
specifier|protected
name|boolean
name|incrementWord
parameter_list|()
block|{
if|if
condition|(
name|tokenIndex
operator|==
name|tokens
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Token
name|token
init|=
name|tokens
operator|.
name|get
argument_list|(
name|tokenIndex
argument_list|)
decl_stmt|;
name|int
name|position
init|=
name|token
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|token
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|clearAttributes
argument_list|()
expr_stmt|;
name|termAtt
operator|.
name|copyBuffer
argument_list|(
name|buffer
argument_list|,
name|sentenceStart
operator|+
name|position
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|int
name|startOffset
init|=
name|offset
operator|+
name|sentenceStart
operator|+
name|position
decl_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|correctOffset
argument_list|(
name|startOffset
argument_list|)
argument_list|,
name|correctOffset
argument_list|(
name|startOffset
operator|+
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|basicFormAtt
operator|.
name|setToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|posAtt
operator|.
name|setToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|readingAtt
operator|.
name|setToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|inflectionAtt
operator|.
name|setToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|tokenIndex
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
