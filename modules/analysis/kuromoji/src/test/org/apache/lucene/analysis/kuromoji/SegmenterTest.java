begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.kuromoji
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|kuromoji
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|LineNumberReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|SegmenterTest
specifier|public
class|class
name|SegmenterTest
extends|extends
name|LuceneTestCase
block|{
DECL|field|segmenter
specifier|private
specifier|static
name|Segmenter
name|segmenter
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUpBeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|segmenter
operator|=
operator|new
name|Segmenter
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|segmenter
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSegmentation
specifier|public
name|void
name|testSegmentation
parameter_list|()
block|{
comment|// Skip tests for Michelle Kwan -- UniDic segments Kwan as ã¯ ã¯ã³
comment|//		String input = "ãã·ã§ã«ã»ã¯ã¯ã³ãåªåãã¾ãããã¹ãã¼ã¹ã¹ãã¼ã·ã§ã³ã«è¡ãã¾ããããããããã";
comment|//		String[] surfaceForms = {
comment|//				"ãã·ã§ã«", "ã»", "ã¯ã¯ã³", "ã", "åªå", "ã", "ã¾ã", "ã", "ã",
comment|//				"ã¹ãã¼ã¹", "ã¹ãã¼ã·ã§ã³", "ã«", "è¡ã", "ã¾ã", "ã",
comment|//				"ãããããã", "ã"
comment|//		};
name|String
name|input
init|=
literal|"ã¹ãã¼ã¹ã¹ãã¼ã·ã§ã³ã«è¡ãã¾ããããããããã"
decl_stmt|;
name|String
index|[]
name|surfaceForms
init|=
block|{
literal|"ã¹ãã¼ã¹"
block|,
literal|"ã¹ãã¼ã·ã§ã³"
block|,
literal|"ã«"
block|,
literal|"è¡ã"
block|,
literal|"ã¾ã"
block|,
literal|"ã"
block|,
literal|"ãããããã"
block|,
literal|"ã"
block|}
decl_stmt|;
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
name|segmenter
operator|.
name|tokenize
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tokens
operator|.
name|size
argument_list|()
operator|==
name|surfaceForms
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tokens
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|surfaceForms
index|[
name|i
index|]
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getSurfaceFormString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReadings
specifier|public
name|void
name|testReadings
parameter_list|()
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
name|segmenter
operator|.
name|tokenize
argument_list|(
literal|"å¯¿å¸ãé£ã¹ããã§ãã"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã¹ã·"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReading
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã¬"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getReading
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã¿ã"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getReading
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã¿ã¤"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getReading
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ãã¹"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getReading
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getReading
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadings2
specifier|public
name|void
name|testReadings2
parameter_list|()
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
name|segmenter
operator|.
name|tokenize
argument_list|(
literal|"å¤ãã®å­¦çãè©¦é¨ã«è½ã¡ãã"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ãªãªã¯"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReading
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getReading
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã¬ã¯ã»ã¤"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getReading
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã¬"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getReading
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã·ã±ã³"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getReading
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getReading
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ãªã"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|.
name|getReading
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã¿"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|.
name|getReading
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|8
argument_list|)
operator|.
name|getReading
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPronunciations
specifier|public
name|void
name|testPronunciations
parameter_list|()
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
name|segmenter
operator|.
name|tokenize
argument_list|(
literal|"å¯¿å¸ãé£ã¹ããã§ãã"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã¹ã·"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPronunciation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã¬"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPronunciation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã¿ã"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getPronunciation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã¿ã¤"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getPronunciation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ãã¹"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getPronunciation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getPronunciation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPronunciations2
specifier|public
name|void
name|testPronunciations2
parameter_list|()
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
name|segmenter
operator|.
name|tokenize
argument_list|(
literal|"å¤ãã®å­¦çãè©¦é¨ã«è½ã¡ãã"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// pronunciation differs from reading here
name|assertEquals
argument_list|(
literal|"ãªã¼ã¯"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPronunciation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPronunciation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã¬ã¯ã»ã¤"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getPronunciation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã¬"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getPronunciation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã·ã±ã³"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getPronunciation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getPronunciation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ãªã"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|.
name|getPronunciation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã¿"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|.
name|getPronunciation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ã"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|8
argument_list|)
operator|.
name|getPronunciation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicForms
specifier|public
name|void
name|testBasicForms
parameter_list|()
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
name|segmenter
operator|.
name|tokenize
argument_list|(
literal|"ããã¯ã¾ã å®é¨æ®µéã«ããã¾ãã"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseForm
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBaseForm
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getBaseForm
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getBaseForm
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getBaseForm
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getBaseForm
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|.
name|getBaseForm
argument_list|()
argument_list|,
literal|"ãã"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|.
name|getBaseForm
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|8
argument_list|)
operator|.
name|getBaseForm
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInflectionTypes
specifier|public
name|void
name|testInflectionTypes
parameter_list|()
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
name|segmenter
operator|.
name|tokenize
argument_list|(
literal|"ããã¯ã¾ã å®é¨æ®µéã«ããã¾ãã"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getInflectionType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getInflectionType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getInflectionType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getInflectionType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getInflectionType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getInflectionType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"äºæ®µã»ã©è¡"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|.
name|getInflectionType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ç¹æ®ã»ãã¹"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|.
name|getInflectionType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|8
argument_list|)
operator|.
name|getInflectionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInflectionForms
specifier|public
name|void
name|testInflectionForms
parameter_list|()
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
name|segmenter
operator|.
name|tokenize
argument_list|(
literal|"ããã¯ã¾ã å®é¨æ®µéã«ããã¾ãã"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getInflectionForm
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getInflectionForm
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getInflectionForm
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getInflectionForm
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getInflectionForm
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getInflectionForm
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"é£ç¨å½¢"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|.
name|getInflectionForm
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"åºæ¬å½¢"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|.
name|getInflectionForm
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|8
argument_list|)
operator|.
name|getInflectionForm
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPartOfSpeech
specifier|public
name|void
name|testPartOfSpeech
parameter_list|()
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
name|segmenter
operator|.
name|tokenize
argument_list|(
literal|"ããã¯ã¾ã å®é¨æ®µéã«ããã¾ãã"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"åè©-ä»£åè©-ä¸è¬"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPartOfSpeech
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"å©è©-ä¿å©è©"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPartOfSpeech
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"å¯è©-å©è©é¡æ¥ç¶"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getPartOfSpeech
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"åè©-ãµå¤æ¥ç¶"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getPartOfSpeech
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"åè©-ä¸è¬"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getPartOfSpeech
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"å©è©-æ ¼å©è©-ä¸è¬"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getPartOfSpeech
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"åè©-èªç«"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|.
name|getPartOfSpeech
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"å©åè©"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|.
name|getPartOfSpeech
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"è¨å·-å¥ç¹"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|8
argument_list|)
operator|.
name|getPartOfSpeech
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO: the next 2 tests are no longer using the first/last word ids, maybe lookup the words and fix?
comment|// do we have a possibility to actually lookup the first and last word from dictionary?
DECL|method|testYabottai
specifier|public
name|void
name|testYabottai
parameter_list|()
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
name|segmenter
operator|.
name|tokenize
argument_list|(
literal|"ãã¼ã£ãã"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ãã¼ã£ãã"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSurfaceFormString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTsukitosha
specifier|public
name|void
name|testTsukitosha
parameter_list|()
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
name|segmenter
operator|.
name|tokenize
argument_list|(
literal|"çªãéãã"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"çªãéãã"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSurfaceFormString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBocchan
specifier|public
name|void
name|testBocchan
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestBocchan
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Nightly
DECL|method|testBocchanBig
specifier|public
name|void
name|testBocchanBig
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestBocchan
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestBocchan
specifier|private
name|void
name|doTestBocchan
parameter_list|(
name|int
name|numIterations
parameter_list|)
throws|throws
name|Exception
block|{
name|LineNumberReader
name|reader
init|=
operator|new
name|LineNumberReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"bocchan.utf-8"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Test for Bocchan without pre-splitting sentences"
argument_list|)
expr_stmt|;
block|}
name|long
name|totalStart
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIterations
condition|;
name|i
operator|++
control|)
block|{
name|segmenter
operator|.
name|tokenize
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total time : "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|totalStart
operator|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Test for Bocchan with pre-splitting sentences"
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|sentences
init|=
name|line
operator|.
name|split
argument_list|(
literal|"ã|ã"
argument_list|)
decl_stmt|;
name|totalStart
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIterations
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|String
name|sentence
range|:
name|sentences
control|)
block|{
name|segmenter
operator|.
name|tokenize
argument_list|(
name|sentence
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total time : "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|totalStart
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
