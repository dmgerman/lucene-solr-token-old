begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.kuromoji
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|kuromoji
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|kuromoji
operator|.
name|KuromojiTokenizer
operator|.
name|Mode
import|;
end_import
begin_comment
comment|/**  * Test Kuromoji Japanese morphological analyzer  */
end_comment
begin_class
DECL|class|TestKuromojiAnalyzer
specifier|public
class|class
name|TestKuromojiAnalyzer
extends|extends
name|BaseTokenStreamTestCase
block|{
comment|/** This test fails with NPE when the     * stopwords file is missing in classpath */
DECL|method|testResourcesAvailable
specifier|public
name|void
name|testResourcesAvailable
parameter_list|()
block|{
operator|new
name|KuromojiAnalyzer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
expr_stmt|;
block|}
comment|/**    * An example sentence, test removal of particles, etc by POS,    * lemmatization with the basic form, and that position increments    * and offsets are correct.    */
DECL|method|testBasics
specifier|public
name|void
name|testBasics
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAnalyzesTo
argument_list|(
operator|new
name|KuromojiAnalyzer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
argument_list|,
literal|"å¤ãã®å­¦çãè©¦é¨ã«è½ã¡ãã"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"å¤ã"
block|,
literal|"å­¦ç"
block|,
literal|"è©¦é¨"
block|,
literal|"è½ã¡ã"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|3
block|,
literal|6
block|,
literal|9
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|5
block|,
literal|8
block|,
literal|11
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that search mode is enabled and working by default    */
DECL|method|testDecomposition
specifier|public
name|void
name|testDecomposition
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Analyzer
name|a
init|=
operator|new
name|KuromojiAnalyzer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
literal|null
argument_list|,
name|Mode
operator|.
name|SEARCH
argument_list|,
name|KuromojiAnalyzer
operator|.
name|getDefaultStopSet
argument_list|()
argument_list|,
name|KuromojiAnalyzer
operator|.
name|getDefaultStopTags
argument_list|()
argument_list|)
decl_stmt|;
comment|// Senior software engineer:
name|assertAnalyzesToPositions
argument_list|(
name|a
argument_list|,
literal|"ã·ãã¢ã½ããã¦ã§ã¢ã¨ã³ã¸ãã¢"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ã·ãã¢"
block|,
literal|"ã·ãã¢ã½ããã¦ã§ã¢ã¨ã³ã¸ãã¢"
block|,
comment|// zero pos inc
literal|"ã½ããã¦ã§ã¢"
block|,
literal|"ã¨ã³ã¸ãã¢"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
comment|// Senior project manager: also tests katakana spelling variation stemming
name|assertAnalyzesToPositions
argument_list|(
name|a
argument_list|,
literal|"ã·ãã¢ãã­ã¸ã§ã¯ãããã¼ã¸ã£ã¼"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ã·ãã¢"
block|,
literal|"ã·ãã¢ãã­ã¸ã§ã¯ãããã¼ã¸ã£"
block|,
comment|// trailing ã¼ removed by stemming, zero pos inc
literal|"ãã­ã¸ã§ã¯ã"
block|,
literal|"ããã¼ã¸ã£"
block|}
argument_list|,
comment|// trailing ã¼ removed by stemming
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
comment|// Kansai International Airport:
name|assertAnalyzesToPositions
argument_list|(
name|a
argument_list|,
literal|"é¢è¥¿å½éç©ºæ¸¯"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"é¢è¥¿"
block|,
literal|"é¢è¥¿å½éç©ºæ¸¯"
block|,
comment|// zero pos inc
literal|"å½é"
block|,
literal|"ç©ºæ¸¯"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
comment|// Konika Minolta Holdings; not quite the right
comment|// segmentation (see LUCENE-3726):
name|assertAnalyzesToPositions
argument_list|(
name|a
argument_list|,
literal|"ã³ãã«ããã«ã¿ãã¼ã«ãã£ã³ã°ã¹"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ã³ãã«"
block|,
literal|"ã³ãã«ããã«ã¿ãã¼ã«ãã£ã³ã°ã¹"
block|,
comment|// zero pos inc
literal|"ããã«ã¿"
block|,
literal|"ãã¼ã«ãã£ã³ã°ã¹"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
comment|// Narita Airport
name|assertAnalyzesToPositions
argument_list|(
name|a
argument_list|,
literal|"æç°ç©ºæ¸¯"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"æç°"
block|,
literal|"æç°ç©ºæ¸¯"
block|,
literal|"ç©ºæ¸¯"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
comment|// Kyoto University Baseball Club
name|assertAnalyzesToPositions
argument_list|(
operator|new
name|KuromojiAnalyzer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
argument_list|,
literal|"äº¬é½å¤§å­¦ç¡¬å¼éçé¨"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"äº¬é½å¤§"
block|,
literal|"å­¦"
block|,
literal|"ç¡¬å¼"
block|,
literal|"éç"
block|,
literal|"é¨"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
comment|// toDotFile(a, "æç°ç©ºæ¸¯", "/mnt/scratch/out.dot");
block|}
comment|/**    * blast random strings against the analyzer    */
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Analyzer
name|a
init|=
operator|new
name|KuromojiAnalyzer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
literal|null
argument_list|,
name|Mode
operator|.
name|SEARCH
argument_list|,
name|KuromojiAnalyzer
operator|.
name|getDefaultStopSet
argument_list|()
argument_list|,
name|KuromojiAnalyzer
operator|.
name|getDefaultStopTags
argument_list|()
argument_list|)
decl_stmt|;
name|checkRandomData
argument_list|(
name|random
argument_list|,
name|a
argument_list|,
name|atLeast
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** blast some random large strings through the analyzer */
DECL|method|testRandomHugeStrings
specifier|public
name|void
name|testRandomHugeStrings
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Analyzer
name|a
init|=
operator|new
name|KuromojiAnalyzer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
literal|null
argument_list|,
name|Mode
operator|.
name|SEARCH
argument_list|,
name|KuromojiAnalyzer
operator|.
name|getDefaultStopSet
argument_list|()
argument_list|,
name|KuromojiAnalyzer
operator|.
name|getDefaultStopTags
argument_list|()
argument_list|)
decl_stmt|;
name|checkRandomData
argument_list|(
name|random
argument_list|,
name|a
argument_list|,
literal|200
operator|*
name|RANDOM_MULTIPLIER
argument_list|,
literal|8192
argument_list|)
expr_stmt|;
block|}
comment|// Copied from TestKuromojiTokenizer, to make sure passing
comment|// user dict to analyzer works:
DECL|method|testUserDict3
specifier|public
name|void
name|testUserDict3
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test entry that breaks into multiple tokens:
specifier|final
name|Analyzer
name|a
init|=
operator|new
name|KuromojiAnalyzer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|TestKuromojiTokenizer
operator|.
name|readDict
argument_list|()
argument_list|,
name|Mode
operator|.
name|SEARCH
argument_list|,
name|KuromojiAnalyzer
operator|.
name|getDefaultStopSet
argument_list|()
argument_list|,
name|KuromojiAnalyzer
operator|.
name|getDefaultStopTags
argument_list|()
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|a
operator|.
name|tokenStream
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|StringReader
argument_list|(
literal|"abcd"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"cd"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|4
block|}
argument_list|,
operator|new
name|Integer
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
