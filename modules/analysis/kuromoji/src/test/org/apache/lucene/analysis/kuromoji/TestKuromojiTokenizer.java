begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.kuromoji
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|kuromoji
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_class
DECL|class|TestKuromojiTokenizer
specifier|public
class|class
name|TestKuromojiTokenizer
extends|extends
name|BaseTokenStreamTestCase
block|{
DECL|field|analyzer
specifier|private
name|Analyzer
name|analyzer
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|Tokenizer
name|tokenizer
init|=
operator|new
name|KuromojiTokenizer
argument_list|(
name|reader
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
name|tokenizer
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|method|testDecomposition1
specifier|public
name|void
name|testDecomposition1
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"æ¬æ¥ã¯ãè²§å°å±¤ã®å¥³æ§ãå­ä¾ã«å»çä¿è­·ãæä¾ããããã«åµè¨­ãããå¶åº¦ã§ããã"
operator|+
literal|"ã¢ã¡ãªã«ä½æå¾èå»çæ´å©å¶åº¦ããä»æ¥ã§ã¯ããã®äºç®ã®ç´ï¼åã®ï¼ãèäººã«è²»ããã¦ããã"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"æ¬æ¥"
block|,
literal|"ã¯"
block|,
literal|"è²§å°"
block|,
literal|"å±¤"
block|,
literal|"ã®"
block|,
literal|"å¥³æ§"
block|,
literal|"ã"
block|,
literal|"å­ä¾"
block|,
literal|"ã«"
block|,
literal|"å»ç"
block|,
literal|"ä¿è­·"
block|,
literal|"ã"
block|,
literal|"æä¾"
block|,
literal|"ãã"
block|,
literal|"ãã"
block|,
literal|"ã«"
block|,
literal|"åµè¨­"
block|,
literal|"ã"
block|,
literal|"ã"
block|,
literal|"ã"
block|,
literal|"å¶åº¦"
block|,
literal|"ã§"
block|,
literal|"ãã"
block|,
literal|"ã¢ã¡ãªã«"
block|,
literal|"ä½"
block|,
literal|"æå¾"
block|,
literal|"è"
block|,
literal|"å»ç"
block|,
literal|"æ´å©"
block|,
literal|"å¶åº¦"
block|,
literal|"ã"
block|,
literal|"ä»æ¥"
block|,
literal|"ã§"
block|,
literal|"ã¯"
block|,
literal|"ãã®"
block|,
literal|"äºç®"
block|,
literal|"ã®"
block|,
literal|"ç´"
block|,
literal|"ï¼"
block|,
literal|"åã®"
block|,
literal|"ï¼"
block|,
literal|"ã"
block|,
literal|"èäºº"
block|,
literal|"ã«"
block|,
literal|"è²»ãã"
block|,
literal|"ã¦"
block|,
literal|"ãã"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|,
literal|4
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|10
block|,
literal|11
block|,
literal|13
block|,
literal|14
block|,
literal|16
block|,
literal|18
block|,
literal|19
block|,
literal|21
block|,
literal|23
block|,
literal|25
block|,
literal|26
block|,
literal|28
block|,
literal|29
block|,
literal|30
block|,
literal|31
block|,
literal|33
block|,
literal|34
block|,
literal|37
block|,
literal|41
block|,
literal|42
block|,
literal|44
block|,
literal|45
block|,
literal|47
block|,
literal|49
block|,
literal|51
block|,
literal|53
block|,
literal|55
block|,
literal|56
block|,
literal|58
block|,
literal|60
block|,
literal|62
block|,
literal|63
block|,
literal|64
block|,
literal|65
block|,
literal|67
block|,
literal|68
block|,
literal|69
block|,
literal|71
block|,
literal|72
block|,
literal|75
block|,
literal|76
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|10
block|,
literal|11
block|,
literal|13
block|,
literal|14
block|,
literal|16
block|,
literal|18
block|,
literal|19
block|,
literal|21
block|,
literal|23
block|,
literal|25
block|,
literal|26
block|,
literal|28
block|,
literal|29
block|,
literal|30
block|,
literal|31
block|,
literal|33
block|,
literal|34
block|,
literal|36
block|,
literal|41
block|,
literal|42
block|,
literal|44
block|,
literal|45
block|,
literal|47
block|,
literal|49
block|,
literal|51
block|,
literal|52
block|,
literal|55
block|,
literal|56
block|,
literal|57
block|,
literal|60
block|,
literal|62
block|,
literal|63
block|,
literal|64
block|,
literal|65
block|,
literal|67
block|,
literal|68
block|,
literal|69
block|,
literal|71
block|,
literal|72
block|,
literal|75
block|,
literal|76
block|,
literal|78
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testDecomposition2
specifier|public
name|void
name|testDecomposition2
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"éº»è¬ã®å¯å£²ã¯æ ¹ãããçµ¶ãããªããã°ãªããªã"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"éº»è¬"
block|,
literal|"ã®"
block|,
literal|"å¯å£²"
block|,
literal|"ã¯"
block|,
literal|"æ ¹ããã"
block|,
literal|"çµ¶ãã"
block|,
literal|"ãªãã"
block|,
literal|"ã°"
block|,
literal|"ãªã"
block|,
literal|"ãªã"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|6
block|,
literal|10
block|,
literal|13
block|,
literal|16
block|,
literal|17
block|,
literal|19
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|6
block|,
literal|10
block|,
literal|13
block|,
literal|16
block|,
literal|17
block|,
literal|19
block|,
literal|21
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testDecomposition3
specifier|public
name|void
name|testDecomposition3
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"é­å¥³ç©å¤§å°ãã·ã¥ã¼ã»ããã­ã³ã¹ã"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"é­å¥³"
block|,
literal|"ç©"
block|,
literal|"å¤§å°"
block|,
literal|"ãã·ã¥ã¼"
block|,
literal|"ããã­ã³ã¹"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|10
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|9
block|,
literal|15
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testDecomposition4
specifier|public
name|void
name|testDecomposition4
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"ããã¯æ¬ã§ã¯ãªã"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ãã"
block|,
literal|"ã¯"
block|,
literal|"æ¬"
block|,
literal|"ã§"
block|,
literal|"ã¯"
block|,
literal|"ãªã"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|8
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testDecomposition5
specifier|public
name|void
name|testDecomposition5
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"ãããããããããããããããããããããããããããããããããããããããã"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ãããã"
block|,
literal|"ãããã"
block|,
literal|"ãããã"
block|,
literal|"ãããã"
block|,
literal|"ãããã"
block|,
literal|"ãããã"
block|,
literal|"ãããã"
block|,
literal|"ãããã"
block|,
literal|"ãããã"
block|,
literal|"ãããã"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|4
block|,
literal|8
block|,
literal|12
block|,
literal|16
block|,
literal|20
block|,
literal|24
block|,
literal|28
block|,
literal|32
block|,
literal|36
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|8
block|,
literal|12
block|,
literal|16
block|,
literal|20
block|,
literal|24
block|,
literal|28
block|,
literal|32
block|,
literal|36
block|,
literal|40
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** Tests that sentence offset is incorporated into the resulting offsets */
DECL|method|testTwoSentences
specifier|public
name|void
name|testTwoSentences
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"é­å¥³ç©å¤§å°ãã·ã¥ã¼ã»ããã­ã³ã¹ã é­å¥³ç©å¤§å°ãã·ã¥ã¼ã»ããã­ã³ã¹ã"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"é­å¥³"
block|,
literal|"ç©"
block|,
literal|"å¤§å°"
block|,
literal|"ãã·ã¥ã¼"
block|,
literal|"ããã­ã³ã¹"
block|,
literal|"é­å¥³"
block|,
literal|"ç©"
block|,
literal|"å¤§å°"
block|,
literal|"ãã·ã¥ã¼"
block|,
literal|"ããã­ã³ã¹"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|10
block|,
literal|17
block|,
literal|19
block|,
literal|20
block|,
literal|22
block|,
literal|27
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|9
block|,
literal|15
block|,
literal|19
block|,
literal|20
block|,
literal|22
block|,
literal|26
block|,
literal|32
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** blast some random strings through the analyzer */
DECL|method|testRandomStrings
specifier|public
name|void
name|testRandomStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|checkRandomData
argument_list|(
name|random
argument_list|,
name|analyzer
argument_list|,
literal|10000
operator|*
name|RANDOM_MULTIPLIER
argument_list|)
expr_stmt|;
block|}
DECL|method|testLargeDocReliability
specifier|public
name|void
name|testLargeDocReliability
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s
init|=
name|_TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|StringReader
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|ts
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|ts
operator|.
name|incrementToken
argument_list|()
condition|)
block|{       }
block|}
block|}
comment|/** simple test for supplementary characters */
DECL|method|testSurrogates
specifier|public
name|void
name|testSurrogates
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"ð©¬è±éä¹æ¯ç"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ð©¬"
block|,
literal|"è±"
block|,
literal|"é"
block|,
literal|"ä¹"
block|,
literal|"æ¯"
block|,
literal|"ç"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** random test ensuring we don't ever split supplementaries */
DECL|method|testSurrogates2
specifier|public
name|void
name|testSurrogates2
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|numIterations
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIterations
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s
init|=
name|_TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|StringReader
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|CharTermAttribute
name|termAtt
init|=
name|ts
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|ts
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|ts
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|UnicodeUtil
operator|.
name|validUTF16String
argument_list|(
name|termAtt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// note: test is kinda silly since kuromoji emits punctuation tokens.
comment|// but, when/if we filter these out it will be useful.
DECL|method|testEnd
specifier|public
name|void
name|testEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTokenStreamContents
argument_list|(
name|analyzer
operator|.
name|tokenStream
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|StringReader
argument_list|(
literal|"ããã¯æ¬ã§ã¯ãªã"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ãã"
block|,
literal|"ã¯"
block|,
literal|"æ¬"
block|,
literal|"ã§"
block|,
literal|"ã¯"
block|,
literal|"ãªã"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|8
block|}
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|analyzer
operator|.
name|tokenStream
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|StringReader
argument_list|(
literal|"ããã¯æ¬ã§ã¯ãªã    "
argument_list|)
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ãã"
block|,
literal|"ã¯"
block|,
literal|"æ¬"
block|,
literal|"ã§"
block|,
literal|"ã¯"
block|,
literal|"ãªã"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|8
block|,
literal|9
block|}
argument_list|,
operator|new
name|Integer
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
