begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.icu.segmentation
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|icu
operator|.
name|segmentation
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|CharacterIterator
import|;
end_import
begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|lang
operator|.
name|UCharacter
import|;
end_import
begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|BreakIterator
import|;
end_import
begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|RuleBasedBreakIterator
import|;
end_import
begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|UnicodeSet
import|;
end_import
begin_comment
comment|/**  * Syllable iterator for Lao text.  *<p>  * This breaks Lao text into syllables according to:  *<i>Syllabification of Lao Script for Line Breaking</i>  * Phonpasit Phissamay, Valaxay Dalolay, Chitaphone Chanhsililath, Oulaiphone Silimasak,   * Sarmad Hussain, Nadir Durrani, Science Technology and Environment Agency, CRULP.  *<ul>  *<li>http://www.panl10n.net/english/final%20reports/pdf%20files/Laos/LAO06.pdf  *<li>http://www.panl10n.net/Presentations/Cambodia/Phonpassit/LineBreakingAlgo.pdf  *</ul>  *<p>  * Most work is accomplished with RBBI rules, however some additional special logic is needed  * that cannot be coded in a grammar, and this is implemented here.  *<p>  * For example, what appears to be a final consonant might instead be part of the next syllable.  * Rules match in a greedy fashion, leaving an illegal sequence that matches no rules.  *<p>  * Take for instance the text àºàº§à»àº²àºàº­àº  * The first rule greedily matches àºàº§à»àº²àº, but then àº­àº is encountered, which is illegal.  * What LaoBreakIterator does, according to the paper:  *<ol>  *<li>backtrack and remove the àº from the last syllable, placing it on the current syllable.  *<li>verify the modified previous syllable (àºàº§à»àº² ) is still legal.  *<li>verify the modified current syllable (àºàº­àº) is now legal.  *<li>If 2 or 3 fails, then restore the àº to the last syllable and skip the current character.  *</ol>  *<p>  * Finally, LaoBreakIterator also takes care of the second concern mentioned in the paper.  * This is the issue of combining marks being in the wrong order (typos).  * @lucene.experimental  */
end_comment
begin_class
DECL|class|LaoBreakIterator
specifier|public
class|class
name|LaoBreakIterator
extends|extends
name|BreakIterator
block|{
DECL|field|rules
name|RuleBasedBreakIterator
name|rules
decl_stmt|;
DECL|field|text
name|CharArrayIterator
name|text
decl_stmt|;
DECL|field|working
name|CharArrayIterator
name|working
init|=
operator|new
name|CharArrayIterator
argument_list|()
decl_stmt|;
DECL|field|workingOffset
name|int
name|workingOffset
init|=
literal|0
decl_stmt|;
DECL|field|verifyText
name|CharArrayIterator
name|verifyText
init|=
operator|new
name|CharArrayIterator
argument_list|()
decl_stmt|;
DECL|field|verify
name|RuleBasedBreakIterator
name|verify
decl_stmt|;
DECL|field|laoSet
specifier|private
specifier|static
specifier|final
name|UnicodeSet
name|laoSet
decl_stmt|;
static|static
block|{
name|laoSet
operator|=
operator|new
name|UnicodeSet
argument_list|(
literal|"[:Lao:]"
argument_list|)
expr_stmt|;
name|laoSet
operator|.
name|compact
argument_list|()
expr_stmt|;
name|laoSet
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
DECL|method|LaoBreakIterator
specifier|public
name|LaoBreakIterator
parameter_list|(
name|RuleBasedBreakIterator
name|rules
parameter_list|)
block|{
name|this
operator|.
name|rules
operator|=
operator|(
name|RuleBasedBreakIterator
operator|)
name|rules
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|verify
operator|=
operator|(
name|RuleBasedBreakIterator
operator|)
name|rules
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|current
specifier|public
name|int
name|current
parameter_list|()
block|{
name|int
name|current
init|=
name|rules
operator|.
name|current
argument_list|()
decl_stmt|;
return|return
name|current
operator|==
name|BreakIterator
operator|.
name|DONE
condition|?
name|BreakIterator
operator|.
name|DONE
else|:
name|workingOffset
operator|+
name|current
return|;
block|}
annotation|@
name|Override
DECL|method|first
specifier|public
name|int
name|first
parameter_list|()
block|{
name|working
operator|.
name|setText
argument_list|(
name|this
operator|.
name|text
operator|.
name|getText
argument_list|()
argument_list|,
name|this
operator|.
name|text
operator|.
name|getStart
argument_list|()
argument_list|,
name|this
operator|.
name|text
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|rules
operator|.
name|setText
argument_list|(
name|working
argument_list|)
expr_stmt|;
name|workingOffset
operator|=
literal|0
expr_stmt|;
name|int
name|first
init|=
name|rules
operator|.
name|first
argument_list|()
decl_stmt|;
return|return
name|first
operator|==
name|BreakIterator
operator|.
name|DONE
condition|?
name|BreakIterator
operator|.
name|DONE
else|:
name|workingOffset
operator|+
name|first
return|;
block|}
annotation|@
name|Override
DECL|method|following
specifier|public
name|int
name|following
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getText
specifier|public
name|CharacterIterator
name|getText
parameter_list|()
block|{
return|return
name|text
return|;
block|}
annotation|@
name|Override
DECL|method|last
specifier|public
name|int
name|last
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|int
name|next
parameter_list|()
block|{
name|int
name|current
init|=
name|current
argument_list|()
decl_stmt|;
name|int
name|next
init|=
name|rules
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|==
name|BreakIterator
operator|.
name|DONE
condition|)
return|return
name|next
return|;
else|else
name|next
operator|+=
name|workingOffset
expr_stmt|;
name|char
name|c
init|=
name|working
operator|.
name|current
argument_list|()
decl_stmt|;
name|int
name|following
init|=
name|rules
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// lookahead
if|if
condition|(
name|following
operator|!=
name|BreakIterator
operator|.
name|DONE
condition|)
block|{
name|following
operator|+=
name|workingOffset
expr_stmt|;
if|if
condition|(
name|rules
operator|.
name|getRuleStatus
argument_list|()
operator|==
literal|0
operator|&&
name|laoSet
operator|.
name|contains
argument_list|(
name|c
argument_list|)
operator|&&
name|verifyPushBack
argument_list|(
name|current
argument_list|,
name|next
argument_list|)
condition|)
block|{
name|workingOffset
operator|=
name|next
operator|-
literal|1
expr_stmt|;
name|working
operator|.
name|setText
argument_list|(
name|text
operator|.
name|getText
argument_list|()
argument_list|,
name|text
operator|.
name|getStart
argument_list|()
operator|+
name|workingOffset
argument_list|,
name|text
operator|.
name|getLength
argument_list|()
operator|-
name|workingOffset
argument_list|)
expr_stmt|;
return|return
name|next
operator|-
literal|1
return|;
block|}
name|rules
operator|.
name|previous
argument_list|()
expr_stmt|;
comment|// undo the lookahead
block|}
return|return
name|next
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|int
name|next
parameter_list|(
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Backwards traversal is unsupported"
argument_list|)
throw|;
name|int
name|result
init|=
name|current
argument_list|()
decl_stmt|;
while|while
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|result
operator|=
name|next
argument_list|()
expr_stmt|;
operator|--
name|n
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|previous
specifier|public
name|int
name|previous
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Backwards traversal is unsupported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setText
specifier|public
name|void
name|setText
parameter_list|(
name|CharacterIterator
name|text
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|text
operator|instanceof
name|CharArrayIterator
operator|)
condition|)
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unsupported CharacterIterator"
argument_list|)
throw|;
name|this
operator|.
name|text
operator|=
operator|(
name|CharArrayIterator
operator|)
name|text
expr_stmt|;
name|ccReorder
argument_list|(
name|this
operator|.
name|text
operator|.
name|getText
argument_list|()
argument_list|,
name|this
operator|.
name|text
operator|.
name|getStart
argument_list|()
argument_list|,
name|this
operator|.
name|text
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|working
operator|.
name|setText
argument_list|(
name|this
operator|.
name|text
operator|.
name|getText
argument_list|()
argument_list|,
name|this
operator|.
name|text
operator|.
name|getStart
argument_list|()
argument_list|,
name|this
operator|.
name|text
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|rules
operator|.
name|setText
argument_list|(
name|working
argument_list|)
expr_stmt|;
name|workingOffset
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setText
specifier|public
name|void
name|setText
parameter_list|(
name|String
name|newText
parameter_list|)
block|{
name|CharArrayIterator
name|ci
init|=
operator|new
name|CharArrayIterator
argument_list|()
decl_stmt|;
name|ci
operator|.
name|setText
argument_list|(
name|newText
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|newText
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyPushBack
specifier|private
name|boolean
name|verifyPushBack
parameter_list|(
name|int
name|current
parameter_list|,
name|int
name|next
parameter_list|)
block|{
name|int
name|shortenedSyllable
init|=
name|next
operator|-
name|current
operator|-
literal|1
decl_stmt|;
name|verifyText
operator|.
name|setText
argument_list|(
name|text
operator|.
name|getText
argument_list|()
argument_list|,
name|text
operator|.
name|getStart
argument_list|()
operator|+
name|current
argument_list|,
name|shortenedSyllable
argument_list|)
expr_stmt|;
name|verify
operator|.
name|setText
argument_list|(
name|verifyText
argument_list|)
expr_stmt|;
if|if
condition|(
name|verify
operator|.
name|next
argument_list|()
operator|!=
name|shortenedSyllable
operator|||
name|verify
operator|.
name|getRuleStatus
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|false
return|;
name|verifyText
operator|.
name|setText
argument_list|(
name|text
operator|.
name|getText
argument_list|()
argument_list|,
name|text
operator|.
name|getStart
argument_list|()
operator|+
name|next
operator|-
literal|1
argument_list|,
name|text
operator|.
name|getLength
argument_list|()
operator|-
name|next
operator|+
literal|1
argument_list|)
expr_stmt|;
name|verify
operator|.
name|setText
argument_list|(
name|verifyText
argument_list|)
expr_stmt|;
return|return
operator|(
name|verify
operator|.
name|next
argument_list|()
operator|!=
name|BreakIterator
operator|.
name|DONE
operator|&&
name|verify
operator|.
name|getRuleStatus
argument_list|()
operator|!=
literal|0
operator|)
return|;
block|}
comment|// TODO: only bubblesort around runs of combining marks, instead of the entire text.
DECL|method|ccReorder
specifier|private
name|void
name|ccReorder
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|boolean
name|reordered
decl_stmt|;
do|do
block|{
name|int
name|prevCC
init|=
literal|0
decl_stmt|;
name|reordered
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|start
operator|+
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|char
name|c
init|=
name|text
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|int
name|cc
init|=
name|UCharacter
operator|.
name|getCombiningClass
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|cc
operator|>
literal|0
operator|&&
name|cc
operator|<
name|prevCC
condition|)
block|{
comment|// swap
name|text
index|[
name|i
index|]
operator|=
name|text
index|[
name|i
operator|-
literal|1
index|]
expr_stmt|;
name|text
index|[
name|i
operator|-
literal|1
index|]
operator|=
name|c
expr_stmt|;
name|reordered
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|prevCC
operator|=
name|cc
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|reordered
operator|==
literal|true
condition|)
do|;
block|}
comment|/**    * Clone method.  Creates another LaoBreakIterator with the same behavior     * and current state as this one.    * @return The clone.    */
annotation|@
name|Override
DECL|method|clone
specifier|public
name|LaoBreakIterator
name|clone
parameter_list|()
block|{
name|LaoBreakIterator
name|other
init|=
operator|(
name|LaoBreakIterator
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
name|other
operator|.
name|rules
operator|=
operator|(
name|RuleBasedBreakIterator
operator|)
name|rules
operator|.
name|clone
argument_list|()
expr_stmt|;
name|other
operator|.
name|verify
operator|=
operator|(
name|RuleBasedBreakIterator
operator|)
name|verify
operator|.
name|clone
argument_list|()
expr_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
name|other
operator|.
name|text
operator|=
operator|(
name|CharArrayIterator
operator|)
name|text
operator|.
name|clone
argument_list|()
expr_stmt|;
if|if
condition|(
name|working
operator|!=
literal|null
condition|)
name|other
operator|.
name|working
operator|=
operator|(
name|CharArrayIterator
operator|)
name|working
operator|.
name|clone
argument_list|()
expr_stmt|;
if|if
condition|(
name|verifyText
operator|!=
literal|null
condition|)
name|other
operator|.
name|verifyText
operator|=
operator|(
name|CharArrayIterator
operator|)
name|verifyText
operator|.
name|clone
argument_list|()
expr_stmt|;
return|return
name|other
return|;
block|}
block|}
end_class
end_unit
