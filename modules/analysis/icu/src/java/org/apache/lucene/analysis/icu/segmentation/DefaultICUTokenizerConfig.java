begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.icu.segmentation
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|icu
operator|.
name|segmentation
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|lang
operator|.
name|UScript
import|;
end_import
begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|BreakIterator
import|;
end_import
begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|RuleBasedBreakIterator
import|;
end_import
begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|util
operator|.
name|ULocale
import|;
end_import
begin_comment
comment|/**  * Default {@link ICUTokenizerConfig} that is generally applicable  * to many languages.  *<p>  * Generally tokenizes Unicode text according to UAX#29   * ({@link BreakIterator#getWordInstance(ULocale) BreakIterator.getWordInstance(ULocale.ROOT)}),   * but with the following tailorings:  *<ul>  *<li>Thai text is broken into words with a   *   {@link com.ibm.icu.text.DictionaryBasedBreakIterator}  *<li>Lao, Myanmar, and Khmer text is broken into syllables  *   based on custom BreakIterator rules.  *<li>Hebrew text has custom tailorings to handle special cases  *   involving punctuation.  *</ul>  * @lucene.experimental  */
end_comment
begin_class
DECL|class|DefaultICUTokenizerConfig
specifier|public
class|class
name|DefaultICUTokenizerConfig
extends|extends
name|ICUTokenizerConfig
block|{
comment|/** Token type for words containing ideographic characters */
DECL|field|WORD_IDEO
specifier|public
specifier|static
specifier|final
name|String
name|WORD_IDEO
init|=
literal|"<IDEO>"
decl_stmt|;
comment|/** Token type for words containing Japanese kana */
DECL|field|WORD_KANA
specifier|public
specifier|static
specifier|final
name|String
name|WORD_KANA
init|=
literal|"<KANA>"
decl_stmt|;
comment|/** Token type for words that contain letters */
DECL|field|WORD_LETTER
specifier|public
specifier|static
specifier|final
name|String
name|WORD_LETTER
init|=
literal|"<WORD>"
decl_stmt|;
comment|/** Token type for words that appear to be numbers */
DECL|field|WORD_NUMBER
specifier|public
specifier|static
specifier|final
name|String
name|WORD_NUMBER
init|=
literal|"<NUM>"
decl_stmt|;
comment|/*    * the default breakiterators in use. these can be expensive to    * instantiate, cheap to clone.    */
DECL|field|rootBreakIterator
specifier|private
specifier|static
specifier|final
name|BreakIterator
name|rootBreakIterator
init|=
name|BreakIterator
operator|.
name|getWordInstance
argument_list|(
name|ULocale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
DECL|field|thaiBreakIterator
specifier|private
specifier|static
specifier|final
name|BreakIterator
name|thaiBreakIterator
init|=
name|BreakIterator
operator|.
name|getWordInstance
argument_list|(
operator|new
name|ULocale
argument_list|(
literal|"th_TH"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|hebrewBreakIterator
specifier|private
specifier|static
specifier|final
name|BreakIterator
name|hebrewBreakIterator
init|=
name|readBreakIterator
argument_list|(
literal|"Hebrew.brk"
argument_list|)
decl_stmt|;
DECL|field|khmerBreakIterator
specifier|private
specifier|static
specifier|final
name|BreakIterator
name|khmerBreakIterator
init|=
name|readBreakIterator
argument_list|(
literal|"Khmer.brk"
argument_list|)
decl_stmt|;
DECL|field|laoBreakIterator
specifier|private
specifier|static
specifier|final
name|BreakIterator
name|laoBreakIterator
init|=
operator|new
name|LaoBreakIterator
argument_list|(
name|readBreakIterator
argument_list|(
literal|"Lao.brk"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|myanmarBreakIterator
specifier|private
specifier|static
specifier|final
name|BreakIterator
name|myanmarBreakIterator
init|=
name|readBreakIterator
argument_list|(
literal|"Myanmar.brk"
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|getBreakIterator
specifier|public
name|BreakIterator
name|getBreakIterator
parameter_list|(
name|int
name|script
parameter_list|)
block|{
switch|switch
condition|(
name|script
condition|)
block|{
case|case
name|UScript
operator|.
name|THAI
case|:
return|return
operator|(
name|BreakIterator
operator|)
name|thaiBreakIterator
operator|.
name|clone
argument_list|()
return|;
case|case
name|UScript
operator|.
name|HEBREW
case|:
return|return
operator|(
name|BreakIterator
operator|)
name|hebrewBreakIterator
operator|.
name|clone
argument_list|()
return|;
case|case
name|UScript
operator|.
name|KHMER
case|:
return|return
operator|(
name|BreakIterator
operator|)
name|khmerBreakIterator
operator|.
name|clone
argument_list|()
return|;
case|case
name|UScript
operator|.
name|LAO
case|:
return|return
operator|(
name|BreakIterator
operator|)
name|laoBreakIterator
operator|.
name|clone
argument_list|()
return|;
case|case
name|UScript
operator|.
name|MYANMAR
case|:
return|return
operator|(
name|BreakIterator
operator|)
name|myanmarBreakIterator
operator|.
name|clone
argument_list|()
return|;
default|default:
return|return
operator|(
name|BreakIterator
operator|)
name|rootBreakIterator
operator|.
name|clone
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|(
name|int
name|script
parameter_list|,
name|int
name|ruleStatus
parameter_list|)
block|{
switch|switch
condition|(
name|ruleStatus
condition|)
block|{
case|case
name|RuleBasedBreakIterator
operator|.
name|WORD_IDEO
case|:
return|return
name|WORD_IDEO
return|;
case|case
name|RuleBasedBreakIterator
operator|.
name|WORD_KANA
case|:
return|return
name|WORD_KANA
return|;
case|case
name|RuleBasedBreakIterator
operator|.
name|WORD_LETTER
case|:
return|return
name|WORD_LETTER
return|;
case|case
name|RuleBasedBreakIterator
operator|.
name|WORD_NUMBER
case|:
return|return
name|WORD_NUMBER
return|;
default|default:
comment|/* some other custom code */
return|return
literal|"<OTHER>"
return|;
block|}
block|}
DECL|method|readBreakIterator
specifier|private
specifier|static
name|RuleBasedBreakIterator
name|readBreakIterator
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|InputStream
name|is
init|=
name|DefaultICUTokenizerConfig
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|filename
argument_list|)
decl_stmt|;
try|try
block|{
name|RuleBasedBreakIterator
name|bi
init|=
name|RuleBasedBreakIterator
operator|.
name|getInstanceFromCompiledRules
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|bi
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class
end_unit
