begin_unit
begin_package
DECL|package|org.apache.lucene.search.suggest
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|TermFreqIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_class
DECL|class|TestTermFreqIterator
specifier|public
class|class
name|TestTermFreqIterator
extends|extends
name|LuceneTestCase
block|{
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|TermFreqArrayIterator
name|iterator
init|=
operator|new
name|TermFreqArrayIterator
argument_list|(
operator|new
name|TermFreq
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|TermFreqIterator
name|wrapper
init|=
operator|new
name|SortedTermFreqIteratorWrapper
argument_list|(
name|iterator
argument_list|,
name|BytesRef
operator|.
name|getUTF8SortedAsUnicodeComparator
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|wrapper
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|wrapper
operator|=
operator|new
name|UnsortedTermFreqIteratorWrapper
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wrapper
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTerms
specifier|public
name|void
name|testTerms
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|num
init|=
name|atLeast
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|TreeMap
argument_list|<
name|BytesRef
argument_list|,
name|Long
argument_list|>
name|sorted
init|=
operator|new
name|TreeMap
argument_list|<
name|BytesRef
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|TermFreq
index|[]
name|unsorted
init|=
operator|new
name|TermFreq
index|[
name|num
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|key
decl_stmt|;
do|do
block|{
name|key
operator|=
operator|new
name|BytesRef
argument_list|(
name|_TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|sorted
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
do|;
name|long
name|value
init|=
name|random
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|sorted
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|unsorted
index|[
name|i
index|]
operator|=
operator|new
name|TermFreq
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|// test the sorted iterator wrapper
name|TermFreqIterator
name|wrapper
init|=
operator|new
name|SortedTermFreqIteratorWrapper
argument_list|(
operator|new
name|TermFreqArrayIterator
argument_list|(
name|unsorted
argument_list|)
argument_list|,
name|BytesRef
operator|.
name|getUTF8SortedAsUnicodeComparator
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|BytesRef
argument_list|,
name|Long
argument_list|>
argument_list|>
name|expected
init|=
name|sorted
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|expected
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|BytesRef
argument_list|,
name|Long
argument_list|>
name|entry
init|=
name|expected
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|wrapper
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|wrapper
operator|.
name|weight
argument_list|()
argument_list|,
literal|0F
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|wrapper
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// test the unsorted iterator wrapper
name|wrapper
operator|=
operator|new
name|UnsortedTermFreqIteratorWrapper
argument_list|(
operator|new
name|TermFreqArrayIterator
argument_list|(
name|unsorted
argument_list|)
argument_list|)
expr_stmt|;
name|TreeMap
argument_list|<
name|BytesRef
argument_list|,
name|Long
argument_list|>
name|actual
init|=
operator|new
name|TreeMap
argument_list|<
name|BytesRef
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|BytesRef
name|key
decl_stmt|;
while|while
condition|(
operator|(
name|key
operator|=
name|wrapper
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|long
name|value
init|=
name|wrapper
operator|.
name|weight
argument_list|()
decl_stmt|;
name|actual
operator|.
name|put
argument_list|(
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|key
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|sorted
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
