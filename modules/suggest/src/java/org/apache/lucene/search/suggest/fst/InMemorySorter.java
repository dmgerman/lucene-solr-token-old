begin_unit
begin_package
DECL|package|org.apache.lucene.search.suggest.fst
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|fst
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/**  * An {@link BytesRefSorter} that keeps all the entries in memory.  */
end_comment
begin_class
DECL|class|InMemorySorter
specifier|public
specifier|final
class|class
name|InMemorySorter
implements|implements
name|BytesRefSorter
block|{
comment|// TODO: use a single byte[] to back up all entries?
DECL|field|refs
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|BytesRef
argument_list|>
name|refs
init|=
operator|new
name|ArrayList
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|BytesRef
name|utf8
parameter_list|)
block|{
if|if
condition|(
name|closed
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
name|refs
operator|.
name|add
argument_list|(
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|utf8
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|BytesRef
argument_list|>
name|iterator
parameter_list|()
block|{
name|closed
operator|=
literal|true
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|refs
argument_list|,
name|BytesRef
operator|.
name|getUTF8SortedAsUnicodeComparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|refs
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
end_class
end_unit
