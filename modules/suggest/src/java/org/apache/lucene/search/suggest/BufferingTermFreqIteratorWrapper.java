begin_unit
begin_package
DECL|package|org.apache.lucene.search.suggest
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|TermFreqIterator
import|;
end_import
begin_comment
comment|/**  * This wrapper buffers incoming elements.  */
end_comment
begin_class
DECL|class|BufferingTermFreqIteratorWrapper
specifier|public
class|class
name|BufferingTermFreqIteratorWrapper
implements|implements
name|TermFreqIterator
block|{
comment|/** Entry in the buffer. */
DECL|class|Entry
specifier|public
specifier|static
specifier|final
class|class
name|Entry
implements|implements
name|Comparable
argument_list|<
name|Entry
argument_list|>
block|{
DECL|field|word
name|String
name|word
decl_stmt|;
DECL|field|freq
name|float
name|freq
decl_stmt|;
DECL|method|Entry
specifier|public
name|Entry
parameter_list|(
name|String
name|word
parameter_list|,
name|float
name|freq
parameter_list|)
block|{
name|this
operator|.
name|word
operator|=
name|word
expr_stmt|;
name|this
operator|.
name|freq
operator|=
name|freq
expr_stmt|;
block|}
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|Entry
name|o
parameter_list|)
block|{
return|return
name|word
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|word
argument_list|)
return|;
block|}
block|}
DECL|field|entries
specifier|protected
name|ArrayList
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|curPos
specifier|protected
name|int
name|curPos
decl_stmt|;
DECL|field|curEntry
specifier|protected
name|Entry
name|curEntry
decl_stmt|;
DECL|method|BufferingTermFreqIteratorWrapper
specifier|public
name|BufferingTermFreqIteratorWrapper
parameter_list|(
name|TermFreqIterator
name|source
parameter_list|)
block|{
comment|// read all source data into buffer
while|while
condition|(
name|source
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|w
init|=
name|source
operator|.
name|next
argument_list|()
decl_stmt|;
name|Entry
name|e
init|=
operator|new
name|Entry
argument_list|(
name|w
argument_list|,
name|source
operator|.
name|freq
argument_list|()
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|curPos
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|freq
specifier|public
name|float
name|freq
parameter_list|()
block|{
return|return
name|curEntry
operator|.
name|freq
return|;
block|}
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|curPos
operator|<
name|entries
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|next
specifier|public
name|String
name|next
parameter_list|()
block|{
name|curEntry
operator|=
name|entries
operator|.
name|get
argument_list|(
name|curPos
argument_list|)
expr_stmt|;
name|curPos
operator|++
expr_stmt|;
return|return
name|curEntry
operator|.
name|word
return|;
block|}
DECL|method|remove
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"remove is not supported"
argument_list|)
throw|;
block|}
DECL|method|entries
specifier|public
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
parameter_list|()
block|{
return|return
name|entries
return|;
block|}
block|}
end_class
end_unit
