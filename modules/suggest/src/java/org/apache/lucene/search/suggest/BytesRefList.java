begin_unit
begin_package
DECL|package|org.apache.lucene.search.suggest
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ByteBlockPool
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Counter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SorterTemplate
import|;
end_import
begin_comment
comment|/**  * A simple append only random-access {@link BytesRef} array that stores full  * copies of the appended bytes in a {@link ByteBlockPool}.  *   *   *<b>Note: This class is not Thread-Safe!</b>  *   * @lucene.internal  * @lucene.experimental  */
end_comment
begin_class
DECL|class|BytesRefList
specifier|public
specifier|final
class|class
name|BytesRefList
block|{
comment|// TODO rename to BytesRefArray
DECL|field|pool
specifier|private
specifier|final
name|ByteBlockPool
name|pool
decl_stmt|;
DECL|field|offsets
specifier|private
name|int
index|[]
name|offsets
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
DECL|field|lastElement
specifier|private
name|int
name|lastElement
init|=
literal|0
decl_stmt|;
DECL|field|currentOffset
specifier|private
name|int
name|currentOffset
init|=
literal|0
decl_stmt|;
DECL|field|bytesUsed
specifier|private
specifier|final
name|Counter
name|bytesUsed
init|=
name|Counter
operator|.
name|newCounter
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|/**    * Creates a new {@link BytesRefList}    */
DECL|method|BytesRefList
specifier|public
name|BytesRefList
parameter_list|()
block|{
name|this
operator|.
name|pool
operator|=
operator|new
name|ByteBlockPool
argument_list|(
operator|new
name|ByteBlockPool
operator|.
name|DirectTrackingAllocator
argument_list|(
name|bytesUsed
argument_list|)
argument_list|)
expr_stmt|;
name|pool
operator|.
name|nextBuffer
argument_list|()
expr_stmt|;
name|bytesUsed
operator|.
name|addAndGet
argument_list|(
name|RamUsageEstimator
operator|.
name|NUM_BYTES_ARRAY_HEADER
operator|+
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clears this {@link BytesRefList}    */
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|lastElement
operator|=
literal|0
expr_stmt|;
name|currentOffset
operator|=
literal|0
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|offsets
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|pool
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|/**    * Appends a copy of the given {@link BytesRef} to this {@link BytesRefList}.    * @param bytes the bytes to append    * @return the ordinal of the appended bytes    */
DECL|method|append
specifier|public
name|int
name|append
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
block|{
if|if
condition|(
name|lastElement
operator|>=
name|offsets
operator|.
name|length
condition|)
block|{
name|int
name|oldLen
init|=
name|offsets
operator|.
name|length
decl_stmt|;
name|offsets
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|offsets
argument_list|,
name|offsets
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
name|bytesUsed
operator|.
name|addAndGet
argument_list|(
operator|(
name|offsets
operator|.
name|length
operator|-
name|oldLen
operator|)
operator|*
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
argument_list|)
expr_stmt|;
block|}
name|pool
operator|.
name|copy
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|offsets
index|[
name|lastElement
operator|++
index|]
operator|=
name|currentOffset
expr_stmt|;
name|currentOffset
operator|+=
name|bytes
operator|.
name|length
expr_stmt|;
return|return
name|lastElement
return|;
block|}
comment|/**    * Returns the current size of this {@link BytesRefList}    * @return the current size of this {@link BytesRefList}    */
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|lastElement
return|;
block|}
comment|/**    * Returns the<i>n'th</i> element of this {@link BytesRefList}    * @param spare a spare {@link BytesRef} instance    * @param ord the elements ordinal to retrieve     * @return the<i>n'th</i> element of this {@link BytesRefList}    */
DECL|method|get
specifier|public
name|BytesRef
name|get
parameter_list|(
name|BytesRef
name|spare
parameter_list|,
name|int
name|ord
parameter_list|)
block|{
if|if
condition|(
name|lastElement
operator|>
name|ord
condition|)
block|{
name|spare
operator|.
name|offset
operator|=
name|offsets
index|[
name|ord
index|]
expr_stmt|;
name|spare
operator|.
name|length
operator|=
name|ord
operator|==
name|lastElement
operator|-
literal|1
condition|?
name|currentOffset
operator|-
name|spare
operator|.
name|offset
else|:
name|offsets
index|[
name|ord
operator|+
literal|1
index|]
operator|-
name|spare
operator|.
name|offset
expr_stmt|;
name|pool
operator|.
name|copyFrom
argument_list|(
name|spare
argument_list|)
expr_stmt|;
return|return
name|spare
return|;
block|}
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"index "
operator|+
name|ord
operator|+
literal|" must be less than the size: "
operator|+
name|lastElement
argument_list|)
throw|;
block|}
comment|/**    * Returns the number internally used bytes to hold the appended bytes in    * memory    *     * @return the number internally used bytes to hold the appended bytes in    *         memory    */
DECL|method|bytesUsed
specifier|public
name|long
name|bytesUsed
parameter_list|()
block|{
return|return
name|bytesUsed
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|sort
specifier|private
name|int
index|[]
name|sort
parameter_list|(
specifier|final
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|comp
parameter_list|)
block|{
specifier|final
name|int
index|[]
name|orderdEntries
init|=
operator|new
name|int
index|[
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|orderdEntries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|orderdEntries
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
operator|new
name|SorterTemplate
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
specifier|final
name|int
name|o
init|=
name|orderdEntries
index|[
name|i
index|]
decl_stmt|;
name|orderdEntries
index|[
name|i
index|]
operator|=
name|orderdEntries
index|[
name|j
index|]
expr_stmt|;
name|orderdEntries
index|[
name|j
index|]
operator|=
name|o
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
specifier|final
name|int
name|ord1
init|=
name|orderdEntries
index|[
name|i
index|]
decl_stmt|,
name|ord2
init|=
name|orderdEntries
index|[
name|j
index|]
decl_stmt|;
return|return
name|comp
operator|.
name|compare
argument_list|(
name|get
argument_list|(
name|scratch1
argument_list|,
name|ord1
argument_list|)
argument_list|,
name|get
argument_list|(
name|scratch2
argument_list|,
name|ord2
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setPivot
parameter_list|(
name|int
name|i
parameter_list|)
block|{
specifier|final
name|int
name|ord
init|=
name|orderdEntries
index|[
name|i
index|]
decl_stmt|;
name|get
argument_list|(
name|pivot
argument_list|,
name|ord
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|comparePivot
parameter_list|(
name|int
name|j
parameter_list|)
block|{
specifier|final
name|int
name|ord
init|=
name|orderdEntries
index|[
name|j
index|]
decl_stmt|;
return|return
name|comp
operator|.
name|compare
argument_list|(
name|pivot
argument_list|,
name|get
argument_list|(
name|scratch2
argument_list|,
name|ord
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|BytesRef
name|pivot
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|,
name|scratch1
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|,
name|scratch2
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
block|}
operator|.
name|quickSort
argument_list|(
literal|0
argument_list|,
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|orderdEntries
return|;
block|}
comment|/**    * sugar for {@link #iterator(Comparator)} with a<code>null</code> comparator    */
DECL|method|iterator
specifier|public
name|BytesRefIterator
name|iterator
parameter_list|()
block|{
return|return
name|iterator
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    *<p>    * Returns a {@link BytesRefIterator} with point in time semantics. The    * iterator provides access to all so far appended {@link BytesRef} instances.    *</p>    *<p>    * If a non<code>null</code> {@link Comparator} is provided the iterator will    * iterate the byte values in the order specified by the comparator. Otherwise    * the order is the same as the values were appended.    *</p>    *<p>    * This is a non-destructive operation.    *</p>    */
DECL|method|iterator
specifier|public
name|BytesRefIterator
name|iterator
parameter_list|(
specifier|final
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|comp
parameter_list|)
block|{
specifier|final
name|BytesRef
name|spare
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|size
argument_list|()
decl_stmt|;
specifier|final
name|int
index|[]
name|ords
init|=
name|comp
operator|==
literal|null
condition|?
literal|null
else|:
name|sort
argument_list|(
name|comp
argument_list|)
decl_stmt|;
return|return
operator|new
name|BytesRefIterator
argument_list|()
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|BytesRef
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|<
name|size
condition|)
block|{
return|return
name|get
argument_list|(
name|spare
argument_list|,
name|ords
operator|==
literal|null
condition|?
name|pos
operator|++
else|:
name|ords
index|[
name|pos
operator|++
index|]
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|getComparator
parameter_list|()
block|{
return|return
name|comp
return|;
block|}
block|}
return|;
block|}
block|}
end_class
end_unit
