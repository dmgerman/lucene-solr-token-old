begin_unit
begin_package
DECL|package|org.apache.lucene.search.suggest
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|SortedIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|TermFreqIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/**  * This wrapper buffers incoming elements and makes sure they are sorted in  * ascending lexicographic order.  */
end_comment
begin_class
DECL|class|SortedTermFreqIteratorWrapper
specifier|public
class|class
name|SortedTermFreqIteratorWrapper
extends|extends
name|BufferingTermFreqIteratorWrapper
implements|implements
name|SortedIterator
block|{
DECL|field|sortedOrds
specifier|private
specifier|final
name|int
index|[]
name|sortedOrds
decl_stmt|;
DECL|field|currentOrd
specifier|private
name|int
name|currentOrd
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|spare
specifier|private
specifier|final
name|BytesRef
name|spare
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|field|comp
specifier|private
specifier|final
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|comp
decl_stmt|;
DECL|method|SortedTermFreqIteratorWrapper
specifier|public
name|SortedTermFreqIteratorWrapper
parameter_list|(
name|TermFreqIterator
name|source
parameter_list|,
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|comp
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|this
operator|.
name|sortedOrds
operator|=
name|entries
operator|.
name|sort
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|this
operator|.
name|comp
operator|=
name|comp
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|float
name|freq
parameter_list|()
block|{
return|return
name|freqs
index|[
name|currentOrd
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|BytesRef
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|++
name|curPos
operator|<
name|entries
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|entries
operator|.
name|get
argument_list|(
name|spare
argument_list|,
operator|(
name|currentOrd
operator|=
name|sortedOrds
index|[
name|curPos
index|]
operator|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|comparator
specifier|public
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|comparator
parameter_list|()
block|{
return|return
name|comp
return|;
block|}
block|}
end_class
end_unit
