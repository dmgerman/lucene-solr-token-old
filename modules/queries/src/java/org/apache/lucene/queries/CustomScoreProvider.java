begin_unit
begin_package
DECL|package|org.apache.lucene.queries
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicIndexReader
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_comment
comment|// for javadocs
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
import|;
end_import
begin_comment
comment|// for javadocs
end_comment
begin_comment
comment|/**  * An instance of this subclass should be returned by  * {@link CustomScoreQuery#getCustomScoreProvider}, if you want  * to modify the custom score calculation of a {@link CustomScoreQuery}.  *<p>Since Lucene 2.9, queries operate on each segment of an index separately,  * so the protected {@link #context} field can be used to resolve doc IDs,  * as the supplied<code>doc</code> ID is per-segment and without knowledge  * of the IndexReader you cannot access the document or {@link FieldCache}.  *   * @lucene.experimental  * @since 2.9.2  */
end_comment
begin_class
DECL|class|CustomScoreProvider
specifier|public
class|class
name|CustomScoreProvider
block|{
DECL|field|context
specifier|protected
specifier|final
name|AtomicReaderContext
name|context
decl_stmt|;
comment|/**    * Creates a new instance of the provider class for the given {@link IndexReader}.    */
DECL|method|CustomScoreProvider
specifier|public
name|CustomScoreProvider
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
comment|/**    * Compute a custom score by the subQuery score and a number of     * {@link org.apache.lucene.queries.function.FunctionQuery} scores.    *<p>     * Subclasses can override this method to modify the custom score.      *<p>    * If your custom scoring is different than the default herein you     * should override at least one of the two customScore() methods.    * If the number of ValueSourceQueries is always&lt; 2 it is     * sufficient to override the other     * {@link #customScore(int, float, float) customScore()}     * method, which is simpler.     *<p>    * The default computation herein is a multiplication of given scores:    *<pre>    *     ModifiedScore = valSrcScore * valSrcScores[0] * valSrcScores[1] * ...    *</pre>    *     * @param doc id of scored doc.     * @param subQueryScore score of that doc by the subQuery.    * @param valSrcScores scores of that doc by the ValueSourceQuery.    * @return custom score.    */
DECL|method|customScore
specifier|public
name|float
name|customScore
parameter_list|(
name|int
name|doc
parameter_list|,
name|float
name|subQueryScore
parameter_list|,
name|float
name|valSrcScores
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|valSrcScores
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|customScore
argument_list|(
name|doc
argument_list|,
name|subQueryScore
argument_list|,
name|valSrcScores
index|[
literal|0
index|]
argument_list|)
return|;
block|}
if|if
condition|(
name|valSrcScores
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|customScore
argument_list|(
name|doc
argument_list|,
name|subQueryScore
argument_list|,
literal|1
argument_list|)
return|;
block|}
name|float
name|score
init|=
name|subQueryScore
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valSrcScores
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|score
operator|*=
name|valSrcScores
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|score
return|;
block|}
comment|/**    * Compute a custom score by the subQuery score and the ValueSourceQuery score.    *<p>     * Subclasses can override this method to modify the custom score.    *<p>    * If your custom scoring is different than the default herein you     * should override at least one of the two customScore() methods.    * If the number of ValueSourceQueries is always&lt; 2 it is     * sufficient to override this customScore() method, which is simpler.     *<p>    * The default computation herein is a multiplication of the two scores:    *<pre>    *     ModifiedScore = subQueryScore * valSrcScore    *</pre>    *    * @param doc id of scored doc.     * @param subQueryScore score of that doc by the subQuery.    * @param valSrcScore score of that doc by the ValueSourceQuery.    * @return custom score.    */
DECL|method|customScore
specifier|public
name|float
name|customScore
parameter_list|(
name|int
name|doc
parameter_list|,
name|float
name|subQueryScore
parameter_list|,
name|float
name|valSrcScore
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|subQueryScore
operator|*
name|valSrcScore
return|;
block|}
comment|/**    * Explain the custom score.    * Whenever overriding {@link #customScore(int, float, float[])},     * this method should also be overridden to provide the correct explanation    * for the part of the custom scoring.    *      * @param doc doc being explained.    * @param subQueryExpl explanation for the sub-query part.    * @param valSrcExpls explanation for the value source part.    * @return an explanation for the custom score    */
DECL|method|customExplain
specifier|public
name|Explanation
name|customExplain
parameter_list|(
name|int
name|doc
parameter_list|,
name|Explanation
name|subQueryExpl
parameter_list|,
name|Explanation
name|valSrcExpls
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|valSrcExpls
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|customExplain
argument_list|(
name|doc
argument_list|,
name|subQueryExpl
argument_list|,
name|valSrcExpls
index|[
literal|0
index|]
argument_list|)
return|;
block|}
if|if
condition|(
name|valSrcExpls
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|subQueryExpl
return|;
block|}
name|float
name|valSrcScore
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valSrcExpls
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|valSrcScore
operator|*=
name|valSrcExpls
index|[
name|i
index|]
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|Explanation
name|exp
init|=
operator|new
name|Explanation
argument_list|(
name|valSrcScore
operator|*
name|subQueryExpl
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"custom score: product of:"
argument_list|)
decl_stmt|;
name|exp
operator|.
name|addDetail
argument_list|(
name|subQueryExpl
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valSrcExpls
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|exp
operator|.
name|addDetail
argument_list|(
name|valSrcExpls
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|exp
return|;
block|}
comment|/**    * Explain the custom score.    * Whenever overriding {@link #customScore(int, float, float)},     * this method should also be overridden to provide the correct explanation    * for the part of the custom scoring.    *      * @param doc doc being explained.    * @param subQueryExpl explanation for the sub-query part.    * @param valSrcExpl explanation for the value source part.    * @return an explanation for the custom score    */
DECL|method|customExplain
specifier|public
name|Explanation
name|customExplain
parameter_list|(
name|int
name|doc
parameter_list|,
name|Explanation
name|subQueryExpl
parameter_list|,
name|Explanation
name|valSrcExpl
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|valSrcScore
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|valSrcExpl
operator|!=
literal|null
condition|)
block|{
name|valSrcScore
operator|*=
name|valSrcExpl
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|Explanation
name|exp
init|=
operator|new
name|Explanation
argument_list|(
name|valSrcScore
operator|*
name|subQueryExpl
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"custom score: product of:"
argument_list|)
decl_stmt|;
name|exp
operator|.
name|addDetail
argument_list|(
name|subQueryExpl
argument_list|)
expr_stmt|;
name|exp
operator|.
name|addDetail
argument_list|(
name|valSrcExpl
argument_list|)
expr_stmt|;
return|return
name|exp
return|;
block|}
block|}
end_class
end_unit
