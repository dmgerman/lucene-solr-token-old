begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.queries.function.valuesource
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|valuesource
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|cache
operator|.
name|CachedArray
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|cache
operator|.
name|CachedArrayCreator
import|;
end_import
begin_comment
comment|/**  *   *  */
end_comment
begin_class
DECL|class|NumericFieldCacheSource
specifier|public
specifier|abstract
class|class
name|NumericFieldCacheSource
parameter_list|<
name|T
extends|extends
name|CachedArray
parameter_list|>
extends|extends
name|FieldCacheSource
block|{
DECL|field|creator
specifier|protected
specifier|final
name|CachedArrayCreator
argument_list|<
name|T
argument_list|>
name|creator
decl_stmt|;
DECL|method|NumericFieldCacheSource
specifier|public
name|NumericFieldCacheSource
parameter_list|(
name|CachedArrayCreator
argument_list|<
name|T
argument_list|>
name|creator
parameter_list|)
block|{
name|super
argument_list|(
name|creator
operator|.
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|creator
operator|=
name|creator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|this
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|NumericFieldCacheSource
name|other
init|=
operator|(
name|NumericFieldCacheSource
operator|)
name|o
decl_stmt|;
return|return
name|super
operator|.
name|equals
argument_list|(
name|other
argument_list|)
operator|&&
name|this
operator|.
name|creator
operator|==
literal|null
condition|?
name|other
operator|.
name|creator
operator|==
literal|null
else|:
name|this
operator|.
name|creator
operator|.
name|getClass
argument_list|()
operator|==
name|other
operator|.
name|creator
operator|.
name|getClass
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
name|creator
operator|==
literal|null
condition|?
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|hashCode
argument_list|()
else|:
name|creator
operator|.
name|getClass
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|h
operator|+=
name|super
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|h
return|;
block|}
block|}
end_class
end_unit
