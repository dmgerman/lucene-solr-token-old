begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.base.prefix.geohash
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|prefix
operator|.
name|geohash
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|context
operator|.
name|SpatialContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|Rectangle
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|Point
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_comment
comment|/**  * Utilities for encoding and decoding geohashes. Based on  *<a href="http://en.wikipedia.org/wiki/Geohash">http://en.wikipedia.org/wiki/Geohash</a>.  */
end_comment
begin_class
DECL|class|GeohashUtils
specifier|public
class|class
name|GeohashUtils
block|{
DECL|field|BASE_32
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|BASE_32
init|=
block|{
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'b'
block|,
literal|'c'
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|,
literal|'g'
block|,
literal|'h'
block|,
literal|'j'
block|,
literal|'k'
block|,
literal|'m'
block|,
literal|'n'
block|,
literal|'p'
block|,
literal|'q'
block|,
literal|'r'
block|,
literal|'s'
block|,
literal|'t'
block|,
literal|'u'
block|,
literal|'v'
block|,
literal|'w'
block|,
literal|'x'
block|,
literal|'y'
block|,
literal|'z'
block|}
decl_stmt|;
comment|//note: this is sorted
DECL|field|BASE_32_IDX
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|BASE_32_IDX
decl_stmt|;
comment|//sparse array of indexes from '0' to 'z'
DECL|field|MAX_PRECISION
specifier|public
specifier|static
specifier|final
name|int
name|MAX_PRECISION
init|=
literal|24
decl_stmt|;
comment|//DWS: I forget what level results in needless more precision but it's about this
DECL|field|BITS
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|BITS
init|=
block|{
literal|16
block|,
literal|8
block|,
literal|4
block|,
literal|2
block|,
literal|1
block|}
decl_stmt|;
static|static
block|{
name|BASE_32_IDX
operator|=
operator|new
name|int
index|[
name|BASE_32
index|[
name|BASE_32
operator|.
name|length
operator|-
literal|1
index|]
operator|-
name|BASE_32
index|[
literal|0
index|]
operator|+
literal|1
index|]
expr_stmt|;
assert|assert
name|BASE_32_IDX
operator|.
name|length
operator|<
literal|100
assert|;
comment|//reasonable length
name|Arrays
operator|.
name|fill
argument_list|(
name|BASE_32_IDX
argument_list|,
operator|-
literal|500
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BASE_32
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BASE_32_IDX
index|[
name|BASE_32
index|[
name|i
index|]
operator|-
name|BASE_32
index|[
literal|0
index|]
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
DECL|method|GeohashUtils
specifier|private
name|GeohashUtils
parameter_list|()
block|{   }
comment|/**    * Encodes the given latitude and longitude into a geohash    *    * @param latitude Latitude to encode    * @param longitude Longitude to encode    * @return Geohash encoding of the longitude and latitude    */
DECL|method|encodeLatLon
specifier|public
specifier|static
name|String
name|encodeLatLon
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|)
block|{
return|return
name|encodeLatLon
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|,
literal|12
argument_list|)
return|;
block|}
DECL|method|encodeLatLon
specifier|public
specifier|static
name|String
name|encodeLatLon
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|,
name|int
name|precision
parameter_list|)
block|{
name|double
index|[]
name|latInterval
init|=
block|{
operator|-
literal|90.0
block|,
literal|90.0
block|}
decl_stmt|;
name|double
index|[]
name|lngInterval
init|=
block|{
operator|-
literal|180.0
block|,
literal|180.0
block|}
decl_stmt|;
specifier|final
name|StringBuilder
name|geohash
init|=
operator|new
name|StringBuilder
argument_list|(
name|precision
argument_list|)
decl_stmt|;
name|boolean
name|isEven
init|=
literal|true
decl_stmt|;
name|int
name|bit
init|=
literal|0
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|geohash
operator|.
name|length
argument_list|()
operator|<
name|precision
condition|)
block|{
name|double
name|mid
init|=
literal|0.0
decl_stmt|;
if|if
condition|(
name|isEven
condition|)
block|{
name|mid
operator|=
operator|(
name|lngInterval
index|[
literal|0
index|]
operator|+
name|lngInterval
index|[
literal|1
index|]
operator|)
operator|/
literal|2D
expr_stmt|;
if|if
condition|(
name|longitude
operator|>
name|mid
condition|)
block|{
name|ch
operator||=
name|BITS
index|[
name|bit
index|]
expr_stmt|;
name|lngInterval
index|[
literal|0
index|]
operator|=
name|mid
expr_stmt|;
block|}
else|else
block|{
name|lngInterval
index|[
literal|1
index|]
operator|=
name|mid
expr_stmt|;
block|}
block|}
else|else
block|{
name|mid
operator|=
operator|(
name|latInterval
index|[
literal|0
index|]
operator|+
name|latInterval
index|[
literal|1
index|]
operator|)
operator|/
literal|2D
expr_stmt|;
if|if
condition|(
name|latitude
operator|>
name|mid
condition|)
block|{
name|ch
operator||=
name|BITS
index|[
name|bit
index|]
expr_stmt|;
name|latInterval
index|[
literal|0
index|]
operator|=
name|mid
expr_stmt|;
block|}
else|else
block|{
name|latInterval
index|[
literal|1
index|]
operator|=
name|mid
expr_stmt|;
block|}
block|}
name|isEven
operator|=
operator|!
name|isEven
expr_stmt|;
if|if
condition|(
name|bit
operator|<
literal|4
condition|)
block|{
name|bit
operator|++
expr_stmt|;
block|}
else|else
block|{
name|geohash
operator|.
name|append
argument_list|(
name|BASE_32
index|[
name|ch
index|]
argument_list|)
expr_stmt|;
name|bit
operator|=
literal|0
expr_stmt|;
name|ch
operator|=
literal|0
expr_stmt|;
block|}
block|}
return|return
name|geohash
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Decodes the given geohash into a latitude and longitude    *    * @param geohash Geohash to deocde    * @return Array with the latitude at index 0, and longitude at index 1    */
DECL|method|decode
specifier|public
specifier|static
name|Point
name|decode
parameter_list|(
name|String
name|geohash
parameter_list|,
name|SpatialContext
name|ctx
parameter_list|)
block|{
name|Rectangle
name|rect
init|=
name|decodeBoundary
argument_list|(
name|geohash
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
name|double
name|latitude
init|=
operator|(
name|rect
operator|.
name|getMinY
argument_list|()
operator|+
name|rect
operator|.
name|getMaxY
argument_list|()
operator|)
operator|/
literal|2D
decl_stmt|;
name|double
name|longitude
init|=
operator|(
name|rect
operator|.
name|getMinX
argument_list|()
operator|+
name|rect
operator|.
name|getMaxX
argument_list|()
operator|)
operator|/
literal|2D
decl_stmt|;
return|return
name|ctx
operator|.
name|makePoint
argument_list|(
name|longitude
argument_list|,
name|latitude
argument_list|)
return|;
block|}
comment|/** Returns min-max lat, min-max lon. */
DECL|method|decodeBoundary
specifier|public
specifier|static
name|Rectangle
name|decodeBoundary
parameter_list|(
name|String
name|geohash
parameter_list|,
name|SpatialContext
name|ctx
parameter_list|)
block|{
name|double
name|minY
init|=
operator|-
literal|90
decl_stmt|,
name|maxY
init|=
literal|90
decl_stmt|,
name|minX
init|=
operator|-
literal|180
decl_stmt|,
name|maxX
init|=
literal|180
decl_stmt|;
name|boolean
name|isEven
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|geohash
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|geohash
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'Z'
condition|)
name|c
operator|-=
operator|(
literal|'A'
operator|-
literal|'a'
operator|)
expr_stmt|;
specifier|final
name|int
name|cd
init|=
name|BASE_32_IDX
index|[
name|c
operator|-
name|BASE_32
index|[
literal|0
index|]
index|]
decl_stmt|;
comment|//TODO check successful?
for|for
control|(
name|int
name|mask
range|:
name|BITS
control|)
block|{
if|if
condition|(
name|isEven
condition|)
block|{
if|if
condition|(
operator|(
name|cd
operator|&
name|mask
operator|)
operator|!=
literal|0
condition|)
block|{
name|minX
operator|=
operator|(
name|minX
operator|+
name|maxX
operator|)
operator|/
literal|2D
expr_stmt|;
block|}
else|else
block|{
name|maxX
operator|=
operator|(
name|minX
operator|+
name|maxX
operator|)
operator|/
literal|2D
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|(
name|cd
operator|&
name|mask
operator|)
operator|!=
literal|0
condition|)
block|{
name|minY
operator|=
operator|(
name|minY
operator|+
name|maxY
operator|)
operator|/
literal|2D
expr_stmt|;
block|}
else|else
block|{
name|maxY
operator|=
operator|(
name|minY
operator|+
name|maxY
operator|)
operator|/
literal|2D
expr_stmt|;
block|}
block|}
name|isEven
operator|=
operator|!
name|isEven
expr_stmt|;
block|}
block|}
return|return
name|ctx
operator|.
name|makeRect
argument_list|(
name|minX
argument_list|,
name|maxX
argument_list|,
name|minY
argument_list|,
name|maxY
argument_list|)
return|;
block|}
comment|/** Array of geohashes 1 level below the baseGeohash. Sorted. */
DECL|method|getSubGeohashes
specifier|public
specifier|static
name|String
index|[]
name|getSubGeohashes
parameter_list|(
name|String
name|baseGeohash
parameter_list|)
block|{
name|String
index|[]
name|hashes
init|=
operator|new
name|String
index|[
name|BASE_32
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BASE_32
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|//note: already sorted
name|char
name|c
init|=
name|BASE_32
index|[
name|i
index|]
decl_stmt|;
name|hashes
index|[
name|i
index|]
operator|=
name|baseGeohash
operator|+
name|c
expr_stmt|;
block|}
return|return
name|hashes
return|;
block|}
DECL|method|lookupDegreesSizeForHashLen
specifier|public
specifier|static
name|double
index|[]
name|lookupDegreesSizeForHashLen
parameter_list|(
name|int
name|hashLen
parameter_list|)
block|{
return|return
operator|new
name|double
index|[]
block|{
name|hashLenToLatHeight
index|[
name|hashLen
index|]
block|,
name|hashLenToLonWidth
index|[
name|hashLen
index|]
block|}
return|;
block|}
comment|/**    * Return the longest geohash length that will have a width& height>= specified arguments.    */
DECL|method|lookupHashLenForWidthHeight
specifier|public
specifier|static
name|int
name|lookupHashLenForWidthHeight
parameter_list|(
name|double
name|width
parameter_list|,
name|double
name|height
parameter_list|)
block|{
comment|//loop through hash length arrays from beginning till we find one.
for|for
control|(
name|int
name|len
init|=
literal|1
init|;
name|len
operator|<=
name|MAX_PRECISION
condition|;
name|len
operator|++
control|)
block|{
name|double
name|latHeight
init|=
name|hashLenToLatHeight
index|[
name|len
index|]
decl_stmt|;
name|double
name|lonWidth
init|=
name|hashLenToLonWidth
index|[
name|len
index|]
decl_stmt|;
if|if
condition|(
name|latHeight
operator|<
name|height
operator|||
name|lonWidth
operator|<
name|width
condition|)
return|return
name|len
operator|-
literal|1
return|;
comment|//previous length is big enough to encompass specified width& height
block|}
return|return
name|MAX_PRECISION
return|;
block|}
comment|/** See the table at http://en.wikipedia.org/wiki/Geohash */
DECL|field|hashLenToLatHeight
DECL|field|hashLenToLonWidth
specifier|private
specifier|static
specifier|final
name|double
index|[]
name|hashLenToLatHeight
decl_stmt|,
name|hashLenToLonWidth
decl_stmt|;
static|static
block|{
name|hashLenToLatHeight
operator|=
operator|new
name|double
index|[
name|MAX_PRECISION
operator|+
literal|1
index|]
expr_stmt|;
name|hashLenToLonWidth
operator|=
operator|new
name|double
index|[
name|MAX_PRECISION
operator|+
literal|1
index|]
expr_stmt|;
name|hashLenToLatHeight
index|[
literal|0
index|]
operator|=
literal|90
operator|*
literal|2
expr_stmt|;
name|hashLenToLonWidth
index|[
literal|0
index|]
operator|=
literal|180
operator|*
literal|2
expr_stmt|;
name|boolean
name|even
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|MAX_PRECISION
condition|;
name|i
operator|++
control|)
block|{
name|hashLenToLatHeight
index|[
name|i
index|]
operator|=
name|hashLenToLatHeight
index|[
name|i
operator|-
literal|1
index|]
operator|/
operator|(
name|even
condition|?
literal|8
else|:
literal|4
operator|)
expr_stmt|;
name|hashLenToLonWidth
index|[
name|i
index|]
operator|=
name|hashLenToLonWidth
index|[
name|i
operator|-
literal|1
index|]
operator|/
operator|(
name|even
condition|?
literal|4
else|:
literal|8
operator|)
expr_stmt|;
name|even
operator|=
operator|!
name|even
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
