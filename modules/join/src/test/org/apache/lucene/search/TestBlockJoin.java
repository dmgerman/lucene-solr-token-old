begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LogDocMergePolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|GroupDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|TopGroups
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|BlockJoinCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|BlockJoinQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ReaderUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_class
DECL|class|TestBlockJoin
specifier|public
class|class
name|TestBlockJoin
extends|extends
name|LuceneTestCase
block|{
comment|// One resume...
DECL|method|makeResume
specifier|private
name|Document
name|makeResume
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|country
parameter_list|)
block|{
name|Document
name|resume
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|resume
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"docType"
argument_list|,
literal|"resume"
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|resume
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|,
name|StringField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|resume
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"country"
argument_list|,
name|country
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|resume
return|;
block|}
comment|// ... has multiple jobs
DECL|method|makeJob
specifier|private
name|Document
name|makeJob
parameter_list|(
name|String
name|skill
parameter_list|,
name|int
name|year
parameter_list|)
block|{
name|Document
name|job
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|job
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"skill"
argument_list|,
name|skill
argument_list|,
name|StringField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|add
argument_list|(
operator|new
name|NumericField
argument_list|(
literal|"year"
argument_list|)
operator|.
name|setIntValue
argument_list|(
name|year
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
comment|// ... has multiple qualifications
DECL|method|makeQualification
specifier|private
name|Document
name|makeQualification
parameter_list|(
name|String
name|qualification
parameter_list|,
name|int
name|year
parameter_list|)
block|{
name|Document
name|job
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|job
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"qualification"
argument_list|,
name|qualification
argument_list|,
name|StringField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|add
argument_list|(
operator|new
name|NumericField
argument_list|(
literal|"year"
argument_list|)
operator|.
name|setIntValue
argument_list|(
name|year
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|,
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Document
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<
name|Document
argument_list|>
argument_list|()
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeJob
argument_list|(
literal|"java"
argument_list|,
literal|2007
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeJob
argument_list|(
literal|"python"
argument_list|,
literal|2010
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeResume
argument_list|(
literal|"Lisa"
argument_list|,
literal|"United Kingdom"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocuments
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|docs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeJob
argument_list|(
literal|"ruby"
argument_list|,
literal|2005
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeJob
argument_list|(
literal|"java"
argument_list|,
literal|2006
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeResume
argument_list|(
literal|"Frank"
argument_list|,
literal|"United States"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocuments
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
comment|// Create a filter that defines "parent" documents in the index - in this case resumes
name|Filter
name|parentsFilter
init|=
operator|new
name|CachingWrapperFilter
argument_list|(
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"docType"
argument_list|,
literal|"resume"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Define child document criteria (finds an example of relevant work experience)
name|BooleanQuery
name|childQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|childQuery
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"skill"
argument_list|,
literal|"java"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|childQuery
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|NumericRangeQuery
operator|.
name|newIntRange
argument_list|(
literal|"year"
argument_list|,
literal|2006
argument_list|,
literal|2011
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
comment|// Define parent document criteria (find a resident in the UK)
name|Query
name|parentQuery
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"country"
argument_list|,
literal|"United Kingdom"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Wrap the child document query to 'join' any matches
comment|// up to corresponding parent:
name|BlockJoinQuery
name|childJoinQuery
init|=
operator|new
name|BlockJoinQuery
argument_list|(
name|childQuery
argument_list|,
name|parentsFilter
argument_list|,
name|BlockJoinQuery
operator|.
name|ScoreMode
operator|.
name|Avg
argument_list|)
decl_stmt|;
comment|// Combine the parent and nested child queries into a single query for a candidate
name|BooleanQuery
name|fullQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|fullQuery
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|parentQuery
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|fullQuery
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|childJoinQuery
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|BlockJoinCollector
name|c
init|=
operator|new
name|BlockJoinCollector
argument_list|(
name|Sort
operator|.
name|RELEVANCE
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
name|fullQuery
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|TopGroups
argument_list|<
name|Integer
argument_list|>
name|results
init|=
name|c
operator|.
name|getTopGroups
argument_list|(
name|childJoinQuery
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|//assertEquals(1, results.totalHitCount);
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|totalGroupedHitCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|groups
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|GroupDocs
argument_list|<
name|Integer
argument_list|>
name|group
init|=
name|results
operator|.
name|groups
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|group
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|Document
name|childDoc
init|=
name|s
operator|.
name|doc
argument_list|(
name|group
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
comment|//System.out.println("  doc=" + group.scoreDocs[0].doc);
name|assertEquals
argument_list|(
literal|"java"
argument_list|,
name|childDoc
operator|.
name|get
argument_list|(
literal|"skill"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|group
operator|.
name|groupValue
argument_list|)
expr_stmt|;
name|Document
name|parentDoc
init|=
name|s
operator|.
name|doc
argument_list|(
name|group
operator|.
name|groupValue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Lisa"
argument_list|,
name|parentDoc
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testBoostBug
specifier|public
name|void
name|testBoostBug
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|BlockJoinQuery
name|q
init|=
operator|new
name|BlockJoinQuery
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|)
argument_list|,
name|BlockJoinQuery
operator|.
name|ScoreMode
operator|.
name|Avg
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setBoost
argument_list|(
literal|2f
argument_list|)
expr_stmt|;
comment|// we boost the BQ
name|bq
operator|.
name|add
argument_list|(
name|q
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|s
operator|.
name|search
argument_list|(
name|bq
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getRandomFields
specifier|private
name|String
index|[]
index|[]
name|getRandomFields
parameter_list|(
name|int
name|maxUniqueValues
parameter_list|)
block|{
specifier|final
name|String
index|[]
index|[]
name|fields
init|=
operator|new
name|String
index|[
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|fieldID
init|=
literal|0
init|;
name|fieldID
operator|<
name|fields
operator|.
name|length
condition|;
name|fieldID
operator|++
control|)
block|{
specifier|final
name|int
name|valueCount
decl_stmt|;
if|if
condition|(
name|fieldID
operator|==
literal|0
condition|)
block|{
name|valueCount
operator|=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|valueCount
operator|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
name|maxUniqueValues
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
index|[]
name|values
init|=
name|fields
index|[
name|fieldID
index|]
operator|=
operator|new
name|String
index|[
name|valueCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCount
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|_TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|)
expr_stmt|;
comment|//values[i] = _TestUtil.randomSimpleString(random);
block|}
block|}
return|return
name|fields
return|;
block|}
DECL|method|randomParentTerm
specifier|private
name|Term
name|randomParentTerm
parameter_list|(
name|String
index|[]
name|values
parameter_list|)
block|{
return|return
operator|new
name|Term
argument_list|(
literal|"parent0"
argument_list|,
name|values
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|values
operator|.
name|length
argument_list|)
index|]
argument_list|)
return|;
block|}
DECL|method|randomChildTerm
specifier|private
name|Term
name|randomChildTerm
parameter_list|(
name|String
index|[]
name|values
parameter_list|)
block|{
return|return
operator|new
name|Term
argument_list|(
literal|"child0"
argument_list|,
name|values
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|values
operator|.
name|length
argument_list|)
index|]
argument_list|)
return|;
block|}
DECL|method|getRandomSort
specifier|private
name|Sort
name|getRandomSort
parameter_list|(
name|String
name|prefix
parameter_list|,
name|int
name|numFields
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|SortField
argument_list|>
name|sortFields
init|=
operator|new
name|ArrayList
argument_list|<
name|SortField
argument_list|>
argument_list|()
decl_stmt|;
comment|// TODO: sometimes sort by score; problem is scores are
comment|// not comparable across the two indices
comment|// sortFields.add(SortField.FIELD_SCORE);
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|sortFields
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
name|prefix
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|numFields
argument_list|)
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|STRING
argument_list|,
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|sortFields
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
name|prefix
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|numFields
argument_list|)
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|STRING
argument_list|,
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sortFields
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
name|prefix
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|numFields
argument_list|)
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|STRING
argument_list|,
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Break ties:
name|sortFields
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
name|prefix
operator|+
literal|"ID"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|Sort
argument_list|(
name|sortFields
operator|.
name|toArray
argument_list|(
operator|new
name|SortField
index|[
name|sortFields
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
comment|// We build two indices at once: one normalized (which
comment|// BlockJoinQuery/Collector can query) and the other w/
comment|// same docs just fully denormalized:
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|Directory
name|joinDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numParentDocs
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|100
operator|*
name|RANDOM_MULTIPLIER
argument_list|,
literal|300
operator|*
name|RANDOM_MULTIPLIER
argument_list|)
decl_stmt|;
comment|//final int numParentDocs = 30;
comment|// Values for parent fields:
specifier|final
name|String
index|[]
index|[]
name|parentFields
init|=
name|getRandomFields
argument_list|(
name|numParentDocs
operator|/
literal|2
argument_list|)
decl_stmt|;
comment|// Values for child fields:
specifier|final
name|String
index|[]
index|[]
name|childFields
init|=
name|getRandomFields
argument_list|(
name|numParentDocs
argument_list|)
decl_stmt|;
comment|// TODO: test star join, nested join cases too!
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|,
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|joinW
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|,
name|joinDir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|parentDocID
init|=
literal|0
init|;
name|parentDocID
operator|<
name|numParentDocs
condition|;
name|parentDocID
operator|++
control|)
block|{
name|Document
name|parentDoc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Document
name|parentJoinDoc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|id
init|=
name|newField
argument_list|(
literal|"parentID"
argument_list|,
literal|""
operator|+
name|parentDocID
argument_list|,
name|StringField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|parentDoc
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|parentJoinDoc
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|parentJoinDoc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"isParent"
argument_list|,
literal|"x"
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|field
init|=
literal|0
init|;
name|field
operator|<
name|parentFields
operator|.
name|length
condition|;
name|field
operator|++
control|)
block|{
if|if
condition|(
name|random
operator|.
name|nextDouble
argument_list|()
operator|<
literal|0.9
condition|)
block|{
name|Field
name|f
init|=
name|newField
argument_list|(
literal|"parent"
operator|+
name|field
argument_list|,
name|parentFields
index|[
name|field
index|]
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|parentFields
index|[
name|field
index|]
operator|.
name|length
argument_list|)
index|]
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
decl_stmt|;
name|parentDoc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|parentJoinDoc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|List
argument_list|<
name|Document
argument_list|>
name|joinDocs
init|=
operator|new
name|ArrayList
argument_list|<
name|Document
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|parentDoc
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|numChildDocs
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|childDocID
init|=
literal|0
init|;
name|childDocID
operator|<
name|numChildDocs
condition|;
name|childDocID
operator|++
control|)
block|{
comment|// Denormalize: copy all parent fields into child doc:
name|Document
name|childDoc
init|=
name|_TestUtil
operator|.
name|cloneDocument
argument_list|(
name|parentDoc
argument_list|)
decl_stmt|;
name|Document
name|joinChildDoc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|joinDocs
operator|.
name|add
argument_list|(
name|joinChildDoc
argument_list|)
expr_stmt|;
name|Field
name|childID
init|=
name|newField
argument_list|(
literal|"childID"
argument_list|,
literal|""
operator|+
name|childDocID
argument_list|,
name|StringField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|childDoc
operator|.
name|add
argument_list|(
name|childID
argument_list|)
expr_stmt|;
name|joinChildDoc
operator|.
name|add
argument_list|(
name|childID
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|childFieldID
init|=
literal|0
init|;
name|childFieldID
operator|<
name|childFields
operator|.
name|length
condition|;
name|childFieldID
operator|++
control|)
block|{
if|if
condition|(
name|random
operator|.
name|nextDouble
argument_list|()
operator|<
literal|0.9
condition|)
block|{
name|Field
name|f
init|=
name|newField
argument_list|(
literal|"child"
operator|+
name|childFieldID
argument_list|,
name|childFields
index|[
name|childFieldID
index|]
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|childFields
index|[
name|childFieldID
index|]
operator|.
name|length
argument_list|)
index|]
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
decl_stmt|;
name|childDoc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|joinChildDoc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    "
operator|+
name|joinChildDoc
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|childDoc
argument_list|)
expr_stmt|;
block|}
comment|// Parent last:
name|joinDocs
operator|.
name|add
argument_list|(
name|parentJoinDoc
argument_list|)
expr_stmt|;
name|joinW
operator|.
name|addDocuments
argument_list|(
name|joinDocs
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|IndexReader
name|joinR
init|=
name|joinW
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|joinW
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: reader="
operator|+
name|r
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: joinReader="
operator|+
name|joinR
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|docIDX
init|=
literal|0
init|;
name|docIDX
operator|<
name|joinR
operator|.
name|maxDoc
argument_list|()
condition|;
name|docIDX
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  docID="
operator|+
name|docIDX
operator|+
literal|" doc="
operator|+
name|joinR
operator|.
name|document
argument_list|(
name|docIDX
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|s
operator|.
name|setDefaultFieldSortScoring
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|IndexSearcher
name|joinS
init|=
name|newSearcher
argument_list|(
name|joinR
argument_list|)
decl_stmt|;
specifier|final
name|Filter
name|parentsFilter
init|=
operator|new
name|CachingWrapperFilter
argument_list|(
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"isParent"
argument_list|,
literal|"x"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|iters
init|=
literal|200
operator|*
name|RANDOM_MULTIPLIER
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: iter="
operator|+
operator|(
literal|1
operator|+
name|iter
operator|)
operator|+
literal|" of "
operator|+
name|iters
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Query
name|childQuery
decl_stmt|;
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|==
literal|2
condition|)
block|{
specifier|final
name|int
name|childFieldID
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|childFields
operator|.
name|length
argument_list|)
decl_stmt|;
name|childQuery
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"child"
operator|+
name|childFieldID
argument_list|,
name|childFields
index|[
name|childFieldID
index|]
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|childFields
index|[
name|childFieldID
index|]
operator|.
name|length
argument_list|)
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|==
literal|2
condition|)
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|childQuery
operator|=
name|bq
expr_stmt|;
specifier|final
name|int
name|numClauses
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|boolean
name|didMust
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|clauseIDX
init|=
literal|0
init|;
name|clauseIDX
operator|<
name|numClauses
condition|;
name|clauseIDX
operator|++
control|)
block|{
name|Query
name|clause
decl_stmt|;
name|BooleanClause
operator|.
name|Occur
name|occur
decl_stmt|;
if|if
condition|(
operator|!
name|didMust
operator|&&
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|occur
operator|=
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
else|:
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
expr_stmt|;
name|clause
operator|=
operator|new
name|TermQuery
argument_list|(
name|randomChildTerm
argument_list|(
name|childFields
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|didMust
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|occur
operator|=
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
expr_stmt|;
specifier|final
name|int
name|childFieldID
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
name|childFields
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
name|clause
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"child"
operator|+
name|childFieldID
argument_list|,
name|childFields
index|[
name|childFieldID
index|]
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|childFields
index|[
name|childFieldID
index|]
operator|.
name|length
argument_list|)
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bq
operator|.
name|add
argument_list|(
name|clause
argument_list|,
name|occur
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|childQuery
operator|=
name|bq
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|randomChildTerm
argument_list|(
name|childFields
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
specifier|final
name|int
name|childFieldID
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
name|childFields
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"child"
operator|+
name|childFieldID
argument_list|,
name|childFields
index|[
name|childFieldID
index|]
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|childFields
index|[
name|childFieldID
index|]
operator|.
name|length
argument_list|)
index|]
argument_list|)
argument_list|)
argument_list|,
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
else|:
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BlockJoinQuery
name|childJoinQuery
init|=
operator|new
name|BlockJoinQuery
argument_list|(
name|childQuery
argument_list|,
name|parentsFilter
argument_list|,
name|BlockJoinQuery
operator|.
name|ScoreMode
operator|.
name|Avg
argument_list|)
decl_stmt|;
comment|// To run against the block-join index:
specifier|final
name|Query
name|parentJoinQuery
decl_stmt|;
comment|// Same query as parentJoinQuery, but to run against
comment|// the fully denormalized index (so we can compare)
comment|// results:
specifier|final
name|Query
name|parentQuery
decl_stmt|;
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|parentQuery
operator|=
name|childQuery
expr_stmt|;
name|parentJoinQuery
operator|=
name|childJoinQuery
expr_stmt|;
block|}
else|else
block|{
comment|// AND parent field w/ child field
specifier|final
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|parentJoinQuery
operator|=
name|bq
expr_stmt|;
specifier|final
name|Term
name|parentTerm
init|=
name|randomParentTerm
argument_list|(
name|parentFields
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|bq
operator|.
name|add
argument_list|(
name|childJoinQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|parentTerm
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bq
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|parentTerm
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|childJoinQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BooleanQuery
name|bq2
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|parentQuery
operator|=
name|bq2
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|bq2
operator|.
name|add
argument_list|(
name|childQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq2
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|parentTerm
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bq2
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|parentTerm
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq2
operator|.
name|add
argument_list|(
name|childQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Sort
name|parentSort
init|=
name|getRandomSort
argument_list|(
literal|"parent"
argument_list|,
name|parentFields
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|Sort
name|childSort
init|=
name|getRandomSort
argument_list|(
literal|"child"
argument_list|,
name|childFields
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: query="
operator|+
name|parentQuery
operator|+
literal|" joinQuery="
operator|+
name|parentJoinQuery
operator|+
literal|" parentSort="
operator|+
name|parentSort
operator|+
literal|" childSort="
operator|+
name|childSort
argument_list|)
expr_stmt|;
block|}
comment|// Merge both sorst:
specifier|final
name|List
argument_list|<
name|SortField
argument_list|>
name|sortFields
init|=
operator|new
name|ArrayList
argument_list|<
name|SortField
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|parentSort
operator|.
name|getSort
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|sortFields
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|childSort
operator|.
name|getSort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Sort
name|parentAndChildSort
init|=
operator|new
name|Sort
argument_list|(
name|sortFields
operator|.
name|toArray
argument_list|(
operator|new
name|SortField
index|[
name|sortFields
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|TopDocs
name|results
init|=
name|s
operator|.
name|search
argument_list|(
name|parentQuery
argument_list|,
literal|null
argument_list|,
name|r
operator|.
name|numDocs
argument_list|()
argument_list|,
name|parentAndChildSort
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: normal index gets "
operator|+
name|results
operator|.
name|totalHits
operator|+
literal|" hits"
argument_list|)
expr_stmt|;
specifier|final
name|ScoreDoc
index|[]
name|hits
init|=
name|results
operator|.
name|scoreDocs
decl_stmt|;
for|for
control|(
name|int
name|hitIDX
init|=
literal|0
init|;
name|hitIDX
operator|<
name|hits
operator|.
name|length
condition|;
name|hitIDX
operator|++
control|)
block|{
specifier|final
name|Document
name|doc
init|=
name|s
operator|.
name|doc
argument_list|(
name|hits
index|[
name|hitIDX
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
comment|//System.out.println("  score=" + hits[hitIDX].score + " parentID=" + doc.get("parentID") + " childID=" + doc.get("childID") + " (docID=" + hits[hitIDX].doc + ")");
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  parentID="
operator|+
name|doc
operator|.
name|get
argument_list|(
literal|"parentID"
argument_list|)
operator|+
literal|" childID="
operator|+
name|doc
operator|.
name|get
argument_list|(
literal|"childID"
argument_list|)
operator|+
literal|" (docID="
operator|+
name|hits
index|[
name|hitIDX
index|]
operator|.
name|doc
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|FieldDoc
name|fd
init|=
operator|(
name|FieldDoc
operator|)
name|hits
index|[
name|hitIDX
index|]
decl_stmt|;
if|if
condition|(
name|fd
operator|.
name|fields
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|fd
operator|.
name|fields
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|BytesRef
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
operator|(
operator|(
name|BytesRef
operator|)
name|o
operator|)
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|o
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|BlockJoinCollector
name|c
init|=
operator|new
name|BlockJoinCollector
argument_list|(
name|parentSort
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|joinS
operator|.
name|search
argument_list|(
name|parentJoinQuery
argument_list|,
name|c
argument_list|)
expr_stmt|;
specifier|final
name|int
name|hitsPerGroup
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
comment|//final int hitsPerGroup = 100;
specifier|final
name|TopGroups
argument_list|<
name|Integer
argument_list|>
name|joinResults
init|=
name|c
operator|.
name|getTopGroups
argument_list|(
name|childJoinQuery
argument_list|,
name|childSort
argument_list|,
literal|0
argument_list|,
name|hitsPerGroup
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTEST: block join index gets "
operator|+
operator|(
name|joinResults
operator|==
literal|null
condition|?
literal|0
else|:
name|joinResults
operator|.
name|groups
operator|.
name|length
operator|)
operator|+
literal|" groups; hitsPerGroup="
operator|+
name|hitsPerGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|joinResults
operator|!=
literal|null
condition|)
block|{
specifier|final
name|GroupDocs
argument_list|<
name|Integer
argument_list|>
index|[]
name|groups
init|=
name|joinResults
operator|.
name|groups
decl_stmt|;
for|for
control|(
name|int
name|groupIDX
init|=
literal|0
init|;
name|groupIDX
operator|<
name|groups
operator|.
name|length
condition|;
name|groupIDX
operator|++
control|)
block|{
specifier|final
name|GroupDocs
argument_list|<
name|Integer
argument_list|>
name|group
init|=
name|groups
index|[
name|groupIDX
index|]
decl_stmt|;
if|if
condition|(
name|group
operator|.
name|groupSortValues
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|group
operator|.
name|groupSortValues
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|BytesRef
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
operator|(
operator|(
name|BytesRef
operator|)
name|o
operator|)
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|o
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|group
operator|.
name|groupValue
argument_list|)
expr_stmt|;
specifier|final
name|Document
name|parentDoc
init|=
name|joinS
operator|.
name|doc
argument_list|(
name|group
operator|.
name|groupValue
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  group parentID="
operator|+
name|parentDoc
operator|.
name|get
argument_list|(
literal|"parentID"
argument_list|)
operator|+
literal|" (docID="
operator|+
name|group
operator|.
name|groupValue
operator|+
literal|")"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|hitIDX
init|=
literal|0
init|;
name|hitIDX
operator|<
name|group
operator|.
name|scoreDocs
operator|.
name|length
condition|;
name|hitIDX
operator|++
control|)
block|{
specifier|final
name|Document
name|doc
init|=
name|joinS
operator|.
name|doc
argument_list|(
name|group
operator|.
name|scoreDocs
index|[
name|hitIDX
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
comment|//System.out.println("    score=" + group.scoreDocs[hitIDX].score + " childID=" + doc.get("childID") + " (docID=" + group.scoreDocs[hitIDX].doc + ")");
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    childID="
operator|+
name|doc
operator|.
name|get
argument_list|(
literal|"childID"
argument_list|)
operator|+
literal|" child0="
operator|+
name|doc
operator|.
name|get
argument_list|(
literal|"child0"
argument_list|)
operator|+
literal|" (docID="
operator|+
name|group
operator|.
name|scoreDocs
index|[
name|hitIDX
index|]
operator|.
name|doc
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|results
operator|.
name|totalHits
operator|==
literal|0
condition|)
block|{
name|assertNull
argument_list|(
name|joinResults
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compareHits
argument_list|(
name|r
argument_list|,
name|joinR
argument_list|,
name|results
argument_list|,
name|joinResults
argument_list|)
expr_stmt|;
block|}
block|}
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|joinS
operator|.
name|close
argument_list|()
expr_stmt|;
name|joinR
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|joinDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|compareHits
specifier|private
name|void
name|compareHits
parameter_list|(
name|IndexReader
name|r
parameter_list|,
name|IndexReader
name|joinR
parameter_list|,
name|TopDocs
name|results
parameter_list|,
name|TopGroups
argument_list|<
name|Integer
argument_list|>
name|joinResults
parameter_list|)
throws|throws
name|Exception
block|{
comment|// results is 'complete'; joinResults is a subset
name|int
name|resultUpto
init|=
literal|0
decl_stmt|;
name|int
name|joinGroupUpto
init|=
literal|0
decl_stmt|;
specifier|final
name|ScoreDoc
index|[]
name|hits
init|=
name|results
operator|.
name|scoreDocs
decl_stmt|;
specifier|final
name|GroupDocs
argument_list|<
name|Integer
argument_list|>
index|[]
name|groupDocs
init|=
name|joinResults
operator|.
name|groups
decl_stmt|;
while|while
condition|(
name|joinGroupUpto
operator|<
name|groupDocs
operator|.
name|length
condition|)
block|{
specifier|final
name|GroupDocs
argument_list|<
name|Integer
argument_list|>
name|group
init|=
name|groupDocs
index|[
name|joinGroupUpto
operator|++
index|]
decl_stmt|;
specifier|final
name|ScoreDoc
index|[]
name|groupHits
init|=
name|group
operator|.
name|scoreDocs
decl_stmt|;
name|assertNotNull
argument_list|(
name|group
operator|.
name|groupValue
argument_list|)
expr_stmt|;
specifier|final
name|Document
name|parentDoc
init|=
name|joinR
operator|.
name|document
argument_list|(
name|group
operator|.
name|groupValue
argument_list|)
decl_stmt|;
specifier|final
name|String
name|parentID
init|=
name|parentDoc
operator|.
name|get
argument_list|(
literal|"parentID"
argument_list|)
decl_stmt|;
comment|//System.out.println("GROUP groupDoc=" + group.groupDoc + " parent=" + parentDoc);
name|assertNotNull
argument_list|(
name|parentID
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|groupHits
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|hitIDX
init|=
literal|0
init|;
name|hitIDX
operator|<
name|groupHits
operator|.
name|length
condition|;
name|hitIDX
operator|++
control|)
block|{
specifier|final
name|Document
name|nonJoinHit
init|=
name|r
operator|.
name|document
argument_list|(
name|hits
index|[
name|resultUpto
operator|++
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
specifier|final
name|Document
name|joinHit
init|=
name|joinR
operator|.
name|document
argument_list|(
name|groupHits
index|[
name|hitIDX
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|parentID
argument_list|,
name|nonJoinHit
operator|.
name|get
argument_list|(
literal|"parentID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|joinHit
operator|.
name|get
argument_list|(
literal|"childID"
argument_list|)
argument_list|,
name|nonJoinHit
operator|.
name|get
argument_list|(
literal|"childID"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|joinGroupUpto
operator|<
name|groupDocs
operator|.
name|length
condition|)
block|{
comment|// Advance non-join hit to the next parentID:
comment|//System.out.println("  next joingroupUpto=" + joinGroupUpto + " gd.length=" + groupDocs.length + " parentID=" + parentID);
while|while
condition|(
literal|true
condition|)
block|{
name|assertTrue
argument_list|(
name|resultUpto
operator|<
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parentID
operator|.
name|equals
argument_list|(
name|r
operator|.
name|document
argument_list|(
name|hits
index|[
name|resultUpto
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"parentID"
argument_list|)
argument_list|)
condition|)
block|{
break|break;
block|}
name|resultUpto
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testMultiChildTypes
specifier|public
name|void
name|testMultiChildTypes
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|,
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Document
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<
name|Document
argument_list|>
argument_list|()
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeJob
argument_list|(
literal|"java"
argument_list|,
literal|2007
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeJob
argument_list|(
literal|"python"
argument_list|,
literal|2010
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeQualification
argument_list|(
literal|"maths"
argument_list|,
literal|1999
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeResume
argument_list|(
literal|"Lisa"
argument_list|,
literal|"United Kingdom"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocuments
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
comment|// Create a filter that defines "parent" documents in the index - in this case resumes
name|Filter
name|parentsFilter
init|=
operator|new
name|CachingWrapperFilter
argument_list|(
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"docType"
argument_list|,
literal|"resume"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Define child document criteria (finds an example of relevant work experience)
name|BooleanQuery
name|childJobQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|childJobQuery
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"skill"
argument_list|,
literal|"java"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|childJobQuery
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|NumericRangeQuery
operator|.
name|newIntRange
argument_list|(
literal|"year"
argument_list|,
literal|2006
argument_list|,
literal|2011
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|childQualificationQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|childQualificationQuery
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"qualification"
argument_list|,
literal|"maths"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|childQualificationQuery
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|NumericRangeQuery
operator|.
name|newIntRange
argument_list|(
literal|"year"
argument_list|,
literal|1980
argument_list|,
literal|2000
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
comment|// Define parent document criteria (find a resident in the UK)
name|Query
name|parentQuery
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"country"
argument_list|,
literal|"United Kingdom"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Wrap the child document query to 'join' any matches
comment|// up to corresponding parent:
name|BlockJoinQuery
name|childJobJoinQuery
init|=
operator|new
name|BlockJoinQuery
argument_list|(
name|childJobQuery
argument_list|,
name|parentsFilter
argument_list|,
name|BlockJoinQuery
operator|.
name|ScoreMode
operator|.
name|Avg
argument_list|)
decl_stmt|;
name|BlockJoinQuery
name|childQualificationJoinQuery
init|=
operator|new
name|BlockJoinQuery
argument_list|(
name|childQualificationQuery
argument_list|,
name|parentsFilter
argument_list|,
name|BlockJoinQuery
operator|.
name|ScoreMode
operator|.
name|Avg
argument_list|)
decl_stmt|;
comment|// Combine the parent and nested child queries into a single query for a candidate
name|BooleanQuery
name|fullQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|fullQuery
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|parentQuery
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|fullQuery
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|childJobJoinQuery
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|fullQuery
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|childQualificationJoinQuery
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
comment|//????? How do I control volume of jobs vs qualifications per parent?
name|BlockJoinCollector
name|c
init|=
operator|new
name|BlockJoinCollector
argument_list|(
name|Sort
operator|.
name|RELEVANCE
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|s
operator|.
name|search
argument_list|(
name|fullQuery
argument_list|,
name|c
argument_list|)
expr_stmt|;
comment|//Examine "Job" children
name|boolean
name|showNullPointerIssue
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|showNullPointerIssue
condition|)
block|{
name|TopGroups
argument_list|<
name|Integer
argument_list|>
name|jobResults
init|=
name|c
operator|.
name|getTopGroups
argument_list|(
name|childJobJoinQuery
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|//assertEquals(1, results.totalHitCount);
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jobResults
operator|.
name|totalGroupedHitCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jobResults
operator|.
name|groups
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|GroupDocs
argument_list|<
name|Integer
argument_list|>
name|group
init|=
name|jobResults
operator|.
name|groups
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|group
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|Document
name|childJobDoc
init|=
name|s
operator|.
name|doc
argument_list|(
name|group
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
comment|//System.out.println("  doc=" + group.scoreDocs[0].doc);
name|assertEquals
argument_list|(
literal|"java"
argument_list|,
name|childJobDoc
operator|.
name|get
argument_list|(
literal|"skill"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|group
operator|.
name|groupValue
argument_list|)
expr_stmt|;
name|Document
name|parentDoc
init|=
name|s
operator|.
name|doc
argument_list|(
name|group
operator|.
name|groupValue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Lisa"
argument_list|,
name|parentDoc
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Now Examine qualification children
name|TopGroups
argument_list|<
name|Integer
argument_list|>
name|qualificationResults
init|=
name|c
operator|.
name|getTopGroups
argument_list|(
name|childQualificationJoinQuery
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|//!!!!! This next line can null pointer - but only if prior "jobs" section called first
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qualificationResults
operator|.
name|totalGroupedHitCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qualificationResults
operator|.
name|groups
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|GroupDocs
argument_list|<
name|Integer
argument_list|>
name|qGroup
init|=
name|qualificationResults
operator|.
name|groups
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qGroup
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|Document
name|childQualificationDoc
init|=
name|s
operator|.
name|doc
argument_list|(
name|qGroup
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"maths"
argument_list|,
name|childQualificationDoc
operator|.
name|get
argument_list|(
literal|"qualification"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|qGroup
operator|.
name|groupValue
argument_list|)
expr_stmt|;
name|Document
name|parentDoc
init|=
name|s
operator|.
name|doc
argument_list|(
name|qGroup
operator|.
name|groupValue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Lisa"
argument_list|,
name|parentDoc
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testAdvanceSingleParentSingleChild
specifier|public
name|void
name|testAdvanceSingleParentSingleChild
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|childDoc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|childDoc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"child"
argument_list|,
literal|"1"
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|parentDoc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|parentDoc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"parent"
argument_list|,
literal|"1"
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocuments
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Document
index|[]
block|{
name|childDoc
block|,
name|parentDoc
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Query
name|tq
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"child"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
name|Filter
name|parentFilter
init|=
operator|new
name|CachingWrapperFilter
argument_list|(
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"parent"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|BlockJoinQuery
name|q
init|=
operator|new
name|BlockJoinQuery
argument_list|(
name|tq
argument_list|,
name|parentFilter
argument_list|,
name|BlockJoinQuery
operator|.
name|ScoreMode
operator|.
name|Avg
argument_list|)
decl_stmt|;
name|Weight
name|weight
init|=
name|s
operator|.
name|createNormalizedWeight
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|DocIdSetIterator
name|disi
init|=
name|weight
operator|.
name|scorer
argument_list|(
name|ReaderUtil
operator|.
name|leaves
argument_list|(
name|s
operator|.
name|getIndexReader
argument_list|()
operator|.
name|getTopReaderContext
argument_list|()
argument_list|)
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|disi
operator|.
name|advance
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testAdvanceSingleParentNoChild
specifier|public
name|void
name|testAdvanceSingleParentNoChild
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
operator|new
name|LogDocMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|parentDoc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|parentDoc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"parent"
argument_list|,
literal|"1"
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|parentDoc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"isparent"
argument_list|,
literal|"yes"
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocuments
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Document
index|[]
block|{
name|parentDoc
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add another doc so scorer is not null
name|parentDoc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|parentDoc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"parent"
argument_list|,
literal|"2"
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|parentDoc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"isparent"
argument_list|,
literal|"yes"
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|childDoc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|childDoc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"child"
argument_list|,
literal|"2"
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocuments
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Document
index|[]
block|{
name|childDoc
block|,
name|parentDoc
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// Need single seg:
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Query
name|tq
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"child"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
decl_stmt|;
name|Filter
name|parentFilter
init|=
operator|new
name|CachingWrapperFilter
argument_list|(
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"isparent"
argument_list|,
literal|"yes"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|BlockJoinQuery
name|q
init|=
operator|new
name|BlockJoinQuery
argument_list|(
name|tq
argument_list|,
name|parentFilter
argument_list|,
name|BlockJoinQuery
operator|.
name|ScoreMode
operator|.
name|Avg
argument_list|)
decl_stmt|;
name|Weight
name|weight
init|=
name|s
operator|.
name|createNormalizedWeight
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|DocIdSetIterator
name|disi
init|=
name|weight
operator|.
name|scorer
argument_list|(
name|ReaderUtil
operator|.
name|leaves
argument_list|(
name|s
operator|.
name|getIndexReader
argument_list|()
operator|.
name|getTopReaderContext
argument_list|()
argument_list|)
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|disi
operator|.
name|advance
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
