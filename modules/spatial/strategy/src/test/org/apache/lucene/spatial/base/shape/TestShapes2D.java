begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.base.shape
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|context
operator|.
name|SpatialContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|context
operator|.
name|simple
operator|.
name|SimpleSpatialContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|distance
operator|.
name|DistanceUnits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|SpatialRelation
operator|.
name|*
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import
begin_comment
comment|/**  * @author dsmiley  */
end_comment
begin_class
DECL|class|TestShapes2D
specifier|public
class|class
name|TestShapes2D
extends|extends
name|AbstractTestShapes
block|{
annotation|@
name|Override
DECL|method|getContext
specifier|protected
name|SpatialContext
name|getContext
parameter_list|()
block|{
return|return
operator|new
name|SimpleSpatialContext
argument_list|(
name|DistanceUnits
operator|.
name|CARTESIAN
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testSimplePoint
specifier|public
name|void
name|testSimplePoint
parameter_list|()
block|{
name|Point
name|pt
init|=
name|ctx
operator|.
name|makePoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
name|pt
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//test equals& hashcode
name|Point
name|pt2
init|=
name|ctx
operator|.
name|makePoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|pt
argument_list|,
name|pt2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|pt
operator|.
name|hashCode
argument_list|()
argument_list|,
name|pt2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|msg
argument_list|,
name|pt
operator|.
name|hasArea
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|pt
operator|.
name|getCenter
argument_list|()
argument_list|,
name|pt
argument_list|)
expr_stmt|;
name|Rectangle
name|bbox
init|=
name|pt
operator|.
name|getBoundingBox
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|msg
argument_list|,
name|bbox
operator|.
name|hasArea
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|pt
argument_list|,
name|bbox
operator|.
name|getCenter
argument_list|()
argument_list|)
expr_stmt|;
name|assertRelation
argument_list|(
name|msg
argument_list|,
name|CONTAINS
argument_list|,
name|pt
argument_list|,
name|pt2
argument_list|)
expr_stmt|;
name|assertRelation
argument_list|(
name|msg
argument_list|,
name|DISJOINT
argument_list|,
name|pt
argument_list|,
name|ctx
operator|.
name|makePoint
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertRelation
argument_list|(
name|msg
argument_list|,
name|DISJOINT
argument_list|,
name|pt
argument_list|,
name|ctx
operator|.
name|makePoint
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertRelation
argument_list|(
name|msg
argument_list|,
name|DISJOINT
argument_list|,
name|pt
argument_list|,
name|ctx
operator|.
name|makePoint
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleRectangle
specifier|public
name|void
name|testSimpleRectangle
parameter_list|()
block|{
name|double
index|[]
name|minXs
init|=
operator|new
name|double
index|[]
block|{
operator|-
literal|1000
block|,
operator|-
literal|360
block|,
operator|-
literal|180
block|,
operator|-
literal|20
block|,
literal|0
block|,
literal|20
block|,
literal|180
block|,
literal|1000
block|}
decl_stmt|;
for|for
control|(
name|double
name|minX
range|:
name|minXs
control|)
block|{
name|double
index|[]
name|widths
init|=
operator|new
name|double
index|[]
block|{
literal|0
block|,
literal|10
block|,
literal|180
block|,
literal|360
block|,
literal|400
block|}
decl_stmt|;
for|for
control|(
name|double
name|width
range|:
name|widths
control|)
block|{
name|testRectangle
argument_list|(
name|minX
argument_list|,
name|width
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testRectangle
argument_list|(
name|minX
argument_list|,
name|width
argument_list|,
operator|-
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|testRectangle
argument_list|(
name|minX
argument_list|,
name|width
argument_list|,
literal|5
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
name|testRectIntersect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleCircle
specifier|public
name|void
name|testSimpleCircle
parameter_list|()
block|{
name|double
index|[]
name|theXs
init|=
operator|new
name|double
index|[]
block|{
operator|-
literal|10
block|,
literal|0
block|,
literal|10
block|}
decl_stmt|;
for|for
control|(
name|double
name|x
range|:
name|theXs
control|)
block|{
name|double
index|[]
name|theYs
init|=
operator|new
name|double
index|[]
block|{
operator|-
literal|20
block|,
literal|0
block|,
literal|20
block|}
decl_stmt|;
for|for
control|(
name|double
name|y
range|:
name|theYs
control|)
block|{
name|testCircle
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testCircle
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
comment|//INTERSECTION:
comment|//Start with some static tests that have shown to cause failures at some point:
name|assertEquals
argument_list|(
literal|"getX not getY"
argument_list|,
name|INTERSECTS
argument_list|,
name|ctx
operator|.
name|makeCircle
argument_list|(
literal|107
argument_list|,
operator|-
literal|81
argument_list|,
literal|147
argument_list|)
operator|.
name|relate
argument_list|(
name|ctx
operator|.
name|makeRect
argument_list|(
literal|92
argument_list|,
literal|121
argument_list|,
operator|-
literal|89
argument_list|,
literal|74
argument_list|)
argument_list|,
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|testCircleIntersect
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
