begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.base.distance
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|distance
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|context
operator|.
name|SpatialContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|context
operator|.
name|simple
operator|.
name|SimpleSpatialContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|Point
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|Rectangle
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|SpatialRelation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|TestDistances
specifier|public
class|class
name|TestDistances
extends|extends
name|LuceneTestCase
block|{
comment|//NOTE!  These are sometimes modified by tests.
DECL|field|ctx
specifier|private
name|SpatialContext
name|ctx
decl_stmt|;
DECL|field|EPS
specifier|private
name|double
name|EPS
decl_stmt|;
annotation|@
name|Before
DECL|method|beforeTest
specifier|public
name|void
name|beforeTest
parameter_list|()
block|{
name|ctx
operator|=
operator|new
name|SimpleSpatialContext
argument_list|(
name|DistanceUnits
operator|.
name|KILOMETERS
argument_list|)
expr_stmt|;
name|EPS
operator|=
literal|10e-4
expr_stmt|;
comment|//delta when doing double assertions. Geo eps is not that small.
block|}
DECL|method|dc
specifier|private
name|DistanceCalculator
name|dc
parameter_list|()
block|{
return|return
name|ctx
operator|.
name|getDistCalc
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testSomeDistances
specifier|public
name|void
name|testSomeDistances
parameter_list|()
block|{
comment|//See to verify: from http://www.movable-type.co.uk/scripts/latlong.html
name|Point
name|ctr
init|=
name|pLL
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|11100
argument_list|,
name|dc
argument_list|()
operator|.
name|distance
argument_list|(
name|ctr
argument_list|,
name|pLL
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11100
argument_list|,
name|dc
argument_list|()
operator|.
name|distance
argument_list|(
name|ctr
argument_list|,
name|pLL
argument_list|(
literal|10
argument_list|,
operator|-
literal|160
argument_list|)
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|314.40338
argument_list|,
name|dc
argument_list|()
operator|.
name|distance
argument_list|(
name|pLL
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|pLL
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|,
name|EPS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCalcBoxByDistFromPt
specifier|public
name|void
name|testCalcBoxByDistFromPt
parameter_list|()
block|{
comment|//first test regression
block|{
name|double
name|d
init|=
literal|6894.1
decl_stmt|;
name|Point
name|pCtr
init|=
name|pLL
argument_list|(
operator|-
literal|20
argument_list|,
literal|84
argument_list|)
decl_stmt|;
name|Point
name|pTgt
init|=
name|pLL
argument_list|(
operator|-
literal|42
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dc
argument_list|()
operator|.
name|distance
argument_list|(
name|pCtr
argument_list|,
name|pTgt
argument_list|)
operator|<
name|d
argument_list|)
expr_stmt|;
comment|//since the pairwise distance is less than d, a bounding box from ctr with d should contain pTgt.
name|Rectangle
name|r
init|=
name|dc
argument_list|()
operator|.
name|calcBoxByDistFromPt
argument_list|(
name|pCtr
argument_list|,
name|d
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SpatialRelation
operator|.
name|CONTAINS
argument_list|,
name|r
operator|.
name|relate
argument_list|(
name|pTgt
argument_list|,
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|checkBBox
argument_list|(
name|pCtr
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"0 dist, horiz line"
argument_list|,
operator|-
literal|45
argument_list|,
name|dc
argument_list|()
operator|.
name|calcBoxByDistFromPtHorizAxis
argument_list|(
name|ctx
operator|.
name|makePoint
argument_list|(
operator|-
literal|180
argument_list|,
operator|-
literal|45
argument_list|)
argument_list|,
literal|0
argument_list|,
name|ctx
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|double
name|MAXDIST
init|=
name|ctx
operator|.
name|getUnits
argument_list|()
operator|.
name|earthCircumference
argument_list|()
operator|/
literal|2
decl_stmt|;
name|checkBBox
argument_list|(
name|ctx
operator|.
name|makePoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|MAXDIST
argument_list|)
expr_stmt|;
name|checkBBox
argument_list|(
name|ctx
operator|.
name|makePoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|MAXDIST
operator|*
literal|0.999999
argument_list|)
expr_stmt|;
name|checkBBox
argument_list|(
name|ctx
operator|.
name|makePoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkBBox
argument_list|(
name|ctx
operator|.
name|makePoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0.000001
argument_list|)
expr_stmt|;
name|checkBBox
argument_list|(
name|ctx
operator|.
name|makePoint
argument_list|(
literal|0
argument_list|,
literal|90
argument_list|)
argument_list|,
literal|0.000001
argument_list|)
expr_stmt|;
name|checkBBox
argument_list|(
name|ctx
operator|.
name|makePoint
argument_list|(
operator|-
literal|32.7
argument_list|,
operator|-
literal|5.42
argument_list|)
argument_list|,
literal|9829
argument_list|)
expr_stmt|;
name|checkBBox
argument_list|(
name|ctx
operator|.
name|makePoint
argument_list|(
literal|0
argument_list|,
literal|90
operator|-
literal|20
argument_list|)
argument_list|,
name|ctx
operator|.
name|getDistCalc
argument_list|()
operator|.
name|degreesToDistance
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|double
name|d
init|=
literal|0.010
decl_stmt|;
comment|//10m
name|checkBBox
argument_list|(
name|ctx
operator|.
name|makePoint
argument_list|(
literal|0
argument_list|,
literal|90
operator|-
name|ctx
operator|.
name|getDistCalc
argument_list|()
operator|.
name|distanceToDegrees
argument_list|(
name|d
operator|+
literal|0.001
argument_list|)
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|T
init|=
literal|0
init|;
name|T
operator|<
literal|100
condition|;
name|T
operator|++
control|)
block|{
name|double
name|lat
init|=
operator|-
literal|90
operator|+
name|random
operator|.
name|nextDouble
argument_list|()
operator|*
literal|180
decl_stmt|;
name|double
name|lon
init|=
operator|-
literal|180
operator|+
name|random
operator|.
name|nextDouble
argument_list|()
operator|*
literal|360
decl_stmt|;
name|Point
name|ctr
init|=
name|ctx
operator|.
name|makePoint
argument_list|(
name|lon
argument_list|,
name|lat
argument_list|)
decl_stmt|;
name|double
name|dist
init|=
name|MAXDIST
operator|*
name|random
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|checkBBox
argument_list|(
name|ctr
argument_list|,
name|dist
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkBBox
specifier|private
name|void
name|checkBBox
parameter_list|(
name|Point
name|ctr
parameter_list|,
name|double
name|dist
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"ctr: "
operator|+
name|ctr
operator|+
literal|" dist: "
operator|+
name|dist
decl_stmt|;
name|Rectangle
name|r
init|=
name|dc
argument_list|()
operator|.
name|calcBoxByDistFromPt
argument_list|(
name|ctr
argument_list|,
name|dist
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
name|double
name|horizAxisLat
init|=
name|dc
argument_list|()
operator|.
name|calcBoxByDistFromPtHorizAxis
argument_list|(
name|ctr
argument_list|,
name|dist
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Double
operator|.
name|isNaN
argument_list|(
name|horizAxisLat
argument_list|)
condition|)
name|assertTrue
argument_list|(
name|r
operator|.
name|relate_yRange
argument_list|(
name|horizAxisLat
argument_list|,
name|horizAxisLat
argument_list|,
name|ctx
argument_list|)
operator|.
name|intersects
argument_list|()
argument_list|)
expr_stmt|;
comment|//horizontal
if|if
condition|(
name|r
operator|.
name|getWidth
argument_list|()
operator|>=
literal|180
condition|)
block|{
name|double
name|calcDist
init|=
name|dc
argument_list|()
operator|.
name|distance
argument_list|(
name|ctr
argument_list|,
name|r
operator|.
name|getMinX
argument_list|()
argument_list|,
name|r
operator|.
name|getMaxY
argument_list|()
operator|==
literal|90
condition|?
literal|90
else|:
operator|-
literal|90
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|calcDist
operator|<=
name|dist
operator|+
name|EPS
argument_list|)
expr_stmt|;
comment|//horizAxisLat is meaningless in this context
block|}
else|else
block|{
name|Point
name|tPt
init|=
name|findClosestPointOnVertToPoint
argument_list|(
name|r
operator|.
name|getMinX
argument_list|()
argument_list|,
name|r
operator|.
name|getMinY
argument_list|()
argument_list|,
name|r
operator|.
name|getMaxY
argument_list|()
argument_list|,
name|ctr
argument_list|)
decl_stmt|;
name|double
name|calcDist
init|=
name|dc
argument_list|()
operator|.
name|distance
argument_list|(
name|ctr
argument_list|,
name|tPt
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|dist
argument_list|,
name|calcDist
argument_list|,
name|EPS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|tPt
operator|.
name|getY
argument_list|()
argument_list|,
name|horizAxisLat
argument_list|,
name|EPS
argument_list|)
expr_stmt|;
block|}
comment|//vertical
name|double
name|topDist
init|=
name|dc
argument_list|()
operator|.
name|distance
argument_list|(
name|ctr
argument_list|,
name|ctr
operator|.
name|getX
argument_list|()
argument_list|,
name|r
operator|.
name|getMaxY
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getMaxY
argument_list|()
operator|==
literal|90
condition|)
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|topDist
operator|<=
name|dist
operator|+
name|EPS
argument_list|)
expr_stmt|;
else|else
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|dist
argument_list|,
name|topDist
argument_list|,
name|EPS
argument_list|)
expr_stmt|;
name|double
name|botDist
init|=
name|dc
argument_list|()
operator|.
name|distance
argument_list|(
name|ctr
argument_list|,
name|ctr
operator|.
name|getX
argument_list|()
argument_list|,
name|r
operator|.
name|getMinY
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getMinY
argument_list|()
operator|==
operator|-
literal|90
condition|)
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|botDist
operator|<=
name|dist
operator|+
name|EPS
argument_list|)
expr_stmt|;
else|else
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|dist
argument_list|,
name|botDist
argument_list|,
name|EPS
argument_list|)
expr_stmt|;
block|}
DECL|method|findClosestPointOnVertToPoint
specifier|private
name|Point
name|findClosestPointOnVertToPoint
parameter_list|(
name|double
name|lon
parameter_list|,
name|double
name|lowLat
parameter_list|,
name|double
name|highLat
parameter_list|,
name|Point
name|ctr
parameter_list|)
block|{
comment|//A binary search algorithm to find the point along the vertical lon between lowLat& highLat that is closest
comment|// to ctr, and returns the distance.
name|double
name|midLat
init|=
operator|(
name|highLat
operator|-
name|lowLat
operator|)
operator|/
literal|2
operator|+
name|lowLat
decl_stmt|;
name|double
name|midLatDist
init|=
name|ctx
operator|.
name|getDistCalc
argument_list|()
operator|.
name|distance
argument_list|(
name|ctr
argument_list|,
name|lon
argument_list|,
name|midLat
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|L
init|=
literal|0
init|;
name|L
operator|<
literal|100
operator|&&
operator|(
name|highLat
operator|-
name|lowLat
operator|>
literal|0.001
operator|||
name|L
operator|<
literal|20
operator|)
condition|;
name|L
operator|++
control|)
block|{
name|boolean
name|bottom
init|=
operator|(
name|midLat
operator|-
name|lowLat
operator|>
name|highLat
operator|-
name|midLat
operator|)
decl_stmt|;
name|double
name|newMid
init|=
name|bottom
condition|?
operator|(
name|midLat
operator|-
name|lowLat
operator|)
operator|/
literal|2
operator|+
name|lowLat
else|:
operator|(
name|highLat
operator|-
name|midLat
operator|)
operator|/
literal|2
operator|+
name|midLat
decl_stmt|;
name|double
name|newMidDist
init|=
name|ctx
operator|.
name|getDistCalc
argument_list|()
operator|.
name|distance
argument_list|(
name|ctr
argument_list|,
name|lon
argument_list|,
name|newMid
argument_list|)
decl_stmt|;
if|if
condition|(
name|newMidDist
operator|<
name|midLatDist
condition|)
block|{
if|if
condition|(
name|bottom
condition|)
block|{
name|highLat
operator|=
name|midLat
expr_stmt|;
block|}
else|else
block|{
name|lowLat
operator|=
name|midLat
expr_stmt|;
block|}
name|midLat
operator|=
name|newMid
expr_stmt|;
name|midLatDist
operator|=
name|newMidDist
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|bottom
condition|)
block|{
name|lowLat
operator|=
name|newMid
expr_stmt|;
block|}
else|else
block|{
name|highLat
operator|=
name|newMid
expr_stmt|;
block|}
block|}
block|}
return|return
name|ctx
operator|.
name|makePoint
argument_list|(
name|lon
argument_list|,
name|midLat
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testDistCalcPointOnBearing_cartesian
specifier|public
name|void
name|testDistCalcPointOnBearing_cartesian
parameter_list|()
block|{
name|ctx
operator|=
operator|new
name|SimpleSpatialContext
argument_list|(
name|DistanceUnits
operator|.
name|CARTESIAN
argument_list|)
expr_stmt|;
name|EPS
operator|=
literal|10e-6
expr_stmt|;
comment|//tighter epsilon (aka delta)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|testDistCalcPointOnBearing
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDistCalcPointOnBearing_geo
specifier|public
name|void
name|testDistCalcPointOnBearing_geo
parameter_list|()
block|{
comment|//The haversine formula has a higher error if the points are near antipodal. We adjust EPS tolerance for this case.
comment|//TODO Eventually we should add the Vincenty formula for improved accuracy, or try some other cleverness.
comment|//test known high delta
comment|//    {
comment|//      Point c = ctx.makePoint(-103,-79);
comment|//      double angRAD = Math.toRadians(236);
comment|//      double dist = 20025;
comment|//      Point p2 = dc().pointOnBearingRAD(c, dist, angRAD, ctx);
comment|//      //Pt(x=76.61200011750923,y=79.04946929870962)
comment|//      double calcDist = dc().distance(c, p2);
comment|//      assertEqualsRatio(dist, calcDist);
comment|//    }
name|double
name|maxDist
init|=
name|ctx
operator|.
name|getUnits
argument_list|()
operator|.
name|earthCircumference
argument_list|()
operator|/
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|int
name|dist
init|=
name|random
operator|.
name|nextInt
argument_list|(
operator|(
name|int
operator|)
name|maxDist
argument_list|)
decl_stmt|;
name|EPS
operator|=
operator|(
name|dist
operator|<
name|maxDist
operator|*
literal|0.75
condition|?
literal|10e-6
else|:
literal|10e-3
operator|)
expr_stmt|;
name|testDistCalcPointOnBearing
argument_list|(
name|dist
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDistCalcPointOnBearing
specifier|private
name|void
name|testDistCalcPointOnBearing
parameter_list|(
name|double
name|dist
parameter_list|)
block|{
for|for
control|(
name|int
name|angDEG
init|=
literal|0
init|;
name|angDEG
operator|<
literal|360
condition|;
name|angDEG
operator|+=
name|random
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
operator|+
literal|1
control|)
block|{
name|Point
name|c
init|=
name|ctx
operator|.
name|makePoint
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|360
argument_list|)
argument_list|,
operator|-
literal|90
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|181
argument_list|)
argument_list|)
decl_stmt|;
comment|//0 distance means same point
name|Point
name|p2
init|=
name|dc
argument_list|()
operator|.
name|pointOnBearing
argument_list|(
name|c
argument_list|,
literal|0
argument_list|,
name|angDEG
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|c
argument_list|,
name|p2
argument_list|)
expr_stmt|;
name|p2
operator|=
name|dc
argument_list|()
operator|.
name|pointOnBearing
argument_list|(
name|c
argument_list|,
name|dist
argument_list|,
name|angDEG
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|double
name|calcDist
init|=
name|dc
argument_list|()
operator|.
name|distance
argument_list|(
name|c
argument_list|,
name|p2
argument_list|)
decl_stmt|;
name|assertEqualsRatio
argument_list|(
name|dist
argument_list|,
name|calcDist
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertEqualsRatio
specifier|private
name|void
name|assertEqualsRatio
parameter_list|(
name|double
name|expected
parameter_list|,
name|double
name|actual
parameter_list|)
block|{
name|double
name|delta
init|=
name|Math
operator|.
name|abs
argument_list|(
name|actual
operator|-
name|expected
argument_list|)
decl_stmt|;
name|double
name|base
init|=
name|Math
operator|.
name|min
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
decl_stmt|;
name|double
name|deltaRatio
init|=
name|base
operator|==
literal|0
condition|?
name|delta
else|:
name|Math
operator|.
name|min
argument_list|(
name|delta
argument_list|,
name|delta
operator|/
name|base
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|deltaRatio
argument_list|,
name|EPS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNormLat
specifier|public
name|void
name|testNormLat
parameter_list|()
block|{
name|double
index|[]
index|[]
name|lats
init|=
operator|new
name|double
index|[]
index|[]
block|{
block|{
literal|1.23
block|,
literal|1.23
block|}
block|,
comment|//1.23 might become 1.2299999 after some math and we want to ensure that doesn't happen
block|{
operator|-
literal|90
block|,
operator|-
literal|90
block|}
block|,
block|{
literal|90
block|,
literal|90
block|}
block|,
block|{
literal|0
block|,
literal|0
block|}
block|,
block|{
operator|-
literal|100
block|,
operator|-
literal|80
block|}
block|,
block|{
operator|-
literal|90
operator|-
literal|180
block|,
literal|90
block|}
block|,
block|{
operator|-
literal|90
operator|-
literal|360
block|,
operator|-
literal|90
block|}
block|,
block|{
literal|90
operator|+
literal|180
block|,
operator|-
literal|90
block|}
block|,
block|{
literal|90
operator|+
literal|360
block|,
literal|90
block|}
block|,
block|{
operator|-
literal|12
operator|+
literal|180
block|,
literal|12
block|}
block|}
decl_stmt|;
for|for
control|(
name|double
index|[]
name|pair
range|:
name|lats
control|)
block|{
name|assertEquals
argument_list|(
literal|"input "
operator|+
name|pair
index|[
literal|0
index|]
argument_list|,
name|pair
index|[
literal|1
index|]
argument_list|,
name|ctx
operator|.
name|normY
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
operator|-
literal|1000
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|+=
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|*
literal|10
control|)
block|{
name|double
name|d
init|=
name|ctx
operator|.
name|normY
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i
operator|+
literal|" "
operator|+
name|d
argument_list|,
name|d
operator|>=
operator|-
literal|90
operator|&&
name|d
operator|<=
literal|90
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNormLon
specifier|public
name|void
name|testNormLon
parameter_list|()
block|{
name|double
index|[]
index|[]
name|lons
init|=
operator|new
name|double
index|[]
index|[]
block|{
block|{
literal|1.23
block|,
literal|1.23
block|}
block|,
comment|//1.23 might become 1.2299999 after some math and we want to ensure that doesn't happen
block|{
operator|-
literal|180
block|,
operator|-
literal|180
block|}
block|,
block|{
literal|180
block|,
operator|-
literal|180
block|}
block|,
block|{
literal|0
block|,
literal|0
block|}
block|,
block|{
operator|-
literal|190
block|,
literal|170
block|}
block|,
block|{
operator|-
literal|180
operator|-
literal|360
block|,
operator|-
literal|180
block|}
block|,
block|{
operator|-
literal|180
operator|-
literal|720
block|,
operator|-
literal|180
block|}
block|,
block|{
literal|180
operator|+
literal|360
block|,
operator|-
literal|180
block|}
block|,
block|{
literal|180
operator|+
literal|720
block|,
operator|-
literal|180
block|}
block|}
decl_stmt|;
for|for
control|(
name|double
index|[]
name|pair
range|:
name|lons
control|)
block|{
name|assertEquals
argument_list|(
literal|"input "
operator|+
name|pair
index|[
literal|0
index|]
argument_list|,
name|pair
index|[
literal|1
index|]
argument_list|,
name|ctx
operator|.
name|normX
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
operator|-
literal|1000
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|+=
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|*
literal|10
control|)
block|{
name|double
name|d
init|=
name|ctx
operator|.
name|normX
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i
operator|+
literal|" "
operator|+
name|d
argument_list|,
name|d
operator|>=
operator|-
literal|180
operator|&&
name|d
operator|<
literal|180
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDistToRadians
specifier|public
name|void
name|testDistToRadians
parameter_list|()
block|{
name|assertDistToRadians
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertDistToRadians
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|assertDistToRadians
argument_list|(
name|ctx
operator|.
name|getUnits
argument_list|()
operator|.
name|earthRadius
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDistToRadians
specifier|private
name|void
name|assertDistToRadians
parameter_list|(
name|double
name|dist
parameter_list|)
block|{
name|double
name|radius
init|=
name|ctx
operator|.
name|getUnits
argument_list|()
operator|.
name|earthRadius
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|DistanceUtils
operator|.
name|pointOnBearingRAD
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|DistanceUtils
operator|.
name|dist2Radians
argument_list|(
name|dist
argument_list|,
name|radius
argument_list|)
argument_list|,
name|DistanceUtils
operator|.
name|DEG_90_AS_RADS
argument_list|,
literal|null
argument_list|)
index|[
literal|1
index|]
argument_list|,
name|DistanceUtils
operator|.
name|dist2Radians
argument_list|(
name|dist
argument_list|,
name|radius
argument_list|)
argument_list|,
literal|10e-5
argument_list|)
expr_stmt|;
block|}
DECL|method|pLL
specifier|private
name|Point
name|pLL
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
block|{
return|return
name|ctx
operator|.
name|makePoint
argument_list|(
name|lon
argument_list|,
name|lat
argument_list|)
return|;
block|}
block|}
end_class
end_unit
