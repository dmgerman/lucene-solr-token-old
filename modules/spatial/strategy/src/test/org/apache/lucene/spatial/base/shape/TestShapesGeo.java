begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.base.shape
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|context
operator|.
name|SpatialContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|context
operator|.
name|simple
operator|.
name|SimpleSpatialContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|distance
operator|.
name|DistanceCalculator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|distance
operator|.
name|DistanceUnits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|distance
operator|.
name|GeodesicSphereDistCalc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|SpatialRelation
operator|.
name|*
import|;
end_import
begin_class
DECL|class|TestShapesGeo
specifier|public
class|class
name|TestShapesGeo
extends|extends
name|AbstractTestShapes
block|{
annotation|@
name|Test
DECL|method|testGeoRectangle
specifier|public
name|void
name|testGeoRectangle
parameter_list|()
block|{
name|double
index|[]
name|lons
init|=
operator|new
name|double
index|[]
block|{
literal|0
block|,
literal|45
block|,
literal|160
block|,
literal|180
block|,
operator|-
literal|45
block|,
operator|-
literal|175
block|,
operator|-
literal|180
block|}
decl_stmt|;
comment|//minX
for|for
control|(
name|double
name|lon
range|:
name|lons
control|)
block|{
name|double
index|[]
name|lonWs
init|=
operator|new
name|double
index|[]
block|{
literal|0
block|,
literal|20
block|,
literal|180
block|,
literal|200
block|,
literal|355
block|,
literal|360
block|}
decl_stmt|;
comment|//width
for|for
control|(
name|double
name|lonW
range|:
name|lonWs
control|)
block|{
name|testRectangle
argument_list|(
name|lon
argument_list|,
name|lonW
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testRectangle
argument_list|(
name|lon
argument_list|,
name|lonW
argument_list|,
operator|-
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|testRectangle
argument_list|(
name|lon
argument_list|,
name|lonW
argument_list|,
literal|80
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|//polar cap
name|testRectangle
argument_list|(
name|lon
argument_list|,
name|lonW
argument_list|,
operator|-
literal|90
argument_list|,
literal|180
argument_list|)
expr_stmt|;
comment|//full lat range
block|}
block|}
comment|//Test geo rectangle intersections
name|testRectIntersect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoCircle
specifier|public
name|void
name|testGeoCircle
parameter_list|()
block|{
comment|//--Start with some static tests that once failed:
comment|//Bug: numeric edge at pole, fails to init
name|ctx
operator|.
name|makeCircle
argument_list|(
literal|110
argument_list|,
operator|-
literal|12
argument_list|,
name|ctx
operator|.
name|getDistCalc
argument_list|()
operator|.
name|degreesToDistance
argument_list|(
literal|90
operator|+
literal|12
argument_list|)
argument_list|)
expr_stmt|;
comment|//Bug: horizXAxis not in enclosing rectangle, assertion
name|ctx
operator|.
name|makeCircle
argument_list|(
operator|-
literal|44
argument_list|,
literal|16
argument_list|,
name|degToDist
argument_list|(
literal|106
argument_list|)
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|makeCircle
argument_list|(
operator|-
literal|36
argument_list|,
operator|-
literal|76
argument_list|,
name|degToDist
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|makeCircle
argument_list|(
literal|107
argument_list|,
literal|82
argument_list|,
name|degToDist
argument_list|(
literal|172
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO need to update this test to be valid
comment|//    {
comment|//      //Bug in which distance was being confused as being in the same coordinate system as x,y.
comment|//      double distDeltaToPole = 0.001;//1m
comment|//      double distDeltaToPoleDEG = ctx.getDistCalc().distanceToDegrees(distDeltaToPole);
comment|//      double dist = 1;//1km
comment|//      double distDEG = ctx.getDistCalc().distanceToDegrees(dist);
comment|//      Circle c = ctx.makeCircle(0,90-distDeltaToPoleDEG-distDEG,dist);
comment|//      Rectangle cBBox = c.getBoundingBox();
comment|//      Rectangle r = ctx.makeRect(cBBox.getMaxX()*0.99,cBBox.getMaxX()+1,c.getCenter().getY(),c.getCenter().getY());
comment|//      assertEquals(INTERSECTS,c.getBoundingBox().relate(r, ctx));
comment|//      assertEquals("dist != xy space",INTERSECTS,c.relate(r,ctx));//once failed here
comment|//    }
name|assertEquals
argument_list|(
literal|"wrong estimate"
argument_list|,
name|DISJOINT
argument_list|,
name|ctx
operator|.
name|makeCircle
argument_list|(
operator|-
literal|166
argument_list|,
literal|59
argument_list|,
literal|5226.2
argument_list|)
operator|.
name|relate
argument_list|(
name|ctx
operator|.
name|makeRect
argument_list|(
literal|36
argument_list|,
literal|66
argument_list|,
literal|23
argument_list|,
literal|23
argument_list|)
argument_list|,
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bad CONTAINS (dateline)"
argument_list|,
name|INTERSECTS
argument_list|,
name|ctx
operator|.
name|makeCircle
argument_list|(
literal|56
argument_list|,
operator|-
literal|50
argument_list|,
literal|12231.5
argument_list|)
operator|.
name|relate
argument_list|(
name|ctx
operator|.
name|makeRect
argument_list|(
literal|108
argument_list|,
literal|26
argument_list|,
literal|39
argument_list|,
literal|48
argument_list|)
argument_list|,
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bad CONTAINS (backwrap2)"
argument_list|,
name|INTERSECTS
argument_list|,
name|ctx
operator|.
name|makeCircle
argument_list|(
literal|112
argument_list|,
operator|-
literal|3
argument_list|,
name|degToDist
argument_list|(
literal|91
argument_list|)
argument_list|)
operator|.
name|relate
argument_list|(
name|ctx
operator|.
name|makeRect
argument_list|(
operator|-
literal|163
argument_list|,
literal|29
argument_list|,
operator|-
literal|38
argument_list|,
literal|10
argument_list|)
argument_list|,
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bad CONTAINS (r x-wrap)"
argument_list|,
name|INTERSECTS
argument_list|,
name|ctx
operator|.
name|makeCircle
argument_list|(
operator|-
literal|139
argument_list|,
literal|47
argument_list|,
name|degToDist
argument_list|(
literal|80
argument_list|)
argument_list|)
operator|.
name|relate
argument_list|(
name|ctx
operator|.
name|makeRect
argument_list|(
operator|-
literal|180
argument_list|,
literal|180
argument_list|,
operator|-
literal|3
argument_list|,
literal|12
argument_list|)
argument_list|,
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bad CONTAINS (pwrap)"
argument_list|,
name|INTERSECTS
argument_list|,
name|ctx
operator|.
name|makeCircle
argument_list|(
operator|-
literal|139
argument_list|,
literal|47
argument_list|,
name|degToDist
argument_list|(
literal|80
argument_list|)
argument_list|)
operator|.
name|relate
argument_list|(
name|ctx
operator|.
name|makeRect
argument_list|(
operator|-
literal|180
argument_list|,
literal|179
argument_list|,
operator|-
literal|3
argument_list|,
literal|12
argument_list|)
argument_list|,
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no-dist 1"
argument_list|,
name|WITHIN
argument_list|,
name|ctx
operator|.
name|makeCircle
argument_list|(
literal|135
argument_list|,
literal|21
argument_list|,
literal|0
argument_list|)
operator|.
name|relate
argument_list|(
name|ctx
operator|.
name|makeRect
argument_list|(
operator|-
literal|103
argument_list|,
operator|-
literal|154
argument_list|,
operator|-
literal|47
argument_list|,
literal|52
argument_list|)
argument_list|,
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bbox<=>= -90 bug"
argument_list|,
name|CONTAINS
argument_list|,
name|ctx
operator|.
name|makeCircle
argument_list|(
operator|-
literal|64
argument_list|,
operator|-
literal|84
argument_list|,
name|degToDist
argument_list|(
literal|124
argument_list|)
argument_list|)
operator|.
name|relate
argument_list|(
name|ctx
operator|.
name|makeRect
argument_list|(
operator|-
literal|96
argument_list|,
literal|96
argument_list|,
operator|-
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
argument_list|,
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
comment|//The horizontal axis line of a geo circle doesn't necessarily pass through c's ctr.
name|assertEquals
argument_list|(
literal|"c's horiz axis doesn't pass through ctr"
argument_list|,
name|INTERSECTS
argument_list|,
name|ctx
operator|.
name|makeCircle
argument_list|(
literal|71
argument_list|,
operator|-
literal|44
argument_list|,
name|degToDist
argument_list|(
literal|40
argument_list|)
argument_list|)
operator|.
name|relate
argument_list|(
name|ctx
operator|.
name|makeRect
argument_list|(
literal|15
argument_list|,
literal|27
argument_list|,
operator|-
literal|62
argument_list|,
operator|-
literal|34
argument_list|)
argument_list|,
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pole boundary"
argument_list|,
name|INTERSECTS
argument_list|,
name|ctx
operator|.
name|makeCircle
argument_list|(
operator|-
literal|100
argument_list|,
operator|-
literal|12
argument_list|,
name|degToDist
argument_list|(
literal|102
argument_list|)
argument_list|)
operator|.
name|relate
argument_list|(
name|ctx
operator|.
name|makeRect
argument_list|(
literal|143
argument_list|,
literal|175
argument_list|,
literal|4
argument_list|,
literal|32
argument_list|)
argument_list|,
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"full circle assert"
argument_list|,
name|CONTAINS
argument_list|,
name|ctx
operator|.
name|makeCircle
argument_list|(
operator|-
literal|64
argument_list|,
literal|32
argument_list|,
name|degToDist
argument_list|(
literal|180
argument_list|)
argument_list|)
operator|.
name|relate
argument_list|(
name|ctx
operator|.
name|makeRect
argument_list|(
literal|47
argument_list|,
literal|47
argument_list|,
operator|-
literal|14
argument_list|,
literal|90
argument_list|)
argument_list|,
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
comment|//--Now proceed with systematic testing:
name|double
name|distToOpposeSide
init|=
name|ctx
operator|.
name|getUnits
argument_list|()
operator|.
name|earthRadius
argument_list|()
operator|*
name|Math
operator|.
name|PI
decl_stmt|;
name|assertEquals
argument_list|(
name|ctx
operator|.
name|getWorldBounds
argument_list|()
argument_list|,
name|ctx
operator|.
name|makeCircle
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|distToOpposeSide
argument_list|)
operator|.
name|getBoundingBox
argument_list|()
argument_list|)
expr_stmt|;
comment|//assertEquals(ctx.makeCircle(0,0,distToOpposeSide/2 - 500).getBoundingBox());
name|double
index|[]
name|theXs
init|=
operator|new
name|double
index|[]
block|{
operator|-
literal|180
block|,
operator|-
literal|45
block|,
literal|90
block|}
decl_stmt|;
for|for
control|(
name|double
name|x
range|:
name|theXs
control|)
block|{
name|double
index|[]
name|theYs
init|=
operator|new
name|double
index|[]
block|{
operator|-
literal|90
block|,
operator|-
literal|45
block|,
literal|0
block|,
literal|45
block|,
literal|90
block|}
decl_stmt|;
for|for
control|(
name|double
name|y
range|:
name|theYs
control|)
block|{
name|testCircle
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testCircle
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|testCircle
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|degToDist
argument_list|(
literal|90
argument_list|)
argument_list|)
expr_stmt|;
name|testCircle
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|ctx
operator|.
name|getUnits
argument_list|()
operator|.
name|earthRadius
argument_list|()
operator|*
literal|6
argument_list|)
expr_stmt|;
block|}
block|}
name|testCircleIntersect
argument_list|()
expr_stmt|;
block|}
DECL|method|degToDist
specifier|private
name|double
name|degToDist
parameter_list|(
name|int
name|deg
parameter_list|)
block|{
return|return
name|ctx
operator|.
name|getDistCalc
argument_list|()
operator|.
name|degreesToDistance
argument_list|(
name|deg
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getContext
specifier|protected
name|SpatialContext
name|getContext
parameter_list|()
block|{
name|DistanceUnits
name|units
init|=
name|DistanceUnits
operator|.
name|KILOMETERS
decl_stmt|;
name|DistanceCalculator
name|distCalc
init|=
operator|new
name|GeodesicSphereDistCalc
operator|.
name|Haversine
argument_list|(
name|units
operator|.
name|earthRadius
argument_list|()
argument_list|)
decl_stmt|;
comment|//default
switch|switch
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
condition|)
block|{
case|case
literal|2
case|:
comment|//TODO ENABLE WHEN WORKING
comment|//distCalc = new GeodesicSphereDistCalc.LawOfCosines(units.earthRadius());
break|break;
case|case
literal|1
case|:
name|distCalc
operator|=
operator|new
name|GeodesicSphereDistCalc
operator|.
name|Vincenty
argument_list|(
name|units
operator|.
name|earthRadius
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
operator|new
name|SimpleSpatialContext
argument_list|(
name|units
argument_list|,
name|distCalc
argument_list|,
name|SpatialContext
operator|.
name|GEO_WORLDBOUNDS
argument_list|)
return|;
block|}
block|}
end_class
end_unit
