begin_unit
begin_package
DECL|package|org.apache.lucene.spatial.base.context
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|context
package|;
end_package
begin_comment
DECL|package|org.apache.lucene.spatial.base.context
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|context
operator|.
name|simple
operator|.
name|SimpleSpatialContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|distance
operator|.
name|DistanceUnits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|distance
operator|.
name|CartesianDistCalc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|distance
operator|.
name|GeodesicSphereDistCalc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|simple
operator|.
name|RectangleImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import
begin_class
DECL|class|SpatialContextFactoryTest
specifier|public
class|class
name|SpatialContextFactoryTest
block|{
DECL|field|PROP
specifier|public
specifier|static
specifier|final
name|String
name|PROP
init|=
literal|"SpatialContextFactory"
decl_stmt|;
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|remove
argument_list|(
name|PROP
argument_list|)
expr_stmt|;
block|}
DECL|method|call
specifier|private
name|SpatialContext
name|call
parameter_list|(
name|String
modifier|...
name|argsStr
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argsStr
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|String
name|key
init|=
name|argsStr
index|[
name|i
index|]
decl_stmt|;
name|String
name|val
init|=
name|argsStr
index|[
name|i
operator|+
literal|1
index|]
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|SpatialContextFactory
operator|.
name|makeSpatialContext
argument_list|(
name|args
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testDefault
specifier|public
name|void
name|testDefault
parameter_list|()
block|{
name|SpatialContext
name|s
init|=
name|SimpleSpatialContext
operator|.
name|GEO_KM
decl_stmt|;
name|SpatialContext
name|t
init|=
name|call
argument_list|()
decl_stmt|;
comment|//default
name|assertEquals
argument_list|(
name|s
operator|.
name|getClass
argument_list|()
argument_list|,
name|t
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|getUnits
argument_list|()
argument_list|,
name|t
operator|.
name|getUnits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|getDistCalc
argument_list|()
argument_list|,
name|t
operator|.
name|getDistCalc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|getWorldBounds
argument_list|()
argument_list|,
name|t
operator|.
name|getWorldBounds
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCustom
specifier|public
name|void
name|testCustom
parameter_list|()
block|{
name|SpatialContext
name|sc
init|=
name|call
argument_list|(
literal|"units"
argument_list|,
literal|"u"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DistanceUnits
operator|.
name|CARTESIAN
argument_list|,
name|sc
operator|.
name|getUnits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|CartesianDistCalc
argument_list|()
argument_list|,
name|sc
operator|.
name|getDistCalc
argument_list|()
argument_list|)
expr_stmt|;
name|sc
operator|=
name|call
argument_list|(
literal|"units"
argument_list|,
literal|"u"
argument_list|,
literal|"distCalculator"
argument_list|,
literal|"cartesian^2"
argument_list|,
literal|"worldBounds"
argument_list|,
literal|"-100 0 75 200"
argument_list|)
expr_stmt|;
comment|//West South East North
name|assertEquals
argument_list|(
operator|new
name|CartesianDistCalc
argument_list|(
literal|true
argument_list|)
argument_list|,
name|sc
operator|.
name|getDistCalc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|RectangleImpl
argument_list|(
operator|-
literal|100
argument_list|,
literal|75
argument_list|,
literal|0
argument_list|,
literal|200
argument_list|)
argument_list|,
name|sc
operator|.
name|getWorldBounds
argument_list|()
argument_list|)
expr_stmt|;
name|sc
operator|=
name|call
argument_list|(
literal|"units"
argument_list|,
literal|"miles"
argument_list|,
literal|"distCalculator"
argument_list|,
literal|"lawOfCosines"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DistanceUnits
operator|.
name|MILES
argument_list|,
name|sc
operator|.
name|getUnits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|GeodesicSphereDistCalc
operator|.
name|LawOfCosines
argument_list|(
name|sc
operator|.
name|getUnits
argument_list|()
operator|.
name|earthRadius
argument_list|()
argument_list|)
argument_list|,
name|sc
operator|.
name|getDistCalc
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSystemPropertyLookup
specifier|public
name|void
name|testSystemPropertyLookup
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|PROP
argument_list|,
name|DSCF
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DistanceUnits
operator|.
name|CARTESIAN
argument_list|,
name|call
argument_list|()
operator|.
name|getUnits
argument_list|()
argument_list|)
expr_stmt|;
comment|//DSCF returns this
block|}
DECL|class|DSCF
specifier|public
specifier|static
class|class
name|DSCF
extends|extends
name|SpatialContextFactory
block|{
annotation|@
name|Override
DECL|method|newSpatialContext
specifier|protected
name|SpatialContext
name|newSpatialContext
parameter_list|()
block|{
return|return
operator|new
name|SimpleSpatialContext
argument_list|(
name|DistanceUnits
operator|.
name|CARTESIAN
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
