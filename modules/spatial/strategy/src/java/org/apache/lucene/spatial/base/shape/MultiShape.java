begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.base.shape
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|EqualsBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|context
operator|.
name|SpatialContext
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_comment
comment|/**  * A collection of Shape objects.  */
end_comment
begin_class
DECL|class|MultiShape
specifier|public
class|class
name|MultiShape
implements|implements
name|Shape
block|{
DECL|field|geoms
specifier|private
specifier|final
name|Collection
argument_list|<
name|Shape
argument_list|>
name|geoms
decl_stmt|;
DECL|field|bbox
specifier|private
specifier|final
name|Rectangle
name|bbox
decl_stmt|;
DECL|method|MultiShape
specifier|public
name|MultiShape
parameter_list|(
name|Collection
argument_list|<
name|Shape
argument_list|>
name|geoms
parameter_list|,
name|SpatialContext
name|ctx
parameter_list|)
block|{
name|this
operator|.
name|geoms
operator|=
name|geoms
expr_stmt|;
name|double
name|minX
init|=
name|Double
operator|.
name|MAX_VALUE
decl_stmt|;
name|double
name|minY
init|=
name|Double
operator|.
name|MAX_VALUE
decl_stmt|;
name|double
name|maxX
init|=
name|Double
operator|.
name|MIN_VALUE
decl_stmt|;
name|double
name|maxY
init|=
name|Double
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|Shape
name|geom
range|:
name|geoms
control|)
block|{
name|Rectangle
name|r
init|=
name|geom
operator|.
name|getBoundingBox
argument_list|()
decl_stmt|;
name|minX
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minX
argument_list|,
name|r
operator|.
name|getMinX
argument_list|()
argument_list|)
expr_stmt|;
name|minY
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minY
argument_list|,
name|r
operator|.
name|getMinY
argument_list|()
argument_list|)
expr_stmt|;
name|maxX
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxX
argument_list|,
name|r
operator|.
name|getMaxX
argument_list|()
argument_list|)
expr_stmt|;
name|maxY
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxY
argument_list|,
name|r
operator|.
name|getMaxY
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|bbox
operator|=
name|ctx
operator|.
name|makeRect
argument_list|(
name|minX
argument_list|,
name|maxX
argument_list|,
name|minY
argument_list|,
name|maxY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBoundingBox
specifier|public
name|Rectangle
name|getBoundingBox
parameter_list|()
block|{
return|return
name|bbox
return|;
block|}
annotation|@
name|Override
DECL|method|getCenter
specifier|public
name|Point
name|getCenter
parameter_list|()
block|{
return|return
name|bbox
operator|.
name|getCenter
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hasArea
specifier|public
name|boolean
name|hasArea
parameter_list|()
block|{
for|for
control|(
name|Shape
name|geom
range|:
name|geoms
control|)
block|{
if|if
condition|(
name|geom
operator|.
name|hasArea
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|relate
specifier|public
name|SpatialRelation
name|relate
parameter_list|(
name|Shape
name|other
parameter_list|,
name|SpatialContext
name|ctx
parameter_list|)
block|{
name|boolean
name|allOutside
init|=
literal|true
decl_stmt|;
name|boolean
name|allContains
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Shape
name|geom
range|:
name|geoms
control|)
block|{
name|SpatialRelation
name|sect
init|=
name|geom
operator|.
name|relate
argument_list|(
name|other
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|sect
operator|!=
name|SpatialRelation
operator|.
name|DISJOINT
condition|)
name|allOutside
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|sect
operator|!=
name|SpatialRelation
operator|.
name|CONTAINS
condition|)
name|allContains
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|allContains
operator|&&
operator|!
name|allOutside
condition|)
return|return
name|SpatialRelation
operator|.
name|INTERSECTS
return|;
comment|//short circuit
block|}
if|if
condition|(
name|allOutside
condition|)
return|return
name|SpatialRelation
operator|.
name|DISJOINT
return|;
if|if
condition|(
name|allContains
condition|)
return|return
name|SpatialRelation
operator|.
name|CONTAINS
return|;
return|return
name|SpatialRelation
operator|.
name|INTERSECTS
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|MultiShape
name|rhs
init|=
operator|(
name|MultiShape
operator|)
name|obj
decl_stmt|;
return|return
operator|new
name|EqualsBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|geoms
argument_list|,
name|rhs
operator|.
name|geoms
argument_list|)
operator|.
name|isEquals
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|(
literal|83
argument_list|,
literal|29
argument_list|)
operator|.
name|append
argument_list|(
name|geoms
operator|.
name|hashCode
argument_list|()
argument_list|)
operator|.
name|toHashCode
argument_list|()
return|;
block|}
block|}
end_class
end_unit
