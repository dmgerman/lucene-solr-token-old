begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.base.distance
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|distance
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|context
operator|.
name|SpatialContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|Point
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|Rectangle
import|;
end_import
begin_class
DECL|class|CartesianDistCalc
specifier|public
class|class
name|CartesianDistCalc
extends|extends
name|AbstractDistanceCalculator
block|{
DECL|field|squared
specifier|private
specifier|final
name|boolean
name|squared
decl_stmt|;
DECL|method|CartesianDistCalc
specifier|public
name|CartesianDistCalc
parameter_list|()
block|{
name|this
operator|.
name|squared
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|CartesianDistCalc
specifier|public
name|CartesianDistCalc
parameter_list|(
name|boolean
name|squared
parameter_list|)
block|{
name|this
operator|.
name|squared
operator|=
name|squared
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|distance
specifier|public
name|double
name|distance
parameter_list|(
name|Point
name|from
parameter_list|,
name|double
name|toX
parameter_list|,
name|double
name|toY
parameter_list|)
block|{
name|double
name|result
init|=
literal|0
decl_stmt|;
name|double
name|v
init|=
name|from
operator|.
name|getX
argument_list|()
operator|-
name|toX
decl_stmt|;
name|result
operator|+=
operator|(
name|v
operator|*
name|v
operator|)
expr_stmt|;
name|v
operator|=
name|from
operator|.
name|getY
argument_list|()
operator|-
name|toY
expr_stmt|;
name|result
operator|+=
operator|(
name|v
operator|*
name|v
operator|)
expr_stmt|;
if|if
condition|(
name|squared
condition|)
return|return
name|result
return|;
return|return
name|Math
operator|.
name|sqrt
argument_list|(
name|result
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|pointOnBearing
specifier|public
name|Point
name|pointOnBearing
parameter_list|(
name|Point
name|from
parameter_list|,
name|double
name|dist
parameter_list|,
name|double
name|bearingDEG
parameter_list|,
name|SpatialContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|dist
operator|==
literal|0
condition|)
return|return
name|from
return|;
name|double
name|bearingRAD
init|=
name|Math
operator|.
name|toDegrees
argument_list|(
name|bearingDEG
argument_list|)
decl_stmt|;
name|double
name|x
init|=
name|Math
operator|.
name|sin
argument_list|(
name|bearingRAD
argument_list|)
operator|*
name|dist
decl_stmt|;
name|double
name|y
init|=
name|Math
operator|.
name|cos
argument_list|(
name|bearingRAD
argument_list|)
operator|*
name|dist
decl_stmt|;
return|return
name|ctx
operator|.
name|makePoint
argument_list|(
name|from
operator|.
name|getX
argument_list|()
operator|+
name|x
argument_list|,
name|from
operator|.
name|getY
argument_list|()
operator|+
name|y
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|distanceToDegrees
specifier|public
name|double
name|distanceToDegrees
parameter_list|(
name|double
name|distance
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"no geo!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|degreesToDistance
specifier|public
name|double
name|degreesToDistance
parameter_list|(
name|double
name|degrees
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"no geo!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|calcBoxByDistFromPt
specifier|public
name|Rectangle
name|calcBoxByDistFromPt
parameter_list|(
name|Point
name|from
parameter_list|,
name|double
name|distance
parameter_list|,
name|SpatialContext
name|ctx
parameter_list|)
block|{
return|return
name|ctx
operator|.
name|makeRect
argument_list|(
name|from
operator|.
name|getX
argument_list|()
operator|-
name|distance
argument_list|,
name|from
operator|.
name|getX
argument_list|()
operator|+
name|distance
argument_list|,
name|from
operator|.
name|getY
argument_list|()
operator|-
name|distance
argument_list|,
name|from
operator|.
name|getY
argument_list|()
operator|+
name|distance
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|calcBoxByDistFromPtHorizAxis
specifier|public
name|double
name|calcBoxByDistFromPtHorizAxis
parameter_list|(
name|Point
name|from
parameter_list|,
name|double
name|distance
parameter_list|,
name|SpatialContext
name|ctx
parameter_list|)
block|{
return|return
name|from
operator|.
name|getY
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|CartesianDistCalc
name|that
init|=
operator|(
name|CartesianDistCalc
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|squared
operator|!=
name|that
operator|.
name|squared
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|squared
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
block|}
end_class
end_unit
