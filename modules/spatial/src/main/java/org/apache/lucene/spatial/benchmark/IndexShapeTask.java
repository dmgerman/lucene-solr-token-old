begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.benchmark
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|benchmark
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|PerfRunData
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|tasks
operator|.
name|PerfTask
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|utils
operator|.
name|Config
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|Shape
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|strategy
operator|.
name|SpatialFieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|strategy
operator|.
name|SpatialStrategy
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import
begin_class
DECL|class|IndexShapeTask
specifier|public
specifier|abstract
class|class
name|IndexShapeTask
parameter_list|<
name|T
extends|extends
name|SpatialFieldInfo
parameter_list|>
extends|extends
name|PerfTask
implements|implements
name|StrategyAware
argument_list|<
name|T
argument_list|>
block|{
DECL|field|shapeGenerator
specifier|private
name|ShapeGenerator
name|shapeGenerator
decl_stmt|;
DECL|field|numShapes
specifier|private
name|int
name|numShapes
decl_stmt|;
DECL|method|IndexShapeTask
specifier|public
name|IndexShapeTask
parameter_list|(
name|PerfRunData
name|runData
parameter_list|)
block|{
name|super
argument_list|(
name|runData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|Config
name|config
init|=
name|getRunData
argument_list|()
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|String
name|shapeGeneratorName
init|=
name|config
operator|.
name|get
argument_list|(
literal|"index.shapegenerator"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
comment|// TODO (cmale) - Setup default shape generator
name|shapeGenerator
operator|=
operator|(
name|ShapeGenerator
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|shapeGeneratorName
argument_list|)
operator|.
name|getConstructor
argument_list|(
name|Config
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|numShapes
operator|=
name|config
operator|.
name|get
argument_list|(
literal|"index.numshapes"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doLogic
specifier|public
name|int
name|doLogic
parameter_list|()
throws|throws
name|Exception
block|{
name|SpatialStrategy
argument_list|<
name|T
argument_list|>
name|spatialStrategy
init|=
name|createSpatialStrategy
argument_list|()
decl_stmt|;
name|T
name|fieldInfo
init|=
name|createFieldInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numShapes
condition|;
name|i
operator|++
control|)
block|{
name|Shape
name|shape
init|=
name|shapeGenerator
operator|.
name|generate
argument_list|()
decl_stmt|;
name|IndexableField
index|[]
name|fields
init|=
name|spatialStrategy
operator|.
name|createFields
argument_list|(
name|fieldInfo
argument_list|,
name|shape
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|StringField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexableField
name|field
range|:
name|fields
control|)
block|{
name|document
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
name|getRunData
argument_list|()
operator|.
name|getIndexWriter
argument_list|()
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
return|return
literal|1
return|;
block|}
block|}
end_class
end_unit
