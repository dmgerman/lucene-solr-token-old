begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.base.io.sample
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|io
operator|.
name|sample
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_class
DECL|class|SampleData
specifier|public
class|class
name|SampleData
block|{
DECL|field|id
specifier|public
name|String
name|id
decl_stmt|;
DECL|field|name
specifier|public
name|String
name|name
decl_stmt|;
DECL|field|shape
specifier|public
name|String
name|shape
decl_stmt|;
DECL|method|SampleData
specifier|public
name|SampleData
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|String
index|[]
name|vals
init|=
name|line
operator|.
name|split
argument_list|(
literal|"\t"
argument_list|)
decl_stmt|;
name|id
operator|=
name|vals
index|[
literal|0
index|]
expr_stmt|;
name|name
operator|=
name|vals
index|[
literal|1
index|]
expr_stmt|;
name|shape
operator|=
name|vals
index|[
literal|2
index|]
expr_stmt|;
block|}
DECL|field|NAME_ORDER
specifier|public
specifier|static
name|Comparator
argument_list|<
name|SampleData
argument_list|>
name|NAME_ORDER
init|=
operator|new
name|Comparator
argument_list|<
name|SampleData
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|SampleData
name|o1
parameter_list|,
name|SampleData
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|name
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|name
argument_list|)
return|;
block|}
block|}
decl_stmt|;
block|}
end_class
end_unit
