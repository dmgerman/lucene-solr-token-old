begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.base.shape.simple
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|simple
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|context
operator|.
name|SpatialContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|SpatialRelation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|Point
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|Rectangle
import|;
end_import
begin_comment
comment|/**  * @author David Smiley - dsmiley@mitre.org  */
end_comment
begin_class
DECL|class|GeoCircleImpl
specifier|public
class|class
name|GeoCircleImpl
extends|extends
name|CircleImpl
block|{
DECL|field|distDEG
specifier|private
specifier|final
name|double
name|distDEG
decl_stmt|;
comment|// [0 TO 180]
DECL|field|inverseCircle
specifier|private
specifier|final
name|GeoCircleImpl
name|inverseCircle
decl_stmt|;
comment|//when distance reaches> 1/2 way around the world, cache the inverse.
DECL|field|horizAxisY
specifier|private
specifier|final
name|double
name|horizAxisY
decl_stmt|;
comment|//see getYAxis
DECL|method|GeoCircleImpl
specifier|public
name|GeoCircleImpl
parameter_list|(
name|Point
name|p
parameter_list|,
name|double
name|dist
parameter_list|,
name|SpatialContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|p
argument_list|,
name|dist
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
assert|assert
name|ctx
operator|.
name|isGeo
argument_list|()
assert|;
comment|//In the direction of latitude (N,S), distance is the same number of degrees.
name|distDEG
operator|=
name|ctx
operator|.
name|getDistCalc
argument_list|()
operator|.
name|distanceToDegrees
argument_list|(
name|distance
argument_list|)
expr_stmt|;
if|if
condition|(
name|distDEG
operator|>
literal|90
condition|)
block|{
assert|assert
name|enclosingBox
operator|.
name|getWidth
argument_list|()
operator|==
literal|360
assert|;
name|double
name|backDistDEG
init|=
literal|180
operator|-
name|distDEG
decl_stmt|;
if|if
condition|(
name|backDistDEG
operator|>=
literal|0
condition|)
block|{
name|double
name|backDistance
init|=
name|ctx
operator|.
name|getDistCalc
argument_list|()
operator|.
name|degreesToDistance
argument_list|(
name|backDistDEG
argument_list|)
decl_stmt|;
name|Point
name|backPoint
init|=
name|ctx
operator|.
name|makePoint
argument_list|(
name|getCenter
argument_list|()
operator|.
name|getX
argument_list|()
operator|+
literal|180
argument_list|,
name|getCenter
argument_list|()
operator|.
name|getY
argument_list|()
operator|+
literal|180
argument_list|)
decl_stmt|;
name|inverseCircle
operator|=
operator|new
name|GeoCircleImpl
argument_list|(
name|backPoint
argument_list|,
name|backDistance
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
else|else
name|inverseCircle
operator|=
literal|null
expr_stmt|;
comment|//whole globe
name|horizAxisY
operator|=
name|getCenter
argument_list|()
operator|.
name|getY
argument_list|()
expr_stmt|;
comment|//although probably not used
block|}
else|else
block|{
name|inverseCircle
operator|=
literal|null
expr_stmt|;
name|double
name|_horizAxisY
init|=
name|ctx
operator|.
name|getDistCalc
argument_list|()
operator|.
name|calcBoxByDistFromPtHorizAxis
argument_list|(
name|getCenter
argument_list|()
argument_list|,
name|distance
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
comment|//some rare numeric conditioning cases can cause this to be barely beyond the box
if|if
condition|(
name|_horizAxisY
operator|>
name|enclosingBox
operator|.
name|getMaxY
argument_list|()
condition|)
block|{
name|horizAxisY
operator|=
name|enclosingBox
operator|.
name|getMaxY
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|_horizAxisY
operator|<
name|enclosingBox
operator|.
name|getMinY
argument_list|()
condition|)
block|{
name|horizAxisY
operator|=
name|enclosingBox
operator|.
name|getMinY
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|horizAxisY
operator|=
name|_horizAxisY
expr_stmt|;
block|}
comment|//assert enclosingBox.relate_yRange(horizAxis,horizAxis,ctx).intersects();
block|}
block|}
annotation|@
name|Override
DECL|method|getYAxis
specifier|protected
name|double
name|getYAxis
parameter_list|()
block|{
return|return
name|horizAxisY
return|;
block|}
comment|/**    * Called after bounding box is intersected.    * @bboxSect INTERSECTS or CONTAINS from enclosingBox's intersection    * @result DISJOINT, CONTAINS, or INTERSECTS (not WITHIN)    */
annotation|@
name|Override
DECL|method|relateRectanglePhase2
specifier|protected
name|SpatialRelation
name|relateRectanglePhase2
parameter_list|(
name|Rectangle
name|r
parameter_list|,
name|SpatialRelation
name|bboxSect
parameter_list|,
name|SpatialContext
name|ctx
parameter_list|)
block|{
comment|//Rectangle wraps around the world longitudinally creating a solid band; there are no corners to test intersection
if|if
condition|(
name|r
operator|.
name|getWidth
argument_list|()
operator|==
literal|360
condition|)
block|{
return|return
name|SpatialRelation
operator|.
name|INTERSECTS
return|;
block|}
if|if
condition|(
name|inverseCircle
operator|!=
literal|null
condition|)
block|{
return|return
name|inverseCircle
operator|.
name|relate
argument_list|(
name|r
argument_list|,
name|ctx
argument_list|)
operator|.
name|inverse
argument_list|()
return|;
block|}
comment|//if a pole is wrapped, we have a separate algorithm
if|if
condition|(
name|enclosingBox
operator|.
name|getWidth
argument_list|()
operator|==
literal|360
condition|)
block|{
return|return
name|relateRectangleCircleWrapsPole
argument_list|(
name|r
argument_list|,
name|ctx
argument_list|)
return|;
block|}
comment|//This is an optimization path for when there are no dateline or pole issues.
if|if
condition|(
operator|!
name|enclosingBox
operator|.
name|getCrossesDateLine
argument_list|()
operator|&&
operator|!
name|r
operator|.
name|getCrossesDateLine
argument_list|()
condition|)
block|{
return|return
name|super
operator|.
name|relateRectanglePhase2
argument_list|(
name|r
argument_list|,
name|bboxSect
argument_list|,
name|ctx
argument_list|)
return|;
block|}
comment|//do quick check to see if all corners are within this circle for CONTAINS
name|int
name|cornersIntersect
init|=
name|numCornersIntersect
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|cornersIntersect
operator|==
literal|4
condition|)
block|{
comment|//ensure r's x axis is within c's.  If it doesn't, r sneaks around the globe to touch the other side (intersect).
name|SpatialRelation
name|xIntersect
init|=
name|r
operator|.
name|relate_xRange
argument_list|(
name|enclosingBox
operator|.
name|getMinX
argument_list|()
argument_list|,
name|enclosingBox
operator|.
name|getMaxX
argument_list|()
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|xIntersect
operator|==
name|SpatialRelation
operator|.
name|WITHIN
condition|)
return|return
name|SpatialRelation
operator|.
name|CONTAINS
return|;
return|return
name|SpatialRelation
operator|.
name|INTERSECTS
return|;
block|}
comment|//INTERSECT or DISJOINT ?
if|if
condition|(
name|cornersIntersect
operator|>
literal|0
condition|)
return|return
name|SpatialRelation
operator|.
name|INTERSECTS
return|;
comment|//Now we check if one of the axis of the circle intersect with r.  If so we have
comment|// intersection.
comment|/* x axis intersects  */
if|if
condition|(
name|r
operator|.
name|relate_yRange
argument_list|(
name|getYAxis
argument_list|()
argument_list|,
name|getYAxis
argument_list|()
argument_list|,
name|ctx
argument_list|)
operator|.
name|intersects
argument_list|()
comment|// at y vertical
operator|&&
name|r
operator|.
name|relate_xRange
argument_list|(
name|enclosingBox
operator|.
name|getMinX
argument_list|()
argument_list|,
name|enclosingBox
operator|.
name|getMaxX
argument_list|()
argument_list|,
name|ctx
argument_list|)
operator|.
name|intersects
argument_list|()
condition|)
return|return
name|SpatialRelation
operator|.
name|INTERSECTS
return|;
comment|/* y axis intersects */
if|if
condition|(
name|r
operator|.
name|relate_xRange
argument_list|(
name|getXAxis
argument_list|()
argument_list|,
name|getXAxis
argument_list|()
argument_list|,
name|ctx
argument_list|)
operator|.
name|intersects
argument_list|()
condition|)
block|{
comment|// at x horizontal
name|double
name|yTop
init|=
name|getCenter
argument_list|()
operator|.
name|getY
argument_list|()
operator|+
name|distDEG
decl_stmt|;
assert|assert
name|yTop
operator|<=
literal|90
assert|;
name|double
name|yBot
init|=
name|getCenter
argument_list|()
operator|.
name|getY
argument_list|()
operator|-
name|distDEG
decl_stmt|;
assert|assert
name|yBot
operator|>=
operator|-
literal|90
assert|;
if|if
condition|(
name|r
operator|.
name|relate_yRange
argument_list|(
name|yBot
argument_list|,
name|yTop
argument_list|,
name|ctx
argument_list|)
operator|.
name|intersects
argument_list|()
condition|)
comment|//back bottom
return|return
name|SpatialRelation
operator|.
name|INTERSECTS
return|;
block|}
return|return
name|SpatialRelation
operator|.
name|DISJOINT
return|;
block|}
DECL|method|relateRectangleCircleWrapsPole
specifier|private
name|SpatialRelation
name|relateRectangleCircleWrapsPole
parameter_list|(
name|Rectangle
name|r
parameter_list|,
name|SpatialContext
name|ctx
parameter_list|)
block|{
comment|//This method handles the case where the circle wraps ONE pole, but not both.  For both,
comment|// there is the inverseCircle case handled before now.  The only exception is for the case where
comment|// the circle covers the entire globe, and we'll check that first.
if|if
condition|(
name|distDEG
operator|==
literal|180
condition|)
comment|//whole globe
return|return
name|SpatialRelation
operator|.
name|CONTAINS
return|;
comment|//Check if r is within the pole wrap region:
name|double
name|yTop
init|=
name|getCenter
argument_list|()
operator|.
name|getY
argument_list|()
operator|+
name|distDEG
decl_stmt|;
if|if
condition|(
name|yTop
operator|>
literal|90
condition|)
block|{
name|double
name|yTopOverlap
init|=
name|yTop
operator|-
literal|90
decl_stmt|;
assert|assert
name|yTopOverlap
operator|<=
literal|90
assert|;
if|if
condition|(
name|r
operator|.
name|getMinY
argument_list|()
operator|>=
literal|90
operator|-
name|yTopOverlap
condition|)
return|return
name|SpatialRelation
operator|.
name|CONTAINS
return|;
block|}
else|else
block|{
name|double
name|yBot
init|=
name|point
operator|.
name|getY
argument_list|()
operator|-
name|distDEG
decl_stmt|;
if|if
condition|(
name|yBot
operator|<
operator|-
literal|90
condition|)
block|{
name|double
name|yBotOverlap
init|=
operator|-
literal|90
operator|-
name|yBot
decl_stmt|;
assert|assert
name|yBotOverlap
operator|<=
literal|90
assert|;
if|if
condition|(
name|r
operator|.
name|getMaxY
argument_list|()
operator|<=
operator|-
literal|90
operator|+
name|yBotOverlap
condition|)
return|return
name|SpatialRelation
operator|.
name|CONTAINS
return|;
block|}
else|else
block|{
comment|//This point is probably not reachable ??
assert|assert
name|yTop
operator|==
literal|90
operator|||
name|yBot
operator|==
operator|-
literal|90
assert|;
comment|//we simply touch a pole
comment|//continue
block|}
block|}
comment|//If there are no corners to check intersection because r wraps completely...
if|if
condition|(
name|r
operator|.
name|getWidth
argument_list|()
operator|==
literal|360
condition|)
return|return
name|SpatialRelation
operator|.
name|INTERSECTS
return|;
comment|//Check corners:
name|int
name|cornersIntersect
init|=
name|numCornersIntersect
argument_list|(
name|r
argument_list|)
decl_stmt|;
comment|// (It might be possible to reduce contains() calls within nCI() to exactly two, but this intersection
comment|//  code is complicated enough as it is.)
if|if
condition|(
name|cornersIntersect
operator|==
literal|4
condition|)
block|{
comment|//all
name|double
name|backX
init|=
name|ctx
operator|.
name|normX
argument_list|(
name|getCenter
argument_list|()
operator|.
name|getX
argument_list|()
operator|+
literal|180
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|relate_xRange
argument_list|(
name|backX
argument_list|,
name|backX
argument_list|,
name|ctx
argument_list|)
operator|.
name|intersects
argument_list|()
condition|)
return|return
name|SpatialRelation
operator|.
name|INTERSECTS
return|;
else|else
return|return
name|SpatialRelation
operator|.
name|CONTAINS
return|;
block|}
elseif|else
if|if
condition|(
name|cornersIntersect
operator|==
literal|0
condition|)
block|{
comment|//none
name|double
name|frontX
init|=
name|getCenter
argument_list|()
operator|.
name|getX
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|relate_xRange
argument_list|(
name|frontX
argument_list|,
name|frontX
argument_list|,
name|ctx
argument_list|)
operator|.
name|intersects
argument_list|()
condition|)
return|return
name|SpatialRelation
operator|.
name|INTERSECTS
return|;
else|else
return|return
name|SpatialRelation
operator|.
name|DISJOINT
return|;
block|}
else|else
comment|//partial
return|return
name|SpatialRelation
operator|.
name|INTERSECTS
return|;
block|}
comment|/** Returns either 0 for none, 1 for some, or 4 for all. */
DECL|method|numCornersIntersect
specifier|private
name|int
name|numCornersIntersect
parameter_list|(
name|Rectangle
name|r
parameter_list|)
block|{
comment|//We play some logic games to avoid calling contains() which can be expensive.
name|boolean
name|bool
decl_stmt|;
comment|//if true then all corners intersect, if false then no corners intersect
comment|// for partial, we exit early with 1 and ignore bool.
name|bool
operator|=
operator|(
name|contains
argument_list|(
name|r
operator|.
name|getMinX
argument_list|()
argument_list|,
name|r
operator|.
name|getMinY
argument_list|()
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|contains
argument_list|(
name|r
operator|.
name|getMinX
argument_list|()
argument_list|,
name|r
operator|.
name|getMaxY
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|bool
condition|)
return|return
literal|1
return|;
comment|//partial
block|}
else|else
block|{
if|if
condition|(
name|bool
condition|)
return|return
literal|1
return|;
comment|//partial
block|}
if|if
condition|(
name|contains
argument_list|(
name|r
operator|.
name|getMaxX
argument_list|()
argument_list|,
name|r
operator|.
name|getMinY
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|bool
condition|)
return|return
literal|1
return|;
comment|//partial
block|}
else|else
block|{
if|if
condition|(
name|bool
condition|)
return|return
literal|1
return|;
comment|//partial
block|}
if|if
condition|(
name|contains
argument_list|(
name|r
operator|.
name|getMaxX
argument_list|()
argument_list|,
name|r
operator|.
name|getMaxY
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|bool
condition|)
return|return
literal|1
return|;
comment|//partial
block|}
else|else
block|{
if|if
condition|(
name|bool
condition|)
return|return
literal|1
return|;
comment|//partial
block|}
return|return
name|bool
condition|?
literal|4
else|:
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|//I'm deliberately making this look basic and not fully detailed with class name& misc fields.
comment|//Add distance in degrees, which is easier to recognize, and earth radius agnostic.
name|String
name|dStr
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%.1f"
argument_list|,
name|distance
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|isGeo
argument_list|()
condition|)
block|{
name|double
name|distDEG
init|=
name|ctx
operator|.
name|getDistCalc
argument_list|()
operator|.
name|distanceToDegrees
argument_list|(
name|distance
argument_list|)
decl_stmt|;
name|dStr
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|"=%.1f\u00B0"
argument_list|,
name|distDEG
argument_list|)
expr_stmt|;
block|}
return|return
literal|"Circle("
operator|+
name|point
operator|+
literal|",d="
operator|+
name|dStr
operator|+
literal|')'
return|;
block|}
block|}
end_class
end_unit
