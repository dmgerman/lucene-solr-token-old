begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
package|;
end_package
begin_comment
comment|/**  * Reads "tests.seed" system property to initialized a global final constant.  * @author David Smiley - dsmiley@mitre.org  */
end_comment
begin_class
DECL|class|RandomSeed
specifier|public
class|class
name|RandomSeed
block|{
DECL|field|_seed
specifier|private
specifier|static
specifier|final
name|long
name|_seed
decl_stmt|;
static|static
block|{
name|_seed
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"tests.seed"
argument_list|,
literal|""
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"tests.seed="
operator|+
name|_seed
argument_list|)
expr_stmt|;
block|}
DECL|method|seed
specifier|public
specifier|static
name|long
name|seed
parameter_list|()
block|{
return|return
name|_seed
return|;
block|}
DECL|method|RandomSeed
specifier|private
name|RandomSeed
parameter_list|()
block|{}
block|}
end_class
end_unit
