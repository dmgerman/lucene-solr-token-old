begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.base.prefix
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|prefix
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|context
operator|.
name|SpatialContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|context
operator|.
name|simple
operator|.
name|SimpleSpatialContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|distance
operator|.
name|DistanceUnits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|prefix
operator|.
name|quad
operator|.
name|QuadPrefixTree
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|Shape
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|simple
operator|.
name|PointImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|simple
operator|.
name|RectangleImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/**  */
end_comment
begin_class
DECL|class|TestGridMatchInfo
specifier|public
class|class
name|TestGridMatchInfo
block|{
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|testMatchInfo
specifier|public
name|void
name|testMatchInfo
parameter_list|()
block|{
comment|// Check Validation
name|SpatialContext
name|ctx
init|=
operator|new
name|SimpleSpatialContext
argument_list|(
name|DistanceUnits
operator|.
name|CARTESIAN
argument_list|,
literal|null
argument_list|,
operator|new
name|RectangleImpl
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|QuadPrefixTree
name|grid
init|=
operator|new
name|QuadPrefixTree
argument_list|(
name|ctx
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|//    GeometricShapeFactory gsf = new GeometricShapeFactory();
comment|//    gsf.setCentre( new com.vividsolutions.jts.geom.Coordinate( 5,5 ) );
comment|//    gsf.setSize( 9.5 );
comment|//    Shape shape = new JtsGeometry( gsf.createCircle() );
name|Shape
name|shape
init|=
operator|new
name|RectangleImpl
argument_list|(
literal|0
argument_list|,
literal|6
argument_list|,
literal|5
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|shape
operator|=
operator|new
name|PointImpl
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|//TODO UPDATE BASED ON NEW API
name|List
argument_list|<
name|String
argument_list|>
name|m
init|=
name|SpatialPrefixTree
operator|.
name|nodesToTokenStrings
argument_list|(
name|grid
operator|.
name|getNodes
argument_list|(
name|shape
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|m
argument_list|)
expr_stmt|;
for|for
control|(
name|CharSequence
name|s
range|:
name|m
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
comment|//    // query should intersect everything one level down
comment|//    ArrayList<String> descr = new ArrayList<String>();
comment|//    descr.add( "AAA*" );
comment|//    descr.add( "AABC*" );
comment|//    System.out.println( descr );
block|}
block|}
end_class
end_unit
