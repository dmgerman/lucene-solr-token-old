begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.prefix
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
package|;
end_package
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|context
operator|.
name|SpatialContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|SimpleSpatialFieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|SpatialMatchConcern
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|StrategyTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|tree
operator|.
name|GeohashPrefixTree
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_class
DECL|class|BaseRecursivePrefixTreeStrategyTestCase
specifier|public
specifier|abstract
class|class
name|BaseRecursivePrefixTreeStrategyTestCase
extends|extends
name|StrategyTestCase
argument_list|<
name|SimpleSpatialFieldInfo
argument_list|>
block|{
DECL|field|maxLength
specifier|private
name|int
name|maxLength
decl_stmt|;
DECL|method|getSpatialContext
specifier|protected
specifier|abstract
name|SpatialContext
name|getSpatialContext
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|maxLength
operator|=
name|GeohashPrefixTree
operator|.
name|getMaxLevelsPossible
argument_list|()
expr_stmt|;
comment|// SimpleIO
name|this
operator|.
name|ctx
operator|=
name|getSpatialContext
argument_list|()
expr_stmt|;
name|this
operator|.
name|strategy
operator|=
operator|new
name|RecursivePrefixTreeStrategy
argument_list|(
operator|new
name|GeohashPrefixTree
argument_list|(
name|ctx
argument_list|,
name|maxLength
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldInfo
operator|=
operator|new
name|SimpleSpatialFieldInfo
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilterWithVariableScanLevel
specifier|public
name|void
name|testFilterWithVariableScanLevel
parameter_list|()
throws|throws
name|IOException
block|{
name|getAddAndVerifyIndexedDocuments
argument_list|(
name|DATA_WORLD_CITIES_POINTS
argument_list|)
expr_stmt|;
comment|//execute queries for each prefix grid scan level
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
operator|(
operator|(
name|RecursivePrefixTreeStrategy
operator|)
name|strategy
operator|)
operator|.
name|setPrefixGridScanLevel
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|executeQueries
argument_list|(
name|SpatialMatchConcern
operator|.
name|FILTER
argument_list|,
name|QTEST_Cities_IsWithin_BBox
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
