begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.base.context
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|context
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|distance
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|exception
operator|.
name|InvalidShapeException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|Circle
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|Point
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|Rectangle
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|Shape
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|base
operator|.
name|shape
operator|.
name|simple
operator|.
name|RectangleImpl
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import
begin_comment
comment|/**  * This holds things like distance units, distance calculator, and world bounds.  * Threadsafe& immutable.  */
end_comment
begin_class
DECL|class|SpatialContext
specifier|public
specifier|abstract
class|class
name|SpatialContext
block|{
comment|//These are non-null
DECL|field|units
specifier|private
specifier|final
name|DistanceUnits
name|units
decl_stmt|;
DECL|field|calculator
specifier|private
specifier|final
name|DistanceCalculator
name|calculator
decl_stmt|;
DECL|field|worldBounds
specifier|private
specifier|final
name|Rectangle
name|worldBounds
decl_stmt|;
DECL|field|GEO_WORLDBOUNDS
specifier|public
specifier|static
name|RectangleImpl
name|GEO_WORLDBOUNDS
init|=
operator|new
name|RectangleImpl
argument_list|(
operator|-
literal|180
argument_list|,
literal|180
argument_list|,
operator|-
literal|90
argument_list|,
literal|90
argument_list|)
decl_stmt|;
DECL|field|MAX_WORLDBOUNDS
specifier|public
specifier|static
name|RectangleImpl
name|MAX_WORLDBOUNDS
decl_stmt|;
static|static
block|{
name|double
name|v
init|=
name|Double
operator|.
name|MAX_VALUE
decl_stmt|;
name|MAX_WORLDBOUNDS
operator|=
operator|new
name|RectangleImpl
argument_list|(
operator|-
name|v
argument_list|,
name|v
argument_list|,
operator|-
name|v
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
DECL|field|maxCircleDistance
specifier|protected
specifier|final
name|Double
name|maxCircleDistance
decl_stmt|;
comment|//only for geo
DECL|field|NUDGE
specifier|protected
specifier|final
name|boolean
name|NUDGE
init|=
literal|false
decl_stmt|;
comment|//TODO document
comment|/**    *    * @param units Required; and establishes geo vs cartesian.    * @param calculator Optional; defaults to Haversine or cartesian depending on units.    * @param worldBounds Optional; defaults to GEO_WORLDBOUNDS or MAX_WORLDBOUNDS depending on units.    */
DECL|method|SpatialContext
specifier|protected
name|SpatialContext
parameter_list|(
name|DistanceUnits
name|units
parameter_list|,
name|DistanceCalculator
name|calculator
parameter_list|,
name|Rectangle
name|worldBounds
parameter_list|)
block|{
if|if
condition|(
name|units
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"units can't be null"
argument_list|)
throw|;
name|this
operator|.
name|units
operator|=
name|units
expr_stmt|;
if|if
condition|(
name|calculator
operator|==
literal|null
condition|)
block|{
name|calculator
operator|=
name|isGeo
argument_list|()
condition|?
operator|new
name|GeodesicSphereDistCalc
operator|.
name|Haversine
argument_list|(
name|units
operator|.
name|earthRadius
argument_list|()
argument_list|)
else|:
operator|new
name|CartesianDistCalc
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|calculator
operator|=
name|calculator
expr_stmt|;
if|if
condition|(
name|worldBounds
operator|==
literal|null
condition|)
block|{
name|worldBounds
operator|=
name|isGeo
argument_list|()
condition|?
name|GEO_WORLDBOUNDS
else|:
name|MAX_WORLDBOUNDS
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isGeo
argument_list|()
condition|)
assert|assert
operator|new
name|RectangleImpl
argument_list|(
name|worldBounds
argument_list|)
operator|.
name|equals
argument_list|(
name|GEO_WORLDBOUNDS
argument_list|)
assert|;
if|if
condition|(
name|worldBounds
operator|.
name|getCrossesDateLine
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"worldBounds shouldn't cross dateline: "
operator|+
name|worldBounds
argument_list|)
throw|;
block|}
comment|//copy so we can ensure we have the right implementation
name|worldBounds
operator|=
name|makeRect
argument_list|(
name|worldBounds
operator|.
name|getMinX
argument_list|()
argument_list|,
name|worldBounds
operator|.
name|getMaxX
argument_list|()
argument_list|,
name|worldBounds
operator|.
name|getMinY
argument_list|()
argument_list|,
name|worldBounds
operator|.
name|getMaxY
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|worldBounds
operator|=
name|worldBounds
expr_stmt|;
name|this
operator|.
name|maxCircleDistance
operator|=
name|isGeo
argument_list|()
condition|?
name|calculator
operator|.
name|degreesToDistance
argument_list|(
literal|180
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
DECL|method|getUnits
specifier|public
name|DistanceUnits
name|getUnits
parameter_list|()
block|{
return|return
name|units
return|;
block|}
DECL|method|getDistCalc
specifier|public
name|DistanceCalculator
name|getDistCalc
parameter_list|()
block|{
return|return
name|calculator
return|;
block|}
DECL|method|getWorldBounds
specifier|public
name|Rectangle
name|getWorldBounds
parameter_list|()
block|{
return|return
name|worldBounds
return|;
block|}
DECL|method|normX
specifier|public
name|double
name|normX
parameter_list|(
name|double
name|x
parameter_list|)
block|{
if|if
condition|(
name|isGeo
argument_list|()
condition|)
block|{
return|return
name|DistanceUtils
operator|.
name|normLonDEG
argument_list|(
name|x
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|x
return|;
block|}
block|}
DECL|method|normY
specifier|public
name|double
name|normY
parameter_list|(
name|double
name|y
parameter_list|)
block|{
if|if
condition|(
name|isGeo
argument_list|()
condition|)
block|{
name|y
operator|=
name|DistanceUtils
operator|.
name|normLatDEG
argument_list|(
name|y
argument_list|)
expr_stmt|;
block|}
return|return
name|y
return|;
block|}
comment|/**    * Is this a geospatial context (true) or simply 2d spatial (false)    * @return    */
DECL|method|isGeo
specifier|public
name|boolean
name|isGeo
parameter_list|()
block|{
return|return
name|getUnits
argument_list|()
operator|.
name|isGeo
argument_list|()
return|;
block|}
comment|/**    * Read a shape from a given string (ie, X Y, XMin XMax... WKT)    *    * (1) Point: X Y    *   1.23 4.56    *    * (2) BOX: XMin YMin XMax YMax    *   1.23 4.56 7.87 4.56    *    * (3) WKT    *   POLYGON( ... )    *   http://en.wikipedia.org/wiki/Well-known_text    *    */
DECL|method|readShape
specifier|public
specifier|abstract
name|Shape
name|readShape
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|InvalidShapeException
function_decl|;
DECL|method|readLatCommaLonPoint
specifier|public
name|Point
name|readLatCommaLonPoint
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|InvalidShapeException
block|{
name|double
index|[]
name|latLon
init|=
name|ParseUtils
operator|.
name|parseLatitudeLongitude
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|makePoint
argument_list|(
name|latLon
index|[
literal|1
index|]
argument_list|,
name|latLon
index|[
literal|0
index|]
argument_list|)
return|;
block|}
DECL|method|toString
specifier|public
specifier|abstract
name|String
name|toString
parameter_list|(
name|Shape
name|shape
parameter_list|)
function_decl|;
comment|/** Construct a point. The parameters will be normalized. */
DECL|method|makePoint
specifier|public
specifier|abstract
name|Point
name|makePoint
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|)
function_decl|;
comment|/** Construct a rectangle. The parameters will be normalized. */
DECL|method|makeRect
specifier|public
specifier|abstract
name|Rectangle
name|makeRect
parameter_list|(
name|double
name|minX
parameter_list|,
name|double
name|maxX
parameter_list|,
name|double
name|minY
parameter_list|,
name|double
name|maxY
parameter_list|)
function_decl|;
comment|/** Construct a circle. The parameters will be normalized. */
DECL|method|makeCircle
specifier|public
name|Circle
name|makeCircle
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|,
name|double
name|distance
parameter_list|)
block|{
return|return
name|makeCircle
argument_list|(
name|makePoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|distance
argument_list|)
return|;
block|}
comment|/**    *    * @param ctr    * @param distance The units of "distance" should be the same as {@link #getUnits()}.    * @return    */
DECL|method|makeCircle
specifier|public
specifier|abstract
name|Circle
name|makeCircle
parameter_list|(
name|Point
name|ctr
parameter_list|,
name|double
name|distance
parameter_list|)
function_decl|;
DECL|method|readStandardShape
specifier|protected
name|Shape
name|readStandardShape
parameter_list|(
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
name|str
operator|.
name|length
argument_list|()
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|InvalidShapeException
argument_list|(
name|str
argument_list|)
throw|;
block|}
if|if
condition|(
name|Character
operator|.
name|isLetter
argument_list|(
name|str
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|str
operator|.
name|startsWith
argument_list|(
literal|"Circle("
argument_list|)
condition|)
block|{
name|int
name|idx
init|=
name|str
operator|.
name|lastIndexOf
argument_list|(
literal|')'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|String
name|body
init|=
name|str
operator|.
name|substring
argument_list|(
literal|"Circle("
operator|.
name|length
argument_list|()
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|body
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|String
name|token
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|Point
name|pt
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|pt
operator|=
name|readLatCommaLonPoint
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|double
name|x
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|double
name|y
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
name|pt
operator|=
name|makePoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
name|Double
name|d
init|=
literal|null
decl_stmt|;
name|String
name|arg
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|idx
operator|=
name|arg
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|String
name|k
init|=
name|arg
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|.
name|equals
argument_list|(
literal|"d"
argument_list|)
operator|||
name|k
operator|.
name|equals
argument_list|(
literal|"distance"
argument_list|)
condition|)
block|{
name|d
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|arg
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|InvalidShapeException
argument_list|(
literal|"unknown arg: "
operator|+
name|k
operator|+
literal|" :: "
operator|+
name|str
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|d
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidShapeException
argument_list|(
literal|"Extra arguments: "
operator|+
name|st
operator|.
name|nextToken
argument_list|()
operator|+
literal|" :: "
operator|+
name|str
argument_list|)
throw|;
block|}
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidShapeException
argument_list|(
literal|"Missing Distance: "
operator|+
name|str
argument_list|)
throw|;
block|}
comment|//NOTE: we are assuming the units of 'd' is the same as that of the spatial context.
return|return
name|makeCircle
argument_list|(
name|pt
argument_list|,
name|d
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
if|if
condition|(
name|str
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
operator|!=
operator|-
literal|1
condition|)
return|return
name|readLatCommaLonPoint
argument_list|(
name|str
argument_list|)
return|;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|str
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|double
name|p0
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|p1
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|double
name|p2
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|p3
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
throw|throw
operator|new
name|InvalidShapeException
argument_list|(
literal|"Only 4 numbers supported (rect) but found more: "
operator|+
name|str
argument_list|)
throw|;
return|return
name|makeRect
argument_list|(
name|p0
argument_list|,
name|p2
argument_list|,
name|p1
argument_list|,
name|p3
argument_list|)
return|;
block|}
return|return
name|makePoint
argument_list|(
name|p0
argument_list|,
name|p1
argument_list|)
return|;
block|}
DECL|method|writeRect
specifier|public
name|String
name|writeRect
parameter_list|(
name|Rectangle
name|rect
parameter_list|)
block|{
name|NumberFormat
name|nf
init|=
name|NumberFormat
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|nf
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nf
operator|.
name|setMaximumFractionDigits
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|nf
operator|.
name|setMinimumFractionDigits
argument_list|(
literal|6
argument_list|)
expr_stmt|;
return|return
name|nf
operator|.
name|format
argument_list|(
name|rect
operator|.
name|getMinX
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|nf
operator|.
name|format
argument_list|(
name|rect
operator|.
name|getMinY
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|nf
operator|.
name|format
argument_list|(
name|rect
operator|.
name|getMaxX
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|nf
operator|.
name|format
argument_list|(
name|rect
operator|.
name|getMaxY
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"{"
operator|+
literal|"units="
operator|+
name|units
operator|+
literal|", calculator="
operator|+
name|calculator
operator|+
literal|", worldBounds="
operator|+
name|worldBounds
operator|+
literal|'}'
return|;
block|}
block|}
end_class
end_unit
