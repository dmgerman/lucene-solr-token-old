begin_unit
begin_package
DECL|package|org.apache.lucene.store.db
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|db
package|;
end_package
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2004 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by the Open Source  * Applications Foundation on behalf of the Apache Software Foundation.  * For more information on the Open Source Applications Foundation, please see  *<http://www.osafoundation.org>.  * For more information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|com
operator|.
name|sleepycat
operator|.
name|db
operator|.
name|Dbt
import|;
end_import
begin_import
import|import
name|com
operator|.
name|sleepycat
operator|.
name|db
operator|.
name|Db
import|;
end_import
begin_import
import|import
name|com
operator|.
name|sleepycat
operator|.
name|db
operator|.
name|DbTxn
import|;
end_import
begin_import
import|import
name|com
operator|.
name|sleepycat
operator|.
name|db
operator|.
name|DbException
import|;
end_import
begin_comment
comment|/**  * @author Andi Vajda  */
end_comment
begin_class
DECL|class|Block
specifier|public
class|class
name|Block
extends|extends
name|Object
block|{
DECL|field|key
DECL|field|data
specifier|protected
name|Dbt
name|key
decl_stmt|,
name|data
decl_stmt|;
DECL|method|Block
specifier|protected
name|Block
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|fileKey
init|=
name|file
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|key
operator|=
operator|new
name|Dbt
argument_list|(
operator|new
name|byte
index|[
name|fileKey
operator|.
name|length
operator|+
literal|8
index|]
argument_list|)
expr_stmt|;
name|key
operator|.
name|setFlags
argument_list|(
name|Db
operator|.
name|DB_DBT_USERMEM
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Dbt
argument_list|(
operator|new
name|byte
index|[
name|DbOutputStream
operator|.
name|BLOCK_LEN
index|]
argument_list|)
expr_stmt|;
name|data
operator|.
name|setUserBufferLength
argument_list|(
name|data
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|setFlags
argument_list|(
name|Db
operator|.
name|DB_DBT_USERMEM
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|fileKey
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|fileKey
operator|.
name|length
argument_list|)
expr_stmt|;
name|seek
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
DECL|method|getKey
specifier|protected
name|byte
index|[]
name|getKey
parameter_list|()
block|{
return|return
name|key
operator|.
name|getData
argument_list|()
return|;
block|}
DECL|method|getData
specifier|protected
name|byte
index|[]
name|getData
parameter_list|()
block|{
return|return
name|data
operator|.
name|getData
argument_list|()
return|;
block|}
DECL|method|seek
specifier|protected
name|void
name|seek
parameter_list|(
name|long
name|position
parameter_list|)
throws|throws
name|IOException
block|{
name|position
operator|=
name|position
operator|>>>
name|DbOutputStream
operator|.
name|BLOCK_SHIFT
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|key
operator|.
name|getData
argument_list|()
decl_stmt|;
name|int
name|last
init|=
name|data
operator|.
name|length
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|last
operator|-
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|position
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|position
operator|>>>=
literal|8
expr_stmt|;
block|}
block|}
DECL|method|get
specifier|protected
name|void
name|get
parameter_list|(
name|Db
name|blocks
parameter_list|,
name|DbTxn
name|txn
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|blocks
operator|.
name|get
argument_list|(
name|txn
argument_list|,
name|key
argument_list|,
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DbException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|put
specifier|protected
name|void
name|put
parameter_list|(
name|Db
name|blocks
parameter_list|,
name|DbTxn
name|txn
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|blocks
operator|.
name|put
argument_list|(
name|txn
argument_list|,
name|key
argument_list|,
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DbException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class
end_unit
