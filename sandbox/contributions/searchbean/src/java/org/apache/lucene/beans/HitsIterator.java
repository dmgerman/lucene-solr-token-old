begin_unit
begin_comment
comment|/*  * HitsIterator.java  * Provides an Iterator class around Lucene Hits  * It also supports paging  * Created on November 1, 2001, 8:53 PM  */
end_comment
begin_package
DECL|package|org.apache.lucene.beans
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|beans
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|beans
operator|.
name|SortedField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|beans
operator|.
name|CompareDocumentsByField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Hits
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_comment
comment|//import org.apache.log4j.Logger;
end_comment
begin_comment
comment|/**  *  * @author  Peter Carlson  * @version 1.0  */
end_comment
begin_class
DECL|class|HitsIterator
specifier|public
class|class
name|HitsIterator
block|{
comment|//static Logger logger = Logger.getLogger(HitsIterator.class.getName());
DECL|field|currentPosition
specifier|private
name|int
name|currentPosition
init|=
literal|0
decl_stmt|;
DECL|field|hitsCollection
specifier|private
name|Hits
name|hitsCollection
init|=
literal|null
decl_stmt|;
DECL|field|arrayOfIndividualHits
specifier|private
name|Object
index|[]
name|arrayOfIndividualHits
init|=
literal|null
decl_stmt|;
DECL|field|totalHits
specifier|private
name|int
name|totalHits
init|=
literal|0
decl_stmt|;
DECL|field|pageSize
specifier|private
name|int
name|pageSize
init|=
literal|25
decl_stmt|;
comment|// default page size
DECL|field|currentPage
specifier|private
name|int
name|currentPage
init|=
literal|1
decl_stmt|;
comment|// range from 1 to totalHits%pageSize
DECL|field|totalPages
specifier|private
name|int
name|totalPages
init|=
operator|-
literal|1
decl_stmt|;
comment|// set by constructor
DECL|field|endPagePosition
specifier|private
name|int
name|endPagePosition
init|=
literal|0
decl_stmt|;
comment|// position currentPage ends
comment|/** Creates new HitsIterator */
DECL|method|HitsIterator
specifier|private
name|HitsIterator
parameter_list|()
block|{     }
DECL|method|HitsIterator
specifier|public
name|HitsIterator
parameter_list|(
name|Hits
name|hits
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|hits
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|HitsIterator
specifier|public
name|HitsIterator
parameter_list|(
name|Hits
name|hits
parameter_list|,
name|String
name|sortFlag
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|hitsCollection
operator|=
name|hits
expr_stmt|;
if|if
condition|(
name|sortFlag
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sortFlag
operator|!=
literal|""
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Sorting hits by field "
operator|+
name|sortFlag
argument_list|)
expr_stmt|;
name|sortByField
argument_list|(
name|sortFlag
argument_list|)
expr_stmt|;
comment|//logger.debug("Completed sorting by field "+sortFlag);
block|}
block|}
name|totalHits
operator|=
name|getTotalHits
argument_list|()
expr_stmt|;
name|setPageCount
argument_list|()
expr_stmt|;
block|}
comment|/** sorts hits by the given sort flag      * fills an interal array      * @param sortFlag field to sort results on      */
DECL|method|sortByField
specifier|private
name|void
name|sortByField
parameter_list|(
name|String
name|fieldName
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Comparator
name|c
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fieldName
operator|==
literal|null
condition|)
block|{
comment|//logger.error("sort field is null");
return|return;
block|}
name|SortedField
name|sf
init|=
name|SortedField
operator|.
name|getSortedField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
name|c
operator|=
operator|(
name|Comparator
operator|)
operator|new
name|CompareDocumentsByField
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//logger.error("Sort field not found");
comment|// use default sort of Lucene -- Relevance
comment|// Should I throw an exception here?
name|arrayOfIndividualHits
operator|=
literal|null
expr_stmt|;
return|return;
block|}
name|arrayOfIndividualHits
operator|=
operator|new
name|Object
index|[
name|hitsCollection
operator|.
name|length
argument_list|()
index|]
expr_stmt|;
name|long
name|first
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hitsCollection
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|id
init|=
name|hitsCollection
operator|.
name|id
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|arrayOfIndividualHits
index|[
name|i
index|]
operator|=
operator|new
name|IndividualHit
argument_list|(
name|i
argument_list|,
name|sf
operator|.
name|getFieldValue
argument_list|(
name|id
argument_list|)
argument_list|,
name|hitsCollection
operator|.
name|score
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|second
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|//logger.debug("HitsIterator.sortByField(): filling Obj[] took "+(second-first));
name|Arrays
operator|.
name|sort
argument_list|(
name|arrayOfIndividualHits
argument_list|,
name|c
argument_list|)
expr_stmt|;
comment|//logger.debug("HitsIterator.sortByField(): sort took "+(System.currentTimeMillis()-second));
block|}
DECL|method|setPageCount
specifier|private
name|void
name|setPageCount
parameter_list|()
block|{
if|if
condition|(
name|totalHits
operator|==
literal|0
condition|)
block|{
name|totalPages
operator|=
literal|0
expr_stmt|;
name|setCurrentPage
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|totalPages
operator|=
name|totalHits
operator|/
name|pageSize
expr_stmt|;
comment|//account for remainder if not exaxtly divisable
if|if
condition|(
name|totalHits
operator|%
name|pageSize
operator|!=
literal|0
condition|)
block|{
name|totalPages
operator|++
expr_stmt|;
block|}
name|setCurrentPage
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// reset currentPage to make sure not over the limit
block|}
block|}
DECL|method|getPageCount
specifier|public
name|int
name|getPageCount
parameter_list|()
block|{
return|return
name|totalPages
return|;
block|}
DECL|method|setPosition
specifier|public
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
name|setPosition
parameter_list|(
name|int
name|position
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|position
operator|>
name|totalHits
condition|)
block|{
return|return
literal|null
return|;
block|}
name|currentPosition
operator|=
name|position
expr_stmt|;
return|return
name|getDoc
argument_list|()
return|;
block|}
DECL|method|next
specifier|public
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|currentPosition
operator|++
expr_stmt|;
if|if
condition|(
name|currentPosition
operator|>
name|totalHits
condition|)
block|{
name|currentPosition
operator|=
name|totalHits
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|getDoc
argument_list|()
return|;
block|}
DECL|method|previous
specifier|public
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
name|previous
parameter_list|()
throws|throws
name|IOException
block|{
name|currentPosition
operator|--
expr_stmt|;
if|if
condition|(
name|currentPosition
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getDoc
argument_list|()
return|;
block|}
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|currentPosition
operator|<
name|endPagePosition
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|getDoc
specifier|public
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
name|getDoc
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Determine if using relevnace or sorting by another field
if|if
condition|(
name|arrayOfIndividualHits
operator|==
literal|null
condition|)
return|return
name|hitsCollection
operator|.
name|doc
argument_list|(
name|currentPosition
operator|-
literal|1
argument_list|)
return|;
else|else
block|{
name|int
name|i
init|=
operator|(
operator|(
name|IndividualHit
operator|)
name|arrayOfIndividualHits
index|[
name|currentPosition
operator|-
literal|1
index|]
operator|)
operator|.
name|getIndex
argument_list|()
decl_stmt|;
return|return
name|hitsCollection
operator|.
name|doc
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
DECL|method|getScore
specifier|public
name|int
name|getScore
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Determine if using relevnace or sorting by another field
if|if
condition|(
name|arrayOfIndividualHits
operator|==
literal|null
condition|)
return|return
call|(
name|int
call|)
argument_list|(
name|hitsCollection
operator|.
name|score
argument_list|(
name|currentPosition
operator|-
literal|1
argument_list|)
operator|*
literal|100.0f
argument_list|)
return|;
else|else
return|return
call|(
name|int
call|)
argument_list|(
operator|(
operator|(
name|IndividualHit
operator|)
name|arrayOfIndividualHits
index|[
name|currentPosition
operator|-
literal|1
index|]
operator|)
operator|.
name|getScore
argument_list|()
operator|*
literal|100.0f
argument_list|)
return|;
block|}
DECL|method|getTotalHits
specifier|public
name|int
name|getTotalHits
parameter_list|()
block|{
return|return
name|hitsCollection
operator|.
name|length
argument_list|()
return|;
block|}
DECL|method|getCurrentPosition
specifier|public
name|int
name|getCurrentPosition
parameter_list|()
block|{
return|return
name|currentPosition
return|;
block|}
DECL|method|getPageSize
specifier|public
name|int
name|getPageSize
parameter_list|()
block|{
return|return
name|pageSize
return|;
block|}
DECL|method|setPageSize
specifier|public
name|void
name|setPageSize
parameter_list|(
name|int
name|pageSize
parameter_list|)
block|{
name|this
operator|.
name|pageSize
operator|=
name|pageSize
expr_stmt|;
name|setPageCount
argument_list|()
expr_stmt|;
block|}
DECL|method|setCurrentPage
specifier|public
name|void
name|setCurrentPage
parameter_list|(
name|int
name|currentPage
parameter_list|)
throws|throws
name|IndexOutOfBoundsException
block|{
if|if
condition|(
name|currentPage
operator|>
name|totalPages
condition|)
block|{
name|currentPage
operator|=
name|totalPages
expr_stmt|;
comment|// don't allow to go over max
comment|//throw new IndexOutOfBoundsException("currentPage greater than total pages");
block|}
name|this
operator|.
name|currentPage
operator|=
name|currentPage
expr_stmt|;
name|currentPosition
operator|=
operator|(
operator|(
name|currentPage
operator|-
literal|1
operator|)
operator|*
name|pageSize
operator|)
expr_stmt|;
name|endPagePosition
operator|=
name|Math
operator|.
name|min
argument_list|(
operator|(
operator|(
name|currentPage
operator|-
literal|1
operator|)
operator|*
name|pageSize
operator|)
operator|+
name|pageSize
argument_list|,
name|totalHits
argument_list|)
expr_stmt|;
block|}
DECL|method|getCurrentPage
specifier|public
name|int
name|getCurrentPage
parameter_list|()
block|{
return|return
name|currentPage
return|;
block|}
comment|/**      * set page number to next page, unless last page, then      * always return last page number      *@return current page number      */
DECL|method|nextPage
specifier|public
name|int
name|nextPage
parameter_list|()
block|{
name|setCurrentPage
argument_list|(
name|currentPage
operator|++
argument_list|)
expr_stmt|;
return|return
name|getCurrentPage
argument_list|()
return|;
block|}
comment|/**      * set page number to previous page, unless first page,      * then always return first page number      *@return current page number      */
DECL|method|previousPage
specifier|public
name|int
name|previousPage
parameter_list|()
block|{
name|setCurrentPage
argument_list|(
name|currentPage
operator|--
argument_list|)
expr_stmt|;
return|return
name|getCurrentPage
argument_list|()
return|;
block|}
block|}
end_class
end_unit
