begin_unit
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation"  *    must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_import
import|import
name|com
operator|.
name|etymon
operator|.
name|pj
operator|.
name|Pdf
import|;
end_import
begin_import
import|import
name|com
operator|.
name|etymon
operator|.
name|pj
operator|.
name|exception
operator|.
name|InvalidPdfObjectException
import|;
end_import
begin_import
import|import
name|com
operator|.
name|etymon
operator|.
name|pj
operator|.
name|exception
operator|.
name|PjException
import|;
end_import
begin_import
import|import
name|com
operator|.
name|etymon
operator|.
name|pj
operator|.
name|object
operator|.
name|PjArray
import|;
end_import
begin_import
import|import
name|com
operator|.
name|etymon
operator|.
name|pj
operator|.
name|object
operator|.
name|PjObject
import|;
end_import
begin_import
import|import
name|com
operator|.
name|etymon
operator|.
name|pj
operator|.
name|object
operator|.
name|PjPage
import|;
end_import
begin_import
import|import
name|com
operator|.
name|etymon
operator|.
name|pj
operator|.
name|object
operator|.
name|PjStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Category
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import
begin_comment
comment|/**  *<p>  * Attempts to extract text from a PDF file.  *</p>  *<p>  *<a href="http://www.mail-archive.com/lucene-user@jakarta.apache.org/msg00280.html">  * Known limitations</a>  *</p>  *  * @author<a href="mailto:kelvint@apache.org">Kelvin Tan</a>  * @version $Revision$  */
end_comment
begin_class
DECL|class|PdfTextExtractor
specifier|public
class|class
name|PdfTextExtractor
block|{
DECL|field|cat
specifier|private
specifier|static
name|Category
name|cat
init|=
name|Category
operator|.
name|getInstance
argument_list|(
name|PdfTextExtractor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"/usr/local/test.pdf"
argument_list|)
decl_stmt|;
try|try
block|{
name|Pdf
name|pdf
init|=
operator|new
name|Pdf
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|pagecount
init|=
name|pdf
operator|.
name|getPageCount
argument_list|()
decl_stmt|;
name|cat
operator|.
name|debug
argument_list|(
name|f
operator|.
name|toString
argument_list|()
operator|+
literal|"has "
operator|+
name|pagecount
operator|+
literal|" pages."
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|pagecount
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|getContent
argument_list|(
name|pdf
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|cat
operator|.
name|error
argument_list|(
literal|"IOException parsing PDF file:"
operator|+
name|f
operator|.
name|toString
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PjException
name|pje
parameter_list|)
block|{
name|cat
operator|.
name|error
argument_list|(
literal|"PjException parsing PDF file:"
operator|+
name|f
operator|.
name|toString
argument_list|()
argument_list|,
name|pje
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getContent
specifier|private
specifier|static
name|String
name|getContent
parameter_list|(
name|Pdf
name|pdf
parameter_list|,
name|int
name|pageNo
parameter_list|)
block|{
name|String
name|content
init|=
literal|null
decl_stmt|;
name|PjStream
name|stream
init|=
literal|null
decl_stmt|;
name|StringBuffer
name|strbf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
try|try
block|{
name|PjPage
name|page
init|=
operator|(
name|PjPage
operator|)
name|pdf
operator|.
name|getObject
argument_list|(
name|pdf
operator|.
name|getPage
argument_list|(
name|pageNo
argument_list|)
argument_list|)
decl_stmt|;
name|PjObject
name|pobj
init|=
operator|(
name|PjObject
operator|)
name|pdf
operator|.
name|resolve
argument_list|(
name|page
operator|.
name|getContents
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pobj
operator|instanceof
name|PjArray
condition|)
block|{
name|PjArray
name|array
init|=
operator|(
name|PjArray
operator|)
name|pobj
decl_stmt|;
name|Vector
name|vArray
init|=
name|array
operator|.
name|getVector
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|vArray
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|size
condition|;
name|j
operator|++
control|)
block|{
name|stream
operator|=
operator|(
name|PjStream
operator|)
name|pdf
operator|.
name|resolve
argument_list|(
operator|(
name|PjObject
operator|)
name|vArray
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|strbf
operator|.
name|append
argument_list|(
name|getStringFromPjStream
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|content
operator|=
name|strbf
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|stream
operator|=
operator|(
name|PjStream
operator|)
name|pobj
expr_stmt|;
name|content
operator|=
name|getStringFromPjStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidPdfObjectException
name|pdfe
parameter_list|)
block|{
name|cat
operator|.
name|error
argument_list|(
literal|"Invalid PDF Object:"
operator|+
name|pdfe
argument_list|,
name|pdfe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|cat
operator|.
name|error
argument_list|(
literal|"Exception in getContent() "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|content
return|;
block|}
DECL|method|getStringFromPjStream
specifier|private
specifier|static
name|String
name|getStringFromPjStream
parameter_list|(
name|PjStream
name|stream
parameter_list|)
block|{
name|StringBuffer
name|strbf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|start
decl_stmt|,
name|end
init|=
literal|0
decl_stmt|;
name|stream
operator|=
name|stream
operator|.
name|flateDecompress
argument_list|()
expr_stmt|;
name|String
name|longString
init|=
name|stream
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|strlen
init|=
name|longString
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|lastIndex
init|=
name|longString
operator|.
name|lastIndexOf
argument_list|(
literal|')'
argument_list|)
decl_stmt|;
while|while
condition|(
name|lastIndex
operator|!=
operator|-
literal|1
operator|&&
name|end
operator|!=
name|lastIndex
condition|)
block|{
name|start
operator|=
name|longString
operator|.
name|indexOf
argument_list|(
literal|'('
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|end
operator|=
name|longString
operator|.
name|indexOf
argument_list|(
literal|')'
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|String
name|text
init|=
name|longString
operator|.
name|substring
argument_list|(
name|start
operator|+
literal|1
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|strbf
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidPdfObjectException
name|pdfe
parameter_list|)
block|{
name|cat
operator|.
name|error
argument_list|(
literal|"InvalidObjectException:"
operator|+
name|pdfe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|pdfe
argument_list|)
expr_stmt|;
block|}
return|return
name|strbf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
end_unit
