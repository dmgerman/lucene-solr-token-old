begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.br
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|br
package|;
end_package
begin_comment
comment|/**  * A stemmer for brazilian words. The algorithm is based on the report  * "A Fast and Simple Stemming Algorithm for German Words" by Jörg  * Caumanns (joerg.caumanns@isst.fhg.de).  *  * @author    Gerhard Schwarz  * @version   $Id$  */
end_comment
begin_class
DECL|class|BrazilianStemmer
specifier|public
class|class
name|BrazilianStemmer
block|{
comment|/** 	 * Changed term 	 */
DECL|field|TERM
specifier|private
name|String
name|TERM
decl_stmt|;
DECL|field|CT
specifier|private
name|String
name|CT
decl_stmt|;
DECL|field|R1
specifier|private
name|String
name|R1
decl_stmt|;
DECL|field|R2
specifier|private
name|String
name|R2
decl_stmt|;
DECL|field|RV
specifier|private
name|String
name|RV
decl_stmt|;
comment|/** 	 * Buffer for the terms while stemming them. 	 */
DECL|field|sb
specifier|private
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
comment|/** 	 * Amount of characters that are removed with<tt>substitute()</tt> while stemming. 	 */
DECL|field|substCount
specifier|private
name|int
name|substCount
init|=
literal|0
decl_stmt|;
DECL|method|BrazilianStemmer
specifier|public
name|BrazilianStemmer
parameter_list|()
block|{ 	}
comment|/** 	 * Stemms the given term to an unique<tt>discriminator</tt>. 	 * 	 * @param word  The term that should be stemmed. 	 * @return      Discriminator for<tt>term</tt> 	 */
DECL|method|stem
specifier|protected
name|String
name|stem
parameter_list|(
name|String
name|term
parameter_list|)
block|{
name|boolean
name|altered
init|=
literal|false
decl_stmt|;
comment|// altered the term
comment|// creates CT
name|createCT
argument_list|(
name|term
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isIndexable
argument_list|(
name|CT
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|isStemmable
argument_list|(
name|CT
argument_list|)
condition|)
block|{
return|return
name|CT
return|;
block|}
name|R1
operator|=
name|getR1
argument_list|(
name|CT
argument_list|)
expr_stmt|;
name|R2
operator|=
name|getR1
argument_list|(
name|R1
argument_list|)
expr_stmt|;
name|RV
operator|=
name|getRV
argument_list|(
name|CT
argument_list|)
expr_stmt|;
name|TERM
operator|=
name|term
operator|+
literal|";"
operator|+
name|CT
expr_stmt|;
name|altered
operator|=
name|step1
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|altered
condition|)
block|{
name|altered
operator|=
name|step2
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|altered
condition|)
block|{
name|step3
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|step4
argument_list|()
expr_stmt|;
block|}
name|step5
argument_list|()
expr_stmt|;
return|return
name|CT
return|;
block|}
comment|/** 	 * Checks a term if it can be processed correctly. 	 * 	 * @return  true if, and only if, the given term consists in letters. 	 */
DECL|method|isStemmable
specifier|private
name|boolean
name|isStemmable
parameter_list|(
name|String
name|term
parameter_list|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|term
operator|.
name|length
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
comment|// Discard terms that contain non-letter characters.
if|if
condition|(
operator|!
name|Character
operator|.
name|isLetter
argument_list|(
name|term
operator|.
name|charAt
argument_list|(
name|c
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 * Checks a term if it can be processed indexed. 	 * 	 * @return  true if it can be indexed 	 */
DECL|method|isIndexable
specifier|private
name|boolean
name|isIndexable
parameter_list|(
name|String
name|term
parameter_list|)
block|{
return|return
operator|(
name|term
operator|.
name|length
argument_list|()
operator|<
literal|30
operator|)
operator|&&
operator|(
name|term
operator|.
name|length
argument_list|()
operator|>
literal|2
operator|)
return|;
block|}
comment|/** 	 * See if string is 'a','e','i','o','u'    *    * @return true if is vowel 	 */
DECL|method|isVowel
specifier|private
name|boolean
name|isVowel
parameter_list|(
name|char
name|value
parameter_list|)
block|{
return|return
operator|(
name|value
operator|==
literal|'a'
operator|)
operator|||
operator|(
name|value
operator|==
literal|'e'
operator|)
operator|||
operator|(
name|value
operator|==
literal|'i'
operator|)
operator|||
operator|(
name|value
operator|==
literal|'o'
operator|)
operator|||
operator|(
name|value
operator|==
literal|'u'
operator|)
return|;
block|}
comment|/** 	 * Gets R1    *    * R1 - is the region after the first non-vowel follwing a vowel,    *      or is the null region at the end of the word if there is    *      no such non-vowel.    *    * @return null or a string representing R1 	 */
DECL|method|getR1
specifier|private
name|String
name|getR1
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
name|int
name|j
decl_stmt|;
name|String
name|r1
init|=
literal|null
decl_stmt|;
comment|// be-safe !!!
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// find 1st vowel
name|i
operator|=
name|value
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|i
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|isVowel
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
block|{
break|break ;
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|j
operator|<
name|i
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// find 1st non-vowel
for|for
control|(
init|;
name|j
operator|<
name|i
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|isVowel
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
argument_list|)
operator|)
condition|)
block|{
break|break ;
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|j
operator|<
name|i
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|value
operator|.
name|substring
argument_list|(
name|j
operator|+
literal|1
argument_list|)
return|;
block|}
comment|/** 	 * Gets RV    *    * RV - IF the second letter is a consoant, RV is the region after    *      the next following vowel,    *    *      OR if the first two letters are vowels, RV is the region    *      after the next consoant,    *    *      AND otherwise (consoant-vowel case) RV is the region after    *      the third letter.    *    *      BUT RV is the end of the word if this positions cannot be    *      found.    *    * @return null or a string representing RV 	 */
DECL|method|getRV
specifier|private
name|String
name|getRV
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
name|int
name|j
decl_stmt|;
name|String
name|r1
init|=
literal|null
decl_stmt|;
comment|// be-safe !!!
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|i
operator|=
name|value
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
comment|// RV - IF the second letter is a consoant, RV is the region after
comment|//      the next following vowel,
if|if
condition|(
operator|(
name|i
operator|>
literal|0
operator|)
operator|&&
operator|!
name|isVowel
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
comment|// find 1st vowel
for|for
control|(
name|j
operator|=
literal|2
init|;
name|j
operator|<
name|i
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|isVowel
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
block|{
break|break ;
block|}
block|}
if|if
condition|(
name|j
operator|<
name|i
condition|)
block|{
return|return
name|value
operator|.
name|substring
argument_list|(
name|j
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
comment|// RV - OR if the first two letters are vowels, RV is the region
comment|//      after the next consoant,
if|if
condition|(
operator|(
name|i
operator|>
literal|1
operator|)
operator|&&
name|isVowel
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|&&
name|isVowel
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
comment|// find 1st consoant
for|for
control|(
name|j
operator|=
literal|2
init|;
name|j
operator|<
name|i
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|isVowel
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
block|{
break|break ;
block|}
block|}
if|if
condition|(
name|j
operator|<
name|i
condition|)
block|{
return|return
name|value
operator|.
name|substring
argument_list|(
name|j
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
comment|// RV - AND otherwise (consoant-vowel case) RV is the region after
comment|//      the third letter.
if|if
condition|(
name|i
operator|>
literal|2
condition|)
block|{
return|return
name|value
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * 1) Turn to lowercase    * 2) Remove accents    * 3) ã -> a ; õ -> o    * 4) ç -> c    *    * @return null or a string transformed 	 */
DECL|method|changeTerm
specifier|private
name|String
name|changeTerm
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
name|int
name|j
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
comment|// be-safe !!!
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|value
operator|=
name|value
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|value
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|value
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
operator|==
literal|'á'
operator|)
operator|||
operator|(
name|value
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
operator|==
literal|'â'
operator|)
operator|||
operator|(
name|value
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
operator|==
literal|'ã'
operator|)
condition|)
block|{
name|r
operator|=
name|r
operator|+
literal|"a"
expr_stmt|;
continue|continue ;
block|}
if|if
condition|(
operator|(
name|value
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
operator|==
literal|'é'
operator|)
operator|||
operator|(
name|value
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
operator|==
literal|'ê'
operator|)
condition|)
block|{
name|r
operator|=
name|r
operator|+
literal|"e"
expr_stmt|;
continue|continue ;
block|}
if|if
condition|(
name|value
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
operator|==
literal|'í'
condition|)
block|{
name|r
operator|=
name|r
operator|+
literal|"i"
expr_stmt|;
continue|continue ;
block|}
if|if
condition|(
operator|(
name|value
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
operator|==
literal|'ó'
operator|)
operator|||
operator|(
name|value
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
operator|==
literal|'ô'
operator|)
operator|||
operator|(
name|value
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
operator|==
literal|'õ'
operator|)
condition|)
block|{
name|r
operator|=
name|r
operator|+
literal|"o"
expr_stmt|;
continue|continue ;
block|}
if|if
condition|(
operator|(
name|value
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
operator|==
literal|'ú'
operator|)
operator|||
operator|(
name|value
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
operator|==
literal|'ü'
operator|)
condition|)
block|{
name|r
operator|=
name|r
operator|+
literal|"u"
expr_stmt|;
continue|continue ;
block|}
if|if
condition|(
name|value
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
operator|==
literal|'ç'
condition|)
block|{
name|r
operator|=
name|r
operator|+
literal|"c"
expr_stmt|;
continue|continue ;
block|}
if|if
condition|(
name|value
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
operator|==
literal|'ñ'
condition|)
block|{
name|r
operator|=
name|r
operator|+
literal|"n"
expr_stmt|;
continue|continue ;
block|}
name|r
operator|=
name|r
operator|+
name|value
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
comment|/**    * Check if a string ends with a suffix    *    * @return true if the string ends with the specified suffix 	 */
DECL|method|suffix
specifier|private
name|boolean
name|suffix
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
comment|// be-safe !!!
if|if
condition|(
operator|(
name|value
operator|==
literal|null
operator|)
operator|||
operator|(
name|suffix
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|suffix
operator|.
name|length
argument_list|()
operator|>
name|value
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|value
operator|.
name|substring
argument_list|(
name|value
operator|.
name|length
argument_list|()
operator|-
name|suffix
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|suffix
argument_list|)
return|;
block|}
comment|/**    * Replace a string suffix by another    *    * @return the replaced String 	 */
DECL|method|replaceSuffix
specifier|private
name|String
name|replaceSuffix
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|toReplace
parameter_list|,
name|String
name|changeTo
parameter_list|)
block|{
name|String
name|vvalue
decl_stmt|;
comment|// be-safe !!!
if|if
condition|(
operator|(
name|value
operator|==
literal|null
operator|)
operator|||
operator|(
name|toReplace
operator|==
literal|null
operator|)
operator|||
operator|(
name|changeTo
operator|==
literal|null
operator|)
condition|)
block|{
return|return
name|value
return|;
block|}
name|vvalue
operator|=
name|removeSuffix
argument_list|(
name|value
argument_list|,
name|toReplace
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
name|vvalue
argument_list|)
condition|)
block|{
return|return
name|value
return|;
block|}
else|else
block|{
return|return
name|vvalue
operator|+
name|changeTo
return|;
block|}
block|}
comment|/**    * Remove a string suffix    *    * @return the String without the suffix 	 */
DECL|method|removeSuffix
specifier|private
name|String
name|removeSuffix
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|toRemove
parameter_list|)
block|{
comment|// be-safe !!!
if|if
condition|(
operator|(
name|value
operator|==
literal|null
operator|)
operator|||
operator|(
name|toRemove
operator|==
literal|null
operator|)
operator|||
operator|!
name|suffix
argument_list|(
name|value
argument_list|,
name|toRemove
argument_list|)
condition|)
block|{
return|return
name|value
return|;
block|}
return|return
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|()
operator|-
name|toRemove
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * See if a suffix is preceded by a String    *    * @return true if the suffix is preceded 	 */
DECL|method|suffixPreceded
specifier|private
name|boolean
name|suffixPreceded
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|suffix
parameter_list|,
name|String
name|preceded
parameter_list|)
block|{
comment|// be-safe !!!
if|if
condition|(
operator|(
name|value
operator|==
literal|null
operator|)
operator|||
operator|(
name|suffix
operator|==
literal|null
operator|)
operator|||
operator|(
name|preceded
operator|==
literal|null
operator|)
operator|||
operator|!
name|suffix
argument_list|(
name|value
argument_list|,
name|suffix
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|suffix
argument_list|(
name|removeSuffix
argument_list|(
name|value
argument_list|,
name|suffix
argument_list|)
argument_list|,
name|preceded
argument_list|)
return|;
block|}
comment|/** 	 * Creates CT (changed term) , substituting * 'ã' and 'õ' for 'a~' and 'o~'. 	 */
DECL|method|createCT
specifier|private
name|void
name|createCT
parameter_list|(
name|String
name|term
parameter_list|)
block|{
name|CT
operator|=
name|changeTerm
argument_list|(
name|term
argument_list|)
expr_stmt|;
if|if
condition|(
name|CT
operator|.
name|length
argument_list|()
operator|<
literal|2
condition|)
return|return ;
comment|// if the first character is ... , remove it
if|if
condition|(
operator|(
name|CT
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'"'
operator|)
operator|||
operator|(
name|CT
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'\''
operator|)
operator|||
operator|(
name|CT
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'-'
operator|)
operator|||
operator|(
name|CT
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|','
operator|)
operator|||
operator|(
name|CT
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|';'
operator|)
operator|||
operator|(
name|CT
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'.'
operator|)
operator|||
operator|(
name|CT
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'?'
operator|)
operator|||
operator|(
name|CT
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'!'
operator|)
condition|)
block|{
name|CT
operator|=
name|CT
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|CT
operator|.
name|length
argument_list|()
operator|<
literal|2
condition|)
return|return ;
comment|// if the last character is ... , remove it
if|if
condition|(
operator|(
name|CT
operator|.
name|charAt
argument_list|(
name|CT
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'-'
operator|)
operator|||
operator|(
name|CT
operator|.
name|charAt
argument_list|(
name|CT
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|','
operator|)
operator|||
operator|(
name|CT
operator|.
name|charAt
argument_list|(
name|CT
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|';'
operator|)
operator|||
operator|(
name|CT
operator|.
name|charAt
argument_list|(
name|CT
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'.'
operator|)
operator|||
operator|(
name|CT
operator|.
name|charAt
argument_list|(
name|CT
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'?'
operator|)
operator|||
operator|(
name|CT
operator|.
name|charAt
argument_list|(
name|CT
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'!'
operator|)
operator|||
operator|(
name|CT
operator|.
name|charAt
argument_list|(
name|CT
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'\''
operator|)
operator|||
operator|(
name|CT
operator|.
name|charAt
argument_list|(
name|CT
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'"'
operator|)
condition|)
block|{
name|CT
operator|=
name|CT
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|CT
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Standart suffix removal.    * Search for the longest among the following suffixes, and perform    * the following actions:    *    * @return false if no ending was removed 	 */
DECL|method|step1
specifier|private
name|boolean
name|step1
parameter_list|()
block|{
if|if
condition|(
name|CT
operator|==
literal|null
condition|)
return|return
literal|false
return|;
comment|// suffix lenght = 7
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"uciones"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"uciones"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|replaceSuffix
argument_list|(
name|CT
argument_list|,
literal|"uciones"
argument_list|,
literal|"u"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// suffix lenght = 6
if|if
condition|(
name|CT
operator|.
name|length
argument_list|()
operator|>=
literal|6
condition|)
block|{
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"imentos"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"imentos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"imentos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"amentos"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"amentos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"amentos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"adores"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"adores"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"adores"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"adoras"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"adoras"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"adoras"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"logias"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"logias"
argument_list|)
condition|)
block|{
name|replaceSuffix
argument_list|(
name|CT
argument_list|,
literal|"logias"
argument_list|,
literal|"log"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"encias"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"encias"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|replaceSuffix
argument_list|(
name|CT
argument_list|,
literal|"encias"
argument_list|,
literal|"ente"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"amente"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R1
argument_list|,
literal|"amente"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"amente"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"idades"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"idades"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"idades"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// suffix lenght = 5
if|if
condition|(
name|CT
operator|.
name|length
argument_list|()
operator|>=
literal|5
condition|)
block|{
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"acoes"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"acoes"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"acoes"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"imento"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"imento"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"imento"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"amento"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"amento"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"amento"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"adora"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"adora"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"adora"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"ismos"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"ismos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ismos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"istas"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"istas"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"istas"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"logia"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"logia"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|replaceSuffix
argument_list|(
name|CT
argument_list|,
literal|"logia"
argument_list|,
literal|"log"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"ucion"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"ucion"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|replaceSuffix
argument_list|(
name|CT
argument_list|,
literal|"ucion"
argument_list|,
literal|"u"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"encia"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"encia"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|replaceSuffix
argument_list|(
name|CT
argument_list|,
literal|"encia"
argument_list|,
literal|"ente"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"mente"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"mente"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"mente"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"idade"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"idade"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"idade"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// suffix lenght = 4
if|if
condition|(
name|CT
operator|.
name|length
argument_list|()
operator|>=
literal|4
condition|)
block|{
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"acao"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"acao"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"acao"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"ezas"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"ezas"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ezas"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"icos"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"icos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"icos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"icas"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"icas"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"icas"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"ismo"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"ismo"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ismo"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"avel"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"avel"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"avel"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"ivel"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"ivel"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ivel"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"ista"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"ista"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ista"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"osos"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"osos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"osos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"osas"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"osas"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"osas"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"ador"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"ador"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ador"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"ivas"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"ivas"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ivas"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"ivos"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"ivos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ivos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"iras"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"iras"
argument_list|)
operator|&&
name|suffixPreceded
argument_list|(
name|CT
argument_list|,
literal|"iras"
argument_list|,
literal|"e"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|replaceSuffix
argument_list|(
name|CT
argument_list|,
literal|"iras"
argument_list|,
literal|"ir"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// suffix lenght = 3
if|if
condition|(
name|CT
operator|.
name|length
argument_list|()
operator|>=
literal|3
condition|)
block|{
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"eza"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"eza"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"eza"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"ico"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"ico"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ico"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"ica"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"ica"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ica"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"oso"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"oso"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"oso"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"osa"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"osa"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"osa"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"iva"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"iva"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"iva"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"ivo"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|R2
argument_list|,
literal|"ivo"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ivo"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|CT
argument_list|,
literal|"ira"
argument_list|)
operator|&&
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ira"
argument_list|)
operator|&&
name|suffixPreceded
argument_list|(
name|CT
argument_list|,
literal|"ira"
argument_list|,
literal|"e"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|replaceSuffix
argument_list|(
name|CT
argument_list|,
literal|"ira"
argument_list|,
literal|"ir"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// no ending was removed by step1
return|return
literal|false
return|;
block|}
comment|/** 	 * Verb suffixes.    *    * Search for the longest among the following suffixes in RV,    * and if found, delete.    *    * @return false if no ending was removed 	*/
DECL|method|step2
specifier|private
name|boolean
name|step2
parameter_list|()
block|{
if|if
condition|(
name|RV
operator|==
literal|null
condition|)
return|return
literal|false
return|;
comment|// suffix lenght = 7
if|if
condition|(
name|RV
operator|.
name|length
argument_list|()
operator|>=
literal|7
condition|)
block|{
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"issemos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"issemos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"essemos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"essemos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"assemos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"assemos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ariamos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ariamos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"eriamos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"eriamos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"iriamos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"iriamos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// suffix lenght = 6
if|if
condition|(
name|RV
operator|.
name|length
argument_list|()
operator|>=
literal|6
condition|)
block|{
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"iremos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"iremos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"eremos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"eremos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"aremos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"aremos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"avamos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"avamos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"iramos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"iramos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"eramos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"eramos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"aramos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"aramos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"asseis"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"asseis"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"esseis"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"esseis"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"isseis"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"isseis"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"arieis"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"arieis"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"erieis"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"erieis"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"irieis"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"irieis"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// suffix lenght = 5
if|if
condition|(
name|RV
operator|.
name|length
argument_list|()
operator|>=
literal|5
condition|)
block|{
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"irmos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"irmos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"iamos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"iamos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"armos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"armos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ermos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ermos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"areis"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"areis"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ereis"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ereis"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ireis"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ireis"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"asses"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"asses"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"esses"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"esses"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"isses"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"isses"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"astes"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"astes"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"assem"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"assem"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"essem"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"essem"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"issem"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"issem"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ardes"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ardes"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"erdes"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"erdes"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"irdes"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"irdes"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ariam"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ariam"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"eriam"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"eriam"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"iriam"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"iriam"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"arias"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"arias"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"erias"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"erias"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"irias"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"irias"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"estes"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"estes"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"istes"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"istes"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"areis"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"areis"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"aveis"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"aveis"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// suffix lenght = 4
if|if
condition|(
name|RV
operator|.
name|length
argument_list|()
operator|>=
literal|4
condition|)
block|{
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"aria"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"aria"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"eria"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"eria"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"iria"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"iria"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"asse"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"asse"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"esse"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"esse"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"isse"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"isse"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"aste"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"aste"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"este"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"este"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"iste"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"iste"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"arei"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"arei"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"erei"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"erei"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"irei"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"irei"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"aram"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"aram"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"eram"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"eram"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"iram"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"iram"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"avam"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"avam"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"arem"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"arem"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"erem"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"erem"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"irem"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"irem"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ando"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ando"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"endo"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"endo"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"indo"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"indo"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"arao"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"arao"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"erao"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"erao"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"irao"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"irao"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"adas"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"adas"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"idas"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"idas"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"aras"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"aras"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"eras"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"eras"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"iras"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"iras"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"avas"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"avas"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ares"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ares"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"eres"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"eres"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ires"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ires"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ados"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ados"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"idos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"idos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"amos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"amos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"emos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"emos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"imos"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"imos"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"iras"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"iras"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ieis"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ieis"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// suffix lenght = 3
if|if
condition|(
name|RV
operator|.
name|length
argument_list|()
operator|>=
literal|3
condition|)
block|{
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ada"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ada"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ida"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ida"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ara"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ara"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"era"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"era"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ira"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ava"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"iam"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"iam"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ado"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ado"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ido"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ido"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ias"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ias"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ais"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ais"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"eis"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"eis"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ira"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ira"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ear"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ear"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// suffix lenght = 2
if|if
condition|(
name|RV
operator|.
name|length
argument_list|()
operator|>=
literal|2
condition|)
block|{
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ia"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ia"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ei"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ei"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"am"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"am"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"em"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"em"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ar"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ar"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"er"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"er"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ir"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ir"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"as"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"as"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"es"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"es"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"is"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"is"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"eu"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"eu"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"iu"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"iu"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"iu"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"iu"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"ou"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"ou"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// no ending was removed by step2
return|return
literal|false
return|;
block|}
comment|/** 	 * Delete suffix 'i' if in RV and preceded by 'c'    * 	*/
DECL|method|step3
specifier|private
name|void
name|step3
parameter_list|()
block|{
if|if
condition|(
name|RV
operator|==
literal|null
condition|)
return|return ;
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"i"
argument_list|)
operator|&&
name|suffixPreceded
argument_list|(
name|RV
argument_list|,
literal|"i"
argument_list|,
literal|"c"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"i"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Residual suffix    *    * If the word ends with one of the suffixes (os a i o á í ó)    * in RV, delete it    * 	*/
DECL|method|step4
specifier|private
name|void
name|step4
parameter_list|()
block|{
if|if
condition|(
name|RV
operator|==
literal|null
condition|)
return|return  ;
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"os"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"os"
argument_list|)
expr_stmt|;
return|return ;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"a"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
return|return ;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"i"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"i"
argument_list|)
expr_stmt|;
return|return ;
block|}
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"o"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"o"
argument_list|)
expr_stmt|;
return|return ;
block|}
block|}
comment|/** 	 * If the word ends with one of ( e é ê) in RV,delete it,    * and if preceded by 'gu' (or 'ci') with the 'u' (or 'i') in RV,    * delete the 'u' (or 'i')    *    * Or if the word ends ç remove the cedilha    * 	*/
DECL|method|step5
specifier|private
name|void
name|step5
parameter_list|()
block|{
if|if
condition|(
name|RV
operator|==
literal|null
condition|)
return|return  ;
if|if
condition|(
name|suffix
argument_list|(
name|RV
argument_list|,
literal|"e"
argument_list|)
condition|)
block|{
if|if
condition|(
name|suffixPreceded
argument_list|(
name|RV
argument_list|,
literal|"e"
argument_list|,
literal|"gu"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"u"
argument_list|)
expr_stmt|;
return|return ;
block|}
if|if
condition|(
name|suffixPreceded
argument_list|(
name|RV
argument_list|,
literal|"e"
argument_list|,
literal|"ci"
argument_list|)
condition|)
block|{
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"i"
argument_list|)
expr_stmt|;
return|return ;
block|}
name|CT
operator|=
name|removeSuffix
argument_list|(
name|CT
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
return|return ;
block|}
block|}
comment|/** 	 * For log and debug purpose 	 * 	 * @return  TERM, CT, RV, R1 and R2 	 */
DECL|method|log
specifier|public
name|String
name|log
parameter_list|()
block|{
return|return
literal|" (TERM = "
operator|+
name|TERM
operator|+
literal|")"
operator|+
literal|" (CT = "
operator|+
name|CT
operator|+
literal|")"
operator|+
literal|" (RV = "
operator|+
name|RV
operator|+
literal|")"
operator|+
literal|" (R1 = "
operator|+
name|R1
operator|+
literal|")"
operator|+
literal|" (R2 = "
operator|+
name|R2
operator|+
literal|")"
return|;
block|}
block|}
end_class
end_unit
