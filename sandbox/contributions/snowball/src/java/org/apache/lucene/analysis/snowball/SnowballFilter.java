begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.snowball
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|snowball
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|snowball
operator|.
name|SnowballProgram
import|;
end_import
begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|snowball
operator|.
name|ext
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_comment
comment|/** A filter that stems words using a Snowball-generated stemmer.  *  * Available stemmers are listed in {@link net.sf.snowball.ext}.  The name of a  * stemmer is the part of the class name before "Stemmer", e.g., the stemmer in  * {@link EnglishStemmer} is named "English".  */
end_comment
begin_class
DECL|class|SnowballFilter
specifier|public
class|class
name|SnowballFilter
extends|extends
name|TokenFilter
block|{
DECL|field|EMPTY_ARGS
specifier|private
specifier|static
specifier|final
name|Object
index|[]
name|EMPTY_ARGS
init|=
operator|new
name|Object
index|[
literal|0
index|]
decl_stmt|;
DECL|field|stemmer
specifier|private
name|SnowballProgram
name|stemmer
decl_stmt|;
DECL|field|stemMethod
specifier|private
name|Method
name|stemMethod
decl_stmt|;
comment|/** Construct the named stemming filter.    *    * @param in the input tokens to stem    * @param name the name of a stemmer    */
DECL|method|SnowballFilter
specifier|public
name|SnowballFilter
parameter_list|(
name|TokenStream
name|in
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
try|try
block|{
name|Class
name|stemClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"net.sf.snowball.ext."
operator|+
name|name
operator|+
literal|"Stemmer"
argument_list|)
decl_stmt|;
name|stemmer
operator|=
operator|(
name|SnowballProgram
operator|)
name|stemClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
comment|// why doesn't the SnowballProgram class have an (abstract?) stem method?
name|stemMethod
operator|=
name|stemClass
operator|.
name|getMethod
argument_list|(
literal|"stem"
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/** Returns the next input Token, after being stemmed */
DECL|method|next
specifier|public
specifier|final
name|Token
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|Token
name|token
init|=
name|input
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|stemmer
operator|.
name|setCurrent
argument_list|(
name|token
operator|.
name|termText
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|stemMethod
operator|.
name|invoke
argument_list|(
name|stemmer
argument_list|,
name|EMPTY_ARGS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|Token
argument_list|(
name|stemmer
operator|.
name|getCurrent
argument_list|()
argument_list|,
name|token
operator|.
name|startOffset
argument_list|()
argument_list|,
name|token
operator|.
name|endOffset
argument_list|()
argument_list|,
name|token
operator|.
name|type
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class
end_unit
