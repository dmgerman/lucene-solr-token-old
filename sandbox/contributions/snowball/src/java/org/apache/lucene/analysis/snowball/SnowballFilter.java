begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.snowball
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|snowball
package|;
end_package
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|snowball
operator|.
name|SnowballProgram
import|;
end_import
begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|snowball
operator|.
name|ext
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_comment
comment|/** A filter that stems words using a Snowball-generated stemmer.  *  * Available stemmers are listed in {@link net.sf.snowball.ext}.  The name of a  * stemmer is the part of the class name before "Stemmer", e.g., the stemmer in  * {@link EnglishStemmer} is named "English".  */
end_comment
begin_class
DECL|class|SnowballFilter
specifier|public
class|class
name|SnowballFilter
extends|extends
name|TokenFilter
block|{
DECL|field|EMPTY_ARGS
specifier|private
specifier|static
specifier|final
name|Object
index|[]
name|EMPTY_ARGS
init|=
operator|new
name|Object
index|[
literal|0
index|]
decl_stmt|;
DECL|field|stemmer
specifier|private
name|SnowballProgram
name|stemmer
decl_stmt|;
DECL|field|stemMethod
specifier|private
name|Method
name|stemMethod
decl_stmt|;
comment|/** Construct the named stemming filter.    *    * @param in the input tokens to stem    * @param in the name of a stemmer    */
DECL|method|SnowballFilter
specifier|public
name|SnowballFilter
parameter_list|(
name|TokenStream
name|in
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|input
operator|=
name|in
expr_stmt|;
try|try
block|{
name|Class
name|stemClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"net.sf.snowball.ext."
operator|+
name|name
operator|+
literal|"Stemmer"
argument_list|)
decl_stmt|;
name|stemmer
operator|=
operator|(
name|SnowballProgram
operator|)
name|stemClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|stemMethod
operator|=
name|stemClass
operator|.
name|getMethod
argument_list|(
literal|"stem"
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** Returns the next input Token, after being stemmed */
DECL|method|next
specifier|public
specifier|final
name|Token
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|Token
name|token
init|=
name|input
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|stemmer
operator|.
name|setCurrent
argument_list|(
name|token
operator|.
name|termText
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|stemMethod
operator|.
name|invoke
argument_list|(
name|stemmer
argument_list|,
name|EMPTY_ARGS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|Token
argument_list|(
name|stemmer
operator|.
name|getCurrent
argument_list|()
argument_list|,
name|token
operator|.
name|startOffset
argument_list|()
argument_list|,
name|token
operator|.
name|endOffset
argument_list|()
argument_list|,
name|token
operator|.
name|type
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class
end_unit
