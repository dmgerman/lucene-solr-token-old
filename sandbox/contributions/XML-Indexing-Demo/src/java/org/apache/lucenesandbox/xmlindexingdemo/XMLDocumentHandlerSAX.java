begin_unit
begin_package
DECL|package|org.apache.lucenesandbox.xmlindexingdemo
package|package
name|org
operator|.
name|apache
operator|.
name|lucenesandbox
operator|.
name|xmlindexingdemo
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import
begin_class
DECL|class|XMLDocumentHandlerSAX
specifier|public
class|class
name|XMLDocumentHandlerSAX
extends|extends
name|DefaultHandler
block|{
comment|/** A buffer for each XML element */
DECL|field|elementBuffer
specifier|private
name|StringBuffer
name|elementBuffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
DECL|field|mDocument
specifier|private
name|Document
name|mDocument
decl_stmt|;
comment|// constructor
DECL|method|XMLDocumentHandlerSAX
specifier|public
name|XMLDocumentHandlerSAX
parameter_list|(
name|File
name|xmlFile
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|SAXException
throws|,
name|IOException
block|{
name|SAXParserFactory
name|spf
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// use validating parser?
comment|//spf.setValidating(false);
comment|// make parser name space aware?
comment|//spf.setNamespaceAware(true);
name|SAXParser
name|parser
init|=
name|spf
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
comment|//System.out.println("parser is validating: " + parser.isValidating());
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
name|xmlFile
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
name|spe
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SAXParser caught SAXParseException at line: "
operator|+
name|spe
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|" column "
operator|+
name|spe
operator|.
name|getColumnNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// call at document start
DECL|method|startDocument
specifier|public
name|void
name|startDocument
parameter_list|()
throws|throws
name|SAXException
block|{
name|mDocument
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
block|}
comment|// call at element start
DECL|method|startElement
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qualifiedName
parameter_list|,
name|Attributes
name|attrs
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|eName
init|=
name|localName
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|eName
argument_list|)
condition|)
block|{
name|eName
operator|=
name|qualifiedName
expr_stmt|;
comment|// namespaceAware = false
block|}
comment|// list the attribute(s)
if|if
condition|(
name|attrs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|aName
init|=
name|attrs
operator|.
name|getLocalName
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Attr name
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|aName
argument_list|)
condition|)
block|{
name|aName
operator|=
name|attrs
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|// perform application specific action on attribute(s)
comment|// for now just dump out attribute name and value
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"attr "
operator|+
name|aName
operator|+
literal|"="
operator|+
name|attrs
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|elementBuffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// call when cdata found
DECL|method|characters
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
name|elementBuffer
operator|.
name|append
argument_list|(
name|text
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|// call at element end
DECL|method|endElement
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|simpleName
parameter_list|,
name|String
name|qualifiedName
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|eName
init|=
name|simpleName
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|eName
argument_list|)
condition|)
block|{
name|eName
operator|=
name|qualifiedName
expr_stmt|;
comment|// namespaceAware = false
block|}
name|mDocument
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|eName
argument_list|,
name|elementBuffer
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getDocument
specifier|public
name|Document
name|getDocument
parameter_list|()
block|{
return|return
name|mDocument
return|;
block|}
block|}
end_class
end_unit
