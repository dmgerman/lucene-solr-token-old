begin_unit
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fulcrum
operator|.
name|InitializationException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fulcrum
operator|.
name|ServiceException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Category
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * Implementation of {@link SearchService}.  */
end_comment
begin_class
DECL|class|LuceneSearchService
specifier|public
class|class
name|LuceneSearchService
extends|extends
name|org
operator|.
name|apache
operator|.
name|fulcrum
operator|.
name|BaseService
implements|implements
name|SearchService
block|{
comment|/**      * Log4j category.      */
DECL|field|cat
specifier|private
specifier|static
name|Category
name|cat
init|=
name|Category
operator|.
name|getInstance
argument_list|(
name|LuceneSearchService
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The analyzer used for searching and indexing. Analyzers have no      * state so its ok to return the same analyzer to clients.      */
DECL|field|analyzer
specifier|private
name|Analyzer
name|analyzer
decl_stmt|;
comment|/**      * Is the index locked?      */
DECL|field|indexLocked
specifier|private
name|boolean
name|indexLocked
init|=
literal|false
decl_stmt|;
comment|/**      * Filesystem location of the index.      */
DECL|field|searchIndexLocation
specifier|private
name|String
name|searchIndexLocation
decl_stmt|;
DECL|method|init
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|InitializationException
block|{
name|searchIndexLocation
operator|=
name|getConfiguration
argument_list|()
operator|.
name|getString
argument_list|(
name|SearchService
operator|.
name|INDEX_LOCATION_KEY
argument_list|)
expr_stmt|;
name|setInit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|search
specifier|public
name|SearchResults
name|search
parameter_list|(
name|Query
name|query
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|search
argument_list|(
name|query
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|search
specifier|public
name|SearchResults
name|search
parameter_list|(
name|Query
name|query
parameter_list|,
name|Filter
name|filter
parameter_list|)
throws|throws
name|ServiceException
block|{
name|Searcher
name|searcher
init|=
literal|null
decl_stmt|;
name|SearchResults
name|results
init|=
literal|null
decl_stmt|;
try|try
block|{
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|searchIndexLocation
argument_list|)
expr_stmt|;
name|Hits
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|results
operator|=
operator|new
name|SearchResults
argument_list|(
name|hits
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"Error encountered searching!"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|searcher
operator|!=
literal|null
condition|)
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"Error encountered searching!"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
return|return
name|results
return|;
block|}
block|}
DECL|method|search
specifier|public
name|SearchResults
name|search
parameter_list|(
name|Query
name|query
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
throws|throws
name|ServiceException
block|{
name|Searcher
name|searcher
init|=
literal|null
decl_stmt|;
name|SearchResults
name|results
init|=
literal|null
decl_stmt|;
try|try
block|{
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|searchIndexLocation
argument_list|)
expr_stmt|;
name|Hits
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|results
operator|=
operator|new
name|SearchResults
argument_list|(
name|hits
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"Error encountered searching!"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|searcher
operator|!=
literal|null
condition|)
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"Error encountered searching!"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
return|return
name|results
return|;
block|}
block|}
DECL|method|batchIndex
specifier|public
name|void
name|batchIndex
parameter_list|()
throws|throws
name|ServiceException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|isIndexing
specifier|public
name|boolean
name|isIndexing
parameter_list|()
block|{
return|return
name|indexLocked
return|;
block|}
DECL|method|getAnalyzer
specifier|public
name|Analyzer
name|getAnalyzer
parameter_list|()
block|{
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
name|analyzer
operator|=
operator|new
name|StandardAnalyzer
argument_list|()
expr_stmt|;
block|}
return|return
name|analyzer
return|;
block|}
DECL|method|acquireIndexLock
specifier|protected
specifier|synchronized
name|void
name|acquireIndexLock
parameter_list|()
throws|throws
name|InterruptedException
block|{
while|while
condition|(
name|isIndexing
argument_list|()
condition|)
block|{
name|wait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
name|indexLocked
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|releaseIndexLock
specifier|protected
specifier|synchronized
name|void
name|releaseIndexLock
parameter_list|()
block|{
name|indexLocked
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_class
end_unit
