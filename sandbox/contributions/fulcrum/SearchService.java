begin_unit
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fulcrum
operator|.
name|ServiceException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fulcrum
operator|.
name|Service
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * A SearchService based on the Fulcrum services framework.  */
end_comment
begin_interface
DECL|interface|SearchService
specifier|public
interface|interface
name|SearchService
extends|extends
name|Service
block|{
comment|/**      * The key in the TurbineResources.properties that references this      * service.      */
DECL|field|SERVICE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|SERVICE_NAME
init|=
literal|"SearchService"
decl_stmt|;
comment|/**      * The key in SearchService properties in      * TurbineResources.properties. The location of the index.      * Assumes a FSDirectory is used.      */
DECL|field|INDEX_LOCATION_KEY
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_LOCATION_KEY
init|=
literal|"index.location"
decl_stmt|;
comment|/**      * Performs a search.      *      * @param Query to search on.      * @return SearchResults      * @exception ServiceException      */
DECL|method|search
specifier|public
name|SearchResults
name|search
parameter_list|(
name|Query
name|query
parameter_list|)
throws|throws
name|ServiceException
function_decl|;
comment|/**      * Performs a search, using a filter to filter the results.      *      * @param Query to search on.      * @param Filter to filter the results through.      * @return SearchResults      * @exception ServiceException      */
DECL|method|search
specifier|public
name|SearchResults
name|search
parameter_list|(
name|Query
name|query
parameter_list|,
name|Filter
name|filter
parameter_list|)
throws|throws
name|ServiceException
function_decl|;
comment|/**      * Performs a search, using a filter to filter the results, then      * return the results within the range specified.      *      * @param Query to search on.      * @return SearchResults      * @exception ServiceException      */
DECL|method|search
specifier|public
name|SearchResults
name|search
parameter_list|(
name|Query
name|query
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
throws|throws
name|ServiceException
function_decl|;
comment|/**      * Refresh the entire index.      */
DECL|method|batchIndex
specifier|public
name|void
name|batchIndex
parameter_list|()
throws|throws
name|ServiceException
function_decl|;
comment|/**      * Is the indexer currently indexing?      */
DECL|method|isIndexing
specifier|public
name|boolean
name|isIndexing
parameter_list|()
function_decl|;
comment|/**      * Get the analyzer used.      */
DECL|method|getAnalyzer
specifier|public
name|Analyzer
name|getAnalyzer
parameter_list|()
function_decl|;
block|}
end_interface
end_unit
