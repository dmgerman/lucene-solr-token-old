begin_unit
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Category
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Hits
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  *<p>  * Encapsulates the results of a search. After a SearchResults has  * been constructed from a Hits object, the IndexSearcher can be  * safely closed.  *</p>  *<p>  * SearchResults also provides a way of retrieving Java objects from  * Documents (via {@link search.SearchResultsFactory}).  *</p>  */
end_comment
begin_class
DECL|class|SearchResults
specifier|public
class|class
name|SearchResults
block|{
DECL|field|cat
specifier|private
specifier|static
name|Category
name|cat
init|=
name|Category
operator|.
name|getInstance
argument_list|(
name|SearchResults
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|hitsDocuments
specifier|private
name|Document
index|[]
name|hitsDocuments
decl_stmt|;
DECL|field|objectResults
specifier|private
name|Object
index|[]
name|objectResults
decl_stmt|;
DECL|field|totalNumberOfResults
specifier|private
name|int
name|totalNumberOfResults
decl_stmt|;
DECL|method|SearchResults
specifier|public
name|SearchResults
parameter_list|(
name|Hits
name|hits
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|hits
argument_list|,
literal|0
argument_list|,
name|hits
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|SearchResults
specifier|public
name|SearchResults
parameter_list|(
name|Hits
name|hits
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
throws|throws
name|IOException
block|{
name|totalNumberOfResults
operator|=
name|hits
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
name|to
operator|>
name|totalNumberOfResults
condition|)
block|{
name|to
operator|=
name|totalNumberOfResults
operator|-
literal|1
expr_stmt|;
block|}
name|int
name|numberOfResults
init|=
name|to
operator|-
name|from
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|numberOfResults
operator|>
operator|-
literal|1
condition|)
block|{
name|hitsDocuments
operator|=
operator|new
name|Document
index|[
name|numberOfResults
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|to
init|,
name|j
init|=
literal|0
init|;
name|i
operator|>=
name|from
condition|;
name|i
operator|--
operator|,
name|j
operator|++
control|)
block|{
name|hitsDocuments
index|[
name|j
index|]
operator|=
name|hits
operator|.
name|doc
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Range of results requested "
operator|+
literal|"exceed total number of search "
operator|+
literal|"results returned."
argument_list|)
throw|;
block|}
block|}
DECL|method|getTotalNumberOfResults
specifier|public
name|int
name|getTotalNumberOfResults
parameter_list|()
block|{
return|return
name|totalNumberOfResults
return|;
block|}
comment|/**      * Obtain the results of the search as objects. The objects returned are      * not guaranteed to be unique.      */
DECL|method|getResultsAsObjects
specifier|public
name|Object
index|[]
name|getResultsAsObjects
parameter_list|()
block|{
comment|/**          * At this point, use some mechanism of retrieving          * the objects via a UUID or something.          */
comment|/*         if (objectResults == null)         {             objectResults = new Object[hitsDocuments.length];             for (int i = 0; i< hitsDocuments.length; i++)             {                 try                 {                     objectResults[i] = SearchResultFactory.                             getDocAsObject(hitsDocuments[i]);                 }                 catch (Exception e)                 {                     cat.error("Error instantiating an object from a document.", e);                 }             }         }         */
return|return
name|objectResults
return|;
block|}
block|}
end_class
end_unit
