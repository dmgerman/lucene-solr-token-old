begin_unit
begin_package
DECL|package|com.relevanz.indyo
package|package
name|com
operator|.
name|relevanz
operator|.
name|indyo
package|;
end_package
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DateField
import|;
end_import
begin_import
import|import
name|com
operator|.
name|relevanz
operator|.
name|indyo
operator|.
name|contenthandler
operator|.
name|FileContentHandler
import|;
end_import
begin_import
import|import
name|com
operator|.
name|relevanz
operator|.
name|indyo
operator|.
name|contenthandler
operator|.
name|FileContentHandlerFactory
import|;
end_import
begin_import
import|import
name|com
operator|.
name|relevanz
operator|.
name|indyo
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * A filesystem-based datasource.  *  * @author<a href="mailto:kelvint@apache.org">Kelvin Tan</a>  * @version $Id$  */
end_comment
begin_class
DECL|class|FSDataSource
specifier|public
class|class
name|FSDataSource
extends|extends
name|AbstractDataSource
block|{
DECL|field|FILE_PATH_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|FILE_PATH_FIELD
init|=
literal|"filePath"
decl_stmt|;
DECL|field|FILE_NAME_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|FILE_NAME_FIELD
init|=
literal|"fileName"
decl_stmt|;
DECL|field|FILE_SIZE_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|FILE_SIZE_FIELD
init|=
literal|"fileSize"
decl_stmt|;
DECL|field|FILE_FORMAT_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|FILE_FORMAT_FIELD
init|=
literal|"fileFormat"
decl_stmt|;
DECL|field|FILE_CONTENTS_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|FILE_CONTENTS_FIELD
init|=
literal|"fileContents"
decl_stmt|;
DECL|field|FILE_LAST_MODIFIED_DATE_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|FILE_LAST_MODIFIED_DATE_FIELD
init|=
literal|"fileLastModifiedDate"
decl_stmt|;
DECL|field|targetFileOrDir
specifier|private
name|File
name|targetFileOrDir
decl_stmt|;
DECL|method|FSDataSource
specifier|public
name|FSDataSource
parameter_list|(
name|String
name|targetFileOrDirStr
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|File
argument_list|(
name|targetFileOrDirStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|FSDataSource
specifier|public
name|FSDataSource
parameter_list|(
name|File
name|targetFileOrDir
parameter_list|)
block|{
name|setTargetDirectory
argument_list|(
name|targetFileOrDir
argument_list|)
expr_stmt|;
block|}
DECL|method|getData
specifier|public
name|Map
index|[]
name|getData
parameter_list|()
block|{
name|Map
index|[]
name|returnData
init|=
literal|null
decl_stmt|;
name|List
name|temp
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|loadDataFromFiles
argument_list|(
name|targetFileOrDir
argument_list|,
name|temp
argument_list|)
expr_stmt|;
name|returnData
operator|=
operator|new
name|Map
index|[
name|temp
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|returnData
operator|=
operator|(
name|Map
index|[]
operator|)
name|temp
operator|.
name|toArray
argument_list|(
name|returnData
argument_list|)
expr_stmt|;
return|return
name|returnData
return|;
block|}
DECL|method|setTargetDirectory
specifier|public
name|void
name|setTargetDirectory
parameter_list|(
name|File
name|targetFileOrDir
parameter_list|)
block|{
name|this
operator|.
name|targetFileOrDir
operator|=
name|targetFileOrDir
expr_stmt|;
block|}
DECL|method|loadDataFromFiles
specifier|private
name|void
name|loadDataFromFiles
parameter_list|(
name|File
name|f
parameter_list|,
name|List
name|list
parameter_list|)
block|{
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|directoryTree
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|directoryTree
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|loadDataFromFiles
argument_list|(
name|directoryTree
index|[
name|i
index|]
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Map
name|dataMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|dataMap
operator|.
name|put
argument_list|(
name|FILE_PATH_FIELD
argument_list|,
name|f
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|put
argument_list|(
name|FILE_NAME_FIELD
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|put
argument_list|(
name|FILE_LAST_MODIFIED_DATE_FIELD
argument_list|,
name|DateField
operator|.
name|timeToString
argument_list|(
name|f
operator|.
name|lastModified
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|put
argument_list|(
name|FILE_SIZE_FIELD
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|f
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|put
argument_list|(
name|FILE_FORMAT_FIELD
argument_list|,
name|IOUtils
operator|.
name|getFileExtension
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|addFileContents
argument_list|(
name|f
argument_list|,
name|dataMap
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addFileContents
specifier|private
name|void
name|addFileContents
parameter_list|(
name|File
name|targetFile
parameter_list|,
name|Map
name|dataMap
parameter_list|)
block|{
name|FileContentHandler
name|cHandler
init|=
name|FileContentHandlerFactory
operator|.
name|getContentHandler
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|cHandler
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cHandler
operator|.
name|fileContentIsReadable
argument_list|()
condition|)
block|{
name|Reader
name|r
init|=
name|cHandler
operator|.
name|getReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|dataMap
operator|.
name|put
argument_list|(
name|FILE_CONTENTS_FIELD
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cHandler
operator|.
name|containsNestedData
argument_list|()
condition|)
block|{
name|dataMap
operator|.
name|put
argument_list|(
name|NESTED_DATASOURCE
argument_list|,
name|cHandler
operator|.
name|getNestedDataSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//cat.warn("ContentHandler not found for " + contentFile.getName());
block|}
block|}
block|}
end_class
end_unit
