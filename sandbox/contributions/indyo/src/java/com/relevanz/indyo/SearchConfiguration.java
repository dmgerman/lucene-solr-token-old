begin_unit
begin_package
DECL|package|com.relevanz.indyo
package|package
name|com
operator|.
name|relevanz
operator|.
name|indyo
package|;
end_package
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_import
import|import
name|com
operator|.
name|relevanz
operator|.
name|indyo
operator|.
name|contenthandler
operator|.
name|FileContentHandlerFactory
import|;
end_import
begin_import
import|import
name|com
operator|.
name|relevanz
operator|.
name|indyo
operator|.
name|util
operator|.
name|DataUnformatFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Category
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Element
import|;
end_import
begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|input
operator|.
name|SAXBuilder
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import
begin_comment
comment|/**  * Configures the indexing process using an XML file.  *  * @author<a href="mailto:kelvint@apache.org">Kelvin Tan</a>  * @version $Id$  */
end_comment
begin_class
DECL|class|SearchConfiguration
specifier|public
class|class
name|SearchConfiguration
block|{
DECL|field|TEXT_FIELD_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TEXT_FIELD_TYPE
init|=
literal|"text"
decl_stmt|;
DECL|field|KEYWORD_FIELD_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|KEYWORD_FIELD_TYPE
init|=
literal|"keyword"
decl_stmt|;
DECL|field|UNINDEXED_FIELD_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|UNINDEXED_FIELD_TYPE
init|=
literal|"unindexed"
decl_stmt|;
DECL|field|UNSTORED_FIELD_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|UNSTORED_FIELD_TYPE
init|=
literal|"unstored"
decl_stmt|;
comment|/** Log4j category.      */
DECL|field|log
specifier|static
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|SearchConfiguration
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Key in the config file to declare content handlers.      */
DECL|field|CONTENT_HANDLER_KEY
specifier|private
specifier|static
specifier|final
name|String
name|CONTENT_HANDLER_KEY
init|=
literal|"Search.ContentHandlers"
decl_stmt|;
comment|/**      * Key in the config file to declare custom fields.      */
DECL|field|FIELD_KEY
specifier|private
specifier|static
specifier|final
name|String
name|FIELD_KEY
init|=
literal|"Search.Fields"
decl_stmt|;
comment|/**      * Map of content handlers.      */
DECL|field|contentHandlers
specifier|private
name|Map
name|contentHandlers
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|/**      * Map of (non-standard) custom fields to index.      */
DECL|field|customFields
specifier|private
name|Map
name|customFields
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|/**      * Document object which represents the xml configuration file.      */
DECL|field|doc
specifier|private
name|Document
name|doc
decl_stmt|;
comment|/**      * Creates a new SearchConfiguration.      *      * @param configFile Name of the xml configuration file.      */
DECL|method|SearchConfiguration
specifier|public
name|SearchConfiguration
parameter_list|(
name|String
name|configFile
parameter_list|)
throws|throws
name|IllegalConfigurationException
block|{
try|try
block|{
name|SAXBuilder
name|builder
init|=
operator|new
name|SAXBuilder
argument_list|()
decl_stmt|;
name|DataUnformatFilter
name|format
init|=
operator|new
name|DataUnformatFilter
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setXMLFilter
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|doc
operator|=
name|builder
operator|.
name|build
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error creating XML parser:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|loadContentHandlers
argument_list|()
expr_stmt|;
name|loadCustomFields
argument_list|()
expr_stmt|;
block|}
DECL|method|getContentHandlers
specifier|public
name|Map
name|getContentHandlers
parameter_list|()
block|{
return|return
name|this
operator|.
name|contentHandlers
return|;
block|}
DECL|method|getCustomFields
specifier|public
name|Map
name|getCustomFields
parameter_list|()
block|{
return|return
name|this
operator|.
name|customFields
return|;
block|}
comment|/**      * Loads the content handlers.      */
DECL|method|loadContentHandlers
specifier|protected
name|void
name|loadContentHandlers
parameter_list|()
throws|throws
name|IllegalConfigurationException
block|{
name|String
index|[]
name|extensions
init|=
name|getChildPropertyAttributeValues
argument_list|(
name|CONTENT_HANDLER_KEY
argument_list|,
literal|"extension"
argument_list|)
decl_stmt|;
name|String
index|[]
name|handlers
init|=
name|getChildPropertyAttributeValues
argument_list|(
name|CONTENT_HANDLER_KEY
argument_list|,
literal|"handler"
argument_list|)
decl_stmt|;
if|if
condition|(
name|extensions
operator|.
name|length
operator|!=
name|handlers
operator|.
name|length
condition|)
throw|throw
operator|new
name|IllegalConfigurationException
argument_list|(
literal|"Illegal configuration of Search Content Handlers!"
argument_list|)
throw|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|extensions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|contentHandlers
operator|.
name|put
argument_list|(
name|extensions
index|[
name|i
index|]
argument_list|,
name|generateObject
argument_list|(
name|handlers
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|defaultExtension
init|=
name|getChildPropertyAttributeValues
argument_list|(
name|CONTENT_HANDLER_KEY
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|defaultExtension
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|defaultExtension
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
name|defaultExtension
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|contentHandlers
operator|.
name|put
argument_list|(
name|FileContentHandlerFactory
operator|.
name|DEFAULT_HANDLER_KEY
argument_list|,
name|generateObject
argument_list|(
name|handlers
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Loads the custom fields to index.      */
DECL|method|loadCustomFields
specifier|protected
name|void
name|loadCustomFields
parameter_list|()
throws|throws
name|IllegalConfigurationException
block|{
name|String
index|[]
name|fields
init|=
name|getChildPropertyAttributeValues
argument_list|(
name|FIELD_KEY
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|String
index|[]
name|fieldtypes
init|=
name|getChildPropertyAttributeValues
argument_list|(
name|FIELD_KEY
argument_list|,
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|length
operator|!=
name|fieldtypes
operator|.
name|length
condition|)
throw|throw
operator|new
name|IllegalConfigurationException
argument_list|(
literal|"Illegal configuration of custom search fields!"
argument_list|)
throw|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|customFields
operator|.
name|put
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|,
name|fieldtypes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Return attribute values for all child nodes.      */
DECL|method|getChildPropertyAttributeValues
specifier|private
name|String
index|[]
name|getChildPropertyAttributeValues
parameter_list|(
name|String
name|parent
parameter_list|,
name|String
name|attributeName
parameter_list|)
block|{
name|String
index|[]
name|nodeName
init|=
name|parseNodeName
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|Element
name|element
init|=
name|doc
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeName
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|element
operator|=
name|element
operator|.
name|getChild
argument_list|(
name|nodeName
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{}
return|;
block|}
block|}
name|List
name|children
init|=
name|element
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|int
name|childCount
init|=
name|children
operator|.
name|size
argument_list|()
decl_stmt|;
name|String
index|[]
name|childrenAttributeValue
init|=
operator|new
name|String
index|[
name|childCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childCount
condition|;
name|i
operator|++
control|)
block|{
name|childrenAttributeValue
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|Element
operator|)
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getAttributeValue
argument_list|(
name|attributeName
argument_list|)
expr_stmt|;
block|}
return|return
name|childrenAttributeValue
return|;
block|}
comment|/**      * Node names are in the form "x.y.z". Returns a String array      * representation of the node elements.      */
DECL|method|parseNodeName
specifier|private
name|String
index|[]
name|parseNodeName
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|nodeName
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
name|String
index|[]
name|nodeElements
init|=
operator|new
name|String
index|[
name|st
operator|.
name|countTokens
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|nodeElements
index|[
name|i
index|]
operator|=
name|st
operator|.
name|nextToken
argument_list|()
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
return|return
name|nodeElements
return|;
block|}
comment|/**      * Utility method to return an object based on its class name.      * The object needs to have a constructor which accepts no parameters.      *      * @param className  Class name of object to be generated      * @return Object      */
DECL|method|generateObject
specifier|private
specifier|static
name|Object
name|generateObject
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|Object
name|o
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Class
name|c
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|o
operator|=
name|c
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|cnfe
operator|.
name|getMessage
argument_list|()
operator|+
literal|" No class named '"
operator|+
name|className
operator|+
literal|"' was found."
argument_list|,
name|cnfe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|ie
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|ie
operator|.
name|getMessage
argument_list|()
operator|+
literal|" Class named '"
operator|+
name|className
operator|+
literal|"' could not be  instantiated."
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|iae
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|iae
operator|.
name|getMessage
argument_list|()
operator|+
literal|" No access to class named '"
operator|+
name|className
operator|+
literal|"'."
argument_list|,
name|iae
argument_list|)
expr_stmt|;
block|}
return|return
name|o
return|;
block|}
block|}
end_class
end_unit
