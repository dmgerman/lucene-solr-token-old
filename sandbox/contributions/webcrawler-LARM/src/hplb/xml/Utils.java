begin_unit
begin_comment
comment|/*  * $Id$  *   * Copyright 1997 Hewlett-Packard Company  *   * This file may be copied, modified and distributed only in  * accordance with the terms of the limited licence contained  * in the accompanying file LICENSE.TXT.  */
end_comment
begin_package
DECL|package|hplb.xml
package|package
name|hplb
operator|.
name|xml
package|;
end_package
begin_import
import|import
name|hplb
operator|.
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_class
DECL|class|Utils
specifier|public
class|class
name|Utils
block|{
comment|/** Pretty-print elm. */
DECL|method|pp
specifier|public
specifier|static
name|void
name|pp
parameter_list|(
name|Node
name|node
parameter_list|,
name|PrintStream
name|out
parameter_list|)
block|{
name|pp
argument_list|(
name|node
argument_list|,
name|out
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|pp
specifier|public
specifier|static
name|void
name|pp
parameter_list|(
name|Node
name|node
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|int
name|indent
parameter_list|)
block|{
name|indent
argument_list|(
name|out
argument_list|,
name|indent
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
operator|+
name|node
argument_list|)
expr_stmt|;
name|indent
operator|+=
literal|2
expr_stmt|;
name|NodeIterator
name|iter
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|Node
name|child
decl_stmt|;
while|while
condition|(
operator|(
name|child
operator|=
name|iter
operator|.
name|toNext
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|pp
argument_list|(
name|child
argument_list|,
name|out
argument_list|,
name|indent
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|compact
specifier|public
specifier|static
name|String
name|compact
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|<
literal|18
condition|)
block|{
return|return
literal|"["
operator|+
name|noCRLF
argument_list|(
name|s
argument_list|)
operator|+
literal|"]"
return|;
block|}
else|else
block|{
return|return
literal|"["
operator|+
name|noCRLF
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|7
argument_list|)
argument_list|)
operator|+
literal|"..."
operator|+
name|noCRLF
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|s
operator|.
name|length
argument_list|()
operator|-
literal|7
argument_list|)
argument_list|)
operator|+
literal|"]"
return|;
block|}
block|}
DECL|method|noCRLF
specifier|public
specifier|static
name|String
name|noCRLF
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|replace
argument_list|(
literal|'\r'
argument_list|,
literal|' '
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\n'
argument_list|,
literal|' '
argument_list|)
return|;
block|}
DECL|method|indent
specifier|public
specifier|static
name|void
name|indent
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|int
name|indent
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indent
condition|;
name|i
operator|++
control|)
name|out
operator|.
name|print
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
comment|/**      * Encode an XML attribute value. Changes&lt;"&gt; to "&amp;quote;".      */
DECL|method|encAttrVal
specifier|public
specifier|static
name|String
name|encAttrVal
parameter_list|(
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|.
name|indexOf
argument_list|(
literal|'"'
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|StringBuffer
name|sbuf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|,
name|i
decl_stmt|;
while|while
condition|(
operator|(
name|i
operator|=
name|val
operator|.
name|indexOf
argument_list|(
literal|'"'
argument_list|,
name|offset
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
name|sbuf
operator|.
name|append
argument_list|(
name|val
operator|.
name|substring
argument_list|(
name|offset
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|sbuf
operator|.
name|append
argument_list|(
literal|"&quote;"
argument_list|)
expr_stmt|;
name|offset
operator|=
name|i
operator|+
literal|1
expr_stmt|;
block|}
name|sbuf
operator|.
name|append
argument_list|(
name|val
operator|.
name|substring
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sbuf
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|val
return|;
block|}
comment|/**      * Encode the specified String as XML PCDATA, i.e. "&lt;" is      * encoded as "&amp;lt;" and "&amp;" is encoded as "&amp;amp;".      */
DECL|method|encPCDATA
specifier|public
specifier|static
name|String
name|encPCDATA
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|indexOf
argument_list|(
literal|'<'
argument_list|)
operator|>
operator|-
literal|1
operator|||
name|s
operator|.
name|indexOf
argument_list|(
literal|'&'
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|StringBuffer
name|sbuf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|'<'
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|int
name|j
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|'&'
argument_list|,
name|offset
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|>
operator|-
literal|1
operator|||
name|j
operator|>
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|i
operator|>
name|j
condition|)
block|{
name|sbuf
operator|.
name|append
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|offset
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|sbuf
operator|.
name|append
argument_list|(
literal|"&quote;"
argument_list|)
expr_stmt|;
name|offset
operator|=
name|i
operator|+
literal|1
expr_stmt|;
name|i
operator|=
name|s
operator|.
name|indexOf
argument_list|(
literal|'<'
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sbuf
operator|.
name|append
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|offset
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|sbuf
operator|.
name|append
argument_list|(
literal|"&quote;"
argument_list|)
expr_stmt|;
name|offset
operator|=
name|j
operator|+
literal|1
expr_stmt|;
name|j
operator|=
name|s
operator|.
name|indexOf
argument_list|(
literal|'&'
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
name|sbuf
operator|.
name|append
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sbuf
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|s
return|;
block|}
block|}
end_class
end_unit
