begin_unit
begin_comment
comment|/*  * $Id$  *   * Copyright 1997 Hewlett-Packard Company  *   * This file may be copied, modified and distributed only in  * accordance with the terms of the limited licence contained  * in the accompanying file LICENSE.TXT.  */
end_comment
begin_package
DECL|package|hplb.xml
package|package
name|hplb
operator|.
name|xml
package|;
end_package
begin_import
import|import
name|hplb
operator|.
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  *   * @author  Anders Kristensen  */
end_comment
begin_class
DECL|class|ElementImpl
specifier|public
class|class
name|ElementImpl
extends|extends
name|NodeImpl
implements|implements
name|Element
block|{
DECL|field|tagName
specifier|protected
name|String
name|tagName
decl_stmt|;
DECL|field|attrs
specifier|protected
name|AttributeList
name|attrs
decl_stmt|;
comment|// Note: Parser ensures this wont be null
DECL|method|ElementImpl
specifier|public
name|ElementImpl
parameter_list|(
name|String
name|tagName
parameter_list|,
name|AttributeList
name|attributes
parameter_list|)
block|{
name|super
argument_list|(
name|Node
operator|.
name|ELEMENT
argument_list|)
expr_stmt|;
name|this
operator|.
name|tagName
operator|=
name|tagName
expr_stmt|;
name|attrs
operator|=
name|attributes
expr_stmt|;
block|}
DECL|method|getTagName
specifier|public
name|String
name|getTagName
parameter_list|()
block|{
return|return
name|tagName
return|;
block|}
DECL|method|attributes
specifier|public
name|AttributeList
name|attributes
parameter_list|()
block|{
return|return
name|attrs
return|;
block|}
DECL|method|setAttribute
specifier|public
name|void
name|setAttribute
parameter_list|(
name|Attribute
name|newAttr
parameter_list|)
block|{
if|if
condition|(
name|attrs
operator|==
literal|null
condition|)
name|attrs
operator|=
operator|new
name|AttrListImpl
argument_list|()
expr_stmt|;
name|attrs
operator|.
name|setAttribute
argument_list|(
name|newAttr
argument_list|)
expr_stmt|;
block|}
DECL|method|normalize
specifier|public
name|void
name|normalize
parameter_list|()
block|{}
DECL|method|getElementsByTagName
specifier|public
name|NodeIterator
name|getElementsByTagName
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Why wasn't this method defined by the DOM WG to take an arg???"
argument_list|)
throw|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|boolean
name|empty
init|=
operator|(
name|children
operator|==
literal|null
operator|||
name|children
operator|.
name|getLength
argument_list|()
operator|==
literal|0
operator|)
decl_stmt|;
return|return
literal|"<"
operator|+
name|tagName
operator|+
literal|" "
operator|+
operator|(
name|attrs
operator|!=
literal|null
condition|?
name|attrs
operator|.
name|toString
argument_list|()
else|:
literal|"{}"
operator|)
operator|+
operator|(
name|empty
condition|?
literal|" />"
else|:
literal|">"
operator|)
return|;
block|}
block|}
end_class
end_unit
