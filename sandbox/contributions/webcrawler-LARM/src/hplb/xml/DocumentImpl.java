begin_unit
begin_comment
comment|/*  * $Id$  *   * Copyright 1997 Hewlett-Packard Company  *   * This file may be copied, modified and distributed only in  * accordance with the terms of the limited licence contained  * in the accompanying file LICENSE.TXT.  */
end_comment
begin_package
DECL|package|hplb.xml
package|package
name|hplb
operator|.
name|xml
package|;
end_package
begin_import
import|import
name|hplb
operator|.
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  *   */
end_comment
begin_class
DECL|class|DocumentImpl
specifier|public
class|class
name|DocumentImpl
extends|extends
name|NodeImpl
implements|implements
name|Document
block|{
DECL|field|context
name|DocumentContext
name|context
decl_stmt|;
DECL|field|masterDoc
name|Document
name|masterDoc
init|=
name|this
decl_stmt|;
DECL|field|type
name|Node
name|type
decl_stmt|;
DECL|field|rootNode
name|Element
name|rootNode
decl_stmt|;
DECL|method|DocumentImpl
specifier|public
name|DocumentImpl
parameter_list|()
block|{
name|super
argument_list|(
name|Node
operator|.
name|DOCUMENT
argument_list|)
expr_stmt|;
block|}
DECL|method|getMasterDoc
specifier|public
name|Document
name|getMasterDoc
parameter_list|()
block|{
return|return
name|masterDoc
return|;
block|}
DECL|method|setMasterDoc
specifier|public
name|void
name|setMasterDoc
parameter_list|(
name|Document
name|arg
parameter_list|)
block|{
name|masterDoc
operator|=
name|arg
expr_stmt|;
block|}
DECL|method|getDocumentType
specifier|public
name|Node
name|getDocumentType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|setDocumentType
specifier|public
name|void
name|setDocumentType
parameter_list|(
name|Node
name|arg
parameter_list|)
block|{
name|type
operator|=
name|arg
expr_stmt|;
block|}
DECL|method|getDocumentElement
specifier|public
name|Element
name|getDocumentElement
parameter_list|()
block|{
return|return
name|rootNode
return|;
block|}
DECL|method|setDocumentElement
specifier|public
name|void
name|setDocumentElement
parameter_list|(
name|Element
name|arg
parameter_list|)
block|{
name|rootNode
operator|=
name|arg
expr_stmt|;
block|}
DECL|method|getContextInfo
specifier|public
name|DocumentContext
name|getContextInfo
parameter_list|()
block|{
return|return
name|context
return|;
block|}
DECL|method|setContextInfo
specifier|public
name|void
name|setContextInfo
parameter_list|(
name|DocumentContext
name|arg
parameter_list|)
block|{
name|context
operator|=
name|arg
expr_stmt|;
block|}
DECL|method|createDocument
specifier|public
name|Document
name|createDocument
parameter_list|()
block|{
return|return
operator|new
name|DocumentImpl
argument_list|()
return|;
block|}
DECL|method|createDocumentContext
specifier|public
name|DocumentContext
name|createDocumentContext
parameter_list|()
block|{
return|return
operator|new
name|DocContextImpl
argument_list|()
return|;
block|}
DECL|method|createElement
specifier|public
name|Element
name|createElement
parameter_list|(
name|String
name|tagName
parameter_list|,
name|AttributeList
name|attributes
parameter_list|)
block|{
return|return
operator|new
name|ElementImpl
argument_list|(
name|tagName
argument_list|,
name|attributes
argument_list|)
return|;
block|}
DECL|method|createTextNode
specifier|public
name|Text
name|createTextNode
parameter_list|(
name|String
name|data
parameter_list|)
block|{
return|return
operator|new
name|TextImpl
argument_list|(
name|Node
operator|.
name|TEXT
argument_list|,
name|data
argument_list|)
return|;
block|}
DECL|method|createComment
specifier|public
name|Comment
name|createComment
parameter_list|(
name|String
name|data
parameter_list|)
block|{
return|return
operator|new
name|TextImpl
argument_list|(
name|Node
operator|.
name|COMMENT
argument_list|,
name|data
argument_list|)
return|;
block|}
DECL|method|createPI
specifier|public
name|PI
name|createPI
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|data
parameter_list|)
block|{
name|PI
name|pi
init|=
operator|new
name|TextImpl
argument_list|(
name|Node
operator|.
name|PI
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|pi
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|pi
return|;
block|}
DECL|method|createAttribute
specifier|public
name|Attribute
name|createAttribute
parameter_list|(
name|String
name|name
parameter_list|,
name|Node
name|value
parameter_list|)
block|{
return|return
operator|new
name|AttrImpl
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|createAttributeList
specifier|public
name|AttributeList
name|createAttributeList
parameter_list|()
block|{
return|return
operator|new
name|AttrListImpl
argument_list|()
return|;
block|}
DECL|method|getElementsByTagName
specifier|public
name|NodeIterator
name|getElementsByTagName
parameter_list|()
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"NOT IMPLEMENTED"
argument_list|)
throw|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ROOT"
return|;
comment|/*         if (children == null) return "";         StringBuffer sb = new StringBuffer();         int len = children.getLength();         for (int i = 0; i< len; i++) {             System.out.println(children.item(i));         }         return sb.toString();         */
block|}
block|}
end_class
end_unit
