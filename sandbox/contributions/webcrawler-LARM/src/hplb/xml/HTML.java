begin_unit
begin_comment
comment|/*  * $Id$  *   * Copyright 1997 Hewlett-Packard Company  *   * This file may be copied, modified and distributed only in  * accordance with the terms of the limited licence contained  * in the accompanying file LICENSE.TXT.  */
end_comment
begin_package
DECL|package|hplb.xml
package|package
name|hplb
operator|.
name|xml
package|;
end_package
begin_comment
comment|/**  * Parser customizations for correctly parsing HTML.  * Defines a set of empty elements (&lt;hr&gt;,&lt;br&gt;, etc.)  * and for some elements it defines which other start tags  * implicitly ends them. As an example, an&lt;li&gt; element within  * a&lt;ul&gt; list is terminated by either a&lt;/ul&gt; end tag  * or another&lt;li&gt; start tag.  *  * @author  Anders Kristensen  */
end_comment
begin_class
DECL|class|HTML
specifier|public
class|class
name|HTML
block|{
DECL|field|A
specifier|public
specifier|static
name|String
name|A
init|=
name|a
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
comment|//
DECL|field|ACRONYM
specifier|public
specifier|static
name|String
name|ACRONYM
init|=
name|a
argument_list|(
literal|"acronym"
argument_list|)
decl_stmt|;
comment|//
DECL|field|ADDRESS
specifier|public
specifier|static
name|String
name|ADDRESS
init|=
name|a
argument_list|(
literal|"address"
argument_list|)
decl_stmt|;
DECL|field|APPLET
specifier|public
specifier|static
name|String
name|APPLET
init|=
name|a
argument_list|(
literal|"applet"
argument_list|)
decl_stmt|;
comment|//
DECL|field|AREA
specifier|public
specifier|static
name|String
name|AREA
init|=
name|a
argument_list|(
literal|"area"
argument_list|)
decl_stmt|;
DECL|field|B
specifier|public
specifier|static
name|String
name|B
init|=
name|a
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
comment|//
DECL|field|BASE
specifier|public
specifier|static
name|String
name|BASE
init|=
name|a
argument_list|(
literal|"base"
argument_list|)
decl_stmt|;
DECL|field|BASEFONT
specifier|public
specifier|static
name|String
name|BASEFONT
init|=
name|a
argument_list|(
literal|"basefont"
argument_list|)
decl_stmt|;
comment|//
DECL|field|BDO
specifier|public
specifier|static
name|String
name|BDO
init|=
name|a
argument_list|(
literal|"bdo"
argument_list|)
decl_stmt|;
comment|//
DECL|field|BIG
specifier|public
specifier|static
name|String
name|BIG
init|=
name|a
argument_list|(
literal|"big"
argument_list|)
decl_stmt|;
comment|//
DECL|field|BLOCKQUOTE
specifier|public
specifier|static
name|String
name|BLOCKQUOTE
init|=
name|a
argument_list|(
literal|"blockquote"
argument_list|)
decl_stmt|;
DECL|field|BODY
specifier|public
specifier|static
name|String
name|BODY
init|=
name|a
argument_list|(
literal|"body"
argument_list|)
decl_stmt|;
comment|//
DECL|field|BR
specifier|public
specifier|static
name|String
name|BR
init|=
name|a
argument_list|(
literal|"br"
argument_list|)
decl_stmt|;
DECL|field|BUTTON
specifier|public
specifier|static
name|String
name|BUTTON
init|=
name|a
argument_list|(
literal|"button"
argument_list|)
decl_stmt|;
comment|//
DECL|field|CAPTION
specifier|public
specifier|static
name|String
name|CAPTION
init|=
name|a
argument_list|(
literal|"caption"
argument_list|)
decl_stmt|;
comment|//
DECL|field|CENTER
specifier|public
specifier|static
name|String
name|CENTER
init|=
name|a
argument_list|(
literal|"center"
argument_list|)
decl_stmt|;
DECL|field|CITE
specifier|public
specifier|static
name|String
name|CITE
init|=
name|a
argument_list|(
literal|"cite"
argument_list|)
decl_stmt|;
comment|//
DECL|field|CODE
specifier|public
specifier|static
name|String
name|CODE
init|=
name|a
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
comment|//
DECL|field|COL
specifier|public
specifier|static
name|String
name|COL
init|=
name|a
argument_list|(
literal|"col"
argument_list|)
decl_stmt|;
DECL|field|COLGROUP
specifier|public
specifier|static
name|String
name|COLGROUP
init|=
name|a
argument_list|(
literal|"colgroup"
argument_list|)
decl_stmt|;
comment|//
DECL|field|DD
specifier|public
specifier|static
name|String
name|DD
init|=
name|a
argument_list|(
literal|"dd"
argument_list|)
decl_stmt|;
DECL|field|DEL
specifier|public
specifier|static
name|String
name|DEL
init|=
name|a
argument_list|(
literal|"del"
argument_list|)
decl_stmt|;
comment|//
DECL|field|DFN
specifier|public
specifier|static
name|String
name|DFN
init|=
name|a
argument_list|(
literal|"dfn"
argument_list|)
decl_stmt|;
comment|//
DECL|field|DIR
specifier|public
specifier|static
name|String
name|DIR
init|=
name|a
argument_list|(
literal|"dir"
argument_list|)
decl_stmt|;
DECL|field|DIV
specifier|public
specifier|static
name|String
name|DIV
init|=
name|a
argument_list|(
literal|"div"
argument_list|)
decl_stmt|;
DECL|field|DL
specifier|public
specifier|static
name|String
name|DL
init|=
name|a
argument_list|(
literal|"dl"
argument_list|)
decl_stmt|;
DECL|field|DT
specifier|public
specifier|static
name|String
name|DT
init|=
name|a
argument_list|(
literal|"dt"
argument_list|)
decl_stmt|;
DECL|field|EM
specifier|public
specifier|static
name|String
name|EM
init|=
name|a
argument_list|(
literal|"em"
argument_list|)
decl_stmt|;
comment|//
DECL|field|FIELDSET
specifier|public
specifier|static
name|String
name|FIELDSET
init|=
name|a
argument_list|(
literal|"fieldset"
argument_list|)
decl_stmt|;
DECL|field|FONT
specifier|public
specifier|static
name|String
name|FONT
init|=
name|a
argument_list|(
literal|"font"
argument_list|)
decl_stmt|;
comment|//
DECL|field|FORM
specifier|public
specifier|static
name|String
name|FORM
init|=
name|a
argument_list|(
literal|"form"
argument_list|)
decl_stmt|;
DECL|field|FRAME
specifier|public
specifier|static
name|String
name|FRAME
init|=
name|a
argument_list|(
literal|"frame"
argument_list|)
decl_stmt|;
DECL|field|FRAMESET
specifier|public
specifier|static
name|String
name|FRAMESET
init|=
name|a
argument_list|(
literal|"frameset"
argument_list|)
decl_stmt|;
comment|//
DECL|field|H1
specifier|public
specifier|static
name|String
name|H1
init|=
name|a
argument_list|(
literal|"h1"
argument_list|)
decl_stmt|;
DECL|field|H2
specifier|public
specifier|static
name|String
name|H2
init|=
name|a
argument_list|(
literal|"h2"
argument_list|)
decl_stmt|;
DECL|field|H3
specifier|public
specifier|static
name|String
name|H3
init|=
name|a
argument_list|(
literal|"h3"
argument_list|)
decl_stmt|;
DECL|field|H4
specifier|public
specifier|static
name|String
name|H4
init|=
name|a
argument_list|(
literal|"h4"
argument_list|)
decl_stmt|;
DECL|field|H5
specifier|public
specifier|static
name|String
name|H5
init|=
name|a
argument_list|(
literal|"h5"
argument_list|)
decl_stmt|;
DECL|field|H6
specifier|public
specifier|static
name|String
name|H6
init|=
name|a
argument_list|(
literal|"h6"
argument_list|)
decl_stmt|;
DECL|field|HEAD
specifier|public
specifier|static
name|String
name|HEAD
init|=
name|a
argument_list|(
literal|"head"
argument_list|)
decl_stmt|;
DECL|field|HR
specifier|public
specifier|static
name|String
name|HR
init|=
name|a
argument_list|(
literal|"hr"
argument_list|)
decl_stmt|;
DECL|field|HTML
specifier|public
specifier|static
name|String
name|HTML
init|=
name|a
argument_list|(
literal|"html"
argument_list|)
decl_stmt|;
DECL|field|I
specifier|public
specifier|static
name|String
name|I
init|=
name|a
argument_list|(
literal|"i"
argument_list|)
decl_stmt|;
comment|//
DECL|field|IFRAME
specifier|public
specifier|static
name|String
name|IFRAME
init|=
name|a
argument_list|(
literal|"iframe"
argument_list|)
decl_stmt|;
comment|//
DECL|field|IMG
specifier|public
specifier|static
name|String
name|IMG
init|=
name|a
argument_list|(
literal|"img"
argument_list|)
decl_stmt|;
DECL|field|INPUT
specifier|public
specifier|static
name|String
name|INPUT
init|=
name|a
argument_list|(
literal|"input"
argument_list|)
decl_stmt|;
DECL|field|INS
specifier|public
specifier|static
name|String
name|INS
init|=
name|a
argument_list|(
literal|"ins"
argument_list|)
decl_stmt|;
comment|//
DECL|field|ISINDEX
specifier|public
specifier|static
name|String
name|ISINDEX
init|=
name|a
argument_list|(
literal|"isindex"
argument_list|)
decl_stmt|;
comment|//
DECL|field|KBD
specifier|public
specifier|static
name|String
name|KBD
init|=
name|a
argument_list|(
literal|"kbd"
argument_list|)
decl_stmt|;
comment|//
DECL|field|LABEL
specifier|public
specifier|static
name|String
name|LABEL
init|=
name|a
argument_list|(
literal|"label"
argument_list|)
decl_stmt|;
comment|//
DECL|field|LEGEND
specifier|public
specifier|static
name|String
name|LEGEND
init|=
name|a
argument_list|(
literal|"legend"
argument_list|)
decl_stmt|;
comment|//
DECL|field|LI
specifier|public
specifier|static
name|String
name|LI
init|=
name|a
argument_list|(
literal|"li"
argument_list|)
decl_stmt|;
DECL|field|LINK
specifier|public
specifier|static
name|String
name|LINK
init|=
name|a
argument_list|(
literal|"link"
argument_list|)
decl_stmt|;
DECL|field|MAP
specifier|public
specifier|static
name|String
name|MAP
init|=
name|a
argument_list|(
literal|"map"
argument_list|)
decl_stmt|;
comment|//
DECL|field|MENU
specifier|public
specifier|static
name|String
name|MENU
init|=
name|a
argument_list|(
literal|"menu"
argument_list|)
decl_stmt|;
DECL|field|META
specifier|public
specifier|static
name|String
name|META
init|=
name|a
argument_list|(
literal|"meta"
argument_list|)
decl_stmt|;
DECL|field|NOFRAMES
specifier|public
specifier|static
name|String
name|NOFRAMES
init|=
name|a
argument_list|(
literal|"noframes"
argument_list|)
decl_stmt|;
comment|//
DECL|field|NOSCRIPT
specifier|public
specifier|static
name|String
name|NOSCRIPT
init|=
name|a
argument_list|(
literal|"noscript"
argument_list|)
decl_stmt|;
DECL|field|OBJECT
specifier|public
specifier|static
name|String
name|OBJECT
init|=
name|a
argument_list|(
literal|"object"
argument_list|)
decl_stmt|;
comment|//
DECL|field|OL
specifier|public
specifier|static
name|String
name|OL
init|=
name|a
argument_list|(
literal|"ol"
argument_list|)
decl_stmt|;
DECL|field|OPTION
specifier|public
specifier|static
name|String
name|OPTION
init|=
name|a
argument_list|(
literal|"option"
argument_list|)
decl_stmt|;
comment|//
DECL|field|P
specifier|public
specifier|static
name|String
name|P
init|=
name|a
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
DECL|field|PARAM
specifier|public
specifier|static
name|String
name|PARAM
init|=
name|a
argument_list|(
literal|"param"
argument_list|)
decl_stmt|;
DECL|field|PRE
specifier|public
specifier|static
name|String
name|PRE
init|=
name|a
argument_list|(
literal|"pre"
argument_list|)
decl_stmt|;
DECL|field|Q
specifier|public
specifier|static
name|String
name|Q
init|=
name|a
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
comment|//
DECL|field|S
specifier|public
specifier|static
name|String
name|S
init|=
name|a
argument_list|(
literal|"s"
argument_list|)
decl_stmt|;
comment|//
DECL|field|SAMP
specifier|public
specifier|static
name|String
name|SAMP
init|=
name|a
argument_list|(
literal|"samp"
argument_list|)
decl_stmt|;
comment|//
DECL|field|SCRIPT
specifier|public
specifier|static
name|String
name|SCRIPT
init|=
name|a
argument_list|(
literal|"script"
argument_list|)
decl_stmt|;
comment|//
DECL|field|SELECT
specifier|public
specifier|static
name|String
name|SELECT
init|=
name|a
argument_list|(
literal|"select"
argument_list|)
decl_stmt|;
comment|//
DECL|field|SMALL
specifier|public
specifier|static
name|String
name|SMALL
init|=
name|a
argument_list|(
literal|"small"
argument_list|)
decl_stmt|;
comment|//
DECL|field|SPAN
specifier|public
specifier|static
name|String
name|SPAN
init|=
name|a
argument_list|(
literal|"span"
argument_list|)
decl_stmt|;
comment|//
DECL|field|STRIKE
specifier|public
specifier|static
name|String
name|STRIKE
init|=
name|a
argument_list|(
literal|"strike"
argument_list|)
decl_stmt|;
comment|//
DECL|field|STRONG
specifier|public
specifier|static
name|String
name|STRONG
init|=
name|a
argument_list|(
literal|"strong"
argument_list|)
decl_stmt|;
comment|//
DECL|field|STYLE
specifier|public
specifier|static
name|String
name|STYLE
init|=
name|a
argument_list|(
literal|"style"
argument_list|)
decl_stmt|;
comment|//
DECL|field|SUB
specifier|public
specifier|static
name|String
name|SUB
init|=
name|a
argument_list|(
literal|"sub"
argument_list|)
decl_stmt|;
comment|//
DECL|field|SUP
specifier|public
specifier|static
name|String
name|SUP
init|=
name|a
argument_list|(
literal|"sup"
argument_list|)
decl_stmt|;
comment|//
DECL|field|TABLE
specifier|public
specifier|static
name|String
name|TABLE
init|=
name|a
argument_list|(
literal|"table"
argument_list|)
decl_stmt|;
DECL|field|TBODY
specifier|public
specifier|static
name|String
name|TBODY
init|=
name|a
argument_list|(
literal|"tbody"
argument_list|)
decl_stmt|;
comment|//
DECL|field|TD
specifier|public
specifier|static
name|String
name|TD
init|=
name|a
argument_list|(
literal|"td"
argument_list|)
decl_stmt|;
comment|//
DECL|field|TEXTAREA
specifier|public
specifier|static
name|String
name|TEXTAREA
init|=
name|a
argument_list|(
literal|"textarea"
argument_list|)
decl_stmt|;
comment|//
DECL|field|TFOOT
specifier|public
specifier|static
name|String
name|TFOOT
init|=
name|a
argument_list|(
literal|"tfoot"
argument_list|)
decl_stmt|;
comment|//
DECL|field|TH
specifier|public
specifier|static
name|String
name|TH
init|=
name|a
argument_list|(
literal|"th"
argument_list|)
decl_stmt|;
comment|//
DECL|field|THEAD
specifier|public
specifier|static
name|String
name|THEAD
init|=
name|a
argument_list|(
literal|"thead"
argument_list|)
decl_stmt|;
comment|//
DECL|field|TITLE
specifier|public
specifier|static
name|String
name|TITLE
init|=
name|a
argument_list|(
literal|"title"
argument_list|)
decl_stmt|;
comment|//
DECL|field|TR
specifier|public
specifier|static
name|String
name|TR
init|=
name|a
argument_list|(
literal|"tr"
argument_list|)
decl_stmt|;
DECL|field|TT
specifier|public
specifier|static
name|String
name|TT
init|=
name|a
argument_list|(
literal|"tt"
argument_list|)
decl_stmt|;
comment|//
DECL|field|U
specifier|public
specifier|static
name|String
name|U
init|=
name|a
argument_list|(
literal|"u"
argument_list|)
decl_stmt|;
comment|//
DECL|field|UL
specifier|public
specifier|static
name|String
name|UL
init|=
name|a
argument_list|(
literal|"ul"
argument_list|)
decl_stmt|;
DECL|field|VAR
specifier|public
specifier|static
name|String
name|VAR
init|=
name|a
argument_list|(
literal|"var"
argument_list|)
decl_stmt|;
comment|//
DECL|method|a
specifier|private
specifier|static
name|String
name|a
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|Atom
operator|.
name|getAtom
argument_list|(
name|s
argument_list|)
return|;
block|}
comment|/** The full set of HTML4.0 element names. */
DECL|field|elements
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|elements
init|=
block|{
name|A
block|,
name|ACRONYM
block|,
name|ADDRESS
block|,
name|APPLET
block|,
name|AREA
block|,
name|B
block|,
name|BASE
block|,
name|BASEFONT
block|,
name|BDO
block|,
name|BIG
block|,
name|BLOCKQUOTE
block|,
name|BODY
block|,
name|BR
block|,
name|BUTTON
block|,
name|CAPTION
block|,
name|CENTER
block|,
name|CITE
block|,
name|CODE
block|,
name|COL
block|,
name|COLGROUP
block|,
name|DD
block|,
name|DEL
block|,
name|DFN
block|,
name|DIR
block|,
name|DIV
block|,
name|DL
block|,
name|DT
block|,
name|EM
block|,
name|FIELDSET
block|,
name|FONT
block|,
name|FORM
block|,
name|FRAME
block|,
name|FRAMESET
block|,
name|H1
block|,
name|H2
block|,
name|H3
block|,
name|H4
block|,
name|H5
block|,
name|H6
block|,
name|HEAD
block|,
name|HR
block|,
name|HTML
block|,
name|I
block|,
name|IFRAME
block|,
name|IMG
block|,
name|INPUT
block|,
name|INS
block|,
name|ISINDEX
block|,
name|KBD
block|,
name|LABEL
block|,
name|LEGEND
block|,
name|LI
block|,
name|LINK
block|,
name|MAP
block|,
name|MENU
block|,
name|META
block|,
name|NOFRAMES
block|,
name|NOSCRIPT
block|,
name|OBJECT
block|,
name|OL
block|,
name|OPTION
block|,
name|P
block|,
name|PARAM
block|,
name|PRE
block|,
name|Q
block|,
name|S
block|,
name|SAMP
block|,
name|SCRIPT
block|,
name|SELECT
block|,
name|SMALL
block|,
name|SPAN
block|,
name|STRIKE
block|,
name|STRONG
block|,
name|STYLE
block|,
name|SUB
block|,
name|SUP
block|,
name|TABLE
block|,
name|TBODY
block|,
name|TD
block|,
name|TEXTAREA
block|,
name|TFOOT
block|,
name|TH
block|,
name|THEAD
block|,
name|TITLE
block|,
name|TR
block|,
name|TT
block|,
name|U
block|,
name|UL
block|,
name|VAR
block|}
decl_stmt|;
comment|// FIXME: the parser kindof supports optional end tags but not
comment|//        at all optional start tags (eg<html>,<head>)
comment|// FIXME: add support for HTML entities not in HTML (lots of those)
comment|// FIXME: this list probably not complete!!!
comment|/** Empty elements in HTML4.0:<em>br</em>,<em>img</em>, etc. */
DECL|field|emptyElms
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|emptyElms
init|=
block|{
name|AREA
block|,
name|BASE
block|,
name|BR
block|,
name|COL
block|,
name|FRAME
block|,
name|HR
block|,
name|IMG
block|,
name|LINK
block|,
name|META
block|,
name|PARAM
block|}
decl_stmt|;
DECL|field|li_terminators
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|li_terminators
init|=
block|{
name|LI
block|}
decl_stmt|;
DECL|field|dt_terminators
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|dt_terminators
init|=
block|{
name|DT
block|,
name|DD
block|}
decl_stmt|;
DECL|field|dd_terminators
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|dd_terminators
init|=
name|dt_terminators
decl_stmt|;
comment|//<head> terminators:<body> and just about everything else
comment|/** Block-level HTML4.0 elements. */
DECL|field|block_level
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|block_level
init|=
block|{
name|ADDRESS
block|,
name|BLOCKQUOTE
block|,
name|CENTER
block|,
name|DIR
block|,
name|DIV
block|,
name|DL
block|,
name|FIELDSET
block|,
name|FORM
block|,
name|H1
block|,
name|H2
block|,
name|H3
block|,
name|H4
block|,
name|H5
block|,
name|H6
block|,
name|HR
block|,
name|MENU
block|,
name|NOSCRIPT
block|,
name|OL
block|,
name|P
block|,
name|PRE
block|,
name|TABLE
block|,
name|UL
block|}
decl_stmt|;
comment|// The P element can contain any *inline* markup - hence it is
comment|// terminated by any *blocklevel* markup (incl. other P elements):
DECL|field|p_terminators
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|p_terminators
init|=
name|block_level
decl_stmt|;
comment|// elements which cannot contain PCDATA don't care about whitespace
comment|// FIXME: ignore_ws probably not complete  [don't include empty elements]
DECL|field|ignore_ws
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|ignore_ws
init|=
block|{
name|HEAD
block|,
name|HTML
block|,
name|OL
block|,
name|MENU
block|,
name|TABLE
block|,
name|TR
block|,
name|UL
block|}
decl_stmt|;
DECL|method|applyHacks
specifier|public
specifier|static
name|void
name|applyHacks
parameter_list|(
name|Tokenizer
name|tok
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tok
operator|.
name|ignoreCase
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|EntityManager
name|entMngr
init|=
name|tok
operator|.
name|entMngr
decl_stmt|;
comment|// standard SGML entities
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"amp"
argument_list|,
literal|"&"
argument_list|)
expr_stmt|;
comment|// ampersand
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"gt"
argument_list|,
literal|">"
argument_list|)
expr_stmt|;
comment|// greater than
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"lt"
argument_list|,
literal|"<"
argument_list|)
expr_stmt|;
comment|// less than
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"quot"
argument_list|,
literal|"\""
argument_list|)
expr_stmt|;
comment|// double quote
comment|// PUBLIC ISO 8879-1986//    entities Added Latin 1//EN//HTML
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"AElig"
argument_list|,
literal|"\u00c6"
argument_list|)
expr_stmt|;
comment|// capital AE diphthong (ligature)
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Aacute"
argument_list|,
literal|"\u00c1"
argument_list|)
expr_stmt|;
comment|// capital A, acute accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Acirc"
argument_list|,
literal|"\u00c2"
argument_list|)
expr_stmt|;
comment|// capital A, circumflex accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Agrave"
argument_list|,
literal|"\u00c0"
argument_list|)
expr_stmt|;
comment|// capital A, grave accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Aring"
argument_list|,
literal|"\u00c5"
argument_list|)
expr_stmt|;
comment|// capital A, ring
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Atilde"
argument_list|,
literal|"\u00c3"
argument_list|)
expr_stmt|;
comment|// capital A, tilde
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Auml"
argument_list|,
literal|"\u00c4"
argument_list|)
expr_stmt|;
comment|// capital A, dieresis or umlaut mark
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Ccedil"
argument_list|,
literal|"\u00c7"
argument_list|)
expr_stmt|;
comment|// capital C, cedilla
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"ETH"
argument_list|,
literal|"\u00d0"
argument_list|)
expr_stmt|;
comment|// capital Eth, Icelandic
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Eacute"
argument_list|,
literal|"\u00c9"
argument_list|)
expr_stmt|;
comment|// capital E, acute accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Ecirc"
argument_list|,
literal|"\u00ca"
argument_list|)
expr_stmt|;
comment|// capital E, circumflex accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Egrave"
argument_list|,
literal|"\u00c8"
argument_list|)
expr_stmt|;
comment|// capital E, grave accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Euml"
argument_list|,
literal|"\u00cb"
argument_list|)
expr_stmt|;
comment|// capital E, dieresis or umlaut mark
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Iacute"
argument_list|,
literal|"\u00cd"
argument_list|)
expr_stmt|;
comment|// capital I, acute accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Icirc"
argument_list|,
literal|"\u00ce"
argument_list|)
expr_stmt|;
comment|// capital I, circumflex accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Igrave"
argument_list|,
literal|"\u00cc"
argument_list|)
expr_stmt|;
comment|// capital I, grave accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Iuml"
argument_list|,
literal|"\u00cf"
argument_list|)
expr_stmt|;
comment|// capital I, dieresis or umlaut mark
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Ntilde"
argument_list|,
literal|"\u00d1"
argument_list|)
expr_stmt|;
comment|// capital N, tilde
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Oacute"
argument_list|,
literal|"\u00d3"
argument_list|)
expr_stmt|;
comment|// capital O, acute accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Ocirc"
argument_list|,
literal|"\u00d4"
argument_list|)
expr_stmt|;
comment|// capital O, circumflex accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Ograve"
argument_list|,
literal|"\u00d2"
argument_list|)
expr_stmt|;
comment|// capital O, grave accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Oslash"
argument_list|,
literal|"\u00d8"
argument_list|)
expr_stmt|;
comment|// capital O, slash
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Otilde"
argument_list|,
literal|"\u00d5"
argument_list|)
expr_stmt|;
comment|// capital O, tilde
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Ouml"
argument_list|,
literal|"\u00d6"
argument_list|)
expr_stmt|;
comment|// capital O, dieresis or umlaut mark
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"THORN"
argument_list|,
literal|"\u00de"
argument_list|)
expr_stmt|;
comment|// capital THORN, Icelandic
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Uacute"
argument_list|,
literal|"\u00da"
argument_list|)
expr_stmt|;
comment|// capital U, acute accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Ucirc"
argument_list|,
literal|"\u00db"
argument_list|)
expr_stmt|;
comment|// capital U, circumflex accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Ugrave"
argument_list|,
literal|"\u00d9"
argument_list|)
expr_stmt|;
comment|// capital U, grave accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Uuml"
argument_list|,
literal|"\u00dc"
argument_list|)
expr_stmt|;
comment|// capital U, dieresis or umlaut mark
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"Yacute"
argument_list|,
literal|"\u00dd"
argument_list|)
expr_stmt|;
comment|// capital Y, acute accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"aacute"
argument_list|,
literal|"\u00e1"
argument_list|)
expr_stmt|;
comment|// small a, acute accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"acirc"
argument_list|,
literal|"\u00e2"
argument_list|)
expr_stmt|;
comment|// small a, circumflex accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"aelig"
argument_list|,
literal|"\u00e6"
argument_list|)
expr_stmt|;
comment|// small ae diphthong (ligature)
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"agrave"
argument_list|,
literal|"\u00e0"
argument_list|)
expr_stmt|;
comment|// small a, grave accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"aring"
argument_list|,
literal|"\u00e5"
argument_list|)
expr_stmt|;
comment|// small a, ring
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"atilde"
argument_list|,
literal|"\u00e3"
argument_list|)
expr_stmt|;
comment|// small a, tilde
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"auml"
argument_list|,
literal|"\u00e4"
argument_list|)
expr_stmt|;
comment|// small a, dieresis or umlaut mark
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"ccedil"
argument_list|,
literal|"\u00e7"
argument_list|)
expr_stmt|;
comment|// small c, cedilla
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"eacute"
argument_list|,
literal|"\u00e9"
argument_list|)
expr_stmt|;
comment|// small e, acute accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"ecirc"
argument_list|,
literal|"\u00ea"
argument_list|)
expr_stmt|;
comment|// small e, circumflex accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"egrave"
argument_list|,
literal|"\u00e8"
argument_list|)
expr_stmt|;
comment|// small e, grave accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"eth"
argument_list|,
literal|"\u00f0"
argument_list|)
expr_stmt|;
comment|// small eth, Icelandic
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"euml"
argument_list|,
literal|"\u00eb"
argument_list|)
expr_stmt|;
comment|// small e, dieresis or umlaut mark
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"iacute"
argument_list|,
literal|"\u00ed"
argument_list|)
expr_stmt|;
comment|// small i, acute accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"icirc"
argument_list|,
literal|"\u00ee"
argument_list|)
expr_stmt|;
comment|// small i, circumflex accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"igrave"
argument_list|,
literal|"\u00ec"
argument_list|)
expr_stmt|;
comment|// small i, grave accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"iuml"
argument_list|,
literal|"\u00ef"
argument_list|)
expr_stmt|;
comment|// small i, dieresis or umlaut mark
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"ntilde"
argument_list|,
literal|"\u00f1"
argument_list|)
expr_stmt|;
comment|// small n, tilde
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"oacute"
argument_list|,
literal|"\u00f3"
argument_list|)
expr_stmt|;
comment|// small o, acute accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"ocirc"
argument_list|,
literal|"\u00f4"
argument_list|)
expr_stmt|;
comment|// small o, circumflex accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"ograve"
argument_list|,
literal|"\u00f2"
argument_list|)
expr_stmt|;
comment|// small o, grave accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"oslash"
argument_list|,
literal|"\u00f8"
argument_list|)
expr_stmt|;
comment|// small o, slash
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"otilde"
argument_list|,
literal|"\u00f5"
argument_list|)
expr_stmt|;
comment|// small o, tilde
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"ouml"
argument_list|,
literal|"\u00f6"
argument_list|)
expr_stmt|;
comment|// small o, dieresis or umlaut mark
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"szlig"
argument_list|,
literal|"\u00df"
argument_list|)
expr_stmt|;
comment|// small sharp s, German (sz ligature)
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"thorn"
argument_list|,
literal|"\u00fe"
argument_list|)
expr_stmt|;
comment|// small thorn, Icelandic
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"uacute"
argument_list|,
literal|"\u00fa"
argument_list|)
expr_stmt|;
comment|// small u, acute accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"ucirc"
argument_list|,
literal|"\u00fb"
argument_list|)
expr_stmt|;
comment|// small u, circumflex accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"ugrave"
argument_list|,
literal|"\u00f9"
argument_list|)
expr_stmt|;
comment|// small u, grave accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"uuml"
argument_list|,
literal|"\u00fc"
argument_list|)
expr_stmt|;
comment|// small u, dieresis or umlaut mark
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"yacute"
argument_list|,
literal|"\u00fd"
argument_list|)
expr_stmt|;
comment|// small y, acute accent
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"yuml"
argument_list|,
literal|"\u00ff"
argument_list|)
expr_stmt|;
comment|// small y, dieresis or umlaut mark
comment|// Some extra Latin 1 chars that are listed in the HTML3.2 draft (21-May-96)
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"nbsp"
argument_list|,
literal|"\u00a0"
argument_list|)
expr_stmt|;
comment|// non breaking space
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"reg"
argument_list|,
literal|"\u00ae"
argument_list|)
expr_stmt|;
comment|// registered sign
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"copy"
argument_list|,
literal|"\u00a9"
argument_list|)
expr_stmt|;
comment|// copyright sign
comment|// Additional ISO-8859/1     entities listed in rfc1866 (section 14)
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"iexcl"
argument_list|,
literal|"\u00a1"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"cent"
argument_list|,
literal|"\u00a2"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"pound"
argument_list|,
literal|"\u00a3"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"curren"
argument_list|,
literal|"\u00a4"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"yen"
argument_list|,
literal|"\u00a5"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"brvbar"
argument_list|,
literal|"\u00a6"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"sect"
argument_list|,
literal|"\u00a7"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"uml"
argument_list|,
literal|"\u00a8"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"ordf"
argument_list|,
literal|"\u00aa"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"laquo"
argument_list|,
literal|"\u00ab"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"not"
argument_list|,
literal|"\u00ac"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"shy"
argument_list|,
literal|"\u00ad"
argument_list|)
expr_stmt|;
comment|// soft hyphen
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"macr"
argument_list|,
literal|"\u00af"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"deg"
argument_list|,
literal|"\u00b0"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"plusmn"
argument_list|,
literal|"\u00b1"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"sup1"
argument_list|,
literal|"\u00b9"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"sup2"
argument_list|,
literal|"\u00b2"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"sup3"
argument_list|,
literal|"\u00b3"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"acute"
argument_list|,
literal|"\u00b4"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"micro"
argument_list|,
literal|"\u00b5"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"para"
argument_list|,
literal|"\u00b6"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"middot"
argument_list|,
literal|"\u00b7"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"cedil"
argument_list|,
literal|"\u00b8"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"ordm"
argument_list|,
literal|"\u00ba"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"raquo"
argument_list|,
literal|"\u00bb"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"frac14"
argument_list|,
literal|"\u00bc"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"frac12"
argument_list|,
literal|"\u00bd"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"frac34"
argument_list|,
literal|"\u00be"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"iquest"
argument_list|,
literal|"\u00bf"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"times"
argument_list|,
literal|"\u00d7"
argument_list|)
expr_stmt|;
name|entMngr
operator|.
name|defTextEntity
argument_list|(
literal|"divide"
argument_list|,
literal|"\u00f7"
argument_list|)
expr_stmt|;
block|}
DECL|method|applyHacks
specifier|public
specifier|static
name|void
name|applyHacks
parameter_list|(
name|Parser
name|parser
parameter_list|)
block|{
name|parser
operator|.
name|addEmptyElms
argument_list|(
name|emptyElms
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setElmTerminators
argument_list|(
name|LI
argument_list|,
name|li_terminators
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setElmTerminators
argument_list|(
name|DT
argument_list|,
name|dt_terminators
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setElmTerminators
argument_list|(
name|DD
argument_list|,
name|dd_terminators
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setElmTerminators
argument_list|(
name|P
argument_list|,
name|p_terminators
argument_list|)
expr_stmt|;
comment|//parser.ignoreWS(ginore_ws);
name|applyHacks
argument_list|(
name|parser
operator|.
name|getTokenizer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
