begin_unit
begin_comment
comment|/*  * $Id$  *   * Copyright 1997 Hewlett-Packard Company  *   * This file may be copied, modified and distributed only in  * accordance with the terms of the limited licence contained  * in the accompanying file LICENSE.TXT.  */
end_comment
begin_package
DECL|package|hplb.xml
package|package
name|hplb
operator|.
name|xml
package|;
end_package
begin_import
import|import
name|hplb
operator|.
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * Implements management of list of children.  * @author  Anders Kristensen  */
end_comment
begin_class
DECL|class|NodeImpl
specifier|public
specifier|abstract
class|class
name|NodeImpl
implements|implements
name|Node
block|{
DECL|field|type
specifier|protected
name|int
name|type
decl_stmt|;
DECL|field|parent
specifier|protected
name|NodeImpl
name|parent
decl_stmt|;
DECL|field|children
specifier|protected
name|NodeListImpl
name|children
init|=
operator|new
name|NodeListImpl
argument_list|()
decl_stmt|;
DECL|method|NodeImpl
specifier|public
name|NodeImpl
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|getChildren
specifier|public
name|NodeListImpl
name|getChildren
parameter_list|()
block|{
return|return
name|children
return|;
block|}
DECL|method|getNodeType
specifier|public
name|int
name|getNodeType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|getParentNode
specifier|public
name|Node
name|getParentNode
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
DECL|method|getChildNodes
specifier|public
name|NodeIterator
name|getChildNodes
parameter_list|()
block|{
return|return
name|children
operator|.
name|getIterator
argument_list|()
return|;
block|}
DECL|method|hasChildNodes
specifier|public
name|boolean
name|hasChildNodes
parameter_list|()
block|{
return|return
operator|(
name|children
operator|.
name|getLength
argument_list|()
operator|>
literal|0
operator|)
return|;
block|}
DECL|method|getFirstChild
specifier|public
name|Node
name|getFirstChild
parameter_list|()
block|{
return|return
name|children
operator|.
name|item
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|getPreviousSibling
specifier|public
name|Node
name|getPreviousSibling
parameter_list|()
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
return|return
literal|null
return|;
else|else
return|return
name|parent
operator|.
name|children
operator|.
name|getPreviousNode
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|getNextSibling
specifier|public
name|Node
name|getNextSibling
parameter_list|()
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
return|return
literal|null
return|;
else|else
return|return
name|parent
operator|.
name|children
operator|.
name|getNextNode
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|insertBefore
specifier|public
name|Node
name|insertBefore
parameter_list|(
name|Node
name|newChild
parameter_list|,
name|Node
name|refChild
parameter_list|)
block|{
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|children
operator|.
name|insertBefore
argument_list|(
name|newChild
argument_list|,
name|refChild
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
operator|(
operator|(
name|NodeImpl
operator|)
name|newChild
operator|)
operator|.
name|parent
operator|=
name|this
expr_stmt|;
return|return
name|node
return|;
block|}
DECL|method|insertAfter
specifier|public
name|Node
name|insertAfter
parameter_list|(
name|Node
name|newChild
parameter_list|,
name|Node
name|refChild
parameter_list|)
block|{
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|children
operator|.
name|insertAfter
argument_list|(
name|newChild
argument_list|,
name|refChild
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
operator|(
operator|(
name|NodeImpl
operator|)
name|newChild
operator|)
operator|.
name|parent
operator|=
name|this
expr_stmt|;
return|return
name|node
return|;
block|}
DECL|method|replaceChild
specifier|public
name|Node
name|replaceChild
parameter_list|(
name|Node
name|newChild
parameter_list|,
name|Node
name|oldChild
parameter_list|)
block|{
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|children
operator|.
name|replace
argument_list|(
name|newChild
argument_list|,
name|oldChild
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|parent
operator|=
literal|null
expr_stmt|;
operator|(
operator|(
name|NodeImpl
operator|)
name|newChild
operator|)
operator|.
name|parent
operator|=
name|this
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
DECL|method|removeChild
specifier|public
name|Node
name|removeChild
parameter_list|(
name|Node
name|oldChild
parameter_list|)
block|{
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|children
operator|.
name|remove
argument_list|(
name|oldChild
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
name|node
operator|.
name|parent
operator|=
literal|null
expr_stmt|;
return|return
name|node
return|;
block|}
block|}
end_class
end_unit
