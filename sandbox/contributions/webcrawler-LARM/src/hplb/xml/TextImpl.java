begin_unit
begin_comment
comment|/*  * $Id$  *   * Copyright 1997 Hewlett-Packard Company  *   * This file may be copied, modified and distributed only in  * accordance with the terms of the limited licence contained  * in the accompanying file LICENSE.TXT.  */
end_comment
begin_comment
comment|// FIXME: check parameters reasonable [within bounds]
end_comment
begin_package
DECL|package|hplb.xml
package|package
name|hplb
operator|.
name|xml
package|;
end_package
begin_import
import|import
name|hplb
operator|.
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * Class whose instances represent PCDATA, comments, and PIs (processing  * instructions.  * @author  Anders Kristensen  */
end_comment
begin_class
DECL|class|TextImpl
specifier|public
class|class
name|TextImpl
extends|extends
name|NodeImpl
implements|implements
name|Text
implements|,
name|Comment
implements|,
name|PI
block|{
DECL|field|data
specifier|protected
name|String
name|data
decl_stmt|;
DECL|field|name
specifier|protected
name|String
name|name
decl_stmt|;
comment|// only valid for PIs
comment|/**      * Construct new leaf node whose value is textual.      * @param type  one of Node.PI, Node.COMMENT, and Node.TEXT.      * @param data  the PCDATA, CDATA, comment, whatever      */
DECL|method|TextImpl
specifier|public
name|TextImpl
parameter_list|(
name|int
name|type
parameter_list|,
name|String
name|data
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
comment|// getData/setData common for the three interfaces
DECL|method|getData
specifier|public
name|String
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
DECL|method|setData
specifier|public
name|void
name|setData
parameter_list|(
name|String
name|arg
parameter_list|)
block|{
name|data
operator|=
name|arg
expr_stmt|;
block|}
comment|// Text specific methods:
DECL|method|append
specifier|public
name|void
name|append
parameter_list|(
name|String
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|this
operator|.
name|data
operator|+
name|data
expr_stmt|;
block|}
DECL|method|insert
specifier|public
name|void
name|insert
parameter_list|(
name|int
name|offset
parameter_list|,
name|String
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|this
operator|.
name|data
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|offset
argument_list|)
operator|+
name|data
operator|+
name|this
operator|.
name|data
operator|.
name|substring
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|this
operator|.
name|data
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|offset
argument_list|)
operator|+
name|this
operator|.
name|data
operator|.
name|substring
argument_list|(
name|offset
operator|+
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|replace
specifier|public
name|void
name|replace
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|count
parameter_list|,
name|String
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|this
operator|.
name|data
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|offset
argument_list|)
operator|+
name|data
operator|+
name|this
operator|.
name|data
operator|.
name|substring
argument_list|(
name|offset
operator|+
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|splice
specifier|public
name|void
name|splice
parameter_list|(
name|Element
name|element
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|<=
literal|0
condition|)
block|{
name|parent
operator|.
name|insertBefore
argument_list|(
name|element
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|offset
operator|+
name|count
operator|>
name|data
operator|.
name|length
argument_list|()
condition|)
block|{
name|parent
operator|.
name|insertAfter
argument_list|(
name|element
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Node
name|n
decl_stmt|;
name|n
operator|=
operator|new
name|TextImpl
argument_list|(
name|Node
operator|.
name|TEXT
argument_list|,
name|data
operator|.
name|substring
argument_list|(
name|offset
argument_list|,
name|offset
operator|+
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|insertBefore
argument_list|(
name|n
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|n
operator|=
operator|new
name|TextImpl
argument_list|(
name|Node
operator|.
name|TEXT
argument_list|,
name|data
operator|.
name|substring
argument_list|(
name|offset
operator|+
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|insertAfter
argument_list|(
name|n
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|data
operator|=
name|data
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
comment|// PI specific methods:
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|arg
parameter_list|)
block|{
name|name
operator|=
name|arg
expr_stmt|;
block|}
DECL|method|typeAsString
specifier|protected
name|String
name|typeAsString
parameter_list|()
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Node
operator|.
name|PI
case|:
return|return
literal|"PI"
return|;
case|case
name|Node
operator|.
name|COMMENT
case|:
return|return
literal|"COMMENT"
return|;
case|case
name|Node
operator|.
name|TEXT
case|:
return|return
literal|"TEXT"
return|;
default|default:
return|return
literal|"UNKNOWN"
return|;
block|}
block|}
DECL|method|toDebugString
specifier|public
name|String
name|toDebugString
parameter_list|()
block|{
return|return
name|typeAsString
argument_list|()
operator|+
operator|(
name|data
operator|==
literal|null
condition|?
literal|""
else|:
name|Utils
operator|.
name|compact
argument_list|(
name|data
argument_list|)
operator|)
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Node
operator|.
name|PI
case|:
return|return
literal|"<?"
operator|+
name|name
operator|+
literal|" "
operator|+
name|data
operator|+
literal|"?>"
return|;
case|case
name|Node
operator|.
name|COMMENT
case|:
return|return
literal|"<!--"
operator|+
name|data
operator|+
literal|"-->"
return|;
case|case
name|Node
operator|.
name|TEXT
case|:
return|return
name|data
return|;
default|default:
return|return
literal|"UNKNOWN"
return|;
block|}
block|}
block|}
end_class
end_unit
