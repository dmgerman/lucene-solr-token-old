begin_unit
begin_comment
comment|/*  * $Id$  *   * Copyright 1997 Hewlett-Packard Company  *   * This file may be copied, modified and distributed only in  * accordance with the terms of the limited licence contained  * in the accompanying file LICENSE.TXT.  */
end_comment
begin_package
DECL|package|hplb.xml
package|package
name|hplb
operator|.
name|xml
package|;
end_package
begin_import
import|import
name|hplb
operator|.
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|AttributeMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import
begin_comment
comment|/**  * An ordered Dictionary. keys() and elements() returns Enumerations  * which enumerate over elements in the order they were inserted.  * Elements are stored linearly. Operations put(), get(), and remove()  * are linear in the number of elements in the Dictionary.  *   *<p>Allows direct access to elements (as an alternative to using  * Enumerators) for speed.  *   *<p>Can function as a<em>bag</em>, i.e. it can be created with a mode  * which allows the same key to map to multiple entries. In this case   * operations get() and remove() operate on the<em>first</em> pair in  * the map. Hence to get hold of all values associated with a key it is  * necessary to use the direct access to underlying arrays.  *   * @author  Anders Kristensen  */
end_comment
begin_class
DECL|class|SAXAttributeMap
specifier|public
class|class
name|SAXAttributeMap
implements|implements
name|AttributeMap
block|{
comment|/** The list of keys. */
DECL|field|keys
specifier|public
name|String
index|[]
name|keys
decl_stmt|;
comment|/** List of values associated with keys. */
DECL|field|elms
specifier|public
name|String
index|[]
name|elms
decl_stmt|;
comment|/**      * Number of elements in the Dictionary.      * The elements are held at indices 0 to n in the keys and elms arrays.      */
DECL|field|n
specifier|public
name|int
name|n
init|=
literal|0
decl_stmt|;
DECL|method|SAXAttributeMap
specifier|public
name|SAXAttributeMap
parameter_list|()
block|{
name|this
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a SAXAttributeMap with the specififed initial cpacity.      */
DECL|method|SAXAttributeMap
specifier|public
name|SAXAttributeMap
parameter_list|(
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|<=
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Initial size must be at least 1"
argument_list|)
throw|;
name|keys
operator|=
operator|new
name|String
index|[
name|size
index|]
expr_stmt|;
name|elms
operator|=
operator|new
name|String
index|[
name|size
index|]
expr_stmt|;
block|}
comment|/** Returns the number of keys in this dictionary. */
DECL|method|size
specifier|public
specifier|synchronized
name|int
name|size
parameter_list|()
block|{
return|return
name|n
return|;
block|}
comment|/** Returns true if this dictionary maps no keys to value. */
DECL|method|isEmpty
specifier|public
specifier|synchronized
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
comment|/**      * Returns an enumeration of the keys in this dictionary.       */
DECL|method|getAttributeNames
specifier|public
name|Enumeration
name|getAttributeNames
parameter_list|()
block|{
return|return
operator|new
name|SAXAttributeEnum
argument_list|(
name|keys
argument_list|,
name|n
argument_list|)
return|;
block|}
comment|/**      * Returns the value to which the key is mapped in this dictionary.       */
DECL|method|getValue
specifier|public
specifier|synchronized
name|String
name|getValue
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|int
name|i
init|=
name|getIndex
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|i
operator|<
literal|0
condition|?
literal|null
else|:
name|elms
index|[
name|i
index|]
operator|)
return|;
block|}
DECL|method|getIndex
specifier|protected
name|int
name|getIndex
parameter_list|(
name|String
name|key
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keys
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
return|return
name|i
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * Maps the specified key to the specified value in this dictionary.      * Neither the key nor the value can be null.       *       *<p>The value can be retrieved by calling the get method with a key      * that is equal to the original key.       * @return  the previous value to which the key was mapped in      *          this dictionary, or null if the key did not have a      *          previous mapping.      * @throws NullPointerException  if the key or value is null      */
DECL|method|put
specifier|public
specifier|synchronized
name|String
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"value is null"
argument_list|)
throw|;
name|int
name|i
init|=
name|getIndex
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|String
name|old
init|=
name|elms
index|[
name|i
index|]
decl_stmt|;
name|elms
index|[
name|i
index|]
operator|=
name|value
expr_stmt|;
return|return
name|old
return|;
block|}
name|int
name|len
init|=
name|keys
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|len
operator|==
name|n
condition|)
block|{
comment|// double size of key,elms arrays
name|String
index|[]
name|k
decl_stmt|,
name|e
decl_stmt|;
name|k
operator|=
operator|new
name|String
index|[
name|len
operator|*
literal|2
index|]
expr_stmt|;
name|e
operator|=
operator|new
name|String
index|[
name|len
operator|*
literal|2
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|keys
argument_list|,
literal|0
argument_list|,
name|k
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|elms
argument_list|,
literal|0
argument_list|,
name|e
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|keys
operator|=
name|k
expr_stmt|;
name|elms
operator|=
name|e
expr_stmt|;
block|}
name|keys
index|[
name|n
index|]
operator|=
name|key
expr_stmt|;
name|elms
index|[
name|n
index|]
operator|=
name|value
expr_stmt|;
name|n
operator|++
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|n
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|isEntity
specifier|public
name|boolean
name|isEntity
parameter_list|(
name|String
name|aname
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|method|isNotation
specifier|public
name|boolean
name|isNotation
parameter_list|(
name|String
name|aname
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|method|isId
specifier|public
name|boolean
name|isId
parameter_list|(
name|String
name|aname
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|method|isIdref
specifier|public
name|boolean
name|isIdref
parameter_list|(
name|String
name|aname
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|method|getEntityPublicID
specifier|public
name|String
name|getEntityPublicID
parameter_list|(
name|String
name|aname
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|getEntitySystemID
specifier|public
name|String
name|getEntitySystemID
parameter_list|(
name|String
name|aname
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|getNotationName
specifier|public
name|String
name|getNotationName
parameter_list|(
name|String
name|aname
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|getNotationPublicID
specifier|public
name|String
name|getNotationPublicID
parameter_list|(
name|String
name|aname
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|getNotationSystemID
specifier|public
name|String
name|getNotationSystemID
parameter_list|(
name|String
name|aname
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|toString
specifier|public
specifier|synchronized
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|f
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{ "
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|getAttributeNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|f
condition|)
block|{
name|f
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|""
operator|+
name|key
operator|+
literal|'='
operator|+
name|getValue
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/*     // for testing     public static void main(String[] args) throws Exception {         SAXAttributeMap d;         java.io.BufferedReader r;         java.util.StringTokenizer tok;         String op;                  if (args.length> 1) {             d = new SAXAttributeMap(Integer.parseInt(args[0]));         } else {             d = new SAXAttributeMap();         }                  System.out.println(             "Enter operations... op's are one of\n"+             "put<key><val>\n"+             "get<key>\n"+             "enum\n"+             "size\n"+             "quit\n");                  r = new java.io.BufferedReader(                 new java.io.InputStreamReader(System.in));          while (true) {             System.out.print("doyourworst> ");             tok = new java.util.StringTokenizer(r.readLine());             op = tok.nextToken();             if ("put".equals(op)) {                 System.out.println("Value: " +                                    d.put(tok.nextToken(), tok.nextToken()));             } else if ("get".equals(op)) {                 System.out.println("Value: " + d.getValue(tok.nextToken()));             } else if ("enum".equals(op)) {                 for (Enumeration e = d.getAttributeNames();                      e.hasMoreElements(); ) {                     System.out.println("" + e.nextElement() + " ");                 }             } else if (op.startsWith("s")) {                 System.out.println("Size: " + d.size());             } else if (op.startsWith("q")) {                 break;             } else {                 System.out.println("Unrecognized op: " + op);             }                          System.out.println("Dictionary: " + d);             System.out.println("Size: " + d.size());             System.out.println();         }     }     */
block|}
end_class
begin_class
DECL|class|SAXAttributeEnum
class|class
name|SAXAttributeEnum
implements|implements
name|Enumeration
block|{
DECL|field|objs
name|String
index|[]
name|objs
decl_stmt|;
DECL|field|i
DECL|field|n
name|int
name|i
init|=
literal|0
decl_stmt|,
name|n
decl_stmt|;
DECL|method|SAXAttributeEnum
specifier|public
name|SAXAttributeEnum
parameter_list|(
name|String
index|[]
name|objs
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|this
operator|.
name|objs
operator|=
name|objs
expr_stmt|;
name|this
operator|.
name|n
operator|=
name|n
expr_stmt|;
block|}
DECL|method|hasMoreElements
specifier|public
name|boolean
name|hasMoreElements
parameter_list|()
block|{
return|return
name|i
operator|<
name|n
return|;
block|}
DECL|method|nextElement
specifier|public
name|Object
name|nextElement
parameter_list|()
block|{
return|return
name|objs
index|[
name|i
operator|++
index|]
return|;
block|}
block|}
end_class
end_unit
