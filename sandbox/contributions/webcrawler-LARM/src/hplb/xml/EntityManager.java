begin_unit
begin_comment
comment|/*  * $Id$  *  * Copyright 1997 Hewlett-Packard Company  *  * This file may be copied, modified and distributed only in  * accordance with the terms of the limited licence contained  * in the accompanying file LICENSE.TXT.  */
end_comment
begin_package
DECL|package|hplb.xml
package|package
name|hplb
operator|.
name|xml
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * A very simple entity manager.  * @author  Anders Kristensen  */
end_comment
begin_class
DECL|class|EntityManager
specifier|public
class|class
name|EntityManager
block|{
DECL|field|entities
specifier|protected
name|Hashtable
name|entities
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
DECL|field|tok
specifier|private
name|hplb
operator|.
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Parser
name|tok
decl_stmt|;
DECL|method|EntityManager
specifier|public
name|EntityManager
parameter_list|(
name|hplb
operator|.
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Parser
name|tok
parameter_list|)
block|{
name|this
operator|.
name|tok
operator|=
name|tok
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"amp"
argument_list|,
literal|"&"
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"lt"
argument_list|,
literal|"<"
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"gt"
argument_list|,
literal|">"
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"apos"
argument_list|,
literal|"'"
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"quot"
argument_list|,
literal|"\""
argument_list|)
expr_stmt|;
block|}
comment|/**      * Finds entitiy and character references in the provided char array      * and decodes them. The operation is destructive, i.e. the encoded      * string replaces the original - this is atrightforward since the      * new string can only get shorter.      */
DECL|method|entityDecode
specifier|public
specifier|final
name|CharBuffer
name|entityDecode
parameter_list|(
name|CharBuffer
name|buffer
parameter_list|)
throws|throws
name|Exception
block|{
name|char
index|[]
name|buf
init|=
name|buffer
operator|.
name|getCharArray
argument_list|()
decl_stmt|;
comment|// avoids method calls
name|int
name|len
init|=
name|buffer
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// not fastest but certainly simplest:
if|if
condition|(
name|indexOf
argument_list|(
name|buf
argument_list|,
literal|'&'
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
operator|==
operator|-
literal|1
condition|)
return|return
name|buffer
return|;
name|CharBuffer
name|newbuf
init|=
operator|new
name|CharBuffer
argument_list|(
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|start
init|=
literal|0
init|;
condition|;
control|)
block|{
name|int
name|x
init|=
name|indexOf
argument_list|(
name|buf
argument_list|,
literal|'&'
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
operator|-
literal|1
condition|)
block|{
name|newbuf
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|start
argument_list|,
name|len
operator|-
name|start
argument_list|)
expr_stmt|;
return|return
name|newbuf
return|;
block|}
else|else
block|{
name|newbuf
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|start
argument_list|,
name|x
operator|-
name|start
argument_list|)
expr_stmt|;
name|start
operator|=
name|x
operator|+
literal|1
expr_stmt|;
name|x
operator|=
name|indexOf
argument_list|(
name|buf
argument_list|,
literal|';'
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|==
operator|-
literal|1
condition|)
block|{
comment|//tok.warning("Entity reference not semicolon terminated");
name|newbuf
operator|.
name|write
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
comment|//break; //???????????
block|}
else|else
block|{
try|try
block|{
name|writeEntityDef
argument_list|(
name|buf
argument_list|,
name|start
argument_list|,
name|x
operator|-
name|start
argument_list|,
name|newbuf
argument_list|)
expr_stmt|;
name|start
operator|=
name|x
operator|+
literal|1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//tok.warning("Bad entity reference");
block|}
block|}
block|}
block|}
block|}
comment|// character references are rare enough that we don't care about
comment|// creating a String object for them unnecessarily...
DECL|method|writeEntityDef
specifier|public
name|void
name|writeEntityDef
parameter_list|(
name|char
index|[]
name|buf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|,
name|Writer
name|out
parameter_list|)
throws|throws
name|Exception
throws|,
name|IOException
throws|,
name|NumberFormatException
block|{
name|Integer
name|ch
decl_stmt|;
comment|//System.out.println("Entity: " + new String(buf, off, len) +" "+off+" "+len);
if|if
condition|(
name|buf
index|[
name|off
index|]
operator|==
literal|'#'
condition|)
block|{
comment|// character reference
name|off
operator|++
expr_stmt|;
name|len
operator|--
expr_stmt|;
if|if
condition|(
name|buf
index|[
name|off
index|]
operator|==
literal|'x'
operator|||
name|buf
index|[
name|off
index|]
operator|==
literal|'X'
condition|)
block|{
name|ch
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
operator|new
name|String
argument_list|(
name|buf
argument_list|,
name|off
operator|+
literal|1
argument_list|,
name|len
operator|-
literal|1
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ch
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
operator|new
name|String
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|ch
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|ent
init|=
operator|new
name|String
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|String
name|val
init|=
operator|(
name|String
operator|)
name|entities
operator|.
name|get
argument_list|(
name|ent
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
literal|"&"
operator|+
name|ent
operator|+
literal|";"
argument_list|)
expr_stmt|;
comment|//tok.warning("unknown entity reference: " + ent);
block|}
block|}
block|}
DECL|method|defTextEntity
specifier|public
name|String
name|defTextEntity
parameter_list|(
name|String
name|entity
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|entities
operator|.
name|put
argument_list|(
name|entity
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * Returns the index within this String of the first occurrence of the      * specified character, starting the search at fromIndex. This method      * returns -1 if the character is not found.      * @params buf        the buffer to search      * @params ch         the character to search for      * @params from       the index to start the search from      * @params to         the highest possible index returned plus 1      * @throws IndexOutOfBoundsException  if index out of bounds...      */
DECL|method|indexOf
specifier|public
specifier|static
specifier|final
name|int
name|indexOf
parameter_list|(
name|char
index|[]
name|buf
parameter_list|,
name|int
name|ch
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|from
init|;
name|i
operator|<
name|to
operator|&&
name|buf
index|[
name|i
index|]
operator|!=
name|ch
condition|;
name|i
operator|++
control|)
empty_stmt|;
comment|// do nothing
if|if
condition|(
name|i
operator|<
name|to
condition|)
return|return
name|i
return|;
else|else
return|return
operator|-
literal|1
return|;
block|}
comment|// FOR TESTING
comment|/*     public static void main(String[] args) throws Exception {         Parser tok = new Parser();         tst.xml.TokArgs.args(args, tok);         CharBuffer buf1 = new CharBuffer();         buf1.write(args[0]);         CharBuffer buf2 = tok.entMngr.entityDecode(buf1);          System.out.println("Changed: " + (buf1 != buf2));         System.out.println("Result: [" + buf2 + "]");     }     */
block|}
end_class
end_unit
