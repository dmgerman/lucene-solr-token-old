begin_unit
begin_comment
comment|/*  * $Id$  *  * Copyright 1997 Hewlett-Packard Company  *  * This file may be copied, modified and distributed only in  * accordance with the terms of the limited licence contained  * in the accompanying file LICENSE.TXT.  */
end_comment
begin_package
DECL|package|hplb.xml.util
package|package
name|hplb
operator|.
name|xml
operator|.
name|util
package|;
end_package
begin_import
import|import
name|hplb
operator|.
name|xml
operator|.
name|*
import|;
end_import
begin_import
import|import
name|hplb
operator|.
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * Reads an HTML document on System.in, "normalizes" it in a couple of ways, and  * writes it to System.out. In the process HTML4.0 element names are converted to  * upper case, attribute names are converted to lower case, all attribute values  * gets enclosed in double quotes, all non-empty elements with an optional and  * omitted end tag are given an end tag.  *  * @author      Anders Kristensen  */
end_comment
begin_class
DECL|class|NormalizeHtml
specifier|public
class|class
name|NormalizeHtml
block|{
DECL|field|out
specifier|static
name|PrintStream
name|out
init|=
name|System
operator|.
name|out
decl_stmt|;
DECL|method|usage
specifier|public
specifier|static
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
comment|/*         Tokenizer tok = new Tokenizer();         tok.setDocumentHandler(new NormalizeHtml());         HTML.applyHacks(tok);         //tok.rcgnzEntities = false;         tok.rcgnzCDATA = false;         tok.atomize = true;         tok.parse(System.in);         */
name|HtmlXmlParser
name|parser
init|=
operator|new
name|HtmlXmlParser
argument_list|()
decl_stmt|;
name|Tokenizer
name|tok
init|=
name|parser
operator|.
name|getTokenizer
argument_list|()
decl_stmt|;
name|tok
operator|.
name|rcgnzEntities
operator|=
literal|false
expr_stmt|;
name|tok
operator|.
name|rcgnzCDATA
operator|=
literal|false
expr_stmt|;
name|tok
operator|.
name|rcgnzComments
operator|=
literal|false
expr_stmt|;
name|tok
operator|.
name|atomize
operator|=
literal|true
expr_stmt|;
name|print
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|print
specifier|public
specifier|static
name|void
name|print
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
comment|//print(doc.getDocumentElement());
name|NodeIterator
name|iter
init|=
name|doc
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|toNext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|printNode
argument_list|(
name|iter
operator|.
name|getCurrent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printNode
specifier|public
specifier|static
name|void
name|printNode
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|Document
condition|)
name|print
argument_list|(
operator|(
name|Document
operator|)
name|node
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|Element
condition|)
name|print
argument_list|(
operator|(
name|Element
operator|)
name|node
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|Text
condition|)
name|print
argument_list|(
operator|(
name|Text
operator|)
name|node
argument_list|)
expr_stmt|;
else|else
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error: non-text, non-element node ignored."
argument_list|)
expr_stmt|;
block|}
DECL|method|print
specifier|public
specifier|static
name|void
name|print
parameter_list|(
name|Text
name|text
parameter_list|)
block|{
comment|//out.print(encodeText(text.getData(), false));
name|out
operator|.
name|print
argument_list|(
name|text
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|print
specifier|public
specifier|static
name|void
name|print
parameter_list|(
name|Element
name|elm
parameter_list|)
block|{
name|String
name|tagName
init|=
name|elm
operator|.
name|getTagName
argument_list|()
decl_stmt|;
name|AttributeList
name|attrs
init|=
name|elm
operator|.
name|attributes
argument_list|()
decl_stmt|;
name|boolean
name|isHtmlElm
init|=
name|isHtmlElm
argument_list|(
name|tagName
argument_list|)
decl_stmt|;
name|boolean
name|isEmpty
init|=
operator|(
name|elm
operator|.
name|getFirstChild
argument_list|()
operator|==
literal|null
operator|)
decl_stmt|;
name|boolean
name|isHtmlEmptyElm
init|=
operator|(
name|tagName
operator|==
name|HTML
operator|.
name|AREA
operator|||
name|tagName
operator|==
name|HTML
operator|.
name|BASE
operator|||
name|tagName
operator|==
name|HTML
operator|.
name|BR
operator|||
name|tagName
operator|==
name|HTML
operator|.
name|COL
operator|||
name|tagName
operator|==
name|HTML
operator|.
name|FRAME
operator|||
name|tagName
operator|==
name|HTML
operator|.
name|HR
operator|||
name|tagName
operator|==
name|HTML
operator|.
name|IMG
operator|||
name|tagName
operator|==
name|HTML
operator|.
name|LINK
operator|||
name|tagName
operator|==
name|HTML
operator|.
name|META
operator|||
name|tagName
operator|==
name|HTML
operator|.
name|PARAM
operator|)
decl_stmt|;
if|if
condition|(
name|isHtmlElm
condition|)
name|tagName
operator|=
name|tagName
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
comment|// print start tag and attribute name-value pairs
name|out
operator|.
name|print
argument_list|(
literal|"<"
operator|+
name|tagName
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|attrs
operator|.
name|getLength
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|print
argument_list|(
name|attrs
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|,
name|isHtmlElm
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isEmpty
operator|&&
operator|!
name|isHtmlEmptyElm
condition|)
name|out
operator|.
name|print
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isEmpty
condition|)
return|return;
comment|// print content
name|NodeIterator
name|iter
init|=
name|elm
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|toNext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|printNode
argument_list|(
name|iter
operator|.
name|getCurrent
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// print end tag
name|out
operator|.
name|print
argument_list|(
literal|"</"
operator|+
name|tagName
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
DECL|method|print
specifier|public
specifier|static
name|void
name|print
parameter_list|(
name|Attribute
name|attr
parameter_list|,
name|boolean
name|toLower
parameter_list|)
block|{
name|String
name|a
init|=
name|attr
operator|.
name|getName
argument_list|()
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" "
operator|+
operator|(
name|toLower
condition|?
name|a
operator|.
name|toLowerCase
argument_list|()
else|:
name|a
operator|)
operator|+
literal|"=\""
operator|+
name|encodeText
argument_list|(
name|attr
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|+
literal|'"'
argument_list|)
expr_stmt|;
block|}
DECL|method|encodeText
specifier|public
specifier|static
name|String
name|encodeText
parameter_list|(
name|String
name|s
parameter_list|,
name|boolean
name|attr
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|ch
decl_stmt|,
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|ch
operator|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'"'
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"&quot;"
argument_list|)
expr_stmt|;
comment|/* cause we don't recognize markup within PCDATA and attr values             else if (ch == '&') sb.append("&amp;");             else if (!attr&& ch == '<') sb.append("&lt;");             else if (!attr&& ch == '>') sb.append("&gt;");             else if ((" \r\n\t".indexOf((char) ch) != -1)&& (ch<= 31 || ch>= 127)) sb.append("&#"+ch+";");             */
else|else
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|isHtmlElm
specifier|public
specifier|static
name|boolean
name|isHtmlElm
parameter_list|(
name|String
name|tagName
parameter_list|)
block|{
name|int
name|len
init|=
name|HTML
operator|.
name|elements
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|tagName
operator|==
name|HTML
operator|.
name|elements
index|[
name|i
index|]
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class
end_unit
