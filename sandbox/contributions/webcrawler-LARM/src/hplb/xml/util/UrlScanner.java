begin_unit
begin_comment
comment|/*  * $Id$  *   * Copyright 1997 Hewlett-Packard Company  *   * This file may be copied, modified and distributed only in  * accordance with the terms of the limited licence contained  * in the accompanying file LICENSE.TXT.  *   * Copyright 1998 Hewlett-Packard Company  *   * This file may be copied, modified and distributed only in  * accordance with the terms of the limited licence contained  * in the accompanying file LICENSE.TXT.  */
end_comment
begin_package
DECL|package|hplb.xml.util
package|package
name|hplb
operator|.
name|xml
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_comment
comment|/**  * Scans an HTML Web object for embedded link and prints them on stdout.  *<b>Usage</b>:  *<pre>  *  java hplb.www.client.UrlScan [-t] [-v] [-h proxy-host] [-p proxy-port] URL  *  where -t means test validity of embedded URLs and  *        -v means be verbose  *</pre>  *   * @author      Anders Kristensen  */
end_comment
begin_class
DECL|class|UrlScanner
specifier|public
class|class
name|UrlScanner
implements|implements
name|HtmlObserver
block|{
comment|// should use getenv and/or getProperty for these:
DECL|field|proxyHost
specifier|static
name|String
name|proxyHost
decl_stmt|;
DECL|field|proxyPort
specifier|static
name|String
name|proxyPort
decl_stmt|;
DECL|field|test
specifier|static
name|boolean
name|test
decl_stmt|;
DECL|field|verbose
specifier|static
name|boolean
name|verbose
decl_stmt|;
DECL|method|usage
specifier|public
specifier|static
name|void
name|usage
parameter_list|()
block|{
name|PrintStream
name|out
init|=
name|System
operator|.
name|out
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Usage: UrlScan [-v] [-t]<baseurl>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Extracts URLs from System.in and writes them on stdout."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"  -v  verbose mode"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"  -t  test links (using HTTP HEAD requests)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
literal|null
decl_stmt|;
comment|//HttpClient cl;
comment|//HttpResponse res = null;
try|try
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
name|args
index|[
name|args
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
literal|"-t"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|test
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-v"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|verbose
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-h"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|proxyHost
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-p"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|proxyPort
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
comment|//cl = new HttpClient(url);
if|if
condition|(
name|proxyHost
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
literal|"http.proxyHost"
argument_list|,
name|proxyHost
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proxyPort
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
literal|"http.proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
block|}
comment|/*         try {             res = cl.get();         } catch (UnknownHostException e) {             panic("Couldn't connect to host " + e.getMessage());         } catch (IOException e) {             panic("I/O exception");         } catch (Exception e) {             panic("Error: " + e.getMessage());         }         */
operator|new
name|HtmlScanner
argument_list|(
name|url
argument_list|,
operator|new
name|UrlScanner
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|panic
specifier|public
specifier|static
name|void
name|panic
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|reason
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|gotAHref
specifier|public
name|void
name|gotAHref
parameter_list|(
name|String
name|urlStr
parameter_list|,
name|URL
name|contextUrl
parameter_list|,
name|Object
name|data
parameter_list|)
block|{
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|contextUrl
argument_list|,
name|urlStr
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|url
operator|.
name|toExternalForm
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
condition|)
name|testLink
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|verbose
condition|)
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Invoked when the scanner finds an&lt;img src=""&gt; URL. */
DECL|method|gotImgSrc
specifier|public
name|void
name|gotImgSrc
parameter_list|(
name|String
name|urlStr
parameter_list|,
name|URL
name|contextUrl
parameter_list|,
name|Object
name|data
parameter_list|)
block|{
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|contextUrl
argument_list|,
name|urlStr
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|url
operator|.
name|toExternalForm
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
condition|)
name|testLink
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|verbose
condition|)
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Invoked when the scanner finds a&lt;base href=""&gt; URL. */
DECL|method|gotBaseHref
specifier|public
name|void
name|gotBaseHref
parameter_list|(
name|String
name|urlStr
parameter_list|,
name|URL
name|contextUrl
parameter_list|,
name|Object
name|data
parameter_list|)
block|{
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"gotBASEHREF: "
operator|+
name|urlStr
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"               "
operator|+
name|contextUrl
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Invoked when the scanner finds a&lt;area href=""&gt; URL. */
DECL|method|gotAreaHref
specifier|public
name|void
name|gotAreaHref
parameter_list|(
name|String
name|urlStr
parameter_list|,
name|URL
name|contextUrl
parameter_list|,
name|Object
name|data
parameter_list|)
block|{
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"gotAreaHref:   "
operator|+
name|urlStr
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"               "
operator|+
name|contextUrl
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Invoked when the scanner finds an&lt;frame src=""&gt; URL. */
DECL|method|gotFrameSrc
specifier|public
name|void
name|gotFrameSrc
parameter_list|(
name|String
name|urlStr
parameter_list|,
name|URL
name|contextUrl
parameter_list|,
name|Object
name|data
parameter_list|)
block|{
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|contextUrl
argument_list|,
name|urlStr
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|url
operator|.
name|toExternalForm
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
condition|)
name|testLink
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|verbose
condition|)
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testLink
specifier|public
specifier|static
name|void
name|testLink
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
comment|/*         HttpClient cl = new HttpClient(url);         if (proxyHost != null)             cl.setProxyAddr(proxyHost, proxyPort);         HttpResponse res = cl.head();          System.out.print(" " + res.getStatusCode());         if (verbose) System.out.print(" " + res.getReason());         */
block|}
block|}
end_class
end_unit
