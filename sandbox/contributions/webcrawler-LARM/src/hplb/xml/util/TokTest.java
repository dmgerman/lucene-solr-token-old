begin_unit
begin_comment
comment|/*  * $Id$  *   * Copyright 1997 Hewlett-Packard Company  *   * This file may be copied, modified and distributed only in  * accordance with the terms of the limited licence contained  * in the accompanying file LICENSE.TXT.  */
end_comment
begin_package
DECL|package|hplb.xml.util
package|package
name|hplb
operator|.
name|xml
operator|.
name|util
package|;
end_package
begin_import
import|import
name|hplb
operator|.
name|xml
operator|.
name|*
import|;
end_import
begin_import
import|import
name|hplb
operator|.
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * Test of Tokenizer.  * Usage: TokTest [-w]< html-file  * @author  Anders Kristensen  */
end_comment
begin_class
DECL|class|TokTest
specifier|public
class|class
name|TokTest
implements|implements
name|DocumentHandler
block|{
DECL|field|tok
specifier|static
name|Tokenizer
name|tok
decl_stmt|;
DECL|field|out
specifier|static
name|PrintStream
name|out
init|=
name|System
operator|.
name|out
decl_stmt|;
DECL|field|n
name|int
name|n
init|=
literal|60
decl_stmt|;
DECL|field|n2
name|int
name|n2
init|=
operator|(
name|n
operator|-
literal|3
operator|)
operator|/
literal|2
decl_stmt|;
DECL|method|startDocument
specifier|public
name|void
name|startDocument
parameter_list|()
block|{
name|out
operator|.
name|println
argument_list|(
literal|"START DOC"
argument_list|)
expr_stmt|;
block|}
DECL|method|endDocument
specifier|public
name|void
name|endDocument
parameter_list|()
block|{
name|out
operator|.
name|println
argument_list|(
literal|"END DOC"
argument_list|)
expr_stmt|;
block|}
DECL|method|doctype
specifier|public
name|void
name|doctype
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|publicID
parameter_list|,
name|String
name|systemID
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"DOC TYPE "
operator|+
name|name
operator|+
literal|", "
operator|+
name|publicID
operator|+
literal|", "
operator|+
name|systemID
argument_list|)
expr_stmt|;
block|}
DECL|method|startElement
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|name
parameter_list|,
name|AttributeMap
name|attributes
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"START "
operator|+
name|name
operator|+
literal|", "
operator|+
name|attributes
argument_list|)
expr_stmt|;
block|}
DECL|method|endElement
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"END   "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|characters
specifier|public
name|void
name|characters
parameter_list|(
name|char
name|ch
index|[]
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
comment|//out.println("Chars: " + new String(ch, start, length));
name|out
operator|.
name|println
argument_list|(
literal|"Chars: "
operator|+
name|compact
argument_list|(
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|ignorable
specifier|public
name|void
name|ignorable
parameter_list|(
name|char
name|ch
index|[]
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Ignorable: "
operator|+
name|compact
argument_list|(
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|processingInstruction
specifier|public
name|void
name|processingInstruction
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|remainder
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"PI: "
operator|+
name|name
operator|+
literal|", "
operator|+
name|compact
argument_list|(
name|remainder
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Returns short description of PCDATA argument.
DECL|method|compact
specifier|public
name|String
name|compact
parameter_list|(
name|char
index|[]
name|buf
parameter_list|)
block|{
return|return
name|compact
argument_list|(
operator|new
name|String
argument_list|(
name|buf
argument_list|)
argument_list|)
return|;
block|}
DECL|method|compact
specifier|public
name|String
name|compact
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|<
name|n
condition|)
block|{
return|return
literal|"["
operator|+
name|noCRLF
argument_list|(
name|s
argument_list|)
operator|+
literal|"]"
return|;
block|}
else|else
block|{
return|return
literal|"["
operator|+
name|noCRLF
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|n2
argument_list|)
argument_list|)
operator|+
literal|"..."
operator|+
name|noCRLF
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|s
operator|.
name|length
argument_list|()
operator|-
name|n2
argument_list|)
argument_list|)
operator|+
literal|"]"
return|;
block|}
block|}
DECL|method|noCRLF
specifier|private
specifier|static
name|String
name|noCRLF
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|replace
argument_list|(
literal|'\r'
argument_list|,
literal|' '
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\n'
argument_list|,
literal|' '
argument_list|)
return|;
block|}
comment|/**      * Process options in 'args' vector and apply to the supplied Tokenizer.      */
DECL|method|args
specifier|public
specifier|static
name|void
name|args
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|Tokenizer
name|tok
parameter_list|)
block|{
comment|// case mappoing: tags/attr names/attr values, upper/lower/depends...
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
literal|"-w"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|tok
operator|.
name|rcgnzWS
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-d"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|tok
operator|.
name|rcgnzComments
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-c"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|tok
operator|.
name|rcgnzCDATA
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-e"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|tok
operator|.
name|rcgnzEntities
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-h"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|HTML
operator|.
name|applyHacks
argument_list|(
name|tok
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unrecognized option: "
operator|+
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|tok
operator|=
operator|new
name|Tokenizer
argument_list|()
expr_stmt|;
name|tok
operator|.
name|setDocumentHandler
argument_list|(
operator|new
name|TokTest
argument_list|()
argument_list|)
expr_stmt|;
name|args
argument_list|(
name|args
argument_list|,
name|tok
argument_list|)
expr_stmt|;
name|tok
operator|.
name|parse
argument_list|(
name|System
operator|.
name|in
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
