begin_unit
begin_comment
comment|/*  * $Id$  *   * Copyright 1997 Hewlett-Packard Company  *   * This file may be copied, modified and distributed only in  * accordance with the terms of the limited licence contained  * in the accompanying file LICENSE.TXT.  */
end_comment
begin_package
DECL|package|hplb.misc
package|package
name|hplb
operator|.
name|misc
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * This class is a container for algorithms working on byte arrays - some  * of the algorithms are analogous to those in java.lang.String.  * @author      Anders Kristensen  */
end_comment
begin_class
DECL|class|ByteArray
specifier|public
class|class
name|ByteArray
block|{
comment|/** Returns copy of characters in s as a new byte array. */
DECL|method|getBytes
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|getBytes
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
name|byte
name|b
index|[]
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|s
operator|.
name|getBytes
argument_list|(
literal|0
argument_list|,
name|len
argument_list|,
name|b
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
comment|/** Returns contents of file as byte array. */
DECL|method|loadFromFile
specifier|public
specifier|static
name|byte
index|[]
name|loadFromFile
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|loadFromFile
argument_list|(
operator|new
name|File
argument_list|(
name|filename
argument_list|)
argument_list|)
return|;
block|}
comment|/** Returns contents of file<i>file</i> as byte array. */
DECL|method|loadFromFile
specifier|public
specifier|static
name|byte
index|[]
name|loadFromFile
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|n
decl_stmt|,
name|nread
init|=
literal|0
decl_stmt|,
name|len
init|=
operator|(
name|int
operator|)
name|file
operator|.
name|length
argument_list|()
decl_stmt|;
name|FileInputStream
name|fin
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|byte
index|[]
name|content
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
while|while
condition|(
name|nread
operator|<
name|len
condition|)
block|{
if|if
condition|(
operator|(
name|n
operator|=
name|fin
operator|.
name|read
argument_list|(
name|content
argument_list|,
name|nread
argument_list|,
name|len
operator|-
name|nread
argument_list|)
operator|)
operator|==
operator|-
literal|1
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error loading Compound from file"
argument_list|)
throw|;
name|nread
operator|+=
name|n
expr_stmt|;
block|}
return|return
name|content
return|;
block|}
comment|/**    * Reads n bytes from the specified input stream. It will return    * fewer bytes if fewer bytes are available on the stream.    * Hence the application should check the resulting arrays length.    */
DECL|method|readn
specifier|public
specifier|static
name|byte
index|[]
name|readn
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|n
index|]
decl_stmt|;
name|int
name|ntotal
init|=
literal|0
decl_stmt|;
name|int
name|nread
decl_stmt|;
while|while
condition|(
name|ntotal
operator|<
name|n
condition|)
block|{
name|nread
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|,
name|ntotal
argument_list|,
name|n
operator|-
name|ntotal
argument_list|)
expr_stmt|;
if|if
condition|(
name|nread
operator|<
literal|0
condition|)
block|{
comment|// we got less than expected - return what we got
name|byte
index|[]
name|newbuf
init|=
operator|new
name|byte
index|[
name|ntotal
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|newbuf
argument_list|,
literal|0
argument_list|,
name|ntotal
argument_list|)
expr_stmt|;
return|return
name|newbuf
return|;
block|}
name|ntotal
operator|+=
name|nread
expr_stmt|;
block|}
return|return
name|buf
return|;
block|}
comment|/**    * Return contents of a WWW resource identified by a URL.    * @param url the resource to retrieve    * @return    the resource contents as a byte array    */
DECL|method|getContent
specifier|public
specifier|static
name|byte
index|[]
name|getContent
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|URLConnection
name|conn
init|=
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|InputStream
name|in
init|=
name|conn
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|int
name|length
decl_stmt|;
comment|/*      * N.B. URLConnection.getContentLength() is buggy for "http" resources      * (at least in JDK1.0.2) and won't work for "file" URLs either.      */
name|length
operator|=
name|length
operator|=
name|conn
operator|.
name|getContentLength
argument_list|()
expr_stmt|;
if|if
condition|(
name|length
operator|==
operator|-
literal|1
condition|)
name|length
operator|=
name|conn
operator|.
name|getHeaderFieldInt
argument_list|(
literal|"Content-Length"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|length
operator|==
operator|-
literal|1
condition|)
return|return
name|readAll
argument_list|(
name|in
argument_list|)
return|;
return|return
name|readn
argument_list|(
name|in
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/**    * Read all input from an InputStream and return as a byte array.    * This method will not return before the end of the stream is reached.    * @return    contents of the stream    */
DECL|method|readAll
specifier|public
specifier|static
name|byte
index|[]
name|readAll
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|nread
decl_stmt|,
name|ntotal
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|nread
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|,
name|ntotal
argument_list|,
name|buf
operator|.
name|length
operator|-
name|ntotal
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
name|ntotal
operator|+=
name|nread
expr_stmt|;
if|if
condition|(
name|ntotal
operator|==
name|buf
operator|.
name|length
condition|)
block|{
comment|// extend buffer
name|byte
index|[]
name|newbuf
init|=
operator|new
name|byte
index|[
name|buf
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|newbuf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
name|buf
operator|=
name|newbuf
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ntotal
operator|<
name|buf
operator|.
name|length
condition|)
block|{
comment|// we cannot have excess space
name|byte
index|[]
name|newbuf
init|=
operator|new
name|byte
index|[
name|ntotal
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|newbuf
argument_list|,
literal|0
argument_list|,
name|ntotal
argument_list|)
expr_stmt|;
name|buf
operator|=
name|newbuf
expr_stmt|;
block|}
return|return
name|buf
return|;
block|}
comment|/**    * Copies data from the specified input stream to the output stream    * until end of file is met.    * @return    the total number of bytes written to the output stream    */
DECL|method|cpybytes
specifier|public
specifier|static
name|int
name|cpybytes
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|n
decl_stmt|,
name|ntotal
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|ntotal
operator|+=
name|n
expr_stmt|;
block|}
return|return
name|ntotal
return|;
block|}
comment|/**    * Copies data from the specified input stream to the output stream    * until<em>n</em> bytes has been copied or end of file is met.    * @return    the total number of bytes written to the output stream    */
DECL|method|cpybytes
specifier|public
specifier|static
name|int
name|cpybytes
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|n
operator|<
literal|1024
condition|?
name|n
else|:
literal|1024
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|sz
index|]
decl_stmt|;
name|int
name|chunk
decl_stmt|,
name|nread
decl_stmt|,
name|ntotal
init|=
literal|0
decl_stmt|;
name|chunk
operator|=
name|sz
expr_stmt|;
while|while
condition|(
name|ntotal
operator|<
name|n
operator|&&
operator|(
name|nread
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|chunk
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|nread
argument_list|)
expr_stmt|;
name|ntotal
operator|+=
name|nread
expr_stmt|;
name|chunk
operator|=
operator|(
name|n
operator|-
name|ntotal
operator|<
name|sz
operator|)
condition|?
name|n
operator|-
name|ntotal
else|:
name|sz
expr_stmt|;
block|}
return|return
name|ntotal
return|;
block|}
comment|/**    * Returns the index within this String of the first occurrence of the    * specified character or -1 if the character is not found.    * @params buf        the buffer to search    * @params ch         the character to search for    */
DECL|method|indexOf
specifier|public
specifier|static
specifier|final
name|int
name|indexOf
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|ch
parameter_list|)
block|{
return|return
name|indexOf
argument_list|(
name|buf
argument_list|,
name|ch
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Returns the index within this String of the first occurrence of the    * specified character, starting the search at fromIndex. This method    * returns -1 if the character is not found.    * @params buf        the buffer to search    * @params ch         the character to search for    * @params fromIndex  the index to start the search from     * @params toIndex    the highest possible index returned plus 1    */
DECL|method|indexOf
specifier|public
specifier|static
specifier|final
name|int
name|indexOf
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|ch
parameter_list|,
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|fromIndex
init|;
name|i
operator|<
name|toIndex
operator|&&
name|buf
index|[
name|i
index|]
operator|!=
name|ch
condition|;
name|i
operator|++
control|)
empty_stmt|;
comment|// do nothing
if|if
condition|(
name|i
operator|<
name|toIndex
condition|)
return|return
name|i
return|;
else|else
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Returns the index of the first occurrence of s in the specified    * buffer or -1 if this is not found.    */
DECL|method|indexOf
specifier|public
specifier|static
specifier|final
name|int
name|indexOf
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
name|indexOf
argument_list|(
name|buf
argument_list|,
name|s
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * Returns the index of the first occurrence of s in the specified    * buffer. The search starts from fromIndex. This method returns -1    * if the index is not found.    */
DECL|method|indexOf
specifier|public
specifier|static
specifier|final
name|int
name|indexOf
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|String
name|s
parameter_list|,
name|int
name|fromIndex
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
comment|// index into buf
name|int
name|j
decl_stmt|;
comment|// index into s
name|int
name|max_i
init|=
name|buf
operator|.
name|length
decl_stmt|;
name|int
name|max_j
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|i
operator|=
name|fromIndex
init|;
name|i
operator|+
name|max_j
operator|<=
name|max_i
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|max_j
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|buf
index|[
name|j
operator|+
name|i
index|]
operator|!=
name|s
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
condition|)
break|break;
block|}
if|if
condition|(
name|j
operator|==
name|max_j
condition|)
return|return
name|i
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/*   // for testing indexOf(byte[], String, int)   public static void main(String[] args) {     byte[] buf = getBytes(args[0]);     System.out.println("IndexOf(arg0, arg1, 0) = " + indexOf(buf, args[1], 3));   } */
DECL|method|isSpace
specifier|public
specifier|static
specifier|final
name|boolean
name|isSpace
parameter_list|(
name|int
name|ch
parameter_list|)
block|{
if|if
condition|(
name|ch
operator|==
literal|' '
operator|||
name|ch
operator|==
literal|'\t'
operator|||
name|ch
operator|==
literal|'\n'
operator|||
name|ch
operator|==
literal|'\r'
condition|)
return|return
literal|true
return|;
else|else
return|return
literal|false
return|;
block|}
DECL|method|skipSpaces
specifier|public
specifier|static
specifier|final
name|int
name|skipSpaces
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|fromIndex
init|;
name|i
operator|<
name|toIndex
operator|&&
name|isSpace
argument_list|(
name|buf
index|[
name|i
index|]
argument_list|)
condition|;
name|i
operator|++
control|)
empty_stmt|;
return|return
name|i
return|;
block|}
comment|/**    * Find byte pattern ptrn in buffer buf.    * @return    index of first occurrence of ptrn in buf, -1 if no occurence    */
DECL|method|findBytes
specifier|public
specifier|static
specifier|final
name|int
name|findBytes
parameter_list|(
name|byte
name|buf
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|,
name|byte
name|ptrn
index|[]
parameter_list|)
block|{
comment|// Note: This code is completely incomprehensible without a drawing...
name|int
name|buf_len
init|=
name|off
operator|+
name|len
decl_stmt|;
name|int
name|ptrn_len
init|=
name|ptrn
operator|.
name|length
decl_stmt|;
name|int
name|i
decl_stmt|;
comment|// index into buf
name|int
name|j
decl_stmt|;
comment|// index into ptrn;
name|byte
name|b
init|=
name|ptrn
index|[
literal|0
index|]
decl_stmt|;
comment|// next byte of interest
for|for
control|(
name|i
operator|=
name|off
init|;
name|i
operator|<
name|buf_len
condition|;
control|)
block|{
name|j
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|i
operator|<
name|buf_len
operator|&&
name|j
operator|<
name|ptrn_len
operator|&&
name|buf
index|[
name|i
index|]
operator|==
name|ptrn
index|[
name|j
index|]
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
name|buf_len
operator|||
name|j
operator|==
name|ptrn_len
condition|)
return|return
name|i
operator|-
name|j
return|;
else|else
block|{
comment|// We have to go back a bit as there may be an overlapping
comment|// match starting a bit later in buf...
name|i
operator|=
name|i
operator|-
name|j
operator|+
literal|1
expr_stmt|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/*   // for testing findBytes(byte[], int, int, byte[])    public static void main(String args[]) {     if (args.length< 4) {       System.err.println("Usage: s1 off len s2");       System.exit(1);     }     byte b1[] = new byte[args[0].length()];     byte b2[] = new byte[args[3].length()];     args[0].getBytes(0, args[0].length(), b1, 0);     args[3].getBytes(0, args[3].length(), b2, 0);     int off = Integer.parseInt(args[1]);     int len = Integer.parseInt(args[2]);     System.out.println("Index = " + findBytes(b1, off, len, b2));   } */
block|}
end_class
end_unit
