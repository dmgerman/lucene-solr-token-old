begin_unit
begin_package
DECL|package|de.lanlab.larm.net
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|net
package|;
end_package
begin_comment
comment|/*  *  ====================================================================  *  The Apache Software License, Version 1.1  *  *  Copyright (c) 2001 The Apache Software Foundation.  All rights  *  reserved.  *  *  Redistribution and use in source and binary forms, with or without  *  modification, are permitted provided that the following conditions  *  are met:  *  *  1. Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.  *  *  2. Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in  *  the documentation and/or other materials provided with the  *  distribution.  *  *  3. The end-user documentation included with the redistribution,  *  if any, must include the following acknowledgment:  *  "This product includes software developed by the  *  Apache Software Foundation (http://www.apache.org/)."  *  Alternately, this acknowledgment may appear in the software itself,  *  if and wherever such third-party acknowledgments normally appear.  *  *  4. The names "Apache" and "Apache Software Foundation" and  *  "Apache Lucene" must not be used to endorse or promote products  *  derived from this software without prior written permission. For  *  written permission, please contact apache@apache.org.  *  *  5. Products derived from this software may not be called "Apache",  *  "Apache Lucene", nor may "Apache" appear in their name, without  *  prior written permission of the Apache Software Foundation.  *  *  THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  *  DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  *  ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  *  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  *  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  *  SUCH DAMAGE.  *  ====================================================================  *  *  This software consists of voluntary contributions made by many  *  individuals on behalf of the Apache Software Foundation.  For more  *  information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * Description of the Class  *  * @author    Administrator  * @created   14. Juni 2002  */
end_comment
begin_class
DECL|class|URLNormalizer
specifier|public
class|class
name|URLNormalizer
block|{
DECL|field|NP_SLASH
specifier|final
specifier|static
name|int
name|NP_SLASH
init|=
literal|1
decl_stmt|;
DECL|field|NP_CHAR
specifier|final
specifier|static
name|int
name|NP_CHAR
init|=
literal|2
decl_stmt|;
DECL|field|NP_PERCENT
specifier|final
specifier|static
name|int
name|NP_PERCENT
init|=
literal|3
decl_stmt|;
DECL|field|NP_POINT
specifier|final
specifier|static
name|int
name|NP_POINT
init|=
literal|4
decl_stmt|;
DECL|field|NP_HEX
specifier|final
specifier|static
name|int
name|NP_HEX
init|=
literal|5
decl_stmt|;
comment|/**      * contains hex codes for characters in lowercase uses char arrays instead      * of strings for faster processing      */
DECL|field|charMap
specifier|protected
specifier|static
name|char
index|[]
index|[]
name|charMap
init|=
block|{
block|{
literal|'%'
block|,
literal|'0'
block|,
literal|'0'
block|}
block|,
block|{
literal|'%'
block|,
literal|'0'
block|,
literal|'1'
block|}
block|,
block|{
literal|'%'
block|,
literal|'0'
block|,
literal|'2'
block|}
block|,
block|{
literal|'%'
block|,
literal|'0'
block|,
literal|'3'
block|}
block|,
block|{
literal|'%'
block|,
literal|'0'
block|,
literal|'4'
block|}
block|,
block|{
literal|'%'
block|,
literal|'0'
block|,
literal|'5'
block|}
block|,
block|{
literal|'%'
block|,
literal|'0'
block|,
literal|'6'
block|}
block|,
block|{
literal|'%'
block|,
literal|'0'
block|,
literal|'7'
block|}
block|,
block|{
literal|'%'
block|,
literal|'0'
block|,
literal|'8'
block|}
block|,
block|{
literal|'%'
block|,
literal|'0'
block|,
literal|'9'
block|}
block|,
block|{
literal|'%'
block|,
literal|'0'
block|,
literal|'A'
block|}
block|,
block|{
literal|'%'
block|,
literal|'0'
block|,
literal|'B'
block|}
block|,
block|{
literal|'%'
block|,
literal|'0'
block|,
literal|'C'
block|}
block|,
block|{
literal|'%'
block|,
literal|'0'
block|,
literal|'D'
block|}
block|,
block|{
literal|'%'
block|,
literal|'0'
block|,
literal|'E'
block|}
block|,
block|{
literal|'%'
block|,
literal|'0'
block|,
literal|'F'
block|}
block|,
block|{
literal|'%'
block|,
literal|'1'
block|,
literal|'0'
block|}
block|,
block|{
literal|'%'
block|,
literal|'1'
block|,
literal|'1'
block|}
block|,
block|{
literal|'%'
block|,
literal|'1'
block|,
literal|'2'
block|}
block|,
block|{
literal|'%'
block|,
literal|'1'
block|,
literal|'3'
block|}
block|,
block|{
literal|'%'
block|,
literal|'1'
block|,
literal|'4'
block|}
block|,
block|{
literal|'%'
block|,
literal|'1'
block|,
literal|'5'
block|}
block|,
block|{
literal|'%'
block|,
literal|'1'
block|,
literal|'6'
block|}
block|,
block|{
literal|'%'
block|,
literal|'1'
block|,
literal|'7'
block|}
block|,
block|{
literal|'%'
block|,
literal|'1'
block|,
literal|'8'
block|}
block|,
block|{
literal|'%'
block|,
literal|'1'
block|,
literal|'9'
block|}
block|,
block|{
literal|'%'
block|,
literal|'1'
block|,
literal|'A'
block|}
block|,
block|{
literal|'%'
block|,
literal|'1'
block|,
literal|'B'
block|}
block|,
block|{
literal|'%'
block|,
literal|'1'
block|,
literal|'C'
block|}
block|,
block|{
literal|'%'
block|,
literal|'1'
block|,
literal|'D'
block|}
block|,
block|{
literal|'%'
block|,
literal|'1'
block|,
literal|'E'
block|}
block|,
block|{
literal|'%'
block|,
literal|'1'
block|,
literal|'F'
block|}
block|,
block|{
literal|'%'
block|,
literal|'2'
block|,
literal|'0'
block|}
block|,
block|{
literal|'%'
block|,
literal|'2'
block|,
literal|'1'
block|}
block|,
block|{
literal|'%'
block|,
literal|'2'
block|,
literal|'2'
block|}
block|,
block|{
literal|'%'
block|,
literal|'2'
block|,
literal|'3'
block|}
block|,
block|{
literal|'$'
block|}
block|,
block|{
literal|'%'
block|,
literal|'2'
block|,
literal|'5'
block|}
block|,
block|{
literal|'%'
block|,
literal|'2'
block|,
literal|'6'
block|}
block|,
block|{
literal|'%'
block|,
literal|'2'
block|,
literal|'7'
block|}
block|,
block|{
literal|'%'
block|,
literal|'2'
block|,
literal|'8'
block|}
block|,
block|{
literal|'%'
block|,
literal|'2'
block|,
literal|'9'
block|}
block|,
block|{
literal|'%'
block|,
literal|'2'
block|,
literal|'A'
block|}
block|,
block|{
literal|'%'
block|,
literal|'2'
block|,
literal|'B'
block|}
block|,
block|{
literal|'%'
block|,
literal|'2'
block|,
literal|'C'
block|}
block|,
block|{
literal|'-'
block|}
block|,
block|{
literal|'.'
block|}
block|,
block|{
literal|'%'
block|,
literal|'2'
block|,
literal|'F'
block|}
block|,
block|{
literal|'0'
block|}
block|,
block|{
literal|'1'
block|}
block|,
block|{
literal|'2'
block|}
block|,
block|{
literal|'3'
block|}
block|,
block|{
literal|'4'
block|}
block|,
block|{
literal|'5'
block|}
block|,
block|{
literal|'6'
block|}
block|,
block|{
literal|'7'
block|}
block|,
block|{
literal|'8'
block|}
block|,
block|{
literal|'9'
block|}
block|,
block|{
literal|'%'
block|,
literal|'3'
block|,
literal|'A'
block|}
block|,
block|{
literal|'%'
block|,
literal|'3'
block|,
literal|'B'
block|}
block|,
block|{
literal|'%'
block|,
literal|'3'
block|,
literal|'C'
block|}
block|,
block|{
literal|'%'
block|,
literal|'3'
block|,
literal|'D'
block|}
block|,
block|{
literal|'%'
block|,
literal|'3'
block|,
literal|'E'
block|}
block|,
block|{
literal|'%'
block|,
literal|'3'
block|,
literal|'F'
block|}
block|,
block|{
literal|'%'
block|,
literal|'4'
block|,
literal|'0'
block|}
block|,
block|{
literal|'a'
block|}
block|,
block|{
literal|'b'
block|}
block|,
block|{
literal|'c'
block|}
block|,
block|{
literal|'d'
block|}
block|,
block|{
literal|'e'
block|}
block|,
block|{
literal|'f'
block|}
block|,
block|{
literal|'g'
block|}
block|,
block|{
literal|'h'
block|}
block|,
block|{
literal|'i'
block|}
block|,
block|{
literal|'j'
block|}
block|,
block|{
literal|'k'
block|}
block|,
block|{
literal|'l'
block|}
block|,
block|{
literal|'m'
block|}
block|,
block|{
literal|'n'
block|}
block|,
block|{
literal|'o'
block|}
block|,
block|{
literal|'p'
block|}
block|,
block|{
literal|'q'
block|}
block|,
block|{
literal|'r'
block|}
block|,
block|{
literal|'s'
block|}
block|,
block|{
literal|'t'
block|}
block|,
block|{
literal|'u'
block|}
block|,
block|{
literal|'v'
block|}
block|,
block|{
literal|'w'
block|}
block|,
block|{
literal|'x'
block|}
block|,
block|{
literal|'y'
block|}
block|,
block|{
literal|'z'
block|}
block|,
block|{
literal|'%'
block|,
literal|'5'
block|,
literal|'B'
block|}
block|,
block|{
literal|'%'
block|,
literal|'5'
block|,
literal|'C'
block|}
block|,
block|{
literal|'%'
block|,
literal|'5'
block|,
literal|'D'
block|}
block|,
block|{
literal|'%'
block|,
literal|'5'
block|,
literal|'E'
block|}
block|,
block|{
literal|'_'
block|}
block|,
block|{
literal|'%'
block|,
literal|'6'
block|,
literal|'0'
block|}
block|,
block|{
literal|'a'
block|}
block|,
block|{
literal|'b'
block|}
block|,
block|{
literal|'c'
block|}
block|,
block|{
literal|'d'
block|}
block|,
block|{
literal|'e'
block|}
block|,
block|{
literal|'f'
block|}
block|,
block|{
literal|'g'
block|}
block|,
block|{
literal|'h'
block|}
block|,
block|{
literal|'i'
block|}
block|,
block|{
literal|'j'
block|}
block|,
block|{
literal|'k'
block|}
block|,
block|{
literal|'l'
block|}
block|,
block|{
literal|'m'
block|}
block|,
block|{
literal|'n'
block|}
block|,
block|{
literal|'o'
block|}
block|,
block|{
literal|'p'
block|}
block|,
block|{
literal|'q'
block|}
block|,
block|{
literal|'r'
block|}
block|,
block|{
literal|'s'
block|}
block|,
block|{
literal|'t'
block|}
block|,
block|{
literal|'u'
block|}
block|,
block|{
literal|'v'
block|}
block|,
block|{
literal|'w'
block|}
block|,
block|{
literal|'x'
block|}
block|,
block|{
literal|'y'
block|}
block|,
block|{
literal|'z'
block|}
block|,
block|{
literal|'%'
block|,
literal|'7'
block|,
literal|'B'
block|}
block|,
block|{
literal|'%'
block|,
literal|'7'
block|,
literal|'C'
block|}
block|,
block|{
literal|'%'
block|,
literal|'7'
block|,
literal|'D'
block|}
block|,
block|{
literal|'%'
block|,
literal|'7'
block|,
literal|'E'
block|}
block|,
block|{
literal|'%'
block|,
literal|'7'
block|,
literal|'F'
block|}
block|,
block|{
literal|'%'
block|,
literal|'8'
block|,
literal|'0'
block|}
block|,
block|{
literal|'%'
block|,
literal|'8'
block|,
literal|'1'
block|}
block|,
block|{
literal|'%'
block|,
literal|'8'
block|,
literal|'2'
block|}
block|,
block|{
literal|'%'
block|,
literal|'8'
block|,
literal|'3'
block|}
block|,
block|{
literal|'%'
block|,
literal|'8'
block|,
literal|'4'
block|}
block|,
block|{
literal|'%'
block|,
literal|'8'
block|,
literal|'5'
block|}
block|,
block|{
literal|'%'
block|,
literal|'8'
block|,
literal|'6'
block|}
block|,
block|{
literal|'%'
block|,
literal|'8'
block|,
literal|'7'
block|}
block|,
block|{
literal|'%'
block|,
literal|'8'
block|,
literal|'8'
block|}
block|,
block|{
literal|'%'
block|,
literal|'8'
block|,
literal|'9'
block|}
block|,
block|{
literal|'%'
block|,
literal|'8'
block|,
literal|'A'
block|}
block|,
block|{
literal|'%'
block|,
literal|'8'
block|,
literal|'B'
block|}
block|,
block|{
literal|'%'
block|,
literal|'8'
block|,
literal|'C'
block|}
block|,
block|{
literal|'%'
block|,
literal|'8'
block|,
literal|'D'
block|}
block|,
block|{
literal|'%'
block|,
literal|'8'
block|,
literal|'E'
block|}
block|,
block|{
literal|'%'
block|,
literal|'8'
block|,
literal|'F'
block|}
block|,
block|{
literal|'%'
block|,
literal|'9'
block|,
literal|'0'
block|}
block|,
block|{
literal|'%'
block|,
literal|'9'
block|,
literal|'1'
block|}
block|,
block|{
literal|'%'
block|,
literal|'9'
block|,
literal|'2'
block|}
block|,
block|{
literal|'%'
block|,
literal|'9'
block|,
literal|'3'
block|}
block|,
block|{
literal|'%'
block|,
literal|'9'
block|,
literal|'4'
block|}
block|,
block|{
literal|'%'
block|,
literal|'9'
block|,
literal|'5'
block|}
block|,
block|{
literal|'%'
block|,
literal|'9'
block|,
literal|'6'
block|}
block|,
block|{
literal|'%'
block|,
literal|'9'
block|,
literal|'7'
block|}
block|,
block|{
literal|'%'
block|,
literal|'9'
block|,
literal|'8'
block|}
block|,
block|{
literal|'%'
block|,
literal|'9'
block|,
literal|'9'
block|}
block|,
block|{
literal|'%'
block|,
literal|'9'
block|,
literal|'A'
block|}
block|,
block|{
literal|'%'
block|,
literal|'9'
block|,
literal|'B'
block|}
block|,
block|{
literal|'%'
block|,
literal|'9'
block|,
literal|'C'
block|}
block|,
block|{
literal|'%'
block|,
literal|'9'
block|,
literal|'D'
block|}
block|,
block|{
literal|'%'
block|,
literal|'9'
block|,
literal|'E'
block|}
block|,
block|{
literal|'%'
block|,
literal|'9'
block|,
literal|'F'
block|}
block|,
block|{
literal|'%'
block|,
literal|'A'
block|,
literal|'0'
block|}
block|,
block|{
literal|'%'
block|,
literal|'A'
block|,
literal|'1'
block|}
block|,
block|{
literal|'%'
block|,
literal|'A'
block|,
literal|'2'
block|}
block|,
block|{
literal|'%'
block|,
literal|'A'
block|,
literal|'3'
block|}
block|,
block|{
literal|'%'
block|,
literal|'A'
block|,
literal|'4'
block|}
block|,
block|{
literal|'%'
block|,
literal|'A'
block|,
literal|'5'
block|}
block|,
block|{
literal|'%'
block|,
literal|'A'
block|,
literal|'6'
block|}
block|,
block|{
literal|'%'
block|,
literal|'A'
block|,
literal|'7'
block|}
block|,
block|{
literal|'%'
block|,
literal|'A'
block|,
literal|'8'
block|}
block|,
block|{
literal|'%'
block|,
literal|'A'
block|,
literal|'9'
block|}
block|,
block|{
literal|'%'
block|,
literal|'A'
block|,
literal|'A'
block|}
block|,
block|{
literal|'%'
block|,
literal|'A'
block|,
literal|'B'
block|}
block|,
block|{
literal|'%'
block|,
literal|'A'
block|,
literal|'C'
block|}
block|,
block|{
literal|'%'
block|,
literal|'A'
block|,
literal|'D'
block|}
block|,
block|{
literal|'%'
block|,
literal|'A'
block|,
literal|'E'
block|}
block|,
block|{
literal|'%'
block|,
literal|'A'
block|,
literal|'F'
block|}
block|,
block|{
literal|'%'
block|,
literal|'B'
block|,
literal|'0'
block|}
block|,
block|{
literal|'%'
block|,
literal|'B'
block|,
literal|'1'
block|}
block|,
block|{
literal|'%'
block|,
literal|'B'
block|,
literal|'2'
block|}
block|,
block|{
literal|'%'
block|,
literal|'B'
block|,
literal|'3'
block|}
block|,
block|{
literal|'%'
block|,
literal|'B'
block|,
literal|'4'
block|}
block|,
block|{
literal|'%'
block|,
literal|'B'
block|,
literal|'5'
block|}
block|,
block|{
literal|'%'
block|,
literal|'B'
block|,
literal|'6'
block|}
block|,
block|{
literal|'%'
block|,
literal|'B'
block|,
literal|'7'
block|}
block|,
block|{
literal|'%'
block|,
literal|'B'
block|,
literal|'8'
block|}
block|,
block|{
literal|'%'
block|,
literal|'B'
block|,
literal|'9'
block|}
block|,
block|{
literal|'%'
block|,
literal|'B'
block|,
literal|'A'
block|}
block|,
block|{
literal|'%'
block|,
literal|'B'
block|,
literal|'B'
block|}
block|,
block|{
literal|'%'
block|,
literal|'B'
block|,
literal|'C'
block|}
block|,
block|{
literal|'%'
block|,
literal|'B'
block|,
literal|'D'
block|}
block|,
block|{
literal|'%'
block|,
literal|'B'
block|,
literal|'E'
block|}
block|,
block|{
literal|'%'
block|,
literal|'B'
block|,
literal|'F'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'0'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'1'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'2'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'3'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'4'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'5'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'6'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'7'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'8'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'9'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'A'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'B'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'C'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'D'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'E'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'F'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'0'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'1'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'2'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'3'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'4'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'5'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'6'
block|}
block|,
block|{
literal|'%'
block|,
literal|'D'
block|,
literal|'7'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'8'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'9'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'A'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'B'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'C'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'D'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'E'
block|}
block|,
block|{
literal|'%'
block|,
literal|'D'
block|,
literal|'F'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'0'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'1'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'2'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'3'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'4'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'5'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'6'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'7'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'8'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'9'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'A'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'B'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'C'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'D'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'E'
block|}
block|,
block|{
literal|'%'
block|,
literal|'E'
block|,
literal|'F'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'0'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'1'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'2'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'3'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'4'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'5'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'6'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'7'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'8'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'9'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'A'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'B'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'C'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'D'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'E'
block|}
block|,
block|{
literal|'%'
block|,
literal|'F'
block|,
literal|'F'
block|}
block|,             }
decl_stmt|;
comment|/**      * Description of the Method      *      * @param path             Description of the Parameter      * @return                 Description of the Return Value      * @exception IOException  Description of the Exception      */
DECL|method|normalizePath
specifier|protected
specifier|static
name|String
name|normalizePath
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
comment|// rule 1: if the path is empty, return "/"
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|"/"
return|;
block|}
comment|// Finite State Machine to convert characters to lowercase, remove "//" and "/./"
comment|// and make sure that all characters are escaped in a uniform way, i.e.
comment|// {" ", "+", "%20"} -> "%20"
name|StringBuffer
name|w
init|=
operator|new
name|StringBuffer
argument_list|(
call|(
name|int
call|)
argument_list|(
name|path
operator|.
name|length
argument_list|()
operator|*
literal|1.5
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|status
init|=
name|NP_CHAR
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|int
name|length
init|=
name|path
operator|.
name|length
argument_list|()
decl_stmt|;
name|char
name|savedChar
init|=
literal|'?'
decl_stmt|;
name|int
name|hexChar
init|=
literal|'?'
decl_stmt|;
name|int
name|pathPos
init|=
operator|-
literal|1
decl_stmt|;
comment|// position of last "/"
name|int
name|questionPos
init|=
operator|-
literal|1
decl_stmt|;
comment|// assert length>0
name|boolean
name|isInQuery
init|=
literal|false
decl_stmt|;
comment|// question mark reached?
while|while
condition|(
name|pos
operator|<
name|length
condition|)
block|{
name|char
name|c
init|=
name|path
operator|.
name|charAt
argument_list|(
name|pos
operator|++
argument_list|)
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|NP_SLASH
case|:
if|if
condition|(
name|c
operator|==
literal|'/'
condition|)
block|{
comment|// ignore subsequent slashes
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'.'
condition|)
block|{
name|status
operator|=
name|NP_POINT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'%'
condition|)
block|{
name|status
operator|=
name|NP_PERCENT
expr_stmt|;
block|}
else|else
block|{
name|pos
operator|--
expr_stmt|;
name|status
operator|=
name|NP_CHAR
expr_stmt|;
block|}
break|break;
case|case
name|NP_POINT
case|:
if|if
condition|(
name|c
operator|==
literal|'/'
condition|)
block|{
comment|// ignore
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'.'
condition|)
block|{
comment|// ignore; this shouldn't happen
block|}
else|else
block|{
name|w
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|pos
operator|--
expr_stmt|;
name|status
operator|=
name|NP_SLASH
expr_stmt|;
block|}
break|break;
case|case
name|NP_PERCENT
case|:
if|if
condition|(
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
condition|)
block|{
name|hexChar
operator|=
operator|(
name|c
operator|-
literal|'0'
operator|)
operator|<<
literal|4
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|'a'
operator|&&
name|c
operator|<=
literal|'f'
condition|)
block|{
name|hexChar
operator|=
operator|(
name|c
operator|-
literal|'a'
operator|+
literal|10
operator|)
operator|<<
literal|4
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'F'
condition|)
block|{
name|hexChar
operator|=
operator|(
name|c
operator|-
literal|'A'
operator|+
literal|10
operator|)
operator|<<
literal|4
expr_stmt|;
block|}
else|else
block|{
name|w
operator|.
name|append
argument_list|(
name|charMap
index|[
literal|'%'
index|]
argument_list|)
expr_stmt|;
name|w
operator|.
name|append
argument_list|(
name|charMap
index|[
name|c
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
name|savedChar
operator|=
name|c
expr_stmt|;
name|status
operator|=
name|NP_HEX
expr_stmt|;
break|break;
case|case
name|NP_HEX
case|:
if|if
condition|(
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
condition|)
block|{
name|hexChar
operator||=
operator|(
name|c
operator|-
literal|'0'
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|'a'
operator|&&
name|c
operator|<=
literal|'f'
condition|)
block|{
name|hexChar
operator||=
operator|(
name|c
operator|-
literal|'a'
operator|+
literal|10
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'F'
condition|)
block|{
name|hexChar
operator||=
operator|(
name|c
operator|-
literal|'A'
operator|+
literal|10
operator|)
expr_stmt|;
block|}
else|else
block|{
name|w
operator|.
name|append
argument_list|(
name|charMap
index|[
literal|'%'
index|]
argument_list|)
expr_stmt|;
name|w
operator|.
name|append
argument_list|(
name|charMap
index|[
name|savedChar
index|]
argument_list|)
expr_stmt|;
name|w
operator|.
name|append
argument_list|(
name|charMap
index|[
name|c
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
name|w
operator|.
name|append
argument_list|(
name|charMap
index|[
name|hexChar
index|]
argument_list|)
expr_stmt|;
name|status
operator|=
name|NP_CHAR
expr_stmt|;
break|break;
case|case
name|NP_CHAR
case|:
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'%'
case|:
name|status
operator|=
name|NP_PERCENT
expr_stmt|;
break|break;
case|case
literal|'/'
case|:
if|if
condition|(
operator|!
name|isInQuery
condition|)
block|{
name|w
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|pathPos
operator|=
name|w
operator|.
name|length
argument_list|()
expr_stmt|;
comment|// points to the char. after "/"
name|status
operator|=
name|NP_SLASH
expr_stmt|;
block|}
else|else
block|{
name|w
operator|.
name|append
argument_list|(
name|charMap
index|[
name|c
index|]
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'?'
case|:
if|if
condition|(
operator|!
name|isInQuery
condition|)
block|{
if|if
condition|(
name|pathPos
operator|==
operator|-
literal|1
condition|)
block|{
name|w
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|pathPos
operator|=
name|w
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|questionPos
operator|=
name|w
operator|.
name|length
argument_list|()
expr_stmt|;
comment|// points to the char at "?"
name|isInQuery
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|w
operator|.
name|append
argument_list|(
name|charMap
index|[
name|c
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'&'
case|:
case|case
literal|';'
case|:
case|case
literal|'@'
case|:
comment|//case ':':
case|case
literal|'='
case|:
name|w
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'+'
case|:
name|w
operator|.
name|append
argument_list|(
literal|"%20"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|w
operator|.
name|append
argument_list|(
name|charMap
index|[
name|c
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
comment|// we encountered a unicode character>= 0x00ff
comment|// write UTF-8 to distinguish it from other characters
comment|// note that this does NOT lead to a pure UTF-8 URL since we
comment|// write 0x80<= c<= 0xff as one-byte strings
comment|/*                  *  if (ch<= 0x007f) {		// other ASCII                  *  sbuf.append(hex[ch]);                  *  } else                  */
comment|// note that we ignore the case that we receive "%" + unicode + c
comment|// (status = NP_HEX + Exception when writing savedchar); in that case
comment|// only the second character is written. we consider this to be very
comment|// unlikely
comment|// see http://www.w3.org/International/O-URL-code.html
if|if
condition|(
name|c
operator|<=
literal|0x07FF
condition|)
block|{
comment|// non-ASCII<= 0x7FF
name|w
operator|.
name|append
argument_list|(
name|charMap
index|[
literal|0xc0
operator||
operator|(
name|c
operator|>>
literal|6
operator|)
index|]
argument_list|)
expr_stmt|;
name|w
operator|.
name|append
argument_list|(
name|charMap
index|[
literal|0x80
operator||
operator|(
name|c
operator|&
literal|0x3F
operator|)
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// 0x7FF< c<= 0xFFFF
name|w
operator|.
name|append
argument_list|(
name|charMap
index|[
literal|0xe0
operator||
operator|(
name|c
operator|>>
literal|12
operator|)
index|]
argument_list|)
expr_stmt|;
name|w
operator|.
name|append
argument_list|(
name|charMap
index|[
literal|0x80
operator||
operator|(
operator|(
name|c
operator|>>
literal|6
operator|)
operator|&
literal|0x3F
operator|)
index|]
argument_list|)
expr_stmt|;
name|w
operator|.
name|append
argument_list|(
name|charMap
index|[
literal|0x80
operator||
operator|(
name|c
operator|&
literal|0x3F
operator|)
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// rule 3: delete index.* or default.*
if|if
condition|(
name|questionPos
operator|==
operator|-
literal|1
condition|)
comment|// no query
block|{
name|questionPos
operator|=
name|w
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|questionPos
operator|==
name|w
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
comment|// empty query. assert questionPos> 0
name|w
operator|.
name|deleteCharAt
argument_list|(
name|questionPos
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pathPos
operator|==
operator|-
literal|1
condition|)
comment|// no query
block|{
name|pathPos
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|questionPos
operator|>
name|pathPos
condition|)
block|{
name|String
name|file
init|=
name|w
operator|.
name|substring
argument_list|(
name|pathPos
argument_list|,
name|questionPos
argument_list|)
decl_stmt|;
block|{
comment|//System.out.println("file: " + file);
if|if
condition|(
name|file
operator|.
name|startsWith
argument_list|(
literal|"index."
argument_list|)
operator|||
name|file
operator|.
name|startsWith
argument_list|(
literal|"default."
argument_list|)
condition|)
block|{
name|w
operator|.
name|delete
argument_list|(
name|pathPos
argument_list|,
name|questionPos
argument_list|)
expr_stmt|;
comment|// delete default page to avoid ambiguities
block|}
block|}
block|}
return|return
name|w
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Description of the Method      *      * @param host  Description of the Parameter      * @return      Description of the Return Value      */
DECL|method|normalizeHost
specifier|protected
specifier|static
name|String
name|normalizeHost
parameter_list|(
name|HostManager
name|hostManager
parameter_list|,
name|String
name|host
parameter_list|)
block|{
return|return
name|hostManager
operator|.
name|getHostInfo
argument_list|(
name|host
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|getHostName
argument_list|()
return|;
block|}
comment|/*     HostManager hostManager; */
comment|/**      * Constructor for the URLNormalizer object      *      * @param hostManager  Description of the Parameter      */
comment|/* public URLNormalizer(HostManager hostManager)     {         this.hostManager = hostManager;     }*/
comment|/**      * Description of the Method      *      * @param u                          Description of the Parameter      * @return                           Description of the Return Value      * @exception IOException            Description of the Exception      * @exception MalformedURLException  Description of the Exception      */
DECL|method|normalize
specifier|public
specifier|static
name|URL
name|normalize
parameter_list|(
name|URL
name|u
parameter_list|,
name|HostManager
name|hostManager
parameter_list|)
block|{
if|if
condition|(
name|u
operator|.
name|getProtocol
argument_list|()
operator|.
name|equals
argument_list|(
literal|"http"
argument_list|)
condition|)
block|{
try|try
block|{
name|int
name|port
init|=
name|u
operator|.
name|getPort
argument_list|()
decl_stmt|;
comment|/*URL url =*/
return|return
operator|new
name|URL
argument_list|(
name|u
operator|.
name|getProtocol
argument_list|()
argument_list|,
name|normalizeHost
argument_list|(
name|hostManager
argument_list|,
name|u
operator|.
name|getHost
argument_list|()
argument_list|)
argument_list|,
name|port
operator|==
literal|80
condition|?
operator|-
literal|1
else|:
name|port
argument_list|,
name|normalizePath
argument_list|(
name|u
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
return|;
comment|/*if(!u.equals(url))                 {                     System.out.println(u.toExternalForm() + " -> " + url.toExternalForm());                 }                 return url;*/
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"assertion failed: MalformedURLException in URLNormalizer.normalize()"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|InternalError
argument_list|(
literal|"assertion failed: MalformedURLException in URLNormalizer.normalize()"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"assertion failed: IOException in URLNormalizer.normalize()"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|InternalError
argument_list|(
literal|"assertion failed: MalformedURLException in URLNormalizer.normalize()"
argument_list|)
throw|;
block|}
comment|//return url
block|}
else|else
block|{
return|return
name|u
return|;
block|}
block|}
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|HostManager
name|hm
init|=
operator|new
name|HostManager
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|hm
operator|.
name|addSynonym
argument_list|(
literal|"webinfo.campus.lmu.de"
argument_list|,
literal|"webinfo.uni-muenchen.de"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|URLNormalizer
operator|.
name|normalize
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://www.lmu.de/conman/index.jsp?path=709"
argument_list|)
argument_list|,
name|hm
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|URLNormalizer
operator|.
name|normalize
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://webinfo.uni-muenchen.de/view-i.cfm?url=http://abc/resp?a=c"
argument_list|)
argument_list|,
name|hm
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|URLNormalizer
operator|.
name|normalize
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://webinfo.campus.lmu.de/view-i.cfm?url=http://abc/resp?a=c"
argument_list|)
argument_list|,
name|hm
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|URLNormalizer
operator|.
name|normalize
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://www.bwl.uni-muenchen.de/default.asp?id=123"
argument_list|)
argument_list|,
name|hm
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|URLNormalizer
operator|.
name|normalize
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://www.lmu.de/index.html"
argument_list|)
argument_list|,
name|hm
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|URLNormalizer
operator|.
name|normalize
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://www.lmu.de"
argument_list|)
argument_list|,
name|hm
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|URLNormalizer
operator|.
name|normalize
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://www.lmu.de/"
argument_list|)
argument_list|,
name|hm
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|URLNormalizer
operator|.
name|normalize
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://www.lmu.de/?"
argument_list|)
argument_list|,
name|hm
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|URLNormalizer
operator|.
name|normalize
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://www.lmu.de?"
argument_list|)
argument_list|,
name|hm
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|URLNormalizer
operator|.
name|normalize
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://www.lmu.de?id=abc"
argument_list|)
argument_list|,
name|hm
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|URLNormalizer
operator|.
name|normalize
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://www.lmu.de/abcde$1?id=abc"
argument_list|)
argument_list|,
name|hm
argument_list|)
argument_list|)
expr_stmt|;
name|URL
name|u
init|=
operator|new
name|URL
argument_list|(
literal|"http://www.lmu.de/abcde$1?id=abc"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"host: "
operator|+
name|u
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"port: "
operator|+
name|u
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|URLNormalizer
operator|.
name|normalize
argument_list|(
name|u
argument_list|,
name|hm
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
