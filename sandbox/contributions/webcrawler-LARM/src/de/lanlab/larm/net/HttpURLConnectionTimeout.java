begin_unit
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_package
DECL|package|de.lanlab.larm.net
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|net
package|;
end_package
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_import
import|import
name|sun
operator|.
name|net
operator|.
name|www
operator|.
name|http
operator|.
name|HttpClient
import|;
end_import
begin_comment
comment|/**  *  Description of the Class  *  *@author     cmarschn  *@created    2. Mai 2001  */
end_comment
begin_class
DECL|class|HttpURLConnectionTimeout
specifier|public
class|class
name|HttpURLConnectionTimeout
extends|extends
name|sun
operator|.
name|net
operator|.
name|www
operator|.
name|protocol
operator|.
name|http
operator|.
name|HttpURLConnection
block|{
DECL|field|fiTimeoutVal
name|int
name|fiTimeoutVal
decl_stmt|;
DECL|field|fHandler
name|HttpTimeoutHandler
name|fHandler
decl_stmt|;
DECL|field|fClient
name|HttpClientTimeout
name|fClient
decl_stmt|;
comment|/**      *  Constructor for the HttpURLConnectionTimeout object      *      *@param  u                Description of Parameter      *@param  handler          Description of Parameter      *@param  iTimeout         Description of Parameter      *@exception  IOException  Description of Exception      */
DECL|method|HttpURLConnectionTimeout
specifier|public
name|HttpURLConnectionTimeout
parameter_list|(
name|URL
name|u
parameter_list|,
name|HttpTimeoutHandler
name|handler
parameter_list|,
name|int
name|iTimeout
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|u
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|fHandler
operator|=
name|handler
expr_stmt|;
name|fiTimeoutVal
operator|=
name|iTimeout
expr_stmt|;
block|}
comment|/**      *  Constructor for the HttpURLConnectionTimeout object      *      *@param  u                Description of Parameter      *@param  host             Description of Parameter      *@param  port             Description of Parameter      *@exception  IOException  Description of Exception      */
DECL|method|HttpURLConnectionTimeout
specifier|public
name|HttpURLConnectionTimeout
parameter_list|(
name|URL
name|u
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|u
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Description of the Method      *      *@exception  IOException  Description of Exception      */
DECL|method|connect
specifier|public
name|void
name|connect
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|connected
condition|)
block|{
return|return;
block|}
try|try
block|{
if|if
condition|(
literal|"http"
operator|.
name|equals
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|)
comment|/*              *&& !failedOnce<- PRIVATE              */
condition|)
block|{
comment|// for safety's sake, as reported by KLGroup
synchronized|synchronized
init|(
name|url
init|)
block|{
name|http
operator|=
name|HttpClientTimeout
operator|.
name|getNew
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
name|fClient
operator|=
operator|(
name|HttpClientTimeout
operator|)
name|http
expr_stmt|;
operator|(
operator|(
name|HttpClientTimeout
operator|)
name|http
operator|)
operator|.
name|setTimeout
argument_list|(
name|fiTimeoutVal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// make sure to construct new connection if first
comment|// attempt failed
name|http
operator|=
operator|new
name|HttpClientTimeout
argument_list|(
name|url
argument_list|,
name|fHandler
operator|.
name|getProxy
argument_list|()
argument_list|,
name|fHandler
operator|.
name|getProxyPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ps
operator|=
operator|(
name|PrintStream
operator|)
name|http
operator|.
name|getOutputStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
comment|// this was missing from the original version
name|connected
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      *  Create a new HttpClient object, bypassing the cache of HTTP client      *  objects/connections.      *      *@param  url              the URL being accessed      *@return                  The NewClient value      *@exception  IOException  Description of Exception      */
DECL|method|getNewClient
specifier|protected
name|HttpClient
name|getNewClient
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpClientTimeout
name|client
init|=
operator|new
name|HttpClientTimeout
argument_list|(
name|url
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|setTimeout
argument_list|(
name|fiTimeoutVal
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unable to set timeout value"
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|HttpClient
operator|)
name|client
return|;
block|}
comment|/**      *  Gets the Socket attribute of the HttpURLConnectionTimeout object      *      *@return    The Socket value      */
DECL|method|getSocket
name|Socket
name|getSocket
parameter_list|()
block|{
return|return
name|fClient
operator|.
name|getSocket
argument_list|()
return|;
block|}
comment|/**      *  Description of the Method      *      *@exception  Exception  Description of Exception      */
DECL|method|close
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
name|fClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      *  opens a stream allowing redirects only to the same host.      *      *@param  c                Description of Parameter      *@return                  Description of the Returned Value      *@exception  IOException  Description of Exception      */
DECL|method|openConnectionCheckRedirects
specifier|public
specifier|static
name|InputStream
name|openConnectionCheckRedirects
parameter_list|(
name|URLConnection
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|redir
decl_stmt|;
name|int
name|redirects
init|=
literal|0
decl_stmt|;
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
do|do
block|{
if|if
condition|(
name|c
operator|instanceof
name|HttpURLConnectionTimeout
condition|)
block|{
operator|(
operator|(
name|HttpURLConnectionTimeout
operator|)
name|c
operator|)
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// We want to open the input stream before
comment|// getting headers, because getHeaderField()
comment|// et al swallow IOExceptions.
name|in
operator|=
name|c
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|redir
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|c
operator|instanceof
name|HttpURLConnectionTimeout
condition|)
block|{
name|HttpURLConnectionTimeout
name|http
init|=
operator|(
name|HttpURLConnectionTimeout
operator|)
name|c
decl_stmt|;
name|int
name|stat
init|=
name|http
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|stat
operator|>=
literal|300
operator|&&
name|stat
operator|<=
literal|305
operator|&&
name|stat
operator|!=
name|HttpURLConnection
operator|.
name|HTTP_NOT_MODIFIED
condition|)
block|{
name|URL
name|base
init|=
name|http
operator|.
name|getURL
argument_list|()
decl_stmt|;
name|String
name|loc
init|=
name|http
operator|.
name|getHeaderField
argument_list|(
literal|"Location"
argument_list|)
decl_stmt|;
name|URL
name|target
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|loc
operator|!=
literal|null
condition|)
block|{
name|target
operator|=
operator|new
name|URL
argument_list|(
name|base
argument_list|,
name|loc
argument_list|)
expr_stmt|;
block|}
name|http
operator|.
name|disconnect
argument_list|()
expr_stmt|;
if|if
condition|(
name|target
operator|==
literal|null
operator|||
operator|!
name|base
operator|.
name|getProtocol
argument_list|()
operator|.
name|equals
argument_list|(
name|target
operator|.
name|getProtocol
argument_list|()
argument_list|)
operator|||
name|base
operator|.
name|getPort
argument_list|()
operator|!=
name|target
operator|.
name|getPort
argument_list|()
operator|||
operator|!
name|HostsEquals
argument_list|(
name|base
argument_list|,
name|target
argument_list|)
operator|||
name|redirects
operator|>=
literal|5
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"illegal URL redirect"
argument_list|)
throw|;
block|}
name|redir
operator|=
literal|true
expr_stmt|;
name|c
operator|=
name|target
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|redirects
operator|++
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|redir
condition|)
do|;
return|return
name|in
return|;
block|}
comment|// Same as java.net.URL.hostsEqual
comment|/**      *  Description of the Method      *      *@param  u1  Description of Parameter      *@param  u2  Description of Parameter      *@return     Description of the Returned Value      */
DECL|method|HostsEquals
specifier|static
name|boolean
name|HostsEquals
parameter_list|(
name|URL
name|u1
parameter_list|,
name|URL
name|u2
parameter_list|)
block|{
specifier|final
name|String
name|h1
init|=
name|u1
operator|.
name|getHost
argument_list|()
decl_stmt|;
specifier|final
name|String
name|h2
init|=
name|u2
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|h1
operator|==
literal|null
condition|)
block|{
return|return
name|h2
operator|==
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|h2
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|h1
operator|.
name|equalsIgnoreCase
argument_list|(
name|h2
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Have to resolve addresses before comparing, otherwise
comment|// names like tachyon and tachyon.eng would compare different
specifier|final
name|boolean
name|result
index|[]
init|=
block|{
literal|false
block|}
decl_stmt|;
name|java
operator|.
name|security
operator|.
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
argument_list|()
block|{
comment|/**                  *  Main processing method for the HttpURLConnectionTimeout object                  *                  *@return    Description of the Returned Value                  */
specifier|public
name|Object
name|run
parameter_list|()
block|{
try|try
block|{
name|InetAddress
name|a1
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|h1
argument_list|)
decl_stmt|;
name|InetAddress
name|a2
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|h2
argument_list|)
decl_stmt|;
name|result
index|[
literal|0
index|]
operator|=
name|a1
operator|.
name|equals
argument_list|(
name|a2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{                     }
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{                     }
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|result
index|[
literal|0
index|]
return|;
block|}
block|}
end_class
end_unit
