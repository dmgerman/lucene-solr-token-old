begin_unit
begin_comment
comment|/*  *  ====================================================================  *  The Apache Software License, Version 1.1  *  *  Copyright (c) 2001 The Apache Software Foundation.  All rights  *  reserved.  *  *  Redistribution and use in source and binary forms, with or without  *  modification, are permitted provided that the following conditions  *  are met:  *  *  1. Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.  *  *  2. Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in  *  the documentation and/or other materials provided with the  *  distribution.  *  *  3. The end-user documentation included with the redistribution,  *  if any, must include the following acknowledgment:  *  "This product includes software developed by the  *  Apache Software Foundation (http://www.apache.org/)."  *  Alternately, this acknowledgment may appear in the software itself,  *  if and wherever such third-party acknowledgments normally appear.  *  *  4. The names "Apache" and "Apache Software Foundation" and  *  "Apache Lucene" must not be used to endorse or promote products  *  derived from this software without prior written permission. For  *  written permission, please contact apache@apache.org.  *  *  5. Products derived from this software may not be called "Apache",  *  "Apache Lucene", nor may "Apache" appear in their name, without  *  prior written permission of the Apache Software Foundation.  *  *  THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  *  DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  *  ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  *  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  *  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  *  SUCH DAMAGE.  *  ====================================================================  *  *  This software consists of voluntary contributions made by many  *  individuals on behalf of the Apache Software Foundation.  For more  *  information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_package
DECL|package|de.lanlab.larm.parser
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|parser
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * A very simple entity manager. Based on HeX, the HTML enabled XML parser, by  * Anders Kristensen, HP Labs Bristol  *  * @author    Administrator  * @created   1. Juni 2002  */
end_comment
begin_class
DECL|class|EntityManager
specifier|public
class|class
name|EntityManager
block|{
comment|/**      * Description of the Field      */
DECL|field|entities
specifier|protected
name|Hashtable
name|entities
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
comment|/**      * Description of the Field      */
DECL|field|tok
specifier|private
name|Tokenizer
name|tok
decl_stmt|;
comment|/**      * Constructor for the EntityManager object      *      * @param tok  Description of the Parameter      */
DECL|method|EntityManager
specifier|public
name|EntityManager
parameter_list|(
name|Tokenizer
name|tok
parameter_list|)
block|{
name|this
operator|.
name|tok
operator|=
name|tok
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"amp"
argument_list|,
literal|"&"
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"lt"
argument_list|,
literal|"<"
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"gt"
argument_list|,
literal|">"
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"apos"
argument_list|,
literal|"'"
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"quot"
argument_list|,
literal|"\""
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"auml"
argument_list|,
literal|"ä"
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"ouml"
argument_list|,
literal|"ö"
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"uuml"
argument_list|,
literal|"ü"
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Auml"
argument_list|,
literal|"Ä"
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Ouml"
argument_list|,
literal|"Ö"
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"Uuml"
argument_list|,
literal|"Ü"
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
literal|"szlig"
argument_list|,
literal|"ß"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Finds entitiy and character references in the provided char array and      * decodes them. The operation is destructive, i.e. the encoded string      * replaces the original - this is atrightforward since the new string can      * only get shorter.      *      * @param buffer         Description of the Parameter      * @return               Description of the Return Value      * @exception Exception  Description of the Exception      */
DECL|method|entityDecode
specifier|public
specifier|final
name|SimpleCharArrayWriter
name|entityDecode
parameter_list|(
name|SimpleCharArrayWriter
name|buffer
parameter_list|)
throws|throws
name|Exception
block|{
name|char
index|[]
name|buf
init|=
name|buffer
operator|.
name|getCharArray
argument_list|()
decl_stmt|;
comment|// avoids method calls
name|int
name|len
init|=
name|buffer
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// not fastest but certainly simplest:
if|if
condition|(
name|indexOf
argument_list|(
name|buf
argument_list|,
literal|'&'
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|buffer
return|;
block|}
name|SimpleCharArrayWriter
name|newbuf
init|=
operator|new
name|SimpleCharArrayWriter
argument_list|(
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|start
init|=
literal|0
init|;
condition|;
control|)
block|{
name|int
name|x
init|=
name|indexOf
argument_list|(
name|buf
argument_list|,
literal|'&'
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
operator|-
literal|1
condition|)
block|{
name|newbuf
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|start
argument_list|,
name|len
operator|-
name|start
argument_list|)
expr_stmt|;
return|return
name|newbuf
return|;
block|}
else|else
block|{
name|newbuf
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|start
argument_list|,
name|x
operator|-
name|start
argument_list|)
expr_stmt|;
name|start
operator|=
name|x
operator|+
literal|1
expr_stmt|;
name|x
operator|=
name|indexOf
argument_list|(
name|buf
argument_list|,
literal|';'
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|==
operator|-
literal|1
condition|)
block|{
comment|//tok.warning("Entity reference not semicolon terminated");
name|newbuf
operator|.
name|write
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
comment|//break; //???????????
block|}
else|else
block|{
try|try
block|{
name|writeEntityDef
argument_list|(
name|buf
argument_list|,
name|start
argument_list|,
name|x
operator|-
name|start
argument_list|,
name|newbuf
argument_list|)
expr_stmt|;
name|start
operator|=
name|x
operator|+
literal|1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//tok.warning("Bad entity reference");
block|}
block|}
block|}
block|}
block|}
comment|// character references are rare enough that we don't care about
comment|// creating a String object for them unnecessarily...
comment|/**      * Description of the Method      *      * @param buf                        Description of the Parameter      * @param off                        Description of the Parameter      * @param len                        Description of the Parameter      * @param out                        Description of the Parameter      * @exception Exception              Description of the Exception      * @exception IOException            Description of the Exception      * @exception NumberFormatException  Description of the Exception      */
DECL|method|writeEntityDef
specifier|public
name|void
name|writeEntityDef
parameter_list|(
name|char
index|[]
name|buf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|,
name|Writer
name|out
parameter_list|)
throws|throws
name|Exception
throws|,
name|IOException
throws|,
name|NumberFormatException
block|{
name|Integer
name|ch
decl_stmt|;
comment|//System.out.println("Entity: " + new String(buf, off, len) +" "+off+" "+len);
if|if
condition|(
name|buf
index|[
name|off
index|]
operator|==
literal|'#'
condition|)
block|{
comment|// character reference
name|off
operator|++
expr_stmt|;
name|len
operator|--
expr_stmt|;
if|if
condition|(
name|buf
index|[
name|off
index|]
operator|==
literal|'x'
operator|||
name|buf
index|[
name|off
index|]
operator|==
literal|'X'
condition|)
block|{
name|ch
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
operator|new
name|String
argument_list|(
name|buf
argument_list|,
name|off
operator|+
literal|1
argument_list|,
name|len
operator|-
literal|1
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ch
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
operator|new
name|String
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|ch
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|ent
init|=
operator|new
name|String
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|String
name|val
init|=
operator|(
name|String
operator|)
name|entities
operator|.
name|get
argument_list|(
name|ent
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
literal|"&"
operator|+
name|ent
operator|+
literal|";"
argument_list|)
expr_stmt|;
comment|//tok.warning("unknown entity reference: " + ent);
block|}
block|}
block|}
comment|/**      * Description of the Method      *      * @param entity  Description of the Parameter      * @param value   Description of the Parameter      * @return        Description of the Return Value      */
DECL|method|defTextEntity
specifier|public
name|String
name|defTextEntity
parameter_list|(
name|String
name|entity
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|entities
operator|.
name|put
argument_list|(
name|entity
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * Returns the index within this String of the first occurrence of the      * specified character, starting the search at fromIndex. This method      * returns -1 if the character is not found.      *      * @param buf                         Description of the Parameter      * @param ch                          Description of the Parameter      * @param from                        Description of the Parameter      * @param to                          Description of the Parameter      * @return                            Description of the Return Value      * @params                            buf the buffer to search      * @params                            ch the character to search for      * @params                            from the index to start the search      *      from      * @params                            to the highest possible index returned      *      plus 1      * @throws IndexOutOfBoundsException  if index out of bounds...      */
DECL|method|indexOf
specifier|public
specifier|final
specifier|static
name|int
name|indexOf
parameter_list|(
name|char
index|[]
name|buf
parameter_list|,
name|int
name|ch
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|from
init|;
name|i
operator|<
name|to
operator|&&
name|buf
index|[
name|i
index|]
operator|!=
name|ch
condition|;
name|i
operator|++
control|)
block|{
empty_stmt|;
block|}
comment|// do nothing
if|if
condition|(
name|i
operator|<
name|to
condition|)
block|{
return|return
name|i
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
end_class
end_unit
