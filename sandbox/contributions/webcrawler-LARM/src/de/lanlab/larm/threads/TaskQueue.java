begin_unit
begin_package
DECL|package|de.lanlab.larm.threads
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|threads
package|;
end_package
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|util
operator|.
name|Queue
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_comment
comment|/**  * Title:        LARM Lanlab Retrieval Machine  * Description:  * Copyright:    Copyright (c)  * Company:  * @author  * @version 1.0  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_class
DECL|class|TaskQueue
specifier|public
class|class
name|TaskQueue
implements|implements
name|Queue
block|{
DECL|field|queue
name|LinkedList
name|queue
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
comment|/**      *      */
DECL|method|TaskQueue
specifier|public
name|TaskQueue
parameter_list|()
block|{      }
DECL|method|insertMultiple
specifier|public
name|void
name|insertMultiple
parameter_list|(
name|Collection
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**      * push a task to the start of the queue      * @param i the task      */
DECL|method|insert
specifier|public
name|void
name|insert
parameter_list|(
name|Object
name|i
parameter_list|)
block|{
name|queue
operator|.
name|addFirst
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|/**      * get the last element out of the queue      * The element will be removed from the queue      * @return the task      */
DECL|method|remove
specifier|public
name|Object
name|remove
parameter_list|()
block|{
return|return
name|queue
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|(
name|InterruptableTask
operator|)
name|queue
operator|.
name|removeLast
argument_list|()
return|;
block|}
comment|/**      *      */
DECL|method|iterator
specifier|public
name|Iterator
name|iterator
parameter_list|()
block|{
return|return
name|queue
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      *      */
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|queue
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|queue
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|queue
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class
end_unit
