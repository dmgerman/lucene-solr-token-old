begin_unit
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_package
DECL|package|de.lanlab.larm.threads
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|threads
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * This thread class acts like a server. It's running idle within  * a thread pool until "runTask" is called. The given task will then  * be executed asynchronously  */
end_comment
begin_class
DECL|class|ServerThread
specifier|public
class|class
name|ServerThread
extends|extends
name|Thread
block|{
comment|/**      * the task that is to be executed. null in idle-mode      */
DECL|field|task
specifier|protected
name|InterruptableTask
name|task
init|=
literal|null
decl_stmt|;
DECL|field|busy
specifier|private
name|boolean
name|busy
init|=
literal|false
decl_stmt|;
DECL|field|listeners
specifier|private
name|ArrayList
name|listeners
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|field|isInterrupted
specifier|private
name|boolean
name|isInterrupted
init|=
literal|false
decl_stmt|;
DECL|field|threadNumber
specifier|private
name|int
name|threadNumber
decl_stmt|;
DECL|field|log
name|SimpleLogger
name|log
decl_stmt|;
DECL|field|errorLog
name|SimpleLogger
name|errorLog
decl_stmt|;
DECL|method|ServerThread
specifier|public
name|ServerThread
parameter_list|(
name|int
name|threadNumber
parameter_list|,
name|String
name|name
parameter_list|,
name|ThreadGroup
name|threadGroup
parameter_list|)
block|{
name|super
argument_list|(
name|threadGroup
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|threadNumber
argument_list|)
expr_stmt|;
block|}
DECL|method|ServerThread
specifier|public
name|ServerThread
parameter_list|(
name|int
name|threadNumber
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|threadNumber
argument_list|)
expr_stmt|;
block|}
DECL|method|init
name|void
name|init
parameter_list|(
name|int
name|threadNumber
parameter_list|)
block|{
name|this
operator|.
name|threadNumber
operator|=
name|threadNumber
expr_stmt|;
name|File
name|logDir
init|=
operator|new
name|File
argument_list|(
literal|"logs"
argument_list|)
decl_stmt|;
name|logDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|log
operator|=
operator|new
name|SimpleLogger
argument_list|(
literal|"thread"
operator|+
name|threadNumber
argument_list|)
expr_stmt|;
name|errorLog
operator|=
operator|new
name|SimpleLogger
argument_list|(
literal|"thread"
operator|+
name|threadNumber
operator|+
literal|"_errors"
argument_list|)
expr_stmt|;
block|}
comment|/**      * constructor      * @param threadNumber assigns an arbitrary number to this thread      *        used by ServerThreadFactory      */
DECL|method|ServerThread
specifier|public
name|ServerThread
parameter_list|(
name|int
name|threadNumber
parameter_list|)
block|{
name|init
argument_list|(
name|threadNumber
argument_list|)
expr_stmt|;
block|}
comment|/**      * the run method runs asynchronously. It waits until runTask() is      * called      */
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
operator|!
name|isInterrupted
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
while|while
condition|(
name|task
operator|==
literal|null
condition|)
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
name|task
operator|.
name|run
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|taskReady
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ServerThread "
operator|+
name|threadNumber
operator|+
literal|" interrupted"
argument_list|)
expr_stmt|;
name|log
operator|.
name|log
argument_list|(
literal|"** Thread Interrupted **"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * this is the main method that will invoke a task to run.      */
DECL|method|runTask
specifier|public
specifier|synchronized
name|void
name|runTask
parameter_list|(
name|InterruptableTask
name|t
parameter_list|)
block|{
name|busy
operator|=
literal|true
expr_stmt|;
name|task
operator|=
name|t
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
block|}
comment|/**      * it should be possible to interrupt a task with this function.      * therefore, the task has to check its interrupted()-state      */
DECL|method|interruptTask
specifier|public
name|void
name|interruptTask
parameter_list|()
block|{
if|if
condition|(
name|task
operator|!=
literal|null
condition|)
block|{
name|task
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * the server thread can either be in idle or busy mode      */
DECL|method|isBusy
specifier|public
name|boolean
name|isBusy
parameter_list|()
block|{
return|return
name|busy
return|;
block|}
DECL|method|addTaskReadyListener
specifier|public
name|void
name|addTaskReadyListener
parameter_list|(
name|TaskReadyListener
name|l
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|removeTaskReadyListener
specifier|public
name|void
name|removeTaskReadyListener
parameter_list|(
name|TaskReadyListener
name|l
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|interrupt
specifier|public
name|void
name|interrupt
parameter_list|()
block|{
name|super
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|isInterrupted
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getThreadNumber
specifier|public
name|int
name|getThreadNumber
parameter_list|()
block|{
return|return
name|this
operator|.
name|threadNumber
return|;
block|}
DECL|method|getTask
specifier|public
name|InterruptableTask
name|getTask
parameter_list|()
block|{
return|return
name|task
return|;
block|}
comment|/**      * this method will be called when the task ends. It notifies all      * of its observers about its changed state      */
DECL|method|taskReady
specifier|protected
name|void
name|taskReady
parameter_list|()
block|{
name|task
operator|=
literal|null
expr_stmt|;
name|busy
operator|=
literal|false
expr_stmt|;
name|Iterator
name|Ie
init|=
name|listeners
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|Ie
operator|.
name|hasNext
argument_list|()
condition|)
block|{
operator|(
operator|(
name|TaskReadyListener
operator|)
name|Ie
operator|.
name|next
argument_list|()
operator|)
operator|.
name|taskReady
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getLog
specifier|public
name|SimpleLogger
name|getLog
parameter_list|()
block|{
return|return
name|log
return|;
block|}
DECL|method|getErrorLog
specifier|public
name|SimpleLogger
name|getErrorLog
parameter_list|()
block|{
return|return
name|errorLog
return|;
block|}
block|}
end_class
end_unit
