begin_unit
begin_package
DECL|package|de.lanlab.larm.util
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_comment
comment|/**  * Title:        LARM Lanlab Retrieval Machine  * Description:  * Copyright:    Copyright (c)  * Company:  * @author  * @version 1.0  */
end_comment
begin_comment
comment|/**  * thread safe state information.  * The get methods are not synchronized. Clone the state object before using them  * If you use a state object in a class, always return a clone  *<pre>public class MyClass {  *     State state = new State("Running");  *     public State getState() { return state.cloneState() }</pre>  *  * note on serialization: if you deserialize a state, the state string will be newly created.  * that means you then have to compare the states via equal() and not ==  */
end_comment
begin_class
DECL|class|State
specifier|public
class|class
name|State
implements|implements
name|Cloneable
implements|,
name|Serializable
block|{
DECL|field|state
specifier|private
name|String
name|state
decl_stmt|;
DECL|field|stateSince
specifier|private
name|long
name|stateSince
decl_stmt|;
DECL|field|info
specifier|private
name|Object
name|info
decl_stmt|;
DECL|method|State
specifier|public
name|State
parameter_list|(
name|String
name|state
parameter_list|)
block|{
name|setState
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
DECL|method|State
specifier|private
name|State
parameter_list|(
name|String
name|state
parameter_list|,
name|long
name|stateSince
parameter_list|)
block|{
name|init
argument_list|(
name|state
argument_list|,
name|stateSince
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|State
specifier|private
name|State
parameter_list|(
name|String
name|state
parameter_list|,
name|long
name|stateSince
parameter_list|,
name|Object
name|info
parameter_list|)
block|{
name|init
argument_list|(
name|state
argument_list|,
name|stateSince
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
DECL|method|init
specifier|private
name|void
name|init
parameter_list|(
name|String
name|state
parameter_list|,
name|long
name|stateSince
parameter_list|,
name|Object
name|info
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|stateSince
operator|=
name|stateSince
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
block|}
DECL|method|setState
specifier|public
name|void
name|setState
parameter_list|(
name|String
name|state
parameter_list|)
block|{
name|setState
argument_list|(
name|state
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|setState
specifier|public
specifier|synchronized
name|void
name|setState
parameter_list|(
name|String
name|state
parameter_list|,
name|Object
name|info
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|stateSince
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
block|}
DECL|method|getState
specifier|public
name|String
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
DECL|method|getStateSince
specifier|public
name|long
name|getStateSince
parameter_list|()
block|{
return|return
name|stateSince
return|;
block|}
DECL|method|getInfo
specifier|public
name|Object
name|getInfo
parameter_list|()
block|{
return|return
name|info
return|;
block|}
DECL|method|clone
specifier|public
specifier|synchronized
name|Object
name|clone
parameter_list|()
block|{
return|return
operator|new
name|State
argument_list|(
name|state
argument_list|,
name|stateSince
argument_list|,
name|info
argument_list|)
return|;
block|}
DECL|method|cloneState
specifier|public
name|State
name|cloneState
parameter_list|()
block|{
return|return
operator|(
name|State
operator|)
name|clone
argument_list|()
return|;
block|}
block|}
end_class
end_unit
