begin_unit
begin_package
DECL|package|de.lanlab.larm.util
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Title:        LARM Lanlab Retrieval Machine  * Description:  * Copyright:    Copyright (c)  * Company:  * @author  * @version 1.0  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * this singleton manages all loggers. It can be used to flush all SimpleLoggers  * at once  */
end_comment
begin_class
DECL|class|SimpleLoggerManager
specifier|public
class|class
name|SimpleLoggerManager
block|{
DECL|field|instance
specifier|static
name|SimpleLoggerManager
name|instance
init|=
literal|null
decl_stmt|;
DECL|field|logs
name|ArrayList
name|logs
decl_stmt|;
DECL|method|SimpleLoggerManager
specifier|private
name|SimpleLoggerManager
parameter_list|()
block|{
name|logs
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
DECL|method|register
specifier|public
name|void
name|register
parameter_list|(
name|SimpleLogger
name|logger
parameter_list|)
block|{
name|logs
operator|.
name|add
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|Iterator
name|it
init|=
name|logs
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|IOException
name|ex
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
name|SimpleLogger
name|logger
init|=
operator|(
name|SimpleLogger
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|logger
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
DECL|method|getInstance
specifier|public
specifier|static
name|SimpleLoggerManager
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|SimpleLoggerManager
argument_list|()
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
block|}
end_class
end_unit
