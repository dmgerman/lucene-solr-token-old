begin_unit
begin_package
DECL|package|de.lanlab.larm.util
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|util
package|;
end_package
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_comment
comment|/**  * A simple string tokenizer that regards<b>one</b> character as a delimiter.  * Compared to Sun's StringTokenizer, it returns an empty token if two  * subsequent delimiters are found  *  * @author    Clemens Marschner  * @created   24. MÃ¤rz 2002  */
end_comment
begin_class
DECL|class|SimpleStringTokenizer
specifier|public
class|class
name|SimpleStringTokenizer
block|{
DECL|field|string
name|String
name|string
decl_stmt|;
DECL|field|currPos
name|int
name|currPos
decl_stmt|;
DECL|field|maxPos
name|int
name|maxPos
decl_stmt|;
DECL|field|delim
name|char
name|delim
decl_stmt|;
comment|/**      * Constructor for the SimpleStringTokenizer object      *      * @param string  the string to be tokenized      * @param delim   the delimiter that splits the string      */
DECL|method|SimpleStringTokenizer
specifier|public
name|SimpleStringTokenizer
parameter_list|(
name|String
name|string
parameter_list|,
name|char
name|delim
parameter_list|)
block|{
name|setString
argument_list|(
name|string
argument_list|)
expr_stmt|;
name|setDelim
argument_list|(
name|delim
argument_list|)
expr_stmt|;
block|}
comment|/**      * sets the delimiter. The tokenizer is not reset.      *      * @param delim  The new delim value      */
DECL|method|setDelim
specifier|public
name|void
name|setDelim
parameter_list|(
name|char
name|delim
parameter_list|)
block|{
name|this
operator|.
name|delim
operator|=
name|delim
expr_stmt|;
block|}
comment|/**      * sets the string and reinitializes the tokenizer. Allows for reusing the      * tokenizer object      *      * @param string  string to be tokenized      */
DECL|method|setString
specifier|public
name|void
name|setString
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|this
operator|.
name|string
operator|=
name|string
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
name|maxPos
operator|=
name|string
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
comment|/**      * resets the tokenizer. It will act like newly created      */
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|currPos
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * returns true if the end is not reached      *      * @return   false if the end is reached.      */
DECL|method|hasMore
specifier|public
name|boolean
name|hasMore
parameter_list|()
block|{
return|return
name|currPos
operator|<=
name|maxPos
return|;
block|}
comment|/**      * returns the next token from the stream. returns an empty string if the      * end is reached      *      * @return   Description of the Return Value      * @see      java.util.StringTokenizer#nextToken      */
DECL|method|nextToken
specifier|public
name|String
name|nextToken
parameter_list|()
block|{
name|int
name|nextPos
init|=
name|string
operator|.
name|indexOf
argument_list|(
name|delim
argument_list|,
name|currPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextPos
operator|==
operator|-
literal|1
condition|)
block|{
name|nextPos
operator|=
name|maxPos
operator|+
literal|1
expr_stmt|;
block|}
name|String
name|sub
decl_stmt|;
if|if
condition|(
name|nextPos
operator|>
name|currPos
condition|)
block|{
name|sub
operator|=
name|string
operator|.
name|substring
argument_list|(
name|currPos
argument_list|,
name|nextPos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sub
operator|=
literal|""
expr_stmt|;
block|}
name|currPos
operator|=
name|nextPos
operator|+
literal|1
expr_stmt|;
return|return
name|sub
return|;
block|}
block|}
end_class
end_unit
