begin_unit
begin_package
DECL|package|de.lanlab.larm.util
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Title:  * Description:  * Copyright:    Copyright (c)  * Company:  * @author  * @version 1.0  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * simple hashed linked list. It allows for inserting and removing elements like  * in a hash table (in fact, it uses a HashMap), while still being able to easily  * traverse the collection like a list. In addition, the iterator is circular. It  * always returns a next element as long as there are elements in the list. In  * contrast to the iterator of Sun's collection classes, this class can cope with  * inserts and removals while traversing the list.<p>  * Elements are always added to the end of the list, that is, always at the same place<br>  * All operations should work in near constant time as the list grows. Only the  * trade-off costs of a hash (memory versus speed) have to be considered.  * The List doesn't accept null elements  * @todo put the traversal function into an Iterator  * @todo implement the class as a derivate from a Hash  */
end_comment
begin_class
DECL|class|HashedCircularLinkedList
specifier|public
class|class
name|HashedCircularLinkedList
block|{
comment|/**      * Entry class.      */
DECL|class|Entry
specifier|private
specifier|static
class|class
name|Entry
block|{
DECL|field|key
name|Object
name|key
decl_stmt|;
DECL|field|element
name|Object
name|element
decl_stmt|;
DECL|field|next
name|Entry
name|next
decl_stmt|;
DECL|field|previous
name|Entry
name|previous
decl_stmt|;
DECL|method|Entry
name|Entry
parameter_list|(
name|Object
name|element
parameter_list|,
name|Entry
name|next
parameter_list|,
name|Entry
name|previous
parameter_list|,
name|Object
name|key
parameter_list|)
block|{
name|this
operator|.
name|element
operator|=
name|element
expr_stmt|;
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
name|this
operator|.
name|previous
operator|=
name|previous
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
block|}
comment|/**      * the list. contains objects      */
DECL|field|header
specifier|private
specifier|transient
name|Entry
name|header
init|=
operator|new
name|Entry
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**      * the hash. maps keys to entries, which by themselves map to objects      */
DECL|field|keys
name|HashMap
name|keys
decl_stmt|;
DECL|field|size
specifier|private
specifier|transient
name|int
name|size
init|=
literal|0
decl_stmt|;
comment|/** the current entry in the traversal */
DECL|field|current
name|Entry
name|current
init|=
literal|null
decl_stmt|;
comment|/**      * Constructs an empty list.      */
DECL|method|HashedCircularLinkedList
specifier|public
name|HashedCircularLinkedList
parameter_list|(
name|int
name|initialCapacity
parameter_list|,
name|float
name|loadFactor
parameter_list|)
block|{
name|header
operator|.
name|next
operator|=
name|header
operator|.
name|previous
operator|=
name|header
expr_stmt|;
name|keys
operator|=
operator|new
name|HashMap
argument_list|(
name|initialCapacity
argument_list|,
name|loadFactor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the number of elements in this list.      *      * @return the number of elements in this list.      */
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
comment|/**      * Removes the first occurrence of the specified element in this list.  If      * the list does not contain the element, it is unchanged.  More formally,      * removes the element with the lowest index<tt>i</tt> such that      *<tt>(o==null ? get(i)==null : o.equals(get(i)))</tt> (if such an      * element exists).      *      * @param o element to be removed from this list, if present.      * @return<tt>true</tt> if the list contained the specified element.      */
DECL|method|removeByKey
specifier|public
name|boolean
name|removeByKey
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
comment|// assert(o != null)
name|Entry
name|e
init|=
operator|(
name|Entry
operator|)
name|keys
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|e
operator|==
name|current
condition|)
block|{
if|if
condition|(
name|size
operator|>
literal|1
condition|)
block|{
name|current
operator|=
name|previousEntry
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|current
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|this
operator|.
name|removeEntryFromList
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|keys
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|size
operator|--
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Removes all of the elements from this list.      */
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
comment|// list
name|header
operator|.
name|next
operator|=
name|header
operator|.
name|previous
operator|=
name|header
expr_stmt|;
comment|// hash
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|addEntryBefore
specifier|private
name|Entry
name|addEntryBefore
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|o
parameter_list|,
name|Entry
name|e
parameter_list|)
block|{
name|Entry
name|newEntry
init|=
operator|new
name|Entry
argument_list|(
name|o
argument_list|,
name|e
argument_list|,
name|e
operator|.
name|previous
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|newEntry
operator|.
name|previous
operator|.
name|next
operator|=
name|newEntry
expr_stmt|;
name|newEntry
operator|.
name|next
operator|.
name|previous
operator|=
name|newEntry
expr_stmt|;
return|return
name|newEntry
return|;
block|}
DECL|method|removeEntryFromList
specifier|private
name|void
name|removeEntryFromList
parameter_list|(
name|Entry
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|e
operator|==
name|header
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|e
operator|.
name|previous
operator|.
name|next
operator|=
name|e
operator|.
name|next
expr_stmt|;
name|e
operator|.
name|next
operator|.
name|previous
operator|=
name|e
operator|.
name|previous
expr_stmt|;
block|}
block|}
comment|/**      * (method description here)      * defined in java.util.Map      * @param p0 (parameter description here)      * @param p1 (parameter description here)      * @return (return value description here)      */
DECL|method|put
specifier|public
name|boolean
name|put
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
operator|!
name|keys
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|Entry
name|e
init|=
name|addEntryBefore
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|header
argument_list|)
decl_stmt|;
comment|// add it as the last element
name|keys
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// link key to entry
name|size
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|(
name|size
operator|>
literal|0
operator|)
return|;
block|}
DECL|method|nextEntry
specifier|private
name|Entry
name|nextEntry
parameter_list|(
name|Entry
name|e
parameter_list|)
block|{
comment|// assert(e != null)
if|if
condition|(
name|size
operator|>
literal|1
condition|)
block|{
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|e
operator|=
name|header
expr_stmt|;
block|}
name|Entry
name|next
init|=
name|e
operator|.
name|next
decl_stmt|;
if|if
condition|(
name|next
operator|==
name|header
condition|)
block|{
name|next
operator|=
name|next
operator|.
name|next
expr_stmt|;
block|}
return|return
name|next
return|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
name|header
operator|.
name|next
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|previousEntry
specifier|private
name|Entry
name|previousEntry
parameter_list|(
name|Entry
name|e
parameter_list|)
block|{
comment|// assert(e != null)
if|if
condition|(
name|size
operator|>
literal|1
condition|)
block|{
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|e
operator|=
name|header
expr_stmt|;
block|}
name|Entry
name|previous
init|=
name|e
operator|.
name|previous
decl_stmt|;
if|if
condition|(
name|previous
operator|==
name|header
condition|)
block|{
name|previous
operator|=
name|previous
operator|.
name|previous
expr_stmt|;
block|}
return|return
name|previous
return|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
name|header
operator|.
name|previous
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|next
specifier|public
name|Object
name|next
parameter_list|()
block|{
name|current
operator|=
name|nextEntry
argument_list|(
name|current
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
return|return
name|current
operator|.
name|element
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|removeCurrent
specifier|public
name|void
name|removeCurrent
parameter_list|()
block|{
name|keys
operator|.
name|remove
argument_list|(
name|current
operator|.
name|key
argument_list|)
expr_stmt|;
name|removeEntryFromList
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
DECL|method|get
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|Entry
name|e
init|=
operator|(
operator|(
name|Entry
operator|)
name|keys
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
return|return
name|e
operator|.
name|element
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * testing      */
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|HashedCircularLinkedList
name|h
init|=
operator|new
name|HashedCircularLinkedList
argument_list|(
literal|20
argument_list|,
literal|0.75f
argument_list|)
decl_stmt|;
name|h
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|h
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|h
operator|.
name|put
argument_list|(
literal|"3"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|String
name|t
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"size [3]: "
operator|+
name|h
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
operator|(
name|String
operator|)
name|h
operator|.
name|next
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"2nd element via get [b]: "
operator|+
name|h
operator|.
name|get
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"next element [a]: "
operator|+
name|t
argument_list|)
expr_stmt|;
name|t
operator|=
operator|(
name|String
operator|)
name|h
operator|.
name|next
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"next element [b]: "
operator|+
name|t
argument_list|)
expr_stmt|;
name|t
operator|=
operator|(
name|String
operator|)
name|h
operator|.
name|next
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"next element [c]: "
operator|+
name|t
argument_list|)
expr_stmt|;
name|t
operator|=
operator|(
name|String
operator|)
name|h
operator|.
name|next
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"1st element after circular traversal [a]: "
operator|+
name|t
argument_list|)
expr_stmt|;
name|h
operator|.
name|removeByKey
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"1st element after remove [null]: "
operator|+
name|h
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"size after removal [2]: "
operator|+
name|h
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
operator|(
name|String
operator|)
name|h
operator|.
name|next
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"next element [b]: "
operator|+
name|t
argument_list|)
expr_stmt|;
name|t
operator|=
operator|(
name|String
operator|)
name|h
operator|.
name|next
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"next element [c]: "
operator|+
name|t
argument_list|)
expr_stmt|;
name|t
operator|=
operator|(
name|String
operator|)
name|h
operator|.
name|next
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"next element [b]: "
operator|+
name|t
argument_list|)
expr_stmt|;
name|h
operator|.
name|removeCurrent
argument_list|()
expr_stmt|;
name|t
operator|=
operator|(
name|String
operator|)
name|h
operator|.
name|next
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"next element after 1 removal [c]: "
operator|+
name|t
argument_list|)
expr_stmt|;
name|t
operator|=
operator|(
name|String
operator|)
name|h
operator|.
name|next
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"next element: [c]: "
operator|+
name|t
argument_list|)
expr_stmt|;
name|h
operator|.
name|removeByKey
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"size after 3 removals [0]: "
operator|+
name|h
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
operator|(
name|String
operator|)
name|h
operator|.
name|next
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"next element [null]: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
