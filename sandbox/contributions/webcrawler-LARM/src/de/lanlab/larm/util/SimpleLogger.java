begin_unit
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_package
DECL|package|de.lanlab.larm.util
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * this class is only used for SPEED. Its log function is not thread safe by  * default.  * It uses a BufferdWriter.  * It registers with a logger manager, which can be used to flush several loggers  * at once  * @todo: including the date slows down a lot  *  */
end_comment
begin_class
DECL|class|SimpleLogger
specifier|public
class|class
name|SimpleLogger
block|{
DECL|field|formatter
specifier|private
name|SimpleDateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HH:mm:ss:SSSS"
argument_list|)
decl_stmt|;
DECL|field|logFile
name|Writer
name|logFile
decl_stmt|;
DECL|field|buffer
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
DECL|field|startTime
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
DECL|field|includeDate
name|boolean
name|includeDate
decl_stmt|;
DECL|method|setStartTime
specifier|public
name|void
name|setStartTime
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
block|}
DECL|method|logThreadSafe
specifier|public
specifier|synchronized
name|void
name|logThreadSafe
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|log
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
DECL|method|logThreadSafe
specifier|public
specifier|synchronized
name|void
name|logThreadSafe
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|log
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
DECL|method|log
specifier|public
name|void
name|log
parameter_list|(
name|String
name|text
parameter_list|)
block|{
try|try
block|{
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeDate
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|formatter
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
argument_list|)
operator|.
name|append
argument_list|(
literal|" ms: "
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|text
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|logFile
operator|.
name|write
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flushAtOnce
condition|)
block|{
name|logFile
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Couldn't write to logfile"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|log
specifier|public
name|void
name|log
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|logFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|flushAtOnce
name|boolean
name|flushAtOnce
init|=
literal|false
decl_stmt|;
DECL|method|setFlushAtOnce
specifier|public
name|void
name|setFlushAtOnce
parameter_list|(
name|boolean
name|flush
parameter_list|)
block|{
name|this
operator|.
name|flushAtOnce
operator|=
name|flush
expr_stmt|;
block|}
DECL|method|SimpleLogger
specifier|public
name|SimpleLogger
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|init
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|SimpleLogger
specifier|public
name|SimpleLogger
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|includeDate
parameter_list|)
block|{
name|init
argument_list|(
name|name
argument_list|,
name|includeDate
argument_list|)
expr_stmt|;
block|}
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|logFile
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|init
specifier|private
name|void
name|init
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|includeDate
parameter_list|)
block|{
try|try
block|{
name|logFile
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
literal|"logs/"
operator|+
name|name
operator|+
literal|".log"
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleLoggerManager
operator|.
name|getInstance
argument_list|()
operator|.
name|register
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"IOException while creating logfile "
operator|+
name|name
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
