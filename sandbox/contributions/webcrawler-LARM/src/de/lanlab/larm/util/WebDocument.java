begin_unit
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_package
DECL|package|de.lanlab.larm.util
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|fetcher
operator|.
name|URLMessage
import|;
end_import
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|net
operator|.
name|HostManager
import|;
end_import
begin_comment
comment|/**  *  a web document of whatever type. generated by a fetcher task  */
end_comment
begin_class
DECL|class|WebDocument
specifier|public
class|class
name|WebDocument
extends|extends
name|URLMessage
block|{
DECL|field|mimeType
specifier|protected
name|String
name|mimeType
decl_stmt|;
comment|// protected byte[] document;
DECL|field|resultCode
specifier|protected
name|int
name|resultCode
decl_stmt|;
DECL|field|size
specifier|protected
name|int
name|size
decl_stmt|;
DECL|field|title
specifier|protected
name|String
name|title
decl_stmt|;
DECL|field|lastModified
specifier|protected
name|Date
name|lastModified
decl_stmt|;
DECL|field|fields
name|HashMap
name|fields
decl_stmt|;
DECL|method|WebDocument
specifier|public
name|WebDocument
parameter_list|(
name|URL
name|url
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|int
name|resultCode
parameter_list|,
name|URL
name|referer
parameter_list|,
name|int
name|size
parameter_list|,
name|String
name|title
parameter_list|,
name|Date
name|lastModified
parameter_list|,
name|HostManager
name|hm
parameter_list|)
block|{
name|super
argument_list|(
name|url
argument_list|,
name|referer
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|hm
argument_list|)
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|mimeType
operator|=
name|mimeType
expr_stmt|;
comment|//this.document = document;
name|this
operator|.
name|resultCode
operator|=
name|resultCode
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|title
operator|=
name|title
expr_stmt|;
name|this
operator|.
name|lastModified
operator|=
name|lastModified
expr_stmt|;
name|this
operator|.
name|fields
operator|=
operator|new
name|HashMap
argument_list|(
literal|7
argument_list|)
expr_stmt|;
comment|// expect ~4 fields
block|}
DECL|method|getFieldNames
specifier|public
name|Set
name|getFieldNames
parameter_list|()
block|{
return|return
name|fields
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|getField
specifier|public
name|Object
name|getField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|fields
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|addField
specifier|public
name|void
name|addField
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|fields
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|removeField
specifier|public
name|void
name|removeField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|fields
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|getNumFields
specifier|public
name|int
name|getNumFields
parameter_list|()
block|{
return|return
name|fields
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getLastModified
specifier|public
name|Date
name|getLastModified
parameter_list|()
block|{
return|return
name|lastModified
return|;
block|}
DECL|method|getTitle
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
return|return
name|title
return|;
block|}
DECL|method|getUrl
specifier|public
name|URL
name|getUrl
parameter_list|()
block|{
return|return
name|url
return|;
block|}
DECL|method|getSize
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|size
return|;
block|}
DECL|method|setSize
specifier|public
name|void
name|setSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
comment|/*     public void setDocument(byte[] document)     {         this.document = document;     } */
DECL|method|getResultCode
specifier|public
name|int
name|getResultCode
parameter_list|()
block|{
return|return
name|resultCode
return|;
block|}
DECL|method|setResultCode
specifier|public
name|void
name|setResultCode
parameter_list|(
name|int
name|resultCode
parameter_list|)
block|{
name|this
operator|.
name|resultCode
operator|=
name|resultCode
expr_stmt|;
block|}
comment|/*     public byte[] getDocumentBytes()     {         return this.document;     } */
DECL|method|setUrl
specifier|public
name|void
name|setUrl
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
DECL|method|setMimeType
specifier|public
name|void
name|setMimeType
parameter_list|(
name|String
name|mimeType
parameter_list|)
block|{
name|this
operator|.
name|mimeType
operator|=
name|mimeType
expr_stmt|;
block|}
DECL|method|getMimeType
specifier|public
name|String
name|getMimeType
parameter_list|()
block|{
return|return
name|mimeType
return|;
block|}
DECL|method|getInfo
specifier|public
name|String
name|getInfo
parameter_list|()
block|{
return|return
name|super
operator|.
name|getInfo
argument_list|()
operator|+
literal|"\t"
operator|+
name|this
operator|.
name|resultCode
operator|+
literal|"\t"
operator|+
name|this
operator|.
name|mimeType
operator|+
literal|"\t"
operator|+
name|this
operator|.
name|size
operator|+
literal|"\t"
operator|+
literal|"\""
operator|+
name|this
operator|.
name|title
operator|.
name|replace
argument_list|(
literal|'\t'
argument_list|,
literal|' '
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\"'
argument_list|,
operator|(
name|char
operator|)
literal|0xff
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\n'
argument_list|,
literal|' '
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\r'
argument_list|,
literal|' '
argument_list|)
operator|+
literal|"\"\t"
operator|+
operator|(
name|this
operator|.
name|lastModified
operator|!=
literal|null
condition|?
name|java
operator|.
name|text
operator|.
name|DateFormat
operator|.
name|getDateTimeInstance
argument_list|(
name|java
operator|.
name|text
operator|.
name|DateFormat
operator|.
name|SHORT
argument_list|,
name|java
operator|.
name|text
operator|.
name|DateFormat
operator|.
name|SHORT
argument_list|)
operator|.
name|format
argument_list|(
name|this
operator|.
name|lastModified
argument_list|)
else|:
literal|""
operator|)
return|;
block|}
block|}
end_class
end_unit
