begin_unit
begin_package
DECL|package|de.lanlab.larm.storage
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|storage
package|;
end_package
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|storage
operator|.
name|LinkStorage
import|;
end_import
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|util
operator|.
name|SimpleLogger
import|;
end_import
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|fetcher
operator|.
name|URLMessage
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_comment
comment|/**  * Description of the Class  *  * @author    Administrator  * @created   1. Juni 2002  */
end_comment
begin_class
DECL|class|LinkLogStorage
specifier|public
class|class
name|LinkLogStorage
implements|implements
name|LinkStorage
block|{
DECL|field|log
name|SimpleLogger
name|log
decl_stmt|;
comment|/**      * Constructor for the LinkLogStorage object      *      * @param logFile  Description of the Parameter      */
DECL|method|LinkLogStorage
specifier|public
name|LinkLogStorage
parameter_list|(
name|SimpleLogger
name|logFile
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|logFile
expr_stmt|;
block|}
comment|/**      * empty      */
DECL|method|openLinkStorage
specifier|public
name|void
name|openLinkStorage
parameter_list|()
block|{     }
comment|/**      * Description of the Method      *      * @param c  Description of the Parameter      * @return   Description of the Return Value      */
DECL|method|storeLinks
specifier|public
name|Collection
name|storeLinks
parameter_list|(
name|Collection
name|c
parameter_list|)
block|{
synchronized|synchronized
init|(
name|log
init|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|c
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|log
operator|.
name|log
argument_list|(
operator|(
operator|(
name|URLMessage
operator|)
name|it
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|c
return|;
block|}
block|}
end_class
end_unit
