begin_unit
begin_comment
comment|/**  * Title:        LARM Lanlab Retrieval Machine<p>  * Description:<p>  * Copyright:    Copyright (c)<p>  * Company:<p>  * @author  * @version 1.0  */
end_comment
begin_package
DECL|package|de.lanlab.larm.storage
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|storage
package|;
end_package
begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|*
import|;
end_import
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * saves the document into an sql table. At this time only in MS SQL (and probably Sybase)  * a table "Document" with the columns DO_URL(varchar), DO_MimeType(varchar) and  * DO_Data2(BLOB) is created after start<br>  * notes: experimental; slow  */
end_comment
begin_class
DECL|class|SQLServerStorage
specifier|public
class|class
name|SQLServerStorage
implements|implements
name|DocumentStorage
block|{
DECL|field|freeCons
specifier|private
name|Vector
name|freeCons
decl_stmt|;
DECL|field|busyCons
specifier|private
name|Vector
name|busyCons
decl_stmt|;
DECL|field|freeStatements
specifier|private
name|Vector
name|freeStatements
decl_stmt|;
DECL|field|busyStatements
specifier|private
name|Vector
name|busyStatements
decl_stmt|;
DECL|field|addDoc
specifier|private
name|PreparedStatement
name|addDoc
decl_stmt|;
DECL|method|SQLServerStorage
specifier|public
name|SQLServerStorage
parameter_list|(
name|String
name|driver
parameter_list|,
name|String
name|connectionString
parameter_list|,
name|String
name|account
parameter_list|,
name|String
name|password
parameter_list|,
name|int
name|nrConnections
parameter_list|)
block|{
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
name|driver
argument_list|)
expr_stmt|;
name|freeCons
operator|=
operator|new
name|Vector
argument_list|(
name|nrConnections
argument_list|)
expr_stmt|;
name|busyCons
operator|=
operator|new
name|Vector
argument_list|(
name|nrConnections
argument_list|)
expr_stmt|;
name|freeStatements
operator|=
operator|new
name|Vector
argument_list|(
name|nrConnections
argument_list|)
expr_stmt|;
name|busyStatements
operator|=
operator|new
name|Vector
argument_list|(
name|nrConnections
argument_list|)
expr_stmt|;
name|Connection
name|sqlConn
decl_stmt|;
name|PreparedStatement
name|statement
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrConnections
condition|;
name|i
operator|++
control|)
block|{
name|sqlConn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|connectionString
argument_list|,
name|account
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|statement
operator|=
name|sqlConn
operator|.
name|prepareStatement
argument_list|(
literal|"INSERT INTO Document (DO_URL, DO_MimeType, DO_Data2) VALUES (?,?,?)"
argument_list|)
expr_stmt|;
name|freeCons
operator|.
name|add
argument_list|(
name|sqlConn
argument_list|)
expr_stmt|;
name|freeStatements
operator|.
name|add
argument_list|(
name|statement
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
comment|/*"Task " + taskNr + ": */
literal|"SQLException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"       SQLState:     "
operator|+
name|e
operator|.
name|getSQLState
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"       VendorError:  "
operator|+
name|e
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SQLServerStorage: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getConnection
specifier|public
name|Connection
name|getConnection
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|Connection
name|actual
init|=
operator|(
name|Connection
operator|)
name|freeCons
operator|.
name|firstElement
argument_list|()
decl_stmt|;
name|freeCons
operator|.
name|removeElementAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|actual
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|busyCons
operator|.
name|add
argument_list|(
name|actual
argument_list|)
expr_stmt|;
return|return
name|actual
return|;
block|}
block|}
DECL|method|releaseConnection
specifier|public
name|void
name|releaseConnection
parameter_list|(
name|Connection
name|con
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|busyCons
operator|.
name|remove
argument_list|(
name|con
argument_list|)
expr_stmt|;
name|freeCons
operator|.
name|add
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getStatement
specifier|public
name|PreparedStatement
name|getStatement
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|PreparedStatement
name|actual
init|=
operator|(
name|PreparedStatement
operator|)
name|freeStatements
operator|.
name|firstElement
argument_list|()
decl_stmt|;
name|freeStatements
operator|.
name|removeElementAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|actual
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|busyStatements
operator|.
name|add
argument_list|(
name|actual
argument_list|)
expr_stmt|;
return|return
name|actual
return|;
block|}
block|}
DECL|method|releaseStatement
specifier|public
name|void
name|releaseStatement
parameter_list|(
name|PreparedStatement
name|statement
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|busyStatements
operator|.
name|remove
argument_list|(
name|statement
argument_list|)
expr_stmt|;
name|freeStatements
operator|.
name|add
argument_list|(
name|statement
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|open
specifier|public
name|void
name|open
parameter_list|()
block|{
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|getConnection
argument_list|()
expr_stmt|;
name|Statement
name|delDoc
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// bisherige Daten löschen, indem die Tabelle neu angelegt wird (geht schneller)
name|delDoc
operator|.
name|executeUpdate
argument_list|(
literal|"if exists (select * from sysobjects where id = object_id(N'[dbo].[Document]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)drop table [dbo].[Document]"
argument_list|)
expr_stmt|;
name|delDoc
operator|.
name|executeUpdate
argument_list|(
literal|"CREATE TABLE [dbo].[Document] ([DO_ID] [int] IDENTITY (1, 1) NOT NULL ,	[DA_CrawlPass] [int] NULL ,	[DO_URL] [varchar] (255) NULL ,	[DO_ContentType] [varchar] (50) NULL ,	[DO_Data] [text] NULL ,	[DO_Hashcode] [int] NULL ,	[DO_ContentLength] [int] NULL ,	[DO_ContentEncoding] [varchar] (20) NULL ,	[DO_Data2] [image] NULL, [DO_MimeType] [varchar] (255) NULL) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]"
argument_list|)
expr_stmt|;
comment|// löschen
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
comment|/*"Task " + taskNr + ": */
literal|"SQLException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"       SQLState:     "
operator|+
name|e
operator|.
name|getSQLState
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"       VendorError:  "
operator|+
name|e
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|releaseConnection
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|store
specifier|public
name|void
name|store
parameter_list|(
name|WebDocument
name|document
parameter_list|)
block|{
name|PreparedStatement
name|addDoc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|addDoc
operator|=
name|getStatement
argument_list|()
expr_stmt|;
name|addDoc
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|document
operator|.
name|getURLString
argument_list|()
argument_list|)
expr_stmt|;
name|addDoc
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|document
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|addDoc
operator|.
name|setBytes
argument_list|(
literal|3
argument_list|,
name|document
operator|.
name|getDocumentBytes
argument_list|()
argument_list|)
expr_stmt|;
name|addDoc
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
comment|/* "Task " + taskNr + ": */
literal|"SQLException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"       SQLState:     "
operator|+
name|e
operator|.
name|getSQLState
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"       VendorError:  "
operator|+
name|e
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|addDoc
operator|!=
literal|null
condition|)
block|{
name|releaseStatement
argument_list|(
name|addDoc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
