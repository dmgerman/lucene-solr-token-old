begin_unit
begin_package
DECL|package|de.lanlab.larm.storage
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|storage
package|;
end_package
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|util
operator|.
name|WebDocument
import|;
end_import
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|util
operator|.
name|SimpleLogger
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * Title: LARM Lanlab Retrieval Machine Description: Copyright: Copyright (c)  * Company:  *  * @author  * @created   11. Januar 2002  * @version   1.0  */
end_comment
begin_comment
comment|/**  * this class saves the documents into page files of 50 MB and keeps a record of all  * the positions into a Logger. the log file contains URL, page file number, and  * index within the page file.  *  */
end_comment
begin_class
DECL|class|LogStorage
specifier|public
class|class
name|LogStorage
implements|implements
name|DocumentStorage
block|{
DECL|field|log
name|SimpleLogger
name|log
decl_stmt|;
DECL|field|pageFile
name|File
name|pageFile
decl_stmt|;
DECL|field|out
name|FileOutputStream
name|out
decl_stmt|;
DECL|field|pageFileCount
name|int
name|pageFileCount
decl_stmt|;
DECL|field|filePrefix
name|String
name|filePrefix
decl_stmt|;
DECL|field|offset
name|int
name|offset
decl_stmt|;
DECL|field|isValid
name|boolean
name|isValid
init|=
literal|false
decl_stmt|;
comment|/**      * Description of the Field      */
DECL|field|MAXLENGTH
specifier|public
specifier|final
specifier|static
name|int
name|MAXLENGTH
init|=
literal|50000000
decl_stmt|;
DECL|field|logContents
name|boolean
name|logContents
init|=
literal|false
decl_stmt|;
DECL|field|fileName
name|String
name|fileName
decl_stmt|;
comment|/**      * Constructor for the LogStorage object      *      * @param log          the logger where index information is saved to      * @param logContents  whether all docs are to be stored in page files or not      * @param filePrefix   the file name where the page file number is appended      */
DECL|method|LogStorage
specifier|public
name|LogStorage
parameter_list|(
name|SimpleLogger
name|log
parameter_list|,
name|boolean
name|logContents
parameter_list|,
name|String
name|filePrefix
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
name|pageFileCount
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|filePrefix
operator|=
name|filePrefix
expr_stmt|;
name|this
operator|.
name|logContents
operator|=
name|logContents
expr_stmt|;
if|if
condition|(
name|logContents
condition|)
block|{
name|openPageFile
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Description of the Method      */
DECL|method|open
specifier|public
name|void
name|open
parameter_list|()
block|{ }
comment|/**      * Description of the Method      */
DECL|method|openPageFile
specifier|public
name|void
name|openPageFile
parameter_list|()
block|{
name|int
name|id
init|=
operator|++
name|pageFileCount
decl_stmt|;
name|fileName
operator|=
name|filePrefix
operator|+
literal|"_"
operator|+
name|id
operator|+
literal|".pfl"
expr_stmt|;
try|try
block|{
name|this
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|isValid
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|log
operator|.
name|logThreadSafe
argument_list|(
literal|"**ERROR: IOException while opening pageFile "
operator|+
name|fileName
operator|+
literal|": "
operator|+
name|io
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"; "
operator|+
name|io
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|isValid
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**      * Gets the outputStream attribute of the LogStorage object      *      * @return   The outputStream value      */
DECL|method|getOutputStream
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|()
block|{
if|if
condition|(
name|offset
operator|>
name|MAXLENGTH
condition|)
block|{
try|try
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|log
operator|.
name|logThreadSafe
argument_list|(
literal|"**ERROR: IOException while closing pageFile "
operator|+
name|fileName
operator|+
literal|": "
operator|+
name|io
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"; "
operator|+
name|io
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|openPageFile
argument_list|()
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
comment|/**      * Description of the Method      *      * @param bytes  Description of the Parameter      * @return       Description of the Return Value      */
DECL|method|writeToPageFile
specifier|public
specifier|synchronized
name|int
name|writeToPageFile
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
try|try
block|{
name|OutputStream
name|out
init|=
name|getOutputStream
argument_list|()
decl_stmt|;
name|int
name|oldOffset
init|=
name|this
operator|.
name|offset
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|this
operator|.
name|offset
operator|+=
name|bytes
operator|.
name|length
expr_stmt|;
return|return
name|oldOffset
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|log
operator|.
name|logThreadSafe
argument_list|(
literal|"**ERROR: IOException while writing "
operator|+
name|bytes
operator|.
name|length
operator|+
literal|" bytes to pageFile "
operator|+
name|fileName
operator|+
literal|": "
operator|+
name|io
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"; "
operator|+
name|io
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * Sets the logger attribute of the LogStorage object      *      * @param log  The new logger value      */
DECL|method|setLogger
specifier|public
name|void
name|setLogger
parameter_list|(
name|SimpleLogger
name|log
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
block|}
comment|/**      * stores the document if storing is enabled      *      * @param doc  Description of the Parameter      */
DECL|method|store
specifier|public
name|void
name|store
parameter_list|(
name|WebDocument
name|doc
parameter_list|)
block|{
name|String
name|docInfo
init|=
name|doc
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|logContents
operator|&&
name|isValid
operator|&&
name|doc
operator|.
name|getDocumentBytes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|offset
init|=
name|writeToPageFile
argument_list|(
name|doc
operator|.
name|getDocumentBytes
argument_list|()
argument_list|)
decl_stmt|;
name|docInfo
operator|=
name|docInfo
operator|+
literal|"\t"
operator|+
name|pageFileCount
operator|+
literal|"\t"
operator|+
name|offset
expr_stmt|;
block|}
name|log
operator|.
name|logThreadSafe
argument_list|(
name|docInfo
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
