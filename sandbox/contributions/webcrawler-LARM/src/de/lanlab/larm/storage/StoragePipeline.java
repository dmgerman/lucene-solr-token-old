begin_unit
begin_comment
comment|/*  *  ====================================================================  *  The Apache Software License, Version 1.1  *  *  Copyright (c) 2001 The Apache Software Foundation.  All rights  *  reserved.  *  *  Redistribution and use in source and binary forms, with or without  *  modification, are permitted provided that the following conditions  *  are met:  *  *  1. Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.  *  *  2. Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in  *  the documentation and/or other materials provided with the  *  distribution.  *  *  3. The end-user documentation included with the redistribution,  *  if any, must include the following acknowledgment:  *  "This product includes software developed by the  *  Apache Software Foundation (http://www.apache.org/)."  *  Alternately, this acknowledgment may appear in the software itself,  *  if and wherever such third-party acknowledgments normally appear.  *  *  4. The names "Apache" and "Apache Software Foundation" and  *  "Apache Lucene" must not be used to endorse or promote products  *  derived from this software without prior written permission. For  *  written permission, please contact apache@apache.org.  *  *  5. Products derived from this software may not be called "Apache",  *  "Apache Lucene", nor may "Apache" appear in their name, without  *  prior written permission of the Apache Software Foundation.  *  *  THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  *  DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  *  ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  *  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  *  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  *  SUCH DAMAGE.  *  ====================================================================  *  *  This software consists of voluntary contributions made by many  *  individuals on behalf of the Apache Software Foundation.  For more  *  information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_package
DECL|package|de.lanlab.larm.storage
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|storage
package|;
end_package
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|util
operator|.
name|WebDocument
import|;
end_import
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|fetcher
operator|.
name|URLMessage
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_comment
comment|/**  * @author    Clemens Marschner  * @created   1. Juni 2002  * @version   $ver: $  */
end_comment
begin_class
DECL|class|StoragePipeline
specifier|public
class|class
name|StoragePipeline
implements|implements
name|DocumentStorage
implements|,
name|LinkStorage
block|{
DECL|field|isOpen
name|boolean
name|isOpen
decl_stmt|;
DECL|field|isLinkStorageOpen
name|boolean
name|isLinkStorageOpen
decl_stmt|;
DECL|field|docStorages
name|ArrayList
name|docStorages
decl_stmt|;
DECL|field|linkStorages
name|ArrayList
name|linkStorages
decl_stmt|;
comment|/**      * Constructor for the StoragePipeline object      */
DECL|method|StoragePipeline
specifier|public
name|StoragePipeline
parameter_list|()
block|{
name|isOpen
operator|=
literal|false
expr_stmt|;
name|isLinkStorageOpen
operator|=
literal|false
expr_stmt|;
name|docStorages
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|linkStorages
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
comment|/**      * open all docStorages      */
DECL|method|open
specifier|public
name|void
name|open
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|docStorages
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
operator|(
operator|(
name|DocumentStorage
operator|)
name|it
operator|.
name|next
argument_list|()
operator|)
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
name|isOpen
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * store the doc into all docStorages      * document is discarded if a storage.store() returns null      *      * @see de.lanlab.larm.storage.WebDocument#store      * @param doc  Description of the Parameter      * @return     Description of the Return Value      */
DECL|method|store
specifier|public
name|WebDocument
name|store
parameter_list|(
name|WebDocument
name|doc
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|docStorages
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|doc
operator|=
operator|(
operator|(
name|DocumentStorage
operator|)
name|it
operator|.
name|next
argument_list|()
operator|)
operator|.
name|store
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
break|break;
block|}
block|}
return|return
name|doc
return|;
block|}
comment|/**      * Adds a feature to the Storage attribute of the StoragePipeline object      *      * @param storage  The feature to be added to the Storage attribute      */
DECL|method|addDocStorage
specifier|public
name|void
name|addDocStorage
parameter_list|(
name|DocumentStorage
name|storage
parameter_list|)
block|{
if|if
condition|(
name|isOpen
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"storage can't be added if pipeline is already open"
argument_list|)
throw|;
block|}
name|docStorages
operator|.
name|add
argument_list|(
name|storage
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a feature to the Storage attribute of the StoragePipeline object      *      * @param storage  The feature to be added to the Storage attribute      */
DECL|method|addLinkStorage
specifier|public
name|void
name|addLinkStorage
parameter_list|(
name|LinkStorage
name|storage
parameter_list|)
block|{
if|if
condition|(
name|isOpen
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"storage can't be added if pipeline is already open"
argument_list|)
throw|;
block|}
name|linkStorages
operator|.
name|add
argument_list|(
name|storage
argument_list|)
expr_stmt|;
block|}
DECL|method|openLinkStorage
specifier|public
name|void
name|openLinkStorage
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|linkStorages
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
operator|(
operator|(
name|LinkStorage
operator|)
name|it
operator|.
name|next
argument_list|()
operator|)
operator|.
name|openLinkStorage
argument_list|()
expr_stmt|;
block|}
name|isLinkStorageOpen
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|storeLinks
specifier|public
name|Collection
name|storeLinks
parameter_list|(
name|Collection
name|c
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|linkStorages
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|c
operator|=
operator|(
operator|(
name|LinkStorage
operator|)
name|it
operator|.
name|next
argument_list|()
operator|)
operator|.
name|storeLinks
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
break|break;
block|}
block|}
return|return
name|c
return|;
block|}
block|}
end_class
end_unit
