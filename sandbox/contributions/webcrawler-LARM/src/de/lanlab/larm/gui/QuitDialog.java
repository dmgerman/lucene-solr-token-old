begin_unit
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_package
DECL|package|de.lanlab.larm.gui
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|gui
package|;
end_package
begin_comment
comment|/*     A basic extension of the java.awt.Dialog class  */
end_comment
begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|*
import|;
end_import
begin_class
DECL|class|QuitDialog
specifier|public
class|class
name|QuitDialog
extends|extends
name|Dialog
block|{
DECL|method|QuitDialog
specifier|public
name|QuitDialog
parameter_list|(
name|Frame
name|parent
parameter_list|,
name|boolean
name|modal
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|modal
argument_list|)
expr_stmt|;
comment|//Keep a local reference to the invoking frame
name|frame
operator|=
name|parent
expr_stmt|;
comment|// This code is automatically generated by Visual Cafe when you add
comment|// components to the visual environment. It instantiates and initializes
comment|// the components. To modify the code, only use code syntax that matches
comment|// what Visual Cafe can generate, or Visual Cafe may be unable to back
comment|// parse your Java file into its visual environment.
comment|//{{INIT_CONTROLS
name|setLayout
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setSize
argument_list|(
literal|337
argument_list|,
literal|135
argument_list|)
expr_stmt|;
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|yesButton
operator|.
name|setLabel
argument_list|(
literal|" Ja "
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|yesButton
argument_list|)
expr_stmt|;
name|yesButton
operator|.
name|setFont
argument_list|(
operator|new
name|Font
argument_list|(
literal|"Dialog"
argument_list|,
name|Font
operator|.
name|BOLD
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|yesButton
operator|.
name|setBounds
argument_list|(
literal|72
argument_list|,
literal|80
argument_list|,
literal|79
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|noButton
operator|.
name|setLabel
argument_list|(
literal|"  Nein  "
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|noButton
argument_list|)
expr_stmt|;
name|noButton
operator|.
name|setFont
argument_list|(
operator|new
name|Font
argument_list|(
literal|"Dialog"
argument_list|,
name|Font
operator|.
name|BOLD
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|noButton
operator|.
name|setBounds
argument_list|(
literal|185
argument_list|,
literal|80
argument_list|,
literal|79
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|label1
operator|.
name|setText
argument_list|(
literal|"MÃ¶chten Sie LARM beenden?"
argument_list|)
expr_stmt|;
name|label1
operator|.
name|setAlignment
argument_list|(
name|java
operator|.
name|awt
operator|.
name|Label
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|label1
argument_list|)
expr_stmt|;
name|label1
operator|.
name|setBounds
argument_list|(
literal|68
argument_list|,
literal|33
argument_list|,
literal|220
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
literal|"LARM - Beenden"
argument_list|)
expr_stmt|;
comment|//}}
comment|//{{REGISTER_LISTENERS
name|SymWindow
name|aSymWindow
init|=
operator|new
name|SymWindow
argument_list|()
decl_stmt|;
name|this
operator|.
name|addWindowListener
argument_list|(
name|aSymWindow
argument_list|)
expr_stmt|;
name|SymAction
name|lSymAction
init|=
operator|new
name|SymAction
argument_list|()
decl_stmt|;
name|noButton
operator|.
name|addActionListener
argument_list|(
name|lSymAction
argument_list|)
expr_stmt|;
name|yesButton
operator|.
name|addActionListener
argument_list|(
name|lSymAction
argument_list|)
expr_stmt|;
comment|//}}
block|}
DECL|method|addNotify
specifier|public
name|void
name|addNotify
parameter_list|()
block|{
comment|// Record the size of the window prior to calling parents addNotify.
name|Dimension
name|d
init|=
name|getSize
argument_list|()
decl_stmt|;
name|super
operator|.
name|addNotify
argument_list|()
expr_stmt|;
if|if
condition|(
name|fComponentsAdjusted
condition|)
return|return;
comment|// Adjust components according to the insets
name|setSize
argument_list|(
name|getInsets
argument_list|()
operator|.
name|left
operator|+
name|getInsets
argument_list|()
operator|.
name|right
operator|+
name|d
operator|.
name|width
argument_list|,
name|getInsets
argument_list|()
operator|.
name|top
operator|+
name|getInsets
argument_list|()
operator|.
name|bottom
operator|+
name|d
operator|.
name|height
argument_list|)
expr_stmt|;
name|Component
name|components
index|[]
init|=
name|getComponents
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|components
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Point
name|p
init|=
name|components
index|[
name|i
index|]
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|p
operator|.
name|translate
argument_list|(
name|getInsets
argument_list|()
operator|.
name|left
argument_list|,
name|getInsets
argument_list|()
operator|.
name|top
argument_list|)
expr_stmt|;
name|components
index|[
name|i
index|]
operator|.
name|setLocation
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|fComponentsAdjusted
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|QuitDialog
specifier|public
name|QuitDialog
parameter_list|(
name|Frame
name|parent
parameter_list|,
name|String
name|title
parameter_list|,
name|boolean
name|modal
parameter_list|)
block|{
name|this
argument_list|(
name|parent
argument_list|,
name|modal
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
comment|/**      * Shows or hides the component depending on the boolean flag b.      * @param b  if true, show the component; otherwise, hide the component.      * @see java.awt.Component#isVisible      */
DECL|method|setVisible
specifier|public
name|void
name|setVisible
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
condition|)
block|{
name|Rectangle
name|bounds
init|=
name|getParent
argument_list|()
operator|.
name|getBounds
argument_list|()
decl_stmt|;
name|Rectangle
name|abounds
init|=
name|getBounds
argument_list|()
decl_stmt|;
name|setLocation
argument_list|(
name|bounds
operator|.
name|x
operator|+
operator|(
name|bounds
operator|.
name|width
operator|-
name|abounds
operator|.
name|width
operator|)
operator|/
literal|2
argument_list|,
name|bounds
operator|.
name|y
operator|+
operator|(
name|bounds
operator|.
name|height
operator|-
name|abounds
operator|.
name|height
operator|)
operator|/
literal|2
argument_list|)
expr_stmt|;
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|beep
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|setVisible
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
comment|// Used for addNotify check.
DECL|field|fComponentsAdjusted
name|boolean
name|fComponentsAdjusted
init|=
literal|false
decl_stmt|;
comment|// Invoking frame
DECL|field|frame
name|Frame
name|frame
init|=
literal|null
decl_stmt|;
comment|//{{DECLARE_CONTROLS
DECL|field|yesButton
name|java
operator|.
name|awt
operator|.
name|Button
name|yesButton
init|=
operator|new
name|java
operator|.
name|awt
operator|.
name|Button
argument_list|()
decl_stmt|;
DECL|field|noButton
name|java
operator|.
name|awt
operator|.
name|Button
name|noButton
init|=
operator|new
name|java
operator|.
name|awt
operator|.
name|Button
argument_list|()
decl_stmt|;
DECL|field|label1
name|java
operator|.
name|awt
operator|.
name|Label
name|label1
init|=
operator|new
name|java
operator|.
name|awt
operator|.
name|Label
argument_list|()
decl_stmt|;
comment|//}}
DECL|class|SymAction
class|class
name|SymAction
implements|implements
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
block|{
DECL|method|actionPerformed
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
name|event
parameter_list|)
block|{
name|Object
name|object
init|=
name|event
operator|.
name|getSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|object
operator|==
name|yesButton
condition|)
name|yesButton_ActionPerformed
argument_list|(
name|event
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|object
operator|==
name|noButton
condition|)
name|noButton_ActionPerformed
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|yesButton_ActionPerformed
name|void
name|yesButton_ActionPerformed
parameter_list|(
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
name|event
parameter_list|)
block|{
comment|// to do: code goes here.
name|yesButton_ActionPerformed_Interaction1
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|method|yesButton_ActionPerformed_Interaction1
name|void
name|yesButton_ActionPerformed_Interaction1
parameter_list|(
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|frame
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Hide the invoking frame
name|frame
operator|.
name|dispose
argument_list|()
expr_stmt|;
comment|// Free system resources
name|this
operator|.
name|dispose
argument_list|()
expr_stmt|;
comment|// Free system resources
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// close the application
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
block|}
DECL|method|noButton_ActionPerformed
name|void
name|noButton_ActionPerformed
parameter_list|(
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
name|event
parameter_list|)
block|{
comment|// to do: code goes here.
name|noButton_ActionPerformed_Interaction1
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|method|noButton_ActionPerformed_Interaction1
name|void
name|noButton_ActionPerformed_Interaction1
parameter_list|(
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
block|}
DECL|class|SymWindow
class|class
name|SymWindow
extends|extends
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowAdapter
block|{
DECL|method|windowClosing
specifier|public
name|void
name|windowClosing
parameter_list|(
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowEvent
name|event
parameter_list|)
block|{
name|Object
name|object
init|=
name|event
operator|.
name|getSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|object
operator|==
name|QuitDialog
operator|.
name|this
condition|)
name|QuitDialog_WindowClosing
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|QuitDialog_WindowClosing
name|void
name|QuitDialog_WindowClosing
parameter_list|(
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowEvent
name|event
parameter_list|)
block|{
comment|// to do: code goes here.
name|QuitDialog_WindowClosing_Interaction1
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|method|QuitDialog_WindowClosing_Interaction1
name|void
name|QuitDialog_WindowClosing_Interaction1
parameter_list|(
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
block|}
block|}
end_class
end_unit
