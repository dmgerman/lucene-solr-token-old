begin_unit
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_package
DECL|package|de.lanlab.larm.fetcher
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|fetcher
package|;
end_package
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|threads
operator|.
name|ServerThread
import|;
end_import
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|util
operator|.
name|State
import|;
end_import
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|net
operator|.
name|HostManager
import|;
end_import
begin_import
import|import
name|HTTPClient
operator|.
name|NVPair
import|;
end_import
begin_comment
comment|/**  * a server thread for the thread pool that records the number  * of bytes read and the number of tasks run  * mainly for statistical purposes and to keep most of the information a task needs  * static  * @version $Id$  */
end_comment
begin_class
DECL|class|FetcherThread
specifier|public
class|class
name|FetcherThread
extends|extends
name|ServerThread
block|{
DECL|field|totalBytesRead
name|long
name|totalBytesRead
init|=
literal|0
decl_stmt|;
DECL|field|totalTasksRun
name|long
name|totalTasksRun
init|=
literal|0
decl_stmt|;
DECL|field|hostManager
name|HostManager
name|hostManager
decl_stmt|;
DECL|field|documentBuffer
name|byte
index|[]
name|documentBuffer
init|=
operator|new
name|byte
index|[
name|Constants
operator|.
name|FETCHERTASK_READSIZE
index|]
decl_stmt|;
comment|/**      * default headers for HTTPClient      */
DECL|field|headers
specifier|private
specifier|volatile
name|NVPair
name|headers
index|[]
init|=
operator|new
name|NVPair
index|[
literal|2
index|]
decl_stmt|;
DECL|method|getDefaultHeaders
specifier|public
name|NVPair
index|[]
name|getDefaultHeaders
parameter_list|()
block|{
return|return
name|headers
return|;
block|}
DECL|method|getUsedDefaultHeaders
specifier|public
name|int
name|getUsedDefaultHeaders
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
DECL|method|getHostManager
specifier|public
name|HostManager
name|getHostManager
parameter_list|()
block|{
return|return
name|hostManager
return|;
block|}
DECL|method|FetcherThread
specifier|public
name|FetcherThread
parameter_list|(
name|int
name|threadNumber
parameter_list|,
name|ThreadGroup
name|threadGroup
parameter_list|,
name|HostManager
name|hostManager
parameter_list|)
block|{
name|super
argument_list|(
name|threadNumber
argument_list|,
literal|"FetcherThread "
operator|+
name|threadNumber
argument_list|,
name|threadGroup
argument_list|)
expr_stmt|;
name|this
operator|.
name|hostManager
operator|=
name|hostManager
expr_stmt|;
name|headers
index|[
literal|0
index|]
operator|=
operator|new
name|HTTPClient
operator|.
name|NVPair
argument_list|(
literal|"User-Agent"
argument_list|,
name|Constants
operator|.
name|CRAWLER_AGENT
argument_list|)
expr_stmt|;
name|headers
index|[
literal|1
index|]
operator|=
literal|null
expr_stmt|;
comment|// may contain an additional field
block|}
DECL|field|STATE_IDLE
specifier|public
specifier|static
name|String
name|STATE_IDLE
init|=
literal|"Idle"
decl_stmt|;
DECL|field|idleState
name|State
name|idleState
init|=
operator|new
name|State
argument_list|(
name|STATE_IDLE
argument_list|)
decl_stmt|;
comment|// only set if task is finished
DECL|method|taskReady
specifier|protected
name|void
name|taskReady
parameter_list|()
block|{
name|totalBytesRead
operator|+=
operator|(
operator|(
name|FetcherTask
operator|)
name|task
operator|)
operator|.
name|getBytesRead
argument_list|()
expr_stmt|;
name|totalTasksRun
operator|++
expr_stmt|;
name|super
operator|.
name|taskReady
argument_list|()
expr_stmt|;
name|idleState
operator|.
name|setState
argument_list|(
name|STATE_IDLE
argument_list|)
expr_stmt|;
block|}
DECL|method|getTotalBytesRead
specifier|public
name|long
name|getTotalBytesRead
parameter_list|()
block|{
if|if
condition|(
name|task
operator|!=
literal|null
condition|)
block|{
return|return
name|totalBytesRead
operator|+
operator|(
operator|(
name|FetcherTask
operator|)
name|task
operator|)
operator|.
name|getBytesRead
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|totalBytesRead
return|;
block|}
block|}
DECL|method|getTotalTasksRun
specifier|public
name|long
name|getTotalTasksRun
parameter_list|()
block|{
return|return
name|totalTasksRun
return|;
block|}
DECL|method|getDocumentBuffer
specifier|public
name|byte
index|[]
name|getDocumentBuffer
parameter_list|()
block|{
return|return
name|documentBuffer
return|;
block|}
DECL|method|getTaskState
specifier|public
name|State
name|getTaskState
parameter_list|()
block|{
if|if
condition|(
name|task
operator|!=
literal|null
condition|)
block|{
comment|// task could be null here
return|return
operator|(
operator|(
name|FetcherTask
operator|)
name|task
operator|)
operator|.
name|getTaskState
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|idleState
operator|.
name|cloneState
argument_list|()
return|;
block|}
block|}
block|}
end_class
end_unit
