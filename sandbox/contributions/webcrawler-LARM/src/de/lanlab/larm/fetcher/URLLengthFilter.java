begin_unit
begin_package
DECL|package|de.lanlab.larm.fetcher
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|fetcher
package|;
end_package
begin_comment
comment|/**  * Title: LARM Lanlab Retrieval Machine Description: Copyright: Copyright (c)  * Company:  *  * @author  * @created   28. Januar 2002  * @version   1.0  */
end_comment
begin_comment
comment|/**  * Title: LARM Lanlab Retrieval Machine Description: Copyright: Copyright (c)  * Company:  *  * kills URLs longer than X characters. Used to prevent endless loops where  * the page contains the current URL + some extension  *  * @author Clemens Marschner  * @created   28. Januar 2002  */
end_comment
begin_class
DECL|class|URLLengthFilter
specifier|public
class|class
name|URLLengthFilter
extends|extends
name|Filter
implements|implements
name|MessageListener
block|{
comment|/**      * called by the message handler      *      * @param handler  the handler      */
DECL|method|notifyAddedToMessageHandler
specifier|public
name|void
name|notifyAddedToMessageHandler
parameter_list|(
name|MessageHandler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|messageHandler
operator|=
name|handler
expr_stmt|;
block|}
DECL|field|messageHandler
name|MessageHandler
name|messageHandler
decl_stmt|;
DECL|field|maxLength
name|int
name|maxLength
decl_stmt|;
comment|/**      * Constructor for the URLLengthFilter object      *      * @param maxLength  max length of the _total_ URL (protocol+host+port+path)      */
DECL|method|URLLengthFilter
specifier|public
name|URLLengthFilter
parameter_list|(
name|int
name|maxLength
parameter_list|)
block|{
name|this
operator|.
name|maxLength
operator|=
name|maxLength
expr_stmt|;
block|}
comment|/**      * handles the message      *      * @param message  Description of the Parameter      * @return         the original message or NULL if the URL was too long      */
DECL|method|handleRequest
specifier|public
name|Message
name|handleRequest
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|URLMessage
name|m
init|=
operator|(
name|URLMessage
operator|)
name|message
decl_stmt|;
name|String
name|file
init|=
name|m
operator|.
name|getUrl
argument_list|()
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
operator|&&
name|file
operator|.
name|length
argument_list|()
operator|>
name|maxLength
condition|)
comment|// path + query
block|{
name|filtered
operator|++
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|message
return|;
block|}
block|}
end_class
end_unit
