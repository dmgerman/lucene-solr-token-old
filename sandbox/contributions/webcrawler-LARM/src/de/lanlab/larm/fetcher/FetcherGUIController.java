begin_unit
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_package
DECL|package|de.lanlab.larm.fetcher
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|fetcher
package|;
end_package
begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import
begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|*
import|;
end_import
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|gui
operator|.
name|*
import|;
end_import
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|threads
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * this was used to connect the GUI to the fetcher  * @TODO put this into the GUI package, probably?  * @version $Id$  */
end_comment
begin_class
DECL|class|FetcherGUIController
specifier|public
class|class
name|FetcherGUIController
implements|implements
name|ActionListener
block|{
DECL|field|fetcherMain
name|FetcherMain
name|fetcherMain
decl_stmt|;
DECL|field|fetcherFrame
name|FetcherSummaryFrame
name|fetcherFrame
decl_stmt|;
DECL|method|FetcherGUIController
specifier|public
name|FetcherGUIController
parameter_list|(
name|FetcherMain
name|fetcherMainPrg
parameter_list|,
name|FetcherSummaryFrame
name|fetcherFrameWin
parameter_list|,
name|String
name|defaultStartURL
parameter_list|)
block|{
name|this
operator|.
name|fetcherMain
operator|=
name|fetcherMainPrg
expr_stmt|;
name|this
operator|.
name|fetcherFrame
operator|=
name|fetcherFrameWin
expr_stmt|;
name|fetcherFrame
operator|.
name|setRestrictTo
argument_list|(
name|fetcherMain
operator|.
name|urlScopeFilter
operator|.
name|getRexString
argument_list|()
argument_list|)
expr_stmt|;
name|fetcherFrame
operator|.
name|setStartURL
argument_list|(
name|defaultStartURL
argument_list|)
expr_stmt|;
name|fetcherMain
operator|.
name|fetcher
operator|.
name|addThreadPoolObserver
argument_list|(
operator|new
name|ThreadPoolObserver
argument_list|()
block|{
specifier|public
name|void
name|threadUpdate
parameter_list|(
name|int
name|threadNr
parameter_list|,
name|String
name|action
parameter_list|,
name|String
name|info
parameter_list|)
block|{
name|String
name|status
init|=
name|threadNr
operator|+
literal|": "
operator|+
name|action
operator|+
literal|": "
operator|+
name|info
decl_stmt|;
name|fetcherFrame
operator|.
name|setIdleThreadsCount
argument_list|(
name|fetcherMain
operator|.
name|fetcher
operator|.
name|getIdleThreadsCount
argument_list|()
argument_list|)
expr_stmt|;
name|fetcherFrame
operator|.
name|setBusyThreadsCount
argument_list|(
name|fetcherMain
operator|.
name|fetcher
operator|.
name|getBusyThreadsCount
argument_list|()
argument_list|)
expr_stmt|;
name|fetcherFrame
operator|.
name|setWorkingThreadsCount
argument_list|(
name|fetcherMain
operator|.
name|fetcher
operator|.
name|getWorkingThreadsCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|queueUpdate
parameter_list|(
name|String
name|info
parameter_list|,
name|String
name|action
parameter_list|)
block|{
name|fetcherFrame
operator|.
name|setRequestQueueCount
argument_list|(
name|fetcherMain
operator|.
name|fetcher
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fetcherMain
operator|.
name|monitor
operator|.
name|addObserver
argument_list|(
operator|new
name|Observer
argument_list|()
block|{
specifier|public
name|void
name|update
parameter_list|(
name|Observable
name|o
parameter_list|,
name|Object
name|arg
parameter_list|)
block|{
comment|// der ThreadMonitor wurde geupdated
comment|//fetcherFrame.setStalledThreads(fetcherMain.monitor.getStalledThreadCount(10, 500.0));
comment|//fetcherFrame.setBytesPerSecond(fetcherMain.monitor.getAverageReadCount(5));
comment|// fetcherFrame.setDocsPerSecond(fetcherMain.monitor.getDocsPerSecond(5));
comment|// wir nutzen die Gelegenheit, den aktuellen Speicherbestand auszugeben
name|fetcherFrame
operator|.
name|setFreeMem
argument_list|(
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|freeMemory
argument_list|()
argument_list|)
expr_stmt|;
name|fetcherFrame
operator|.
name|setTotalMem
argument_list|(
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|totalMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|/*	fetcherMain.reFilter.addObserver(             new Observer()             {                 public void update(Observable o, Object arg)                 {                     fetcherFrame.setRobotsTxtCount(fetcherMain.reFilter.getExcludingHostsCount());                 }             }         );*/
name|fetcherMain
operator|.
name|messageHandler
operator|.
name|addMessageQueueObserver
argument_list|(
operator|new
name|Observer
argument_list|()
block|{
specifier|public
name|void
name|update
parameter_list|(
name|Observable
name|o
parameter_list|,
name|Object
name|arg
parameter_list|)
block|{
comment|// a message has been added or deleted
name|fetcherFrame
operator|.
name|setURLsQueued
argument_list|(
name|fetcherMain
operator|.
name|messageHandler
operator|.
name|getQueued
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// this observer will be called if a filter has decided to throw a
comment|// message away.
name|fetcherMain
operator|.
name|messageHandler
operator|.
name|addMessageProcessorObserver
argument_list|(
operator|new
name|Observer
argument_list|()
block|{
specifier|public
name|void
name|update
parameter_list|(
name|Observable
name|o
parameter_list|,
name|Object
name|arg
parameter_list|)
block|{
if|if
condition|(
name|arg
operator|==
name|fetcherMain
operator|.
name|urlScopeFilter
condition|)
block|{
name|fetcherFrame
operator|.
name|setScopeFiltered
argument_list|(
name|fetcherMain
operator|.
name|urlScopeFilter
operator|.
name|getFiltered
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
name|fetcherMain
operator|.
name|urlVisitedFilter
condition|)
block|{
name|fetcherFrame
operator|.
name|setVisitedFiltered
argument_list|(
name|fetcherMain
operator|.
name|urlVisitedFilter
operator|.
name|getFiltered
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|==
name|fetcherMain
operator|.
name|reFilter
condition|)
block|{
name|fetcherFrame
operator|.
name|setURLsCaughtCount
argument_list|(
name|fetcherMain
operator|.
name|reFilter
operator|.
name|getFiltered
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
comment|// it's the fetcher
block|{
name|fetcherFrame
operator|.
name|setDocsRead
argument_list|(
name|fetcherMain
operator|.
name|fetcher
operator|.
name|getDocsRead
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|fetcherFrame
operator|.
name|addWindowListener
argument_list|(
operator|new
name|WindowAdapter
argument_list|()
block|{
specifier|public
name|void
name|windowClosed
parameter_list|(
name|WindowEvent
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"window Closed"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fetcherFrame
operator|.
name|addStartButtonListener
argument_list|(
operator|(
name|ActionListener
operator|)
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      *   will be called when the start button is pressed      */
DECL|method|actionPerformed
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Füge Start-URL ein"
argument_list|)
expr_stmt|;
try|try
block|{
comment|// urlVisitedFilter.printAllURLs();
comment|// urlVisitedFilter.clearHashtable();
name|fetcherMain
operator|.
name|setRexString
argument_list|(
name|fetcherFrame
operator|.
name|getRestrictTo
argument_list|()
argument_list|)
expr_stmt|;
name|fetcherMain
operator|.
name|startMonitor
argument_list|()
expr_stmt|;
name|fetcherMain
operator|.
name|putURL
argument_list|(
operator|new
name|URL
argument_list|(
name|fetcherFrame
operator|.
name|getStartURL
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"actionPerformed: Exception: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
