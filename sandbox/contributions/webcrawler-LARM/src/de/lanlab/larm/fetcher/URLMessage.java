begin_unit
begin_comment
comment|/*  *  ====================================================================  *  The Apache Software License, Version 1.1  *  *  Copyright (c) 2001 The Apache Software Foundation.  All rights  *  reserved.  *  *  Redistribution and use in source and binary forms, with or without  *  modification, are permitted provided that the following conditions  *  are met:  *  *  1. Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.  *  *  2. Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in  *  the documentation and/or other materials provided with the  *  distribution.  *  *  3. The end-user documentation included with the redistribution,  *  if any, must include the following acknowledgment:  *  "This product includes software developed by the  *  Apache Software Foundation (http://www.apache.org/)."  *  Alternately, this acknowledgment may appear in the software itself,  *  if and wherever such third-party acknowledgments normally appear.  *  *  4. The names "Apache" and "Apache Software Foundation" and  *  "Apache Lucene" must not be used to endorse or promote products  *  derived from this software without prior written permission. For  *  written permission, please contact apache@apache.org.  *  *  5. Products derived from this software may not be called "Apache",  *  "Apache Lucene", nor may "Apache" appear in their name, without  *  prior written permission of the Apache Software Foundation.  *  *  THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  *  DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  *  ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  *  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  *  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  *  SUCH DAMAGE.  *  ====================================================================  *  *  This software consists of voluntary contributions made by many  *  individuals on behalf of the Apache Software Foundation.  For more  *  information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_package
DECL|package|de.lanlab.larm.fetcher
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|fetcher
package|;
end_package
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|util
operator|.
name|URLUtils
import|;
end_import
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|net
operator|.
name|URLNormalizer
import|;
end_import
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|net
operator|.
name|HostManager
import|;
end_import
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|net
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * represents a URL which is passed around in the messageHandler  *  * @author    Administrator  * @created   14. Juni 2002  * @version   $Id$  */
end_comment
begin_class
DECL|class|URLMessage
specifier|public
class|class
name|URLMessage
implements|implements
name|Message
implements|,
name|Serializable
block|{
comment|/**      * the URL      */
DECL|field|url
specifier|protected
name|URL
name|url
decl_stmt|;
comment|/**      * docID or 0 (used with repository)      */
DECL|field|docId
name|long
name|docId
decl_stmt|;
comment|/**      * Description of the Field      */
DECL|field|urlString
specifier|protected
specifier|volatile
name|String
name|urlString
decl_stmt|;
comment|/**      * referer or null      */
DECL|field|referer
specifier|protected
name|URL
name|referer
decl_stmt|;
comment|/**      * externalized referer URL, to prevent multiple calls to      * url.toExternalForm()      */
DECL|field|refererString
specifier|protected
specifier|volatile
name|String
name|refererString
decl_stmt|;
comment|/**      * externalized referer URL, to prevent multiple calls to      * url.toExternalForm()      */
DECL|field|refererNormalizedString
specifier|protected
specifier|volatile
name|String
name|refererNormalizedString
decl_stmt|;
comment|/**      * normalized URL, as defined by {@link de.lanlab.larm.net.URLNormalizer}      * (lower case, index.* removed, all characters except alphanumeric ones      * escaped)      */
DECL|field|normalizedURLString
specifier|protected
name|String
name|normalizedURLString
decl_stmt|;
comment|/**      * ANCHOR: an ordinary link like&lt;a href="..."&gt; (or AREA or IMG)<br>      * FRAME: a&lt;FRAME src="..."&gt; tag<br>      * REDIRECT: the link between two pages after a 301/302/307 result code      */
DECL|field|linkType
name|byte
name|linkType
decl_stmt|;
DECL|field|LINKTYPE_ANCHOR
specifier|public
specifier|final
specifier|static
name|byte
name|LINKTYPE_ANCHOR
init|=
literal|0
decl_stmt|;
DECL|field|LINKTYPE_FRAME
specifier|public
specifier|final
specifier|static
name|byte
name|LINKTYPE_FRAME
init|=
literal|1
decl_stmt|;
DECL|field|LINKTYPE_REDIRECT
specifier|public
specifier|final
specifier|static
name|byte
name|LINKTYPE_REDIRECT
init|=
literal|2
decl_stmt|;
DECL|field|LINKTYPE_STRING
specifier|protected
specifier|final
specifier|static
name|String
name|LINKTYPE_STRING
index|[]
init|=
block|{
literal|"A/IMG/AREA"
block|,
literal|"FRAME"
block|,
literal|"Redirect"
block|}
decl_stmt|;
DECL|method|getLinkType
specifier|public
name|int
name|getLinkType
parameter_list|()
block|{
return|return
name|linkType
return|;
block|}
DECL|method|getLinkTypeString
specifier|public
name|String
name|getLinkTypeString
parameter_list|()
block|{
return|return
name|LINKTYPE_STRING
index|[
name|linkType
index|]
return|;
block|}
comment|/**      * anchor text, as in&lt;a href="..."&gt;Anchor&lt;/a&gt;      */
DECL|field|anchor
specifier|protected
name|String
name|anchor
decl_stmt|;
DECL|method|setDocId
specifier|public
name|void
name|setDocId
parameter_list|(
name|long
name|docId
parameter_list|)
block|{
name|this
operator|.
name|docId
operator|=
name|docId
expr_stmt|;
block|}
DECL|method|getDocId
specifier|public
name|long
name|getDocId
parameter_list|()
block|{
return|return
name|docId
return|;
block|}
comment|/**      * Constructor for the URLMessage object      *      * @param url          Description of the Parameter      * @param referer      Description of the Parameter      * @param isFrame      Description of the Parameter      * @param anchor       Description of the Parameter      * @param hostManager  Description of the Parameter      */
DECL|method|URLMessage
specifier|public
name|URLMessage
parameter_list|(
name|URL
name|url
parameter_list|,
name|URL
name|referer
parameter_list|,
name|byte
name|linkType
parameter_list|,
name|String
name|anchor
parameter_list|,
name|HostResolver
name|hostResolver
parameter_list|)
block|{
comment|//super();
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|urlString
operator|=
name|url
operator|!=
literal|null
condition|?
name|URLUtils
operator|.
name|toExternalFormNoRef
argument_list|(
name|url
argument_list|)
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|referer
operator|=
name|referer
expr_stmt|;
name|this
operator|.
name|refererString
operator|=
name|referer
operator|!=
literal|null
condition|?
name|URLUtils
operator|.
name|toExternalFormNoRef
argument_list|(
name|referer
argument_list|)
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|refererNormalizedString
operator|=
name|referer
operator|!=
literal|null
condition|?
name|URLUtils
operator|.
name|toExternalFormNoRef
argument_list|(
name|URLNormalizer
operator|.
name|normalize
argument_list|(
name|referer
argument_list|,
name|hostResolver
argument_list|)
argument_list|)
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|linkType
operator|=
name|linkType
expr_stmt|;
name|this
operator|.
name|anchor
operator|=
name|anchor
operator|!=
literal|null
condition|?
name|anchor
else|:
literal|""
expr_stmt|;
name|this
operator|.
name|normalizedURLString
operator|=
name|url
operator|!=
literal|null
condition|?
name|URLUtils
operator|.
name|toExternalFormNoRef
argument_list|(
name|URLNormalizer
operator|.
name|normalize
argument_list|(
name|url
argument_list|,
name|hostResolver
argument_list|)
argument_list|)
else|:
literal|null
expr_stmt|;
comment|//this.normalizedURLString = URLNormalizer.
comment|//System.out.println("" + refererString + " -> " + urlString);
name|this
operator|.
name|docId
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|URLMessage
specifier|public
name|URLMessage
parameter_list|(
name|URL
name|url
parameter_list|,
name|String
name|normalizedURL
parameter_list|,
name|URL
name|referer
parameter_list|,
name|String
name|normalizedReferer
parameter_list|,
name|byte
name|linkType
parameter_list|,
name|String
name|anchor
parameter_list|)
block|{
comment|//super();
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|urlString
operator|=
name|url
operator|!=
literal|null
condition|?
name|URLUtils
operator|.
name|toExternalFormNoRef
argument_list|(
name|url
argument_list|)
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|referer
operator|=
name|referer
expr_stmt|;
name|this
operator|.
name|refererString
operator|=
name|referer
operator|!=
literal|null
condition|?
name|URLUtils
operator|.
name|toExternalFormNoRef
argument_list|(
name|referer
argument_list|)
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|refererNormalizedString
operator|=
name|normalizedReferer
expr_stmt|;
name|this
operator|.
name|linkType
operator|=
name|linkType
expr_stmt|;
name|this
operator|.
name|anchor
operator|=
name|anchor
operator|!=
literal|null
condition|?
name|anchor
else|:
literal|""
expr_stmt|;
name|this
operator|.
name|normalizedURLString
operator|=
name|normalizedURL
expr_stmt|;
comment|//this.normalizedURLString = URLNormalizer.
comment|//System.out.println("" + refererString + " -> " + urlString);
name|this
operator|.
name|docId
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|URLMessage
specifier|public
name|URLMessage
parameter_list|(
name|URLMessage
name|other
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|other
operator|.
name|url
expr_stmt|;
name|this
operator|.
name|urlString
operator|=
name|other
operator|.
name|urlString
expr_stmt|;
name|this
operator|.
name|referer
operator|=
name|other
operator|.
name|referer
expr_stmt|;
name|this
operator|.
name|refererString
operator|=
name|other
operator|.
name|refererString
expr_stmt|;
name|this
operator|.
name|refererNormalizedString
operator|=
name|other
operator|.
name|refererNormalizedString
expr_stmt|;
name|this
operator|.
name|linkType
operator|=
name|other
operator|.
name|linkType
expr_stmt|;
name|this
operator|.
name|anchor
operator|=
name|other
operator|.
name|anchor
expr_stmt|;
name|this
operator|.
name|normalizedURLString
operator|=
name|other
operator|.
name|normalizedURLString
expr_stmt|;
name|this
operator|.
name|docId
operator|=
name|other
operator|.
name|docId
expr_stmt|;
block|}
comment|/**      * Gets the normalizedURLString attribute of the URLMessage object      *      * @return   The normalizedURLString value       */
DECL|method|getNormalizedURLString
specifier|public
name|String
name|getNormalizedURLString
parameter_list|()
block|{
return|return
name|this
operator|.
name|normalizedURLString
return|;
block|}
comment|/**      * Gets the url attribute of the URLMessage object      *      * @return   The url value      */
DECL|method|getUrl
specifier|public
name|URL
name|getUrl
parameter_list|()
block|{
return|return
name|this
operator|.
name|url
return|;
block|}
comment|/**      * Gets the referer attribute of the URLMessage object      *      * @return   The referer value      */
DECL|method|getReferer
specifier|public
name|URL
name|getReferer
parameter_list|()
block|{
return|return
name|this
operator|.
name|referer
return|;
block|}
comment|/**      * Description of the Method      *      * @return   Description of the Return Value      */
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|urlString
return|;
block|}
comment|/**      * Gets the uRLString attribute of the URLMessage object      *      * @return   The uRLString value      */
DECL|method|getURLString
specifier|public
name|String
name|getURLString
parameter_list|()
block|{
return|return
name|urlString
return|;
block|}
comment|/**      * Gets the refererString attribute of the URLMessage object      *      * @return   The refererString value      */
DECL|method|getRefererString
specifier|public
name|String
name|getRefererString
parameter_list|()
block|{
return|return
name|refererString
return|;
block|}
comment|/**      * Gets the normalizedRefererString attribute of the URLMessage object      *      * @return   The normalizedRefererString value      */
DECL|method|getNormalizedRefererString
specifier|public
name|String
name|getNormalizedRefererString
parameter_list|()
block|{
return|return
name|this
operator|.
name|refererNormalizedString
return|;
block|}
comment|/**      * Gets the anchor attribute of the URLMessage object      *      * @return   The anchor value      */
DECL|method|getAnchor
specifier|public
name|String
name|getAnchor
parameter_list|()
block|{
return|return
name|anchor
return|;
block|}
comment|/**      * Description of the Method      *      * @return   Description of the Return Value      */
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|url
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**      * Description of the Method      *      * @param out              Description of the Parameter      * @exception IOException  Description of the Exception      */
DECL|method|writeObject
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeObject
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|referer
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|linkType
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|anchor
operator|!=
literal|null
condition|?
name|anchor
else|:
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|refererNormalizedString
operator|!=
literal|null
condition|?
name|refererNormalizedString
else|:
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|normalizedURLString
operator|!=
literal|null
condition|?
name|normalizedURLString
else|:
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
call|(
name|int
call|)
argument_list|(
operator|(
name|docId
operator|>>
literal|32
operator|)
operator|&
literal|0xffffffff
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
call|(
name|int
call|)
argument_list|(
name|docId
operator|&
literal|0xffffffff
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of the Method      *      * @param in                          Description of the Parameter      * @exception IOException             Description of the Exception      * @exception ClassNotFoundException  Description of the Exception      */
DECL|method|readObject
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|url
operator|=
operator|(
name|URL
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|referer
operator|=
operator|(
name|URL
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|urlString
operator|=
name|url
operator|.
name|toExternalForm
argument_list|()
expr_stmt|;
name|refererString
operator|=
name|referer
operator|!=
literal|null
condition|?
name|referer
operator|.
name|toExternalForm
argument_list|()
else|:
literal|""
expr_stmt|;
name|linkType
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|anchor
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|refererNormalizedString
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|normalizedURLString
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|docId
operator|=
name|in
operator|.
name|read
argument_list|()
operator|<<
literal|32
expr_stmt|;
name|docId
operator||=
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
comment|/**      * Gets the info attribute of the URLMessage object      *      * @return   The info value      */
DECL|method|getInfo
specifier|public
name|String
name|getInfo
parameter_list|()
block|{
return|return
operator|(
name|referer
operator|!=
literal|null
condition|?
name|refererString
else|:
literal|"<start>"
operator|)
operator|+
literal|"\t"
operator|+
name|urlString
operator|+
literal|"\t"
operator|+
name|this
operator|.
name|getNormalizedURLString
argument_list|()
operator|+
literal|"\t"
operator|+
name|linkType
operator|+
literal|"\t"
operator|+
name|anchor
return|;
block|}
block|}
end_class
end_unit
