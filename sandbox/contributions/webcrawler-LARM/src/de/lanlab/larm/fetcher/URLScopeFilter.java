begin_unit
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_package
DECL|package|de.lanlab.larm.fetcher
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|fetcher
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|Perl5Matcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|Perl5Compiler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_comment
comment|/**  * filter class. Tries to match a regular expression with an incoming URL  * @author Clemens Marschner  * @version $Id$  */
end_comment
begin_class
DECL|class|URLScopeFilter
class|class
name|URLScopeFilter
extends|extends
name|Filter
implements|implements
name|MessageListener
block|{
DECL|method|notifyAddedToMessageHandler
specifier|public
name|void
name|notifyAddedToMessageHandler
parameter_list|(
name|MessageHandler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|messageHandler
operator|=
name|handler
expr_stmt|;
block|}
DECL|field|messageHandler
name|MessageHandler
name|messageHandler
decl_stmt|;
comment|/**      * the regular expression which describes a valid URL      */
DECL|field|pattern
specifier|private
name|Pattern
name|pattern
decl_stmt|;
DECL|field|matcher
specifier|private
name|Perl5Matcher
name|matcher
decl_stmt|;
DECL|field|compiler
specifier|private
name|Perl5Compiler
name|compiler
decl_stmt|;
DECL|method|URLScopeFilter
specifier|public
name|URLScopeFilter
parameter_list|()
block|{
name|matcher
operator|=
operator|new
name|Perl5Matcher
argument_list|()
expr_stmt|;
name|compiler
operator|=
operator|new
name|Perl5Compiler
argument_list|()
expr_stmt|;
block|}
DECL|method|getRexString
specifier|public
name|String
name|getRexString
parameter_list|()
block|{
return|return
name|pattern
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * set the regular expression      * @param rexString the expression      */
DECL|method|setRexString
specifier|public
name|void
name|setRexString
parameter_list|(
name|String
name|rexString
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|MalformedPatternException
block|{
name|this
operator|.
name|pattern
operator|=
name|compiler
operator|.
name|compile
argument_list|(
name|rexString
argument_list|,
name|Perl5Compiler
operator|.
name|CASE_INSENSITIVE_MASK
operator||
name|Perl5Compiler
operator|.
name|SINGLELINE_MASK
argument_list|)
expr_stmt|;
comment|//System.out.println("pattern set to: " + pattern);
block|}
comment|/**      * this method will be called by the message handler. Tests the URL      * and throws it out if it's not in the scope      */
DECL|method|handleRequest
specifier|public
name|Message
name|handleRequest
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|instanceof
name|URLMessage
condition|)
block|{
name|String
name|urlString
init|=
operator|(
operator|(
name|URLMessage
operator|)
name|message
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|urlString
operator|.
name|length
argument_list|()
decl_stmt|;
name|char
name|buffer
index|[]
init|=
operator|new
name|char
index|[
name|length
index|]
decl_stmt|;
name|urlString
operator|.
name|getChars
argument_list|(
literal|0
argument_list|,
name|length
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//System.out.println("using pattern: " + pattern);
name|boolean
name|match
init|=
name|matcher
operator|.
name|matches
argument_list|(
name|buffer
argument_list|,
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|match
condition|)
block|{
comment|//System.out.println("not in Scope: " + urlString);
name|filtered
operator|++
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|return
name|message
return|;
block|}
block|}
end_class
end_unit
