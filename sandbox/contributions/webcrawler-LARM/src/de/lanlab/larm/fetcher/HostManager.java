begin_unit
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_package
DECL|package|de.lanlab.larm.fetcher
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|fetcher
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_comment
comment|/**  * Description of the Class  *  * @author    Administrator  * @created   16. Februar 2002  * @version $Id$  */
end_comment
begin_class
DECL|class|HostManager
specifier|public
class|class
name|HostManager
block|{
DECL|field|hosts
name|HashMap
name|hosts
decl_stmt|;
DECL|field|hostCount
specifier|static
name|int
name|hostCount
init|=
literal|0
decl_stmt|;
comment|/**      * Constructor for the HostInfo object      *      * @param initialSize  Description of the Parameter      */
DECL|method|HostManager
specifier|public
name|HostManager
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|hosts
operator|=
operator|new
name|HashMap
argument_list|(
name|initialCapacity
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of the Method      *      * @param hostName  Description of the Parameter      * @return          Description of the Return Value      */
DECL|method|put
specifier|public
name|HostInfo
name|put
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hosts
operator|.
name|containsKey
argument_list|(
name|hostName
argument_list|)
condition|)
block|{
name|int
name|hostID
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|hostID
operator|=
name|hostCount
operator|++
expr_stmt|;
block|}
name|HostInfo
name|hi
init|=
operator|new
name|HostInfo
argument_list|(
name|hostName
argument_list|,
name|hostID
argument_list|)
decl_stmt|;
name|hosts
operator|.
name|put
argument_list|(
name|hostName
argument_list|,
name|hi
argument_list|)
expr_stmt|;
return|return
name|hi
return|;
block|}
return|return
operator|(
name|HostInfo
operator|)
name|hosts
operator|.
name|get
argument_list|(
name|hostName
argument_list|)
return|;
comment|/*else         {             hostID = hosts.get()         }         // assert hostID != -1;         return hostID;*/
block|}
comment|/**      * Gets the hostID attribute of the HostInfo object      *      * @param hostName  Description of the Parameter      * @return          The hostID value      */
DECL|method|getHostInfo
specifier|public
name|HostInfo
name|getHostInfo
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
name|HostInfo
name|hi
init|=
operator|(
name|HostInfo
operator|)
name|hosts
operator|.
name|get
argument_list|(
name|hostName
argument_list|)
decl_stmt|;
if|if
condition|(
name|hi
operator|==
literal|null
condition|)
block|{
return|return
name|put
argument_list|(
name|hostName
argument_list|)
return|;
block|}
return|return
name|hi
return|;
block|}
DECL|method|getSize
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|hosts
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class
end_unit
