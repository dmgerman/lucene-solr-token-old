begin_unit
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_package
DECL|package|de.lanlab.larm.fetcher
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|fetcher
package|;
end_package
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * this can be considered a hack  * @TODO implement this as a fast way to filter out different URL endings or beginnings  * @version $Id$  */
end_comment
begin_class
DECL|class|KnownPathsFilter
specifier|public
class|class
name|KnownPathsFilter
extends|extends
name|Filter
implements|implements
name|MessageListener
block|{
DECL|field|messageHandler
name|MessageHandler
name|messageHandler
decl_stmt|;
DECL|field|pathsToFilter
name|String
index|[]
name|pathsToFilter
init|=
block|{
literal|"/robots.txt"
block|}
decl_stmt|;
DECL|field|hostFilter
name|String
index|[]
name|hostFilter
init|=
block|{
literal|"www.nm.informatik.uni-muenchen.de"
block|,
literal|"cgi.cip.informatik.uni-muenchen.de"
block|}
decl_stmt|;
DECL|field|filesToFilter
name|String
index|[]
name|filesToFilter
init|=
block|{
comment|// exclude Apache directory files
literal|"/?D=D"
block|,
literal|"/?S=D"
block|,
literal|"/?M=D"
block|,
literal|"/?N=D"
block|,
literal|"/?D=A"
block|,
literal|"/?S=A"
block|,
literal|"/?M=A"
block|,
literal|"/?N=A"
block|,     }
decl_stmt|;
DECL|field|pathLength
name|int
name|pathLength
decl_stmt|;
DECL|field|fileLength
name|int
name|fileLength
decl_stmt|;
DECL|field|hostLength
name|int
name|hostLength
decl_stmt|;
comment|/**      * Constructor for the KnownPathsFilter object      */
DECL|method|KnownPathsFilter
specifier|public
name|KnownPathsFilter
parameter_list|()
block|{
name|pathLength
operator|=
name|pathsToFilter
operator|.
name|length
expr_stmt|;
name|fileLength
operator|=
name|filesToFilter
operator|.
name|length
expr_stmt|;
name|hostLength
operator|=
name|hostFilter
operator|.
name|length
expr_stmt|;
block|}
comment|/**      * Description of the Method      *      * @param message  Description of the Parameter      * @return         Description of the Return Value      */
DECL|method|handleRequest
specifier|public
name|Message
name|handleRequest
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|URL
name|url
init|=
operator|(
operator|(
name|URLMessage
operator|)
name|message
operator|)
operator|.
name|getUrl
argument_list|()
decl_stmt|;
name|String
name|file
init|=
name|url
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|String
name|host
init|=
name|url
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|pathLength
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|file
operator|.
name|startsWith
argument_list|(
name|pathsToFilter
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|filtered
operator|++
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|fileLength
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
name|filesToFilter
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|filtered
operator|++
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|hostLength
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hostFilter
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|host
argument_list|)
condition|)
block|{
name|filtered
operator|++
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|return
name|message
return|;
block|}
comment|/**      * will be called as soon as the Listener is added to the Message Queue      *      * @param handler  the Message Handler      */
DECL|method|notifyAddedToMessageHandler
specifier|public
name|void
name|notifyAddedToMessageHandler
parameter_list|(
name|MessageHandler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|messageHandler
operator|=
name|messageHandler
expr_stmt|;
block|}
block|}
end_class
end_unit
