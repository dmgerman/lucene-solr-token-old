begin_unit
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_package
DECL|package|de.lanlab.larm.fetcher
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|fetcher
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|util
operator|.
name|SimpleObservable
import|;
end_import
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|util
operator|.
name|CachingQueue
import|;
end_import
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|util
operator|.
name|UnderflowException
import|;
end_import
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|storage
operator|.
name|LinkStorage
import|;
end_import
begin_comment
comment|/**  *  This is a message handler that runs in its own thread.  *  Messages can be put via<code>putMessage</code> or<code>putMessages</code>  *  (use the latter whenever possible).<br>  *  Messages are passed to the filters in the order in which the filters where  *  added to the handler.<br>  *  They can consume a message by returning<code>null</code>. Otherwise, they  *  return a Message object, usually the one they got.<br>  *  The filters will run synchronously within the message handler thread<br>  *  This implements a chain of responsibility-style message handling.  * @version $Id$  */
end_comment
begin_class
DECL|class|MessageHandler
specifier|public
class|class
name|MessageHandler
implements|implements
name|Runnable
implements|,
name|LinkStorage
block|{
comment|/**      * the queue where messages are put in.      * Holds max. 2 x 5000 = 10.000 messages in RAM      */
DECL|field|messageQueue
specifier|private
name|CachingQueue
name|messageQueue
init|=
operator|new
name|CachingQueue
argument_list|(
literal|"fetcherURLMessageQueue"
argument_list|,
literal|5000
argument_list|)
decl_stmt|;
comment|/**      * list of Observers      */
DECL|field|listeners
specifier|private
name|LinkedList
name|listeners
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
comment|/**      * true as long as the thread is running      */
DECL|field|running
specifier|private
name|boolean
name|running
init|=
literal|true
decl_stmt|;
comment|/**      * the message handler thread      */
DECL|field|t
specifier|private
name|Thread
name|t
decl_stmt|;
comment|/**      * flag for thread communication      */
DECL|field|messagesWaiting
name|boolean
name|messagesWaiting
init|=
literal|false
decl_stmt|;
comment|/**      * true when a message is processed by the filters      */
DECL|field|workingOnMessage
name|boolean
name|workingOnMessage
init|=
literal|false
decl_stmt|;
DECL|field|queueMonitor
name|Object
name|queueMonitor
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|messageQueueObservable
name|SimpleObservable
name|messageQueueObservable
init|=
operator|new
name|SimpleObservable
argument_list|()
decl_stmt|;
DECL|field|messageProcessorObservable
name|SimpleObservable
name|messageProcessorObservable
init|=
operator|new
name|SimpleObservable
argument_list|()
decl_stmt|;
comment|/**      *  messageHandler-Thread erzeugen und starten      */
DECL|method|MessageHandler
specifier|public
name|MessageHandler
parameter_list|()
block|{
name|t
operator|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|,
literal|"MessageHandler Thread"
argument_list|)
expr_stmt|;
comment|// higher priority to prevent starving when a lot of fetcher threads are used
name|t
operator|.
name|setPriority
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|isWorkingOnMessage
specifier|public
name|boolean
name|isWorkingOnMessage
parameter_list|()
block|{
return|return
name|workingOnMessage
return|;
block|}
comment|/**      *   join messageHandler-Thread      */
DECL|method|finalize
specifier|public
name|void
name|finalize
parameter_list|()
block|{
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|t
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
block|}
block|}
comment|/**      *   registers a filter to the message handler      *   @param MessageListener - the Listener      */
DECL|method|addListener
specifier|public
name|void
name|addListener
parameter_list|(
name|MessageListener
name|m
parameter_list|)
block|{
name|m
operator|.
name|notifyAddedToMessageHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|listeners
operator|.
name|addLast
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
comment|/**      *  registers a MessageQueueObserver      *  It will be notified whenever a message is put into the Queue  (Parameter is Int(1)) oder      *  removed (Parameter is Int(-1))      *  @param o  the Observer      */
DECL|method|addMessageQueueObserver
specifier|public
name|void
name|addMessageQueueObserver
parameter_list|(
name|Observer
name|o
parameter_list|)
block|{
name|messageQueueObservable
operator|.
name|addObserver
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
comment|/**      *  adds a message processorObeserver      *  It will be notified when a message is consumed. In this case the parameter      *  is the filter that consumed the message      *  @param o  the Observer      */
DECL|method|addMessageProcessorObserver
specifier|public
name|void
name|addMessageProcessorObserver
parameter_list|(
name|Observer
name|o
parameter_list|)
block|{
name|messageProcessorObservable
operator|.
name|addObserver
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
comment|/**      *  insert one message into the queue      */
DECL|method|putMessage
specifier|public
name|void
name|putMessage
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
name|messageQueue
operator|.
name|insert
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|messageQueueObservable
operator|.
name|setChanged
argument_list|()
expr_stmt|;
name|messageQueueObservable
operator|.
name|notifyObservers
argument_list|(
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|queueMonitor
init|)
block|{
name|messagesWaiting
operator|=
literal|true
expr_stmt|;
name|queueMonitor
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      *  add a collection of events to the message queue      */
DECL|method|putMessages
specifier|public
name|void
name|putMessages
parameter_list|(
name|Collection
name|msgs
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|msgs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Message
name|msg
init|=
operator|(
name|Message
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|messageQueue
operator|.
name|insert
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
name|messageQueueObservable
operator|.
name|setChanged
argument_list|()
expr_stmt|;
name|messageQueueObservable
operator|.
name|notifyObservers
argument_list|(
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|queueMonitor
init|)
block|{
name|messagesWaiting
operator|=
literal|true
expr_stmt|;
name|queueMonitor
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|storeLinks
specifier|public
name|Collection
name|storeLinks
parameter_list|(
name|Collection
name|links
parameter_list|)
block|{
name|putMessages
argument_list|(
name|links
argument_list|)
expr_stmt|;
return|return
name|links
return|;
block|}
comment|/**      *  the main messageHandler-Thread.      */
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|running
condition|)
block|{
comment|//System.out.println("MessageHandler-Thread started");
synchronized|synchronized
init|(
name|queueMonitor
init|)
block|{
comment|// wait for new messages
name|workingOnMessage
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|queueMonitor
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MessageHandler: Caught InterruptedException"
argument_list|)
expr_stmt|;
block|}
name|workingOnMessage
operator|=
literal|true
expr_stmt|;
block|}
comment|//messagesWaiting = false;
name|Message
name|m
decl_stmt|;
try|try
block|{
while|while
condition|(
name|messagesWaiting
condition|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|queueMonitor
init|)
block|{
comment|// note: another thread may put a new message in the queue after
comment|// messageQueue.size() is called below, which would result in the
comment|// inconsistent state: messageWaiting would be set to false, but
comment|// the queue would actually not be empty
name|m
operator|=
operator|(
name|Message
operator|)
name|messageQueue
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|messageQueue
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|messagesWaiting
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|//System.out.println("MessageHandler:run: Entferne erstes Element");
name|messageQueueObservable
operator|.
name|setChanged
argument_list|()
expr_stmt|;
name|messageQueueObservable
operator|.
name|notifyObservers
argument_list|(
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Message processed
comment|// now distribute them. The handlers get the messages in the order
comment|// of insertion and have the right to change them
name|Iterator
name|i
init|=
name|listeners
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
name|MessageListener
name|listener
init|=
operator|(
name|MessageListener
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|m
operator|=
operator|(
name|Message
operator|)
name|listener
operator|.
name|handleRequest
argument_list|(
name|m
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
comment|// handler has consumed the message
name|messageProcessorObservable
operator|.
name|setChanged
argument_list|()
expr_stmt|;
name|messageProcessorObservable
operator|.
name|notifyObservers
argument_list|(
name|listener
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MessageHandler:run: ClassCastException(2): "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MessageHandler:run: ClassCastException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnderflowException
name|e
parameter_list|)
block|{
name|messagesWaiting
operator|=
literal|false
expr_stmt|;
comment|// System.out.println("MessageHandler: messagesWaiting = true although nothing queued!");
comment|// @FIXME: here is still a multi threading issue. I don't get it why this happens.
comment|//         does someone want to draw a petri net of this? ;-)
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MessageHandler: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getQueued
specifier|public
name|int
name|getQueued
parameter_list|()
block|{
return|return
name|messageQueue
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|openLinkStorage
specifier|public
name|void
name|openLinkStorage
parameter_list|()
block|{     }
block|}
end_class
end_unit
