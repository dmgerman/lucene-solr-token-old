begin_unit
begin_comment
comment|/**  * Title:        LARM Lanlab Retrieval Machine<p>  * Description:<p>  * Copyright:    Copyright (c)<p>  * Company:<p>  * @author  * @version 1.0  */
end_comment
begin_package
DECL|package|de.lanlab.larm.fetcher
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|fetcher
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * filter class; gets IP Adresses from host names and forwards them to  * the other parts of the application  * since URLs cache their IP addresses themselves, and HTTP 1.1 needs the  * host names to be sent to the server, this class is not used anymore  */
end_comment
begin_class
DECL|class|DNSResolver
specifier|public
class|class
name|DNSResolver
implements|implements
name|MessageListener
block|{
DECL|field|ipCache
name|HashMap
name|ipCache
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
DECL|method|DNSResolver
specifier|public
name|DNSResolver
parameter_list|()
block|{     }
DECL|method|notifyAddedToMessageHandler
specifier|public
name|void
name|notifyAddedToMessageHandler
parameter_list|(
name|MessageHandler
name|m
parameter_list|)
block|{
name|this
operator|.
name|messageHandler
operator|=
name|m
expr_stmt|;
block|}
DECL|field|messageHandler
name|MessageHandler
name|messageHandler
decl_stmt|;
DECL|method|handleRequest
specifier|public
name|Message
name|handleRequest
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|instanceof
name|URLMessage
condition|)
block|{
name|URL
name|url
init|=
operator|(
operator|(
name|URLMessage
operator|)
name|message
operator|)
operator|.
name|getUrl
argument_list|()
decl_stmt|;
name|String
name|host
init|=
name|url
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|InetAddress
name|ip
decl_stmt|;
comment|/*InetAddress ip = (InetAddress)ipCache.get(host);              if(ip == null)             {                 */
try|try
block|{
name|ip
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|host
argument_list|)
expr_stmt|;
comment|/*                     ipCache.put(host, ip);                     //System.out.println("DNSResolver: new Cache Entry \"" + host + "\" = \"" + ip.getHostAddress() + "\"");*/
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|ip
operator|=
literal|null
expr_stmt|;
return|return
literal|null
return|;
comment|//System.out.println("DNSResolver: unknown host \"" + host + "\"");
block|}
comment|/*}             else             {                //System.out.println("DNSResolver: Cache hit: " +  ip.getHostAddress());             }*/
comment|//((URLMessage)message).setIpAddress(ip);
block|}
return|return
name|message
return|;
block|}
block|}
end_class
end_unit
