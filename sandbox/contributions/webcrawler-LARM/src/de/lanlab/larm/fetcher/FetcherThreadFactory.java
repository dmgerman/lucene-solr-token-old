begin_unit
begin_comment
comment|/**  * Title:        LARM Lanlab Retrieval Machine<p>  * Description:<p>  * Copyright:    Copyright (c)<p>  * Company:<p>  * @author  * @version 1.0  */
end_comment
begin_package
DECL|package|de.lanlab.larm.fetcher
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|fetcher
package|;
end_package
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|threads
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * this factory simply creates fetcher threads. It's passed  * to the ThreadPool because the pool is creating the threads on its own  */
end_comment
begin_class
DECL|class|FetcherThreadFactory
specifier|public
class|class
name|FetcherThreadFactory
extends|extends
name|ThreadFactory
block|{
comment|//static int count = 0;
DECL|field|threadGroup
name|ThreadGroup
name|threadGroup
init|=
operator|new
name|ThreadGroup
argument_list|(
literal|"FetcherThreads"
argument_list|)
decl_stmt|;
DECL|field|hostManager
name|HostManager
name|hostManager
decl_stmt|;
DECL|method|FetcherThreadFactory
specifier|public
name|FetcherThreadFactory
parameter_list|(
name|HostManager
name|hostManager
parameter_list|)
block|{
name|this
operator|.
name|hostManager
operator|=
name|hostManager
expr_stmt|;
block|}
DECL|method|createServerThread
specifier|public
name|ServerThread
name|createServerThread
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|ServerThread
name|newThread
init|=
operator|new
name|FetcherThread
argument_list|(
name|count
argument_list|,
name|threadGroup
argument_list|,
name|hostManager
argument_list|)
decl_stmt|;
name|newThread
operator|.
name|setPriority
argument_list|(
literal|4
argument_list|)
expr_stmt|;
return|return
name|newThread
return|;
block|}
block|}
end_class
end_unit
