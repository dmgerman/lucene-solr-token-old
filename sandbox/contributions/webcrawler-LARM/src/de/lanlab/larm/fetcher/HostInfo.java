begin_unit
begin_package
DECL|package|de.lanlab.larm.fetcher
package|package
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|fetcher
package|;
end_package
begin_comment
comment|/**  * Title: LARM Lanlab Retrieval Machine Description: Copyright: Copyright (c)  * Company:  *  * @author Clemens Marschner  * @version   1.0  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|*
import|;
end_import
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|util
operator|.
name|CachingQueue
import|;
end_import
begin_import
import|import
name|de
operator|.
name|lanlab
operator|.
name|larm
operator|.
name|util
operator|.
name|Queue
import|;
end_import
begin_comment
comment|/**  * contains information about a host. If a host doesn't respond too often, it's  * excluded from the crawl.  * This class is used by the HostManager  *  * @author    Clemens Marschner  * @created   16. Februar 2002  */
end_comment
begin_class
DECL|class|HostInfo
specifier|public
class|class
name|HostInfo
block|{
DECL|field|emptyKeepOutDirectories
specifier|static
specifier|final
name|String
index|[]
name|emptyKeepOutDirectories
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
DECL|field|id
name|int
name|id
decl_stmt|;
DECL|field|healthyCount
name|int
name|healthyCount
init|=
literal|5
decl_stmt|;
comment|// five strikes, and you're out
DECL|field|isReachable
name|boolean
name|isReachable
init|=
literal|true
decl_stmt|;
DECL|field|robotTxtChecked
name|boolean
name|robotTxtChecked
init|=
literal|false
decl_stmt|;
DECL|field|disallows
name|String
index|[]
name|disallows
decl_stmt|;
comment|// robot exclusion
DECL|field|isLoadingRobotsTxt
name|boolean
name|isLoadingRobotsTxt
init|=
literal|false
decl_stmt|;
DECL|field|queuedRequests
name|Queue
name|queuedRequests
init|=
literal|null
decl_stmt|;
comment|// robot exclusion
DECL|field|hostName
name|String
name|hostName
decl_stmt|;
DECL|method|HostInfo
specifier|public
name|HostInfo
parameter_list|(
name|String
name|hostName
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|disallows
operator|=
name|HostInfo
operator|.
name|emptyKeepOutDirectories
expr_stmt|;
name|this
operator|.
name|hostName
operator|=
name|hostName
expr_stmt|;
block|}
comment|/**      * is this host reachable and responding?      */
DECL|method|isHealthy
specifier|public
name|boolean
name|isHealthy
parameter_list|()
block|{
return|return
operator|(
name|healthyCount
operator|>
literal|0
operator|)
operator|&&
name|isReachable
return|;
block|}
comment|/**      * signals that the host returned with a bad request of whatever type      */
DECL|method|badRequest
specifier|public
name|void
name|badRequest
parameter_list|()
block|{
name|healthyCount
operator|--
expr_stmt|;
block|}
DECL|method|setReachable
specifier|public
name|void
name|setReachable
parameter_list|(
name|boolean
name|reachable
parameter_list|)
block|{
name|isReachable
operator|=
name|reachable
expr_stmt|;
block|}
DECL|method|isReachable
specifier|public
name|boolean
name|isReachable
parameter_list|()
block|{
return|return
name|isReachable
return|;
block|}
DECL|method|isRobotTxtChecked
specifier|public
name|boolean
name|isRobotTxtChecked
parameter_list|()
block|{
return|return
name|robotTxtChecked
return|;
block|}
comment|/**      * must be synchronized externally      */
DECL|method|isLoadingRobotsTxt
specifier|public
name|boolean
name|isLoadingRobotsTxt
parameter_list|()
block|{
return|return
name|this
operator|.
name|isLoadingRobotsTxt
return|;
block|}
DECL|method|setLoadingRobotsTxt
specifier|public
name|void
name|setLoadingRobotsTxt
parameter_list|(
name|boolean
name|isLoading
parameter_list|)
block|{
name|this
operator|.
name|isLoadingRobotsTxt
operator|=
name|isLoading
expr_stmt|;
if|if
condition|(
name|isLoading
condition|)
block|{
name|this
operator|.
name|queuedRequests
operator|=
operator|new
name|CachingQueue
argument_list|(
literal|"HostInfo_"
operator|+
name|id
operator|+
literal|"_QueuedRequests"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setRobotsChecked
specifier|public
name|void
name|setRobotsChecked
parameter_list|(
name|boolean
name|isChecked
parameter_list|,
name|String
index|[]
name|disallows
parameter_list|)
block|{
name|this
operator|.
name|robotTxtChecked
operator|=
name|isChecked
expr_stmt|;
if|if
condition|(
name|disallows
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|disallows
operator|=
name|disallows
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|disallows
operator|=
name|emptyKeepOutDirectories
expr_stmt|;
block|}
block|}
DECL|method|isAllowed
specifier|public
specifier|synchronized
name|boolean
name|isAllowed
parameter_list|(
name|String
name|path
parameter_list|)
block|{
comment|// assume keepOutDirectories is pretty short
comment|// assert disallows != null
name|int
name|length
init|=
name|disallows
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|disallows
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
