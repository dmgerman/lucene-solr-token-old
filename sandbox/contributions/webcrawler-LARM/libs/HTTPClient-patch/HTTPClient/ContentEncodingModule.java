begin_unit
begin_comment
comment|/*  *  @(#)ContentEncodingModule.java			0.3-3 06/05/2001  *  *  This file is part of the HTTPClient package  *  Copyright (C) 1996-2001 Ronald Tschalär  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public  *  License as published by the Free Software Foundation; either  *  version 2 of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *  Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free  *  Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,  *  MA 02111-1307, USA  *  *  For questions, suggestions, bug-reports, enhancement-requests etc.  *  I may be contacted at:  *  *  ronald@innovation.ch  *  *  The HTTPClient's home page is located at:  *  *  http://www.innovation.ch/java/HTTPClient/  *  */
end_comment
begin_package
DECL|package|HTTPClient
package|package
name|HTTPClient
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|InflaterInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import
begin_comment
comment|/**  * This module handles the Content-Encoding response header. It currently  * handles the "gzip", "deflate", "compress" and "identity" tokens.  *  * @author    Ronald Tschalär  * @created   29. Dezember 2001  * @version   0.3-3 06/05/2001  */
end_comment
begin_class
DECL|class|ContentEncodingModule
specifier|public
class|class
name|ContentEncodingModule
implements|implements
name|HTTPClientModule
block|{
comment|// Methods
comment|/**      * Invoked by the HTTPClient.      *      * @param req                  Description of the Parameter      * @param resp                 Description of the Parameter      * @return                     Description of the Return Value      * @exception ModuleException  Description of the Exception      */
DECL|method|requestHandler
specifier|public
name|int
name|requestHandler
parameter_list|(
name|Request
name|req
parameter_list|,
name|Response
index|[]
name|resp
parameter_list|)
throws|throws
name|ModuleException
block|{
comment|// parse Accept-Encoding header
name|int
name|idx
decl_stmt|;
name|NVPair
index|[]
name|hdrs
init|=
name|req
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
for|for
control|(
name|idx
operator|=
literal|0
init|;
name|idx
operator|<
name|hdrs
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|hdrs
index|[
name|idx
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Accept-Encoding"
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|Vector
name|pae
decl_stmt|;
if|if
condition|(
name|idx
operator|==
name|hdrs
operator|.
name|length
condition|)
block|{
name|hdrs
operator|=
name|Util
operator|.
name|resizeArray
argument_list|(
name|hdrs
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
name|req
operator|.
name|setHeaders
argument_list|(
name|hdrs
argument_list|)
expr_stmt|;
name|pae
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|pae
operator|=
name|Util
operator|.
name|parseHeader
argument_list|(
name|hdrs
index|[
name|idx
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
throw|throw
operator|new
name|ModuleException
argument_list|(
name|pe
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// done if "*;q=1.0" present
name|HttpHeaderElement
name|all
init|=
name|Util
operator|.
name|getElement
argument_list|(
name|pae
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
if|if
condition|(
name|all
operator|!=
literal|null
condition|)
block|{
name|NVPair
index|[]
name|params
init|=
name|all
operator|.
name|getParams
argument_list|()
decl_stmt|;
for|for
control|(
name|idx
operator|=
literal|0
init|;
name|idx
operator|<
name|params
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|params
index|[
name|idx
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"q"
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|idx
operator|==
name|params
operator|.
name|length
condition|)
block|{
comment|// no qvalue, i.e. q=1.0
return|return
name|REQ_CONTINUE
return|;
block|}
if|if
condition|(
name|params
index|[
name|idx
index|]
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|||
name|params
index|[
name|idx
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|ModuleException
argument_list|(
literal|"Invalid q value for \"*\" in "
operator|+
literal|"Accept-Encoding header: "
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|Float
operator|.
name|valueOf
argument_list|(
name|params
index|[
name|idx
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|floatValue
argument_list|()
operator|>
literal|0.
condition|)
block|{
return|return
name|REQ_CONTINUE
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
throw|throw
operator|new
name|ModuleException
argument_list|(
literal|"Invalid q value for \"*\" in "
operator|+
literal|"Accept-Encoding header: "
operator|+
name|nfe
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Add gzip, deflate and compress tokens to the Accept-Encoding header
if|if
condition|(
operator|!
name|pae
operator|.
name|contains
argument_list|(
operator|new
name|HttpHeaderElement
argument_list|(
literal|"deflate"
argument_list|)
argument_list|)
condition|)
block|{
name|pae
operator|.
name|addElement
argument_list|(
operator|new
name|HttpHeaderElement
argument_list|(
literal|"deflate"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|pae
operator|.
name|contains
argument_list|(
operator|new
name|HttpHeaderElement
argument_list|(
literal|"gzip"
argument_list|)
argument_list|)
condition|)
block|{
name|pae
operator|.
name|addElement
argument_list|(
operator|new
name|HttpHeaderElement
argument_list|(
literal|"gzip"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|pae
operator|.
name|contains
argument_list|(
operator|new
name|HttpHeaderElement
argument_list|(
literal|"x-gzip"
argument_list|)
argument_list|)
condition|)
block|{
name|pae
operator|.
name|addElement
argument_list|(
operator|new
name|HttpHeaderElement
argument_list|(
literal|"x-gzip"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|pae
operator|.
name|contains
argument_list|(
operator|new
name|HttpHeaderElement
argument_list|(
literal|"compress"
argument_list|)
argument_list|)
condition|)
block|{
name|pae
operator|.
name|addElement
argument_list|(
operator|new
name|HttpHeaderElement
argument_list|(
literal|"compress"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|pae
operator|.
name|contains
argument_list|(
operator|new
name|HttpHeaderElement
argument_list|(
literal|"x-compress"
argument_list|)
argument_list|)
condition|)
block|{
name|pae
operator|.
name|addElement
argument_list|(
operator|new
name|HttpHeaderElement
argument_list|(
literal|"x-compress"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hdrs
index|[
name|idx
index|]
operator|=
operator|new
name|NVPair
argument_list|(
literal|"Accept-Encoding"
argument_list|,
name|Util
operator|.
name|assembleHeader
argument_list|(
name|pae
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|REQ_CONTINUE
return|;
block|}
comment|/**      * Invoked by the HTTPClient.      *      * @param resp  Description of the Parameter      * @param req   Description of the Parameter      */
DECL|method|responsePhase1Handler
specifier|public
name|void
name|responsePhase1Handler
parameter_list|(
name|Response
name|resp
parameter_list|,
name|RoRequest
name|req
parameter_list|)
block|{     }
comment|/**      * Invoked by the HTTPClient.      *      * @param resp  Description of the Parameter      * @param req   Description of the Parameter      * @return      Description of the Return Value      */
DECL|method|responsePhase2Handler
specifier|public
name|int
name|responsePhase2Handler
parameter_list|(
name|Response
name|resp
parameter_list|,
name|Request
name|req
parameter_list|)
block|{
return|return
name|RSP_CONTINUE
return|;
block|}
comment|/**      * Invoked by the HTTPClient.      *      * @param resp                 Description of the Parameter      * @param req                  Description of the Parameter      * @exception IOException      Description of the Exception      * @exception ModuleException  Description of the Exception      */
DECL|method|responsePhase3Handler
specifier|public
name|void
name|responsePhase3Handler
parameter_list|(
name|Response
name|resp
parameter_list|,
name|RoRequest
name|req
parameter_list|)
throws|throws
name|IOException
throws|,
name|ModuleException
block|{
name|String
name|ce
init|=
name|resp
operator|.
name|getHeader
argument_list|(
literal|"Content-Encoding"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ce
operator|==
literal|null
operator|||
name|req
operator|.
name|getMethod
argument_list|()
operator|.
name|equals
argument_list|(
literal|"HEAD"
argument_list|)
operator|||
name|resp
operator|.
name|getStatusCode
argument_list|()
operator|==
literal|206
condition|)
block|{
return|return;
block|}
name|Vector
name|pce
decl_stmt|;
try|try
block|{
name|pce
operator|=
name|Util
operator|.
name|parseHeader
argument_list|(
name|ce
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
throw|throw
operator|new
name|ModuleException
argument_list|(
name|pe
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|pce
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|String
name|encoding
init|=
operator|(
operator|(
name|HttpHeaderElement
operator|)
name|pce
operator|.
name|firstElement
argument_list|()
operator|)
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|encoding
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"gzip"
argument_list|)
operator|||
name|encoding
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"x-gzip"
argument_list|)
condition|)
block|{
name|Log
operator|.
name|write
argument_list|(
name|Log
operator|.
name|MODS
argument_list|,
literal|"CEM:   pushing gzip-input-stream"
argument_list|)
expr_stmt|;
name|resp
operator|.
name|inp_stream
operator|=
operator|new
name|GZIPInputStream
argument_list|(
name|resp
operator|.
name|inp_stream
argument_list|)
expr_stmt|;
name|pce
operator|.
name|removeElementAt
argument_list|(
name|pce
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|resp
operator|.
name|deleteHeader
argument_list|(
literal|"Content-length"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encoding
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"deflate"
argument_list|)
condition|)
block|{
name|Log
operator|.
name|write
argument_list|(
name|Log
operator|.
name|MODS
argument_list|,
literal|"CEM:   pushing inflater-input-stream"
argument_list|)
expr_stmt|;
name|resp
operator|.
name|inp_stream
operator|=
operator|new
name|InflaterInputStream
argument_list|(
name|resp
operator|.
name|inp_stream
argument_list|)
expr_stmt|;
name|pce
operator|.
name|removeElementAt
argument_list|(
name|pce
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|resp
operator|.
name|deleteHeader
argument_list|(
literal|"Content-length"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encoding
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"compress"
argument_list|)
operator|||
name|encoding
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"x-compress"
argument_list|)
condition|)
block|{
name|Log
operator|.
name|write
argument_list|(
name|Log
operator|.
name|MODS
argument_list|,
literal|"CEM:   pushing uncompress-input-stream"
argument_list|)
expr_stmt|;
name|resp
operator|.
name|inp_stream
operator|=
operator|new
name|UncompressInputStream
argument_list|(
name|resp
operator|.
name|inp_stream
argument_list|)
expr_stmt|;
name|pce
operator|.
name|removeElementAt
argument_list|(
name|pce
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|resp
operator|.
name|deleteHeader
argument_list|(
literal|"Content-length"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encoding
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"identity"
argument_list|)
condition|)
block|{
name|Log
operator|.
name|write
argument_list|(
name|Log
operator|.
name|MODS
argument_list|,
literal|"CEM:   ignoring 'identity' token"
argument_list|)
expr_stmt|;
name|pce
operator|.
name|removeElementAt
argument_list|(
name|pce
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Log
operator|.
name|write
argument_list|(
name|Log
operator|.
name|MODS
argument_list|,
literal|"CEM:   Unknown content encoding '"
operator|+
name|encoding
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pce
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|resp
operator|.
name|setHeader
argument_list|(
literal|"Content-Encoding"
argument_list|,
name|Util
operator|.
name|assembleHeader
argument_list|(
name|pce
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resp
operator|.
name|deleteHeader
argument_list|(
literal|"Content-Encoding"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Invoked by the HTTPClient.      *      * @param resp  Description of the Parameter      * @param req   Description of the Parameter      */
DECL|method|trailerHandler
specifier|public
name|void
name|trailerHandler
parameter_list|(
name|Response
name|resp
parameter_list|,
name|RoRequest
name|req
parameter_list|)
block|{     }
block|}
end_class
end_unit
