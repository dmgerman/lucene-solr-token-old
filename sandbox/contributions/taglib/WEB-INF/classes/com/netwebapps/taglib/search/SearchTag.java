begin_unit
begin_package
DECL|package|com.netwebapps.taglib.search
package|package
name|com
operator|.
name|netwebapps
operator|.
name|taglib
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|JspException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|PageContext
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|tagext
operator|.
name|BodyTagSupport
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|SimpleAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|StopAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|WhitespaceAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|de
operator|.
name|GermanAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|de
operator|.
name|WordlistLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|QueryParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|MultiFieldQueryParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Hits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_comment
comment|/*  *  * @company Network Web Application  * @url http://www.netwebapps.com  * @author Bryan LaPlante  *  */
end_comment
begin_class
DECL|class|SearchTag
specifier|public
class|class
name|SearchTag
extends|extends
name|BodyTagSupport
block|{
DECL|field|hitMap
specifier|private
name|HashMap
name|hitMap
init|=
literal|null
decl_stmt|;
DECL|field|hitArray
specifier|private
name|ArrayList
name|hitArray
init|=
literal|null
decl_stmt|;
DECL|field|searcher
specifier|private
name|IndexSearcher
name|searcher
init|=
literal|null
decl_stmt|;
DECL|field|query
specifier|private
name|Query
name|query
init|=
literal|null
decl_stmt|;
DECL|field|hits
specifier|private
name|Hits
name|hits
init|=
literal|null
decl_stmt|;
DECL|field|thispage
specifier|private
name|int
name|thispage
init|=
literal|0
decl_stmt|;
DECL|field|criteria
specifier|private
name|String
name|criteria
init|=
literal|""
decl_stmt|;
DECL|field|searchItr
specifier|private
name|Iterator
name|searchItr
init|=
literal|null
decl_stmt|;
DECL|field|fields
specifier|private
name|Enumeration
name|fields
init|=
literal|null
decl_stmt|;
DECL|field|aField
specifier|private
name|HashMap
name|aField
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
DECL|field|ROWCOUNT
specifier|private
name|int
name|ROWCOUNT
init|=
literal|0
decl_stmt|;
DECL|field|PAGECOUNT
specifier|private
name|int
name|PAGECOUNT
init|=
literal|0
decl_stmt|;
DECL|field|HITCOUNT
specifier|private
name|int
name|HITCOUNT
init|=
literal|0
decl_stmt|;
DECL|field|abort
specifier|private
name|boolean
name|abort
init|=
literal|false
decl_stmt|;
DECL|field|analyzer
specifier|private
name|Analyzer
name|analyzer
init|=
literal|null
decl_stmt|;
DECL|field|doc
specifier|private
name|Document
name|doc
init|=
literal|null
decl_stmt|;
DECL|field|idxArray
specifier|private
name|ArrayList
name|idxArray
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|field|msearcher
specifier|private
name|MultiSearcher
name|msearcher
init|=
literal|null
decl_stmt|;
DECL|field|GERMAN_ANALYZER
specifier|private
specifier|final
name|int
name|GERMAN_ANALYZER
init|=
literal|0
decl_stmt|;
DECL|field|SIMPLE_ANALYZER
specifier|private
specifier|final
name|int
name|SIMPLE_ANALYZER
init|=
literal|1
decl_stmt|;
DECL|field|STANDARD_ANALYZER
specifier|private
specifier|final
name|int
name|STANDARD_ANALYZER
init|=
literal|2
decl_stmt|;
DECL|field|STOP_ANALYZER
specifier|private
specifier|final
name|int
name|STOP_ANALYZER
init|=
literal|3
decl_stmt|;
DECL|field|WHITESPACE_ANALYZER
specifier|private
specifier|final
name|int
name|WHITESPACE_ANALYZER
init|=
literal|4
decl_stmt|;
DECL|field|startRow
specifier|public
name|int
name|startRow
init|=
literal|0
decl_stmt|;
DECL|field|maxRows
specifier|public
name|int
name|maxRows
init|=
literal|50
decl_stmt|;
DECL|field|rowCount
specifier|public
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
DECL|field|pageCount
specifier|public
name|int
name|pageCount
init|=
literal|1
decl_stmt|;
DECL|field|hitCount
specifier|public
name|int
name|hitCount
init|=
literal|0
decl_stmt|;
DECL|field|loopCount
specifier|public
name|int
name|loopCount
init|=
literal|0
decl_stmt|;
DECL|field|firstPage
specifier|public
name|String
name|firstPage
init|=
literal|""
decl_stmt|;
DECL|field|nextPage
specifier|public
name|String
name|nextPage
init|=
literal|""
decl_stmt|;
DECL|field|previousPage
specifier|public
name|String
name|previousPage
init|=
literal|""
decl_stmt|;
DECL|field|lastPage
specifier|public
name|String
name|lastPage
init|=
literal|""
decl_stmt|;
DECL|field|pageList
specifier|public
name|LinkedList
name|pageList
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
DECL|field|throwOnException
specifier|public
name|boolean
name|throwOnException
init|=
literal|false
decl_stmt|;
DECL|field|stopWords
specifier|public
name|String
index|[]
name|stopWords
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
DECL|field|fieldList
specifier|public
name|String
index|[]
name|fieldList
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
DECL|field|flagList
specifier|public
name|int
index|[]
name|flagList
init|=
operator|new
name|int
index|[
literal|0
index|]
decl_stmt|;
DECL|field|search
specifier|public
name|String
name|search
init|=
literal|"contents"
decl_stmt|;
DECL|field|analyzerType
specifier|public
name|int
name|analyzerType
init|=
name|STANDARD_ANALYZER
decl_stmt|;
DECL|method|doStartTag
specifier|public
name|int
name|doStartTag
parameter_list|()
throws|throws
name|JspException
block|{
name|rowCount
operator|=
name|startRow
operator|+
name|ROWCOUNT
operator|++
expr_stmt|;
name|loopCount
operator|++
expr_stmt|;
name|pageContext
operator|.
name|setAttribute
argument_list|(
name|getId
argument_list|()
argument_list|,
name|this
argument_list|,
name|PageContext
operator|.
name|PAGE_SCOPE
argument_list|)
expr_stmt|;
return|return
name|EVAL_BODY_AGAIN
return|;
block|}
DECL|method|doInitBody
specifier|public
name|void
name|doInitBody
parameter_list|()
throws|throws
name|JspException
block|{
name|doSearch
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|abort
condition|)
block|{
name|searchItr
operator|=
name|hitArray
operator|.
name|iterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|searchItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|aField
operator|=
operator|(
name|HashMap
operator|)
name|searchItr
operator|.
name|next
argument_list|()
expr_stmt|;
name|rowCount
operator|=
name|startRow
operator|+
name|ROWCOUNT
operator|++
expr_stmt|;
name|pageContext
operator|.
name|setAttribute
argument_list|(
name|getId
argument_list|()
argument_list|,
name|this
argument_list|,
name|PageContext
operator|.
name|PAGE_SCOPE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doAfterBody
specifier|public
name|int
name|doAfterBody
parameter_list|()
throws|throws
name|JspException
block|{
if|if
condition|(
name|abort
condition|)
block|{
name|hitCount
operator|=
literal|0
expr_stmt|;
name|loopCount
operator|=
literal|0
expr_stmt|;
name|rowCount
operator|=
name|startRow
operator|+
name|ROWCOUNT
expr_stmt|;
name|pageContext
operator|.
name|setAttribute
argument_list|(
name|getId
argument_list|()
argument_list|,
name|this
argument_list|,
name|PageContext
operator|.
name|PAGE_SCOPE
argument_list|)
expr_stmt|;
return|return
name|SKIP_BODY
return|;
block|}
try|try
block|{
name|getBodyContent
argument_list|()
operator|.
name|writeOut
argument_list|(
name|getPreviousOut
argument_list|()
argument_list|)
expr_stmt|;
name|getBodyContent
argument_list|()
operator|.
name|clearBody
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|searchItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|aField
operator|=
operator|(
name|HashMap
operator|)
name|searchItr
operator|.
name|next
argument_list|()
expr_stmt|;
name|rowCount
operator|=
name|startRow
operator|+
name|ROWCOUNT
operator|++
expr_stmt|;
name|loopCount
operator|++
expr_stmt|;
name|pageContext
operator|.
name|setAttribute
argument_list|(
name|getId
argument_list|()
argument_list|,
name|this
argument_list|,
name|PageContext
operator|.
name|PAGE_SCOPE
argument_list|)
expr_stmt|;
return|return
name|EVAL_BODY_AGAIN
return|;
block|}
return|return
name|SKIP_BODY
return|;
block|}
DECL|method|doEndTag
specifier|public
name|int
name|doEndTag
parameter_list|()
throws|throws
name|JspException
block|{
if|if
condition|(
name|abort
condition|)
block|{
name|hitCount
operator|=
literal|0
expr_stmt|;
name|pageContext
operator|.
name|setAttribute
argument_list|(
name|getId
argument_list|()
argument_list|,
name|this
argument_list|,
name|PageContext
operator|.
name|PAGE_SCOPE
argument_list|)
expr_stmt|;
return|return
name|EVAL_PAGE
return|;
block|}
try|try
block|{
name|HttpServletRequest
name|req
init|=
operator|(
name|HttpServletRequest
operator|)
name|pageContext
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|String
name|relativePath
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
decl_stmt|;
name|firstPage
operator|=
name|relativePath
operator|+
literal|"?startRow=0&maxRows="
operator|+
name|maxRows
expr_stmt|;
name|nextPage
operator|=
name|relativePath
operator|+
literal|"?startRow="
operator|+
operator|(
operator|(
name|startRow
operator|+
name|maxRows
operator|<=
name|HITCOUNT
operator|)
condition|?
name|startRow
operator|+
name|maxRows
else|:
name|startRow
operator|)
operator|+
literal|"&maxRows="
operator|+
name|maxRows
expr_stmt|;
name|previousPage
operator|=
name|relativePath
operator|+
literal|"?startRow="
operator|+
operator|(
operator|(
name|startRow
operator|-
name|maxRows
operator|>=
literal|0
operator|)
condition|?
name|startRow
operator|-
name|maxRows
else|:
literal|0
operator|)
operator|+
literal|"&maxRows="
operator|+
name|maxRows
expr_stmt|;
name|lastPage
operator|=
name|relativePath
operator|+
literal|"?startRow="
operator|+
operator|(
operator|(
operator|(
name|HITCOUNT
operator|-
name|maxRows
operator|)
operator|>=
literal|0
operator|)
condition|?
name|HITCOUNT
operator|-
name|maxRows
else|:
literal|0
operator|)
operator|+
literal|"&maxRows="
operator|+
name|maxRows
expr_stmt|;
if|if
condition|(
name|HITCOUNT
operator|>
literal|0
condition|)
block|{
name|pageList
operator|=
operator|new
name|LinkedList
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|HITCOUNT
operator|/
name|maxRows
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|String
name|tempURL
init|=
name|relativePath
operator|+
literal|"?startRow="
operator|+
operator|(
name|maxRows
operator|*
name|i
operator|)
operator|+
literal|"&maxRows="
operator|+
name|maxRows
decl_stmt|;
name|pageList
operator|.
name|add
argument_list|(
name|tempURL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"A problem occured durring doEndTag: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|pageContext
operator|.
name|setAttribute
argument_list|(
name|getId
argument_list|()
argument_list|,
name|this
argument_list|,
name|PageContext
operator|.
name|PAGE_SCOPE
argument_list|)
expr_stmt|;
return|return
name|EVAL_PAGE
return|;
block|}
DECL|method|release
specifier|public
name|void
name|release
parameter_list|()
block|{
name|hitMap
operator|=
literal|null
expr_stmt|;
name|hitArray
operator|=
literal|null
expr_stmt|;
name|searcher
operator|=
literal|null
expr_stmt|;
name|query
operator|=
literal|null
expr_stmt|;
name|hits
operator|=
literal|null
expr_stmt|;
name|thispage
operator|=
literal|0
expr_stmt|;
name|criteria
operator|=
literal|""
expr_stmt|;
name|searchItr
operator|=
literal|null
expr_stmt|;
name|fields
operator|=
literal|null
expr_stmt|;
name|aField
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|ROWCOUNT
operator|=
literal|0
expr_stmt|;
name|PAGECOUNT
operator|=
literal|1
expr_stmt|;
name|HITCOUNT
operator|=
literal|0
expr_stmt|;
name|abort
operator|=
literal|false
expr_stmt|;
name|analyzer
operator|=
literal|null
expr_stmt|;
name|doc
operator|=
literal|null
expr_stmt|;
name|idxArray
operator|=
literal|null
expr_stmt|;
name|msearcher
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getField
specifier|public
name|String
name|getField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|aField
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|aField
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|aField
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|return
literal|""
return|;
block|}
DECL|method|getFields
specifier|public
name|Set
name|getFields
parameter_list|()
block|{
return|return
name|aField
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|addCollection
specifier|public
name|void
name|addCollection
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JspException
block|{
try|try
block|{
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|IndexReader
operator|.
name|open
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|idxArray
operator|.
name|add
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"Error occured while opening "
operator|+
name|name
operator|+
literal|" ]: "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|doSearch
specifier|public
name|void
name|doSearch
parameter_list|()
throws|throws
name|JspException
block|{
try|try
block|{
if|if
condition|(
name|idxArray
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|IndexSearcher
index|[]
name|idxToArray
init|=
operator|new
name|IndexSearcher
index|[
name|idxArray
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|Iterator
name|idxIter
init|=
name|idxArray
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|arrayCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|idxIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|idxToArray
index|[
name|arrayCount
operator|++
index|]
operator|=
operator|(
name|IndexSearcher
operator|)
name|idxIter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|msearcher
operator|=
operator|new
name|MultiSearcher
argument_list|(
name|idxToArray
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"No collection has been specified"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"IndexSearcher(IndexReader.open(collection)): "
operator|+
name|e
argument_list|)
throw|;
block|}
name|abort
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|abort
condition|)
block|{
comment|// choosing the type of analyzer to use in this search
switch|switch
condition|(
name|analyzerType
condition|)
block|{
case|case
name|GERMAN_ANALYZER
case|:
if|if
condition|(
name|stopWords
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|analyzer
operator|=
operator|new
name|GermanAnalyzer
argument_list|(
name|stopWords
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"In order to use a GermanAnalyzer you must provide a list of stop words"
argument_list|)
throw|;
block|}
name|abort
operator|=
literal|true
expr_stmt|;
block|}
break|break;
case|case
name|SIMPLE_ANALYZER
case|:
name|analyzer
operator|=
operator|new
name|SimpleAnalyzer
argument_list|()
expr_stmt|;
break|break;
case|case
name|STANDARD_ANALYZER
case|:
if|if
condition|(
name|stopWords
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|analyzer
operator|=
operator|new
name|StandardAnalyzer
argument_list|(
name|stopWords
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|analyzer
operator|=
operator|new
name|StandardAnalyzer
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|STOP_ANALYZER
case|:
if|if
condition|(
name|stopWords
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|analyzer
operator|=
operator|new
name|StopAnalyzer
argument_list|(
name|stopWords
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|analyzer
operator|=
operator|new
name|StopAnalyzer
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|WHITESPACE_ANALYZER
case|:
name|analyzer
operator|=
operator|new
name|WhitespaceAnalyzer
argument_list|()
expr_stmt|;
break|break;
default|default :
if|if
condition|(
name|stopWords
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|analyzer
operator|=
operator|new
name|StandardAnalyzer
argument_list|(
name|stopWords
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|analyzer
operator|=
operator|new
name|StandardAnalyzer
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
try|try
block|{
comment|// choose a query parser
if|if
condition|(
name|fieldList
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|flagList
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|query
operator|=
name|MultiFieldQueryParser
operator|.
name|parse
argument_list|(
name|criteria
argument_list|,
name|fieldList
argument_list|,
name|flagList
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|MultiFieldQueryParser
operator|.
name|parse
argument_list|(
name|criteria
argument_list|,
name|fieldList
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|query
operator|=
name|QueryParser
operator|.
name|parse
argument_list|(
name|criteria
argument_list|,
name|search
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"If using fieldList and or flagList check to see you have the same number of items in each: "
operator|+
name|e
argument_list|)
throw|;
block|}
name|abort
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|abort
condition|)
block|{
try|try
block|{
name|hits
operator|=
name|msearcher
operator|.
name|search
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"msearcher.search(query): "
operator|+
name|e
argument_list|)
throw|;
block|}
name|abort
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|abort
condition|)
block|{
name|hitCount
operator|=
name|hits
operator|.
name|length
argument_list|()
expr_stmt|;
name|HITCOUNT
operator|=
name|hits
operator|.
name|length
argument_list|()
expr_stmt|;
name|PAGECOUNT
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
operator|(
name|double
operator|)
name|startRow
operator|)
operator|/
name|maxRows
argument_list|)
expr_stmt|;
name|pageCount
operator|=
name|PAGECOUNT
expr_stmt|;
name|thispage
operator|=
name|maxRows
expr_stmt|;
if|if
condition|(
operator|(
name|startRow
operator|+
name|maxRows
operator|)
operator|>
name|hits
operator|.
name|length
argument_list|()
condition|)
block|{
name|thispage
operator|=
name|hits
operator|.
name|length
argument_list|()
operator|-
name|startRow
expr_stmt|;
block|}
name|hitArray
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startRow
init|;
name|i
operator|<
operator|(
name|thispage
operator|+
name|startRow
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|hitMap
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
try|try
block|{
name|doc
operator|=
name|hits
operator|.
name|doc
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"hits.doc(i) : "
operator|+
name|e
argument_list|)
throw|;
block|}
name|abort
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|abort
condition|)
block|{
try|try
block|{
name|hitMap
operator|.
name|put
argument_list|(
literal|"score"
argument_list|,
operator|new
name|Float
argument_list|(
name|hits
operator|.
name|score
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"hitMap.put(score,new Float(hits.score(i)).toString()); : "
operator|+
name|e
argument_list|)
throw|;
block|}
name|abort
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|abort
condition|)
block|{
name|fields
operator|=
name|doc
operator|.
name|fields
argument_list|()
expr_stmt|;
while|while
condition|(
name|fields
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|Field
name|field
init|=
operator|(
name|Field
operator|)
name|fields
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|fieldName
init|=
name|field
operator|.
name|name
argument_list|()
decl_stmt|;
name|hitMap
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|doc
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hitArray
operator|.
name|add
argument_list|(
name|hitMap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|msearcher
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|msearcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"A problem occured trying to close the searcher : "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|method|setCriteria
specifier|public
name|void
name|setCriteria
parameter_list|(
name|String
name|criteria
parameter_list|)
block|{
name|this
operator|.
name|criteria
operator|=
name|criteria
expr_stmt|;
block|}
DECL|method|setStartRow
specifier|public
name|void
name|setStartRow
parameter_list|(
name|String
name|startRow
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|startRow
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|this
operator|.
name|startRow
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|method|setStartRow
specifier|public
name|void
name|setStartRow
parameter_list|(
name|int
name|startRow
parameter_list|)
block|{
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
block|}
DECL|method|setMaxRows
specifier|public
name|void
name|setMaxRows
parameter_list|(
name|String
name|maxRows
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|maxRows
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|maxRows
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|this
operator|.
name|maxRows
operator|=
literal|10
expr_stmt|;
block|}
block|}
DECL|method|setMaxRows
specifier|public
name|void
name|setMaxRows
parameter_list|(
name|int
name|maxRows
parameter_list|)
block|{
name|this
operator|.
name|maxRows
operator|=
name|maxRows
expr_stmt|;
block|}
DECL|method|setCollection
specifier|public
name|void
name|setCollection
parameter_list|(
name|String
name|collection
parameter_list|)
throws|throws
name|JspException
block|{
name|idxArray
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|String
index|[]
name|collectionArray
init|=
name|collection
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|collectionArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|addCollection
argument_list|(
name|collectionArray
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setThrowOnException
specifier|public
name|void
name|setThrowOnException
parameter_list|(
name|String
name|bool
parameter_list|)
block|{
name|this
operator|.
name|throwOnException
operator|=
operator|new
name|Boolean
argument_list|(
name|bool
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
DECL|method|setThrowOnException
specifier|public
name|void
name|setThrowOnException
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|throwOnException
operator|=
name|b
expr_stmt|;
block|}
DECL|method|getStartRow
specifier|public
name|int
name|getStartRow
parameter_list|()
block|{
return|return
name|startRow
return|;
block|}
DECL|method|getMaxRows
specifier|public
name|int
name|getMaxRows
parameter_list|()
block|{
return|return
name|maxRows
return|;
block|}
DECL|method|setStopWords
specifier|public
name|void
name|setStopWords
parameter_list|(
name|String
name|swords
parameter_list|)
throws|throws
name|JspException
block|{
name|Hashtable
name|wordTable
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|String
index|[]
name|temp
init|=
operator|new
name|String
index|[
name|wordTable
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|swords
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|words
init|=
name|swords
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|words
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|new
name|File
argument_list|(
name|words
index|[
name|i
index|]
argument_list|)
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|wordTable
operator|.
name|putAll
argument_list|(
name|WordlistLoader
operator|.
name|getWordtable
argument_list|(
name|words
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wordTable
operator|.
name|put
argument_list|(
name|words
index|[
name|i
index|]
argument_list|,
name|words
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|temp
operator|=
operator|new
name|String
index|[
name|wordTable
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|wordTable
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Iterator
name|wtIter
init|=
name|wordTable
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|wtIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|temp
index|[
name|count
operator|++
index|]
operator|=
operator|(
name|String
operator|)
name|wtIter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|stopWords
operator|=
name|temp
expr_stmt|;
block|}
comment|//	public void setStopWords(String[] swords) throws JspException{
comment|//		stopWords = swords;
comment|//	}
DECL|method|setFlagList
specifier|public
name|void
name|setFlagList
parameter_list|(
name|String
name|fg
parameter_list|)
block|{
name|int
index|[]
name|list
init|=
operator|new
name|int
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|fg
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|ssplit
init|=
name|fg
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Integer
name|fsplit
init|=
operator|new
name|Integer
argument_list|(
name|fg
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|.
name|length
argument_list|)
decl_stmt|;
name|list
operator|=
operator|new
name|int
index|[
name|fsplit
operator|.
name|intValue
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fsplit
operator|.
name|intValue
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|ssplit
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"NORMAL"
argument_list|)
condition|)
block|{
name|list
index|[
name|i
index|]
operator|=
name|MultiFieldQueryParser
operator|.
name|NORMAL_FIELD
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ssplit
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"PROHIBITED"
argument_list|)
condition|)
block|{
name|list
index|[
name|i
index|]
operator|=
name|MultiFieldQueryParser
operator|.
name|PROHIBITED_FIELD
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ssplit
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"REQUIRED"
argument_list|)
condition|)
block|{
name|list
index|[
name|i
index|]
operator|=
name|MultiFieldQueryParser
operator|.
name|REQUIRED_FIELD
expr_stmt|;
block|}
block|}
block|}
name|flagList
operator|=
name|list
expr_stmt|;
block|}
DECL|method|setFieldList
specifier|public
name|void
name|setFieldList
parameter_list|(
name|String
name|fl
parameter_list|)
block|{
if|if
condition|(
name|fl
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|fieldList
operator|=
name|fl
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setFieldList
specifier|public
name|void
name|setFieldList
parameter_list|(
name|String
index|[]
name|fl
parameter_list|)
block|{
name|fieldList
operator|=
name|fl
expr_stmt|;
block|}
DECL|method|setSearch
specifier|public
name|void
name|setSearch
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|search
operator|=
name|string
expr_stmt|;
block|}
comment|/** 	 * @param atype    * @todo this is crying for constants, not string comparisons 	 */
DECL|method|setAnalyzerType
specifier|public
name|void
name|setAnalyzerType
parameter_list|(
name|String
name|atype
parameter_list|)
block|{
if|if
condition|(
name|atype
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"GERMAN_ALYZER"
argument_list|)
condition|)
block|{
name|analyzerType
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|atype
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"SIMPLE_ANALYZER"
argument_list|)
condition|)
block|{
name|analyzerType
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|atype
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"STANDARD_ANALYZER"
argument_list|)
condition|)
block|{
name|analyzerType
operator|=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|atype
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"STOP_ANALYZER"
argument_list|)
condition|)
block|{
name|analyzerType
operator|=
literal|3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|atype
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"WHITESPACE_ANALYZER"
argument_list|)
condition|)
block|{
name|analyzerType
operator|=
literal|4
expr_stmt|;
block|}
else|else
block|{
name|analyzerType
operator|=
literal|2
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
