begin_unit
begin_comment
comment|/*  * Created on May 23, 2003  *  */
end_comment
begin_package
DECL|package|com.netwebapps.taglib.search
package|package
name|com
operator|.
name|netwebapps
operator|.
name|taglib
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|JspException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|PageContext
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|tagext
operator|.
name|TagSupport
import|;
end_import
begin_comment
comment|/**  * @company Network Web Application  * @url http://www.netwebapps.com  * @author Bryan LaPlante   */
end_comment
begin_class
DECL|class|FieldTag
specifier|public
class|class
name|FieldTag
extends|extends
name|TagSupport
block|{
DECL|field|name
specifier|public
name|String
name|name
init|=
literal|""
decl_stmt|;
DECL|field|throwOnException
specifier|public
name|boolean
name|throwOnException
init|=
literal|false
decl_stmt|;
DECL|field|value
specifier|public
name|String
name|value
init|=
literal|""
decl_stmt|;
DECL|field|abort
specifier|private
name|boolean
name|abort
init|=
literal|false
decl_stmt|;
comment|/* (non-Javadoc) 	 * @see javax.servlet.jsp.tagext.BodyTagSupport#doEndTag() 	 */
DECL|method|doStartTag
specifier|public
name|int
name|doStartTag
parameter_list|()
throws|throws
name|JspException
block|{
name|Object
name|parent
init|=
name|findAncestorWithClass
argument_list|(
name|this
argument_list|,
name|com
operator|.
name|netwebapps
operator|.
name|taglib
operator|.
name|search
operator|.
name|SearchTag
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|Method
name|getFieldMethod
init|=
name|parent
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getField"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"java.lang.String"
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|value
operator|=
name|getFieldMethod
operator|.
name|invoke
argument_list|(
name|parent
argument_list|,
operator|new
name|String
index|[]
block|{
name|name
block|}
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"A security violation occurred: "
operator|+
name|e
argument_list|)
throw|;
block|}
name|abort
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"Unable to declair the getField method : "
operator|+
name|e
argument_list|)
throw|;
block|}
name|abort
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"ClassNotFoundException: "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"Access denied: "
operator|+
name|e
argument_list|)
throw|;
block|}
name|abort
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"This tag must be nested in a Search tag in order to work: "
operator|+
name|e
argument_list|)
throw|;
block|}
name|abort
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"This tag must be nested in a Search tag in order to work: "
operator|+
name|e
argument_list|)
throw|;
block|}
name|abort
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|abort
condition|)
block|{
name|pageContext
operator|.
name|setAttribute
argument_list|(
name|getId
argument_list|()
argument_list|,
name|this
argument_list|,
name|PageContext
operator|.
name|PAGE_SCOPE
argument_list|)
expr_stmt|;
return|return
name|SKIP_BODY
return|;
block|}
name|pageContext
operator|.
name|setAttribute
argument_list|(
name|getId
argument_list|()
argument_list|,
name|this
argument_list|,
name|PageContext
operator|.
name|PAGE_SCOPE
argument_list|)
expr_stmt|;
return|return
name|EVAL_BODY_INCLUDE
return|;
block|}
DECL|method|release
specifier|public
name|void
name|release
parameter_list|()
block|{
name|name
operator|=
literal|""
expr_stmt|;
name|throwOnException
operator|=
literal|false
expr_stmt|;
name|value
operator|=
literal|""
expr_stmt|;
block|}
comment|/** 	 * @param string 	 */
DECL|method|setName
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|name
operator|=
name|string
expr_stmt|;
block|}
comment|/** 	 * @param b 	 */
DECL|method|setThrowOnException
specifier|public
name|void
name|setThrowOnException
parameter_list|(
name|String
name|b
parameter_list|)
block|{
name|throwOnException
operator|=
operator|new
name|Boolean
argument_list|(
name|b
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
DECL|method|setThrowOnException
specifier|public
name|void
name|setThrowOnException
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|throwOnException
operator|=
name|b
expr_stmt|;
block|}
block|}
end_class
end_unit
