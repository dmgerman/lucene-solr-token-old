begin_unit
begin_comment
comment|/*  * Created on May 24, 2003  */
end_comment
begin_package
DECL|package|com.netwebapps.taglib.search
package|package
name|com
operator|.
name|netwebapps
operator|.
name|taglib
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|JspException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|PageContext
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|tagext
operator|.
name|BodyTagSupport
import|;
end_import
begin_comment
comment|/**  * @company Network Web Application  * @url http://www.netwebapps.com  * @author Bryan LaPlante   */
end_comment
begin_class
DECL|class|ColumnTag
specifier|public
class|class
name|ColumnTag
extends|extends
name|BodyTagSupport
block|{
DECL|field|parent
specifier|private
name|Object
name|parent
init|=
literal|null
decl_stmt|;
DECL|field|fieldSet
specifier|private
name|Set
name|fieldSet
init|=
literal|null
decl_stmt|;
DECL|field|fieldArray
specifier|private
name|ArrayList
name|fieldArray
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|field|fieldNames
specifier|private
name|Iterator
name|fieldNames
init|=
literal|null
decl_stmt|;
DECL|field|nextField
specifier|private
name|Iterator
name|nextField
init|=
literal|null
decl_stmt|;
DECL|field|getFieldsMethod
specifier|private
name|Method
name|getFieldsMethod
init|=
literal|null
decl_stmt|;
DECL|field|abort
specifier|private
name|boolean
name|abort
init|=
literal|false
decl_stmt|;
DECL|field|throwOnException
specifier|public
name|boolean
name|throwOnException
init|=
literal|false
decl_stmt|;
DECL|field|columnName
specifier|public
name|String
name|columnName
init|=
literal|""
decl_stmt|;
DECL|field|runOnce
specifier|public
name|boolean
name|runOnce
init|=
literal|false
decl_stmt|;
DECL|field|columnCount
specifier|public
name|int
name|columnCount
init|=
literal|0
decl_stmt|;
DECL|method|doStartTag
specifier|public
name|int
name|doStartTag
parameter_list|()
throws|throws
name|JspException
block|{
name|parent
operator|=
name|findAncestorWithClass
argument_list|(
name|this
argument_list|,
name|com
operator|.
name|netwebapps
operator|.
name|taglib
operator|.
name|search
operator|.
name|SearchTag
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|runOnce
operator|&&
name|getLoopCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|abort
operator|=
literal|true
expr_stmt|;
return|return
name|SKIP_BODY
return|;
block|}
try|try
block|{
name|getFieldsMethod
operator|=
operator|(
name|Method
operator|)
name|parent
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getFields"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fieldSet
operator|=
operator|(
name|Set
operator|)
name|getFieldsMethod
operator|.
name|invoke
argument_list|(
name|parent
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"A security violation occurred: "
operator|+
name|e
argument_list|)
throw|;
block|}
name|abort
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"IllegalArgumentException: "
operator|+
name|e
argument_list|)
throw|;
block|}
name|abort
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"Unable to declair the getField method : "
operator|+
name|e
argument_list|)
throw|;
block|}
name|abort
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"Access denied: "
operator|+
name|e
argument_list|)
throw|;
block|}
name|abort
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"This tag must be nested in a Search tag in order to work: "
operator|+
name|e
argument_list|)
throw|;
block|}
name|abort
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|abort
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|abort
condition|)
block|{
return|return
name|SKIP_BODY
return|;
block|}
if|if
condition|(
name|fieldSet
operator|!=
literal|null
condition|)
block|{
name|nextField
operator|=
name|fieldSet
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|nextField
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|fieldArray
operator|.
name|add
argument_list|(
name|nextField
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|columnCount
operator|=
name|fieldSet
operator|.
name|size
argument_list|()
expr_stmt|;
name|pageContext
operator|.
name|setAttribute
argument_list|(
name|getId
argument_list|()
argument_list|,
name|this
argument_list|,
name|PageContext
operator|.
name|PAGE_SCOPE
argument_list|)
expr_stmt|;
return|return
name|EVAL_BODY_AGAIN
return|;
block|}
return|return
name|SKIP_BODY
return|;
block|}
DECL|method|doInitBody
specifier|public
name|void
name|doInitBody
parameter_list|()
throws|throws
name|JspException
block|{
if|if
condition|(
operator|!
name|abort
condition|)
block|{
if|if
condition|(
name|fieldArray
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|fieldNames
operator|=
name|fieldArray
operator|.
name|iterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|fieldNames
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|columnName
operator|=
operator|(
name|String
operator|)
name|fieldNames
operator|.
name|next
argument_list|()
expr_stmt|;
name|columnCount
operator|=
name|fieldSet
operator|.
name|size
argument_list|()
expr_stmt|;
name|pageContext
operator|.
name|setAttribute
argument_list|(
name|getId
argument_list|()
argument_list|,
name|this
argument_list|,
name|PageContext
operator|.
name|PAGE_SCOPE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|doAfterBody
specifier|public
name|int
name|doAfterBody
parameter_list|()
throws|throws
name|JspException
block|{
if|if
condition|(
name|abort
condition|)
block|{
return|return
name|SKIP_BODY
return|;
block|}
name|columnName
operator|=
literal|""
expr_stmt|;
try|try
block|{
name|getBodyContent
argument_list|()
operator|.
name|writeOut
argument_list|(
name|getPreviousOut
argument_list|()
argument_list|)
expr_stmt|;
name|getBodyContent
argument_list|()
operator|.
name|clearBody
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|fieldNames
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fieldNames
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|columnName
operator|=
operator|(
name|String
operator|)
name|fieldNames
operator|.
name|next
argument_list|()
expr_stmt|;
name|columnCount
operator|=
name|fieldSet
operator|.
name|size
argument_list|()
expr_stmt|;
name|pageContext
operator|.
name|setAttribute
argument_list|(
name|getId
argument_list|()
argument_list|,
name|this
argument_list|,
name|PageContext
operator|.
name|PAGE_SCOPE
argument_list|)
expr_stmt|;
return|return
name|EVAL_BODY_AGAIN
return|;
block|}
block|}
return|return
name|SKIP_BODY
return|;
block|}
DECL|method|release
specifier|public
name|void
name|release
parameter_list|()
block|{
name|parent
operator|=
literal|null
expr_stmt|;
name|fieldSet
operator|=
literal|null
expr_stmt|;
name|fieldArray
operator|=
literal|null
expr_stmt|;
name|fieldNames
operator|=
literal|null
expr_stmt|;
name|nextField
operator|=
literal|null
expr_stmt|;
name|getFieldsMethod
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getLoopCount
specifier|private
name|int
name|getLoopCount
parameter_list|()
throws|throws
name|JspException
block|{
name|Field
name|getLoopCountMember
init|=
literal|null
decl_stmt|;
name|int
name|rc
init|=
literal|0
decl_stmt|;
try|try
block|{
name|getLoopCountMember
operator|=
operator|(
name|Field
operator|)
name|parent
operator|.
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
literal|"loopCount"
argument_list|)
expr_stmt|;
name|rc
operator|=
operator|new
name|Integer
argument_list|(
name|getLoopCountMember
operator|.
name|get
argument_list|(
name|parent
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"A security violation occurred: "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"Unable to find the loopCount field : "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"Access denied: "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwOnException
condition|)
block|{
throw|throw
operator|new
name|JspException
argument_list|(
literal|"Bad argument: "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|rc
return|;
block|}
comment|/** 	 * @param string 	 */
DECL|method|setcolumnName
specifier|public
name|void
name|setcolumnName
parameter_list|(
name|String
name|columnName
parameter_list|)
block|{
name|this
operator|.
name|columnName
operator|=
name|columnName
expr_stmt|;
block|}
comment|/** 	 * @param b 	 */
DECL|method|setThrowOnException
specifier|public
name|void
name|setThrowOnException
parameter_list|(
name|String
name|b
parameter_list|)
block|{
name|throwOnException
operator|=
operator|new
name|Boolean
argument_list|(
name|b
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
DECL|method|setThrowOnException
specifier|public
name|void
name|setThrowOnException
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|throwOnException
operator|=
name|b
expr_stmt|;
block|}
DECL|method|setRunOnce
specifier|public
name|void
name|setRunOnce
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|runOnce
operator|=
name|b
expr_stmt|;
block|}
DECL|method|setRunOnce
specifier|public
name|void
name|setRunOnce
parameter_list|(
name|String
name|b
parameter_list|)
block|{
name|runOnce
operator|=
operator|new
name|Boolean
argument_list|(
name|b
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
