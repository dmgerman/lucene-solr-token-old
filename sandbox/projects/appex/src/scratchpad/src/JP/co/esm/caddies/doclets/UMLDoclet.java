begin_unit
begin_comment
comment|/*    Copyright (C) 1999    Eiwa System Management, Inc.     Permission to use, copy, modify, distribute and sell this software    and its documentation for any purpose is hereby granted without fee,    provided that the above copyright notice appear in all copies and    that both that copyright notice and this permission notice appear    in supporting documentation. Eiwa System Management,Inc.    makes no representations about the suitability of this software for any    purpose.  It is provided "AS IS" with NO WARRANTY. */
end_comment
begin_package
DECL|package|JP.co.esm.caddies.doclets
package|package
name|JP
operator|.
name|co
operator|.
name|esm
operator|.
name|caddies
operator|.
name|doclets
package|;
end_package
begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|javadoc
operator|.
name|*
import|;
end_import
begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|javadoc
operator|.
name|*
import|;
end_import
begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|doclets
operator|.
name|*
import|;
end_import
begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|doclets
operator|.
name|standard
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_comment
comment|/**   * This is Doclet generates UML class figure HTML   *    * @author Taisuke Fukuno   * @author Nicola Ken Barozzi nicolaken@apache.org   */
end_comment
begin_class
DECL|class|UMLDoclet
specifier|public
class|class
name|UMLDoclet
block|{
DECL|field|PREFIX
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"uml-"
decl_stmt|;
DECL|field|configuration
specifier|static
name|ConfigurationUMLDoclet
name|configuration
decl_stmt|;
DECL|method|configuration
specifier|static
name|ConfigurationUMLDoclet
name|configuration
parameter_list|()
block|{
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
name|configuration
operator|=
operator|new
name|ConfigurationUMLDoclet
argument_list|()
expr_stmt|;
return|return
name|configuration
return|;
block|}
DECL|method|optionLength
specifier|public
specifier|static
name|int
name|optionLength
parameter_list|(
name|String
name|option
parameter_list|)
block|{
return|return
name|configuration
argument_list|()
operator|.
name|optionLength
argument_list|(
name|option
argument_list|)
return|;
block|}
DECL|method|validOptions
specifier|public
specifier|static
name|boolean
name|validOptions
parameter_list|(
name|String
name|options
index|[]
index|[]
parameter_list|,
name|DocErrorReporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|configuration
argument_list|()
operator|.
name|specificDocletValidOptions
argument_list|(
name|options
argument_list|,
name|reporter
argument_list|)
return|;
block|}
DECL|method|start
specifier|public
specifier|static
name|boolean
name|start
parameter_list|(
name|RootDoc
name|root
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|configuration
argument_list|()
operator|.
name|setOptions
argument_list|(
name|root
argument_list|)
expr_stmt|;
operator|new
name|UMLDoclet
argument_list|()
operator|.
name|startGeneration
argument_list|(
name|root
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|DocletAbortException
name|exc
parameter_list|)
block|{         }
return|return
literal|false
return|;
block|}
DECL|method|startGeneration
specifier|public
name|void
name|startGeneration
parameter_list|(
name|RootDoc
name|root
parameter_list|)
throws|throws
name|DocletAbortException
block|{
name|ClassDoc
index|[]
name|clss
init|=
name|root
operator|.
name|classes
argument_list|()
decl_stmt|;
if|if
condition|(
name|clss
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|root
operator|.
name|printNotice
argument_list|(
name|configuration
argument_list|()
operator|.
name|message
operator|.
name|getString
argument_list|(
literal|"doclet.No_Public_Classes_To_Document"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|String
name|dest
init|=
name|configuration
argument_list|()
operator|.
name|destdirname
decl_stmt|;
if|if
condition|(
name|dest
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|dest
operator|+=
name|File
operator|.
name|separatorChar
expr_stmt|;
name|String
name|imgpath
init|=
name|dest
operator|+
literal|"images"
operator|+
name|File
operator|.
name|separator
decl_stmt|;
name|makeContainer
argument_list|(
name|imgpath
argument_list|)
expr_stmt|;
name|writeToFile
argument_list|(
name|EXT_IMAGE
argument_list|,
name|imgpath
operator|+
literal|"ext.gif"
argument_list|)
expr_stmt|;
name|writeToFile
argument_list|(
name|INNER_IMAGE
argument_list|,
name|imgpath
operator|+
literal|"inner.gif"
argument_list|)
expr_stmt|;
name|writeToFile
argument_list|(
name|OUTER_IMAGE
argument_list|,
name|imgpath
operator|+
literal|"outer.gif"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clss
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|writeClass
argument_list|(
name|clss
index|[
name|i
index|]
argument_list|,
name|clss
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|//throw new DocletAbortException(e.getMessage());
block|}
block|}
DECL|method|writeClass
name|void
name|writeClass
parameter_list|(
name|ClassDoc
name|thiscls
parameter_list|,
name|ClassDoc
index|[]
name|clss
parameter_list|)
throws|throws
name|IOException
block|{
comment|// inners
name|ClassDoc
index|[]
name|ins
init|=
name|thiscls
operator|.
name|innerClasses
argument_list|()
decl_stmt|;
name|List
name|inners
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ins
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|inners
operator|.
name|add
argument_list|(
name|ins
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// supers
name|List
name|supers
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|ClassDoc
name|supercls
init|=
name|thiscls
operator|.
name|superclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|supercls
operator|!=
literal|null
condition|)
name|supers
operator|.
name|add
argument_list|(
name|supercls
argument_list|)
expr_stmt|;
name|ClassDoc
index|[]
name|ifaces
init|=
name|thiscls
operator|.
name|interfaces
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ifaces
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|supers
operator|.
name|add
argument_list|(
name|ifaces
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// subs
name|List
name|subs
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|thiscls
operator|.
name|isInterface
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|clss
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|ClassDoc
index|[]
name|ifa
init|=
name|clss
index|[
name|j
index|]
operator|.
name|interfaces
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|ifa
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
if|if
condition|(
name|ifa
index|[
name|k
index|]
operator|==
name|thiscls
condition|)
name|subs
operator|.
name|add
argument_list|(
name|clss
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|clss
operator|.
name|length
condition|;
name|j
operator|++
control|)
if|if
condition|(
name|clss
index|[
name|j
index|]
operator|.
name|superclass
argument_list|()
operator|==
name|thiscls
condition|)
name|subs
operator|.
name|add
argument_list|(
name|clss
index|[
name|j
index|]
argument_list|)
expr_stmt|;
comment|// outers
name|ClassDoc
name|outer
init|=
literal|null
decl_stmt|;
name|FIND_OUTER
label|:
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|clss
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|ClassDoc
index|[]
name|in
init|=
name|clss
index|[
name|j
index|]
operator|.
name|innerClasses
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|in
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
if|if
condition|(
name|in
index|[
name|k
index|]
operator|==
name|thiscls
condition|)
block|{
name|outer
operator|=
name|clss
index|[
name|j
index|]
expr_stmt|;
break|break
name|FIND_OUTER
break|;
block|}
block|}
block|}
comment|// write html
name|String
name|destdir
init|=
name|configuration
argument_list|()
operator|.
name|destdirname
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|configuration
argument_list|()
operator|.
name|destdirname
operator|+
name|File
operator|.
name|separatorChar
else|:
literal|""
decl_stmt|;
name|String
name|pkg
init|=
name|thiscls
operator|.
name|containingPackage
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|String
name|dstpath
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|pkg
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|destdir
operator|+=
name|pkg
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
operator|+
name|File
operator|.
name|separatorChar
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"../"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pkg
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|pkg
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'.'
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"../"
argument_list|)
expr_stmt|;
name|dstpath
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|String
name|imgpath
init|=
literal|"<img src="
operator|+
name|dstpath
operator|+
literal|"images/"
decl_stmt|;
name|String
name|fn
init|=
name|destdir
operator|+
name|PREFIX
operator|+
name|thiscls
operator|.
name|name
argument_list|()
operator|+
literal|".html"
decl_stmt|;
name|makeContainer
argument_list|(
name|fn
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|fn
argument_list|)
decl_stmt|;
name|String
name|docencoding
init|=
name|configuration
argument_list|()
operator|.
name|docencoding
decl_stmt|;
name|OutputStreamWriter
name|oswriter
decl_stmt|;
if|if
condition|(
name|docencoding
operator|==
literal|null
condition|)
name|oswriter
operator|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|)
expr_stmt|;
else|else
name|oswriter
operator|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|,
name|docencoding
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|oswriter
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<html><head><title>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuration
argument_list|()
operator|.
name|windowtitle
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|configuration
argument_list|()
operator|.
name|windowtitle
operator|+
literal|" : "
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
name|thiscls
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</title></head><body bgcolor=\"#ffffff\" text=\"#000000\" vlink=\"#330000\" alink=\"#330044\" link=\"#0000aa\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<h2 class=\"thisclassname\">"
operator|+
name|thiscls
operator|.
name|name
argument_list|()
operator|+
literal|"</h2>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<table width=100% cellspacing=0 cellpadding=0>"
argument_list|)
expr_stmt|;
comment|// inners
if|if
condition|(
operator|!
name|inners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=32%></td><td width=12></td><td width=32% valign=bottom>"
argument_list|)
expr_stmt|;
name|writeClasses
argument_list|(
name|out
argument_list|,
name|inners
argument_list|,
name|configuration
argument_list|()
operator|.
name|INNER
argument_list|,
name|dstpath
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</td><td width=12></td><td width=32%></td></tr><tr><td width=32%></td><td width=12>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</td><td width=32% align=center valign=middle>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|imgpath
operator|+
literal|"inner.gif>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</td><td width=12></td><td width=32%></td></tr>"
argument_list|)
expr_stmt|;
block|}
comment|// supers
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=32% valign=top>"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|supers
operator|.
name|isEmpty
argument_list|()
condition|)
name|writeClasses
argument_list|(
name|out
argument_list|,
name|supers
argument_list|,
name|configuration
argument_list|()
operator|.
name|SUPER
argument_list|,
name|dstpath
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</td><td width=12 align=center valign=top>"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|supers
operator|.
name|isEmpty
argument_list|()
condition|)
name|out
operator|.
name|println
argument_list|(
name|imgpath
operator|+
literal|"ext.gif>"
argument_list|)
expr_stmt|;
comment|// this
name|out
operator|.
name|println
argument_list|(
literal|"</td><td width=32% valign=top align=center>"
argument_list|)
expr_stmt|;
name|writeClass
argument_list|(
name|out
argument_list|,
name|thiscls
argument_list|,
name|configuration
argument_list|()
operator|.
name|PIVOT
argument_list|,
name|dstpath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// outer
if|if
condition|(
name|outer
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|imgpath
operator|+
literal|"outer.gif>"
argument_list|)
expr_stmt|;
name|writeClass
argument_list|(
name|out
argument_list|,
name|outer
argument_list|,
name|configuration
argument_list|()
operator|.
name|OUTER
argument_list|,
name|dstpath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</td><td width=\"12\" align=\"center\" valign=\"top\">"
argument_list|)
expr_stmt|;
comment|// subs
if|if
condition|(
operator|!
name|subs
operator|.
name|isEmpty
argument_list|()
condition|)
name|out
operator|.
name|println
argument_list|(
name|imgpath
operator|+
literal|"ext.gif"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td width=32% valign=top>"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|subs
operator|.
name|isEmpty
argument_list|()
condition|)
name|writeClasses
argument_list|(
name|out
argument_list|,
name|subs
argument_list|,
name|configuration
argument_list|()
operator|.
name|SUB
argument_list|,
name|dstpath
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</table></body></html>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|writeClasses
name|void
name|writeClasses
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|List
name|clss
parameter_list|,
name|int
name|type
parameter_list|,
name|String
name|dstpath
parameter_list|)
block|{
if|if
condition|(
name|clss
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<table border=\"1\"  width=100% cellpadding=0 cellspacing=3>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|clss
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassDoc
name|c
init|=
operator|(
name|ClassDoc
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|isInterface
argument_list|()
condition|)
name|writeClassCore
argument_list|(
name|out
argument_list|,
name|c
argument_list|,
name|type
argument_list|,
name|dstpath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|clss
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassDoc
name|c
init|=
operator|(
name|ClassDoc
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isInterface
argument_list|()
condition|)
name|writeClassCore
argument_list|(
name|out
argument_list|,
name|c
argument_list|,
name|type
argument_list|,
name|dstpath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
else|else
name|writeClass
argument_list|(
name|out
argument_list|,
operator|(
name|ClassDoc
operator|)
name|clss
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|type
argument_list|,
name|dstpath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|writeClass
name|void
name|writeClass
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|ClassDoc
name|cls
parameter_list|,
name|int
name|type
parameter_list|,
name|String
name|dstpath
parameter_list|,
name|boolean
name|thiscls
parameter_list|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<table border=0 width=100% cellpadding=0 cellspacing=0>"
argument_list|)
expr_stmt|;
name|writeClassCore
argument_list|(
name|out
argument_list|,
name|cls
argument_list|,
name|type
argument_list|,
name|dstpath
argument_list|,
name|thiscls
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
DECL|method|writeClassCore
name|void
name|writeClassCore
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|ClassDoc
name|cls
parameter_list|,
name|int
name|type
parameter_list|,
name|String
name|dstpath
parameter_list|,
name|boolean
name|thiscls
parameter_list|)
block|{
comment|//<tr>...</tr>
name|out
operator|.
name|print
argument_list|(
literal|"<tr><td bgcolor=#"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cls
operator|.
name|isInterface
argument_list|()
condition|)
name|out
operator|.
name|print
argument_list|(
name|configuration
argument_list|()
operator|.
name|interfacecolor
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|cls
operator|.
name|isFinal
argument_list|()
condition|)
name|out
operator|.
name|print
argument_list|(
name|configuration
argument_list|()
operator|.
name|finalclasscolor
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|cls
operator|.
name|isAbstract
argument_list|()
condition|)
name|out
operator|.
name|print
argument_list|(
name|configuration
argument_list|()
operator|.
name|abstractclasscolor
argument_list|)
expr_stmt|;
else|else
name|out
operator|.
name|print
argument_list|(
name|configuration
argument_list|()
operator|.
name|classcolor
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"><table border cellspacing=0 cellpadding=0 width=100%><tr><td>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuration
argument_list|()
operator|.
name|packagename
condition|)
block|{
name|String
name|pkgs
init|=
name|cls
operator|.
name|containingPackage
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|pkgs
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|out
operator|.
name|print
argument_list|(
name|pkgs
operator|+
literal|". "
argument_list|)
expr_stmt|;
block|}
name|writeClassName
argument_list|(
name|out
argument_list|,
name|cls
argument_list|,
name|dstpath
argument_list|,
name|thiscls
argument_list|)
expr_stmt|;
name|writeClassTag
argument_list|(
name|out
argument_list|,
name|cls
argument_list|)
expr_stmt|;
name|int
name|dt
init|=
name|configuration
argument_list|()
operator|.
name|detail
index|[
name|type
index|]
decl_stmt|;
if|if
condition|(
name|dt
operator|>
literal|0
condition|)
block|{
name|FieldDoc
index|[]
name|fld
init|=
name|cls
operator|.
name|fields
argument_list|()
decl_stmt|;
if|if
condition|(
name|fld
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"</td></tr><tr><td>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fld
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|writeField
argument_list|(
name|out
argument_list|,
name|fld
index|[
name|i
index|]
argument_list|,
name|dt
argument_list|,
name|dstpath
argument_list|)
expr_stmt|;
block|}
name|ConstructorDoc
index|[]
name|con
init|=
name|cls
operator|.
name|constructors
argument_list|()
decl_stmt|;
name|boolean
name|sep
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|con
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|con
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Parameter
index|[]
name|param
init|=
name|con
index|[
name|i
index|]
operator|.
name|parameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|param
operator|.
name|length
operator|==
literal|1
operator|&&
name|param
index|[
literal|0
index|]
operator|.
name|name
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"this$"
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|sep
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"</td></tr><tr><td>"
argument_list|)
expr_stmt|;
name|sep
operator|=
literal|true
expr_stmt|;
block|}
name|writeConstructor
argument_list|(
name|out
argument_list|,
name|con
index|[
name|i
index|]
argument_list|,
name|dt
argument_list|,
name|dstpath
argument_list|)
expr_stmt|;
block|}
block|}
name|MethodDoc
index|[]
name|met
init|=
name|cls
operator|.
name|methods
argument_list|()
decl_stmt|;
if|if
condition|(
name|met
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|sep
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"</td></tr><tr><td>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|met
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|writeMethod
argument_list|(
name|out
argument_list|,
name|met
index|[
name|i
index|]
argument_list|,
name|dt
argument_list|,
name|dstpath
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</td></tr></table></td></tr>"
argument_list|)
expr_stmt|;
block|}
DECL|method|writeClassTag
name|void
name|writeClassTag
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|ClassDoc
name|cls
parameter_list|)
block|{
if|if
condition|(
operator|!
name|configuration
argument_list|()
operator|.
name|nostereotype
condition|)
block|{
name|Tag
index|[]
name|stype
init|=
name|cls
operator|.
name|tags
argument_list|(
literal|"stereotype"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stype
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"&lt;&lt;"
operator|+
name|stype
index|[
name|i
index|]
operator|.
name|text
argument_list|()
operator|+
literal|"&gt;&gt;"
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
name|it
init|=
name|configuration
argument_list|()
operator|.
name|tags
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tag
index|[]
name|tag
init|=
name|cls
operator|.
name|tags
argument_list|(
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tag
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" {"
operator|+
name|tag
index|[
name|i
index|]
operator|.
name|kind
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|":"
operator|+
name|tag
index|[
name|i
index|]
operator|.
name|text
argument_list|()
operator|+
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getAccessChar
name|char
name|getAccessChar
parameter_list|(
name|MemberDoc
name|mem
parameter_list|)
block|{
if|if
condition|(
name|mem
operator|.
name|isPublic
argument_list|()
condition|)
block|{
return|return
literal|'+'
return|;
block|}
elseif|else
if|if
condition|(
name|mem
operator|.
name|isProtected
argument_list|()
condition|)
block|{
return|return
literal|'#'
return|;
block|}
elseif|else
if|if
condition|(
name|mem
operator|.
name|isPrivate
argument_list|()
condition|)
block|{
return|return
literal|'-'
return|;
block|}
return|return
literal|' '
return|;
block|}
DECL|method|getTypeName
name|String
name|getTypeName
parameter_list|(
name|Type
name|type
parameter_list|,
name|int
name|detail
parameter_list|,
name|String
name|dstpath
parameter_list|)
block|{
name|ClassDoc
name|cls
init|=
name|type
operator|.
name|asClassDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|cls
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|detail
operator|==
literal|3
condition|)
block|{
return|return
name|getLinkedClass
argument_list|(
name|cls
operator|.
name|qualifiedName
argument_list|()
argument_list|,
name|cls
argument_list|,
name|dstpath
argument_list|)
return|;
block|}
return|return
name|getLinkedClass
argument_list|(
name|cls
operator|.
name|name
argument_list|()
argument_list|,
name|cls
argument_list|,
name|dstpath
argument_list|)
return|;
block|}
return|return
name|type
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|writeField
name|void
name|writeField
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|FieldDoc
name|fld
parameter_list|,
name|int
name|detail
parameter_list|,
name|String
name|dstpath
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getAccessChar
argument_list|(
name|fld
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getLinkedMember
argument_list|(
name|fld
operator|.
name|name
argument_list|()
argument_list|,
name|fld
argument_list|,
name|dstpath
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getTypeName
argument_list|(
name|fld
operator|.
name|type
argument_list|()
argument_list|,
name|detail
argument_list|,
name|dstpath
argument_list|)
argument_list|)
expr_stmt|;
name|writeMember
argument_list|(
name|out
argument_list|,
name|sb
argument_list|,
name|fld
argument_list|)
expr_stmt|;
block|}
DECL|method|writeConstructor
name|void
name|writeConstructor
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|ConstructorDoc
name|con
parameter_list|,
name|int
name|detail
parameter_list|,
name|String
name|dstpath
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getAccessChar
argument_list|(
name|con
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getLinkedMember
argument_list|(
name|con
operator|.
name|name
argument_list|()
argument_list|,
name|con
argument_list|,
name|dstpath
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
if|if
condition|(
name|detail
operator|>=
literal|2
condition|)
block|{
name|Parameter
index|[]
name|param
init|=
name|con
operator|.
name|parameters
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|param
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|getTypeName
argument_list|(
name|param
index|[
name|i
index|]
operator|.
name|type
argument_list|()
argument_list|,
name|detail
argument_list|,
name|dstpath
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|paramname
init|=
name|param
index|[
name|i
index|]
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|paramname
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|paramname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|writeMember
argument_list|(
name|out
argument_list|,
name|sb
argument_list|,
name|con
argument_list|)
expr_stmt|;
block|}
DECL|method|writeMethod
name|void
name|writeMethod
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|MethodDoc
name|met
parameter_list|,
name|int
name|detail
parameter_list|,
name|String
name|dstpath
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getAccessChar
argument_list|(
name|met
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getLinkedMember
argument_list|(
name|encode
argument_list|(
name|met
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|met
argument_list|,
name|dstpath
argument_list|)
argument_list|)
expr_stmt|;
name|Parameter
index|[]
name|param
init|=
name|met
operator|.
name|parameters
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
if|if
condition|(
name|detail
operator|>=
literal|2
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|param
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|getTypeName
argument_list|(
name|param
index|[
name|i
index|]
operator|.
name|type
argument_list|()
argument_list|,
name|detail
argument_list|,
name|dstpath
argument_list|)
operator|+
literal|" "
operator|+
name|param
index|[
name|i
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getTypeName
argument_list|(
name|met
operator|.
name|returnType
argument_list|()
argument_list|,
name|detail
argument_list|,
name|dstpath
argument_list|)
argument_list|)
expr_stmt|;
name|writeMember
argument_list|(
name|out
argument_list|,
name|sb
argument_list|,
name|met
argument_list|)
expr_stmt|;
block|}
DECL|method|isIncluded
name|boolean
name|isIncluded
parameter_list|(
name|ClassDoc
name|cls
parameter_list|)
block|{
name|ClassDoc
name|c
init|=
name|cls
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|c
operator|.
name|isIncluded
argument_list|()
condition|)
return|return
literal|true
return|;
name|c
operator|=
name|c
operator|.
name|containingClass
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
return|return
literal|false
return|;
block|}
block|}
DECL|method|getLinkedMember
name|String
name|getLinkedMember
parameter_list|(
name|String
name|name
parameter_list|,
name|MemberDoc
name|mem
parameter_list|,
name|String
name|dstpath
parameter_list|)
block|{
if|if
condition|(
operator|!
name|configuration
argument_list|()
operator|.
name|withstandard
condition|)
return|return
name|name
return|;
name|ClassDoc
name|cls
init|=
name|mem
operator|.
name|containingClass
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isIncluded
argument_list|(
name|cls
argument_list|)
condition|)
return|return
name|name
return|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|StringBuffer
name|ahref
init|=
operator|new
name|StringBuffer
argument_list|(
name|mem
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mem
operator|instanceof
name|ExecutableMemberDoc
condition|)
block|{
name|ExecutableMemberDoc
name|md
init|=
operator|(
name|ExecutableMemberDoc
operator|)
name|mem
decl_stmt|;
name|ahref
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|Parameter
index|[]
name|param
init|=
name|md
operator|.
name|parameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|param
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|param
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|ahref
operator|.
name|append
argument_list|(
name|param
index|[
name|i
index|]
operator|.
name|type
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ahref
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|ahref
operator|.
name|append
argument_list|(
name|param
index|[
literal|0
index|]
operator|.
name|type
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ahref
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
name|ahref
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|".html#"
argument_list|)
expr_stmt|;
name|ahref
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|cls
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|ahref
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|getPath
argument_list|(
name|cls
operator|.
name|containingPackage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ahref
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|dstpath
argument_list|)
expr_stmt|;
name|ahref
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|"<a href="
argument_list|)
expr_stmt|;
name|ahref
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|ahref
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</a>"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|writeMember
name|void
name|writeMember
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|StringBuffer
name|sb
parameter_list|,
name|MemberDoc
name|mem
parameter_list|)
block|{
if|if
condition|(
name|mem
operator|.
name|isStatic
argument_list|()
condition|)
block|{
name|sb
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|"<u>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</u><br>"
argument_list|)
expr_stmt|;
block|}
else|else
name|sb
operator|.
name|append
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getRelativePath
name|String
name|getRelativePath
parameter_list|(
name|PackageDoc
name|from
parameter_list|,
name|PackageDoc
name|to
parameter_list|)
block|{
name|String
name|pkg
init|=
name|from
operator|.
name|name
argument_list|()
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|pkg
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"../"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pkg
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|pkg
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'.'
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"../"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|getPath
argument_list|(
name|to
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getPath
name|String
name|getPath
parameter_list|(
name|PackageDoc
name|pkgdoc
parameter_list|)
block|{
name|String
name|pkg
init|=
name|pkgdoc
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|pkg
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|pkg
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|'/'
return|;
block|}
return|return
literal|""
return|;
block|}
DECL|method|getLinkedClass
name|String
name|getLinkedClass
parameter_list|(
name|String
name|name
parameter_list|,
name|ClassDoc
name|cls
parameter_list|,
name|String
name|dstpath
parameter_list|)
block|{
if|if
condition|(
name|cls
operator|.
name|isIncluded
argument_list|()
condition|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<a href="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|dstpath
operator|+
name|getPath
argument_list|(
name|cls
operator|.
name|containingPackage
argument_list|()
argument_list|)
operator|+
name|PREFIX
operator|+
name|cls
operator|.
name|name
argument_list|()
operator|+
literal|".html>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</a>"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|name
return|;
block|}
DECL|method|writeClassName
name|void
name|writeClassName
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|ClassDoc
name|cls
parameter_list|,
name|String
name|dstpath
parameter_list|,
name|boolean
name|thiscls
parameter_list|)
block|{
if|if
condition|(
name|cls
operator|.
name|isIncluded
argument_list|()
condition|)
block|{
name|String
name|prefix
init|=
name|PREFIX
decl_stmt|;
if|if
condition|(
name|thiscls
condition|)
block|{
if|if
condition|(
operator|!
name|configuration
argument_list|()
operator|.
name|withstandard
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|cls
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|prefix
operator|=
literal|""
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"<a href="
operator|+
name|dstpath
operator|+
name|getPath
argument_list|(
name|cls
operator|.
name|containingPackage
argument_list|()
argument_list|)
operator|+
name|prefix
operator|+
name|cls
operator|.
name|name
argument_list|()
operator|+
literal|".html>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|cls
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</a>"
argument_list|)
expr_stmt|;
block|}
else|else
name|out
operator|.
name|println
argument_list|(
name|cls
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// util
DECL|method|encode
specifier|static
name|String
name|encode
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|StringBuffer
name|res
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'>'
condition|)
name|res
operator|.
name|append
argument_list|(
literal|"&gt;"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|c
operator|==
literal|'<'
condition|)
name|res
operator|.
name|append
argument_list|(
literal|"&lt;"
argument_list|)
expr_stmt|;
else|else
name|res
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|makeContainer
specifier|static
name|void
name|makeContainer
parameter_list|(
name|String
name|fn
parameter_list|)
block|{
comment|//new File(fn).mkdirs();
name|int
name|n
init|=
name|fn
operator|.
name|lastIndexOf
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|n
operator|=
name|fn
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|fn
operator|=
name|fn
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
expr_stmt|;
comment|// need?
block|}
if|if
condition|(
name|n
operator|>=
literal|0
condition|)
operator|new
name|File
argument_list|(
name|fn
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|n
argument_list|)
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
comment|// image
DECL|method|writeToFile
name|void
name|writeToFile
parameter_list|(
name|String
name|image
parameter_list|,
name|String
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|os
init|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|dst
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|image
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|n
init|=
operator|(
name|int
operator|)
name|c
operator|&
literal|0xff
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
call|(
name|int
call|)
argument_list|(
name|c
operator|>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|char
name|c
init|=
name|image
operator|.
name|charAt
argument_list|(
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|'\u00ff'
condition|)
name|os
operator|.
name|write
argument_list|(
call|(
name|int
call|)
argument_list|(
name|c
operator|>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|field|EXT_IMAGE
specifier|static
specifier|final
name|String
name|EXT_IMAGE
init|=
literal|"\u4947\u3846\u6139\u000C\u0012\u0080\u0000\u0000\uFFFF\u2CFF\u0000\u0000"
operator|+
literal|"\u000C\u0012\u0200\u8C1B\uA98F\uEDCB\u1F0F\u6070\u69B2\uCD95\u7328\u55C3"
operator|+
literal|"\u1562\u1778\u60D8\uA7D4\u0529\u2100\u0BFF\u444A\u4249\u3233\u2020\u2E31"
operator|+
literal|"\u3E30\u0A0A\u4947\u2046\u6E45\u6F63\u6564\u2072\u6F66\u2072\u6957\u336E"
operator|+
literal|"\u2032\u4A28\u4944\u3342\u2932\u4320\u706F\u7279\u6769\u7468\u3120\u3939"
operator|+
literal|"\u2D36\u3931\u3739\u4420\u494F\u6863\u6E61\u0A21\u3B00\u00ff"
decl_stmt|;
DECL|field|INNER_IMAGE
specifier|static
specifier|final
name|String
name|INNER_IMAGE
init|=
literal|"\u4947\u3846\u6139\u0040\u0012\u0080\u0000\u0000\uFFFF\u2CFF\u0000\u0000"
operator|+
literal|"\u0040\u0012\u0200\u8C50\uA98F\uC08B\uA30F\u6E9C\u8BDA\uDE5B\uD5FC\u760E"
operator|+
literal|"\u17DF\u1196\uA669\uAA10\uC9B6\u3818\u2540\uB38F\uBB71\u51DE\u31E3\uE31D"
operator|+
literal|"\u7505\u1F3B\u38EC\uB1BB\u4288\uF0A3\u62F8\uA032\u6ACE\u2970\u5EA5\u499B"
operator|+
literal|"\u549F\uFD81\uC286\u5162\u45D9\u673E\u9DD2\u0002\uFF21\u4A0B\u4944\u3342"
operator|+
literal|"\u2032\u3120\u302E\u0A3E\u470A\u4649\u4520\u636E\u646F\u7265\u6620\u726F"
operator|+
literal|"\u5720\u6E69\u3233\u2820\u444A\u4249\u3233\u2029\u6F43\u7970\u6972\u6867"
operator|+
literal|"\u2074\u3931\u3639\u312D\u3939\u2037\u4F44\u6349\u6168\u216E\n\u3B00"
decl_stmt|;
DECL|field|OUTER_IMAGE
specifier|static
specifier|final
name|String
name|OUTER_IMAGE
init|=
literal|"\u4947\u3846\u6139\u0040\u0012\u0080\u0000\u0000\uFFFF\u2CFF\u0000\u0000"
operator|+
literal|"\u0040\u0012\u0200\u8C54\uA98F\uC08B\uA30F\u6E9C\u8BDA\uDE5B\uD5FC\u760E"
operator|+
literal|"\u485F\u235E\u9674\uCA5C\u2AB0\u01F6\u11B2\uB307\uDF7D\u4A2F\u4E1F\u015D"
operator|+
literal|"\u24EE\u9F41\u18CD\uCD94\u435C\uB1E3\u7C27\u9B3A\u1EAD\uF694\u1EB3\uD499"
operator|+
literal|"\u6E98\u5569\uA96A\u2E0A\u6439\u8B3E\u5DD4\u3376\u29CD\u0000\uFF21\u4A0B"
operator|+
literal|"\u4944\u3342\u2032\u3120\u302E\u0A3E\u470A\u4649\u4520\u636E\u646F\u7265"
operator|+
literal|"\u6620\u726F\u5720\u6E69\u3233\u2820\u444A\u4249\u3233\u2029\u6F43\u7970"
operator|+
literal|"\u6972\u6867\u2074\u3931\u3639\u312D\u3939\u2037\u4F44\u6349\u6168\u216E"
operator|+
literal|"\n\u3B00"
decl_stmt|;
block|}
end_class
end_unit
