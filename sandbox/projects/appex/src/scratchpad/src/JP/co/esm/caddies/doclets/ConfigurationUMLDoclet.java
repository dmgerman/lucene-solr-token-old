begin_unit
begin_comment
comment|/*    Copyright (C) 1999    Eiwa System Management, Inc.     Permission to use, copy, modify, distribute and sell this software    and its documentation for any purpose is hereby granted without fee,    provided that the above copyright notice appear in all copies and    that both that copyright notice and this permission notice appear    in supporting documentation. Eiwa System Management,Inc.    makes no representations about the suitability of this software for any    purpose.  It is provided "AS IS" with NO WARRANTY. */
end_comment
begin_package
DECL|package|JP.co.esm.caddies.doclets
package|package
name|JP
operator|.
name|co
operator|.
name|esm
operator|.
name|caddies
operator|.
name|doclets
package|;
end_package
begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|doclets
operator|.
name|Configuration
import|;
end_import
begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|doclets
operator|.
name|standard
operator|.
name|*
import|;
end_import
begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|doclets
operator|.
name|*
import|;
end_import
begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|javadoc
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_comment
comment|/**   * configuration of UMDoclet   *    * @author Taisuke Fukuno   */
end_comment
begin_class
DECL|class|ConfigurationUMLDoclet
specifier|public
class|class
name|ConfigurationUMLDoclet
extends|extends
name|Configuration
block|{
DECL|field|withstandard
name|boolean
name|withstandard
init|=
literal|true
decl_stmt|;
DECL|field|packagename
name|boolean
name|packagename
init|=
literal|true
decl_stmt|;
DECL|field|windowtitle
name|String
name|windowtitle
init|=
literal|null
decl_stmt|;
DECL|field|interfacecolor
name|String
name|interfacecolor
init|=
literal|"fcfb6f"
decl_stmt|;
DECL|field|classcolor
name|String
name|classcolor
init|=
literal|"7dfff1"
decl_stmt|;
DECL|field|abstractclasscolor
name|String
name|abstractclasscolor
init|=
literal|"92ff7d"
decl_stmt|;
DECL|field|finalclasscolor
name|String
name|finalclasscolor
init|=
literal|"99adfc"
decl_stmt|;
DECL|field|tags
name|List
name|tags
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|field|nostereotype
name|boolean
name|nostereotype
init|=
literal|false
decl_stmt|;
DECL|field|PIVOT
specifier|static
specifier|final
name|int
name|PIVOT
init|=
literal|0
decl_stmt|;
DECL|field|SUB
specifier|static
specifier|final
name|int
name|SUB
init|=
literal|1
decl_stmt|;
DECL|field|SUPER
specifier|static
specifier|final
name|int
name|SUPER
init|=
literal|2
decl_stmt|;
DECL|field|INNER
specifier|static
specifier|final
name|int
name|INNER
init|=
literal|3
decl_stmt|;
DECL|field|OUTER
specifier|static
specifier|final
name|int
name|OUTER
init|=
literal|4
decl_stmt|;
DECL|field|detail
name|int
index|[]
name|detail
init|=
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|0
block|,
literal|2
block|}
decl_stmt|;
comment|// pivot sub super inner outer
DECL|field|message
specifier|public
specifier|static
name|ResourceBundle
name|message
init|=
literal|null
decl_stmt|;
DECL|method|ConfigurationUMLDoclet
name|ConfigurationUMLDoclet
parameter_list|()
block|{
name|message
operator|=
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
literal|"JP.co.esm.caddies.doclets.resources.UMLDoclet"
argument_list|)
expr_stmt|;
block|}
DECL|method|setSpecificDocletOptions
specifier|public
name|void
name|setSpecificDocletOptions
parameter_list|(
name|RootDoc
name|root
parameter_list|)
throws|throws
name|DocletAbortException
block|{
name|String
index|[]
index|[]
name|options
init|=
name|root
operator|.
name|options
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|oi
init|=
literal|0
init|;
name|oi
operator|<
name|options
operator|.
name|length
condition|;
operator|++
name|oi
control|)
block|{
name|String
index|[]
name|os
init|=
name|options
index|[
name|oi
index|]
decl_stmt|;
name|String
name|opt
init|=
name|os
index|[
literal|0
index|]
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|opt
operator|.
name|equals
argument_list|(
literal|"-member"
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|os
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
name|detail
index|[
name|i
index|]
operator|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|-
literal|'0'
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|equals
argument_list|(
literal|"-nopackage"
argument_list|)
condition|)
block|{
name|packagename
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|equals
argument_list|(
literal|"-nostereotype"
argument_list|)
condition|)
block|{
name|nostereotype
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|equals
argument_list|(
literal|"-windowtitle"
argument_list|)
condition|)
block|{
name|windowtitle
operator|=
name|os
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|equals
argument_list|(
literal|"-nostandard"
argument_list|)
condition|)
block|{
name|withstandard
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|equals
argument_list|(
literal|"-interfacecolor"
argument_list|)
condition|)
block|{
name|interfacecolor
operator|=
name|os
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|equals
argument_list|(
literal|"-classcolor"
argument_list|)
condition|)
block|{
name|classcolor
operator|=
name|os
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|equals
argument_list|(
literal|"-abstractclasscolor"
argument_list|)
condition|)
block|{
name|abstractclasscolor
operator|=
name|os
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|equals
argument_list|(
literal|"-finalclasscolor"
argument_list|)
condition|)
block|{
name|finalclasscolor
operator|=
name|os
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|equals
argument_list|(
literal|"-tag"
argument_list|)
condition|)
block|{
name|tags
operator|.
name|add
argument_list|(
name|os
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|specificDocletOptionLength
specifier|public
name|int
name|specificDocletOptionLength
parameter_list|(
name|String
name|option
parameter_list|)
block|{
if|if
condition|(
name|option
operator|.
name|equals
argument_list|(
literal|"-nopackage"
argument_list|)
operator|||
name|option
operator|.
name|equals
argument_list|(
literal|"-nostandard"
argument_list|)
operator|||
name|option
operator|.
name|equals
argument_list|(
literal|"-nostereotype"
argument_list|)
condition|)
return|return
literal|1
return|;
elseif|else
if|if
condition|(
name|option
operator|.
name|equals
argument_list|(
literal|"-member"
argument_list|)
operator|||
name|option
operator|.
name|equals
argument_list|(
literal|"-windowtitle"
argument_list|)
operator|||
name|option
operator|.
name|equals
argument_list|(
literal|"-interfacecolor"
argument_list|)
operator|||
name|option
operator|.
name|equals
argument_list|(
literal|"-classcolor"
argument_list|)
operator|||
name|option
operator|.
name|equals
argument_list|(
literal|"-abstractclasscolor"
argument_list|)
operator|||
name|option
operator|.
name|equals
argument_list|(
literal|"-finalclasscolor"
argument_list|)
operator|||
name|option
operator|.
name|equals
argument_list|(
literal|"-tag"
argument_list|)
condition|)
return|return
literal|2
return|;
elseif|else
if|if
condition|(
name|option
operator|.
name|equals
argument_list|(
literal|"-help"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|message
operator|.
name|getString
argument_list|(
literal|"doclet.usage"
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
else|else
return|return
name|Standard
operator|.
name|optionLength
argument_list|(
name|option
argument_list|)
return|;
block|}
DECL|method|optionLength
specifier|public
name|int
name|optionLength
parameter_list|(
name|String
name|option
parameter_list|)
block|{
if|if
condition|(
name|option
operator|.
name|equals
argument_list|(
literal|"-nopackage"
argument_list|)
operator|||
name|option
operator|.
name|equals
argument_list|(
literal|"-nostandard"
argument_list|)
operator|||
name|option
operator|.
name|equals
argument_list|(
literal|"-nostereotype"
argument_list|)
condition|)
return|return
literal|1
return|;
elseif|else
if|if
condition|(
name|option
operator|.
name|equals
argument_list|(
literal|"-member"
argument_list|)
operator|||
name|option
operator|.
name|equals
argument_list|(
literal|"-windowtitle"
argument_list|)
operator|||
name|option
operator|.
name|equals
argument_list|(
literal|"-interfacecolor"
argument_list|)
operator|||
name|option
operator|.
name|equals
argument_list|(
literal|"-classcolor"
argument_list|)
operator|||
name|option
operator|.
name|equals
argument_list|(
literal|"-abstractclasscolor"
argument_list|)
operator|||
name|option
operator|.
name|equals
argument_list|(
literal|"-finalclasscolor"
argument_list|)
operator|||
name|option
operator|.
name|equals
argument_list|(
literal|"-tag"
argument_list|)
condition|)
return|return
literal|2
return|;
elseif|else
if|if
condition|(
name|option
operator|.
name|equals
argument_list|(
literal|"-help"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|message
operator|.
name|getString
argument_list|(
literal|"doclet.usage"
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
else|else
return|return
name|Standard
operator|.
name|optionLength
argument_list|(
name|option
argument_list|)
return|;
block|}
DECL|method|specificDocletValidOptions
specifier|public
name|boolean
name|specificDocletValidOptions
parameter_list|(
name|String
index|[]
index|[]
name|options
parameter_list|,
name|DocErrorReporter
name|reporter
parameter_list|)
block|{
name|boolean
name|standard
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|options
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|options
index|[
name|i
index|]
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"-nostandard"
argument_list|)
condition|)
name|standard
operator|=
literal|false
expr_stmt|;
elseif|else
if|if
condition|(
name|options
index|[
name|i
index|]
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"-member"
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|options
index|[
name|i
index|]
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|!=
literal|5
condition|)
block|{
name|reporter
operator|.
name|printError
argument_list|(
name|message
operator|.
name|getString
argument_list|(
literal|"doclet.illegal_member"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|5
condition|;
name|j
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
argument_list|<
literal|'0'
operator|||
name|c
argument_list|>
literal|'3'
condition|)
block|{
name|reporter
operator|.
name|printError
argument_list|(
name|message
operator|.
name|getString
argument_list|(
literal|"doclet.illegal_member"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|standard
condition|)
block|{
name|boolean
name|res
init|=
literal|false
decl_stmt|;
try|try
block|{
name|res
operator|=
name|Standard
operator|.
name|validOptions
argument_list|(
name|options
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|reporter
operator|.
name|printError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
