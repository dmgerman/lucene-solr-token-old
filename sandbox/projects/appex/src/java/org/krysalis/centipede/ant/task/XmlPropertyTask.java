begin_unit
begin_comment
comment|/*****************************************************************************  * Copyright (C) The Krysalis project. All rights reserved.                  *  * ------------------------------------------------------------------------- *  * This software is published under the terms of the Krysalis Patchy         *  * Software License version 1.1_01, a copy of which has been included        *  * at the bottom of this file.                                               *  *****************************************************************************/
end_comment
begin_package
DECL|package|org.krysalis.centipede.ant.task
package|package
name|org
operator|.
name|krysalis
operator|.
name|centipede
operator|.
name|ant
operator|.
name|task
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|FactoryConfigurationError
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|taskdefs
operator|.
name|Property
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|taskdefs
operator|.
name|Property
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Task
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|AntClassLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|ProjectHelper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|Reference
import|;
end_import
begin_comment
comment|/**  * Task get property values from a valid xml file.  * Example:  *<root-tag>  *<inner-tag>Text</inner-tag>  *<2><3><4>false</4></3></2>    *</root-tag>  *      *  myattr=true  *  inner-tag=Text  *  2.3.4=false  *    * @author<a href="mailto:barozzi@nicolaken.com">Nicola Ken Barozzi</a>  * @created 14 January 2002  */
end_comment
begin_class
DECL|class|XmlPropertyTask
specifier|public
class|class
name|XmlPropertyTask
extends|extends
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Task
block|{
DECL|field|src
specifier|private
name|String
name|src
decl_stmt|;
DECL|field|prefix
specifier|private
name|String
name|prefix
init|=
literal|""
decl_stmt|;
DECL|field|keepRoot
specifier|private
name|boolean
name|keepRoot
init|=
literal|true
decl_stmt|;
DECL|field|document
specifier|private
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
name|document
decl_stmt|;
comment|/**      * Constructor.      */
DECL|method|XmlPropertyTask
specifier|public
name|XmlPropertyTask
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Initializes the task.      */
DECL|method|init
specifier|public
name|void
name|init
parameter_list|()
block|{
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
comment|/**      * Run the task.      * @exception org.apache.tools.ant.BuildException The exception raised during task execution.      */
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
block|{
name|BufferedInputStream
name|configurationStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|configurationStream
operator|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|document
operator|=
name|builder
operator|.
name|parse
argument_list|(
name|configurationStream
argument_list|)
expr_stmt|;
name|Element
name|topElement
init|=
name|document
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|NodeList
name|topChildren
init|=
name|topElement
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|int
name|numChildren
init|=
name|topChildren
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|log
argument_list|(
literal|"Using prefix: \""
operator|+
name|prefix
operator|+
literal|"\""
argument_list|,
name|Project
operator|.
name|MSG_VERBOSE
argument_list|)
expr_stmt|;
name|String
name|prefixToUse
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|prefix
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
condition|)
block|{
name|prefixToUse
operator|=
name|prefix
expr_stmt|;
block|}
name|log
argument_list|(
literal|"Prefix to use 1: \""
operator|+
name|prefixToUse
operator|+
literal|"\""
argument_list|,
name|Project
operator|.
name|MSG_VERBOSE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|!
operator|(
name|prefix
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
operator|)
operator|&&
name|keepRoot
condition|)
block|{
name|prefixToUse
operator|+=
literal|"."
expr_stmt|;
block|}
name|log
argument_list|(
literal|"Prefix to use 2: \""
operator|+
name|prefixToUse
operator|+
literal|"\""
argument_list|,
name|Project
operator|.
name|MSG_VERBOSE
argument_list|)
expr_stmt|;
if|if
condition|(
name|keepRoot
condition|)
block|{
name|prefixToUse
operator|+=
operator|(
name|topElement
operator|.
name|getNodeName
argument_list|()
operator|)
expr_stmt|;
block|}
name|log
argument_list|(
literal|"Prefix to use 3: \""
operator|+
name|prefixToUse
operator|+
literal|"\""
argument_list|,
name|Project
operator|.
name|MSG_VERBOSE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChildren
condition|;
name|i
operator|++
control|)
block|{
name|addNodeRecursively
argument_list|(
name|topChildren
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|,
name|prefixToUse
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SAXException
name|sxe
parameter_list|)
block|{
comment|// Error generated during parsing
name|Exception
name|x
init|=
name|sxe
decl_stmt|;
if|if
condition|(
name|sxe
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
name|x
operator|=
name|sxe
operator|.
name|getException
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|BuildException
argument_list|(
name|x
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|pce
parameter_list|)
block|{
comment|// Parser with specified options can't be built
throw|throw
operator|new
name|BuildException
argument_list|(
name|pce
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// I/O error
throw|throw
operator|new
name|BuildException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|configurationStream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|configurationStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
block|}
block|}
DECL|method|addNodeRecursively
name|void
name|addNodeRecursively
parameter_list|(
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
name|node
parameter_list|,
name|String
name|text
parameter_list|,
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|hasAttributes
argument_list|()
condition|)
block|{
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
name|nodeAttributes
init|=
name|node
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeAttributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|attributeNode
init|=
name|nodeAttributes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|attributeName
init|=
name|text
operator|+
operator|(
name|text
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|?
literal|""
else|:
literal|"."
operator|)
operator|+
name|node
operator|.
name|getNodeName
argument_list|()
operator|+
literal|"."
operator|+
name|attributeNode
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|String
name|attributeValue
init|=
name|attributeNode
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|log
argument_list|(
name|attributeName
operator|+
literal|":"
operator|+
name|attributeValue
argument_list|,
name|Project
operator|.
name|MSG_VERBOSE
argument_list|)
expr_stmt|;
name|project
operator|.
name|setUserProperty
argument_list|(
name|attributeName
argument_list|,
name|attributeValue
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|TEXT_NODE
condition|)
block|{
name|String
name|nodeText
init|=
name|node
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeText
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|log
argument_list|(
name|text
operator|+
literal|":"
operator|+
name|nodeText
argument_list|,
name|Project
operator|.
name|MSG_VERBOSE
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
literal|0
condition|)
block|{
name|project
operator|.
name|setUserProperty
argument_list|(
name|text
argument_list|,
name|nodeText
argument_list|)
expr_stmt|;
block|}
name|project
operator|.
name|setUserProperty
argument_list|(
name|text
operator|+
literal|"["
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|index
argument_list|)
operator|+
literal|"]"
argument_list|,
name|nodeText
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|node
operator|.
name|hasChildNodes
argument_list|()
condition|)
block|{
name|text
operator|+=
operator|(
operator|(
name|text
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|?
literal|""
else|:
literal|"."
operator|)
operator|+
name|node
operator|.
name|getNodeName
argument_list|()
operator|)
expr_stmt|;
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
name|nodeChildren
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|int
name|numChildren
init|=
name|nodeChildren
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|StringBuffer
name|childList
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChildren
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|childList
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|childList
operator|.
name|append
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
operator|+
literal|"["
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|index
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|addNodeRecursively
argument_list|(
name|nodeChildren
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|,
name|text
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|project
operator|.
name|setUserProperty
argument_list|(
name|text
operator|+
literal|".list"
argument_list|,
name|childList
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setFile
specifier|public
name|void
name|setFile
parameter_list|(
name|String
name|src
parameter_list|)
block|{
name|this
operator|.
name|src
operator|=
name|src
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
DECL|method|setPrefix
specifier|public
name|void
name|setPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
DECL|method|setKeeproot
specifier|public
name|void
name|setKeeproot
parameter_list|(
name|boolean
name|keepRoot
parameter_list|)
block|{
name|this
operator|.
name|keepRoot
operator|=
name|keepRoot
expr_stmt|;
block|}
block|}
end_class
begin_comment
comment|/* The Krysalis Patchy Software License, Version 1.1_01 Copyright (c) 2002 Nicola Ken Barozzi.  All rights reserved.  This Licence is compatible with the BSD licence as described and  approved by http://www.opensource.org/, and is based on the Apache Software Licence Version 1.1.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:   1. Redistributions of source code must retain the above copyright     notice, this list of conditions and the following disclaimer.  2. Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in    the documentation and/or other materials provided with the    distribution.  3. The end-user documentation included with the redistribution,    if any, must include the following acknowledgment:       "This product includes software developed for project         Krysalis (http://www.krysalis.org/)."    Alternately, this acknowledgment may appear in the software itself,    if and wherever such third-party acknowledgments normally appear.  4. The names "Krysalis" and "Nicola Ken Barozzi" and    "Krysalis Centipede" must not be used to endorse or promote products    derived from this software without prior written permission. For    written permission, please contact krysalis@nicolaken.org.     5. Products derived from this software may not be called "Krysalis",    "Krysalis Centipede", nor may "Krysalis" appear in their name,    without prior written permission of Nicola Ken Barozzi.  6. This software may contain voluntary contributions made by many     individuals, who decided to donate the code to this project in    respect of this licence.  THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE KRYSALIS PROJECT OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ====================================================================*/
end_comment
end_unit
