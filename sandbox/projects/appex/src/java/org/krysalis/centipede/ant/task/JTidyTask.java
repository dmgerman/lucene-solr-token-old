begin_unit
begin_comment
comment|/*****************************************************************************  * Copyright (C) The Krysalis project. All rights reserved.                  *  * ------------------------------------------------------------------------- *  * This software is published under the terms of the Krysalis Patchy         *  * Software License version 1.1_01, a copy of which has been included        *  * at the bottom of this file.                                               *  *****************************************************************************/
end_comment
begin_package
DECL|package|org.krysalis.centipede.ant.task
package|package
name|org
operator|.
name|krysalis
operator|.
name|centipede
operator|.
name|ant
operator|.
name|task
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|tidy
operator|.
name|Tidy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|taskdefs
operator|.
name|Property
import|;
end_import
begin_comment
comment|/**  * Task to ask property values to the user. Uses current value as default.  *  * @author<a href="mailto:barozzi@nicolaken.com">Nicola Ken Barozzi</a>  * @created 14 January 2002  */
end_comment
begin_class
DECL|class|JTidyTask
specifier|public
class|class
name|JTidyTask
extends|extends
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Task
block|{
DECL|field|src
specifier|private
name|String
name|src
decl_stmt|;
DECL|field|dest
specifier|private
name|String
name|dest
decl_stmt|;
DECL|field|log
specifier|private
name|String
name|log
decl_stmt|;
DECL|field|tidy
specifier|private
name|Tidy
name|tidy
decl_stmt|;
DECL|field|warn
specifier|private
name|String
name|warn
init|=
literal|"false"
decl_stmt|;
DECL|field|summary
specifier|private
name|String
name|summary
init|=
literal|"false"
decl_stmt|;
DECL|field|pw
name|PrintWriter
name|pw
decl_stmt|;
comment|/**      * Constructor.      */
DECL|method|JTidyTask
specifier|public
name|JTidyTask
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Initializes the task.      */
DECL|method|init
specifier|public
name|void
name|init
parameter_list|()
block|{
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
comment|// Setup an instance of Tidy.
name|tidy
operator|=
operator|new
name|Tidy
argument_list|()
expr_stmt|;
name|tidy
operator|.
name|setXmlOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tidy
operator|.
name|setXHTML
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tidy
operator|.
name|setDropFontTags
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tidy
operator|.
name|setLiteralAttribs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tidy
operator|.
name|setMakeClean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tidy
operator|.
name|setShowWarnings
argument_list|(
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|warn
argument_list|)
argument_list|)
expr_stmt|;
name|tidy
operator|.
name|setQuiet
argument_list|(
operator|!
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|summary
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Run the task.      * @exception org.apache.tools.ant.BuildException The exception raised during task execution.      */
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
block|{
try|try
block|{
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|log
argument_list|)
argument_list|)
decl_stmt|;
name|tidy
operator|.
name|setErrout
argument_list|(
name|pw
argument_list|)
expr_stmt|;
comment|// Extract the document using JTidy and stream it.
name|BufferedInputStream
name|in
init|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|src
argument_list|)
argument_list|)
decl_stmt|;
comment|// FileOutputStream out = new FileOutputStream(dest);
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|dest
argument_list|)
argument_list|)
decl_stmt|;
comment|// using null as output to get dom so to remove duplicate attributes
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
name|domDoc
init|=
name|tidy
operator|.
name|parseDOM
argument_list|(
name|in
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|domDoc
operator|.
name|normalize
argument_list|()
expr_stmt|;
name|stripDuplicateAttributes
argument_list|(
name|domDoc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|serialize
operator|.
name|OutputFormat
name|format
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|serialize
operator|.
name|OutputFormat
argument_list|()
decl_stmt|;
name|format
operator|.
name|setIndenting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|format
operator|.
name|setEncoding
argument_list|(
literal|"ISO-8859-1"
argument_list|)
expr_stmt|;
name|format
operator|.
name|setPreserveSpace
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|format
operator|.
name|setLineSeparator
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|serialize
operator|.
name|XMLSerializer
name|serializer
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|serialize
operator|.
name|XMLSerializer
argument_list|(
name|out
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|domDoc
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
DECL|method|setSrc
specifier|public
name|void
name|setSrc
parameter_list|(
name|String
name|src
parameter_list|)
block|{
name|this
operator|.
name|src
operator|=
name|src
expr_stmt|;
block|}
DECL|method|setDest
specifier|public
name|void
name|setDest
parameter_list|(
name|String
name|dest
parameter_list|)
block|{
name|this
operator|.
name|dest
operator|=
name|dest
expr_stmt|;
block|}
DECL|method|setLog
specifier|public
name|void
name|setLog
parameter_list|(
name|String
name|log
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
block|}
DECL|method|setWarn
specifier|public
name|void
name|setWarn
parameter_list|(
name|String
name|warn
parameter_list|)
block|{
name|this
operator|.
name|warn
operator|=
name|warn
expr_stmt|;
block|}
DECL|method|setSummary
specifier|public
name|void
name|setSummary
parameter_list|(
name|String
name|summary
parameter_list|)
block|{
name|this
operator|.
name|summary
operator|=
name|summary
expr_stmt|;
block|}
comment|// using parent because jtidy dom is bugged, cannot get parent or delete child
DECL|method|stripDuplicateAttributes
specifier|public
specifier|static
name|void
name|stripDuplicateAttributes
parameter_list|(
name|Node
name|node
parameter_list|,
name|Node
name|parent
parameter_list|)
block|{
comment|// The output depends on the type of the node
switch|switch
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|DOCUMENT_NODE
case|:
block|{
name|Document
name|doc
init|=
operator|(
name|Document
operator|)
name|node
decl_stmt|;
name|Node
name|child
init|=
name|doc
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
name|stripDuplicateAttributes
argument_list|(
name|child
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|child
operator|=
name|child
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
block|{
name|Element
name|elt
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
name|NamedNodeMap
name|attrs
init|=
name|elt
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|ArrayList
name|nodesToRemove
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|int
name|nodesToRemoveNum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|a
init|=
name|attrs
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|attrs
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Node
name|b
init|=
name|attrs
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
comment|// if there are two attributes with same name
if|if
condition|(
operator|(
name|i
operator|!=
name|j
operator|)
operator|&&
operator|(
name|a
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|nodesToRemove
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|nodesToRemoveNum
operator|++
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodesToRemoveNum
condition|;
name|i
operator|++
control|)
block|{
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
name|nodeToDelete
init|=
operator|(
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
operator|)
name|nodesToRemove
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
name|nodeToDeleteParent
init|=
operator|(
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
operator|)
name|node
decl_stmt|;
comment|// nodeToDelete.getParentNode();
name|nodeToDeleteParent
operator|.
name|removeAttributeNode
argument_list|(
name|nodeToDelete
argument_list|)
expr_stmt|;
block|}
name|nodesToRemove
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Node
name|child
init|=
name|elt
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
name|stripDuplicateAttributes
argument_list|(
name|child
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|child
operator|=
name|child
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
default|default :
comment|// do nothing
break|break;
block|}
block|}
block|}
end_class
begin_comment
comment|/* The Krysalis Patchy Software License, Version 1.1_01 Copyright (c) 2002 Nicola Ken Barozzi.  All rights reserved.  This Licence is compatible with the BSD licence as described and  approved by http://www.opensource.org/, and is based on the Apache Software Licence Version 1.1.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:   1. Redistributions of source code must retain the above copyright     notice, this list of conditions and the following disclaimer.  2. Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in    the documentation and/or other materials provided with the    distribution.  3. The end-user documentation included with the redistribution,    if any, must include the following acknowledgment:       "This product includes software developed for project         Krysalis (http://www.krysalis.org/)."    Alternately, this acknowledgment may appear in the software itself,    if and wherever such third-party acknowledgments normally appear.  4. The names "Krysalis" and "Nicola Ken Barozzi" and    "Krysalis Centipede" must not be used to endorse or promote products    derived from this software without prior written permission. For    written permission, please contact krysalis@nicolaken.org.     5. Products derived from this software may not be called "Krysalis",    "Krysalis Centipede", nor may "Krysalis" appear in their name,    without prior written permission of Nicola Ken Barozzi.  6. This software may contain voluntary contributions made by many     individuals, who decided to donate the code to this project in    respect of this licence.  THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE KRYSALIS PROJECT OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ====================================================================*/
end_comment
end_unit
