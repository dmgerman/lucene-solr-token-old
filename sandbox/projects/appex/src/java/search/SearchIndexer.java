begin_unit
begin_package
DECL|package|search
package|package
name|search
package|;
end_package
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache POI" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Category
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|search
operator|.
name|contenthandler
operator|.
name|FileContentHandlerFactory
import|;
end_import
begin_comment
comment|/**  * Entry point for search engine indexing.  *<p>  * SearchIndexer is responsible for creating the IndexWriter  * {@see org.apache.lucene.index.IndexWriter} and passing it to  *  DocumentHandlers {@link DocumentHandler} to index individual documents.  *</p>  */
end_comment
begin_class
DECL|class|SearchIndexer
specifier|public
class|class
name|SearchIndexer
block|{
DECL|field|cat
specifier|private
specifier|static
name|Category
name|cat
init|=
name|Category
operator|.
name|getInstance
argument_list|(
name|SearchIndexer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fsWriter
specifier|private
name|IndexWriter
name|fsWriter
decl_stmt|;
DECL|field|config
specifier|private
name|SearchConfiguration
name|config
decl_stmt|;
DECL|field|indexedDocuments
specifier|private
name|int
name|indexedDocuments
init|=
literal|0
decl_stmt|;
DECL|method|SearchIndexer
specifier|public
name|SearchIndexer
parameter_list|()
throws|throws
name|IOException
block|{
name|Analyzer
name|a
init|=
operator|new
name|StandardAnalyzer
argument_list|()
decl_stmt|;
name|String
name|indexDirectory
init|=
literal|"/usr/path/to/index"
decl_stmt|;
name|fsWriter
operator|=
operator|new
name|IndexWriter
argument_list|(
name|indexDirectory
argument_list|,
name|a
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fsWriter
operator|.
name|maxFieldLength
operator|=
literal|1000000
expr_stmt|;
block|}
comment|/**      * Indexes documents.      */
DECL|method|index
specifier|public
specifier|synchronized
name|void
name|index
parameter_list|()
throws|throws
name|IOException
throws|,
name|Exception
block|{
name|cat
operator|.
name|debug
argument_list|(
literal|"Initiating search engine indexing..."
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|loadConfig
argument_list|()
expr_stmt|;
name|fsWriter
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|fsWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|stop
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|cat
operator|.
name|debug
argument_list|(
literal|"Indexing took "
operator|+
operator|(
name|stop
operator|-
name|start
operator|)
operator|+
literal|" milliseconds"
argument_list|)
expr_stmt|;
block|}
DECL|method|getIndexedDocuments
specifier|public
name|int
name|getIndexedDocuments
parameter_list|()
block|{
return|return
name|this
operator|.
name|indexedDocuments
return|;
block|}
DECL|method|loadConfig
specifier|private
name|void
name|loadConfig
parameter_list|()
throws|throws
name|IllegalConfigurationException
block|{
name|config
operator|=
operator|new
name|SearchConfiguration
argument_list|(
literal|"/path/to/config"
argument_list|)
expr_stmt|;
name|FileContentHandlerFactory
operator|.
name|setHandlerRegistry
argument_list|(
name|config
operator|.
name|getContentHandlers
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|indexDataSource
specifier|private
name|void
name|indexDataSource
parameter_list|(
name|DataSource
name|source
parameter_list|,
name|Map
name|customFields
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
index|[]
name|data
init|=
name|source
operator|.
name|getData
argument_list|()
decl_stmt|;
comment|// here's a good place to spawn a couple of threads for indexing
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DocumentHandler
name|docHandler
init|=
operator|new
name|DocumentHandler
argument_list|(
name|data
index|[
name|i
index|]
argument_list|,
name|customFields
argument_list|,
name|fsWriter
argument_list|)
decl_stmt|;
name|docHandler
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
