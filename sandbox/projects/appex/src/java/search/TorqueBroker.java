begin_unit
begin_package
DECL|package|search
package|package
name|search
package|;
end_package
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Category
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|torque
operator|.
name|om
operator|.
name|ComboKey
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|torque
operator|.
name|om
operator|.
name|ObjectKey
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|torque
operator|.
name|om
operator|.
name|StringKey
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|torque
operator|.
name|pool
operator|.
name|DBConnection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|torque
operator|.
name|util
operator|.
name|Criteria
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * Torque implementation of the Broker interface.  *  * @author<a href="mailto:soonping@relevanz.com">Phang Soon-Ping</a>  */
end_comment
begin_class
DECL|class|TorqueBroker
specifier|public
class|class
name|TorqueBroker
implements|implements
name|Broker
block|{
DECL|field|classMap
specifier|protected
specifier|static
name|Map
name|classMap
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
DECL|field|cat
specifier|private
specifier|static
name|Category
name|cat
init|=
name|Category
operator|.
name|getInstance
argument_list|(
name|TorqueBroker
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PEER_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|PEER_SUFFIX
init|=
literal|"Peer"
decl_stmt|;
DECL|field|peer
specifier|protected
name|Object
name|peer
decl_stmt|;
DECL|method|TorqueBroker
specifier|public
name|TorqueBroker
parameter_list|(
name|Class
name|bObj
parameter_list|)
throws|throws
name|NoSuchBrokerException
block|{
name|String
name|className
init|=
name|bObj
operator|.
name|getName
argument_list|()
decl_stmt|;
name|peer
operator|=
name|classMap
operator|.
name|get
argument_list|(
name|bObj
argument_list|)
expr_stmt|;
if|if
condition|(
name|peer
operator|==
literal|null
condition|)
block|{
name|String
name|peerClassName
init|=
name|className
operator|+
name|PEER_SUFFIX
decl_stmt|;
try|try
block|{
name|peer
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|peerClassName
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|classMap
operator|.
name|put
argument_list|(
name|bObj
argument_list|,
name|peer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchBrokerException
argument_list|(
literal|"Unable to obtain a broker for "
operator|+
name|bObj
operator|.
name|getName
argument_list|()
operator|+
literal|'.'
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|doSelect
specifier|public
specifier|synchronized
name|List
name|doSelect
parameter_list|(
name|Criteria
name|crit
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|List
operator|)
name|invokeMethod
argument_list|(
name|peer
argument_list|,
literal|"doSelect"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Criteria
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|crit
block|}
argument_list|)
return|;
block|}
DECL|method|doSelect
specifier|public
specifier|synchronized
name|List
name|doSelect
parameter_list|(
name|Criteria
name|crit
parameter_list|,
name|DBConnection
name|dbCon
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|List
operator|)
name|invokeMethod
argument_list|(
name|peer
argument_list|,
literal|"doSelect"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Criteria
operator|.
name|class
block|,
name|DBConnection
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|crit
block|,
name|dbCon
block|}
argument_list|)
return|;
block|}
DECL|method|getSingleObject
specifier|public
specifier|synchronized
name|Object
name|getSingleObject
parameter_list|(
name|Criteria
name|crit
parameter_list|)
throws|throws
name|ObjectNotFoundException
throws|,
name|Exception
block|{
name|List
name|matchingObjects
init|=
name|doSelect
argument_list|(
name|crit
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matchingObjects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|matchingObjects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ObjectNotFoundException
argument_list|(
name|crit
argument_list|)
throw|;
block|}
block|}
DECL|method|retrieveByPK
specifier|public
specifier|synchronized
name|Object
name|retrieveByPK
parameter_list|(
name|String
index|[]
name|pk
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectKey
name|oKey
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pk
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|StringKey
index|[]
name|strKeys
init|=
operator|new
name|StringKey
index|[
name|pk
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pk
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|strKeys
index|[
name|i
index|]
operator|=
operator|new
name|StringKey
argument_list|(
name|pk
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|oKey
operator|=
operator|new
name|ComboKey
argument_list|(
name|strKeys
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|oKey
operator|=
operator|new
name|StringKey
argument_list|(
name|pk
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|invokeMethod
argument_list|(
name|peer
argument_list|,
literal|"retrieveByPK"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|ObjectKey
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|oKey
block|}
argument_list|)
return|;
block|}
DECL|method|retrieveByPK
specifier|public
specifier|synchronized
name|Object
name|retrieveByPK
parameter_list|(
name|String
name|pk
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectKey
name|oKey
init|=
operator|new
name|StringKey
argument_list|(
name|pk
argument_list|)
decl_stmt|;
return|return
name|invokeMethod
argument_list|(
name|peer
argument_list|,
literal|"retrieveByPK"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|ObjectKey
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|oKey
block|}
argument_list|)
return|;
block|}
comment|/**      * Utility method to invoke an object's method.      * @param o Object to invoke the method on.      * @param methodname Name of the method to invoke.      * @param parameter Method parameters.      * @param args Arguments the method requires.      * @return Object returned by the method.      */
DECL|method|invokeMethod
specifier|private
specifier|static
name|Object
name|invokeMethod
parameter_list|(
name|Object
name|o
parameter_list|,
name|String
name|methodname
parameter_list|,
name|Class
index|[]
name|parameter
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
block|{
name|Class
name|c
init|=
name|o
operator|.
name|getClass
argument_list|()
decl_stmt|;
try|try
block|{
name|Method
name|m
init|=
name|c
operator|.
name|getMethod
argument_list|(
name|methodname
argument_list|,
name|parameter
argument_list|)
decl_stmt|;
return|return
name|m
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nsme
parameter_list|)
block|{
name|cat
operator|.
name|error
argument_list|(
name|nsme
operator|.
name|getMessage
argument_list|()
operator|+
literal|" This method doesn't exist.."
argument_list|,
name|nsme
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|iae
parameter_list|)
block|{
name|cat
operator|.
name|error
argument_list|(
literal|"No access to "
operator|+
name|iae
operator|.
name|getMessage
argument_list|()
operator|+
literal|"."
argument_list|,
name|iae
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
name|cat
operator|.
name|error
argument_list|(
literal|"Trouble invoking "
operator|+
name|ite
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ite
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class
end_unit
