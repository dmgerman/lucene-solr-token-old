begin_unit
begin_package
DECL|package|search
package|package
name|search
package|;
end_package
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Turbine" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Turbine", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Category
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DateField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|search
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|search
operator|.
name|contenthandler
operator|.
name|FileContentHandler
import|;
end_import
begin_import
import|import
name|search
operator|.
name|contenthandler
operator|.
name|ContentHandlerFactory
import|;
end_import
begin_comment
comment|/**  *<p>  * A document is the atomic unit used for indexing purposes. It consists of  * metadata as well as its file contents. File contents are handled by {@link FileContentHandler}.  *</p>  *<p>  * DocumentHandler creates the {@link org.apache.lucene.document.Document},  * adds the standard fields to it, delegates to {@link FileContentHandler} to handle  * file contents, then adds to the {@link org.apache.lucene.index.IndexWriter}.  *</p>  *<p>  * The standard fields are:<br>  *<ul>  *<li>filePath : Full filesystem path to the document  *<li>fileName : File name of the document  *<li>fileLastModifiedDate : Date the file was last modified  *<li>fileSize : Size of the file in bytes  *<li>fileFormat : Extension of the file {@see com.marketingbright.core.util.IOUtils#getFileExtension}  *</ul>  *</p>  *  * @author<a href="mailto:kelvin@relevanz.com">Kelvin Tan</a>  */
end_comment
begin_class
DECL|class|DocumentHandler
specifier|public
class|class
name|DocumentHandler
block|{
DECL|field|STANDARD_SEARCH_FIELDS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|STANDARD_SEARCH_FIELDS
init|=
block|{
literal|"filePath"
block|,
literal|"fileName"
block|,
literal|"fileLastModifiedDate"
block|,
literal|"fileSize"
block|,
literal|"fileFormat"
block|}
decl_stmt|;
DECL|field|cat
specifier|private
specifier|static
name|Category
name|cat
init|=
name|Category
operator|.
name|getInstance
argument_list|(
name|DocumentHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|customFields
specifier|private
specifier|static
name|Map
name|customFields
decl_stmt|;
DECL|field|EMPTY_STRING
specifier|private
specifier|static
specifier|final
name|String
name|EMPTY_STRING
init|=
literal|""
decl_stmt|;
comment|/**      * Document object this DocumentHandler is handling.      */
DECL|field|doc
specifier|private
name|Document
name|doc
decl_stmt|;
comment|/**      * Parent Document (null if none).      */
DECL|field|parentDoc
specifier|private
name|Document
name|parentDoc
decl_stmt|;
comment|/**      * IndexWriter to add this document to.      */
DECL|field|writer
specifier|private
name|IndexWriter
name|writer
decl_stmt|;
DECL|method|setCustomFields
specifier|public
specifier|static
name|void
name|setCustomFields
parameter_list|(
name|Map
name|aCustomFields
parameter_list|)
block|{
name|customFields
operator|=
name|aCustomFields
expr_stmt|;
block|}
DECL|method|DocumentHandler
specifier|public
name|DocumentHandler
parameter_list|(
name|IndexWriter
name|writer
parameter_list|)
block|{
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
block|}
DECL|method|DocumentHandler
specifier|public
name|DocumentHandler
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|Document
name|parentDoc
parameter_list|)
block|{
name|this
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|this
operator|.
name|parentDoc
operator|=
name|parentDoc
expr_stmt|;
block|}
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|Map
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|contentFile
init|=
operator|new
name|File
argument_list|(
operator|(
name|String
operator|)
name|metadata
operator|.
name|get
argument_list|(
literal|"filePath"
argument_list|)
argument_list|)
decl_stmt|;
comment|// add the standard fields
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Keyword
argument_list|(
literal|"filePath"
argument_list|,
name|contentFile
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
literal|"fileName"
argument_list|,
name|contentFile
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Keyword
argument_list|(
literal|"fileLastModifiedDate"
argument_list|,
name|DateField
operator|.
name|timeToString
argument_list|(
name|contentFile
operator|.
name|lastModified
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Keyword
argument_list|(
literal|"fileSize"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|contentFile
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
literal|"fileFormat"
argument_list|,
name|IOUtils
operator|.
name|getFileExtension
argument_list|(
name|contentFile
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if this is a document from datasource where
comment|// custom fields need to be added
if|if
condition|(
name|parentDoc
operator|==
literal|null
condition|)
block|{
comment|// add the custom fields
for|for
control|(
name|Iterator
name|it
init|=
name|customFields
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|field
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|value
init|=
operator|(
name|String
operator|)
name|metadata
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|String
name|type
init|=
operator|(
name|String
operator|)
name|customFields
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|addFieldToDoc
argument_list|(
name|type
argument_list|,
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|// Add OBJECT_CLASS_FIELD and OBJECT_IDENTIFIER
comment|// to populate the result templates with the proper
comment|// objects
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|UnIndexed
argument_list|(
name|DataSource
operator|.
name|OBJECT_CLASS
argument_list|,
operator|(
name|String
operator|)
name|metadata
operator|.
name|get
argument_list|(
name|DataSource
operator|.
name|OBJECT_CLASS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|DataSource
operator|.
name|OBJECT_IDENTIFIER
argument_list|,
operator|(
name|String
operator|)
name|metadata
operator|.
name|get
argument_list|(
name|DataSource
operator|.
name|OBJECT_IDENTIFIER
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|customFields
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|field
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|parentDoc
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|String
name|type
init|=
operator|(
name|String
operator|)
name|customFields
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|addFieldToDoc
argument_list|(
name|type
argument_list|,
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|// Add OBJECT_CLASS_FIELD and OBJECT_IDENTIFIER
comment|// to populate the result templates with the proper
comment|// objects
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|UnIndexed
argument_list|(
name|DataSource
operator|.
name|OBJECT_CLASS
argument_list|,
name|parentDoc
operator|.
name|get
argument_list|(
name|DataSource
operator|.
name|OBJECT_CLASS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|DataSource
operator|.
name|OBJECT_IDENTIFIER
argument_list|,
name|parentDoc
operator|.
name|get
argument_list|(
name|DataSource
operator|.
name|OBJECT_IDENTIFIER
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|metadata
operator|.
name|containsKey
argument_list|(
literal|"fileContents"
argument_list|)
condition|)
block|{
name|String
name|extension
init|=
name|IOUtils
operator|.
name|getFileExtension
argument_list|(
name|contentFile
argument_list|)
decl_stmt|;
name|FileContentHandler
name|cHandler
init|=
name|ContentHandlerFactory
operator|.
name|getContentHandler
argument_list|(
name|extension
argument_list|)
decl_stmt|;
if|if
condition|(
name|cHandler
operator|!=
literal|null
condition|)
block|{
name|cHandler
operator|.
name|parse
argument_list|(
name|doc
argument_list|,
name|contentFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|cHandler
operator|.
name|isNested
argument_list|()
condition|)
block|{
name|List
name|nestedData
init|=
name|cHandler
operator|.
name|getNestedData
argument_list|()
decl_stmt|;
name|cat
operator|.
name|debug
argument_list|(
literal|"Nested data list size:"
operator|+
name|nestedData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nestedData
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Map
name|dataMap
init|=
operator|(
name|Map
operator|)
name|nestedData
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DocumentHandler
name|handler
init|=
operator|new
name|DocumentHandler
argument_list|(
name|writer
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|handler
operator|.
name|process
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|cat
operator|.
name|warn
argument_list|(
literal|"FileContentHandler not found for "
operator|+
name|contentFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
literal|"fileContents"
argument_list|,
operator|(
name|String
operator|)
name|metadata
operator|.
name|get
argument_list|(
literal|"fileContents"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|addToWriter
argument_list|()
expr_stmt|;
block|}
DECL|method|addToWriter
specifier|public
name|void
name|addToWriter
parameter_list|()
throws|throws
name|IOException
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|this
operator|.
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|addFieldToDoc
specifier|private
name|void
name|addFieldToDoc
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
name|value
operator|=
name|EMPTY_STRING
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
name|SearchConfiguration
operator|.
name|TEXT_FIELD_TYPE
argument_list|)
condition|)
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
name|SearchConfiguration
operator|.
name|KEYWORD_FIELD_TYPE
argument_list|)
condition|)
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Keyword
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
name|SearchConfiguration
operator|.
name|UNINDEXED_FIELD_TYPE
argument_list|)
condition|)
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|UnIndexed
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
name|SearchConfiguration
operator|.
name|UNSTORED_FIELD_TYPE
argument_list|)
condition|)
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|UnStored
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
