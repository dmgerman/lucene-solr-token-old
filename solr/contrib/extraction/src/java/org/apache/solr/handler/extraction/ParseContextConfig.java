begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.extraction
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|extraction
package|;
end_package
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|BeanInfo
import|;
end_import
begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|Introspector
import|;
end_import
begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyDescriptor
import|;
end_import
begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyEditor
import|;
end_import
begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyEditorManager
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import
begin_class
DECL|class|ParseContextConfig
specifier|public
class|class
name|ParseContextConfig
block|{
DECL|field|entries
specifier|private
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Object
argument_list|>
name|entries
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Creates an empty Config without any settings (used as placeholder). */
DECL|method|ParseContextConfig
specifier|public
name|ParseContextConfig
parameter_list|()
block|{   }
comment|/** Creates a {@code ParseContextConfig} from the given XML DOM element. */
DECL|method|ParseContextConfig
specifier|public
name|ParseContextConfig
parameter_list|(
name|SolrResourceLoader
name|resourceLoader
parameter_list|,
name|Element
name|element
parameter_list|)
throws|throws
name|Exception
block|{
name|extract
argument_list|(
name|element
argument_list|,
name|resourceLoader
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a {@code ParseContextConfig} from the given XML file, loaded from the given {@link SolrResourceLoader}. */
DECL|method|ParseContextConfig
specifier|public
name|ParseContextConfig
parameter_list|(
name|SolrResourceLoader
name|resourceLoader
parameter_list|,
name|String
name|parseContextConfigLoc
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|resourceLoader
argument_list|,
name|loadConfigFile
argument_list|(
name|resourceLoader
argument_list|,
name|parseContextConfigLoc
argument_list|)
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|loadConfigFile
specifier|private
specifier|static
name|Document
name|loadConfigFile
parameter_list|(
name|SolrResourceLoader
name|resourceLoader
parameter_list|,
name|String
name|parseContextConfigLoc
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|InputStream
name|in
init|=
name|resourceLoader
operator|.
name|openResource
argument_list|(
name|parseContextConfigLoc
argument_list|)
init|)
block|{
return|return
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
operator|.
name|parse
argument_list|(
name|in
argument_list|,
name|parseContextConfigLoc
argument_list|)
return|;
block|}
block|}
DECL|method|extract
specifier|private
name|void
name|extract
parameter_list|(
name|Element
name|element
parameter_list|,
name|SolrResourceLoader
name|loader
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|NodeList
name|xmlEntries
init|=
name|element
operator|.
name|getElementsByTagName
argument_list|(
literal|"entry"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|c1
init|=
name|xmlEntries
operator|.
name|getLength
argument_list|()
init|;
name|i
operator|<
name|c1
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|NamedNodeMap
name|xmlEntryAttributes
init|=
name|xmlEntries
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
specifier|final
name|String
name|className
init|=
name|xmlEntryAttributes
operator|.
name|getNamedItem
argument_list|(
literal|"class"
argument_list|)
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
specifier|final
name|String
name|implementationName
init|=
name|xmlEntryAttributes
operator|.
name|getNamedItem
argument_list|(
literal|"impl"
argument_list|)
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
specifier|final
name|NodeList
name|xmlProperties
init|=
operator|(
operator|(
name|Element
operator|)
name|xmlEntries
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getElementsByTagName
argument_list|(
literal|"property"
argument_list|)
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|interfaceClass
init|=
name|loader
operator|.
name|findClass
argument_list|(
name|className
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|BeanInfo
name|beanInfo
init|=
name|Introspector
operator|.
name|getBeanInfo
argument_list|(
name|interfaceClass
argument_list|,
name|Introspector
operator|.
name|IGNORE_ALL_BEANINFO
argument_list|)
decl_stmt|;
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|PropertyDescriptor
argument_list|>
name|descriptorMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|PropertyDescriptor
name|pd
range|:
name|beanInfo
operator|.
name|getPropertyDescriptors
argument_list|()
control|)
block|{
name|descriptorMap
operator|.
name|put
argument_list|(
name|pd
operator|.
name|getName
argument_list|()
argument_list|,
name|pd
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Object
name|instance
init|=
name|loader
operator|.
name|newInstance
argument_list|(
name|implementationName
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|interfaceClass
operator|.
name|isInstance
argument_list|(
name|instance
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Implementation class does not extend "
operator|+
name|interfaceClass
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|,
name|c2
init|=
name|xmlProperties
operator|.
name|getLength
argument_list|()
init|;
name|j
operator|<
name|c2
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|Node
name|xmlProperty
init|=
name|xmlProperties
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
specifier|final
name|NamedNodeMap
name|xmlPropertyAttributes
init|=
name|xmlProperty
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
specifier|final
name|String
name|propertyName
init|=
name|xmlPropertyAttributes
operator|.
name|getNamedItem
argument_list|(
literal|"name"
argument_list|)
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
specifier|final
name|String
name|propertyValue
init|=
name|xmlPropertyAttributes
operator|.
name|getNamedItem
argument_list|(
literal|"value"
argument_list|)
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
specifier|final
name|PropertyDescriptor
name|propertyDescriptor
init|=
name|descriptorMap
operator|.
name|get
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyDescriptor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"Unknown bean property %s in class %s"
argument_list|,
name|propertyName
argument_list|,
name|interfaceClass
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|Method
name|method
init|=
name|propertyDescriptor
operator|.
name|getWriteMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"Cannot set bean property %s in class %s (no write method available)"
argument_list|,
name|propertyName
argument_list|,
name|interfaceClass
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|method
operator|.
name|invoke
argument_list|(
name|instance
argument_list|,
name|getValueFromString
argument_list|(
name|propertyDescriptor
operator|.
name|getPropertyType
argument_list|()
argument_list|,
name|propertyValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|entries
operator|.
name|put
argument_list|(
name|interfaceClass
argument_list|,
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getValueFromString
specifier|private
name|Object
name|getValueFromString
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|targetType
parameter_list|,
name|String
name|text
parameter_list|)
block|{
specifier|final
name|PropertyEditor
name|editor
init|=
name|PropertyEditorManager
operator|.
name|findEditor
argument_list|(
name|targetType
argument_list|)
decl_stmt|;
if|if
condition|(
name|editor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot set properties of type "
operator|+
name|targetType
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|editor
operator|.
name|setAsText
argument_list|(
name|text
argument_list|)
expr_stmt|;
return|return
name|editor
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|create
specifier|public
name|ParseContext
name|create
parameter_list|()
block|{
specifier|final
name|ParseContext
name|result
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|entries
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|result
operator|.
name|set
argument_list|(
operator|(
name|Class
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class
end_unit
