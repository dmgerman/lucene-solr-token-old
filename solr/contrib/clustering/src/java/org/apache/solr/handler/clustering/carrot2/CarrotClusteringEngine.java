begin_unit
begin_package
DECL|package|org.apache.solr.handler.clustering.carrot2
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|clustering
operator|.
name|carrot2
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ObjectUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|HighlightParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|clustering
operator|.
name|SearchClusteringEngine
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|HighlightComponent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|highlight
operator|.
name|SolrHighlighter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocSlice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|SolrPluginUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|carrot2
operator|.
name|core
operator|.
name|Cluster
import|;
end_import
begin_import
import|import
name|org
operator|.
name|carrot2
operator|.
name|core
operator|.
name|Controller
import|;
end_import
begin_import
import|import
name|org
operator|.
name|carrot2
operator|.
name|core
operator|.
name|ControllerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|carrot2
operator|.
name|core
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|carrot2
operator|.
name|core
operator|.
name|IClusteringAlgorithm
import|;
end_import
begin_import
import|import
name|org
operator|.
name|carrot2
operator|.
name|core
operator|.
name|LanguageCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|carrot2
operator|.
name|core
operator|.
name|attribute
operator|.
name|AttributeNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|carrot2
operator|.
name|text
operator|.
name|linguistic
operator|.
name|DefaultLexicalDataFactoryDescriptor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|carrot2
operator|.
name|text
operator|.
name|preprocessing
operator|.
name|pipeline
operator|.
name|BasicPreprocessingPipelineDescriptor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|carrot2
operator|.
name|util
operator|.
name|resource
operator|.
name|ClassLoaderLocator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|carrot2
operator|.
name|util
operator|.
name|resource
operator|.
name|IResource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|carrot2
operator|.
name|util
operator|.
name|resource
operator|.
name|IResourceLocator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|carrot2
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceLookup
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closeables
import|;
end_import
begin_comment
comment|/**  * Search results clustering engine based on Carrot2 clustering algorithms.  *<p/>  * Output from this class is subject to change.  *  * @see "http://project.carrot2.org"  */
end_comment
begin_class
DECL|class|CarrotClusteringEngine
specifier|public
class|class
name|CarrotClusteringEngine
extends|extends
name|SearchClusteringEngine
block|{
DECL|field|log
specifier|private
specifier|transient
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CarrotClusteringEngine
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * The subdirectory in Solr config dir to read customized Carrot2 resources from.    */
DECL|field|CARROT_RESOURCES_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|CARROT_RESOURCES_PREFIX
init|=
literal|"clustering/carrot2"
decl_stmt|;
comment|/**    * Name of Carrot2 document's field containing Solr document's identifier.    */
DECL|field|SOLR_DOCUMENT_ID
specifier|private
specifier|static
specifier|final
name|String
name|SOLR_DOCUMENT_ID
init|=
literal|"solrId"
decl_stmt|;
comment|/**    * Name of Solr document's field containing the document's identifier. To avoid    * repeating the content of documents in clusters on output, each cluster contains    * identifiers of documents it contains.    */
DECL|field|idFieldName
specifier|private
name|String
name|idFieldName
decl_stmt|;
comment|/**    * Carrot2 controller that manages instances of clustering algorithms    */
DECL|field|controller
specifier|private
name|Controller
name|controller
init|=
name|ControllerFactory
operator|.
name|createPooling
argument_list|()
decl_stmt|;
DECL|field|clusteringAlgorithmClass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|IClusteringAlgorithm
argument_list|>
name|clusteringAlgorithmClass
decl_stmt|;
DECL|class|SolrResourceLocator
specifier|private
specifier|static
class|class
name|SolrResourceLocator
implements|implements
name|IResourceLocator
block|{
DECL|field|resourceLoader
specifier|private
specifier|final
name|SolrResourceLoader
name|resourceLoader
decl_stmt|;
DECL|field|carrot2ResourcesDir
specifier|private
specifier|final
name|String
name|carrot2ResourcesDir
decl_stmt|;
DECL|method|SolrResourceLocator
specifier|public
name|SolrResourceLocator
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|SolrParams
name|initParams
parameter_list|)
block|{
name|resourceLoader
operator|=
name|core
operator|.
name|getResourceLoader
argument_list|()
expr_stmt|;
name|carrot2ResourcesDir
operator|=
name|initParams
operator|.
name|get
argument_list|(
name|CarrotParams
operator|.
name|LEXICAL_RESOURCES_DIR
argument_list|,
name|CARROT_RESOURCES_PREFIX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAll
specifier|public
name|IResource
index|[]
name|getAll
parameter_list|(
specifier|final
name|String
name|resource
parameter_list|)
block|{
specifier|final
name|String
name|resourceName
init|=
name|carrot2ResourcesDir
operator|+
literal|"/"
operator|+
name|resource
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Looking for Solr resource: "
operator|+
name|resourceName
argument_list|)
expr_stmt|;
name|InputStream
name|resourceStream
init|=
literal|null
decl_stmt|;
specifier|final
name|byte
index|[]
name|asBytes
decl_stmt|;
try|try
block|{
name|resourceStream
operator|=
name|resourceLoader
operator|.
name|openResource
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
name|asBytes
operator|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|resourceStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Resource not found in Solr's config: "
operator|+
name|resourceName
operator|+
literal|". Using the default "
operator|+
name|resource
operator|+
literal|" from Carrot JAR."
argument_list|)
expr_stmt|;
return|return
operator|new
name|IResource
index|[]
block|{}
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not read Solr resource "
operator|+
name|resourceName
argument_list|)
expr_stmt|;
return|return
operator|new
name|IResource
index|[]
block|{}
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|resourceStream
operator|!=
literal|null
condition|)
name|Closeables
operator|.
name|closeQuietly
argument_list|(
name|resourceStream
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Loaded Solr resource: "
operator|+
name|resourceName
argument_list|)
expr_stmt|;
specifier|final
name|IResource
name|foundResource
init|=
operator|new
name|IResource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InputStream
name|open
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|asBytes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// In case multiple resources are found they will be deduped, but we don't use it in Solr,
comment|// so simply rely on instance equivalence.
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
comment|// In case multiple resources are found they will be deduped, but we don't use it in Solr,
comment|// so simply rely on instance equivalence.
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Solr config resource: "
operator|+
name|resourceName
return|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|IResource
index|[]
block|{
name|foundResource
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// In case multiple locations are used locators will be deduped, but we don't use it in Solr,
comment|// so simply rely on instance equivalence.
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
comment|// In case multiple locations are used locators will be deduped, but we don't use it in Solr,
comment|// so simply rely on instance equivalence.
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SolrResourceLocator, "
operator|+
literal|"configDir="
operator|+
operator|new
name|File
argument_list|(
name|resourceLoader
operator|.
name|getConfigDir
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|", Carrot2 relative lexicalResourcesDir="
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|cluster
specifier|public
name|Object
name|cluster
parameter_list|(
name|Query
name|query
parameter_list|,
name|DocList
name|docList
parameter_list|,
name|SolrQueryRequest
name|sreq
parameter_list|)
block|{
name|SolrIndexSearcher
name|searcher
init|=
name|sreq
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
name|SolrDocumentList
name|solrDocList
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|SolrDocument
argument_list|,
name|Integer
argument_list|>
name|docIds
init|=
operator|new
name|HashMap
argument_list|<
name|SolrDocument
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|docList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|solrDocList
operator|=
name|SolrPluginUtils
operator|.
name|docListToSolrDocumentList
argument_list|(
name|docList
argument_list|,
name|searcher
argument_list|,
name|getFieldsToLoad
argument_list|(
name|sreq
argument_list|)
argument_list|,
name|docIds
argument_list|)
expr_stmt|;
return|return
name|cluster
argument_list|(
name|query
argument_list|,
name|solrDocList
argument_list|,
name|docIds
argument_list|,
name|sreq
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|cluster
specifier|public
name|Object
name|cluster
parameter_list|(
name|Query
name|query
parameter_list|,
name|SolrDocumentList
name|solrDocList
parameter_list|,
name|Map
argument_list|<
name|SolrDocument
argument_list|,
name|Integer
argument_list|>
name|docIds
parameter_list|,
name|SolrQueryRequest
name|sreq
parameter_list|)
block|{
try|try
block|{
comment|// Prepare attributes for Carrot2 clustering call
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Document
argument_list|>
name|documents
init|=
name|getDocuments
argument_list|(
name|solrDocList
argument_list|,
name|docIds
argument_list|,
name|query
argument_list|,
name|sreq
argument_list|)
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|AttributeNames
operator|.
name|DOCUMENTS
argument_list|,
name|documents
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|AttributeNames
operator|.
name|QUERY
argument_list|,
name|query
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Pass the fields on which clustering runs to the
comment|// SolrStopwordsCarrot2LexicalDataFactory
name|attributes
operator|.
name|put
argument_list|(
literal|"solrFieldNames"
argument_list|,
name|getFieldsForClustering
argument_list|(
name|sreq
argument_list|)
argument_list|)
expr_stmt|;
comment|// Pass extra overriding attributes from the request, if any
name|extractCarrotAttributes
argument_list|(
name|sreq
operator|.
name|getParams
argument_list|()
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
comment|// Perform clustering and convert to named list
return|return
name|clustersToNamedList
argument_list|(
name|controller
operator|.
name|process
argument_list|(
name|attributes
argument_list|,
name|clusteringAlgorithmClass
argument_list|)
operator|.
name|getClusters
argument_list|()
argument_list|,
name|sreq
operator|.
name|getParams
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Carrot2 clustering failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Carrot2 clustering failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|init
specifier|public
name|String
name|init
parameter_list|(
name|NamedList
name|config
parameter_list|,
specifier|final
name|SolrCore
name|core
parameter_list|)
block|{
name|String
name|result
init|=
name|super
operator|.
name|init
argument_list|(
name|config
argument_list|,
name|core
argument_list|)
decl_stmt|;
specifier|final
name|SolrParams
name|initParams
init|=
name|SolrParams
operator|.
name|toSolrParams
argument_list|(
name|config
argument_list|)
decl_stmt|;
comment|// Initialize Carrot2 controller. Pass initialization attributes, if any.
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|initAttributes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|extractCarrotAttributes
argument_list|(
name|initParams
argument_list|,
name|initAttributes
argument_list|)
expr_stmt|;
comment|// Customize the stemmer and tokenizer factories. The implementations we provide here
comment|// are included in the code base of Solr, so that it's possible to refactor
comment|// the Lucene APIs the factories rely on if needed.
comment|// Additionally, we set a custom lexical resource factory for Carrot2 that
comment|// will use both Carrot2 default stop words as well as stop words from
comment|// the StopFilter defined on the field.
name|BasicPreprocessingPipelineDescriptor
operator|.
name|attributeBuilder
argument_list|(
name|initAttributes
argument_list|)
operator|.
name|stemmerFactory
argument_list|(
name|LuceneCarrot2StemmerFactory
operator|.
name|class
argument_list|)
operator|.
name|tokenizerFactory
argument_list|(
name|LuceneCarrot2TokenizerFactory
operator|.
name|class
argument_list|)
operator|.
name|lexicalDataFactory
argument_list|(
name|SolrStopwordsCarrot2LexicalDataFactory
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Pass the schema to SolrStopwordsCarrot2LexicalDataFactory.
name|initAttributes
operator|.
name|put
argument_list|(
literal|"solrIndexSchema"
argument_list|,
name|core
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
comment|// Customize Carrot2's resource lookup to first look for resources
comment|// using Solr's resource loader. If that fails, try loading from the classpath.
name|DefaultLexicalDataFactoryDescriptor
operator|.
name|attributeBuilder
argument_list|(
name|initAttributes
argument_list|)
operator|.
name|resourceLookup
argument_list|(
operator|new
name|ResourceLookup
argument_list|(
comment|// Solr-specific resource loading.
operator|new
name|SolrResourceLocator
argument_list|(
name|core
argument_list|,
name|initParams
argument_list|)
argument_list|,
comment|// Using the class loader directly because this time we want to omit the prefix
operator|new
name|ClassLoaderLocator
argument_list|(
name|core
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|init
argument_list|(
name|initAttributes
argument_list|)
expr_stmt|;
name|SchemaField
name|uniqueField
init|=
name|core
operator|.
name|getSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
decl_stmt|;
if|if
condition|(
name|uniqueField
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|CarrotClusteringEngine
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" requires the schema to have a uniqueKeyField"
argument_list|)
throw|;
block|}
name|this
operator|.
name|idFieldName
operator|=
name|uniqueField
operator|.
name|getName
argument_list|()
expr_stmt|;
comment|// Make sure the requested Carrot2 clustering algorithm class is available
name|String
name|carrotAlgorithmClassName
init|=
name|initParams
operator|.
name|get
argument_list|(
name|CarrotParams
operator|.
name|ALGORITHM
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|algorithmClass
init|=
name|core
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|findClass
argument_list|(
name|carrotAlgorithmClassName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|IClusteringAlgorithm
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|algorithmClass
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Class provided as "
operator|+
name|CarrotParams
operator|.
name|ALGORITHM
operator|+
literal|" must implement "
operator|+
name|IClusteringAlgorithm
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|clusteringAlgorithmClass
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|IClusteringAlgorithm
argument_list|>
operator|)
name|algorithmClass
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|getFieldsToLoad
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|getFieldsToLoad
parameter_list|(
name|SolrQueryRequest
name|sreq
parameter_list|)
block|{
name|SolrParams
name|solrParams
init|=
name|sreq
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|getFieldsForClustering
argument_list|(
name|sreq
argument_list|)
argument_list|)
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|idFieldName
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|solrParams
operator|.
name|get
argument_list|(
name|CarrotParams
operator|.
name|URL_FIELD_NAME
argument_list|,
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fields
return|;
block|}
comment|/**    * Returns the names of fields that will be delivering the actual    * content for clustering. Currently, there are two such fields: document    * title and document content.    */
DECL|method|getFieldsForClustering
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getFieldsForClustering
parameter_list|(
name|SolrQueryRequest
name|sreq
parameter_list|)
block|{
name|SolrParams
name|solrParams
init|=
name|sreq
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|titleFieldSpec
init|=
name|solrParams
operator|.
name|get
argument_list|(
name|CarrotParams
operator|.
name|TITLE_FIELD_NAME
argument_list|,
literal|"title"
argument_list|)
decl_stmt|;
name|String
name|snippetFieldSpec
init|=
name|solrParams
operator|.
name|get
argument_list|(
name|CarrotParams
operator|.
name|SNIPPET_FIELD_NAME
argument_list|,
name|titleFieldSpec
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|snippetFieldSpec
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|CarrotParams
operator|.
name|SNIPPET_FIELD_NAME
operator|+
literal|" must not be blank."
argument_list|)
throw|;
block|}
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|fields
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|titleFieldSpec
operator|.
name|split
argument_list|(
literal|"[, ]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|snippetFieldSpec
operator|.
name|split
argument_list|(
literal|"[, ]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fields
return|;
block|}
comment|/**    * Prepares Carrot2 documents for clustering.    */
DECL|method|getDocuments
specifier|private
name|List
argument_list|<
name|Document
argument_list|>
name|getDocuments
parameter_list|(
name|SolrDocumentList
name|solrDocList
parameter_list|,
name|Map
argument_list|<
name|SolrDocument
argument_list|,
name|Integer
argument_list|>
name|docIds
parameter_list|,
name|Query
name|query
parameter_list|,
specifier|final
name|SolrQueryRequest
name|sreq
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrHighlighter
name|highlighter
init|=
literal|null
decl_stmt|;
name|SolrParams
name|solrParams
init|=
name|sreq
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|SolrCore
name|core
init|=
name|sreq
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|String
name|urlField
init|=
name|solrParams
operator|.
name|get
argument_list|(
name|CarrotParams
operator|.
name|URL_FIELD_NAME
argument_list|,
literal|"url"
argument_list|)
decl_stmt|;
name|String
name|titleFieldSpec
init|=
name|solrParams
operator|.
name|get
argument_list|(
name|CarrotParams
operator|.
name|TITLE_FIELD_NAME
argument_list|,
literal|"title"
argument_list|)
decl_stmt|;
name|String
name|snippetFieldSpec
init|=
name|solrParams
operator|.
name|get
argument_list|(
name|CarrotParams
operator|.
name|SNIPPET_FIELD_NAME
argument_list|,
name|titleFieldSpec
argument_list|)
decl_stmt|;
name|String
name|languageField
init|=
name|solrParams
operator|.
name|get
argument_list|(
name|CarrotParams
operator|.
name|LANGUAGE_FIELD_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Maps Solr field names to Carrot2 custom field names
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|customFields
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|customFieldsSpec
init|=
name|solrParams
operator|.
name|getParams
argument_list|(
name|CarrotParams
operator|.
name|CUSTOM_FIELD_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|customFieldsSpec
operator|!=
literal|null
condition|)
block|{
name|customFields
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|customFieldSpec
range|:
name|customFieldsSpec
control|)
block|{
name|String
index|[]
name|split
init|=
name|customFieldSpec
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|split
operator|.
name|length
operator|==
literal|2
operator|&&
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|split
index|[
literal|0
index|]
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|split
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
name|customFields
operator|.
name|put
argument_list|(
name|split
index|[
literal|0
index|]
argument_list|,
name|split
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unsupported format for "
operator|+
name|CarrotParams
operator|.
name|CUSTOM_FIELD_NAME
operator|+
literal|": '"
operator|+
name|customFieldSpec
operator|+
literal|"'. Skipping this field definition."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Parse language code map string into a map
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|languageCodeMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|languageField
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|pair
range|:
name|solrParams
operator|.
name|get
argument_list|(
name|CarrotParams
operator|.
name|LANGUAGE_CODE_MAP
argument_list|,
literal|""
argument_list|)
operator|.
name|split
argument_list|(
literal|"[, ]"
argument_list|)
control|)
block|{
specifier|final
name|String
index|[]
name|split
init|=
name|pair
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|split
operator|.
name|length
operator|==
literal|2
operator|&&
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|split
index|[
literal|0
index|]
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|split
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
name|languageCodeMap
operator|.
name|put
argument_list|(
name|split
index|[
literal|0
index|]
argument_list|,
name|split
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unsupported format for "
operator|+
name|CarrotParams
operator|.
name|LANGUAGE_CODE_MAP
operator|+
literal|": '"
operator|+
name|pair
operator|+
literal|"'. Skipping this mapping."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Get the documents
name|boolean
name|produceSummary
init|=
name|solrParams
operator|.
name|getBool
argument_list|(
name|CarrotParams
operator|.
name|PRODUCE_SUMMARY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SolrQueryRequest
name|req
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|snippetFieldAry
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|produceSummary
condition|)
block|{
name|highlighter
operator|=
name|HighlightComponent
operator|.
name|getHighlighter
argument_list|(
name|core
argument_list|)
expr_stmt|;
if|if
condition|(
name|highlighter
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|args
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|snippetFieldAry
operator|=
name|snippetFieldSpec
operator|.
name|split
argument_list|(
literal|"[, ]"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|HighlightParams
operator|.
name|FIELDS
argument_list|,
name|snippetFieldAry
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|HighlightParams
operator|.
name|HIGHLIGHT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|HighlightParams
operator|.
name|SIMPLE_PRE
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|//we don't care about actually highlighting the area
name|args
operator|.
name|put
argument_list|(
name|HighlightParams
operator|.
name|SIMPLE_POST
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|HighlightParams
operator|.
name|FRAGSIZE
argument_list|,
name|solrParams
operator|.
name|getInt
argument_list|(
name|CarrotParams
operator|.
name|SUMMARY_FRAGSIZE
argument_list|,
name|solrParams
operator|.
name|getInt
argument_list|(
name|HighlightParams
operator|.
name|FRAGSIZE
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|HighlightParams
operator|.
name|SNIPPETS
argument_list|,
name|solrParams
operator|.
name|getInt
argument_list|(
name|CarrotParams
operator|.
name|SUMMARY_SNIPPETS
argument_list|,
name|solrParams
operator|.
name|getInt
argument_list|(
name|HighlightParams
operator|.
name|SNIPPETS
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
name|query
operator|.
name|toString
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|args
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|SolrIndexSearcher
name|getSearcher
parameter_list|()
block|{
return|return
name|sreq
operator|.
name|getSearcher
argument_list|()
return|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No highlighter configured, cannot produce summary"
argument_list|)
expr_stmt|;
name|produceSummary
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|SolrDocument
argument_list|>
name|docsIter
init|=
name|solrDocList
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Document
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Document
argument_list|>
argument_list|(
name|solrDocList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|float
index|[]
name|scores
init|=
block|{
literal|1.0f
block|}
decl_stmt|;
name|int
index|[]
name|docsHolder
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
name|Query
name|theQuery
init|=
name|query
decl_stmt|;
while|while
condition|(
name|docsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SolrDocument
name|sdoc
init|=
name|docsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|snippet
init|=
literal|null
decl_stmt|;
comment|// TODO: docIds will be null when running distributed search.
comment|// See comment in ClusteringComponent#finishStage().
if|if
condition|(
name|produceSummary
operator|&&
name|docIds
operator|!=
literal|null
condition|)
block|{
name|docsHolder
index|[
literal|0
index|]
operator|=
name|docIds
operator|.
name|get
argument_list|(
name|sdoc
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|DocList
name|docAsList
init|=
operator|new
name|DocSlice
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|docsHolder
argument_list|,
name|scores
argument_list|,
literal|1
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|highlights
init|=
name|highlighter
operator|.
name|doHighlighting
argument_list|(
name|docAsList
argument_list|,
name|theQuery
argument_list|,
name|req
argument_list|,
name|snippetFieldAry
argument_list|)
decl_stmt|;
if|if
condition|(
name|highlights
operator|!=
literal|null
operator|&&
name|highlights
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|//should only be one value given our setup
comment|//should only be one document
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|NamedList
argument_list|<
name|String
index|[]
argument_list|>
name|tmp
init|=
operator|(
name|NamedList
argument_list|<
name|String
index|[]
argument_list|>
operator|)
name|highlights
operator|.
name|getVal
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|snippetFieldAry
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
comment|// Join fragments with a period, so that Carrot2 does not create
comment|// cross-fragment phrases, such phrases rarely make sense.
name|String
index|[]
name|highlt
init|=
name|tmp
operator|.
name|get
argument_list|(
name|snippetFieldAry
index|[
name|j
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|highlt
operator|!=
literal|null
operator|&&
name|highlt
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|highlt
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|highlt
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" . "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|snippet
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
comment|// If summaries not enabled or summary generation failed, use full content.
if|if
condition|(
name|snippet
operator|==
literal|null
condition|)
block|{
name|snippet
operator|=
name|getConcatenated
argument_list|(
name|sdoc
argument_list|,
name|snippetFieldSpec
argument_list|)
expr_stmt|;
block|}
comment|// Create a Carrot2 document
name|Document
name|carrotDocument
init|=
operator|new
name|Document
argument_list|(
name|getConcatenated
argument_list|(
name|sdoc
argument_list|,
name|titleFieldSpec
argument_list|)
argument_list|,
name|snippet
argument_list|,
operator|(
name|String
operator|)
name|sdoc
operator|.
name|getFieldValue
argument_list|(
name|urlField
argument_list|)
argument_list|)
decl_stmt|;
comment|// Store Solr id of the document, we need it to map document instances
comment|// found in clusters back to identifiers.
name|carrotDocument
operator|.
name|setField
argument_list|(
name|SOLR_DOCUMENT_ID
argument_list|,
name|sdoc
operator|.
name|getFieldValue
argument_list|(
name|idFieldName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set language
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|languageField
argument_list|)
condition|)
block|{
name|Collection
argument_list|<
name|Object
argument_list|>
name|languages
init|=
name|sdoc
operator|.
name|getFieldValues
argument_list|(
name|languageField
argument_list|)
decl_stmt|;
if|if
condition|(
name|languages
operator|!=
literal|null
condition|)
block|{
comment|// Use the first Carrot2-supported language
for|for
control|(
name|Object
name|l
range|:
name|languages
control|)
block|{
name|String
name|lang
init|=
name|ObjectUtils
operator|.
name|toString
argument_list|(
name|l
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|languageCodeMap
operator|.
name|containsKey
argument_list|(
name|lang
argument_list|)
condition|)
block|{
name|lang
operator|=
name|languageCodeMap
operator|.
name|get
argument_list|(
name|lang
argument_list|)
expr_stmt|;
block|}
comment|// Language detection Library for Java uses dashes to separate
comment|// language variants, such as 'zh-cn', but Carrot2 uses underscores.
if|if
condition|(
name|lang
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
operator|>
literal|0
condition|)
block|{
name|lang
operator|=
name|lang
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
block|}
comment|// If the language is supported by Carrot2, we'll get a non-null value
specifier|final
name|LanguageCode
name|carrot2Language
init|=
name|LanguageCode
operator|.
name|forISOCode
argument_list|(
name|lang
argument_list|)
decl_stmt|;
if|if
condition|(
name|carrot2Language
operator|!=
literal|null
condition|)
block|{
name|carrotDocument
operator|.
name|setLanguage
argument_list|(
name|carrot2Language
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
comment|// Add custom fields
if|if
condition|(
name|customFields
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|customFields
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|carrotDocument
operator|.
name|setField
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|sdoc
operator|.
name|getFieldValue
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|add
argument_list|(
name|carrotDocument
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getConcatenated
specifier|private
name|String
name|getConcatenated
parameter_list|(
name|SolrDocument
name|sdoc
parameter_list|,
name|String
name|fieldsSpec
parameter_list|)
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fieldsSpec
operator|.
name|split
argument_list|(
literal|"[, ]"
argument_list|)
control|)
block|{
name|Collection
argument_list|<
name|Object
argument_list|>
name|vals
init|=
name|sdoc
operator|.
name|getFieldValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|vals
operator|==
literal|null
condition|)
continue|continue;
name|Iterator
argument_list|<
name|Object
argument_list|>
name|ite
init|=
name|vals
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|ite
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// Join multiple values with a period so that Carrot2 does not pick up
comment|// phrases that cross field value boundaries (in most cases it would
comment|// create useless phrases).
name|result
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|ite
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" . "
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
DECL|method|clustersToNamedList
specifier|private
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|clustersToNamedList
parameter_list|(
name|List
argument_list|<
name|Cluster
argument_list|>
name|carrotClusters
parameter_list|,
name|SolrParams
name|solrParams
parameter_list|)
block|{
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|clustersToNamedList
argument_list|(
name|carrotClusters
argument_list|,
name|result
argument_list|,
name|solrParams
operator|.
name|getBool
argument_list|(
name|CarrotParams
operator|.
name|OUTPUT_SUB_CLUSTERS
argument_list|,
literal|true
argument_list|)
argument_list|,
name|solrParams
operator|.
name|getInt
argument_list|(
name|CarrotParams
operator|.
name|NUM_DESCRIPTIONS
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|clustersToNamedList
specifier|private
name|void
name|clustersToNamedList
parameter_list|(
name|List
argument_list|<
name|Cluster
argument_list|>
name|outputClusters
parameter_list|,
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|parent
parameter_list|,
name|boolean
name|outputSubClusters
parameter_list|,
name|int
name|maxLabels
parameter_list|)
block|{
for|for
control|(
name|Cluster
name|outCluster
range|:
name|outputClusters
control|)
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|cluster
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|parent
operator|.
name|add
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
comment|// Add labels
name|List
argument_list|<
name|String
argument_list|>
name|labels
init|=
name|outCluster
operator|.
name|getPhrases
argument_list|()
decl_stmt|;
if|if
condition|(
name|labels
operator|.
name|size
argument_list|()
operator|>
name|maxLabels
condition|)
block|{
name|labels
operator|=
name|labels
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|maxLabels
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|add
argument_list|(
literal|"labels"
argument_list|,
name|labels
argument_list|)
expr_stmt|;
comment|// Add cluster score
specifier|final
name|Double
name|score
init|=
name|outCluster
operator|.
name|getScore
argument_list|()
decl_stmt|;
if|if
condition|(
name|score
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|add
argument_list|(
literal|"score"
argument_list|,
name|score
argument_list|)
expr_stmt|;
block|}
comment|// Add other topics marker
if|if
condition|(
name|outCluster
operator|.
name|isOtherTopics
argument_list|()
condition|)
block|{
name|cluster
operator|.
name|add
argument_list|(
literal|"other-topics"
argument_list|,
name|outCluster
operator|.
name|isOtherTopics
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add documents
name|List
argument_list|<
name|Document
argument_list|>
name|docs
init|=
name|outputSubClusters
condition|?
name|outCluster
operator|.
name|getDocuments
argument_list|()
else|:
name|outCluster
operator|.
name|getAllDocuments
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|docList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|add
argument_list|(
literal|"docs"
argument_list|,
name|docList
argument_list|)
expr_stmt|;
for|for
control|(
name|Document
name|doc
range|:
name|docs
control|)
block|{
name|docList
operator|.
name|add
argument_list|(
name|doc
operator|.
name|getField
argument_list|(
name|SOLR_DOCUMENT_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Add subclusters
if|if
condition|(
name|outputSubClusters
operator|&&
operator|!
name|outCluster
operator|.
name|getSubclusters
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|subclusters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|add
argument_list|(
literal|"clusters"
argument_list|,
name|subclusters
argument_list|)
expr_stmt|;
name|clustersToNamedList
argument_list|(
name|outCluster
operator|.
name|getSubclusters
argument_list|()
argument_list|,
name|subclusters
argument_list|,
name|outputSubClusters
argument_list|,
name|maxLabels
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Extracts parameters that can possibly match some attributes of Carrot2 algorithms.    */
DECL|method|extractCarrotAttributes
specifier|private
name|void
name|extractCarrotAttributes
parameter_list|(
name|SolrParams
name|solrParams
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attributes
parameter_list|)
block|{
comment|// Extract all non-predefined parameters. This way, we'll be able to set all
comment|// parameters of Carrot2 algorithms without defining their names as constants.
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|paramNames
init|=
name|solrParams
operator|.
name|getParameterNamesIterator
argument_list|()
init|;
name|paramNames
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|paramName
init|=
name|paramNames
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|CarrotParams
operator|.
name|CARROT_PARAM_NAMES
operator|.
name|contains
argument_list|(
name|paramName
argument_list|)
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|paramName
argument_list|,
name|solrParams
operator|.
name|get
argument_list|(
name|paramName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
