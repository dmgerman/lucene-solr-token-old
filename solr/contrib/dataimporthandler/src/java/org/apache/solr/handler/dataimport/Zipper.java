begin_unit
begin_package
DECL|package|org.apache.solr.handler.dataimport
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
package|;
end_package
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
operator|.
name|DIHCacheSupport
operator|.
name|Relation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|PeekingIterator
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|Zipper
class|class
name|Zipper
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|relation
specifier|private
specifier|final
name|DIHCacheSupport
operator|.
name|Relation
name|relation
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|field|parentId
specifier|private
name|Comparable
name|parentId
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|field|lastChildId
specifier|private
name|Comparable
name|lastChildId
decl_stmt|;
DECL|field|rowIterator
specifier|private
name|Iterator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|rowIterator
decl_stmt|;
DECL|field|peeker
specifier|private
name|PeekingIterator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|peeker
decl_stmt|;
comment|/** @return initialized zipper or null */
DECL|method|createOrNull
specifier|public
specifier|static
name|Zipper
name|createOrNull
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
if|if
condition|(
literal|"zipper"
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getEntityAttribute
argument_list|(
literal|"join"
argument_list|)
argument_list|)
condition|)
block|{
name|DIHCacheSupport
operator|.
name|Relation
name|r
init|=
operator|new
name|DIHCacheSupport
operator|.
name|Relation
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|doKeyLookup
condition|)
block|{
return|return
operator|new
name|Zipper
argument_list|(
name|r
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|Zipper
specifier|private
name|Zipper
parameter_list|(
name|Relation
name|relation
parameter_list|)
block|{
name|this
operator|.
name|relation
operator|=
name|relation
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|supplyNextChild
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|supplyNextChild
parameter_list|(
name|Iterator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|rowIterator
parameter_list|)
block|{
name|preparePeeker
argument_list|(
name|rowIterator
argument_list|)
expr_stmt|;
while|while
condition|(
name|peeker
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|current
init|=
name|peeker
operator|.
name|peek
argument_list|()
decl_stmt|;
name|Comparable
name|childId
init|=
operator|(
name|Comparable
operator|)
name|current
operator|.
name|get
argument_list|(
name|relation
operator|.
name|primaryKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastChildId
operator|!=
literal|null
operator|&&
name|lastChildId
operator|.
name|compareTo
argument_list|(
name|childId
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"expect increasing foreign keys for "
operator|+
name|relation
operator|+
literal|" got: "
operator|+
name|lastChildId
operator|+
literal|","
operator|+
name|childId
argument_list|)
throw|;
block|}
name|lastChildId
operator|=
name|childId
expr_stmt|;
name|int
name|cmp
init|=
name|childId
operator|.
name|compareTo
argument_list|(
name|parentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|child
init|=
name|peeker
operator|.
name|next
argument_list|()
decl_stmt|;
assert|assert
name|child
operator|==
name|current
operator|:
literal|"peeker should be right but "
operator|+
name|current
operator|+
literal|" != "
operator|+
name|child
assert|;
name|log
operator|.
name|trace
argument_list|(
literal|"yeild child {} entry {}"
argument_list|,
name|relation
argument_list|,
name|current
argument_list|)
expr_stmt|;
return|return
name|child
return|;
comment|// TODO it's for one->many for many->one it should be just peek()
block|}
else|else
block|{
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
block|{
comment|// child belongs to 10th and parent is 20th, skip for the next one
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|child
init|=
name|peeker
operator|.
name|next
argument_list|()
decl_stmt|;
assert|assert
name|child
operator|==
name|current
operator|:
literal|"peeker should be right but "
operator|+
name|current
operator|+
literal|" != "
operator|+
name|child
assert|;
name|log
operator|.
name|trace
argument_list|(
literal|"skip child {}, {}> {}"
argument_list|,
name|relation
argument_list|,
name|parentId
argument_list|,
name|childId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// child belongs to 20th and  parent is 10th, no more children, go to next parent
name|log
operator|.
name|trace
argument_list|(
literal|"childen is over {}, {}< {}"
argument_list|,
name|relation
argument_list|,
name|parentId
argument_list|,
name|current
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|preparePeeker
specifier|private
name|void
name|preparePeeker
parameter_list|(
name|Iterator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|rowIterator
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|rowIterator
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|rowIterator
operator|=
name|rowIterator
expr_stmt|;
name|peeker
operator|=
name|Iterators
operator|.
name|peekingIterator
argument_list|(
name|rowIterator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|this
operator|.
name|rowIterator
operator|==
name|rowIterator
operator|:
literal|"rowIterator should never change but "
operator|+
name|this
operator|.
name|rowIterator
operator|+
literal|" supplied before has been changed to "
operator|+
name|rowIterator
assert|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|onNewParent
specifier|public
name|void
name|onNewParent
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|Comparable
name|newParent
init|=
operator|(
name|Comparable
operator|)
name|context
operator|.
name|resolve
argument_list|(
name|relation
operator|.
name|foreignKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentId
operator|!=
literal|null
operator|&&
name|parentId
operator|.
name|compareTo
argument_list|(
name|newParent
argument_list|)
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"expect strictly increasing primary keys for "
operator|+
name|relation
operator|+
literal|" got: "
operator|+
name|parentId
operator|+
literal|","
operator|+
name|newParent
argument_list|)
throw|;
block|}
name|log
operator|.
name|trace
argument_list|(
literal|"{}: {}->{}"
argument_list|,
name|relation
argument_list|,
name|newParent
argument_list|,
name|parentId
argument_list|)
expr_stmt|;
name|parentId
operator|=
name|newParent
expr_stmt|;
block|}
block|}
end_class
end_unit
