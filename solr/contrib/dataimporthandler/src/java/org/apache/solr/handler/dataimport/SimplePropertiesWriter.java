begin_unit
begin_package
DECL|package|org.apache.solr.handler.dataimport
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_class
DECL|class|SimplePropertiesWriter
specifier|public
class|class
name|SimplePropertiesWriter
implements|implements
name|DIHPropertiesWriter
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SimplePropertiesWriter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|IMPORTER_PROPERTIES
specifier|static
specifier|final
name|String
name|IMPORTER_PROPERTIES
init|=
literal|"dataimport.properties"
decl_stmt|;
DECL|field|LAST_INDEX_KEY
specifier|static
specifier|final
name|String
name|LAST_INDEX_KEY
init|=
literal|"last_index_time"
decl_stmt|;
DECL|field|persistFilename
specifier|private
name|String
name|persistFilename
init|=
name|IMPORTER_PROPERTIES
decl_stmt|;
DECL|field|configDir
specifier|private
name|String
name|configDir
init|=
literal|null
decl_stmt|;
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|DataImporter
name|dataImporter
parameter_list|)
block|{
name|SolrCore
name|core
init|=
name|dataImporter
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|String
name|configDir
init|=
name|core
operator|==
literal|null
condition|?
literal|"."
else|:
name|core
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|getConfigDir
argument_list|()
decl_stmt|;
name|String
name|persistFileName
init|=
name|dataImporter
operator|.
name|getHandlerName
argument_list|()
decl_stmt|;
name|this
operator|.
name|configDir
operator|=
name|configDir
expr_stmt|;
if|if
condition|(
name|persistFileName
operator|!=
literal|null
condition|)
block|{
name|persistFilename
operator|=
name|persistFileName
operator|+
literal|".properties"
expr_stmt|;
block|}
block|}
DECL|method|getPersistFile
specifier|private
name|File
name|getPersistFile
parameter_list|()
block|{
name|String
name|filePath
init|=
name|configDir
decl_stmt|;
if|if
condition|(
name|configDir
operator|!=
literal|null
operator|&&
operator|!
name|configDir
operator|.
name|endsWith
argument_list|(
name|File
operator|.
name|separator
argument_list|)
condition|)
name|filePath
operator|+=
name|File
operator|.
name|separator
expr_stmt|;
name|filePath
operator|+=
name|persistFilename
expr_stmt|;
return|return
operator|new
name|File
argument_list|(
name|filePath
argument_list|)
return|;
block|}
DECL|method|isWritable
specifier|public
name|boolean
name|isWritable
parameter_list|()
block|{
name|File
name|persistFile
init|=
name|getPersistFile
argument_list|()
decl_stmt|;
return|return
name|persistFile
operator|.
name|exists
argument_list|()
condition|?
name|persistFile
operator|.
name|canWrite
argument_list|()
else|:
name|persistFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|canWrite
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|persist
specifier|public
name|void
name|persist
parameter_list|(
name|Properties
name|p
parameter_list|)
block|{
name|OutputStream
name|propOutput
init|=
literal|null
decl_stmt|;
name|Properties
name|props
init|=
name|readIndexerProperties
argument_list|()
decl_stmt|;
try|try
block|{
name|props
operator|.
name|putAll
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|String
name|filePath
init|=
name|configDir
decl_stmt|;
if|if
condition|(
name|configDir
operator|!=
literal|null
operator|&&
operator|!
name|configDir
operator|.
name|endsWith
argument_list|(
name|File
operator|.
name|separator
argument_list|)
condition|)
name|filePath
operator|+=
name|File
operator|.
name|separator
expr_stmt|;
name|filePath
operator|+=
name|persistFilename
expr_stmt|;
name|propOutput
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|props
operator|.
name|store
argument_list|(
name|propOutput
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Wrote last indexed time to "
operator|+
name|persistFilename
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|DataImportHandlerException
operator|.
name|SEVERE
argument_list|,
literal|"Unable to persist Index Start Time"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|propOutput
operator|!=
literal|null
condition|)
name|propOutput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|propOutput
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|readIndexerProperties
specifier|public
name|Properties
name|readIndexerProperties
parameter_list|()
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|propInput
init|=
literal|null
decl_stmt|;
try|try
block|{
name|propInput
operator|=
operator|new
name|FileInputStream
argument_list|(
name|configDir
operator|+
name|persistFilename
argument_list|)
expr_stmt|;
name|props
operator|.
name|load
argument_list|(
name|propInput
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Read "
operator|+
name|persistFilename
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to read: "
operator|+
name|persistFilename
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|propInput
operator|!=
literal|null
condition|)
name|propInput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|propInput
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|props
return|;
block|}
block|}
end_class
end_unit
