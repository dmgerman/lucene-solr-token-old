begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.dataimport.config
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
operator|.
name|config
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
operator|.
name|SolrWriter
import|;
end_import
begin_class
DECL|class|ConfigNameConstants
specifier|public
class|class
name|ConfigNameConstants
block|{
DECL|field|SCRIPT
specifier|public
specifier|static
specifier|final
name|String
name|SCRIPT
init|=
literal|"script"
decl_stmt|;
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
DECL|field|PROCESSOR
specifier|public
specifier|static
specifier|final
name|String
name|PROCESSOR
init|=
literal|"processor"
decl_stmt|;
DECL|field|PROPERTY_WRITER
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_WRITER
init|=
literal|"propertyWriter"
decl_stmt|;
comment|/**    * @deprecated use IMPORTER_NS_SHORT instead    */
annotation|@
name|Deprecated
DECL|field|IMPORTER_NS
specifier|public
specifier|static
specifier|final
name|String
name|IMPORTER_NS
init|=
literal|"dataimporter"
decl_stmt|;
DECL|field|IMPORTER_NS_SHORT
specifier|public
specifier|static
specifier|final
name|String
name|IMPORTER_NS_SHORT
init|=
literal|"dih"
decl_stmt|;
DECL|field|ROOT_ENTITY
specifier|public
specifier|static
specifier|final
name|String
name|ROOT_ENTITY
init|=
literal|"rootEntity"
decl_stmt|;
DECL|field|FUNCTION
specifier|public
specifier|static
specifier|final
name|String
name|FUNCTION
init|=
literal|"function"
decl_stmt|;
DECL|field|CLASS
specifier|public
specifier|static
specifier|final
name|String
name|CLASS
init|=
literal|"class"
decl_stmt|;
DECL|field|DATA_SRC
specifier|public
specifier|static
specifier|final
name|String
name|DATA_SRC
init|=
literal|"dataSource"
decl_stmt|;
DECL|field|RESERVED_WORDS
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|RESERVED_WORDS
decl_stmt|;
static|static
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|rw
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|rw
operator|.
name|add
argument_list|(
name|IMPORTER_NS
argument_list|)
expr_stmt|;
name|rw
operator|.
name|add
argument_list|(
name|IMPORTER_NS_SHORT
argument_list|)
expr_stmt|;
name|rw
operator|.
name|add
argument_list|(
literal|"request"
argument_list|)
expr_stmt|;
name|rw
operator|.
name|add
argument_list|(
literal|"delta"
argument_list|)
expr_stmt|;
name|rw
operator|.
name|add
argument_list|(
literal|"functions"
argument_list|)
expr_stmt|;
name|rw
operator|.
name|add
argument_list|(
literal|"session"
argument_list|)
expr_stmt|;
name|rw
operator|.
name|add
argument_list|(
name|SolrWriter
operator|.
name|LAST_INDEX_KEY
argument_list|)
expr_stmt|;
name|RESERVED_WORDS
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|rw
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
