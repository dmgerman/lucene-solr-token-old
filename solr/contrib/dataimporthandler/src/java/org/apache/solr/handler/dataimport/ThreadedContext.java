begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.dataimport
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
package|;
end_package
begin_comment
comment|/**Context implementation used when run multi threaded.  *  * @since Solr 3.1  *   */
end_comment
begin_class
DECL|class|ThreadedContext
specifier|public
class|class
name|ThreadedContext
extends|extends
name|ContextImpl
block|{
DECL|field|entityRunner
specifier|private
name|DocBuilder
operator|.
name|EntityRunner
name|entityRunner
decl_stmt|;
DECL|field|limitedContext
specifier|private
name|boolean
name|limitedContext
init|=
literal|false
decl_stmt|;
DECL|method|ThreadedContext
specifier|public
name|ThreadedContext
parameter_list|(
name|DocBuilder
operator|.
name|EntityRunner
name|entityRunner
parameter_list|,
name|DocBuilder
name|docBuilder
parameter_list|)
block|{
name|super
argument_list|(
name|entityRunner
operator|.
name|entity
argument_list|,
literal|null
argument_list|,
comment|//to be fetched realtime
literal|null
argument_list|,
literal|null
argument_list|,
name|docBuilder
operator|.
name|session
argument_list|,
literal|null
argument_list|,
name|docBuilder
argument_list|)
expr_stmt|;
name|this
operator|.
name|entityRunner
operator|=
name|entityRunner
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getVariableResolver
specifier|public
name|VariableResolver
name|getVariableResolver
parameter_list|()
block|{
name|checkLimited
argument_list|()
expr_stmt|;
return|return
name|entityRunner
operator|.
name|currentEntityProcWrapper
operator|.
name|get
argument_list|()
operator|.
name|resolver
return|;
block|}
annotation|@
name|Override
DECL|method|getParentContext
specifier|public
name|Context
name|getParentContext
parameter_list|()
block|{
name|ThreadedContext
name|ctx
init|=
operator|new
name|ThreadedContext
argument_list|(
name|entityRunner
operator|.
name|parent
argument_list|,
name|docBuilder
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|limitedContext
operator|=
literal|true
expr_stmt|;
return|return
name|ctx
return|;
block|}
annotation|@
name|Override
DECL|method|currentProcess
specifier|public
name|String
name|currentProcess
parameter_list|()
block|{
return|return
name|entityRunner
operator|.
name|currentProcess
return|;
block|}
annotation|@
name|Override
DECL|method|getEntityProcessor
specifier|public
name|EntityProcessor
name|getEntityProcessor
parameter_list|()
block|{
return|return
name|entityRunner
operator|.
name|currentEntityProcWrapper
operator|.
name|get
argument_list|()
operator|.
name|delegate
return|;
block|}
annotation|@
name|Override
DECL|method|getDataSource
specifier|public
name|DataSource
name|getDataSource
parameter_list|()
block|{
name|checkLimited
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|getDataSource
argument_list|()
return|;
block|}
DECL|method|checkLimited
specifier|private
name|void
name|checkLimited
parameter_list|()
block|{
if|if
condition|(
name|limitedContext
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"parentContext does not support this method"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getResolvedEntityAttribute
specifier|public
name|String
name|getResolvedEntityAttribute
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|checkLimited
argument_list|()
expr_stmt|;
return|return
name|entity
operator|==
literal|null
condition|?
literal|null
else|:
name|getVariableResolver
argument_list|()
operator|.
name|replaceTokens
argument_list|(
name|entity
operator|.
name|allAttributes
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setSessionAttribute
specifier|public
name|void
name|setSessionAttribute
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|val
parameter_list|,
name|String
name|scope
parameter_list|)
block|{
name|checkLimited
argument_list|()
expr_stmt|;
name|super
operator|.
name|setSessionAttribute
argument_list|(
name|name
argument_list|,
name|val
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|resolve
specifier|public
name|Object
name|resolve
parameter_list|(
name|String
name|var
parameter_list|)
block|{
return|return
name|getVariableResolver
argument_list|()
operator|.
name|resolve
argument_list|(
name|var
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|replaceTokens
specifier|public
name|String
name|replaceTokens
parameter_list|(
name|String
name|template
parameter_list|)
block|{
return|return
name|getVariableResolver
argument_list|()
operator|.
name|replaceTokens
argument_list|(
name|template
argument_list|)
return|;
block|}
block|}
end_class
end_unit
