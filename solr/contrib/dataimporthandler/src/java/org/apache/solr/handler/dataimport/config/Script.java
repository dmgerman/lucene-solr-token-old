begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.dataimport.config
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
operator|.
name|config
package|;
end_package
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import
begin_class
DECL|class|Script
specifier|public
class|class
name|Script
block|{
DECL|field|language
specifier|private
specifier|final
name|String
name|language
decl_stmt|;
DECL|field|text
specifier|private
specifier|final
name|String
name|text
decl_stmt|;
DECL|method|Script
specifier|public
name|Script
parameter_list|(
name|Element
name|e
parameter_list|)
block|{
name|this
operator|.
name|language
operator|=
name|ConfigParseUtil
operator|.
name|getStringAttribute
argument_list|(
name|e
argument_list|,
literal|"language"
argument_list|,
literal|"JavaScript"
argument_list|)
expr_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|script
init|=
name|ConfigParseUtil
operator|.
name|getText
argument_list|(
name|e
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|script
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|text
operator|=
name|script
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|text
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|getLanguage
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
name|language
return|;
block|}
DECL|method|getText
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|text
return|;
block|}
block|}
end_class
end_unit
