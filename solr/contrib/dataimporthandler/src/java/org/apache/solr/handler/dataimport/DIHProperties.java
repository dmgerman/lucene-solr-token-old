begin_unit
begin_package
DECL|package|org.apache.solr.handler.dataimport
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in combstract clapliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * Implementations write out properties about the last data import  * for use by the next import.  ex: to persist the last import timestamp  * so that future delta imports can know what needs to be updated.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|DIHProperties
specifier|public
specifier|abstract
class|class
name|DIHProperties
block|{
DECL|method|init
specifier|public
specifier|abstract
name|void
name|init
parameter_list|(
name|DataImporter
name|dataImporter
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|initParams
parameter_list|)
function_decl|;
DECL|method|isWritable
specifier|public
specifier|abstract
name|boolean
name|isWritable
parameter_list|()
function_decl|;
DECL|method|persist
specifier|public
specifier|abstract
name|void
name|persist
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
parameter_list|)
function_decl|;
DECL|method|readIndexerProperties
specifier|public
specifier|abstract
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|readIndexerProperties
parameter_list|()
function_decl|;
DECL|method|getCurrentTimestamp
specifier|public
name|Date
name|getCurrentTimestamp
parameter_list|()
block|{
return|return
operator|new
name|Date
argument_list|()
return|;
block|}
block|}
end_class
end_unit
