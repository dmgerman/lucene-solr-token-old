begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.dataimport
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|SystemIdResolver
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|XMLErrorLogger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
operator|.
name|config
operator|.
name|ConfigNameConstants
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
operator|.
name|config
operator|.
name|ConfigParseUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
operator|.
name|config
operator|.
name|DIHConfiguration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
operator|.
name|config
operator|.
name|Entity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
operator|.
name|config
operator|.
name|PropertyWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
operator|.
name|config
operator|.
name|Script
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
operator|.
name|DataImportHandlerException
operator|.
name|wrapAndThrow
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
operator|.
name|DataImportHandlerException
operator|.
name|SEVERE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
operator|.
name|DocBuilder
operator|.
name|loadClass
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
operator|.
name|config
operator|.
name|ConfigNameConstants
operator|.
name|CLASS
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import
begin_comment
comment|/**  *<p> Stores all configuration information for pulling and indexing data.</p>  *<p/>  *<b>This API is experimental and subject to change</b>  *  * @since solr 1.3  */
end_comment
begin_class
DECL|class|DataImporter
specifier|public
class|class
name|DataImporter
block|{
DECL|enum|Status
specifier|public
enum|enum
name|Status
block|{
DECL|enum constant|IDLE
DECL|enum constant|RUNNING_FULL_DUMP
DECL|enum constant|RUNNING_DELTA_DUMP
DECL|enum constant|JOB_FAILED
name|IDLE
block|,
name|RUNNING_FULL_DUMP
block|,
name|RUNNING_DELTA_DUMP
block|,
name|JOB_FAILED
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DataImporter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|XMLLOG
specifier|private
specifier|static
specifier|final
name|XMLErrorLogger
name|XMLLOG
init|=
operator|new
name|XMLErrorLogger
argument_list|(
name|LOG
argument_list|)
decl_stmt|;
DECL|field|status
specifier|private
name|Status
name|status
init|=
name|Status
operator|.
name|IDLE
decl_stmt|;
DECL|field|config
specifier|private
name|DIHConfiguration
name|config
decl_stmt|;
DECL|field|indexStartTime
specifier|private
name|Date
name|indexStartTime
decl_stmt|;
DECL|field|store
specifier|private
name|Properties
name|store
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
DECL|field|requestLevelDataSourceProps
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|requestLevelDataSourceProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|schema
specifier|private
name|IndexSchema
name|schema
decl_stmt|;
DECL|field|docBuilder
specifier|public
name|DocBuilder
name|docBuilder
decl_stmt|;
DECL|field|cumulativeStatistics
specifier|public
name|DocBuilder
operator|.
name|Statistics
name|cumulativeStatistics
init|=
operator|new
name|DocBuilder
operator|.
name|Statistics
argument_list|()
decl_stmt|;
DECL|field|core
specifier|private
name|SolrCore
name|core
decl_stmt|;
DECL|field|coreScopeSession
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|coreScopeSession
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|importLock
specifier|private
name|ReentrantLock
name|importLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|isDeltaImportSupported
specifier|private
name|boolean
name|isDeltaImportSupported
init|=
literal|false
decl_stmt|;
DECL|field|handlerName
specifier|private
specifier|final
name|String
name|handlerName
decl_stmt|;
comment|/**    * Only for testing purposes    */
DECL|method|DataImporter
name|DataImporter
parameter_list|()
block|{
name|this
operator|.
name|handlerName
operator|=
literal|"dataimport"
expr_stmt|;
block|}
DECL|method|DataImporter
name|DataImporter
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|String
name|handlerName
parameter_list|)
block|{
name|this
operator|.
name|handlerName
operator|=
name|handlerName
expr_stmt|;
name|this
operator|.
name|core
operator|=
name|core
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|core
operator|.
name|getLatestSchema
argument_list|()
expr_stmt|;
block|}
DECL|method|maybeReloadConfiguration
name|boolean
name|maybeReloadConfiguration
parameter_list|(
name|RequestInfo
name|params
parameter_list|,
name|NamedList
argument_list|<
name|?
argument_list|>
name|defaultParams
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|importLock
operator|.
name|tryLock
argument_list|()
condition|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
literal|null
operator|!=
name|params
operator|.
name|getRequest
argument_list|()
condition|)
block|{
if|if
condition|(
name|schema
operator|!=
name|params
operator|.
name|getRequest
argument_list|()
operator|.
name|getSchema
argument_list|()
condition|)
block|{
name|schema
operator|=
name|params
operator|.
name|getRequest
argument_list|()
operator|.
name|getSchema
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|dataConfigText
init|=
name|params
operator|.
name|getDataConfig
argument_list|()
decl_stmt|;
name|String
name|dataconfigFile
init|=
name|params
operator|.
name|getConfigFile
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dataConfigText
operator|!=
literal|null
operator|&&
name|dataConfigText
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|is
operator|=
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|dataConfigText
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dataconfigFile
operator|!=
literal|null
condition|)
block|{
name|is
operator|=
operator|new
name|InputSource
argument_list|(
name|core
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|openResource
argument_list|(
name|dataconfigFile
argument_list|)
argument_list|)
expr_stmt|;
name|is
operator|.
name|setSystemId
argument_list|(
name|SystemIdResolver
operator|.
name|createSystemIdFromResourceName
argument_list|(
name|dataconfigFile
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading DIH Configuration: "
operator|+
name|dataconfigFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|loadDataConfig
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|dsProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultParams
operator|!=
literal|null
condition|)
block|{
name|int
name|position
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|position
operator|<
name|defaultParams
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|defaultParams
operator|.
name|getName
argument_list|(
name|position
argument_list|)
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|String
name|name
init|=
name|defaultParams
operator|.
name|getName
argument_list|(
name|position
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"datasource"
argument_list|)
condition|)
block|{
name|success
operator|=
literal|true
expr_stmt|;
name|NamedList
name|dsConfig
init|=
operator|(
name|NamedList
operator|)
name|defaultParams
operator|.
name|getVal
argument_list|(
name|position
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Getting configuration for Global Datasource..."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dsConfig
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|props
operator|.
name|put
argument_list|(
name|dsConfig
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|,
name|dsConfig
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding properties to datasource: "
operator|+
name|props
argument_list|)
expr_stmt|;
name|dsProps
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|dsConfig
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
name|position
operator|++
expr_stmt|;
block|}
block|}
name|requestLevelDataSourceProps
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|dsProps
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|ioe
throw|;
block|}
finally|finally
block|{
name|importLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|getHandlerName
specifier|public
name|String
name|getHandlerName
parameter_list|()
block|{
return|return
name|handlerName
return|;
block|}
DECL|method|getSchema
specifier|public
name|IndexSchema
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
comment|/**    * Used by tests    */
DECL|method|loadAndInit
name|void
name|loadAndInit
parameter_list|(
name|String
name|configStr
parameter_list|)
block|{
name|loadDataConfig
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|configStr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|loadDataConfig
specifier|private
name|void
name|loadDataConfig
parameter_list|(
name|InputSource
name|configFile
parameter_list|)
block|{
try|try
block|{
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// only enable xinclude, if a a SolrCore and SystemId is present (makes no sense otherwise)
if|if
condition|(
name|core
operator|!=
literal|null
operator|&&
name|configFile
operator|.
name|getSystemId
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|dbf
operator|.
name|setXIncludeAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbf
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"XML parser doesn't support XInclude option"
argument_list|)
expr_stmt|;
block|}
block|}
name|DocumentBuilder
name|builder
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setEntityResolver
argument_list|(
operator|new
name|SystemIdResolver
argument_list|(
name|core
operator|.
name|getResourceLoader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setErrorHandler
argument_list|(
name|XMLLOG
argument_list|)
expr_stmt|;
name|Document
name|document
decl_stmt|;
try|try
block|{
name|document
operator|=
name|builder
operator|.
name|parse
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// some XML parsers are broken and don't close the byte stream (but they should according to spec)
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|configFile
operator|.
name|getByteStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|config
operator|=
name|readFromXml
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Data Configuration loaded successfully"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|SEVERE
argument_list|,
literal|"Data Config problem: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|Entity
name|e
range|:
name|config
operator|.
name|getEntities
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getAllAttributes
argument_list|()
operator|.
name|containsKey
argument_list|(
name|SqlEntityProcessor
operator|.
name|DELTA_QUERY
argument_list|)
condition|)
block|{
name|isDeltaImportSupported
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|readFromXml
specifier|public
name|DIHConfiguration
name|readFromXml
parameter_list|(
name|Document
name|xmlDocument
parameter_list|)
block|{
name|DIHConfiguration
name|config
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|functions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Script
name|script
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|dataSources
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|NodeList
name|dataConfigTags
init|=
name|xmlDocument
operator|.
name|getElementsByTagName
argument_list|(
literal|"dataConfig"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataConfigTags
operator|==
literal|null
operator|||
name|dataConfigTags
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|SEVERE
argument_list|,
literal|"the root node '<dataConfig>' is missing"
argument_list|)
throw|;
block|}
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|dataConfigTags
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|documentTags
init|=
name|ConfigParseUtil
operator|.
name|getChildNodes
argument_list|(
name|e
argument_list|,
literal|"document"
argument_list|)
decl_stmt|;
if|if
condition|(
name|documentTags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|SEVERE
argument_list|,
literal|"DataImportHandler "
operator|+
literal|"configuration file must have one<document> node."
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Element
argument_list|>
name|scriptTags
init|=
name|ConfigParseUtil
operator|.
name|getChildNodes
argument_list|(
name|e
argument_list|,
name|ConfigNameConstants
operator|.
name|SCRIPT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|scriptTags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|script
operator|=
operator|new
name|Script
argument_list|(
name|scriptTags
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Add the provided evaluators
name|List
argument_list|<
name|Element
argument_list|>
name|functionTags
init|=
name|ConfigParseUtil
operator|.
name|getChildNodes
argument_list|(
name|e
argument_list|,
name|ConfigNameConstants
operator|.
name|FUNCTION
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|functionTags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Element
name|element
range|:
name|functionTags
control|)
block|{
name|String
name|func
init|=
name|ConfigParseUtil
operator|.
name|getStringAttribute
argument_list|(
name|element
argument_list|,
name|NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|clz
init|=
name|ConfigParseUtil
operator|.
name|getStringAttribute
argument_list|(
name|element
argument_list|,
name|ConfigNameConstants
operator|.
name|CLASS
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
operator|==
literal|null
operator|||
name|clz
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|SEVERE
argument_list|,
literal|"<function> must have a 'name' and 'class' attributes"
argument_list|)
throw|;
block|}
else|else
block|{
name|functions
operator|.
name|add
argument_list|(
name|ConfigParseUtil
operator|.
name|getAllAttributes
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|Element
argument_list|>
name|dataSourceTags
init|=
name|ConfigParseUtil
operator|.
name|getChildNodes
argument_list|(
name|e
argument_list|,
name|ConfigNameConstants
operator|.
name|DATA_SRC
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dataSourceTags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Element
name|element
range|:
name|dataSourceTags
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|p
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attrs
init|=
name|ConfigParseUtil
operator|.
name|getAllAttributes
argument_list|(
name|element
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|attrs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|p
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dataSources
operator|.
name|put
argument_list|(
name|p
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dataSources
operator|.
name|get
argument_list|(
literal|null
argument_list|)
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
range|:
name|dataSources
operator|.
name|values
argument_list|()
control|)
block|{
name|dataSources
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|properties
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|PropertyWriter
name|pw
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|propertyWriterTags
init|=
name|ConfigParseUtil
operator|.
name|getChildNodes
argument_list|(
name|e
argument_list|,
name|ConfigNameConstants
operator|.
name|PROPERTY_WRITER
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyWriterTags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|zookeeper
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|core
operator|!=
literal|null
operator|&&
name|this
operator|.
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|isZooKeeperAware
argument_list|()
condition|)
block|{
name|zookeeper
operator|=
literal|true
expr_stmt|;
block|}
name|pw
operator|=
operator|new
name|PropertyWriter
argument_list|(
name|zookeeper
condition|?
literal|"ZKPropertiesWriter"
else|:
literal|"SimplePropertiesWriter"
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propertyWriterTags
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|SEVERE
argument_list|,
literal|"Only one "
operator|+
name|ConfigNameConstants
operator|.
name|PROPERTY_WRITER
operator|+
literal|" can be configured."
argument_list|)
throw|;
block|}
else|else
block|{
name|Element
name|pwElement
init|=
name|propertyWriterTags
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|type
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|ConfigParseUtil
operator|.
name|getAllAttributes
argument_list|(
name|pwElement
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|TYPE
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|type
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|params
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|SEVERE
argument_list|,
literal|"The "
operator|+
name|ConfigNameConstants
operator|.
name|PROPERTY_WRITER
operator|+
literal|" element must specify "
operator|+
name|TYPE
argument_list|)
throw|;
block|}
name|pw
operator|=
operator|new
name|PropertyWriter
argument_list|(
name|type
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|DIHConfiguration
argument_list|(
name|documentTags
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|this
argument_list|,
name|functions
argument_list|,
name|script
argument_list|,
name|dataSources
argument_list|,
name|pw
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createPropertyWriter
specifier|private
name|DIHProperties
name|createPropertyWriter
parameter_list|()
block|{
name|DIHProperties
name|propWriter
init|=
literal|null
decl_stmt|;
name|PropertyWriter
name|configPw
init|=
name|config
operator|.
name|getPropertyWriter
argument_list|()
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|DIHProperties
argument_list|>
name|writerClass
init|=
name|DocBuilder
operator|.
name|loadClass
argument_list|(
name|configPw
operator|.
name|getType
argument_list|()
argument_list|,
name|this
operator|.
name|core
argument_list|)
decl_stmt|;
name|propWriter
operator|=
name|writerClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|propWriter
operator|.
name|init
argument_list|(
name|this
argument_list|,
name|configPw
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|DataImportHandlerException
operator|.
name|SEVERE
argument_list|,
literal|"Unable to PropertyWriter implementation:"
operator|+
name|configPw
operator|.
name|getType
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|propWriter
return|;
block|}
DECL|method|getConfig
name|DIHConfiguration
name|getConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
DECL|method|getIndexStartTime
name|Date
name|getIndexStartTime
parameter_list|()
block|{
return|return
name|indexStartTime
return|;
block|}
DECL|method|setIndexStartTime
name|void
name|setIndexStartTime
parameter_list|(
name|Date
name|indextStartTime
parameter_list|)
block|{
name|this
operator|.
name|indexStartTime
operator|=
name|indextStartTime
expr_stmt|;
block|}
DECL|method|store
name|void
name|store
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|store
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|retrieve
name|Object
name|retrieve
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|store
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|getDataSourceInstance
name|DataSource
name|getDataSourceInstance
parameter_list|(
name|Entity
name|key
parameter_list|,
name|String
name|name
parameter_list|,
name|Context
name|ctx
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|p
init|=
name|requestLevelDataSourceProps
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
name|p
operator|=
name|config
operator|.
name|getDataSources
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
name|p
operator|=
name|requestLevelDataSourceProps
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// for default data source
if|if
condition|(
name|p
operator|==
literal|null
condition|)
name|p
operator|=
name|config
operator|.
name|getDataSources
argument_list|()
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|SEVERE
argument_list|,
literal|"No dataSource :"
operator|+
name|name
operator|+
literal|" available for entity :"
operator|+
name|key
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
name|String
name|type
init|=
name|p
operator|.
name|get
argument_list|(
name|TYPE
argument_list|)
decl_stmt|;
name|DataSource
name|dataSrc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|dataSrc
operator|=
operator|new
name|JdbcDataSource
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|dataSrc
operator|=
operator|(
name|DataSource
operator|)
name|DocBuilder
operator|.
name|loadClass
argument_list|(
name|type
argument_list|,
name|getCore
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|wrapAndThrow
argument_list|(
name|SEVERE
argument_list|,
name|e
argument_list|,
literal|"Invalid type for data source: "
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|Properties
name|copyProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|copyProps
operator|.
name|putAll
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|ctx
operator|.
name|getRequestParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"rows"
argument_list|)
condition|)
block|{
name|int
name|rows
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"rows"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"start"
argument_list|)
condition|)
block|{
name|rows
operator|+=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"start"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|copyProps
operator|.
name|setProperty
argument_list|(
literal|"maxRows"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|rows
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dataSrc
operator|.
name|init
argument_list|(
name|ctx
argument_list|,
name|copyProps
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|wrapAndThrow
argument_list|(
name|SEVERE
argument_list|,
name|e
argument_list|,
literal|"Failed to initialize DataSource: "
operator|+
name|key
operator|.
name|getDataSourceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|dataSrc
return|;
block|}
DECL|method|getStatus
specifier|public
name|Status
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
DECL|method|setStatus
specifier|public
name|void
name|setStatus
parameter_list|(
name|Status
name|status
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
DECL|method|isBusy
specifier|public
name|boolean
name|isBusy
parameter_list|()
block|{
return|return
name|importLock
operator|.
name|isLocked
argument_list|()
return|;
block|}
DECL|method|doFullImport
specifier|public
name|void
name|doFullImport
parameter_list|(
name|DIHWriter
name|writer
parameter_list|,
name|RequestInfo
name|requestParams
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting Full Import"
argument_list|)
expr_stmt|;
name|setStatus
argument_list|(
name|Status
operator|.
name|RUNNING_FULL_DUMP
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|DIHProperties
name|dihPropWriter
init|=
name|createPropertyWriter
argument_list|()
decl_stmt|;
name|setIndexStartTime
argument_list|(
name|dihPropWriter
operator|.
name|getCurrentTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|docBuilder
operator|=
operator|new
name|DocBuilder
argument_list|(
name|this
argument_list|,
name|writer
argument_list|,
name|dihPropWriter
argument_list|,
name|requestParams
argument_list|)
expr_stmt|;
name|checkWritablePersistFile
argument_list|(
name|writer
argument_list|,
name|dihPropWriter
argument_list|)
expr_stmt|;
name|docBuilder
operator|.
name|execute
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|requestParams
operator|.
name|isDebug
argument_list|()
condition|)
name|cumulativeStatistics
operator|.
name|add
argument_list|(
name|docBuilder
operator|.
name|importStatistics
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
literal|"Full Import failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|docBuilder
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
name|setStatus
argument_list|(
name|Status
operator|.
name|IDLE
argument_list|)
expr_stmt|;
name|DocBuilder
operator|.
name|INSTANCE
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkWritablePersistFile
specifier|private
name|void
name|checkWritablePersistFile
parameter_list|(
name|DIHWriter
name|writer
parameter_list|,
name|DIHProperties
name|dihPropWriter
parameter_list|)
block|{
if|if
condition|(
name|isDeltaImportSupported
operator|&&
operator|!
name|dihPropWriter
operator|.
name|isWritable
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|SEVERE
argument_list|,
literal|"Properties is not writable. Delta imports are supported by data config but will not work."
argument_list|)
throw|;
block|}
block|}
DECL|method|doDeltaImport
specifier|public
name|void
name|doDeltaImport
parameter_list|(
name|DIHWriter
name|writer
parameter_list|,
name|RequestInfo
name|requestParams
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting Delta Import"
argument_list|)
expr_stmt|;
name|setStatus
argument_list|(
name|Status
operator|.
name|RUNNING_DELTA_DUMP
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|DIHProperties
name|dihPropWriter
init|=
name|createPropertyWriter
argument_list|()
decl_stmt|;
name|setIndexStartTime
argument_list|(
name|dihPropWriter
operator|.
name|getCurrentTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|docBuilder
operator|=
operator|new
name|DocBuilder
argument_list|(
name|this
argument_list|,
name|writer
argument_list|,
name|dihPropWriter
argument_list|,
name|requestParams
argument_list|)
expr_stmt|;
name|checkWritablePersistFile
argument_list|(
name|writer
argument_list|,
name|dihPropWriter
argument_list|)
expr_stmt|;
name|docBuilder
operator|.
name|execute
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|requestParams
operator|.
name|isDebug
argument_list|()
condition|)
name|cumulativeStatistics
operator|.
name|add
argument_list|(
name|docBuilder
operator|.
name|importStatistics
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Delta Import Failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|docBuilder
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
name|setStatus
argument_list|(
name|Status
operator|.
name|IDLE
argument_list|)
expr_stmt|;
name|DocBuilder
operator|.
name|INSTANCE
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runAsync
specifier|public
name|void
name|runAsync
parameter_list|(
specifier|final
name|RequestInfo
name|reqParams
parameter_list|,
specifier|final
name|DIHWriter
name|sw
parameter_list|)
block|{
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|runCmd
argument_list|(
name|reqParams
argument_list|,
name|sw
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|runCmd
name|void
name|runCmd
parameter_list|(
name|RequestInfo
name|reqParams
parameter_list|,
name|DIHWriter
name|sw
parameter_list|)
block|{
name|String
name|command
init|=
name|reqParams
operator|.
name|getCommand
argument_list|()
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
name|ABORT_CMD
argument_list|)
condition|)
block|{
if|if
condition|(
name|docBuilder
operator|!=
literal|null
condition|)
block|{
name|docBuilder
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
operator|!
name|importLock
operator|.
name|tryLock
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Import command failed . another import is running"
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
if|if
condition|(
name|FULL_IMPORT_CMD
operator|.
name|equals
argument_list|(
name|command
argument_list|)
operator|||
name|IMPORT_CMD
operator|.
name|equals
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|doFullImport
argument_list|(
name|sw
argument_list|,
name|reqParams
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
name|DELTA_IMPORT_CMD
argument_list|)
condition|)
block|{
name|doDeltaImport
argument_list|(
name|sw
argument_list|,
name|reqParams
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|importLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getStatusMessages
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getStatusMessages
parameter_list|()
block|{
comment|//this map object is a Collections.synchronizedMap(new LinkedHashMap()). if we
comment|// synchronize on the object it must be safe to iterate through the map
name|Map
name|statusMessages
init|=
operator|(
name|Map
operator|)
name|retrieve
argument_list|(
name|STATUS_MSGS
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|statusMessages
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|statusMessages
init|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|statusMessages
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
operator|.
name|Entry
name|e
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|o
decl_stmt|;
comment|//the toString is taken because some of the Objects create the data lazily when toString() is called
name|result
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|getDocBuilder
name|DocBuilder
name|getDocBuilder
parameter_list|()
block|{
return|return
name|docBuilder
return|;
block|}
DECL|method|getEvaluators
name|Map
argument_list|<
name|String
argument_list|,
name|Evaluator
argument_list|>
name|getEvaluators
parameter_list|()
block|{
return|return
name|getEvaluators
argument_list|(
name|config
operator|.
name|getFunctions
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * used by tests.    */
DECL|method|getEvaluators
name|Map
argument_list|<
name|String
argument_list|,
name|Evaluator
argument_list|>
name|getEvaluators
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|fn
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Evaluator
argument_list|>
name|evaluators
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|evaluators
operator|.
name|put
argument_list|(
name|Evaluator
operator|.
name|DATE_FORMAT_EVALUATOR
argument_list|,
operator|new
name|DateFormatEvaluator
argument_list|()
argument_list|)
expr_stmt|;
name|evaluators
operator|.
name|put
argument_list|(
name|Evaluator
operator|.
name|SQL_ESCAPE_EVALUATOR
argument_list|,
operator|new
name|SqlEscapingEvaluator
argument_list|()
argument_list|)
expr_stmt|;
name|evaluators
operator|.
name|put
argument_list|(
name|Evaluator
operator|.
name|URL_ENCODE_EVALUATOR
argument_list|,
operator|new
name|UrlEvaluator
argument_list|()
argument_list|)
expr_stmt|;
name|evaluators
operator|.
name|put
argument_list|(
name|Evaluator
operator|.
name|ESCAPE_SOLR_QUERY_CHARS
argument_list|,
operator|new
name|SolrQueryEscapingEvaluator
argument_list|()
argument_list|)
expr_stmt|;
name|SolrCore
name|core
init|=
name|docBuilder
operator|==
literal|null
condition|?
literal|null
else|:
name|docBuilder
operator|.
name|dataImporter
operator|.
name|getCore
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
range|:
name|fn
control|)
block|{
try|try
block|{
name|evaluators
operator|.
name|put
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
argument_list|,
operator|(
name|Evaluator
operator|)
name|loadClass
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|CLASS
argument_list|)
argument_list|,
name|core
argument_list|)
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|wrapAndThrow
argument_list|(
name|SEVERE
argument_list|,
name|e
argument_list|,
literal|"Unable to instantiate evaluator: "
operator|+
name|map
operator|.
name|get
argument_list|(
name|CLASS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|evaluators
return|;
block|}
DECL|field|QUERY_COUNT
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|AtomicLong
argument_list|>
name|QUERY_COUNT
init|=
operator|new
name|ThreadLocal
argument_list|<
name|AtomicLong
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|AtomicLong
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|AtomicLong
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|class|MSG
specifier|static
specifier|final
class|class
name|MSG
block|{
DECL|field|NO_CONFIG_FOUND
specifier|public
specifier|static
specifier|final
name|String
name|NO_CONFIG_FOUND
init|=
literal|"Configuration not found"
decl_stmt|;
DECL|field|NO_INIT
specifier|public
specifier|static
specifier|final
name|String
name|NO_INIT
init|=
literal|"DataImportHandler started. Not Initialized. No commands can be run"
decl_stmt|;
DECL|field|INVALID_CONFIG
specifier|public
specifier|static
specifier|final
name|String
name|INVALID_CONFIG
init|=
literal|"FATAL: Could not create importer. DataImporter config invalid"
decl_stmt|;
DECL|field|LOAD_EXP
specifier|public
specifier|static
specifier|final
name|String
name|LOAD_EXP
init|=
literal|"Exception while loading DataImporter"
decl_stmt|;
DECL|field|JMX_DESC
specifier|public
specifier|static
specifier|final
name|String
name|JMX_DESC
init|=
literal|"Manage data import from databases to Solr"
decl_stmt|;
DECL|field|CMD_RUNNING
specifier|public
specifier|static
specifier|final
name|String
name|CMD_RUNNING
init|=
literal|"A command is still running..."
decl_stmt|;
DECL|field|DEBUG_NOT_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|DEBUG_NOT_ENABLED
init|=
literal|"Debug not enabled. Add a tag<str name=\"enableDebug\">true</str> in solrconfig.xml"
decl_stmt|;
DECL|field|CONFIG_RELOADED
specifier|public
specifier|static
specifier|final
name|String
name|CONFIG_RELOADED
init|=
literal|"Configuration Re-loaded sucessfully"
decl_stmt|;
DECL|field|CONFIG_NOT_RELOADED
specifier|public
specifier|static
specifier|final
name|String
name|CONFIG_NOT_RELOADED
init|=
literal|"Configuration NOT Re-loaded...Data Importer is busy."
decl_stmt|;
DECL|field|TOTAL_DOC_PROCESSED
specifier|public
specifier|static
specifier|final
name|String
name|TOTAL_DOC_PROCESSED
init|=
literal|"Total Documents Processed"
decl_stmt|;
DECL|field|TOTAL_FAILED_DOCS
specifier|public
specifier|static
specifier|final
name|String
name|TOTAL_FAILED_DOCS
init|=
literal|"Total Documents Failed"
decl_stmt|;
DECL|field|TOTAL_QUERIES_EXECUTED
specifier|public
specifier|static
specifier|final
name|String
name|TOTAL_QUERIES_EXECUTED
init|=
literal|"Total Requests made to DataSource"
decl_stmt|;
DECL|field|TOTAL_ROWS_EXECUTED
specifier|public
specifier|static
specifier|final
name|String
name|TOTAL_ROWS_EXECUTED
init|=
literal|"Total Rows Fetched"
decl_stmt|;
DECL|field|TOTAL_DOCS_DELETED
specifier|public
specifier|static
specifier|final
name|String
name|TOTAL_DOCS_DELETED
init|=
literal|"Total Documents Deleted"
decl_stmt|;
DECL|field|TOTAL_DOCS_SKIPPED
specifier|public
specifier|static
specifier|final
name|String
name|TOTAL_DOCS_SKIPPED
init|=
literal|"Total Documents Skipped"
decl_stmt|;
block|}
DECL|method|getCore
specifier|public
name|SolrCore
name|getCore
parameter_list|()
block|{
return|return
name|core
return|;
block|}
DECL|method|putToCoreScopeSession
name|void
name|putToCoreScopeSession
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
name|coreScopeSession
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
DECL|method|getFromCoreScopeSession
name|Object
name|getFromCoreScopeSession
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|coreScopeSession
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|field|COLUMN
specifier|public
specifier|static
specifier|final
name|String
name|COLUMN
init|=
literal|"column"
decl_stmt|;
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"type"
decl_stmt|;
DECL|field|DATA_SRC
specifier|public
specifier|static
specifier|final
name|String
name|DATA_SRC
init|=
literal|"dataSource"
decl_stmt|;
DECL|field|MULTI_VALUED
specifier|public
specifier|static
specifier|final
name|String
name|MULTI_VALUED
init|=
literal|"multiValued"
decl_stmt|;
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
DECL|field|STATUS_MSGS
specifier|public
specifier|static
specifier|final
name|String
name|STATUS_MSGS
init|=
literal|"status-messages"
decl_stmt|;
DECL|field|FULL_IMPORT_CMD
specifier|public
specifier|static
specifier|final
name|String
name|FULL_IMPORT_CMD
init|=
literal|"full-import"
decl_stmt|;
DECL|field|IMPORT_CMD
specifier|public
specifier|static
specifier|final
name|String
name|IMPORT_CMD
init|=
literal|"import"
decl_stmt|;
DECL|field|DELTA_IMPORT_CMD
specifier|public
specifier|static
specifier|final
name|String
name|DELTA_IMPORT_CMD
init|=
literal|"delta-import"
decl_stmt|;
DECL|field|ABORT_CMD
specifier|public
specifier|static
specifier|final
name|String
name|ABORT_CMD
init|=
literal|"abort"
decl_stmt|;
DECL|field|DEBUG_MODE
specifier|public
specifier|static
specifier|final
name|String
name|DEBUG_MODE
init|=
literal|"debug"
decl_stmt|;
DECL|field|RELOAD_CONF_CMD
specifier|public
specifier|static
specifier|final
name|String
name|RELOAD_CONF_CMD
init|=
literal|"reload-config"
decl_stmt|;
DECL|field|SHOW_CONF_CMD
specifier|public
specifier|static
specifier|final
name|String
name|SHOW_CONF_CMD
init|=
literal|"show-config"
decl_stmt|;
block|}
end_class
end_unit
