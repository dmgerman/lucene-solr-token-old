begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.dataimport
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|XMLErrorLogger
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLInputFactory
import|;
end_import
begin_import
import|import static
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
operator|.
name|*
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  *<p>  * A streaming xpath parser which uses StAX for XML parsing. It supports only  * a subset of xpath syntax.  *</p><pre>  * /a/b/subject[@qualifier='fullTitle']  * /a/b/subject[@qualifier=]/subtag  * /a/b/subject/@qualifier  * //a  * //a/b...  * /a//b  * /a//b...  * /a/b/c  *</pre>  * A record is a Map<String,Object> . The key is the provided name  * and the value is a String or a List<String>  *  * This class is thread-safe for parsing xml. But adding fields is not  * thread-safe. The recommended usage is to addField() in one thread and   * then share the instance across threads.  *</p>  *<p/>  *<b>This API is experimental and may change in the future.</b>  *<p>  * @version $Id$  * @since solr 1.3  */
end_comment
begin_class
DECL|class|XPathRecordReader
specifier|public
class|class
name|XPathRecordReader
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|XPathRecordReader
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|XMLLOG
specifier|private
specifier|static
specifier|final
name|XMLErrorLogger
name|XMLLOG
init|=
operator|new
name|XMLErrorLogger
argument_list|(
name|LOG
argument_list|)
decl_stmt|;
DECL|field|rootNode
specifier|private
name|Node
name|rootNode
init|=
operator|new
name|Node
argument_list|(
literal|"/"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**     * The FLATTEN flag indicates that all text and cdata under a specific    * tag should be recursivly fetched and appended to the current Node's    * value.    */
DECL|field|FLATTEN
specifier|public
specifier|static
specifier|final
name|int
name|FLATTEN
init|=
literal|1
decl_stmt|;
comment|/**    * A constructor called with a '|' seperated list of Xpath expressions    * which define sub sections of the XML stream that are to be emitted as    * seperate records.    *     * @param forEachXpath  The XPATH for which a record is emitted. Once the    * xpath tag is encountered, the Node.parse method starts collecting wanted     * fields and at the close of the tag, a record is emitted containing all     * fields collected since the tag start. Once     * emitted the collected fields are cleared. Any fields collected in the     * parent tag or above will also be included in the record, but these are    * not cleared after emitting the record.    *    * It uses the ' | ' syntax of XPATH to pass in multiple xpaths.    */
DECL|method|XPathRecordReader
specifier|public
name|XPathRecordReader
parameter_list|(
name|String
name|forEachXpath
parameter_list|)
block|{
name|String
index|[]
name|splits
init|=
name|forEachXpath
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|split
range|:
name|splits
control|)
block|{
name|split
operator|=
name|split
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|split
operator|.
name|startsWith
argument_list|(
literal|"//"
argument_list|)
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"forEach cannot start with '//': "
operator|+
name|split
argument_list|)
throw|;
if|if
condition|(
name|split
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
comment|// The created Node has a name set to the full forEach attribute xpath
name|addField0
argument_list|(
name|split
argument_list|,
name|split
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A wrapper around {@link #addField0 addField0()} to create a series of      * Nodes based on the supplied Xpath and a given fieldName. The created      * nodes are inserted into a Node tree.    *    * @param name The name for this field in the emitted record    * @param xpath The xpath expression for this field    * @param multiValued If 'true' then the emitted record will have values in     *                    a List<String>    */
DECL|method|addField
specifier|public
specifier|synchronized
name|XPathRecordReader
name|addField
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|xpath
parameter_list|,
name|boolean
name|multiValued
parameter_list|)
block|{
name|addField0
argument_list|(
name|xpath
argument_list|,
name|name
argument_list|,
name|multiValued
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * A wrapper around {@link #addField0 addField0()} to create a series of      * Nodes based on the supplied Xpath and a given fieldName. The created      * nodes are inserted into a Node tree.    *    * @param name The name for this field in the emitted record    * @param xpath The xpath expression for this field    * @param multiValued If 'true' then the emitted record will have values in     *                    a List<String>    * @param flags FLATTEN: Recursivly combine text from all child XML elements    */
DECL|method|addField
specifier|public
specifier|synchronized
name|XPathRecordReader
name|addField
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|xpath
parameter_list|,
name|boolean
name|multiValued
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|addField0
argument_list|(
name|xpath
argument_list|,
name|name
argument_list|,
name|multiValued
argument_list|,
literal|false
argument_list|,
name|flags
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Splits the XPATH into a List of xpath segments and calls build() to    * construct a tree of Nodes representing xpath segments. The resulting    * tree structure ends up describing all the Xpaths we are interested in.    *    * @param xpath The xpath expression for this field    * @param name The name for this field in the emitted record    * @param multiValued If 'true' then the emitted record will have values in     *                    a List<String>    * @param isRecord Flags that this XPATH is from a forEach statement    * @param flags The only supported flag is 'FLATTEN'    */
DECL|method|addField0
specifier|private
name|void
name|addField0
parameter_list|(
name|String
name|xpath
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|multiValued
parameter_list|,
name|boolean
name|isRecord
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
if|if
condition|(
operator|!
name|xpath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"xpath must start with '/' : "
operator|+
name|xpath
argument_list|)
throw|;
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|splitEscapeQuote
argument_list|(
name|xpath
argument_list|)
decl_stmt|;
comment|// deal with how split behaves when seperator starts a string!
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|paths
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
name|paths
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|rootNode
operator|.
name|build
argument_list|(
name|paths
argument_list|,
name|name
argument_list|,
name|multiValued
argument_list|,
name|isRecord
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|rootNode
operator|.
name|buildOptimise
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**     * Uses {@link #streamRecords streamRecords} to parse the XML source but with    * a handler that collects all the emitted records into a single List which     * is returned upon completion.    *    * @param r the stream reader    * @return results a List of emitted records    */
DECL|method|getAllRecords
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getAllRecords
parameter_list|(
name|Reader
name|r
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|streamRecords
argument_list|(
name|r
argument_list|,
operator|new
name|Handler
argument_list|()
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|record
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|results
operator|.
name|add
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
comment|/**     * Creates an XML stream reader on top of whatever reader has been    * configured. Then calls parse() with a handler which is    * invoked forEach record emitted.    *    * @param r the stream reader    * @param handler The callback instance    */
DECL|method|streamRecords
specifier|public
name|void
name|streamRecords
parameter_list|(
name|Reader
name|r
parameter_list|,
name|Handler
name|handler
parameter_list|)
block|{
try|try
block|{
name|XMLStreamReader
name|parser
init|=
name|factory
operator|.
name|createXMLStreamReader
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|rootNode
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|handler
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|Stack
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * For each node/leaf in the Node tree there is one object of this class.    * This tree of objects represents all the XPaths we are interested in.    * For each Xpath segment of interest we create a node. In most cases the    * node (branch) is rather basic , but for the final portion (leaf) of any    * Xpath we add more information to the Node. When parsing the XML document     * we step though this tree as we stream records from the reader. If the XML    * document departs from this tree we skip start tags till we are back on     * the tree.    */
DECL|class|Node
specifier|private
specifier|static
class|class
name|Node
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
comment|// genrally: segment of the Xpath represented by this Node
DECL|field|fieldName
name|String
name|fieldName
decl_stmt|;
comment|// the fieldname in the emitted record (key of the map)
DECL|field|xpathName
name|String
name|xpathName
decl_stmt|;
comment|// the segment of the Xpath represented by this Node
DECL|field|forEachPath
name|String
name|forEachPath
decl_stmt|;
comment|// the full Xpath from the forEach entity attribute
DECL|field|attributes
name|List
argument_list|<
name|Node
argument_list|>
name|attributes
decl_stmt|;
comment|// List of attribute Nodes associated with this Node
DECL|field|childNodes
name|List
argument_list|<
name|Node
argument_list|>
name|childNodes
decl_stmt|;
comment|// List of immediate child Nodes of this node
DECL|field|wildCardNodes
name|List
argument_list|<
name|Node
argument_list|>
name|wildCardNodes
decl_stmt|;
comment|// List of '//' style decendants of this Node
DECL|field|attribAndValues
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|attribAndValues
decl_stmt|;
DECL|field|wildAncestor
name|Node
name|wildAncestor
decl_stmt|;
comment|// ancestor Node containing '//' style decendants
DECL|field|parent
name|Node
name|parent
decl_stmt|;
comment|// parent Node in the tree
DECL|field|hasText
name|boolean
name|hasText
init|=
literal|false
decl_stmt|;
comment|// flag: store/emit streamed text for this node
DECL|field|multiValued
name|boolean
name|multiValued
init|=
literal|false
decl_stmt|;
comment|//flag: this fields values are returned as a List
DECL|field|isRecord
name|boolean
name|isRecord
init|=
literal|false
decl_stmt|;
comment|//flag: this Node starts a new record
DECL|field|flatten
specifier|private
name|boolean
name|flatten
decl_stmt|;
comment|//flag: child text is also to be emitted
DECL|method|Node
specifier|public
name|Node
parameter_list|(
name|String
name|name
parameter_list|,
name|Node
name|p
parameter_list|)
block|{
comment|// Create a basic Node, suitable for the mid portions of any Xpath.
comment|// Node.xpathName and Node.name are set to same value.
name|xpathName
operator|=
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|parent
operator|=
name|p
expr_stmt|;
block|}
DECL|method|Node
specifier|public
name|Node
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|boolean
name|multiValued
parameter_list|)
block|{
comment|// This is only called from build() when describing an attribute.
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
comment|// a segment from the Xpath
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
comment|// name to store collected values against
name|this
operator|.
name|multiValued
operator|=
name|multiValued
expr_stmt|;
comment|// return collected values in a List
block|}
comment|/**      * This is the method where all the XML parsing happens. For each       * tag/subtag read from the source, this method is called recursively.      *      */
DECL|method|parse
specifier|private
name|void
name|parse
parameter_list|(
name|XMLStreamReader
name|parser
parameter_list|,
name|Handler
name|handler
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
parameter_list|,
name|Stack
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|stack
parameter_list|,
comment|// lists of values to purge
name|boolean
name|recordStarted
parameter_list|)
throws|throws
name|IOException
throws|,
name|XMLStreamException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|valuesAddedinThisFrame
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isRecord
condition|)
block|{
comment|// This Node is a match for an XPATH from a forEach attribute,
comment|// prepare for the clean up that will occurr when the record
comment|// is emitted after its END_ELEMENT is matched
name|recordStarted
operator|=
literal|true
expr_stmt|;
name|valuesAddedinThisFrame
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|valuesAddedinThisFrame
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|recordStarted
condition|)
block|{
comment|// This node is a child of some parent which matched against forEach
comment|// attribute. Continue to add values to an existing record.
name|valuesAddedinThisFrame
operator|=
name|stack
operator|.
name|peek
argument_list|()
expr_stmt|;
block|}
try|try
block|{
comment|/* The input stream has deposited us at this Node in our tree of           * intresting nodes. Depending on how this node is of interest,          * process further tokens from the input stream and decide what          * we do next          */
if|if
condition|(
name|attributes
operator|!=
literal|null
condition|)
block|{
comment|// we interested in storing attributes from the input stream
for|for
control|(
name|Node
name|node
range|:
name|attributes
control|)
block|{
name|String
name|value
init|=
name|parser
operator|.
name|getAttributeValue
argument_list|(
literal|null
argument_list|,
name|node
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|||
operator|(
name|recordStarted
operator|&&
operator|!
name|isRecord
operator|)
condition|)
block|{
name|putText
argument_list|(
name|values
argument_list|,
name|value
argument_list|,
name|node
operator|.
name|fieldName
argument_list|,
name|node
operator|.
name|multiValued
argument_list|)
expr_stmt|;
name|valuesAddedinThisFrame
operator|.
name|add
argument_list|(
name|node
operator|.
name|fieldName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Set
argument_list|<
name|Node
argument_list|>
name|childrenFound
init|=
operator|new
name|HashSet
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|event
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|flattenedStarts
init|=
literal|0
decl_stmt|;
comment|// our tag depth when flattening elements
name|StringBuilder
name|text
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|event
operator|=
name|parser
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|event
operator|==
name|END_ELEMENT
condition|)
block|{
if|if
condition|(
name|flattenedStarts
operator|>
literal|0
condition|)
name|flattenedStarts
operator|--
expr_stmt|;
else|else
block|{
if|if
condition|(
name|hasText
operator|&&
name|valuesAddedinThisFrame
operator|!=
literal|null
condition|)
block|{
name|valuesAddedinThisFrame
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|putText
argument_list|(
name|values
argument_list|,
name|text
operator|.
name|toString
argument_list|()
argument_list|,
name|fieldName
argument_list|,
name|multiValued
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isRecord
condition|)
name|handler
operator|.
name|handle
argument_list|(
name|getDeepCopy
argument_list|(
name|values
argument_list|)
argument_list|,
name|forEachPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|childNodes
operator|!=
literal|null
operator|&&
name|recordStarted
operator|&&
operator|!
name|isRecord
operator|&&
operator|!
name|childrenFound
operator|.
name|containsAll
argument_list|(
name|childNodes
argument_list|)
condition|)
block|{
comment|// nonReccord nodes where we have not collected text for ALL
comment|// the child nodes.
for|for
control|(
name|Node
name|n
range|:
name|childNodes
control|)
block|{
comment|// For the multivalue child nodes where we could have, but
comment|// didnt, collect text. Push a null string into values.
if|if
condition|(
operator|!
name|childrenFound
operator|.
name|contains
argument_list|(
name|n
argument_list|)
condition|)
name|n
operator|.
name|putNulls
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
block|}
elseif|else
if|if
condition|(
name|hasText
operator|&&
operator|(
name|event
operator|==
name|CDATA
operator|||
name|event
operator|==
name|CHARACTERS
operator|||
name|event
operator|==
name|SPACE
operator|)
condition|)
block|{
name|text
operator|.
name|append
argument_list|(
name|parser
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|==
name|START_ELEMENT
condition|)
block|{
if|if
condition|(
name|flatten
condition|)
name|flattenedStarts
operator|++
expr_stmt|;
else|else
name|handleStartElement
argument_list|(
name|parser
argument_list|,
name|childrenFound
argument_list|,
name|handler
argument_list|,
name|values
argument_list|,
name|stack
argument_list|,
name|recordStarted
argument_list|)
expr_stmt|;
block|}
comment|// END_DOCUMENT is least likely to appear and should be
comment|// last in if-then-else skip chain
elseif|else
if|if
condition|(
name|event
operator|==
name|END_DOCUMENT
condition|)
return|return;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|(
name|isRecord
operator|||
operator|!
name|recordStarted
operator|)
operator|&&
operator|!
name|stack
operator|.
name|empty
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|cleanThis
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|cleanThis
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|fld
range|:
name|cleanThis
control|)
name|values
operator|.
name|remove
argument_list|(
name|fld
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * If a new tag is encountered, check if it is of interest or not by seeing      * if it matches against our node tree. If we have deperted from the node       * tree then walk back though the tree's ancestor nodes checking to see if      * any // expressions exist for the node and compare them against the new      * tag. If matched then "jump" to that node, otherwise ignore the tag.      *      * Note, the list of // expressions found while walking back up the tree      * is chached in the HashMap decends. Then if the new tag is to be skipped,      * any inner chil tags are compared against the cache and jumped to if      * matched.      */
DECL|method|handleStartElement
specifier|private
name|void
name|handleStartElement
parameter_list|(
name|XMLStreamReader
name|parser
parameter_list|,
name|Set
argument_list|<
name|Node
argument_list|>
name|childrenFound
parameter_list|,
name|Handler
name|handler
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
parameter_list|,
name|Stack
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|stack
parameter_list|,
name|boolean
name|recordStarted
parameter_list|)
throws|throws
name|IOException
throws|,
name|XMLStreamException
block|{
name|Node
name|n
init|=
name|getMatchingNode
argument_list|(
name|parser
argument_list|,
name|childNodes
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|decends
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|!=
literal|null
condition|)
block|{
name|childrenFound
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|n
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|handler
argument_list|,
name|values
argument_list|,
name|stack
argument_list|,
name|recordStarted
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// The stream has diverged from the tree of interesting elements, but
comment|// are there any wildCardNodes ... anywhere in our path from the root?
name|Node
name|dn
init|=
name|this
decl_stmt|;
comment|// checking our Node first!
do|do
block|{
if|if
condition|(
name|dn
operator|.
name|wildCardNodes
operator|!=
literal|null
condition|)
block|{
comment|// Check to see if the streams tag matches one of the "//" all
comment|// decendents type expressions for this node.
name|n
operator|=
name|getMatchingNode
argument_list|(
name|parser
argument_list|,
name|dn
operator|.
name|wildCardNodes
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|!=
literal|null
condition|)
block|{
name|childrenFound
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|n
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|handler
argument_list|,
name|values
argument_list|,
name|stack
argument_list|,
name|recordStarted
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// add the list of this nodes wild decendents to the cache
for|for
control|(
name|Node
name|nn
range|:
name|dn
operator|.
name|wildCardNodes
control|)
name|decends
operator|.
name|put
argument_list|(
name|nn
operator|.
name|name
argument_list|,
name|nn
argument_list|)
expr_stmt|;
block|}
name|dn
operator|=
name|dn
operator|.
name|wildAncestor
expr_stmt|;
comment|// leap back along the tree toward root
block|}
do|while
condition|(
name|dn
operator|!=
literal|null
condition|)
do|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
comment|// we have a START_ELEMENT which is not within the tree of
comment|// interesting nodes. Skip over the contents of this element
comment|// but recursivly repeat the above for any START_ELEMENTs
comment|// found within this element.
name|int
name|count
init|=
literal|1
decl_stmt|;
comment|// we have had our first START_ELEMENT
while|while
condition|(
name|count
operator|!=
literal|0
condition|)
block|{
name|int
name|token
init|=
name|parser
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|START_ELEMENT
condition|)
block|{
name|Node
name|nn
init|=
operator|(
name|Node
operator|)
name|decends
operator|.
name|get
argument_list|(
name|parser
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nn
operator|!=
literal|null
condition|)
block|{
comment|// We have a //Node which matches the stream's parser.localName
name|childrenFound
operator|.
name|add
argument_list|(
name|nn
argument_list|)
expr_stmt|;
comment|// Parse the contents of this stream element
name|nn
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|handler
argument_list|,
name|values
argument_list|,
name|stack
argument_list|,
name|recordStarted
argument_list|)
expr_stmt|;
block|}
else|else
name|count
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|END_ELEMENT
condition|)
name|count
operator|--
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Check if the current tag is to be parsed or not. We step through the      * supplied List "searchList" looking for a match. If matched, return the      * Node object.      */
DECL|method|getMatchingNode
specifier|private
name|Node
name|getMatchingNode
parameter_list|(
name|XMLStreamReader
name|parser
parameter_list|,
name|List
argument_list|<
name|Node
argument_list|>
name|searchL
parameter_list|)
block|{
if|if
condition|(
name|searchL
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|localName
init|=
name|parser
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|searchL
control|)
block|{
if|if
condition|(
name|n
operator|.
name|name
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
if|if
condition|(
name|n
operator|.
name|attribAndValues
operator|==
literal|null
condition|)
return|return
name|n
return|;
if|if
condition|(
name|checkForAttributes
argument_list|(
name|parser
argument_list|,
name|n
operator|.
name|attribAndValues
argument_list|)
condition|)
return|return
name|n
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|checkForAttributes
specifier|private
name|boolean
name|checkForAttributes
parameter_list|(
name|XMLStreamReader
name|parser
parameter_list|,
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|attrs
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|attrs
control|)
block|{
name|String
name|val
init|=
name|parser
operator|.
name|getAttributeValue
argument_list|(
literal|null
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * A recursive routine that walks the Node tree from a supplied start      * pushing a null string onto every multiValued fieldName's List of values      * where a value has not been provided from the stream.      */
DECL|method|putNulls
specifier|private
name|void
name|putNulls
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
name|attributes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Node
name|n
range|:
name|attributes
control|)
block|{
if|if
condition|(
name|n
operator|.
name|multiValued
condition|)
name|putText
argument_list|(
name|values
argument_list|,
literal|null
argument_list|,
name|n
operator|.
name|fieldName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasText
operator|&&
name|multiValued
condition|)
name|putText
argument_list|(
name|values
argument_list|,
literal|null
argument_list|,
name|fieldName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|childNodes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Node
name|childNode
range|:
name|childNodes
control|)
name|childNode
operator|.
name|putNulls
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Add the field name and text into the values Map. If it is a non      * multivalued field, then the text is simply placed in the object      * portion of the Map. If it is a multivalued field then the text is      * pushed onto a List which is the object portion of the Map.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|putText
specifier|private
name|void
name|putText
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|boolean
name|multiValued
parameter_list|)
block|{
if|if
condition|(
name|multiValued
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|v
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|values
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|v
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|values
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Walk the Node tree propagating any wildDescentant information to      * child nodes. This allows us to optimise the performance of the      * main parse method.      */
DECL|method|buildOptimise
specifier|private
name|void
name|buildOptimise
parameter_list|(
name|Node
name|wa
parameter_list|)
block|{
name|wildAncestor
operator|=
name|wa
expr_stmt|;
if|if
condition|(
name|wildCardNodes
operator|!=
literal|null
condition|)
name|wa
operator|=
name|this
expr_stmt|;
if|if
condition|(
name|childNodes
operator|!=
literal|null
condition|)
for|for
control|(
name|Node
name|n
range|:
name|childNodes
control|)
name|n
operator|.
name|buildOptimise
argument_list|(
name|wa
argument_list|)
expr_stmt|;
block|}
comment|/**      * Build a Node tree structure representing all Xpaths of intrest to us.      * This must be done before parsing of the XML stream starts. Each node       * holds one portion of an Xpath. Taking each Xpath segment in turn this      * method walks the Node tree  and finds where the new segment should be      * inserted. It creates a Node representing a field's name, XPATH and       * some flags and inserts the Node into the Node tree.      */
DECL|method|build
specifier|private
name|void
name|build
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|,
comment|// a List of segments from the split xpaths
name|String
name|fieldName
parameter_list|,
comment|// the fieldName assoc with this Xpath
name|boolean
name|multiValued
parameter_list|,
comment|// flag if this fieldName is multiValued or not
name|boolean
name|record
parameter_list|,
comment|// is this xpath a record or a field
name|int
name|flags
comment|// are we to flatten matching xpaths
parameter_list|)
block|{
comment|// recursivly walk the paths Lists adding new Nodes as required
name|String
name|xpseg
init|=
name|paths
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// shift out next Xpath segment
if|if
condition|(
name|paths
operator|.
name|isEmpty
argument_list|()
operator|&&
name|xpseg
operator|.
name|startsWith
argument_list|(
literal|"@"
argument_list|)
condition|)
block|{
comment|// we have reached end of element portion of Xpath and can now only
comment|// have an element attribute. Add it to this nodes list of attributes
if|if
condition|(
name|attributes
operator|==
literal|null
condition|)
block|{
name|attributes
operator|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|xpseg
operator|=
name|xpseg
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// strip the '@'
name|attributes
operator|.
name|add
argument_list|(
operator|new
name|Node
argument_list|(
name|xpseg
argument_list|,
name|fieldName
argument_list|,
name|multiValued
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xpseg
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// we have a '//' selector for all decendents of the current nodes
name|xpseg
operator|=
name|paths
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// shift out next Xpath segment
if|if
condition|(
name|wildCardNodes
operator|==
literal|null
condition|)
name|wildCardNodes
operator|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
expr_stmt|;
name|Node
name|n
init|=
name|getOrAddNode
argument_list|(
name|xpseg
argument_list|,
name|wildCardNodes
argument_list|)
decl_stmt|;
if|if
condition|(
name|paths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// We are current a leaf node.
comment|// xpath with content we want to store and return
name|n
operator|.
name|hasText
operator|=
literal|true
expr_stmt|;
comment|// we have to store text found here
name|n
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
comment|// name to store collected text against
name|n
operator|.
name|multiValued
operator|=
name|multiValued
expr_stmt|;
comment|// true: text be stored in a List
name|n
operator|.
name|flatten
operator|=
name|flags
operator|==
name|FLATTEN
expr_stmt|;
comment|// true: store text from child tags
block|}
else|else
block|{
comment|// recurse to handle next paths segment
name|n
operator|.
name|build
argument_list|(
name|paths
argument_list|,
name|fieldName
argument_list|,
name|multiValued
argument_list|,
name|record
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|childNodes
operator|==
literal|null
condition|)
name|childNodes
operator|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
expr_stmt|;
comment|// does this "name" already exist as a child node.
name|Node
name|n
init|=
name|getOrAddNode
argument_list|(
name|xpseg
argument_list|,
name|childNodes
argument_list|)
decl_stmt|;
if|if
condition|(
name|paths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// We have emptied paths, we are for the moment a leaf of the tree.
comment|// When parsing the actual input we have traversed to a position
comment|// where we actutally have to do something. getOrAddNode() will
comment|// have created and returned a new minimal Node with name and
comment|// xpathName already populated. We need to add more information.
if|if
condition|(
name|record
condition|)
block|{
comment|// forEach attribute
name|n
operator|.
name|isRecord
operator|=
literal|true
expr_stmt|;
comment|// flag: forEach attribute, prepare to emit rec
name|n
operator|.
name|forEachPath
operator|=
name|fieldName
expr_stmt|;
comment|// the full forEach attribute xpath
block|}
else|else
block|{
comment|// xpath with content we want to store and return
name|n
operator|.
name|hasText
operator|=
literal|true
expr_stmt|;
comment|// we have to store text found here
name|n
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
comment|// name to store collected text against
name|n
operator|.
name|multiValued
operator|=
name|multiValued
expr_stmt|;
comment|// true: text be stored in a List
name|n
operator|.
name|flatten
operator|=
name|flags
operator|==
name|FLATTEN
expr_stmt|;
comment|// true: store text from child tags
block|}
block|}
else|else
block|{
comment|// recurse to handle next paths segment
name|n
operator|.
name|build
argument_list|(
name|paths
argument_list|,
name|fieldName
argument_list|,
name|multiValued
argument_list|,
name|record
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getOrAddNode
specifier|private
name|Node
name|getOrAddNode
parameter_list|(
name|String
name|xpathName
parameter_list|,
name|List
argument_list|<
name|Node
argument_list|>
name|searchList
parameter_list|)
block|{
for|for
control|(
name|Node
name|n
range|:
name|searchList
control|)
if|if
condition|(
name|n
operator|.
name|xpathName
operator|.
name|equals
argument_list|(
name|xpathName
argument_list|)
condition|)
return|return
name|n
return|;
comment|// new territory! add a new node for this Xpath bitty
name|Node
name|n
init|=
operator|new
name|Node
argument_list|(
name|xpathName
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|// a minimal Node initalization
name|Matcher
name|m
init|=
name|ATTRIB_PRESENT_WITHVAL
operator|.
name|matcher
argument_list|(
name|xpathName
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|n
operator|.
name|name
operator|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|m
operator|.
name|start
argument_list|(
literal|2
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attribs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|find
argument_list|(
name|start
argument_list|)
condition|)
break|break;
name|attribs
operator|.
name|put
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|=
name|m
operator|.
name|end
argument_list|(
literal|6
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|.
name|attribAndValues
operator|==
literal|null
condition|)
name|n
operator|.
name|attribAndValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|n
operator|.
name|attribAndValues
operator|.
name|addAll
argument_list|(
name|attribs
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|searchList
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
comment|/**      * Copies a supplied Map to a new Map which is returned. Used to copy a      * records values. If a fields value is a List then they have to be      * deep-copied for thread safety      */
DECL|method|getDeepCopy
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getDeepCopy
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|List
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|(
operator|(
name|List
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
comment|// end of class Node
comment|/**    * The Xpath is split into segments using the '/' as a seperator. However    * this method deals with special cases where there is a slash '/' character    * inside the attribute value e.g. x/@html='text/html'. We split by '/' but     * then reassemble things were the '/' appears within a quoted sub-string.    *    * We have already enforced that the string must begin with a seperator. This    * method depends heavily on how split behaves if the string starts with the    * seperator or if a sequence of multiple seperator's appear.     */
DECL|method|splitEscapeQuote
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|splitEscapeQuote
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|ss
init|=
name|str
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ss
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// i=1: skip seperator at start of string
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|quoteCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|ss
index|[
name|i
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ss
index|[
name|i
index|]
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
if|if
condition|(
name|ss
index|[
name|i
index|]
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
operator|==
literal|'\''
condition|)
name|quoteCount
operator|++
expr_stmt|;
comment|// have we got a split inside quoted sub-string?
if|if
condition|(
operator|(
name|quoteCount
operator|%
literal|2
operator|)
operator|==
literal|0
condition|)
break|break;
comment|// yes!; replace the '/' and loop to concat next token
name|i
operator|++
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|field|factory
specifier|static
name|XMLInputFactory
name|factory
init|=
name|XMLInputFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
static|static
block|{
name|factory
operator|.
name|setProperty
argument_list|(
name|XMLInputFactory
operator|.
name|IS_VALIDATING
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setProperty
argument_list|(
name|XMLInputFactory
operator|.
name|SUPPORT_DTD
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setXMLReporter
argument_list|(
name|XMLLOG
argument_list|)
expr_stmt|;
block|}
comment|/**Implement this interface to stream records as and when one is found.    *    */
DECL|interface|Handler
specifier|public
specifier|static
interface|interface
name|Handler
block|{
comment|/**      * @param record The record map. The key is the field name as provided in       * the addField() methods. The value can be a single String (for single       * valued fields) or a List<String> (for multiValued).      * @param xpath The forEach XPATH for which this record is being emitted      * If there is any change all parsing will be aborted and the Exception      * is propogated up      */
DECL|method|handle
specifier|public
name|void
name|handle
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|record
parameter_list|,
name|String
name|xpath
parameter_list|)
function_decl|;
block|}
DECL|field|ATTRIB_PRESENT_WITHVAL
specifier|private
specifier|static
specifier|final
name|Pattern
name|ATTRIB_PRESENT_WITHVAL
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\S*?)?(\\[@)(\\S*?)(='(.*?)')?(\\])"
argument_list|)
decl_stmt|;
block|}
end_class
end_unit
