begin_unit
begin_package
DECL|package|org.apache.solr.handler.dataimport
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import
begin_class
DECL|class|SortedMapBackedCache
specifier|public
class|class
name|SortedMapBackedCache
implements|implements
name|DIHCache
block|{
DECL|field|theMap
specifier|private
name|SortedMap
argument_list|<
name|Object
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
name|theMap
init|=
literal|null
decl_stmt|;
DECL|field|isOpen
specifier|private
name|boolean
name|isOpen
init|=
literal|false
decl_stmt|;
DECL|field|isReadOnly
specifier|private
name|boolean
name|isReadOnly
init|=
literal|false
decl_stmt|;
DECL|field|primaryKeyName
name|String
name|primaryKeyName
init|=
literal|null
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rec
parameter_list|)
block|{
name|checkOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|checkReadOnly
argument_list|()
expr_stmt|;
if|if
condition|(
name|rec
operator|==
literal|null
operator|||
name|rec
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|primaryKeyName
operator|==
literal|null
condition|)
block|{
name|primaryKeyName
operator|=
name|rec
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|Object
name|pk
init|=
name|rec
operator|.
name|get
argument_list|(
name|primaryKeyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pk
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|Collection
argument_list|<
name|Object
argument_list|>
name|c
init|=
operator|(
name|Collection
argument_list|<
name|Object
argument_list|>
operator|)
name|pk
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The primary key must have exactly 1 element."
argument_list|)
throw|;
block|}
name|pk
operator|=
name|c
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|thisKeysRecs
init|=
name|theMap
operator|.
name|get
argument_list|(
name|pk
argument_list|)
decl_stmt|;
if|if
condition|(
name|thisKeysRecs
operator|==
literal|null
condition|)
block|{
name|thisKeysRecs
operator|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|theMap
operator|.
name|put
argument_list|(
name|pk
argument_list|,
name|thisKeysRecs
argument_list|)
expr_stmt|;
block|}
name|thisKeysRecs
operator|.
name|add
parameter_list|(
name|rec
parameter_list|)
constructor_decl|;
block|}
end_class
begin_function
DECL|method|checkOpen
specifier|private
name|void
name|checkOpen
parameter_list|(
name|boolean
name|shouldItBe
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isOpen
operator|&&
name|shouldItBe
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must call open() before using this cache."
argument_list|)
throw|;
block|}
if|if
condition|(
name|isOpen
operator|&&
operator|!
name|shouldItBe
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The cache is already open."
argument_list|)
throw|;
block|}
block|}
end_function
begin_function
DECL|method|checkReadOnly
specifier|private
name|void
name|checkReadOnly
parameter_list|()
block|{
if|if
condition|(
name|isReadOnly
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cache is read-only."
argument_list|)
throw|;
block|}
block|}
end_function
begin_function
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|isOpen
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
annotation|@
name|Override
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|checkOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|checkReadOnly
argument_list|()
expr_stmt|;
name|theMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
annotation|@
name|Override
DECL|method|deleteAll
specifier|public
name|void
name|deleteAll
parameter_list|()
block|{
name|deleteAll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|deleteAll
specifier|private
name|void
name|deleteAll
parameter_list|(
name|boolean
name|readOnlyOk
parameter_list|)
block|{
if|if
condition|(
operator|!
name|readOnlyOk
condition|)
block|{
name|checkReadOnly
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|theMap
operator|!=
literal|null
condition|)
block|{
name|theMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
annotation|@
name|Override
DECL|method|destroy
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|deleteAll
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theMap
operator|=
literal|null
expr_stmt|;
name|isOpen
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
annotation|@
name|Override
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|()
block|{
name|checkOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|checkReadOnly
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iterator
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|checkOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|instanceof
name|Iterable
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|iter
init|=
operator|(
operator|(
name|Iterable
argument_list|<
name|?
argument_list|>
operator|)
name|key
operator|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|val
init|=
name|theMap
operator|.
name|get
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|vals
operator|.
name|addAll
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|vals
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|vals
operator|.
name|iterator
argument_list|()
return|;
block|}
end_function
begin_decl_stmt
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|val
init|=
name|theMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
end_if
begin_return
return|return
name|val
operator|.
name|iterator
argument_list|()
return|;
end_return
begin_function
unit|}      @
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|private
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|theMapIter
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|currentKeyResult
init|=
literal|null
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|currentKeyResultIter
init|=
literal|null
decl_stmt|;
block|{
name|theMapIter
operator|=
name|theMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|currentKeyResultIter
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|currentKeyResultIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|currentKeyResult
operator|=
literal|null
expr_stmt|;
name|currentKeyResultIter
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
name|next
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|theMapIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|next
operator|=
name|theMapIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|currentKeyResult
operator|=
name|next
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|currentKeyResultIter
operator|=
name|currentKeyResult
operator|.
name|iterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentKeyResultIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|next
parameter_list|()
block|{
if|if
condition|(
name|currentKeyResultIter
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|currentKeyResultIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|currentKeyResultIter
operator|.
name|next
argument_list|()
return|;
block|}
else|else
block|{
name|currentKeyResult
operator|=
literal|null
expr_stmt|;
name|currentKeyResultIter
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
name|next
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|theMapIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|next
operator|=
name|theMapIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|currentKeyResult
operator|=
name|next
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|currentKeyResultIter
operator|=
name|currentKeyResult
operator|.
name|iterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentKeyResultIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|currentKeyResultIter
operator|.
name|next
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
end_function
begin_function
annotation|@
name|Override
DECL|method|open
specifier|public
name|void
name|open
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|checkOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|isOpen
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|theMap
operator|==
literal|null
condition|)
block|{
name|theMap
operator|=
operator|new
name|TreeMap
argument_list|<
name|Object
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|String
name|pkName
init|=
name|CachePropertyUtil
operator|.
name|getAttributeValueAsString
argument_list|(
name|context
argument_list|,
name|DIHCacheSupport
operator|.
name|CACHE_PRIMARY_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|pkName
operator|!=
literal|null
condition|)
block|{
name|primaryKeyName
operator|=
name|pkName
expr_stmt|;
block|}
name|isReadOnly
operator|=
literal|false
expr_stmt|;
name|String
name|readOnlyStr
init|=
name|CachePropertyUtil
operator|.
name|getAttributeValueAsString
argument_list|(
name|context
argument_list|,
name|DIHCacheSupport
operator|.
name|CACHE_READ_ONLY
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|readOnlyStr
argument_list|)
condition|)
block|{
name|isReadOnly
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_function
unit|}
end_unit
