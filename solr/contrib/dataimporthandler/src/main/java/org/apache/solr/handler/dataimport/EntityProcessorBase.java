begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.dataimport
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
package|;
end_package
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
operator|.
name|DataImportHandlerException
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  *<p> Base class for all implementations of EntityProcessor</p><p/><p> Most implementations of EntityProcessor  * extend this base class which provides common functionality.</p>  *<p/>  *<b>This API is experimental and subject to change</b>  *  * @version $Id$  * @since solr 1.3  */
end_comment
begin_class
DECL|class|EntityProcessorBase
specifier|public
class|class
name|EntityProcessorBase
extends|extends
name|EntityProcessor
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EntityProcessorBase
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|isFirstInit
specifier|protected
name|boolean
name|isFirstInit
init|=
literal|true
decl_stmt|;
DECL|field|entityName
specifier|protected
name|String
name|entityName
decl_stmt|;
DECL|field|context
specifier|protected
name|Context
name|context
decl_stmt|;
DECL|field|rowIterator
specifier|protected
name|Iterator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|rowIterator
decl_stmt|;
DECL|field|transformers
specifier|protected
name|List
argument_list|<
name|Transformer
argument_list|>
name|transformers
decl_stmt|;
DECL|field|query
specifier|protected
name|String
name|query
decl_stmt|;
DECL|field|onError
specifier|protected
name|String
name|onError
init|=
name|ABORT
decl_stmt|;
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|rowIterator
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
if|if
condition|(
name|isFirstInit
condition|)
block|{
name|firstInit
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|query
operator|=
literal|null
expr_stmt|;
block|}
comment|/**first time init call. do one-time operations here    */
DECL|method|firstInit
specifier|protected
name|void
name|firstInit
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|entityName
operator|=
name|context
operator|.
name|getEntityAttribute
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|context
operator|.
name|getEntityAttribute
argument_list|(
name|ON_ERROR
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
name|onError
operator|=
name|s
expr_stmt|;
name|isFirstInit
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|getNext
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getNext
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|rowIterator
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|rowIterator
operator|.
name|hasNext
argument_list|()
condition|)
return|return
name|rowIterator
operator|.
name|next
argument_list|()
return|;
name|query
operator|=
literal|null
expr_stmt|;
name|rowIterator
operator|=
literal|null
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"getNext() failed for query '"
operator|+
name|query
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|query
operator|=
literal|null
expr_stmt|;
name|rowIterator
operator|=
literal|null
expr_stmt|;
name|wrapAndThrow
argument_list|(
name|DataImportHandlerException
operator|.
name|WARN
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|nextModifiedRowKey
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|nextModifiedRowKey
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|nextDeletedRowKey
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|nextDeletedRowKey
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|nextModifiedParentRowKey
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|nextModifiedParentRowKey
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**    * For a simple implementation, this is the only method that the sub-class should implement. This is intended to    * stream rows one-by-one. Return null to signal end of rows    *    * @return a row where the key is the name of the field and value can be any Object or a Collection of objects. Return    *         null to signal end of rows    */
DECL|method|nextRow
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|nextRow
parameter_list|()
block|{
return|return
literal|null
return|;
comment|// do not do anything
block|}
DECL|method|destroy
specifier|public
name|void
name|destroy
parameter_list|()
block|{
comment|/*no op*/
block|}
comment|/**    * Only used by cache implementations    */
DECL|field|cachePk
specifier|protected
name|String
name|cachePk
decl_stmt|;
comment|/**    * Only used by cache implementations    */
DECL|field|cacheVariableName
specifier|protected
name|String
name|cacheVariableName
decl_stmt|;
comment|/**    * Only used by cache implementations    */
DECL|field|simpleCache
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
name|simpleCache
decl_stmt|;
comment|/**    * Only used by cache implementations    */
DECL|field|cacheWithWhereClause
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Object
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|cacheWithWhereClause
decl_stmt|;
DECL|field|dataSourceRowCache
specifier|protected
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|dataSourceRowCache
decl_stmt|;
comment|/**    * Only used by cache implementations    */
DECL|method|cacheInit
specifier|protected
name|void
name|cacheInit
parameter_list|()
block|{
if|if
condition|(
name|simpleCache
operator|!=
literal|null
operator|||
name|cacheWithWhereClause
operator|!=
literal|null
condition|)
return|return;
name|String
name|where
init|=
name|context
operator|.
name|getEntityAttribute
argument_list|(
literal|"where"
argument_list|)
decl_stmt|;
name|String
name|cacheKey
init|=
name|context
operator|.
name|getEntityAttribute
argument_list|(
name|CACHE_KEY
argument_list|)
decl_stmt|;
name|String
name|lookupKey
init|=
name|context
operator|.
name|getEntityAttribute
argument_list|(
name|CACHE_LOOKUP
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheKey
operator|!=
literal|null
operator|&&
name|lookupKey
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|DataImportHandlerException
operator|.
name|SEVERE
argument_list|,
literal|"'cacheKey' is specified for the entity "
operator|+
name|entityName
operator|+
literal|" but 'cacheLookup' is missing"
argument_list|)
throw|;
block|}
if|if
condition|(
name|where
operator|==
literal|null
operator|&&
name|cacheKey
operator|==
literal|null
condition|)
block|{
name|simpleCache
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|where
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|splits
init|=
name|where
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|cachePk
operator|=
name|splits
index|[
literal|0
index|]
expr_stmt|;
name|cacheVariableName
operator|=
name|splits
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cachePk
operator|=
name|cacheKey
expr_stmt|;
name|cacheVariableName
operator|=
name|lookupKey
expr_stmt|;
block|}
name|cacheWithWhereClause
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Object
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * If the where clause is present the cache is sql Vs Map of key Vs List of Rows. Only used by cache implementations.    *    * @param query the query string for which cached data is to be returned    *    * @return the cached row corresponding to the given query after all variables have been resolved    */
DECL|method|getIdCacheData
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getIdCacheData
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
name|rowIdVsRows
init|=
name|cacheWithWhereClause
operator|.
name|get
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|rows
init|=
literal|null
decl_stmt|;
name|Object
name|key
init|=
name|context
operator|.
name|resolve
argument_list|(
name|cacheVariableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|DataImportHandlerException
operator|.
name|WARN
argument_list|,
literal|"The cache lookup value : "
operator|+
name|cacheVariableName
operator|+
literal|" is resolved to be null in the entity :"
operator|+
name|context
operator|.
name|getEntityAttribute
argument_list|(
literal|"name"
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|rowIdVsRows
operator|!=
literal|null
condition|)
block|{
name|rows
operator|=
name|rowIdVsRows
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|rows
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|dataSourceRowCache
operator|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|(
name|rows
argument_list|)
expr_stmt|;
return|return
name|getFromRowCacheTransformed
argument_list|()
return|;
block|}
else|else
block|{
name|rows
operator|=
name|getAllNonCachedRows
argument_list|()
expr_stmt|;
if|if
condition|(
name|rows
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|rowIdVsRows
operator|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|Object
name|k
init|=
name|row
operator|.
name|get
argument_list|(
name|cachePk
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|DataImportHandlerException
operator|.
name|WARN
argument_list|,
literal|"No value available for the cache key : "
operator|+
name|cachePk
operator|+
literal|" in the entity : "
operator|+
name|context
operator|.
name|getEntityAttribute
argument_list|(
literal|"name"
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|k
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|key
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|DataImportHandlerException
operator|.
name|WARN
argument_list|,
literal|"The key in the cache type : "
operator|+
name|k
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"is not same as the lookup value type "
operator|+
name|key
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" in the entity "
operator|+
name|context
operator|.
name|getEntityAttribute
argument_list|(
literal|"name"
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|rowIdVsRows
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|==
literal|null
condition|)
name|rowIdVsRows
operator|.
name|put
argument_list|(
name|k
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|rowIdVsRows
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|cacheWithWhereClause
operator|.
name|put
argument_list|(
name|query
argument_list|,
name|rowIdVsRows
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rowIdVsRows
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
return|return
literal|null
return|;
name|dataSourceRowCache
operator|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|(
name|rowIdVsRows
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataSourceRowCache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dataSourceRowCache
operator|=
literal|null
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|getFromRowCacheTransformed
argument_list|()
return|;
block|}
block|}
block|}
comment|/**    *<p> Get all the rows from the the datasource for the given query. Only used by cache implementations.</p> This    *<b>must</b> be implemented by sub-classes which intend to provide a cached implementation    *    * @return the list of all rows fetched from the datasource.    */
DECL|method|getAllNonCachedRows
specifier|protected
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getAllNonCachedRows
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
comment|/**    * If where clause is not present the cache is a Map of query vs List of Rows. Only used by cache implementations.    *    * @param query string for which cached row is to be returned    *    * @return the cached row corresponding to the given query    */
DECL|method|getSimpleCacheData
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSimpleCacheData
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|rows
init|=
name|simpleCache
operator|.
name|get
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|rows
operator|!=
literal|null
condition|)
block|{
name|dataSourceRowCache
operator|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|(
name|rows
argument_list|)
expr_stmt|;
return|return
name|getFromRowCacheTransformed
argument_list|()
return|;
block|}
else|else
block|{
name|rows
operator|=
name|getAllNonCachedRows
argument_list|()
expr_stmt|;
if|if
condition|(
name|rows
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|dataSourceRowCache
operator|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|simpleCache
operator|.
name|put
argument_list|(
name|query
argument_list|,
name|rows
argument_list|)
expr_stmt|;
return|return
name|getFromRowCacheTransformed
argument_list|()
return|;
block|}
block|}
block|}
DECL|method|getFromRowCacheTransformed
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getFromRowCacheTransformed
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|r
init|=
name|dataSourceRowCache
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataSourceRowCache
operator|.
name|isEmpty
argument_list|()
condition|)
name|dataSourceRowCache
operator|=
literal|null
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|field|TRANSFORMER
specifier|public
specifier|static
specifier|final
name|String
name|TRANSFORMER
init|=
literal|"transformer"
decl_stmt|;
DECL|field|TRANSFORM_ROW
specifier|public
specifier|static
specifier|final
name|String
name|TRANSFORM_ROW
init|=
literal|"transformRow"
decl_stmt|;
DECL|field|ON_ERROR
specifier|public
specifier|static
specifier|final
name|String
name|ON_ERROR
init|=
literal|"onError"
decl_stmt|;
DECL|field|ABORT
specifier|public
specifier|static
specifier|final
name|String
name|ABORT
init|=
literal|"abort"
decl_stmt|;
DECL|field|CONTINUE
specifier|public
specifier|static
specifier|final
name|String
name|CONTINUE
init|=
literal|"continue"
decl_stmt|;
DECL|field|SKIP
specifier|public
specifier|static
specifier|final
name|String
name|SKIP
init|=
literal|"skip"
decl_stmt|;
DECL|field|SKIP_DOC
specifier|public
specifier|static
specifier|final
name|String
name|SKIP_DOC
init|=
literal|"$skipDoc"
decl_stmt|;
DECL|field|CACHE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_KEY
init|=
literal|"cacheKey"
decl_stmt|;
DECL|field|CACHE_LOOKUP
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_LOOKUP
init|=
literal|"cacheLookup"
decl_stmt|;
block|}
end_class
end_unit
