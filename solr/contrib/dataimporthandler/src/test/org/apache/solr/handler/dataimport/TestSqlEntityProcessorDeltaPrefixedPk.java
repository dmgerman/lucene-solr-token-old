begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.dataimport
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
package|;
end_package
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  *<p>  * Test for SqlEntityProcessorDelta verifying fix for SOLR-1191  *</p>  *   *  *  * @since solr 3.1  */
end_comment
begin_class
DECL|class|TestSqlEntityProcessorDeltaPrefixedPk
specifier|public
class|class
name|TestSqlEntityProcessorDeltaPrefixedPk
extends|extends
name|AbstractDataImportHandlerTestCase
block|{
DECL|field|FULLIMPORT_QUERY
specifier|private
specifier|static
specifier|final
name|String
name|FULLIMPORT_QUERY
init|=
literal|"select * from x"
decl_stmt|;
DECL|field|DELTA_QUERY
specifier|private
specifier|static
specifier|final
name|String
name|DELTA_QUERY
init|=
literal|"select id from x where last_modified> NOW"
decl_stmt|;
DECL|field|DELETED_PK_QUERY
specifier|private
specifier|static
specifier|final
name|String
name|DELETED_PK_QUERY
init|=
literal|"select id from x where last_modified> NOW AND deleted='true'"
decl_stmt|;
DECL|field|dataConfig_delta
specifier|private
specifier|static
specifier|final
name|String
name|dataConfig_delta
init|=
literal|"<dataConfig>"
operator|+
literal|"<dataSource  type=\"MockDataSource\"/>\n"
operator|+
literal|"<document>\n"
operator|+
literal|"<entity name=\"x\" transformer=\"TemplateTransformer\" pk=\"x.id\""
operator|+
literal|"            query=\""
operator|+
name|FULLIMPORT_QUERY
operator|+
literal|"\""
operator|+
literal|"            deletedPkQuery=\""
operator|+
name|DELETED_PK_QUERY
operator|+
literal|"\""
operator|+
literal|"            deltaImportQuery=\"select * from x where id='${dih.delta.id}'\""
operator|+
literal|"            deltaQuery=\""
operator|+
name|DELTA_QUERY
operator|+
literal|"\">\n"
operator|+
literal|"<field column=\"id\" name=\"id\"/>\n"
operator|+
literal|"<field column=\"desc\" name=\"desc\"/>\n"
operator|+
literal|"</entity>\n"
operator|+
literal|"</document>\n"
operator|+
literal|"</dataConfig>\n"
decl_stmt|;
DECL|field|EMPTY_LIST
specifier|private
specifier|static
specifier|final
name|List
name|EMPTY_LIST
init|=
name|Collections
operator|.
name|EMPTY_LIST
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"dataimport-solrconfig.xml"
argument_list|,
literal|"dataimport-schema.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|//Logger.getLogger("").setLevel(Level.ALL);
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|add1document
specifier|private
name|void
name|add1document
parameter_list|()
throws|throws
name|Exception
block|{
name|List
name|row
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|row
operator|.
name|add
argument_list|(
name|createMap
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"desc"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|MockDataSource
operator|.
name|setIterator
argument_list|(
name|FULLIMPORT_QUERY
argument_list|,
name|row
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|runFullImport
argument_list|(
name|dataConfig_delta
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"*:* OR add1document"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:1"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"desc:bar"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testDeltaImport_deleteResolvesUnprefixedPk
specifier|public
name|void
name|testDeltaImport_deleteResolvesUnprefixedPk
parameter_list|()
throws|throws
name|Exception
block|{
name|add1document
argument_list|()
expr_stmt|;
name|MockDataSource
operator|.
name|clearCache
argument_list|()
expr_stmt|;
name|List
name|deletedRows
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|deletedRows
operator|.
name|add
argument_list|(
name|createMap
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|MockDataSource
operator|.
name|setIterator
argument_list|(
name|DELETED_PK_QUERY
argument_list|,
name|deletedRows
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|MockDataSource
operator|.
name|setIterator
argument_list|(
name|DELTA_QUERY
argument_list|,
name|EMPTY_LIST
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|runDeltaImport
argument_list|(
name|dataConfig_delta
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"*:* OR testDeltaImport_deleteResolvesUnprefixedPk"
argument_list|)
argument_list|,
literal|"//*[@numFound='0']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testDeltaImport_replace_resolvesUnprefixedPk
specifier|public
name|void
name|testDeltaImport_replace_resolvesUnprefixedPk
parameter_list|()
throws|throws
name|Exception
block|{
name|add1document
argument_list|()
expr_stmt|;
name|MockDataSource
operator|.
name|clearCache
argument_list|()
expr_stmt|;
name|List
name|deltaRows
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|deltaRows
operator|.
name|add
argument_list|(
name|createMap
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|MockDataSource
operator|.
name|setIterator
argument_list|(
name|DELTA_QUERY
argument_list|,
name|deltaRows
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|MockDataSource
operator|.
name|setIterator
argument_list|(
name|DELETED_PK_QUERY
argument_list|,
name|EMPTY_LIST
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|rows
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|createMap
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"desc"
argument_list|,
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|MockDataSource
operator|.
name|setIterator
argument_list|(
literal|"select * from x where id='1'"
argument_list|,
name|rows
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|runDeltaImport
argument_list|(
name|dataConfig_delta
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"*:* OR testDeltaImport_replace_resolvesUnprefixedPk"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:1"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"desc:bar"
argument_list|)
argument_list|,
literal|"//*[@numFound='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"desc:baz"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testDeltaImport_addResolvesUnprefixedPk
specifier|public
name|void
name|testDeltaImport_addResolvesUnprefixedPk
parameter_list|()
throws|throws
name|Exception
block|{
name|add1document
argument_list|()
expr_stmt|;
name|MockDataSource
operator|.
name|clearCache
argument_list|()
expr_stmt|;
name|List
name|deltaRows
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|deltaRows
operator|.
name|add
argument_list|(
name|createMap
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|MockDataSource
operator|.
name|setIterator
argument_list|(
name|DELTA_QUERY
argument_list|,
name|deltaRows
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|rows
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|createMap
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"desc"
argument_list|,
literal|"xyzzy"
argument_list|)
argument_list|)
expr_stmt|;
name|MockDataSource
operator|.
name|setIterator
argument_list|(
literal|"select * from x where id='2'"
argument_list|,
name|rows
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|runDeltaImport
argument_list|(
name|dataConfig_delta
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"*:* OR testDeltaImport_addResolvesUnprefixedPk"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:1"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:2"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"desc:bar"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"desc:xyzzy"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
