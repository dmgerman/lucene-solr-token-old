begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.dataimport
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|spi
operator|.
name|InitialContextFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import
begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IAnswer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import
begin_class
DECL|class|MockInitialContextFactory
specifier|public
class|class
name|MockInitialContextFactory
implements|implements
name|InitialContextFactory
block|{
DECL|field|objects
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|objects
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|mockControl
specifier|private
specifier|final
name|IMocksControl
name|mockControl
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|javax
operator|.
name|naming
operator|.
name|Context
name|context
decl_stmt|;
DECL|method|MockInitialContextFactory
specifier|public
name|MockInitialContextFactory
parameter_list|()
block|{
name|mockControl
operator|=
name|EasyMock
operator|.
name|createStrictControl
argument_list|()
expr_stmt|;
name|context
operator|=
name|mockControl
operator|.
name|createMock
argument_list|(
name|javax
operator|.
name|naming
operator|.
name|Context
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|context
operator|.
name|lookup
argument_list|(
operator|(
name|String
operator|)
name|EasyMock
operator|.
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
name|objects
operator|.
name|get
argument_list|(
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|mockControl
operator|.
name|replay
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getInitialContext
specifier|public
name|javax
operator|.
name|naming
operator|.
name|Context
name|getInitialContext
parameter_list|(
name|Hashtable
name|env
parameter_list|)
block|{
return|return
name|context
return|;
block|}
DECL|method|bind
specifier|public
specifier|static
name|void
name|bind
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|obj
parameter_list|)
block|{
name|objects
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
