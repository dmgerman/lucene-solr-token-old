begin_unit
begin_package
DECL|package|org.apache.solr.handler.dataimport
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|TestSimplePropertiesWriter
specifier|public
class|class
name|TestSimplePropertiesWriter
extends|extends
name|AbstractDIHJdbcTestCase
block|{
DECL|field|useJdbcEscapeSyntax
specifier|private
name|boolean
name|useJdbcEscapeSyntax
decl_stmt|;
DECL|field|dateFormat
specifier|private
name|String
name|dateFormat
decl_stmt|;
DECL|field|fileLocation
specifier|private
name|String
name|fileLocation
decl_stmt|;
DECL|field|fileName
specifier|private
name|String
name|fileName
decl_stmt|;
annotation|@
name|Before
DECL|method|spwBefore
specifier|public
name|void
name|spwBefore
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|tmpdir
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"test"
argument_list|,
literal|"tmp"
argument_list|,
name|TEMP_DIR
argument_list|)
decl_stmt|;
name|tmpdir
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tmpdir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|fileLocation
operator|=
name|tmpdir
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|fileName
operator|=
literal|"the.properties"
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|spwAfter
specifier|public
name|void
name|spwAfter
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|File
argument_list|(
name|fileLocation
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|fileName
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|fileLocation
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimplePropertiesWriter
specifier|public
name|void
name|testSimplePropertiesWriter
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleDateFormat
name|errMsgFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss.SSSSSS"
argument_list|)
decl_stmt|;
name|String
index|[]
name|d
init|=
block|{
literal|"{'ts' ''yyyy-MM-dd HH:mm:ss.SSSSSS''}"
block|,
literal|"{'ts' ''yyyy-MM-dd HH:mm:ss''}"
block|,
literal|"yyyy-MM-dd HH:mm:ss"
block|,
literal|"yyyy-MM-dd HH:mm:ss.SSSSSS"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|<
literal|2
condition|)
block|{
name|useJdbcEscapeSyntax
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|useJdbcEscapeSyntax
operator|=
literal|false
expr_stmt|;
block|}
name|dateFormat
operator|=
name|d
index|[
name|i
index|]
expr_stmt|;
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|dateFormat
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|Date
name|oneSecondAgo
init|=
operator|new
name|Date
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|1000
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|init
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|init
operator|.
name|put
argument_list|(
literal|"dateFormat"
argument_list|,
name|dateFormat
argument_list|)
expr_stmt|;
name|init
operator|.
name|put
argument_list|(
literal|"filename"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|init
operator|.
name|put
argument_list|(
literal|"directory"
argument_list|,
name|fileLocation
argument_list|)
expr_stmt|;
name|SimplePropertiesWriter
name|spw
init|=
operator|new
name|SimplePropertiesWriter
argument_list|()
decl_stmt|;
name|spw
operator|.
name|init
argument_list|(
operator|new
name|DataImporter
argument_list|()
argument_list|,
name|init
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"SomeDates.last_index_time"
argument_list|,
name|oneSecondAgo
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"last_index_time"
argument_list|,
name|oneSecondAgo
argument_list|)
expr_stmt|;
name|spw
operator|.
name|persist
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|h
operator|.
name|query
argument_list|(
literal|"/dataimport"
argument_list|,
name|generateRequest
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|=
name|spw
operator|.
name|readIndexerProperties
argument_list|()
expr_stmt|;
name|Date
name|entityDate
init|=
name|df
operator|.
name|parse
argument_list|(
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
literal|"SomeDates.last_index_time"
argument_list|)
argument_list|)
decl_stmt|;
name|Date
name|docDate
init|=
name|df
operator|.
name|parse
argument_list|(
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
literal|"last_index_time"
argument_list|)
argument_list|)
decl_stmt|;
name|Calendar
name|c
init|=
operator|new
name|GregorianCalendar
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT"
argument_list|)
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|docDate
argument_list|)
expr_stmt|;
name|int
name|year
init|=
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"This date: "
operator|+
name|errMsgFormat
operator|.
name|format
argument_list|(
name|oneSecondAgo
argument_list|)
operator|+
literal|" should be prior to the document date: "
operator|+
name|errMsgFormat
operator|.
name|format
argument_list|(
name|docDate
argument_list|)
argument_list|,
name|docDate
operator|.
name|getTime
argument_list|()
operator|-
name|oneSecondAgo
operator|.
name|getTime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"This date: "
operator|+
name|errMsgFormat
operator|.
name|format
argument_list|(
name|oneSecondAgo
argument_list|)
operator|+
literal|" should be prior to the entity date: "
operator|+
name|errMsgFormat
operator|.
name|format
argument_list|(
name|entityDate
argument_list|)
argument_list|,
name|entityDate
operator|.
name|getTime
argument_list|()
operator|-
name|oneSecondAgo
operator|.
name|getTime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"*:*"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//doc/str[@name=\"ayear_s\"]=\""
operator|+
name|year
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setAllowedDatabases
specifier|protected
name|Database
name|setAllowedDatabases
parameter_list|()
block|{
return|return
name|Database
operator|.
name|DERBY
return|;
block|}
annotation|@
name|Override
DECL|method|generateConfig
specifier|protected
name|String
name|generateConfig
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|q
init|=
name|useJdbcEscapeSyntax
condition|?
literal|""
else|:
literal|"'"
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<dataConfig> \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<propertyWriter dateFormat=\""
operator|+
name|dateFormat
operator|+
literal|"\" type=\"SimplePropertiesWriter\" directory=\""
operator|+
name|fileLocation
operator|+
literal|"\" filename=\""
operator|+
name|fileName
operator|+
literal|"\" />\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<dataSource name=\"derby\" driver=\"org.apache.derby.jdbc.EmbeddedDriver\" url=\"jdbc:derby:memory:derbyDB;\" /> \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<document name=\"TestSimplePropertiesWriter\"> \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<entity name=\"SomeDates\" processor=\"SqlEntityProcessor\" dataSource=\"derby\" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"query=\"select 1 as id, YEAR("
operator|+
name|q
operator|+
literal|"${dih.last_index_time}"
operator|+
name|q
operator|+
literal|") as AYEAR_S from sysibm.sysdummy1 \">\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<field column=\"AYEAR_S\" name=\"ayear_s\" /> \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</entity>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</document> \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</dataConfig> \n"
argument_list|)
expr_stmt|;
name|String
name|config
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|config
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
block|}
end_class
end_unit
