begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.dataimport
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_comment
comment|/**  * Tests exception handling during imports in DataImportHandler  *  *  * @since solr 1.4  */
end_comment
begin_class
DECL|class|TestErrorHandling
specifier|public
class|class
name|TestErrorHandling
extends|extends
name|AbstractDataImportHandlerTestCase
block|{
comment|//TODO: fix this test to not require FSDirectory.
DECL|field|savedFactory
specifier|static
name|String
name|savedFactory
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|savedFactory
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"solr.DirectoryFactory"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.directoryFactory"
argument_list|,
literal|"solr.MockFSDirectoryFactory"
argument_list|)
expr_stmt|;
name|initCore
argument_list|(
literal|"dataimport-solrconfig.xml"
argument_list|,
literal|"dataimport-schema.xml"
argument_list|)
expr_stmt|;
name|ignoreException
argument_list|(
literal|"Unexpected close tag"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
block|{
if|if
condition|(
name|savedFactory
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.directoryFactory"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.directoryFactory"
argument_list|,
name|savedFactory
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMalformedStreamingXml
specifier|public
name|void
name|testMalformedStreamingXml
parameter_list|()
throws|throws
name|Exception
block|{
name|StringDataSource
operator|.
name|xml
operator|=
name|malformedXml
expr_stmt|;
name|runFullImport
argument_list|(
name|dataConfigWithStreaming
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:1"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:2"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMalformedNonStreamingXml
specifier|public
name|void
name|testMalformedNonStreamingXml
parameter_list|()
throws|throws
name|Exception
block|{
name|StringDataSource
operator|.
name|xml
operator|=
name|malformedXml
expr_stmt|;
name|runFullImport
argument_list|(
name|dataConfigWithoutStreaming
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:1"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:2"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testAbortOnError
specifier|public
name|void
name|testAbortOnError
parameter_list|()
throws|throws
name|Exception
block|{
name|StringDataSource
operator|.
name|xml
operator|=
name|malformedXml
expr_stmt|;
name|runFullImport
argument_list|(
name|dataConfigAbortOnError
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"*:*"
argument_list|)
argument_list|,
literal|"//*[@numFound='0']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransformerErrorContinue
specifier|public
name|void
name|testTransformerErrorContinue
parameter_list|()
throws|throws
name|Exception
block|{
name|StringDataSource
operator|.
name|xml
operator|=
name|wellformedXml
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|createMap
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"desc"
argument_list|,
literal|"exception-transformer"
argument_list|)
argument_list|)
expr_stmt|;
name|MockDataSource
operator|.
name|setIterator
argument_list|(
literal|"select * from foo"
argument_list|,
name|rows
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|runFullImport
argument_list|(
name|dataConfigWithTransformer
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"*:*"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|)
expr_stmt|;
block|}
DECL|class|StringDataSource
specifier|public
specifier|static
class|class
name|StringDataSource
extends|extends
name|DataSource
argument_list|<
name|Reader
argument_list|>
block|{
DECL|field|xml
specifier|public
specifier|static
name|String
name|xml
init|=
literal|""
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|Context
name|context
parameter_list|,
name|Properties
name|initProps
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|getData
specifier|public
name|Reader
name|getData
parameter_list|(
name|String
name|query
parameter_list|)
block|{
return|return
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{      }
block|}
DECL|class|ExceptionTransformer
specifier|public
specifier|static
class|class
name|ExceptionTransformer
extends|extends
name|Transformer
block|{
annotation|@
name|Override
DECL|method|transformRow
specifier|public
name|Object
name|transformRow
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Test exception"
argument_list|)
throw|;
block|}
block|}
DECL|field|dataConfigWithStreaming
specifier|private
name|String
name|dataConfigWithStreaming
init|=
literal|"<dataConfig>\n"
operator|+
literal|"<dataSource name=\"str\" type=\"TestErrorHandling$StringDataSource\" />"
operator|+
literal|"<document>\n"
operator|+
literal|"<entity name=\"node\" dataSource=\"str\" processor=\"XPathEntityProcessor\" url=\"test\" stream=\"true\" forEach=\"/root/node\" onError=\"skip\">\n"
operator|+
literal|"<field column=\"id\" xpath=\"/root/node/id\" />\n"
operator|+
literal|"<field column=\"desc\" xpath=\"/root/node/desc\" />\n"
operator|+
literal|"</entity>\n"
operator|+
literal|"</document>\n"
operator|+
literal|"</dataConfig>"
decl_stmt|;
DECL|field|dataConfigWithoutStreaming
specifier|private
name|String
name|dataConfigWithoutStreaming
init|=
literal|"<dataConfig>\n"
operator|+
literal|"<dataSource name=\"str\" type=\"TestErrorHandling$StringDataSource\" />"
operator|+
literal|"<document>\n"
operator|+
literal|"<entity name=\"node\" dataSource=\"str\" processor=\"XPathEntityProcessor\" url=\"test\" forEach=\"/root/node\" onError=\"skip\">\n"
operator|+
literal|"<field column=\"id\" xpath=\"/root/node/id\" />\n"
operator|+
literal|"<field column=\"desc\" xpath=\"/root/node/desc\" />\n"
operator|+
literal|"</entity>\n"
operator|+
literal|"</document>\n"
operator|+
literal|"</dataConfig>"
decl_stmt|;
DECL|field|dataConfigAbortOnError
specifier|private
name|String
name|dataConfigAbortOnError
init|=
literal|"<dataConfig>\n"
operator|+
literal|"<dataSource name=\"str\" type=\"TestErrorHandling$StringDataSource\" />"
operator|+
literal|"<document>\n"
operator|+
literal|"<entity name=\"node\" dataSource=\"str\" processor=\"XPathEntityProcessor\" url=\"test\" forEach=\"/root/node\" onError=\"abort\">\n"
operator|+
literal|"<field column=\"id\" xpath=\"/root/node/id\" />\n"
operator|+
literal|"<field column=\"desc\" xpath=\"/root/node/desc\" />\n"
operator|+
literal|"</entity>\n"
operator|+
literal|"</document>\n"
operator|+
literal|"</dataConfig>"
decl_stmt|;
DECL|field|dataConfigWithTransformer
specifier|private
name|String
name|dataConfigWithTransformer
init|=
literal|"<dataConfig>\n"
operator|+
literal|"<dataSource name=\"str\" type=\"TestErrorHandling$StringDataSource\" />"
operator|+
literal|"<dataSource  type=\"MockDataSource\"/>"
operator|+
literal|"<document>\n"
operator|+
literal|"<entity name=\"node\" dataSource=\"str\" processor=\"XPathEntityProcessor\" url=\"test\" forEach=\"/root/node\">\n"
operator|+
literal|"<field column=\"id\" xpath=\"/root/node/id\" />\n"
operator|+
literal|"<field column=\"desc\" xpath=\"/root/node/desc\" />\n"
operator|+
literal|"<entity name=\"child\" query=\"select * from foo\" transformer=\"TestErrorHandling$ExceptionTransformer\" onError=\"continue\">\n"
operator|+
literal|"</entity>"
operator|+
literal|"</entity>\n"
operator|+
literal|"</document>\n"
operator|+
literal|"</dataConfig>"
decl_stmt|;
DECL|field|malformedXml
specifier|private
name|String
name|malformedXml
init|=
literal|"<root>\n"
operator|+
literal|"<node>\n"
operator|+
literal|"<id>1</id>\n"
operator|+
literal|"<desc>test1</desc>\n"
operator|+
literal|"</node>\n"
operator|+
literal|"<node>\n"
operator|+
literal|"<id>2</id>\n"
operator|+
literal|"<desc>test2</desc>\n"
operator|+
literal|"</node>\n"
operator|+
literal|"<node>\n"
operator|+
literal|"<id/>3</id>\n"
operator|+
literal|"<desc>test3</desc>\n"
operator|+
literal|"</node>\n"
operator|+
literal|"</root>"
decl_stmt|;
DECL|field|wellformedXml
specifier|private
name|String
name|wellformedXml
init|=
literal|"<root>\n"
operator|+
literal|"<node>\n"
operator|+
literal|"<id>1</id>\n"
operator|+
literal|"<desc>test1</desc>\n"
operator|+
literal|"</node>\n"
operator|+
literal|"<node>\n"
operator|+
literal|"<id>2</id>\n"
operator|+
literal|"<desc>test2</desc>\n"
operator|+
literal|"</node>\n"
operator|+
literal|"<node>\n"
operator|+
literal|"<id>3</id>\n"
operator|+
literal|"<desc>test3</desc>\n"
operator|+
literal|"</node>\n"
operator|+
literal|"</root>"
decl_stmt|;
block|}
end_class
end_unit
