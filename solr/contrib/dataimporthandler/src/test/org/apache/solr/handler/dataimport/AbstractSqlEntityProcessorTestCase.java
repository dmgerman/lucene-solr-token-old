begin_unit
begin_package
DECL|package|org.apache.solr.handler.dataimport
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import
begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import
begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import
begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|AbstractSqlEntityProcessorTestCase
specifier|public
specifier|abstract
class|class
name|AbstractSqlEntityProcessorTestCase
extends|extends
name|AbstractDIHJdbcTestCase
block|{
DECL|field|underlyingDataModified
specifier|protected
name|boolean
name|underlyingDataModified
decl_stmt|;
DECL|field|useSimpleCaches
specifier|protected
name|boolean
name|useSimpleCaches
decl_stmt|;
DECL|field|countryEntity
specifier|protected
name|boolean
name|countryEntity
decl_stmt|;
DECL|field|countryCached
specifier|protected
name|boolean
name|countryCached
decl_stmt|;
DECL|field|countryZipper
specifier|protected
name|boolean
name|countryZipper
decl_stmt|;
DECL|field|sportsEntity
specifier|protected
name|boolean
name|sportsEntity
decl_stmt|;
DECL|field|sportsCached
specifier|protected
name|boolean
name|sportsCached
decl_stmt|;
DECL|field|sportsZipper
specifier|protected
name|boolean
name|sportsZipper
decl_stmt|;
DECL|field|wrongPeopleOrder
specifier|protected
name|boolean
name|wrongPeopleOrder
decl_stmt|;
DECL|field|wrongSportsOrder
specifier|protected
name|boolean
name|wrongSportsOrder
decl_stmt|;
DECL|field|wrongCountryOrder
specifier|protected
name|boolean
name|wrongCountryOrder
decl_stmt|;
DECL|field|rootTransformerName
specifier|protected
name|String
name|rootTransformerName
decl_stmt|;
DECL|field|countryTransformer
specifier|protected
name|boolean
name|countryTransformer
decl_stmt|;
DECL|field|sportsTransformer
specifier|protected
name|boolean
name|sportsTransformer
decl_stmt|;
DECL|field|fileLocation
specifier|protected
name|String
name|fileLocation
decl_stmt|;
DECL|field|fileName
specifier|protected
name|String
name|fileName
decl_stmt|;
annotation|@
name|Before
DECL|method|beforeSqlEntitiyProcessorTestCase
specifier|public
name|void
name|beforeSqlEntitiyProcessorTestCase
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|tmpdir
init|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|fileLocation
operator|=
name|tmpdir
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|fileName
operator|=
literal|"the.properties"
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|afterSqlEntitiyProcessorTestCase
specifier|public
name|void
name|afterSqlEntitiyProcessorTestCase
parameter_list|()
throws|throws
name|Exception
block|{
name|useSimpleCaches
operator|=
literal|false
expr_stmt|;
name|countryEntity
operator|=
literal|false
expr_stmt|;
name|countryCached
operator|=
literal|false
expr_stmt|;
name|countryZipper
operator|=
literal|false
expr_stmt|;
name|sportsEntity
operator|=
literal|false
expr_stmt|;
name|sportsCached
operator|=
literal|false
expr_stmt|;
name|sportsZipper
operator|=
literal|false
expr_stmt|;
name|wrongPeopleOrder
operator|=
literal|false
expr_stmt|;
name|wrongSportsOrder
operator|=
literal|false
expr_stmt|;
name|wrongCountryOrder
operator|=
literal|false
expr_stmt|;
name|rootTransformerName
operator|=
literal|null
expr_stmt|;
name|countryTransformer
operator|=
literal|false
expr_stmt|;
name|sportsTransformer
operator|=
literal|false
expr_stmt|;
name|underlyingDataModified
operator|=
literal|false
expr_stmt|;
comment|//If an Assume was tripped while setting up the test,
comment|//the file might not ever have been created...
if|if
condition|(
name|fileLocation
operator|!=
literal|null
condition|)
block|{
name|Files
operator|.
name|deleteIfExists
argument_list|(
operator|new
name|File
argument_list|(
name|fileLocation
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|fileName
argument_list|)
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|deleteIfExists
argument_list|(
operator|new
name|File
argument_list|(
name|fileLocation
argument_list|)
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logPropertiesFile
specifier|protected
name|void
name|logPropertiesFile
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|init
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|init
operator|.
name|put
argument_list|(
literal|"filename"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|init
operator|.
name|put
argument_list|(
literal|"directory"
argument_list|,
name|fileLocation
argument_list|)
expr_stmt|;
name|SimplePropertiesWriter
name|spw
init|=
operator|new
name|SimplePropertiesWriter
argument_list|()
decl_stmt|;
name|spw
operator|.
name|init
argument_list|(
operator|new
name|DataImporter
argument_list|()
argument_list|,
name|init
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|spw
operator|.
name|readIndexerProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\ndataimporter.properties: \n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|props
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"> key="
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" / value="
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deltaQueriesCountryTable
specifier|protected
specifier|abstract
name|String
name|deltaQueriesCountryTable
parameter_list|()
function_decl|;
DECL|method|deltaQueriesPersonTable
specifier|protected
specifier|abstract
name|String
name|deltaQueriesPersonTable
parameter_list|()
function_decl|;
DECL|method|singleEntity
specifier|protected
name|void
name|singleEntity
parameter_list|(
name|int
name|numToExpect
parameter_list|)
throws|throws
name|Exception
block|{
name|h
operator|.
name|query
argument_list|(
literal|"/dataimport"
argument_list|,
name|generateRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"There should be 1 document per person in the database: "
operator|+
name|totalPeople
argument_list|()
argument_list|,
name|req
argument_list|(
literal|"*:*"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
name|totalPeople
argument_list|()
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expecting "
operator|+
name|numToExpect
operator|+
literal|" database calls, but DIH reported "
operator|+
name|totalDatabaseRequests
argument_list|()
argument_list|,
name|totalDatabaseRequests
argument_list|()
operator|==
name|numToExpect
argument_list|)
expr_stmt|;
block|}
DECL|method|simpleTransform
specifier|protected
name|void
name|simpleTransform
parameter_list|(
name|int
name|numToExpect
parameter_list|)
throws|throws
name|Exception
block|{
name|rootTransformerName
operator|=
literal|"AddAColumnTransformer"
expr_stmt|;
name|h
operator|.
name|query
argument_list|(
literal|"/dataimport"
argument_list|,
name|generateRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"There should be 1 document with a transformer-added column per person is the database: "
operator|+
name|totalPeople
argument_list|()
argument_list|,
name|req
argument_list|(
literal|"AddAColumn_s:Added"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
name|totalPeople
argument_list|()
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expecting "
operator|+
name|numToExpect
operator|+
literal|" database calls, but DIH reported "
operator|+
name|totalDatabaseRequests
argument_list|()
argument_list|,
name|totalDatabaseRequests
argument_list|()
operator|==
name|numToExpect
argument_list|)
expr_stmt|;
block|}
comment|/**    * A delta update will not clean up documents added by a transformer even if    * the parent document that the transformer used to base the new documents    * were deleted    */
DECL|method|complexTransform
specifier|protected
name|void
name|complexTransform
parameter_list|(
name|int
name|numToExpect
parameter_list|,
name|int
name|numDeleted
parameter_list|)
throws|throws
name|Exception
block|{
name|rootTransformerName
operator|=
literal|"TripleThreatTransformer"
expr_stmt|;
name|h
operator|.
name|query
argument_list|(
literal|"/dataimport"
argument_list|,
name|generateRequest
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|totalDocs
init|=
operator|(
operator|(
name|totalPeople
argument_list|()
operator|*
literal|3
operator|)
operator|+
operator|(
name|numDeleted
operator|*
literal|2
operator|)
operator|)
decl_stmt|;
name|int
name|totalAddedDocs
init|=
operator|(
name|totalPeople
argument_list|()
operator|+
name|numDeleted
operator|)
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|""
operator|+
operator|(
name|totalPeople
argument_list|()
operator|*
literal|3
operator|)
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
name|totalDocs
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:TripleThreat-1-*"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
name|totalAddedDocs
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:TripleThreat-2-*"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
name|totalAddedDocs
operator|+
literal|"']"
argument_list|)
expr_stmt|;
if|if
condition|(
name|personNameExists
argument_list|(
literal|"Michael"
argument_list|)
operator|&&
name|countryCodeExists
argument_list|(
literal|"NR"
argument_list|)
condition|)
block|{
name|assertQ
argument_list|(
literal|"Michael and NR are assured to be in the database.  Therefore the transformer should have added leahciM and RN on the same document as id:TripleThreat-1-3"
argument_list|,
name|req
argument_list|(
literal|"+id:TripleThreat-1-3 +NAME_mult_s:Michael +NAME_mult_s:leahciM  +COUNTRY_CODES_mult_s:NR +COUNTRY_CODES_mult_s:RN"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
block|}
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"AddAColumn_s:Added"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
name|totalAddedDocs
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expecting "
operator|+
name|numToExpect
operator|+
literal|" database calls, but DIH reported "
operator|+
name|totalDatabaseRequests
argument_list|()
argument_list|,
name|totalDatabaseRequests
argument_list|()
operator|==
name|numToExpect
argument_list|)
expr_stmt|;
block|}
DECL|method|withChildEntities
specifier|protected
name|void
name|withChildEntities
parameter_list|(
name|boolean
name|cached
parameter_list|,
name|boolean
name|checkDatabaseRequests
parameter_list|)
throws|throws
name|Exception
block|{
name|rootTransformerName
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|null
else|:
literal|"AddAColumnTransformer"
expr_stmt|;
name|int
name|numChildren
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|numDatabaseRequests
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|underlyingDataModified
condition|)
block|{
if|if
condition|(
name|countryEntity
condition|)
block|{
if|if
condition|(
name|cached
condition|)
block|{
name|numDatabaseRequests
operator|++
expr_stmt|;
block|}
else|else
block|{
name|numDatabaseRequests
operator|+=
name|totalPeople
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sportsEntity
condition|)
block|{
if|if
condition|(
name|cached
condition|)
block|{
name|numDatabaseRequests
operator|++
expr_stmt|;
block|}
else|else
block|{
name|numDatabaseRequests
operator|+=
name|totalPeople
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|countryEntity
operator|=
literal|true
expr_stmt|;
name|sportsEntity
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|countryZipper
operator|||
name|sportsZipper
condition|)
block|{
comment|// zipper tests fully cover nums of children
name|countryEntity
operator|=
name|countryZipper
expr_stmt|;
name|sportsEntity
operator|=
name|sportsZipper
expr_stmt|;
block|}
else|else
block|{
comment|// apply default randomization on cached cases
if|if
condition|(
name|numChildren
operator|==
literal|1
condition|)
block|{
name|countryEntity
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
name|sportsEntity
operator|=
operator|!
name|countryEntity
expr_stmt|;
block|}
block|}
if|if
condition|(
name|countryEntity
condition|)
block|{
name|countryTransformer
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
if|if
condition|(
name|cached
condition|)
block|{
name|numDatabaseRequests
operator|++
expr_stmt|;
name|countryCached
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|numDatabaseRequests
operator|+=
name|totalPeople
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sportsEntity
condition|)
block|{
name|sportsTransformer
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
if|if
condition|(
name|cached
condition|)
block|{
name|numDatabaseRequests
operator|++
expr_stmt|;
name|sportsCached
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|numDatabaseRequests
operator|+=
name|totalPeople
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|h
operator|.
name|query
argument_list|(
literal|"/dataimport"
argument_list|,
name|generateRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"There should be 1 document per person in the database: "
operator|+
name|totalPeople
argument_list|()
argument_list|,
name|req
argument_list|(
literal|"*:*"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
operator|(
name|totalPeople
argument_list|()
operator|)
operator|+
literal|"']"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|underlyingDataModified
operator|&&
literal|"AddAColumnTransformer"
operator|.
name|equals
argument_list|(
name|rootTransformerName
argument_list|)
condition|)
block|{
name|assertQ
argument_list|(
literal|"There should be 1 document with a transformer-added column per person is the database: "
operator|+
name|totalPeople
argument_list|()
argument_list|,
name|req
argument_list|(
literal|"AddAColumn_s:Added"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
operator|(
name|totalPeople
argument_list|()
operator|)
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|countryEntity
condition|)
block|{
block|{
name|String
index|[]
name|people
init|=
name|getStringsFromQuery
argument_list|(
literal|"SELECT NAME FROM PEOPLE WHERE DELETED != 'Y'"
argument_list|)
decl_stmt|;
name|String
name|man
init|=
name|people
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|people
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|String
index|[]
name|countryNames
init|=
name|getStringsFromQuery
argument_list|(
literal|"SELECT C.COUNTRY_NAME FROM PEOPLE P "
operator|+
literal|"INNER JOIN COUNTRIES C ON P.COUNTRY_CODE=C.CODE "
operator|+
literal|"WHERE P.DELETED!='Y' AND C.DELETED!='Y' AND P.NAME='"
operator|+
name|man
operator|+
literal|"'"
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!term f=NAME_mult_s}"
operator|+
name|man
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
name|countryNames
operator|.
name|length
operator|>
literal|0
condition|?
literal|"//doc/str[@name='COUNTRY_NAME_s']='"
operator|+
name|countryNames
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|countryNames
operator|.
name|length
argument_list|)
index|]
operator|+
literal|"'"
else|:
literal|"//doc[count(*[@name='COUNTRY_NAME_s'])=0]"
argument_list|)
expr_stmt|;
block|}
block|{
name|String
index|[]
name|countryCodes
init|=
name|getStringsFromQuery
argument_list|(
literal|"SELECT CODE FROM COUNTRIES WHERE DELETED != 'Y'"
argument_list|)
decl_stmt|;
name|String
name|theCode
init|=
name|countryCodes
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|countryCodes
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|int
name|num
init|=
name|numberPeopleByCountryCode
argument_list|(
name|theCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|num
operator|>
literal|0
condition|)
block|{
name|String
name|nrName
init|=
name|countryNameByCode
argument_list|(
name|theCode
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"COUNTRY_CODES_mult_s:"
operator|+
name|theCode
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
name|num
operator|+
literal|"']"
argument_list|,
literal|"//doc/str[@name='COUNTRY_NAME_s']='"
operator|+
name|nrName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no one lives there anyway
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"COUNTRY_CODES_mult_s:"
operator|+
name|theCode
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
name|num
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|countryTransformer
operator|&&
operator|!
name|underlyingDataModified
condition|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"countryAdded_s:country_added"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
name|totalPeople
argument_list|()
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sportsEntity
condition|)
block|{
if|if
condition|(
operator|!
name|underlyingDataModified
condition|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"SPORT_NAME_mult_s:Sailing"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|names
init|=
name|getStringsFromQuery
argument_list|(
literal|"SELECT NAME FROM PEOPLE WHERE DELETED != 'Y'"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|names
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|names
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|int
name|personId
init|=
name|getIntFromQuery
argument_list|(
literal|"SELECT ID FROM PEOPLE WHERE DELETED != 'Y' AND NAME='"
operator|+
name|name
operator|+
literal|"'"
argument_list|)
decl_stmt|;
name|String
index|[]
name|michaelsSports
init|=
name|sportNamesByPersonId
argument_list|(
name|personId
argument_list|)
decl_stmt|;
name|String
index|[]
name|xpath
init|=
operator|new
name|String
index|[
name|michaelsSports
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|xpath
index|[
literal|0
index|]
operator|=
literal|"//*[@numFound='1']"
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
name|String
name|ms
range|:
name|michaelsSports
control|)
block|{
name|xpath
index|[
name|i
index|]
operator|=
literal|"//doc/arr[@name='SPORT_NAME_mult_s']/str='"
comment|//[" + i + "]='" don't care about particular order
operator|+
name|ms
operator|+
literal|"'"
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"NAME_mult_s:"
operator|+
name|name
operator|.
name|replaceAll
argument_list|(
literal|"\\W"
argument_list|,
literal|"\\\\$0"
argument_list|)
argument_list|)
argument_list|,
name|xpath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|underlyingDataModified
operator|&&
name|sportsTransformer
condition|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"sportsAdded_s:sport_added"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
operator|(
name|totalSportsmen
argument_list|()
operator|)
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
name|assertQ
argument_list|(
literal|"checking orphan sport is absent"
argument_list|,
name|req
argument_list|(
literal|"{!term f=SPORT_NAME_mult_s}No Fishing"
argument_list|)
argument_list|,
literal|"//*[@numFound='0']"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkDatabaseRequests
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expecting "
operator|+
name|numDatabaseRequests
operator|+
literal|" database calls, but DIH reported "
operator|+
name|totalDatabaseRequests
argument_list|()
argument_list|,
name|totalDatabaseRequests
argument_list|()
operator|==
name|numDatabaseRequests
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|simpleCacheChildEntities
specifier|protected
name|void
name|simpleCacheChildEntities
parameter_list|(
name|boolean
name|checkDatabaseRequests
parameter_list|)
throws|throws
name|Exception
block|{
name|useSimpleCaches
operator|=
literal|true
expr_stmt|;
name|countryEntity
operator|=
literal|true
expr_stmt|;
name|sportsEntity
operator|=
literal|true
expr_stmt|;
name|countryCached
operator|=
literal|true
expr_stmt|;
name|sportsCached
operator|=
literal|true
expr_stmt|;
name|int
name|dbRequestsMoreThan
init|=
literal|3
decl_stmt|;
name|int
name|dbRequestsLessThan
init|=
name|totalPeople
argument_list|()
operator|*
literal|2
operator|+
literal|1
decl_stmt|;
name|h
operator|.
name|query
argument_list|(
literal|"/dataimport"
argument_list|,
name|generateRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"*:*"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
operator|(
name|totalPeople
argument_list|()
operator|)
operator|+
literal|"']"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|underlyingDataModified
operator|||
operator|(
name|personNameExists
argument_list|(
literal|"Samantha"
argument_list|)
operator|&&
literal|"Nauru"
operator|.
name|equals
argument_list|(
name|countryNameByCode
argument_list|(
literal|"NR"
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"NAME_mult_s:Samantha"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//doc/str[@name='COUNTRY_NAME_s']='Nauru'"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|underlyingDataModified
condition|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"COUNTRY_CODES_mult_s:NR"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//doc/str[@name='COUNTRY_NAME_s']='Nauru'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"SPORT_NAME_mult_s:Sailing"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|michaelsSports
init|=
name|sportNamesByPersonId
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|underlyingDataModified
operator|||
name|michaelsSports
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|xpath
init|=
operator|new
name|String
index|[
name|michaelsSports
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|xpath
index|[
literal|0
index|]
operator|=
literal|"//*[@numFound='1']"
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
name|String
name|ms
range|:
name|michaelsSports
control|)
block|{
name|xpath
index|[
name|i
index|]
operator|=
literal|"//doc/arr[@name='SPORT_NAME_mult_s']/str["
operator|+
name|i
operator|+
literal|"]='"
operator|+
name|ms
operator|+
literal|"'"
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"NAME_mult_s:Michael"
argument_list|)
argument_list|,
name|xpath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkDatabaseRequests
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expecting more than "
operator|+
name|dbRequestsMoreThan
operator|+
literal|" database calls, but DIH reported "
operator|+
name|totalDatabaseRequests
argument_list|()
argument_list|,
name|totalDatabaseRequests
argument_list|()
operator|>
name|dbRequestsMoreThan
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expecting fewer than "
operator|+
name|dbRequestsLessThan
operator|+
literal|" database calls, but DIH reported "
operator|+
name|totalDatabaseRequests
argument_list|()
argument_list|,
name|totalDatabaseRequests
argument_list|()
operator|<
name|dbRequestsLessThan
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getIntFromQuery
specifier|private
name|int
name|getIntFromQuery
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|Statement
name|s
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|newConnection
argument_list|()
expr_stmt|;
name|s
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|rs
operator|=
name|s
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
return|return
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
try|try
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
try|try
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
block|}
block|}
DECL|method|getStringsFromQuery
specifier|private
name|String
index|[]
name|getStringsFromQuery
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|Statement
name|s
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|newConnection
argument_list|()
expr_stmt|;
name|s
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|rs
operator|=
name|s
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|results
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
try|try
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
try|try
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
block|}
block|}
DECL|method|totalCountries
specifier|public
name|int
name|totalCountries
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getIntFromQuery
argument_list|(
literal|"SELECT COUNT(1) FROM COUNTRIES WHERE DELETED != 'Y' "
argument_list|)
return|;
block|}
DECL|method|totalPeople
specifier|public
name|int
name|totalPeople
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getIntFromQuery
argument_list|(
literal|"SELECT COUNT(1) FROM PEOPLE WHERE DELETED != 'Y' "
argument_list|)
return|;
block|}
DECL|method|totalSportsmen
specifier|public
name|int
name|totalSportsmen
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getIntFromQuery
argument_list|(
literal|"SELECT COUNT(*) FROM PEOPLE WHERE "
operator|+
literal|"EXISTS(SELECT ID FROM PEOPLE_SPORTS WHERE PERSON_ID=PEOPLE.ID AND PEOPLE_SPORTS.DELETED != 'Y')"
operator|+
literal|" AND PEOPLE.DELETED != 'Y'"
argument_list|)
return|;
block|}
DECL|method|countryCodeExists
specifier|public
name|boolean
name|countryCodeExists
parameter_list|(
name|String
name|cc
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getIntFromQuery
argument_list|(
literal|"SELECT COUNT(1) country_name FROM COUNTRIES WHERE DELETED != 'Y' AND CODE='"
operator|+
name|cc
operator|+
literal|"'"
argument_list|)
operator|>
literal|0
return|;
block|}
DECL|method|countryNameByCode
specifier|public
name|String
name|countryNameByCode
parameter_list|(
name|String
name|cc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|s
init|=
name|getStringsFromQuery
argument_list|(
literal|"SELECT country_name FROM COUNTRIES WHERE DELETED != 'Y' AND CODE='"
operator|+
name|cc
operator|+
literal|"'"
argument_list|)
decl_stmt|;
return|return
name|s
operator|.
name|length
operator|==
literal|0
condition|?
literal|null
else|:
name|s
index|[
literal|0
index|]
return|;
block|}
DECL|method|numberPeopleByCountryCode
specifier|public
name|int
name|numberPeopleByCountryCode
parameter_list|(
name|String
name|cc
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getIntFromQuery
argument_list|(
literal|"Select count(1) "
operator|+
literal|"from people p "
operator|+
literal|"inner join countries c on p.country_code=c.code "
operator|+
literal|"where p.deleted!='Y' and c.deleted!='Y' and c.code='"
operator|+
name|cc
operator|+
literal|"'"
argument_list|)
return|;
block|}
DECL|method|sportNamesByPersonId
specifier|public
name|String
index|[]
name|sportNamesByPersonId
parameter_list|(
name|int
name|personId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getStringsFromQuery
argument_list|(
literal|"SELECT ps.SPORT_NAME "
operator|+
literal|"FROM people_sports ps "
operator|+
literal|"INNER JOIN PEOPLE p ON p.id = ps.person_Id "
operator|+
literal|"WHERE ps.DELETED != 'Y' AND p.DELETED != 'Y' "
operator|+
literal|"AND ps.person_id="
operator|+
name|personId
operator|+
literal|" "
operator|+
literal|"ORDER BY ps.id"
argument_list|)
return|;
block|}
DECL|method|personNameExists
specifier|public
name|boolean
name|personNameExists
parameter_list|(
name|String
name|pn
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getIntFromQuery
argument_list|(
literal|"SELECT COUNT(1) FROM PEOPLE WHERE DELETED != 'Y' AND NAME='"
operator|+
name|pn
operator|+
literal|"'"
argument_list|)
operator|>
literal|0
return|;
block|}
DECL|method|personNameById
specifier|public
name|String
name|personNameById
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|nameArr
init|=
name|getStringsFromQuery
argument_list|(
literal|"SELECT NAME FROM PEOPLE WHERE ID="
operator|+
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameArr
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|nameArr
index|[
literal|0
index|]
return|;
block|}
DECL|method|modifySomePeople
specifier|public
name|IntChanges
name|modifySomePeople
parameter_list|()
throws|throws
name|Exception
block|{
name|underlyingDataModified
operator|=
literal|true
expr_stmt|;
name|int
name|numberToChange
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|people
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|changeSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|deleteSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|addSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|PreparedStatement
name|change
init|=
literal|null
decl_stmt|;
name|PreparedStatement
name|delete
init|=
literal|null
decl_stmt|;
name|PreparedStatement
name|add
init|=
literal|null
decl_stmt|;
comment|// One second in the future ensures a change time after the last import (DIH
comment|// uses second precision only)
name|Timestamp
name|theTime
init|=
operator|new
name|Timestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|1000
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"PEOPLE UPDATE USING TIMESTAMP: "
operator|+
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss.SSSZ"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|format
argument_list|(
name|theTime
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|conn
operator|=
name|newConnection
argument_list|()
expr_stmt|;
name|change
operator|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"update people set name=?, last_modified=? where id=?"
argument_list|)
expr_stmt|;
name|delete
operator|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"update people set deleted='Y', last_modified=? where id=?"
argument_list|)
expr_stmt|;
name|add
operator|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"insert into people (id,name,country_code,last_modified) values (?,?,'ZZ',?)"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberToChange
condition|;
name|i
operator|++
control|)
block|{
name|int
name|tryIndex
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|people
operator|.
name|length
argument_list|)
decl_stmt|;
name|Integer
name|id
init|=
operator|(
name|Integer
operator|)
name|people
index|[
name|tryIndex
index|]
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|changeSet
operator|.
name|contains
argument_list|(
name|id
argument_list|)
operator|&&
operator|!
name|deleteSet
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|boolean
name|changeDontDelete
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|changeDontDelete
condition|)
block|{
name|changeSet
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|change
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
literal|"MODIFIED "
operator|+
name|people
index|[
name|tryIndex
index|]
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|change
operator|.
name|setTimestamp
argument_list|(
literal|2
argument_list|,
name|theTime
argument_list|)
expr_stmt|;
name|change
operator|.
name|setInt
argument_list|(
literal|3
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|change
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deleteSet
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|delete
operator|.
name|setTimestamp
argument_list|(
literal|1
argument_list|,
name|theTime
argument_list|)
expr_stmt|;
name|delete
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|delete
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|numberToAdd
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberToAdd
condition|;
name|i
operator|++
control|)
block|{
name|int
name|tryIndex
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|people
operator|.
name|length
argument_list|)
decl_stmt|;
name|Integer
name|id
init|=
operator|(
name|Integer
operator|)
name|people
index|[
name|tryIndex
index|]
index|[
literal|0
index|]
decl_stmt|;
name|Integer
name|newId
init|=
name|id
operator|+
literal|1000
decl_stmt|;
name|String
name|newDesc
init|=
literal|"ADDED "
operator|+
name|people
index|[
name|tryIndex
index|]
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|addSet
operator|.
name|contains
argument_list|(
name|newId
argument_list|)
condition|)
block|{
name|addSet
operator|.
name|add
argument_list|(
name|newId
argument_list|)
expr_stmt|;
name|add
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|newId
argument_list|)
expr_stmt|;
name|add
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|newDesc
argument_list|)
expr_stmt|;
name|add
operator|.
name|setTimestamp
argument_list|(
literal|3
argument_list|,
name|theTime
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|add
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|conn
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|change
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
try|try
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
block|}
name|IntChanges
name|c
init|=
operator|new
name|IntChanges
argument_list|()
decl_stmt|;
name|c
operator|.
name|changedKeys
operator|=
name|changeSet
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|changeSet
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|c
operator|.
name|deletedKeys
operator|=
name|deleteSet
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|deleteSet
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|c
operator|.
name|addedKeys
operator|=
name|addSet
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|addSet
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
DECL|method|modifySomeCountries
specifier|public
name|String
index|[]
name|modifySomeCountries
parameter_list|()
throws|throws
name|Exception
block|{
name|underlyingDataModified
operator|=
literal|true
expr_stmt|;
name|int
name|numberToChange
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|countries
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|changeSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|PreparedStatement
name|change
init|=
literal|null
decl_stmt|;
comment|// One second in the future ensures a change time after the last import (DIH
comment|// uses second precision only)
name|Timestamp
name|theTime
init|=
operator|new
name|Timestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|1000
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"COUNTRY UPDATE USING TIMESTAMP: "
operator|+
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss.SSSZ"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|format
argument_list|(
name|theTime
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|conn
operator|=
name|newConnection
argument_list|()
expr_stmt|;
name|change
operator|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"update countries set country_name=?, last_modified=? where code=?"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberToChange
condition|;
name|i
operator|++
control|)
block|{
name|int
name|tryIndex
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|countries
operator|.
name|length
argument_list|)
decl_stmt|;
name|String
name|code
init|=
name|countries
index|[
name|tryIndex
index|]
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|changeSet
operator|.
name|contains
argument_list|(
name|code
argument_list|)
condition|)
block|{
name|changeSet
operator|.
name|add
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|change
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
literal|"MODIFIED "
operator|+
name|countries
index|[
name|tryIndex
index|]
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|change
operator|.
name|setTimestamp
argument_list|(
literal|2
argument_list|,
name|theTime
argument_list|)
expr_stmt|;
name|change
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|change
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|change
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
try|try
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
block|}
return|return
name|changeSet
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|changeSet
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|class|IntChanges
class|class
name|IntChanges
block|{
DECL|field|changedKeys
specifier|public
name|Integer
index|[]
name|changedKeys
decl_stmt|;
DECL|field|deletedKeys
specifier|public
name|Integer
index|[]
name|deletedKeys
decl_stmt|;
DECL|field|addedKeys
specifier|public
name|Integer
index|[]
name|addedKeys
decl_stmt|;
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|changedKeys
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"changes: "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
range|:
name|changedKeys
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|deletedKeys
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"deletes: "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
range|:
name|deletedKeys
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|addedKeys
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"adds: "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
range|:
name|addedKeys
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|generateConfig
specifier|protected
name|String
name|generateConfig
parameter_list|()
block|{
name|String
name|ds
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dbToUse
operator|==
name|Database
operator|.
name|DERBY
condition|)
block|{
name|ds
operator|=
literal|"derby"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dbToUse
operator|==
name|Database
operator|.
name|HSQLDB
condition|)
block|{
name|ds
operator|=
literal|"hsqldb"
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Invalid database to use: "
operator|+
name|dbToUse
argument_list|)
throw|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n<dataConfig> \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<propertyWriter type=''SimplePropertiesWriter'' directory=''"
operator|+
name|fileLocation
operator|+
literal|"'' filename=''"
operator|+
name|fileName
operator|+
literal|"'' />\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<dataSource name=''hsqldb'' driver=''org.hsqldb.jdbcDriver'' url=''jdbc:hsqldb:mem:.'' /> \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<dataSource name=''derby'' driver=''org.apache.derby.jdbc.EmbeddedDriver'' url=''jdbc:derby:memory:derbyDB;territory=en_US'' /> \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<document name=''TestSqlEntityProcessor''> \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<entity name=''People'' "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"pk=''"
operator|+
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"ID"
else|:
literal|"People.ID"
operator|)
operator|+
literal|"'' "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"processor=''SqlEntityProcessor'' "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"dataSource=''"
operator|+
name|ds
operator|+
literal|"'' "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|rootTransformerName
operator|!=
literal|null
condition|?
literal|"transformer=''"
operator|+
name|rootTransformerName
operator|+
literal|"'' "
else|:
literal|""
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"query=''SELECT ID, NAME, COUNTRY_CODE FROM PEOPLE WHERE DELETED != 'Y' "
operator|+
operator|(
operator|(
name|sportsZipper
operator|||
name|countryZipper
condition|?
literal|"ORDER BY ID"
else|:
literal|""
operator|)
operator|+
operator|(
name|wrongPeopleOrder
condition|?
literal|" DESC"
else|:
literal|""
operator|)
operator|)
operator|+
literal|"'' "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|deltaQueriesPersonTable
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"> \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<field column=''NAME'' name=''NAME_mult_s'' /> \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<field column=''COUNTRY_CODE'' name=''COUNTRY_CODES_mult_s'' /> \n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|countryEntity
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<entity name=''Countries'' "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"pk=''"
operator|+
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"CODE"
else|:
literal|"Countries.CODE"
operator|)
operator|+
literal|"'' "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"dataSource=''"
operator|+
name|ds
operator|+
literal|"'' "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|countryTransformer
condition|?
literal|"transformer=''AddAColumnTransformer'' "
operator|+
literal|"newColumnName=''countryAdded_s'' newColumnValue=''country_added'' "
else|:
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|countryCached
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"processor=''SqlEntityProcessor'' cacheImpl=''SortedMapBackedCache'' "
else|:
literal|"processor=''CachedSqlEntityProcessor'' "
argument_list|)
expr_stmt|;
if|if
condition|(
name|useSimpleCaches
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"query=''SELECT CODE, COUNTRY_NAME FROM COUNTRIES WHERE DELETED != 'Y' AND CODE='${People.COUNTRY_CODE}' ''>\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|countryZipper
condition|)
block|{
comment|// really odd join btw. it sends duped countries
name|sb
operator|.
name|append
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"cacheKey=''ID'' cacheLookup=''People.ID'' "
else|:
literal|"where=''ID=People.ID'' "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"join=''zipper'' query=''SELECT PEOPLE.ID, CODE, COUNTRY_NAME FROM COUNTRIES"
operator|+
literal|" JOIN PEOPLE ON COUNTRIES.CODE=PEOPLE.COUNTRY_CODE "
operator|+
literal|"WHERE PEOPLE.DELETED != 'Y' ORDER BY PEOPLE.ID "
operator|+
operator|(
name|wrongCountryOrder
condition|?
literal|" DESC"
else|:
literal|""
operator|)
operator|+
literal|"'' "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"cacheKey=''CODE'' cacheLookup=''People.COUNTRY_CODE'' "
else|:
literal|"where=''CODE=People.COUNTRY_CODE'' "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"query=''SELECT CODE, COUNTRY_NAME FROM COUNTRIES'' "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"> \n"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"processor=''SqlEntityProcessor'' query=''SELECT CODE, COUNTRY_NAME FROM COUNTRIES WHERE DELETED != 'Y' AND CODE='${People.COUNTRY_CODE}' '' "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|deltaQueriesCountryTable
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"> \n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"<field column=''CODE'' name=''COUNTRY_CODE_s'' /> \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<field column=''COUNTRY_NAME'' name=''COUNTRY_NAME_s'' /> \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</entity> \n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sportsEntity
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<entity name=''Sports'' "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"dataSource=''"
operator|+
name|ds
operator|+
literal|"'' "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sportsTransformer
condition|?
literal|"transformer=''AddAColumnTransformer'' "
operator|+
literal|"newColumnName=''sportsAdded_s'' newColumnValue=''sport_added'' "
else|:
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|sportsCached
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"processor=''SqlEntityProcessor'' cacheImpl=''SortedMapBackedCache'' "
else|:
literal|"processor=''CachedSqlEntityProcessor'' "
argument_list|)
expr_stmt|;
if|if
condition|(
name|useSimpleCaches
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"query=''SELECT ID, SPORT_NAME FROM PEOPLE_SPORTS WHERE DELETED != 'Y' AND PERSON_ID=${People.ID} ORDER BY ID'' "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"cacheKey=''PERSON_ID'' cacheLookup=''People.ID'' "
else|:
literal|"where=''PERSON_ID=People.ID'' "
argument_list|)
expr_stmt|;
if|if
condition|(
name|sportsZipper
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"join=''zipper'' query=''SELECT ID, PERSON_ID, SPORT_NAME FROM PEOPLE_SPORTS ORDER BY PERSON_ID"
operator|+
operator|(
name|wrongSportsOrder
condition|?
literal|" DESC"
else|:
literal|""
operator|)
operator|+
literal|"'' "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"query=''SELECT ID, PERSON_ID, SPORT_NAME FROM PEOPLE_SPORTS ORDER BY ID'' "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"processor=''SqlEntityProcessor'' query=''SELECT ID, SPORT_NAME FROM PEOPLE_SPORTS WHERE DELETED != 'Y' AND PERSON_ID=${People.ID} ORDER BY ID'' "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"> \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<field column=''SPORT_NAME'' name=''SPORT_NAME_mult_s'' /> \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<field column=''id'' name=''SPORT_ID_mult_s'' /> \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</entity> \n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</entity> \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</document> \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</dataConfig> \n"
argument_list|)
expr_stmt|;
name|String
name|config
init|=
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"[']{2}"
argument_list|,
literal|"\""
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|config
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
annotation|@
name|Override
DECL|method|populateData
specifier|protected
name|void
name|populateData
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|Exception
block|{
name|Statement
name|s
init|=
literal|null
decl_stmt|;
name|PreparedStatement
name|ps
init|=
literal|null
decl_stmt|;
name|Timestamp
name|theTime
init|=
operator|new
name|Timestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|10000
argument_list|)
decl_stmt|;
comment|// 10 seconds ago
try|try
block|{
name|s
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"create table countries(code varchar(3) not null primary key, country_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)"
argument_list|)
expr_stmt|;
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"create table people(id int not null primary key, name varchar(50), country_code char(2), deleted char(1) default 'N', last_modified timestamp not null)"
argument_list|)
expr_stmt|;
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"create table people_sports(id int not null primary key, person_id int, sport_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)"
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"INSERTING DB DATA USING TIMESTAMP: "
operator|+
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss.SSSZ"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|format
argument_list|(
name|theTime
argument_list|)
argument_list|)
expr_stmt|;
name|ps
operator|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"insert into countries (code, country_name, last_modified) values (?,?,?)"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
index|[]
name|country
range|:
name|countries
control|)
block|{
name|ps
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|country
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|country
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setTimestamp
argument_list|(
literal|3
argument_list|,
name|theTime
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ps
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
name|ps
operator|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"insert into people (id, name, country_code, last_modified) values (?,?,?,?)"
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|person
range|:
name|people
control|)
block|{
name|ps
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
operator|(
name|Integer
operator|)
name|person
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
operator|(
name|String
operator|)
name|person
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
operator|(
name|String
operator|)
name|person
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setTimestamp
argument_list|(
literal|4
argument_list|,
name|theTime
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ps
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
name|ps
operator|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"insert into people_sports (id, person_id, sport_name, last_modified) values (?,?,?,?)"
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|sport
range|:
name|people_sports
control|)
block|{
name|ps
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
operator|(
name|Integer
operator|)
name|sport
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
operator|(
name|Integer
operator|)
name|sport
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
operator|(
name|String
operator|)
name|sport
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setTimestamp
argument_list|(
literal|4
argument_list|,
name|theTime
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ps
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|commit
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
try|try
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
try|try
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
block|}
block|}
DECL|field|countries
specifier|public
specifier|static
specifier|final
name|String
index|[]
index|[]
name|countries
init|=
block|{
block|{
literal|"NA"
block|,
literal|"Namibia"
block|}
block|,
block|{
literal|"NC"
block|,
literal|"New Caledonia"
block|}
block|,
block|{
literal|"NE"
block|,
literal|"Niger"
block|}
block|,
block|{
literal|"NF"
block|,
literal|"Norfolk Island"
block|}
block|,
block|{
literal|"NG"
block|,
literal|"Nigeria"
block|}
block|,
block|{
literal|"NI"
block|,
literal|"Nicaragua"
block|}
block|,
block|{
literal|"NL"
block|,
literal|"Netherlands"
block|}
block|,
block|{
literal|"NO"
block|,
literal|"Norway"
block|}
block|,
block|{
literal|"NP"
block|,
literal|"Nepal"
block|}
block|,
block|{
literal|"NR"
block|,
literal|"Nauru"
block|}
block|,
block|{
literal|"NU"
block|,
literal|"Niue"
block|}
block|,
block|{
literal|"NZ"
block|,
literal|"New Zealand"
block|}
block|}
decl_stmt|;
DECL|field|people
specifier|public
specifier|static
specifier|final
name|Object
index|[]
index|[]
name|people
init|=
block|{
block|{
literal|1
block|,
literal|"Jacob"
block|,
literal|"NZ"
block|}
block|,
block|{
literal|2
block|,
literal|"Ethan"
block|,
literal|"NU"
block|}
block|,
block|{
literal|3
block|,
literal|"Michael"
block|,
literal|"NR"
block|}
block|,
block|{
literal|4
block|,
literal|"Jayden"
block|,
literal|"NP"
block|}
block|,
block|{
literal|5
block|,
literal|"William"
block|,
literal|"NO"
block|}
block|,
block|{
literal|6
block|,
literal|"Alexander"
block|,
literal|"NL"
block|}
block|,
block|{
literal|7
block|,
literal|"Noah"
block|,
literal|"NI"
block|}
block|,
block|{
literal|8
block|,
literal|"Daniel"
block|,
literal|"NG"
block|}
block|,
block|{
literal|9
block|,
literal|"Aiden"
block|,
literal|"NF"
block|}
block|,
block|{
literal|21
block|,
literal|"Anthony"
block|,
literal|"NE"
block|}
block|,
comment|// there is no ID=10 anymore
block|{
literal|11
block|,
literal|"Emma"
block|,
literal|"NL"
block|}
block|,
block|{
literal|12
block|,
literal|"Grace"
block|,
literal|"NI"
block|}
block|,
block|{
literal|13
block|,
literal|"Hailey"
block|,
literal|"NG"
block|}
block|,
block|{
literal|14
block|,
literal|"Isabella"
block|,
literal|"NF"
block|}
block|,
block|{
literal|15
block|,
literal|"Lily"
block|,
literal|"NE"
block|}
block|,
block|{
literal|16
block|,
literal|"Madison"
block|,
literal|"NC"
block|}
block|,
block|{
literal|17
block|,
literal|"Mia"
block|,
literal|"NA"
block|}
block|,
block|{
literal|18
block|,
literal|"Natalie"
block|,
literal|"NZ"
block|}
block|,
block|{
literal|19
block|,
literal|"Olivia"
block|,
literal|"NU"
block|}
block|,
block|{
literal|20
block|,
literal|"Samantha"
block|,
literal|"NR"
block|}
block|}
decl_stmt|;
DECL|field|people_sports
specifier|public
specifier|static
specifier|final
name|Object
index|[]
index|[]
name|people_sports
init|=
block|{
block|{
literal|100
block|,
literal|1
block|,
literal|"Swimming"
block|}
block|,
block|{
literal|200
block|,
literal|2
block|,
literal|"Triathlon"
block|}
block|,
block|{
literal|300
block|,
literal|3
block|,
literal|"Water polo"
block|}
block|,
block|{
literal|310
block|,
literal|3
block|,
literal|"Underwater rugby"
block|}
block|,
block|{
literal|320
block|,
literal|3
block|,
literal|"Kayaking"
block|}
block|,
block|{
literal|400
block|,
literal|4
block|,
literal|"Snorkeling"
block|}
block|,
block|{
literal|500
block|,
literal|5
block|,
literal|"Synchronized diving"
block|}
block|,
block|{
literal|600
block|,
literal|6
block|,
literal|"Underwater rugby"
block|}
block|,
block|{
literal|700
block|,
literal|7
block|,
literal|"Boating"
block|}
block|,
block|{
literal|800
block|,
literal|8
block|,
literal|"Bodyboarding"
block|}
block|,
block|{
literal|900
block|,
literal|9
block|,
literal|"Canoeing"
block|}
block|,
block|{
literal|1000
block|,
literal|10
block|,
literal|"No Fishing"
block|}
block|,
comment|// orhpaned sport
comment|//
block|{
literal|1100
block|,
literal|11
block|,
literal|"Jet Ski"
block|}
block|,
block|{
literal|1110
block|,
literal|11
block|,
literal|"Rowing"
block|}
block|,
block|{
literal|1120
block|,
literal|11
block|,
literal|"Sailing"
block|}
block|,
block|{
literal|1200
block|,
literal|12
block|,
literal|"Kayaking"
block|}
block|,
block|{
literal|1210
block|,
literal|12
block|,
literal|"Canoeing"
block|}
block|,
block|{
literal|1300
block|,
literal|13
block|,
literal|"Kite surfing"
block|}
block|,
block|{
literal|1400
block|,
literal|14
block|,
literal|"Parasailing"
block|}
block|,
block|{
literal|1500
block|,
literal|15
block|,
literal|"Rafting"
block|}
block|,
comment|//{1600, 16, "Rowing"}, Madison has no sport
block|{
literal|1700
block|,
literal|17
block|,
literal|"Sailing"
block|}
block|,
block|{
literal|1800
block|,
literal|18
block|,
literal|"White Water Rafting"
block|}
block|,
block|{
literal|1900
block|,
literal|19
block|,
literal|"Water skiing"
block|}
block|,
block|{
literal|2000
block|,
literal|20
block|,
literal|"Windsurfing"
block|}
block|,
block|{
literal|2100
block|,
literal|21
block|,
literal|"Concrete diving"
block|}
block|,
block|{
literal|2110
block|,
literal|21
block|,
literal|"Bubble rugby"
block|}
block|}
decl_stmt|;
block|}
end_class
end_unit
