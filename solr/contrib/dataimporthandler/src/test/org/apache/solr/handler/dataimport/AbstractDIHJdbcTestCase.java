begin_unit
begin_package
DECL|package|org.apache.solr.handler.dataimport
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import
begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import
begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_comment
comment|/**  * This sets up an in-memory Derby Sql database with a little sample data.  * The schema here is poorly-designed to illustrate DIH's ability to   * overcome these kinds of challenges.  */
end_comment
begin_class
DECL|class|AbstractDIHJdbcTestCase
specifier|public
specifier|abstract
class|class
name|AbstractDIHJdbcTestCase
extends|extends
name|AbstractDataImportHandlerTestCase
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClassDihJdbcTest
specifier|public
specifier|static
name|void
name|beforeClassDihJdbcTest
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"org.hsqldb.jdbcDriver"
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|Statement
name|s
init|=
literal|null
decl_stmt|;
name|PreparedStatement
name|ps
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:hsqldb:mem:."
argument_list|)
expr_stmt|;
name|s
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"create table countries(code char(2) not null primary key, country_name varchar(50))"
argument_list|)
expr_stmt|;
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"create table people(id int not null primary key, name varchar(50), country_codes varchar(100))"
argument_list|)
expr_stmt|;
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"create table people_sports(id int not null primary key, person_id int, sport_name varchar(50))"
argument_list|)
expr_stmt|;
name|ps
operator|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"insert into countries values (?,?)"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
index|[]
name|country
range|:
name|countries
control|)
block|{
name|ps
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|country
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|country
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ps
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
name|ps
operator|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"insert into people values (?,?,?)"
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|person
range|:
name|people
control|)
block|{
name|ps
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
operator|(
name|Integer
operator|)
name|person
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
operator|(
name|String
operator|)
name|person
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
operator|(
name|String
operator|)
name|person
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ps
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
name|ps
operator|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"insert into people_sports values (?,?,?)"
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|sport
range|:
name|people_sports
control|)
block|{
name|ps
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
operator|(
name|Integer
operator|)
name|sport
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
operator|(
name|Integer
operator|)
name|sport
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
operator|(
name|String
operator|)
name|sport
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ps
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ps
operator|!=
literal|null
condition|)
block|{
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|AfterClass
DECL|method|afterClassDihJdbcTest
specifier|public
specifier|static
name|void
name|afterClassDihJdbcTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|Statement
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:hsqldb:mem:."
argument_list|)
expr_stmt|;
name|s
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"shutdown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|field|countries
specifier|public
specifier|static
specifier|final
name|String
index|[]
index|[]
name|countries
init|=
block|{
block|{
literal|"NA"
block|,
literal|"Namibia"
block|}
block|,
block|{
literal|"NC"
block|,
literal|"New Caledonia"
block|}
block|,
block|{
literal|"NE"
block|,
literal|"Niger"
block|}
block|,
block|{
literal|"NF"
block|,
literal|"Norfolk Island"
block|}
block|,
block|{
literal|"NG"
block|,
literal|"Nigeria"
block|}
block|,
block|{
literal|"NI"
block|,
literal|"Nicaragua"
block|}
block|,
block|{
literal|"NL"
block|,
literal|"Netherlands"
block|}
block|,
block|{
literal|"NO"
block|,
literal|"Norway"
block|}
block|,
block|{
literal|"NP"
block|,
literal|"Nepal"
block|}
block|,
block|{
literal|"NR"
block|,
literal|"Nauru"
block|}
block|,
block|{
literal|"NU"
block|,
literal|"Niue"
block|}
block|,
block|{
literal|"NZ"
block|,
literal|"New Zealand"
block|}
block|}
decl_stmt|;
DECL|field|people
specifier|public
specifier|static
specifier|final
name|Object
index|[]
index|[]
name|people
init|=
block|{
block|{
literal|1
block|,
literal|"Jacob"
block|,
literal|"NZ"
block|}
block|,
block|{
literal|2
block|,
literal|"Ethan"
block|,
literal|"NU,NA,NE"
block|}
block|,
block|{
literal|3
block|,
literal|"Michael"
block|,
literal|"NR"
block|}
block|,
block|{
literal|4
block|,
literal|"Jayden"
block|,
literal|"NP"
block|}
block|,
block|{
literal|5
block|,
literal|"William"
block|,
literal|"NO"
block|}
block|,
block|{
literal|6
block|,
literal|"Alexander"
block|,
literal|"NL"
block|}
block|,
block|{
literal|7
block|,
literal|"Noah"
block|,
literal|"NI"
block|}
block|,
block|{
literal|8
block|,
literal|"Daniel"
block|,
literal|"NG"
block|}
block|,
block|{
literal|9
block|,
literal|"Aiden"
block|,
literal|"NF"
block|}
block|,
block|{
literal|10
block|,
literal|"Anthony"
block|,
literal|"NE"
block|}
block|,
block|{
literal|11
block|,
literal|"Emma"
block|,
literal|"NL"
block|}
block|,
block|{
literal|12
block|,
literal|"Grace"
block|,
literal|"NI"
block|}
block|,
block|{
literal|13
block|,
literal|"Hailey"
block|,
literal|"NG"
block|}
block|,
block|{
literal|14
block|,
literal|"Isabella"
block|,
literal|"NF"
block|}
block|,
block|{
literal|15
block|,
literal|"Lily"
block|,
literal|"NE"
block|}
block|,
block|{
literal|16
block|,
literal|"Madison"
block|,
literal|"NC"
block|}
block|,
block|{
literal|17
block|,
literal|"Mia"
block|,
literal|"NA"
block|}
block|,
block|{
literal|18
block|,
literal|"Natalie"
block|,
literal|"NP,NR,NU,NZ"
block|}
block|,
block|{
literal|19
block|,
literal|"Olivia"
block|,
literal|"NU"
block|}
block|,
block|{
literal|20
block|,
literal|"Samantha"
block|,
literal|"NR"
block|}
block|}
decl_stmt|;
DECL|field|people_sports
specifier|public
specifier|static
specifier|final
name|Object
index|[]
index|[]
name|people_sports
init|=
block|{
block|{
literal|100
block|,
literal|1
block|,
literal|"Swimming"
block|}
block|,
block|{
literal|200
block|,
literal|2
block|,
literal|"Triathlon"
block|}
block|,
block|{
literal|300
block|,
literal|3
block|,
literal|"Water polo"
block|}
block|,
block|{
literal|310
block|,
literal|3
block|,
literal|"Underwater rugby"
block|}
block|,
block|{
literal|320
block|,
literal|3
block|,
literal|"Kayaking"
block|}
block|,
block|{
literal|400
block|,
literal|4
block|,
literal|"Snorkeling"
block|}
block|,
block|{
literal|500
block|,
literal|5
block|,
literal|"Synchronized diving"
block|}
block|,
block|{
literal|600
block|,
literal|6
block|,
literal|"Underwater rugby"
block|}
block|,
block|{
literal|700
block|,
literal|7
block|,
literal|"Boating"
block|}
block|,
block|{
literal|800
block|,
literal|8
block|,
literal|"Bodyboarding"
block|}
block|,
block|{
literal|900
block|,
literal|9
block|,
literal|"Canoeing"
block|}
block|,
block|{
literal|1000
block|,
literal|10
block|,
literal|"Fishing"
block|}
block|,
block|{
literal|1100
block|,
literal|11
block|,
literal|"Jet Ski"
block|}
block|,
block|{
literal|1110
block|,
literal|11
block|,
literal|"Rowing"
block|}
block|,
block|{
literal|1120
block|,
literal|11
block|,
literal|"Sailing"
block|}
block|,
block|{
literal|1200
block|,
literal|12
block|,
literal|"Kayaking"
block|}
block|,
block|{
literal|1210
block|,
literal|12
block|,
literal|"Canoeing"
block|}
block|,
block|{
literal|1300
block|,
literal|13
block|,
literal|"Kite surfing"
block|}
block|,
block|{
literal|1400
block|,
literal|14
block|,
literal|"Parasailing"
block|}
block|,
block|{
literal|1500
block|,
literal|15
block|,
literal|"Rafting"
block|}
block|,
block|{
literal|1600
block|,
literal|16
block|,
literal|"Rowing"
block|}
block|,
block|{
literal|1700
block|,
literal|17
block|,
literal|"Sailing"
block|}
block|,
block|{
literal|1800
block|,
literal|18
block|,
literal|"White Water Rafting"
block|}
block|,
block|{
literal|1900
block|,
literal|19
block|,
literal|"Water skiing"
block|}
block|,
block|{
literal|2000
block|,
literal|20
block|,
literal|"Windsurfing"
block|}
block|}
decl_stmt|;
block|}
end_class
end_unit
