begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.dataimport
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * Unit test of SolrEntityProcessor. A very basic test outside of the DIH.  */
end_comment
begin_class
DECL|class|TestSolrEntityProcessorUnit
specifier|public
class|class
name|TestSolrEntityProcessorUnit
extends|extends
name|AbstractDataImportHandlerTestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSolrEntityProcessorUnit
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ID
specifier|private
specifier|static
specifier|final
name|String
name|ID
init|=
literal|"id"
decl_stmt|;
DECL|method|testQuery
specifier|public
name|void
name|testQuery
parameter_list|()
block|{
name|String
index|[]
index|[]
index|[]
name|docs
init|=
name|generateDocs
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|MockSolrEntityProcessor
name|processor
init|=
operator|new
name|MockSolrEntityProcessor
argument_list|(
name|docs
argument_list|)
decl_stmt|;
name|assertExpectedDocs
argument_list|(
name|docs
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|processor
operator|.
name|getQueryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNumDocsGreaterThanRows
specifier|public
name|void
name|testNumDocsGreaterThanRows
parameter_list|()
block|{
name|String
index|[]
index|[]
index|[]
name|docs
init|=
name|generateDocs
argument_list|(
literal|44
argument_list|)
decl_stmt|;
name|MockSolrEntityProcessor
name|processor
init|=
operator|new
name|MockSolrEntityProcessor
argument_list|(
name|docs
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertExpectedDocs
argument_list|(
name|docs
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|processor
operator|.
name|getQueryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValuedFields
specifier|public
name|void
name|testMultiValuedFields
parameter_list|()
block|{
name|String
index|[]
index|[]
index|[]
name|docs
init|=
operator|new
name|String
index|[
literal|1
index|]
index|[
literal|2
index|]
index|[
literal|2
index|]
decl_stmt|;
name|String
index|[]
index|[]
name|doc
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"id"
block|,
literal|"1"
block|}
block|,
block|{
literal|"multi"
block|,
literal|"multi1"
block|}
block|,
block|{
literal|"multi"
block|,
literal|"multi2"
block|}
block|,
block|{
literal|"multi"
block|,
literal|"multi3"
block|}
block|}
decl_stmt|;
name|docs
index|[
literal|0
index|]
operator|=
name|doc
expr_stmt|;
name|MockSolrEntityProcessor
name|processor
init|=
operator|new
name|MockSolrEntityProcessor
argument_list|(
name|docs
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|next
init|=
name|processor
operator|.
name|nextRow
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|doc
index|[
literal|0
index|]
index|[
literal|1
index|]
argument_list|,
name|next
operator|.
name|get
argument_list|(
name|doc
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|multiValued
init|=
block|{
literal|"multi1"
block|,
literal|"multi2"
block|,
literal|"multi3"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|multiValued
argument_list|)
argument_list|,
name|next
operator|.
name|get
argument_list|(
name|doc
index|[
literal|1
index|]
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|processor
operator|.
name|getQueryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|processor
operator|.
name|nextRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiThread
specifier|public
name|void
name|testMultiThread
parameter_list|()
block|{
name|int
name|numThreads
init|=
literal|5
decl_stmt|;
name|int
name|numDocs
init|=
literal|40
decl_stmt|;
name|String
index|[]
index|[]
index|[]
name|docs
init|=
name|generateDocs
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
specifier|final
name|MockSolrEntityProcessor
name|entityProcessor
init|=
operator|new
name|MockSolrEntityProcessor
argument_list|(
name|docs
argument_list|,
literal|25
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|rowList
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|Runnable
name|runnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
decl_stmt|;
synchronized|synchronized
init|(
name|entityProcessor
init|)
block|{
name|row
operator|=
name|entityProcessor
operator|.
name|nextRow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|row
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|rowList
operator|.
name|put
argument_list|(
name|row
operator|.
name|get
argument_list|(
name|ID
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
name|rowList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
index|[]
index|[]
name|expectedDoc
range|:
name|docs
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
init|=
name|rowList
operator|.
name|get
argument_list|(
name|expectedDoc
index|[
literal|0
index|]
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|row
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|expectedDoc
index|[
name|i
index|]
index|[
literal|0
index|]
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedDoc
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|rowList
operator|.
name|remove
argument_list|(
name|expectedDoc
index|[
literal|0
index|]
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rowList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|generateDocs
specifier|private
specifier|static
name|String
index|[]
index|[]
index|[]
name|generateDocs
parameter_list|(
name|int
name|numDocs
parameter_list|)
block|{
name|String
index|[]
index|[]
index|[]
name|docs
init|=
operator|new
name|String
index|[
name|numDocs
index|]
index|[
literal|2
index|]
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|docs
index|[
name|i
index|]
operator|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"id"
block|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
operator|+
literal|1
argument_list|)
block|}
block|,
block|{
literal|"description"
block|,
literal|"Description"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
operator|+
literal|1
argument_list|)
block|}
block|}
expr_stmt|;
block|}
return|return
name|docs
return|;
block|}
DECL|method|assertExpectedDocs
specifier|private
specifier|static
name|void
name|assertExpectedDocs
parameter_list|(
name|String
index|[]
index|[]
index|[]
name|expectedDocs
parameter_list|,
name|SolrEntityProcessor
name|processor
parameter_list|)
block|{
for|for
control|(
name|String
index|[]
index|[]
name|expectedDoc
range|:
name|expectedDocs
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|next
init|=
name|processor
operator|.
name|nextRow
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedDoc
index|[
literal|0
index|]
index|[
literal|1
index|]
argument_list|,
name|next
operator|.
name|get
argument_list|(
name|expectedDoc
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedDoc
index|[
literal|1
index|]
index|[
literal|1
index|]
argument_list|,
name|next
operator|.
name|get
argument_list|(
name|expectedDoc
index|[
literal|1
index|]
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|processor
operator|.
name|nextRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
