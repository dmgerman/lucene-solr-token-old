begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.dataimport
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
package|;
end_package
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import
begin_comment
comment|/**  *<p>  * Test for SqlEntityProcessor which checks full and delta imports using the  * test harness  *</p>  *  *  * @since solr 1.3  */
end_comment
begin_class
annotation|@
name|Ignore
argument_list|(
literal|"FIXME: I fail so often it makes me ill!"
argument_list|)
DECL|class|TestSqlEntityProcessor2
specifier|public
class|class
name|TestSqlEntityProcessor2
extends|extends
name|AbstractDataImportHandlerTestCase
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"dataimport-solrconfig.xml"
argument_list|,
literal|"dataimport-schema.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Ignore
argument_list|(
literal|"Known Locale/TZ problems: see https://issues.apache.org/jira/browse/SOLR-1916"
argument_list|)
comment|/**    * This test is here for historical purposes only.      * When SOLR-1916 is fixed, it would be best to rewrite this test.    *     * @throws Exception    */
DECL|method|testLastIndexTime
specifier|public
name|void
name|testLastIndexTime
parameter_list|()
throws|throws
name|Exception
block|{
name|List
name|row
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|row
operator|.
name|add
argument_list|(
name|createMap
argument_list|(
literal|"id"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|MockDataSource
operator|.
name|setIterator
argument_list|(
literal|"select * from x where last_modified> OK"
argument_list|,
name|row
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|runFullImport
argument_list|(
name|dataConfig_LastIndexTime
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:5"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
block|}
DECL|class|DateFormatValidatingEvaluator
specifier|static
class|class
name|DateFormatValidatingEvaluator
extends|extends
name|Evaluator
block|{
annotation|@
name|Override
DECL|method|evaluate
specifier|public
name|String
name|evaluate
parameter_list|(
name|String
name|expression
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
name|List
name|l
init|=
name|EvaluatorBag
operator|.
name|parseParams
argument_list|(
name|expression
argument_list|,
name|context
operator|.
name|getVariableResolver
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|dateStr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|EvaluatorBag
operator|.
name|VariableWrapper
condition|)
block|{
name|EvaluatorBag
operator|.
name|VariableWrapper
name|wrapper
init|=
operator|(
name|EvaluatorBag
operator|.
name|VariableWrapper
operator|)
name|o
decl_stmt|;
name|o
operator|=
name|wrapper
operator|.
name|resolve
argument_list|()
expr_stmt|;
name|dateStr
operator|=
name|o
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|SimpleDateFormat
name|formatter
init|=
name|DataImporter
operator|.
name|DATE_TIME_FORMAT
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|formatter
operator|.
name|parse
argument_list|(
name|dateStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|DataImportHandlerException
operator|.
name|wrapAndThrow
argument_list|(
name|DataImportHandlerException
operator|.
name|SEVERE
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|"OK"
return|;
block|}
block|}
DECL|field|dataConfig_LastIndexTime
specifier|private
specifier|static
name|String
name|dataConfig_LastIndexTime
init|=
literal|"<dataConfig><dataSource  type=\"MockDataSource\"/>\n"
operator|+
literal|"\t<function name=\"checkDateFormat\" class=\"org.apache.solr.handler.dataimport.TestSqlEntityProcessor2$DateFormatValidatingEvaluator\"/>\n"
operator|+
literal|"\t<document>\n"
operator|+
literal|"\t\t<entity name=\"x\" query=\"select * from x where last_modified> ${dih.functions.checkDateFormat(dih.last_index_time)}\" />\n"
operator|+
literal|"\t</document>\n"
operator|+
literal|"</dataConfig>"
decl_stmt|;
block|}
end_class
end_unit
