begin_unit
begin_package
DECL|package|org.apache.solr.handler.dataimport
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|StoredDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|QueryWrapperFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|BitDocIdSetCachingWrapperFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|BitDocIdSetFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ScoreMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ToParentBlockJoinQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
operator|.
name|config
operator|.
name|ConfigNameConstants
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  * Test for DocBuilder using the test harness.   *<b> Documents are hierarchical in this test, i.e. each document have nested children documents.</b>  */
end_comment
begin_class
DECL|class|TestHierarchicalDocBuilder
specifier|public
class|class
name|TestHierarchicalDocBuilder
extends|extends
name|AbstractDataImportHandlerTestCase
block|{
DECL|field|FIELD_ID
specifier|private
specifier|static
specifier|final
name|String
name|FIELD_ID
init|=
literal|"id"
decl_stmt|;
DECL|field|id
specifier|private
name|int
name|id
init|=
literal|0
decl_stmt|;
comment|//unique id
DECL|field|req
specifier|private
name|SolrQueryRequest
name|req
decl_stmt|;
DECL|class|ContextHolder
specifier|private
specifier|static
class|class
name|ContextHolder
block|{
DECL|field|counter
name|int
name|counter
init|=
literal|0
decl_stmt|;
DECL|field|hierarchies
name|List
argument_list|<
name|Hierarchy
argument_list|>
name|hierarchies
init|=
operator|new
name|ArrayList
argument_list|<
name|Hierarchy
argument_list|>
argument_list|()
decl_stmt|;
block|}
DECL|class|Hierarchy
specifier|private
specifier|static
class|class
name|Hierarchy
block|{
DECL|field|elementType
name|String
name|elementType
decl_stmt|;
DECL|field|elementData
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|elementData
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|elements
name|List
argument_list|<
name|Hierarchy
argument_list|>
name|elements
init|=
operator|new
name|ArrayList
argument_list|<
name|Hierarchy
argument_list|>
argument_list|()
decl_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"dataimport-solrconfig.xml"
argument_list|,
literal|"dataimport-schema.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|before
specifier|public
name|void
name|before
parameter_list|()
block|{
name|req
operator|=
name|req
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// don't really care about query
name|MockDataSource
operator|.
name|clearCache
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|after
specifier|public
name|void
name|after
parameter_list|()
block|{
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
name|MockDataSource
operator|.
name|clearCache
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThreeLevelHierarchy
specifier|public
name|void
name|testThreeLevelHierarchy
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|parentsNum
init|=
literal|3
decl_stmt|;
comment|//fixed for simplicity of test
name|int
name|childrenNum
init|=
literal|0
decl_stmt|;
name|int
name|grandChildrenNum
init|=
literal|0
decl_stmt|;
specifier|final
name|String
name|parentType
init|=
literal|"parent"
decl_stmt|;
specifier|final
name|String
name|childType
init|=
literal|"child"
decl_stmt|;
specifier|final
name|String
name|grandChildType
init|=
literal|"grand_child"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parentIds
init|=
name|createDataIterator
argument_list|(
literal|"select * from PARENT"
argument_list|,
name|parentType
argument_list|,
name|parentType
argument_list|,
name|parentsNum
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|parentIds
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|parentId1
init|=
name|parentIds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|parentId2
init|=
name|parentIds
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|//parent 1 children
name|int
name|firstParentChildrenNum
init|=
literal|3
decl_stmt|;
comment|//fixed for simplicity of test
name|String
name|select
init|=
literal|"select * from CHILD where parent_id='"
operator|+
name|parentId1
operator|+
literal|"'"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|childrenIds
init|=
name|createDataIterator
argument_list|(
name|select
argument_list|,
name|childType
argument_list|,
literal|"child of first parent"
argument_list|,
name|firstParentChildrenNum
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|firstParentChildrenIds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|childrenIds
argument_list|)
decl_stmt|;
name|childrenNum
operator|+=
name|childrenIds
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// grand children of first parent first child
name|String
name|childId
init|=
name|childrenIds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|description
init|=
literal|"grandchild of first parent, child of "
operator|+
name|childId
operator|+
literal|" child"
decl_stmt|;
name|select
operator|=
literal|"select * from GRANDCHILD where parent_id='"
operator|+
name|childId
operator|+
literal|"'"
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|grandChildrenIds
init|=
name|createDataIterator
argument_list|(
name|select
argument_list|,
name|grandChildType
argument_list|,
name|description
argument_list|,
name|atLeast
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|grandChildrenNum
operator|+=
name|grandChildrenIds
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// grand children of first parent second child
name|childId
operator|=
name|childrenIds
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|description
operator|=
literal|"grandchild of first parent, child of "
operator|+
name|childId
operator|+
literal|" child"
expr_stmt|;
name|select
operator|=
literal|"select * from GRANDCHILD where parent_id='"
operator|+
name|childId
operator|+
literal|"'"
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|grandChildrenIds2
init|=
name|createDataIterator
argument_list|(
name|select
argument_list|,
name|grandChildType
argument_list|,
name|description
argument_list|,
name|atLeast
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|grandChildrenNum
operator|+=
name|grandChildrenIds2
operator|.
name|size
argument_list|()
expr_stmt|;
name|grandChildrenIds
operator|.
name|addAll
argument_list|(
name|grandChildrenIds2
argument_list|)
expr_stmt|;
comment|// third children of first parent has no grand children
comment|// parent 2 children (no grand children)
name|select
operator|=
literal|"select * from CHILD where parent_id='"
operator|+
name|parentId2
operator|+
literal|"'"
expr_stmt|;
name|childrenIds
operator|=
name|createDataIterator
argument_list|(
name|select
argument_list|,
name|childType
argument_list|,
literal|"child of second parent"
argument_list|,
name|atLeast
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|childrenNum
operator|+=
name|childrenIds
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// parent 3 has no children and grand children
name|int
name|totalDocsNum
init|=
name|parentsNum
operator|+
name|childrenNum
operator|+
name|grandChildrenNum
decl_stmt|;
name|runFullImport
argument_list|(
name|threeLevelHierarchyConfig
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Update request processor processAdd was not called"
argument_list|,
name|TestUpdateRequestProcessor
operator|.
name|processAddCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Update request processor processCommit was not callled"
argument_list|,
name|TestUpdateRequestProcessor
operator|.
name|processCommitCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Update request processor finish was not called"
argument_list|,
name|TestUpdateRequestProcessor
operator|.
name|finishCalled
argument_list|)
expr_stmt|;
comment|// very simple asserts to check that we at least have correct num of docs indexed
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"*:*"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
name|totalDocsNum
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"type_s:parent"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
name|parentsNum
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"type_s:child"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
name|childrenNum
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"type_s:grand_child"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
name|grandChildrenNum
operator|+
literal|"']"
argument_list|)
expr_stmt|;
comment|// let's check BlockJoin
comment|// get first parent by any grand children
name|String
name|randomGrandChildId
init|=
name|grandChildrenIds
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|grandChildrenIds
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|createToParentQuery
argument_list|(
name|parentType
argument_list|,
name|FIELD_ID
argument_list|,
name|randomGrandChildId
argument_list|)
decl_stmt|;
name|assertSearch
argument_list|(
name|query
argument_list|,
name|FIELD_ID
argument_list|,
name|parentId1
argument_list|)
expr_stmt|;
comment|// get first parent by any children
name|String
name|randomChildId
init|=
name|firstParentChildrenIds
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|firstParentChildrenIds
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|query
operator|=
name|createToParentQuery
argument_list|(
name|parentType
argument_list|,
name|FIELD_ID
argument_list|,
name|randomChildId
argument_list|)
expr_stmt|;
name|assertSearch
argument_list|(
name|query
argument_list|,
name|FIELD_ID
argument_list|,
name|parentId1
argument_list|)
expr_stmt|;
comment|// get parent by children by grand children
name|randomGrandChildId
operator|=
name|grandChildrenIds
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|grandChildrenIds
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ToParentBlockJoinQuery
name|childBlockJoinQuery
init|=
name|createToParentQuery
argument_list|(
name|childType
argument_list|,
name|FIELD_ID
argument_list|,
name|randomGrandChildId
argument_list|)
decl_stmt|;
name|ToParentBlockJoinQuery
name|blockJoinQuery
init|=
operator|new
name|ToParentBlockJoinQuery
argument_list|(
name|childBlockJoinQuery
argument_list|,
name|createParentFilter
argument_list|(
name|parentType
argument_list|)
argument_list|,
name|ScoreMode
operator|.
name|Avg
argument_list|)
decl_stmt|;
name|assertSearch
argument_list|(
name|blockJoinQuery
argument_list|,
name|FIELD_ID
argument_list|,
name|parentId1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRandomDepthHierarchy
specifier|public
name|void
name|testRandomDepthHierarchy
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|parentType
init|=
literal|"parent"
decl_stmt|;
name|int
name|parentsNum
init|=
name|atLeast
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|int
name|depth
init|=
name|atLeast
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|ContextHolder
name|holder
init|=
operator|new
name|ContextHolder
argument_list|()
decl_stmt|;
name|String
name|config
init|=
name|createRandomizedConfig
argument_list|(
name|depth
argument_list|,
name|parentType
argument_list|,
name|parentsNum
argument_list|,
name|holder
argument_list|)
decl_stmt|;
name|runFullImport
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Update request processor processAdd was not called"
argument_list|,
name|TestUpdateRequestProcessor
operator|.
name|processAddCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Update request processor processCommit was not callled"
argument_list|,
name|TestUpdateRequestProcessor
operator|.
name|processCommitCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Update request processor finish was not called"
argument_list|,
name|TestUpdateRequestProcessor
operator|.
name|finishCalled
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"type_s:"
operator|+
name|parentType
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
name|parentsNum
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"-type_s:"
operator|+
name|parentType
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
operator|(
name|holder
operator|.
name|counter
operator|-
name|parentsNum
operator|)
operator|+
literal|"']"
argument_list|)
expr_stmt|;
comment|// let's check BlockJoin
name|Hierarchy
name|randomHierarchy
init|=
name|holder
operator|.
name|hierarchies
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|holder
operator|.
name|hierarchies
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Query
name|deepestQuery
init|=
name|createBlockJoinQuery
argument_list|(
name|randomHierarchy
argument_list|)
decl_stmt|;
name|assertSearch
argument_list|(
name|deepestQuery
argument_list|,
name|FIELD_ID
argument_list|,
operator|(
name|String
operator|)
name|randomHierarchy
operator|.
name|elementData
operator|.
name|get
argument_list|(
name|FIELD_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createBlockJoinQuery
specifier|private
name|Query
name|createBlockJoinQuery
parameter_list|(
name|Hierarchy
name|hierarchy
parameter_list|)
block|{
name|List
argument_list|<
name|Hierarchy
argument_list|>
name|elements
init|=
name|hierarchy
operator|.
name|elements
decl_stmt|;
if|if
condition|(
name|elements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|BooleanQuery
name|childQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|childQuery
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_ID
argument_list|,
operator|(
name|String
operator|)
name|hierarchy
operator|.
name|elementData
operator|.
name|get
argument_list|(
name|FIELD_ID
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
return|return
name|childQuery
return|;
block|}
name|Query
name|childQuery
init|=
name|createBlockJoinQuery
argument_list|(
name|elements
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|elements
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|createToParentQuery
argument_list|(
name|hierarchy
operator|.
name|elementType
argument_list|,
name|childQuery
argument_list|)
return|;
block|}
DECL|method|createToParentQuery
specifier|private
name|ToParentBlockJoinQuery
name|createToParentQuery
parameter_list|(
name|String
name|parentType
parameter_list|,
name|String
name|childField
parameter_list|,
name|String
name|childFieldValue
parameter_list|)
block|{
name|BooleanQuery
name|childQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|childQuery
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|childField
argument_list|,
name|childFieldValue
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|ToParentBlockJoinQuery
name|result
init|=
name|createToParentQuery
argument_list|(
name|parentType
argument_list|,
name|childQuery
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
DECL|method|createToParentQuery
specifier|private
name|ToParentBlockJoinQuery
name|createToParentQuery
parameter_list|(
name|String
name|parentType
parameter_list|,
name|Query
name|childQuery
parameter_list|)
block|{
name|ToParentBlockJoinQuery
name|blockJoinQuery
init|=
operator|new
name|ToParentBlockJoinQuery
argument_list|(
name|childQuery
argument_list|,
name|createParentFilter
argument_list|(
name|parentType
argument_list|)
argument_list|,
name|ScoreMode
operator|.
name|Avg
argument_list|)
decl_stmt|;
return|return
name|blockJoinQuery
return|;
block|}
DECL|method|assertSearch
specifier|private
name|void
name|assertSearch
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
name|field
parameter_list|,
name|String
modifier|...
name|values
parameter_list|)
throws|throws
name|IOException
block|{
comment|/* The limit of search queue is doubled to catch the error in case when for some reason there are more docs than expected  */
name|SolrIndexSearcher
name|searcher
init|=
name|req
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
name|TopDocs
name|result
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|values
operator|.
name|length
operator|*
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|length
argument_list|,
name|result
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actualValues
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|index
control|)
block|{
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|result
operator|.
name|scoreDocs
index|[
name|index
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|actualValues
operator|.
name|add
argument_list|(
name|doc
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|expectedValue
range|:
name|values
control|)
block|{
name|boolean
name|removed
init|=
name|actualValues
operator|.
name|remove
argument_list|(
name|expectedValue
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|removed
condition|)
block|{
name|fail
argument_list|(
literal|"Search result does not contain expected values"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createDataIterator
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|createDataIterator
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|description
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|data
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
operator|++
name|index
control|)
block|{
name|String
name|docId
init|=
name|nextId
argument_list|()
decl_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|doc
init|=
name|createMap
argument_list|(
name|FIELD_ID
argument_list|,
name|docId
argument_list|,
literal|"desc"
argument_list|,
name|docId
operator|+
literal|" "
operator|+
name|description
argument_list|,
literal|"type_s"
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|data
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|data
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|MockDataSource
operator|.
name|setIterator
argument_list|(
name|query
argument_list|,
name|data
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ids
return|;
block|}
comment|/** Internally configures MockDataSource **/
DECL|method|createRandomizedConfig
specifier|private
name|String
name|createRandomizedConfig
parameter_list|(
name|int
name|depth
parameter_list|,
name|String
name|parentType
parameter_list|,
name|int
name|parentsNum
parameter_list|,
name|ContextHolder
name|holder
parameter_list|)
block|{
name|List
argument_list|<
name|Hierarchy
argument_list|>
name|parentData
init|=
name|createMockedIterator
argument_list|(
name|parentType
argument_list|,
literal|"SELECT * FROM "
operator|+
name|parentType
argument_list|,
name|parentsNum
argument_list|,
name|holder
argument_list|)
decl_stmt|;
comment|// each map represents parent and each parent is root of separate hierarchy
name|holder
operator|.
name|hierarchies
operator|=
name|parentData
expr_stmt|;
name|String
name|children
init|=
name|createChildren
argument_list|(
name|parentType
argument_list|,
literal|0
argument_list|,
name|depth
argument_list|,
name|parentData
argument_list|,
name|holder
argument_list|)
decl_stmt|;
name|String
name|rootFields
init|=
name|createFieldsList
argument_list|(
name|FIELD_ID
argument_list|,
literal|"desc"
argument_list|,
literal|"type_s"
argument_list|)
decl_stmt|;
name|String
name|rootEntity
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|rootEntityTemplate
argument_list|,
name|parentType
argument_list|,
literal|"SELECT * FROM "
operator|+
name|parentType
argument_list|,
name|rootFields
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|String
name|config
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|dataConfigTemplate
argument_list|,
name|rootEntity
argument_list|)
decl_stmt|;
return|return
name|config
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createMockedIterator
specifier|private
name|List
argument_list|<
name|Hierarchy
argument_list|>
name|createMockedIterator
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|query
parameter_list|,
name|int
name|amount
parameter_list|,
name|ContextHolder
name|holder
parameter_list|)
block|{
name|List
argument_list|<
name|Hierarchy
argument_list|>
name|hierarchies
init|=
operator|new
name|ArrayList
argument_list|<
name|Hierarchy
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|data
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|amount
condition|;
operator|++
name|index
control|)
block|{
name|holder
operator|.
name|counter
operator|++
expr_stmt|;
name|String
name|idStr
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|holder
operator|.
name|counter
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|element
init|=
name|createMap
argument_list|(
name|FIELD_ID
argument_list|,
name|idStr
argument_list|,
literal|"desc"
argument_list|,
name|type
operator|+
literal|"_"
operator|+
name|holder
operator|.
name|counter
argument_list|,
literal|"type_s"
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|data
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|Hierarchy
name|hierarchy
init|=
operator|new
name|Hierarchy
argument_list|()
decl_stmt|;
name|hierarchy
operator|.
name|elementType
operator|=
name|type
expr_stmt|;
name|hierarchy
operator|.
name|elementData
operator|=
name|element
expr_stmt|;
name|hierarchies
operator|.
name|add
argument_list|(
name|hierarchy
argument_list|)
expr_stmt|;
block|}
name|MockDataSource
operator|.
name|setIterator
argument_list|(
name|query
argument_list|,
name|data
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|hierarchies
return|;
block|}
DECL|method|createMockedIterator
specifier|private
name|List
argument_list|<
name|Hierarchy
argument_list|>
name|createMockedIterator
parameter_list|(
name|String
name|type
parameter_list|,
name|List
argument_list|<
name|Hierarchy
argument_list|>
name|parentData
parameter_list|,
name|ContextHolder
name|holder
parameter_list|)
block|{
name|List
argument_list|<
name|Hierarchy
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Hierarchy
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Hierarchy
name|parentHierarchy
range|:
name|parentData
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|data
init|=
name|parentHierarchy
operator|.
name|elementData
decl_stmt|;
name|String
name|id
init|=
operator|(
name|String
operator|)
name|data
operator|.
name|get
argument_list|(
name|FIELD_ID
argument_list|)
decl_stmt|;
name|String
name|select
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"select * from %s where %s='%s'"
argument_list|,
name|type
argument_list|,
name|type
operator|+
literal|"_parent_id"
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Hierarchy
argument_list|>
name|childHierarchies
init|=
name|createMockedIterator
argument_list|(
name|type
argument_list|,
name|select
argument_list|,
name|atLeast
argument_list|(
literal|5
argument_list|)
argument_list|,
name|holder
argument_list|)
decl_stmt|;
name|parentHierarchy
operator|.
name|elements
operator|.
name|addAll
argument_list|(
name|childHierarchies
argument_list|)
expr_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|childHierarchies
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|createChildren
specifier|private
name|String
name|createChildren
parameter_list|(
name|String
name|parentName
parameter_list|,
name|int
name|currentLevel
parameter_list|,
name|int
name|maxLevel
parameter_list|,
name|List
argument_list|<
name|Hierarchy
argument_list|>
name|parentData
parameter_list|,
name|ContextHolder
name|holder
parameter_list|)
block|{
if|if
condition|(
name|currentLevel
operator|==
name|maxLevel
condition|)
block|{
comment|//recursion base
return|return
literal|""
return|;
block|}
name|int
name|childrenNumber
init|=
name|atLeast
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|childIndex
init|=
literal|0
init|;
name|childIndex
operator|<
name|childrenNumber
condition|;
operator|++
name|childIndex
control|)
block|{
name|String
name|childName
init|=
name|parentName
operator|+
literal|"Child"
operator|+
name|childIndex
decl_stmt|;
name|String
name|fields
init|=
name|createFieldsList
argument_list|(
name|FIELD_ID
argument_list|,
literal|"desc"
argument_list|,
literal|"type_s"
argument_list|)
decl_stmt|;
name|String
name|select
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"select * from %s where %s='%s'"
argument_list|,
name|childName
argument_list|,
name|childName
operator|+
literal|"_parent_id"
argument_list|,
literal|"${"
operator|+
name|parentName
operator|+
literal|".id}"
argument_list|)
decl_stmt|;
comment|//for each child entity create several iterators
name|List
argument_list|<
name|Hierarchy
argument_list|>
name|childData
init|=
name|createMockedIterator
argument_list|(
name|childName
argument_list|,
name|parentData
argument_list|,
name|holder
argument_list|)
decl_stmt|;
name|String
name|subChildren
init|=
name|createChildren
argument_list|(
name|childName
argument_list|,
name|currentLevel
operator|+
literal|1
argument_list|,
name|maxLevel
argument_list|,
name|childData
argument_list|,
name|holder
argument_list|)
decl_stmt|;
name|String
name|child
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|childEntityTemplate
argument_list|,
name|childName
argument_list|,
name|select
argument_list|,
name|fields
argument_list|,
name|subChildren
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|createFieldsList
specifier|private
name|String
name|createFieldsList
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|String
name|text
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"<field column='%s' />"
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|field|threeLevelHierarchyConfig
specifier|private
specifier|final
name|String
name|threeLevelHierarchyConfig
init|=
literal|"<dataConfig>\n"
operator|+
literal|"<dataSource type='MockDataSource' />\n"
operator|+
literal|"<document>\n"
operator|+
literal|"<entity name='PARENT' query='select * from PARENT'>\n"
operator|+
literal|"<field column='id' />\n"
operator|+
literal|"<field column='desc' />\n"
operator|+
literal|"<field column='type_s' />\n"
operator|+
literal|"<entity child='true' name='CHILD' query=\"select * from CHILD where parent_id='${PARENT.id}'\">\n"
operator|+
literal|"<field column='id' />\n"
operator|+
literal|"<field column='desc' />\n"
operator|+
literal|"<field column='type_s' />\n"
operator|+
literal|"<entity child='true' name='GRANDCHILD' query=\"select * from GRANDCHILD where parent_id='${CHILD.id}'\">\n"
operator|+
literal|"<field column='id' />\n"
operator|+
literal|"<field column='desc' />\n"
operator|+
literal|"<field column='type_s' />\n"
operator|+
literal|"</entity>\n"
operator|+
literal|"</entity>\n"
operator|+
literal|"</entity>\n"
operator|+
literal|"</document>\n"
operator|+
literal|"</dataConfig>"
decl_stmt|;
comment|/** {0} is rootEntity block **/
DECL|field|dataConfigTemplate
specifier|private
specifier|final
name|String
name|dataConfigTemplate
init|=
literal|"<dataConfig><dataSource type=\"MockDataSource\" />\n<document>\n {0}</document></dataConfig>"
decl_stmt|;
comment|/**     * {0} - entityName,     * {1} - select query    * {2} - fieldsList    * {3} - childEntitiesList     **/
DECL|field|rootEntityTemplate
specifier|private
specifier|final
name|String
name|rootEntityTemplate
init|=
literal|"<entity name=\"{0}\" query=\"{1}\">\n{2} {3}\n</entity>\n"
decl_stmt|;
comment|/**     * {0} - entityName,     * {1} - select query    * {2} - fieldsList    * {3} - childEntitiesList     **/
DECL|field|childEntityTemplate
specifier|private
specifier|final
name|String
name|childEntityTemplate
init|=
literal|"<entity "
operator|+
name|ConfigNameConstants
operator|.
name|CHILD
operator|+
literal|"=\"true\" name=\"{0}\" query=\"{1}\">\n {2} {3}</entity>\n"
decl_stmt|;
DECL|method|createParentFilter
specifier|private
name|BitDocIdSetFilter
name|createParentFilter
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|BooleanQuery
name|parentQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|parentQuery
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"type_s"
argument_list|,
name|type
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
return|return
operator|new
name|BitDocIdSetCachingWrapperFilter
argument_list|(
operator|new
name|QueryWrapperFilter
argument_list|(
name|parentQuery
argument_list|)
argument_list|)
return|;
block|}
DECL|method|nextId
specifier|private
name|String
name|nextId
parameter_list|()
block|{
operator|++
name|id
expr_stmt|;
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
end_class
end_unit
