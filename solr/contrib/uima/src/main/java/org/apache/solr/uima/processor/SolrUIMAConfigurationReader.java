begin_unit
begin_package
DECL|package|org.apache.solr.uima.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|uima
operator|.
name|processor
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import
begin_comment
comment|/**  * Read configuration for Solr-UIMA integration  *   * @version $Id$  *   */
end_comment
begin_class
DECL|class|SolrUIMAConfigurationReader
specifier|public
class|class
name|SolrUIMAConfigurationReader
block|{
DECL|field|AE_RUNTIME_PARAMETERS_NODE_PATH
specifier|private
specifier|static
specifier|final
name|String
name|AE_RUNTIME_PARAMETERS_NODE_PATH
init|=
literal|"/config/uimaConfig/runtimeParameters"
decl_stmt|;
DECL|field|FIELD_MAPPING_NODE_PATH
specifier|private
specifier|static
specifier|final
name|String
name|FIELD_MAPPING_NODE_PATH
init|=
literal|"/config/uimaConfig/fieldMapping"
decl_stmt|;
DECL|field|ANALYZE_FIELDS_NODE_PATH
specifier|private
specifier|static
specifier|final
name|String
name|ANALYZE_FIELDS_NODE_PATH
init|=
literal|"/config/uimaConfig/analyzeFields"
decl_stmt|;
DECL|field|ANALYSIS_ENGINE_NODE_PATH
specifier|private
specifier|static
specifier|final
name|String
name|ANALYSIS_ENGINE_NODE_PATH
init|=
literal|"/config/uimaConfig/analysisEngine"
decl_stmt|;
DECL|field|solrConfig
specifier|private
name|SolrConfig
name|solrConfig
decl_stmt|;
DECL|method|SolrUIMAConfigurationReader
specifier|public
name|SolrUIMAConfigurationReader
parameter_list|(
name|SolrConfig
name|solrConfig
parameter_list|)
block|{
name|this
operator|.
name|solrConfig
operator|=
name|solrConfig
expr_stmt|;
block|}
DECL|method|readSolrUIMAConfiguration
specifier|public
name|SolrUIMAConfiguration
name|readSolrUIMAConfiguration
parameter_list|()
block|{
return|return
operator|new
name|SolrUIMAConfiguration
argument_list|(
name|readAEPath
argument_list|()
argument_list|,
name|readFieldsToAnalyze
argument_list|()
argument_list|,
name|readFieldsMerging
argument_list|()
argument_list|,
name|readTypesFeaturesFieldsMapping
argument_list|()
argument_list|,
name|readAEOverridingParameters
argument_list|()
argument_list|)
return|;
block|}
DECL|method|readAEPath
specifier|private
name|String
name|readAEPath
parameter_list|()
block|{
return|return
name|solrConfig
operator|.
name|getNode
argument_list|(
name|ANALYSIS_ENGINE_NODE_PATH
argument_list|,
literal|true
argument_list|)
operator|.
name|getTextContent
argument_list|()
return|;
block|}
DECL|method|readFieldsToAnalyze
specifier|private
name|String
index|[]
name|readFieldsToAnalyze
parameter_list|()
block|{
name|Node
name|analyzeFieldsNode
init|=
name|solrConfig
operator|.
name|getNode
argument_list|(
name|ANALYZE_FIELDS_NODE_PATH
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|analyzeFieldsNode
operator|.
name|getTextContent
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
return|;
block|}
DECL|method|readFieldsMerging
specifier|private
name|boolean
name|readFieldsMerging
parameter_list|()
block|{
name|Node
name|analyzeFieldsNode
init|=
name|solrConfig
operator|.
name|getNode
argument_list|(
name|ANALYZE_FIELDS_NODE_PATH
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Node
name|mergeNode
init|=
name|analyzeFieldsNode
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"merge"
argument_list|)
decl_stmt|;
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|mergeNode
operator|.
name|getNodeValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|readTypesFeaturesFieldsMapping
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|readTypesFeaturesFieldsMapping
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Node
name|fieldMappingNode
init|=
name|solrConfig
operator|.
name|getNode
argument_list|(
name|FIELD_MAPPING_NODE_PATH
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|/* iterate over UIMA types */
if|if
condition|(
name|fieldMappingNode
operator|.
name|hasChildNodes
argument_list|()
condition|)
block|{
name|NodeList
name|typeNodes
init|=
name|fieldMappingNode
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typeNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|/*<type> node */
name|Node
name|typeNode
init|=
name|typeNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeNode
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|TEXT_NODE
condition|)
block|{
name|Node
name|typeNameAttribute
init|=
name|typeNode
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
comment|/* get a UIMA typename */
name|String
name|typeName
init|=
name|typeNameAttribute
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
comment|/* create entry for UIMA type */
name|map
operator|.
name|put
argument_list|(
name|typeName
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|typeNode
operator|.
name|hasChildNodes
argument_list|()
condition|)
block|{
comment|/* iterate over features */
name|NodeList
name|featuresNodeList
init|=
name|typeNode
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|featuresNodeList
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Node
name|mappingNode
init|=
name|featuresNodeList
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappingNode
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|TEXT_NODE
condition|)
block|{
comment|/* get field name */
name|Node
name|fieldNameNode
init|=
name|mappingNode
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|String
name|mappedFieldName
init|=
name|fieldNameNode
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
comment|/* get feature name */
name|Node
name|featureNameNode
init|=
name|mappingNode
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"feature"
argument_list|)
decl_stmt|;
name|String
name|featureName
init|=
name|featureNameNode
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
comment|/* map the feature to the field for the specified type */
name|map
operator|.
name|get
argument_list|(
name|typeName
argument_list|)
operator|.
name|put
argument_list|(
name|featureName
argument_list|,
name|mappedFieldName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|map
return|;
block|}
DECL|method|readAEOverridingParameters
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|readAEOverridingParameters
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|runtimeParameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Node
name|uimaConfigNode
init|=
name|solrConfig
operator|.
name|getNode
argument_list|(
name|AE_RUNTIME_PARAMETERS_NODE_PATH
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|uimaConfigNode
operator|.
name|hasChildNodes
argument_list|()
condition|)
block|{
name|NodeList
name|overridingNodes
init|=
name|uimaConfigNode
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|overridingNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|overridingNode
init|=
name|overridingNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|overridingNode
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|TEXT_NODE
condition|)
block|{
name|runtimeParameters
operator|.
name|put
argument_list|(
name|overridingNode
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|overridingNode
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|runtimeParameters
return|;
block|}
block|}
end_class
end_unit
