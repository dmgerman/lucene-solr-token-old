begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analytics.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|request
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|util
operator|.
name|AnalyticsParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_comment
comment|/**  * Contains all of the specifications for a field facet.  */
end_comment
begin_class
DECL|class|FieldFacetRequest
specifier|public
class|class
name|FieldFacetRequest
extends|extends
name|AbstractFieldFacetRequest
block|{
DECL|field|sort
specifier|private
name|FacetSortSpecification
name|sort
init|=
literal|null
decl_stmt|;
DECL|field|dir
specifier|private
name|FacetSortDirection
name|dir
init|=
literal|null
decl_stmt|;
DECL|field|limit
specifier|private
name|int
name|limit
decl_stmt|;
DECL|field|offset
specifier|private
name|int
name|offset
decl_stmt|;
DECL|field|missing
specifier|private
name|boolean
name|missing
decl_stmt|;
DECL|field|hidden
specifier|private
name|boolean
name|hidden
decl_stmt|;
DECL|enum|FacetSortDirection
specifier|public
specifier|static
enum|enum
name|FacetSortDirection
block|{
DECL|enum constant|ASCENDING
name|ASCENDING
block|,
DECL|enum constant|DESCENDING
name|DESCENDING
block|;
DECL|method|fromExternal
specifier|public
specifier|static
name|FacetSortDirection
name|fromExternal
parameter_list|(
name|String
name|value
parameter_list|)
block|{
specifier|final
name|String
name|sort
init|=
name|value
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"asc"
operator|.
name|equals
argument_list|(
name|sort
argument_list|)
condition|)
return|return
name|ASCENDING
return|;
if|if
condition|(
literal|"ascending"
operator|.
name|equals
argument_list|(
name|sort
argument_list|)
condition|)
return|return
name|ASCENDING
return|;
if|if
condition|(
literal|"desc"
operator|.
name|equals
argument_list|(
name|sort
argument_list|)
condition|)
return|return
name|DESCENDING
return|;
if|if
condition|(
literal|"descending"
operator|.
name|equals
argument_list|(
name|sort
argument_list|)
condition|)
return|return
name|DESCENDING
return|;
return|return
name|Enum
operator|.
name|valueOf
argument_list|(
name|FacetSortDirection
operator|.
name|class
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
comment|/**    * Specifies how to sort the buckets of a field facet.    *     */
DECL|class|FacetSortSpecification
specifier|public
specifier|static
class|class
name|FacetSortSpecification
block|{
DECL|field|statistic
specifier|private
name|String
name|statistic
decl_stmt|;
DECL|field|direction
specifier|private
name|FacetSortDirection
name|direction
init|=
name|FacetSortDirection
operator|.
name|DESCENDING
decl_stmt|;
DECL|method|FacetSortSpecification
specifier|public
name|FacetSortSpecification
parameter_list|()
block|{}
comment|/**      * @param statistic The name of a statistic specified in the {@link AnalyticsRequest}      * which is wrapping the {@link FieldFacetRequest} being sorted.      */
DECL|method|FacetSortSpecification
specifier|public
name|FacetSortSpecification
parameter_list|(
name|String
name|statistic
parameter_list|)
block|{
name|this
operator|.
name|statistic
operator|=
name|statistic
expr_stmt|;
block|}
DECL|method|FacetSortSpecification
specifier|public
name|FacetSortSpecification
parameter_list|(
name|String
name|statistic
parameter_list|,
name|FacetSortDirection
name|direction
parameter_list|)
block|{
name|this
argument_list|(
name|statistic
argument_list|)
expr_stmt|;
name|this
operator|.
name|direction
operator|=
name|direction
expr_stmt|;
block|}
DECL|method|getStatistic
specifier|public
name|String
name|getStatistic
parameter_list|()
block|{
return|return
name|statistic
return|;
block|}
DECL|method|setStatistic
specifier|public
name|void
name|setStatistic
parameter_list|(
name|String
name|statistic
parameter_list|)
block|{
name|this
operator|.
name|statistic
operator|=
name|statistic
expr_stmt|;
block|}
DECL|method|getDirection
specifier|public
name|FacetSortDirection
name|getDirection
parameter_list|()
block|{
return|return
name|direction
return|;
block|}
DECL|method|setDirection
specifier|public
name|void
name|setDirection
parameter_list|(
name|FacetSortDirection
name|direction
parameter_list|)
block|{
name|this
operator|.
name|direction
operator|=
name|direction
expr_stmt|;
block|}
DECL|method|fromExternal
specifier|public
specifier|static
name|FacetSortSpecification
name|fromExternal
parameter_list|(
name|String
name|spec
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|spec
operator|.
name|split
argument_list|(
literal|" "
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
operator|new
name|FacetSortSpecification
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|FacetSortSpecification
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|FacetSortDirection
operator|.
name|fromExternal
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"<SortSpec stat="
operator|+
name|statistic
operator|+
literal|" dir="
operator|+
name|direction
operator|+
literal|">"
return|;
block|}
block|}
DECL|method|FieldFacetRequest
specifier|public
name|FieldFacetRequest
parameter_list|(
name|SchemaField
name|field
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|AnalyticsParams
operator|.
name|DEFAULT_LIMIT
expr_stmt|;
name|this
operator|.
name|hidden
operator|=
name|AnalyticsParams
operator|.
name|DEFAULT_HIDDEN
expr_stmt|;
block|}
DECL|method|getDirection
specifier|public
name|FacetSortDirection
name|getDirection
parameter_list|()
block|{
return|return
name|dir
return|;
block|}
DECL|method|setDirection
specifier|public
name|void
name|setDirection
parameter_list|(
name|String
name|dir
parameter_list|)
block|{
name|this
operator|.
name|dir
operator|=
name|FacetSortDirection
operator|.
name|fromExternal
argument_list|(
name|dir
argument_list|)
expr_stmt|;
if|if
condition|(
name|sort
operator|!=
literal|null
condition|)
block|{
name|sort
operator|.
name|setDirection
argument_list|(
name|this
operator|.
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSort
specifier|public
name|FacetSortSpecification
name|getSort
parameter_list|()
block|{
return|return
name|sort
return|;
block|}
DECL|method|setSort
specifier|public
name|void
name|setSort
parameter_list|(
name|FacetSortSpecification
name|sort
parameter_list|)
block|{
name|this
operator|.
name|sort
operator|=
name|sort
expr_stmt|;
block|}
DECL|method|showsMissing
specifier|public
name|boolean
name|showsMissing
parameter_list|()
block|{
return|return
name|missing
return|;
block|}
comment|/**    * If there are missing values in the facet field, include the bucket     * for the missing facet values in the facet response.    * @param missing true/false if we calculate missing    */
DECL|method|showMissing
specifier|public
name|void
name|showMissing
parameter_list|(
name|boolean
name|missing
parameter_list|)
block|{
name|this
operator|.
name|missing
operator|=
name|missing
expr_stmt|;
block|}
DECL|method|getLimit
specifier|public
name|int
name|getLimit
parameter_list|()
block|{
return|return
name|limit
return|;
block|}
DECL|method|setLimit
specifier|public
name|void
name|setLimit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
block|}
DECL|method|getOffset
specifier|public
name|int
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
DECL|method|setOffset
specifier|public
name|void
name|setOffset
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
DECL|method|isHidden
specifier|public
name|boolean
name|isHidden
parameter_list|()
block|{
return|return
name|hidden
return|;
block|}
DECL|method|setHidden
specifier|public
name|void
name|setHidden
parameter_list|(
name|boolean
name|hidden
parameter_list|)
block|{
name|this
operator|.
name|hidden
operator|=
name|hidden
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"<FieldFacetRequest field="
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|sort
operator|==
literal|null
condition|?
literal|""
else|:
literal|" sort="
operator|+
name|sort
operator|)
operator|+
literal|" limit="
operator|+
name|limit
operator|+
literal|" offset="
operator|+
name|offset
operator|+
literal|">"
return|;
block|}
block|}
end_class
end_unit
