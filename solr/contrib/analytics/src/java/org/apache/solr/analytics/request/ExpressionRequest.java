begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analytics.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|request
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|expression
operator|.
name|Expression
import|;
end_import
begin_comment
comment|/**  * Contains name and string representation of an expression.  */
end_comment
begin_class
DECL|class|ExpressionRequest
specifier|public
class|class
name|ExpressionRequest
implements|implements
name|Comparable
argument_list|<
name|ExpressionRequest
argument_list|>
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|expressionString
specifier|private
name|String
name|expressionString
decl_stmt|;
DECL|field|expression
specifier|private
name|Expression
name|expression
decl_stmt|;
comment|/**    * @param name The name of the Expression.    * @param expressionString The string representation of the desired Expression.    */
DECL|method|ExpressionRequest
specifier|public
name|ExpressionRequest
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|expressionString
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|expressionString
operator|=
name|expressionString
expr_stmt|;
block|}
DECL|method|setExpressionString
specifier|public
name|void
name|setExpressionString
parameter_list|(
name|String
name|expressionString
parameter_list|)
block|{
name|this
operator|.
name|expressionString
operator|=
name|expressionString
expr_stmt|;
block|}
DECL|method|getExpressionString
specifier|public
name|String
name|getExpressionString
parameter_list|()
block|{
return|return
name|expressionString
return|;
block|}
DECL|method|setExpression
specifier|public
name|void
name|setExpression
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
DECL|method|getExpression
specifier|public
name|Expression
name|getExpression
parameter_list|()
block|{
return|return
name|expression
return|;
block|}
DECL|method|setName
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|ExpressionRequest
name|o
parameter_list|)
block|{
return|return
name|name
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"<ExpressionRequest name="
operator|+
name|name
operator|+
literal|" expression="
operator|+
name|expressionString
operator|+
literal|"/>"
return|;
block|}
block|}
end_class
end_unit
