begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analytics.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieDateField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieDoubleField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieFloatField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieIntField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieLongField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DateFormatUtil
import|;
end_import
begin_comment
comment|/**   * Class to hold the parsers used for Solr Analytics.  */
end_comment
begin_class
DECL|class|AnalyticsParsers
specifier|public
class|class
name|AnalyticsParsers
block|{
comment|/**    * Returns a parser that will translate a BytesRef or long from DocValues into     * a String that correctly represents the value.    * @param class1 class of the FieldType of the field being faceted on.    * @return A Parser    */
DECL|method|getParser
specifier|public
specifier|static
name|Parser
name|getParser
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|FieldType
argument_list|>
name|class1
parameter_list|)
block|{
if|if
condition|(
name|class1
operator|.
name|equals
argument_list|(
name|TrieIntField
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|AnalyticsParsers
operator|.
name|INT_DOC_VALUES_PARSER
return|;
block|}
elseif|else
if|if
condition|(
name|class1
operator|.
name|equals
argument_list|(
name|TrieLongField
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|AnalyticsParsers
operator|.
name|LONG_DOC_VALUES_PARSER
return|;
block|}
elseif|else
if|if
condition|(
name|class1
operator|.
name|equals
argument_list|(
name|TrieFloatField
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|AnalyticsParsers
operator|.
name|FLOAT_DOC_VALUES_PARSER
return|;
block|}
elseif|else
if|if
condition|(
name|class1
operator|.
name|equals
argument_list|(
name|TrieDoubleField
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|AnalyticsParsers
operator|.
name|DOUBLE_DOC_VALUES_PARSER
return|;
block|}
elseif|else
if|if
condition|(
name|class1
operator|.
name|equals
argument_list|(
name|TrieDateField
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|AnalyticsParsers
operator|.
name|DATE_DOC_VALUES_PARSER
return|;
block|}
else|else
block|{
return|return
name|AnalyticsParsers
operator|.
name|STRING_PARSER
return|;
block|}
block|}
comment|/**    * For use in classes that grab values by docValue.    * Converts a BytesRef object into the correct readable text.    */
DECL|interface|Parser
specifier|public
specifier|static
interface|interface
name|Parser
block|{
DECL|method|parse
name|String
name|parse
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Converts the long returned by NumericDocValues into the    * correct number and return it as a string.    */
DECL|interface|NumericParser
specifier|public
specifier|static
interface|interface
name|NumericParser
extends|extends
name|Parser
block|{
DECL|method|parseNum
name|String
name|parseNum
parameter_list|(
name|long
name|l
parameter_list|)
function_decl|;
block|}
comment|/**    * Converts the BytesRef or long to the correct int string.    */
DECL|field|INT_DOC_VALUES_PARSER
specifier|public
specifier|static
specifier|final
name|NumericParser
name|INT_DOC_VALUES_PARSER
init|=
operator|new
name|NumericParser
argument_list|()
block|{
specifier|public
name|String
name|parse
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
literal|""
operator|+
name|NumericUtils
operator|.
name|prefixCodedToInt
argument_list|(
name|bytes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The byte array "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|)
operator|+
literal|" cannot be converted to an int."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|parseNum
parameter_list|(
name|long
name|l
parameter_list|)
block|{
return|return
literal|""
operator|+
operator|(
name|int
operator|)
name|l
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Converts the BytesRef or long to the correct long string.    */
DECL|field|LONG_DOC_VALUES_PARSER
specifier|public
specifier|static
specifier|final
name|NumericParser
name|LONG_DOC_VALUES_PARSER
init|=
operator|new
name|NumericParser
argument_list|()
block|{
specifier|public
name|String
name|parse
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
literal|""
operator|+
name|NumericUtils
operator|.
name|prefixCodedToLong
argument_list|(
name|bytes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The byte array "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|)
operator|+
literal|" cannot be converted to a long."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|parseNum
parameter_list|(
name|long
name|l
parameter_list|)
block|{
return|return
literal|""
operator|+
name|l
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Converts the BytesRef or long to the correct float string.    */
DECL|field|FLOAT_DOC_VALUES_PARSER
specifier|public
specifier|static
specifier|final
name|NumericParser
name|FLOAT_DOC_VALUES_PARSER
init|=
operator|new
name|NumericParser
argument_list|()
block|{
specifier|public
name|String
name|parse
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
literal|""
operator|+
name|NumericUtils
operator|.
name|sortableIntToFloat
argument_list|(
name|NumericUtils
operator|.
name|prefixCodedToInt
argument_list|(
name|bytes
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The byte array "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|)
operator|+
literal|" cannot be converted to a float."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|parseNum
parameter_list|(
name|long
name|l
parameter_list|)
block|{
return|return
literal|""
operator|+
name|NumericUtils
operator|.
name|sortableIntToFloat
argument_list|(
operator|(
name|int
operator|)
name|l
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Converts the BytesRef or long to the correct double string.    */
DECL|field|DOUBLE_DOC_VALUES_PARSER
specifier|public
specifier|static
specifier|final
name|NumericParser
name|DOUBLE_DOC_VALUES_PARSER
init|=
operator|new
name|NumericParser
argument_list|()
block|{
specifier|public
name|String
name|parse
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
literal|""
operator|+
name|NumericUtils
operator|.
name|sortableLongToDouble
argument_list|(
name|NumericUtils
operator|.
name|prefixCodedToLong
argument_list|(
name|bytes
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The byte array "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|)
operator|+
literal|" cannot be converted to a double."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|parseNum
parameter_list|(
name|long
name|l
parameter_list|)
block|{
return|return
literal|""
operator|+
name|NumericUtils
operator|.
name|sortableLongToDouble
argument_list|(
name|l
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Converts the BytesRef or long to the correct date string.    */
DECL|field|DATE_DOC_VALUES_PARSER
specifier|public
specifier|static
specifier|final
name|NumericParser
name|DATE_DOC_VALUES_PARSER
init|=
operator|new
name|NumericParser
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
name|String
name|parse
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|DateFormatUtil
operator|.
name|formatExternal
argument_list|(
operator|new
name|Date
argument_list|(
name|NumericUtils
operator|.
name|prefixCodedToLong
argument_list|(
name|bytes
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The byte array "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|)
operator|+
literal|" cannot be converted to a date."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|public
name|String
name|parseNum
parameter_list|(
name|long
name|l
parameter_list|)
block|{
return|return
literal|""
operator|+
name|DateFormatUtil
operator|.
name|formatExternal
argument_list|(
operator|new
name|Date
argument_list|(
name|l
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Converts the BytesRef to the correct string.    */
DECL|field|STRING_PARSER
specifier|public
specifier|static
specifier|final
name|Parser
name|STRING_PARSER
init|=
operator|new
name|Parser
argument_list|()
block|{
specifier|public
name|String
name|parse
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
block|{
return|return
name|bytes
operator|.
name|utf8ToString
argument_list|()
return|;
block|}
block|}
decl_stmt|;
block|}
end_class
end_unit
