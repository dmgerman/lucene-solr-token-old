begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analytics.expression
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|expression
package|;
end_package
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DateMathParser
import|;
end_import
begin_comment
comment|/**  * Abstraction of an expression that applies a function to an array of delegate expressions.  */
end_comment
begin_class
DECL|class|MultiDelegateExpression
specifier|public
specifier|abstract
class|class
name|MultiDelegateExpression
extends|extends
name|Expression
block|{
DECL|field|delegates
specifier|protected
specifier|final
name|Expression
index|[]
name|delegates
decl_stmt|;
DECL|method|MultiDelegateExpression
specifier|public
name|MultiDelegateExpression
parameter_list|(
name|Expression
index|[]
name|delegates
parameter_list|)
block|{
name|this
operator|.
name|delegates
operator|=
name|delegates
expr_stmt|;
block|}
block|}
end_class
begin_comment
comment|/**  *<code>AddExpression</code> returns the sum of its components' values.  */
end_comment
begin_class
DECL|class|AddExpression
class|class
name|AddExpression
extends|extends
name|MultiDelegateExpression
block|{
DECL|method|AddExpression
specifier|public
name|AddExpression
parameter_list|(
name|Expression
index|[]
name|delegates
parameter_list|)
block|{
name|super
argument_list|(
name|delegates
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|Comparable
name|getValue
parameter_list|()
block|{
name|double
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Expression
name|delegate
range|:
name|delegates
control|)
block|{
name|Comparable
name|dComp
init|=
name|delegate
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|dComp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|dComp
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|Date
operator|.
name|class
argument_list|)
condition|)
block|{
name|dComp
operator|=
operator|new
name|Long
argument_list|(
operator|(
operator|(
name|Date
operator|)
name|dComp
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sum
operator|+=
operator|(
operator|(
name|Number
operator|)
name|dComp
operator|)
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|Double
argument_list|(
name|sum
argument_list|)
return|;
block|}
block|}
end_class
begin_comment
comment|/**  *<code>MultiplyExpression</code> returns the product of its delegates' values.  */
end_comment
begin_class
DECL|class|MultiplyExpression
class|class
name|MultiplyExpression
extends|extends
name|MultiDelegateExpression
block|{
DECL|method|MultiplyExpression
specifier|public
name|MultiplyExpression
parameter_list|(
name|Expression
index|[]
name|delegates
parameter_list|)
block|{
name|super
argument_list|(
name|delegates
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|Comparable
name|getValue
parameter_list|()
block|{
name|double
name|prod
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Expression
name|delegate
range|:
name|delegates
control|)
block|{
name|Comparable
name|dComp
init|=
name|delegate
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|dComp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|prod
operator|*=
operator|(
operator|(
name|Number
operator|)
name|dComp
operator|)
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|Double
argument_list|(
name|prod
argument_list|)
return|;
block|}
block|}
end_class
begin_comment
comment|/**  *<code>DateMathExpression</code> returns the start date modified by the DateMath operations  */
end_comment
begin_class
DECL|class|DateMathExpression
class|class
name|DateMathExpression
extends|extends
name|MultiDelegateExpression
block|{
comment|/**    * @param delegates A list of Expressions. The first element in the list    * should be a numeric Expression which represents the starting date.     * The rest of the field should be string Expression objects which contain    * the DateMath operations to perform on the start date.    */
DECL|method|DateMathExpression
specifier|public
name|DateMathExpression
parameter_list|(
name|Expression
index|[]
name|delegates
parameter_list|)
block|{
name|super
argument_list|(
name|delegates
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|Comparable
name|getValue
parameter_list|()
block|{
name|DateMathParser
name|parser
init|=
operator|new
name|DateMathParser
argument_list|()
decl_stmt|;
name|parser
operator|.
name|setNow
argument_list|(
operator|(
name|Date
operator|)
name|delegates
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|count
init|=
literal|1
init|;
name|count
operator|<
name|delegates
operator|.
name|length
condition|;
name|count
operator|++
control|)
block|{
name|Comparable
name|dComp
init|=
name|delegates
index|[
name|count
index|]
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|dComp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|parser
operator|.
name|setNow
argument_list|(
name|parser
operator|.
name|parseMath
argument_list|(
operator|(
name|String
operator|)
name|dComp
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|parser
operator|.
name|getNow
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
name|parser
operator|.
name|getNow
argument_list|()
return|;
block|}
block|}
block|}
end_class
begin_comment
comment|/**  *<code>ConcatenateExpression</code> returns the concatenation of its delegates' values in the order given.  */
end_comment
begin_class
DECL|class|ConcatenateExpression
class|class
name|ConcatenateExpression
extends|extends
name|MultiDelegateExpression
block|{
DECL|method|ConcatenateExpression
specifier|public
name|ConcatenateExpression
parameter_list|(
name|Expression
index|[]
name|delegates
parameter_list|)
block|{
name|super
argument_list|(
name|delegates
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|Comparable
name|getValue
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Expression
name|delegate
range|:
name|delegates
control|)
block|{
name|Comparable
name|dComp
init|=
name|delegate
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|dComp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|dComp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
end_unit
