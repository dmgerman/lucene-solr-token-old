begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analytics.accumulator.facet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|accumulator
operator|.
name|facet
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|accumulator
operator|.
name|ValueAccumulator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|statistics
operator|.
name|StatsCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_comment
comment|/**  * An Accumulator that manages a certain query of a given query facet.  */
end_comment
begin_class
DECL|class|QueryFacetAccumulator
specifier|public
class|class
name|QueryFacetAccumulator
extends|extends
name|ValueAccumulator
block|{
DECL|field|parent
specifier|protected
specifier|final
name|FacetValueAccumulator
name|parent
decl_stmt|;
DECL|field|facetName
specifier|protected
specifier|final
name|String
name|facetName
decl_stmt|;
DECL|field|facetValue
specifier|protected
specifier|final
name|String
name|facetValue
decl_stmt|;
DECL|method|QueryFacetAccumulator
specifier|public
name|QueryFacetAccumulator
parameter_list|(
name|FacetValueAccumulator
name|parent
parameter_list|,
name|String
name|facetName
parameter_list|,
name|String
name|facetValue
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|facetName
operator|=
name|facetName
expr_stmt|;
name|this
operator|.
name|facetValue
operator|=
name|facetValue
expr_stmt|;
block|}
comment|/**    * Tell the FacetingAccumulator to collect the doc with the     * given queryFacet and query.    */
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|parent
operator|.
name|collectQuery
argument_list|(
name|doc
argument_list|,
name|facetName
argument_list|,
name|facetValue
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update the readers of the queryFacet {@link StatsCollector}s in FacetingAccumulator    */
annotation|@
name|Override
DECL|method|doSetNextReader
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|parent
operator|.
name|setQueryStatsCollectorReaders
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compute
specifier|public
name|void
name|compute
parameter_list|()
block|{
comment|// NOP
block|}
annotation|@
name|Override
DECL|method|export
specifier|public
name|NamedList
argument_list|<
name|?
argument_list|>
name|export
parameter_list|()
block|{
comment|// NOP
return|return
literal|null
return|;
block|}
block|}
end_class
end_unit
