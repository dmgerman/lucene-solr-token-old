begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.morphlines.solr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|morphlines
operator|.
name|solr
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_class
DECL|class|FileUtils
class|class
name|FileUtils
block|{
comment|//-----------------------------------------------------------------------
comment|/**    * Deletes a directory recursively.     *    * @param directory  directory to delete    * @throws IOException in case deletion is unsuccessful    */
DECL|method|deleteDirectory
specifier|public
specifier|static
name|void
name|deleteDirectory
parameter_list|(
name|File
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|directory
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|isSymlink
argument_list|(
name|directory
argument_list|)
condition|)
block|{
name|cleanDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|directory
operator|.
name|delete
argument_list|()
condition|)
block|{
name|String
name|message
init|=
literal|"Unable to delete directory "
operator|+
name|directory
operator|+
literal|"."
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
comment|/**    * Determines whether the specified file is a Symbolic Link rather than an actual file.    *<p>    * Will not return true if there is a Symbolic Link anywhere in the path,    * only if the specific file is.    *    * @param file the file to check    * @return true if the file is a Symbolic Link    * @throws IOException if an IO error occurs while checking the file    * @since Commons IO 2.0    */
DECL|method|isSymlink
specifier|public
specifier|static
name|boolean
name|isSymlink
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"File must not be null"
argument_list|)
throw|;
block|}
comment|//      if (FilenameUtils.isSystemWindows()) {
if|if
condition|(
name|File
operator|.
name|separatorChar
operator|==
literal|'\\'
condition|)
block|{
return|return
literal|false
return|;
block|}
name|File
name|fileInCanonicalDir
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|)
block|{
name|fileInCanonicalDir
operator|=
name|file
expr_stmt|;
block|}
else|else
block|{
name|File
name|canonicalDir
init|=
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|getCanonicalFile
argument_list|()
decl_stmt|;
name|fileInCanonicalDir
operator|=
operator|new
name|File
argument_list|(
name|canonicalDir
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fileInCanonicalDir
operator|.
name|getCanonicalFile
argument_list|()
operator|.
name|equals
argument_list|(
name|fileInCanonicalDir
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Cleans a directory without deleting it.    *    * @param directory directory to clean    * @throws IOException in case cleaning is unsuccessful    */
DECL|method|cleanDirectory
specifier|public
specifier|static
name|void
name|cleanDirectory
parameter_list|(
name|File
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|directory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|message
init|=
name|directory
operator|+
literal|" does not exist"
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|directory
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|String
name|message
init|=
name|directory
operator|+
literal|" is not a directory"
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|File
index|[]
name|files
init|=
name|directory
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
comment|// null if security restricted
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to list contents of "
operator|+
name|directory
argument_list|)
throw|;
block|}
name|IOException
name|exception
init|=
literal|null
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
try|try
block|{
name|forceDelete
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|exception
operator|=
name|ioe
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|exception
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
block|}
comment|//-----------------------------------------------------------------------
comment|/**    * Deletes a file. If file is a directory, delete it and all sub-directories.    *<p>    * The difference between File.delete() and this method are:    *<ul>    *<li>A directory to be deleted does not have to be empty.</li>    *<li>You get exceptions when a file or directory cannot be deleted.    *      (java.io.File methods returns a boolean)</li>    *</ul>    *    * @param file  file or directory to delete, must not be<code>null</code>    * @throws NullPointerException if the directory is<code>null</code>    * @throws FileNotFoundException if the file was not found    * @throws IOException in case deletion is unsuccessful    */
DECL|method|forceDelete
specifier|public
specifier|static
name|void
name|forceDelete
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|deleteDirectory
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|filePresent
init|=
name|file
operator|.
name|exists
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|delete
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|filePresent
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File does not exist: "
operator|+
name|file
argument_list|)
throw|;
block|}
name|String
name|message
init|=
literal|"Unable to delete file: "
operator|+
name|file
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class
end_unit
