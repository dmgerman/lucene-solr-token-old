begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.morphlines.solr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|morphlines
operator|.
name|solr
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|com
operator|.
name|cloudera
operator|.
name|cdk
operator|.
name|morphline
operator|.
name|api
operator|.
name|Command
import|;
end_import
begin_import
import|import
name|com
operator|.
name|cloudera
operator|.
name|cdk
operator|.
name|morphline
operator|.
name|api
operator|.
name|CommandBuilder
import|;
end_import
begin_import
import|import
name|com
operator|.
name|cloudera
operator|.
name|cdk
operator|.
name|morphline
operator|.
name|api
operator|.
name|MorphlineCompilationException
import|;
end_import
begin_import
import|import
name|com
operator|.
name|cloudera
operator|.
name|cdk
operator|.
name|morphline
operator|.
name|api
operator|.
name|MorphlineContext
import|;
end_import
begin_import
import|import
name|com
operator|.
name|cloudera
operator|.
name|cdk
operator|.
name|morphline
operator|.
name|api
operator|.
name|MorphlineRuntimeException
import|;
end_import
begin_import
import|import
name|com
operator|.
name|cloudera
operator|.
name|cdk
operator|.
name|morphline
operator|.
name|api
operator|.
name|Record
import|;
end_import
begin_import
import|import
name|com
operator|.
name|cloudera
operator|.
name|cdk
operator|.
name|morphline
operator|.
name|base
operator|.
name|AbstractCommand
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import
begin_import
import|import
name|com
operator|.
name|typesafe
operator|.
name|config
operator|.
name|Config
import|;
end_import
begin_comment
comment|/**  * A command that uses the embedded Solr/Lucene Analyzer library to generate tokens from a text  * string, without sending data to a Solr server.  */
end_comment
begin_class
DECL|class|TokenizeTextBuilder
specifier|public
specifier|final
class|class
name|TokenizeTextBuilder
implements|implements
name|CommandBuilder
block|{
annotation|@
name|Override
DECL|method|getNames
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getNames
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"tokenizeText"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|build
specifier|public
name|Command
name|build
parameter_list|(
name|Config
name|config
parameter_list|,
name|Command
name|parent
parameter_list|,
name|Command
name|child
parameter_list|,
name|MorphlineContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|TokenizeText
argument_list|(
name|this
argument_list|,
name|config
argument_list|,
name|parent
argument_list|,
name|child
argument_list|,
name|context
argument_list|)
return|;
block|}
comment|///////////////////////////////////////////////////////////////////////////////
comment|// Nested classes:
comment|///////////////////////////////////////////////////////////////////////////////
DECL|class|TokenizeText
specifier|private
specifier|static
specifier|final
class|class
name|TokenizeText
extends|extends
name|AbstractCommand
block|{
DECL|field|inputFieldName
specifier|private
specifier|final
name|String
name|inputFieldName
decl_stmt|;
DECL|field|outputFieldName
specifier|private
specifier|final
name|String
name|outputFieldName
decl_stmt|;
DECL|field|analyzer
specifier|private
specifier|final
name|Analyzer
name|analyzer
decl_stmt|;
DECL|field|token
specifier|private
specifier|final
name|CharTermAttribute
name|token
decl_stmt|;
comment|// cached
DECL|field|reader
specifier|private
specifier|final
name|ReusableStringReader
name|reader
init|=
operator|new
name|ReusableStringReader
argument_list|()
decl_stmt|;
comment|// cached
DECL|method|TokenizeText
specifier|public
name|TokenizeText
parameter_list|(
name|CommandBuilder
name|builder
parameter_list|,
name|Config
name|config
parameter_list|,
name|Command
name|parent
parameter_list|,
name|Command
name|child
parameter_list|,
name|MorphlineContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|,
name|config
argument_list|,
name|parent
argument_list|,
name|child
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|inputFieldName
operator|=
name|getConfigs
argument_list|()
operator|.
name|getString
argument_list|(
name|config
argument_list|,
literal|"inputField"
argument_list|)
expr_stmt|;
name|this
operator|.
name|outputFieldName
operator|=
name|getConfigs
argument_list|()
operator|.
name|getString
argument_list|(
name|config
argument_list|,
literal|"outputField"
argument_list|)
expr_stmt|;
name|String
name|solrFieldType
init|=
name|getConfigs
argument_list|()
operator|.
name|getString
argument_list|(
name|config
argument_list|,
literal|"solrFieldType"
argument_list|)
decl_stmt|;
name|Config
name|solrLocatorConfig
init|=
name|getConfigs
argument_list|()
operator|.
name|getConfig
argument_list|(
name|config
argument_list|,
literal|"solrLocator"
argument_list|)
decl_stmt|;
name|SolrLocator
name|locator
init|=
operator|new
name|SolrLocator
argument_list|(
name|solrLocatorConfig
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"solrLocator: {}"
argument_list|,
name|locator
argument_list|)
expr_stmt|;
name|IndexSchema
name|schema
init|=
name|locator
operator|.
name|getIndexSchema
argument_list|()
decl_stmt|;
name|FieldType
name|fieldType
init|=
name|schema
operator|.
name|getFieldTypeByName
argument_list|(
name|solrFieldType
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MorphlineCompilationException
argument_list|(
literal|"Missing Solr field type in schema.xml for name: "
operator|+
name|solrFieldType
argument_list|,
name|config
argument_list|)
throw|;
block|}
name|this
operator|.
name|analyzer
operator|=
name|fieldType
operator|.
name|getAnalyzer
argument_list|()
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
try|try
block|{
comment|// register CharTermAttribute for later (implicit) reuse
name|this
operator|.
name|token
operator|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
literal|"content"
argument_list|,
name|reader
argument_list|)
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MorphlineCompilationException
argument_list|(
literal|"Cannot create token stream"
argument_list|,
name|config
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|validateArguments
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doProcess
specifier|protected
name|boolean
name|doProcess
parameter_list|(
name|Record
name|record
parameter_list|)
block|{
try|try
block|{
name|List
name|outputValues
init|=
name|record
operator|.
name|get
argument_list|(
name|outputFieldName
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|record
operator|.
name|get
argument_list|(
name|inputFieldName
argument_list|)
control|)
block|{
name|reader
operator|.
name|setValue
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|TokenStream
name|tokenStream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
literal|"content"
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|tokenStream
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|tokenStream
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
if|if
condition|(
name|token
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// incrementToken() updates the token!
name|String
name|tokenStr
init|=
operator|new
name|String
argument_list|(
name|token
operator|.
name|buffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|token
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|outputValues
operator|.
name|add
argument_list|(
name|tokenStr
argument_list|)
expr_stmt|;
block|}
block|}
name|tokenStream
operator|.
name|end
argument_list|()
expr_stmt|;
name|tokenStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MorphlineRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// pass record to next command in chain:
return|return
name|super
operator|.
name|doProcess
argument_list|(
name|record
argument_list|)
return|;
block|}
block|}
comment|// Copied from org.apache.lucene.document.Field.java from lucene-4.3.0
comment|/*    * Licensed to the Apache Software Foundation (ASF) under one or more    * contributor license agreements.  See the NOTICE file distributed with    * this work for additional information regarding copyright ownership.    * The ASF licenses this file to You under the Apache License, Version 2.0    * (the "License"); you may not use this file except in compliance with    * the License.  You may obtain a copy of the License at    *    *     http://www.apache.org/licenses/LICENSE-2.0    *    * Unless required by applicable law or agreed to in writing, software    * distributed under the License is distributed on an "AS IS" BASIS,    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    * See the License for the specific language governing permissions and    * limitations under the License.    */
DECL|class|ReusableStringReader
specifier|private
specifier|static
specifier|final
class|class
name|ReusableStringReader
extends|extends
name|Reader
block|{
DECL|field|pos
DECL|field|size
specifier|private
name|int
name|pos
init|=
literal|0
decl_stmt|,
name|size
init|=
literal|0
decl_stmt|;
DECL|field|s
specifier|private
name|String
name|s
init|=
literal|null
decl_stmt|;
DECL|method|setValue
name|void
name|setValue
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|this
operator|.
name|s
operator|=
name|s
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|s
operator|.
name|length
argument_list|()
expr_stmt|;
name|this
operator|.
name|pos
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|()
block|{
if|if
condition|(
name|pos
operator|<
name|size
condition|)
block|{
return|return
name|s
operator|.
name|charAt
argument_list|(
name|pos
operator|++
argument_list|)
return|;
block|}
else|else
block|{
name|s
operator|=
literal|null
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|(
name|char
index|[]
name|c
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|<
name|size
condition|)
block|{
name|len
operator|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|size
operator|-
name|pos
argument_list|)
expr_stmt|;
name|s
operator|.
name|getChars
argument_list|(
name|pos
argument_list|,
name|pos
operator|+
name|len
argument_list|,
name|c
argument_list|,
name|off
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|len
expr_stmt|;
return|return
name|len
return|;
block|}
else|else
block|{
name|s
operator|=
literal|null
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|pos
operator|=
name|size
expr_stmt|;
comment|// this prevents NPE when reading after close!
name|s
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
