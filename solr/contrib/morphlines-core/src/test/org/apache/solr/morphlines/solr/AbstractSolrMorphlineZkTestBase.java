begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.morphlines.solr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|morphlines
operator|.
name|solr
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import
begin_import
import|import
name|com
operator|.
name|typesafe
operator|.
name|config
operator|.
name|Config
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractDistribZkTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|SolrCloudTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|kitesdk
operator|.
name|morphline
operator|.
name|api
operator|.
name|Collector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|kitesdk
operator|.
name|morphline
operator|.
name|api
operator|.
name|Command
import|;
end_import
begin_import
import|import
name|org
operator|.
name|kitesdk
operator|.
name|morphline
operator|.
name|api
operator|.
name|MorphlineContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|kitesdk
operator|.
name|morphline
operator|.
name|api
operator|.
name|Record
import|;
end_import
begin_import
import|import
name|org
operator|.
name|kitesdk
operator|.
name|morphline
operator|.
name|base
operator|.
name|Compiler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|kitesdk
operator|.
name|morphline
operator|.
name|base
operator|.
name|FaultTolerance
import|;
end_import
begin_import
import|import
name|org
operator|.
name|kitesdk
operator|.
name|morphline
operator|.
name|base
operator|.
name|Notifications
import|;
end_import
begin_import
import|import
name|org
operator|.
name|kitesdk
operator|.
name|morphline
operator|.
name|stdlib
operator|.
name|PipeBuilder
import|;
end_import
begin_class
DECL|class|AbstractSolrMorphlineZkTestBase
specifier|public
specifier|abstract
class|class
name|AbstractSolrMorphlineZkTestBase
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|COLLECTION
specifier|protected
specifier|static
specifier|final
name|String
name|COLLECTION
init|=
literal|"collection1"
decl_stmt|;
DECL|field|TIMEOUT
specifier|protected
specifier|static
specifier|final
name|int
name|TIMEOUT
init|=
literal|30
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCluster
argument_list|(
literal|2
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"conf"
argument_list|,
name|SOLR_CONF_DIR
operator|.
name|toPath
argument_list|()
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|COLLECTION
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|processAndWait
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|COLLECTION
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
block|}
DECL|field|RESOURCES_DIR
specifier|protected
specifier|static
specifier|final
name|String
name|RESOURCES_DIR
init|=
name|getFile
argument_list|(
literal|"morphlines-core.marker"
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
DECL|field|SOLR_CONF_DIR
specifier|private
specifier|static
specifier|final
name|File
name|SOLR_CONF_DIR
init|=
operator|new
name|File
argument_list|(
name|RESOURCES_DIR
operator|+
literal|"/solr/collection1/conf"
argument_list|)
decl_stmt|;
DECL|field|collector
specifier|protected
name|Collector
name|collector
decl_stmt|;
DECL|field|morphline
specifier|protected
name|Command
name|morphline
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupClass
specifier|public
specifier|static
name|void
name|setupClass
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeFalse
argument_list|(
literal|"This test fails on Java 9 (https://issues.apache.org/jira/browse/SOLR-8876)"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
argument_list|)
expr_stmt|;
name|assumeFalse
argument_list|(
literal|"This test fails on UNIX with Turkish default locale (https://issues.apache.org/jira/browse/SOLR-6387)"
argument_list|,
operator|new
name|Locale
argument_list|(
literal|"tr"
argument_list|)
operator|.
name|getLanguage
argument_list|()
operator|.
name|equals
argument_list|(
name|Locale
operator|.
name|getDefault
argument_list|()
operator|.
name|getLanguage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|collector
operator|=
operator|new
name|Collector
argument_list|()
expr_stmt|;
block|}
DECL|method|commit
specifier|protected
name|void
name|commit
parameter_list|()
throws|throws
name|Exception
block|{
name|Notifications
operator|.
name|notifyCommitTransaction
argument_list|(
name|morphline
argument_list|)
expr_stmt|;
block|}
DECL|method|parse
specifier|protected
name|Command
name|parse
parameter_list|(
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|parse
argument_list|(
name|file
argument_list|,
name|COLLECTION
argument_list|)
return|;
block|}
DECL|method|parse
specifier|protected
name|Command
name|parse
parameter_list|(
name|String
name|file
parameter_list|,
name|String
name|collection
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrLocator
name|locator
init|=
operator|new
name|SolrLocator
argument_list|(
name|createMorphlineContext
argument_list|()
argument_list|)
decl_stmt|;
name|locator
operator|.
name|setCollectionName
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|locator
operator|.
name|setZkHost
argument_list|(
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
comment|//locator.setServerUrl(cloudJettys.get(0).url); // TODO: download IndexSchema from solrUrl not yet implemented
comment|//locator.setSolrHomeDir(SOLR_HOME_DIR.getPath());
name|Config
name|config
init|=
operator|new
name|Compiler
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|File
argument_list|(
name|RESOURCES_DIR
operator|+
literal|"/"
operator|+
name|file
operator|+
literal|".conf"
argument_list|)
argument_list|,
name|locator
operator|.
name|toConfig
argument_list|(
literal|"SOLR_LOCATOR"
argument_list|)
argument_list|)
decl_stmt|;
name|config
operator|=
name|config
operator|.
name|getConfigList
argument_list|(
literal|"morphlines"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|createMorphline
argument_list|(
name|config
argument_list|)
return|;
block|}
DECL|method|createMorphline
specifier|private
name|Command
name|createMorphline
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
return|return
operator|new
name|PipeBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|config
argument_list|,
literal|null
argument_list|,
name|collector
argument_list|,
name|createMorphlineContext
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createMorphlineContext
specifier|private
name|MorphlineContext
name|createMorphlineContext
parameter_list|()
block|{
return|return
operator|new
name|MorphlineContext
operator|.
name|Builder
argument_list|()
operator|.
name|setExceptionHandler
argument_list|(
operator|new
name|FaultTolerance
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|SolrServerException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMetricRegistry
argument_list|(
operator|new
name|MetricRegistry
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|startSession
specifier|protected
name|void
name|startSession
parameter_list|()
block|{
name|Notifications
operator|.
name|notifyStartSession
argument_list|(
name|morphline
argument_list|)
expr_stmt|;
block|}
DECL|method|next
specifier|protected
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|next
parameter_list|(
name|Iterator
argument_list|<
name|SolrDocument
argument_list|>
name|iter
parameter_list|)
block|{
name|SolrDocument
name|doc
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Record
name|record
init|=
name|toRecord
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|record
operator|.
name|removeAll
argument_list|(
literal|"_version_"
argument_list|)
expr_stmt|;
comment|// the values of this field are unknown and internal to solr
return|return
name|record
operator|.
name|getFields
argument_list|()
return|;
block|}
DECL|method|toRecord
specifier|private
name|Record
name|toRecord
parameter_list|(
name|SolrDocument
name|doc
parameter_list|)
block|{
name|Record
name|record
init|=
operator|new
name|Record
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|doc
operator|.
name|keySet
argument_list|()
control|)
block|{
name|record
operator|.
name|getFields
argument_list|()
operator|.
name|replaceValues
argument_list|(
name|key
argument_list|,
name|doc
operator|.
name|getFieldValues
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|record
return|;
block|}
block|}
end_class
end_unit
