begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.morphlines.solr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|morphlines
operator|.
name|solr
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|kitesdk
operator|.
name|morphline
operator|.
name|api
operator|.
name|Record
import|;
end_import
begin_import
import|import
name|org
operator|.
name|kitesdk
operator|.
name|morphline
operator|.
name|base
operator|.
name|Fields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|kitesdk
operator|.
name|morphline
operator|.
name|base
operator|.
name|Notifications
import|;
end_import
begin_class
DECL|class|SolrMorphlineTest
specifier|public
class|class
name|SolrMorphlineTest
extends|extends
name|AbstractSolrMorphlineTestBase
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass2
specifier|public
specifier|static
name|void
name|beforeClass2
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA8
argument_list|)
expr_stmt|;
name|assumeFalse
argument_list|(
literal|"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vm.info"
argument_list|,
literal|"<?>"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"IBM J9"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLoadSolrBasic
specifier|public
name|void
name|testLoadSolrBasic
parameter_list|()
throws|throws
name|Exception
block|{
comment|//System.setProperty("ENV_SOLR_HOME", testSolrHome + "/collection1");
name|morphline
operator|=
name|createMorphline
argument_list|(
literal|"test-morphlines/loadSolrBasic"
argument_list|)
expr_stmt|;
comment|//System.clearProperty("ENV_SOLR_HOME");
name|Record
name|record
init|=
operator|new
name|Record
argument_list|()
decl_stmt|;
name|record
operator|.
name|put
argument_list|(
name|Fields
operator|.
name|ID
argument_list|,
literal|"id0"
argument_list|)
expr_stmt|;
name|record
operator|.
name|put
argument_list|(
literal|"first_name"
argument_list|,
literal|"Nadja"
argument_list|)
expr_stmt|;
comment|// will be sanitized
name|startSession
argument_list|()
expr_stmt|;
name|Notifications
operator|.
name|notifyBeginTransaction
argument_list|(
name|morphline
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|morphline
operator|.
name|process
argument_list|(
name|record
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|collector
operator|.
name|getNumStartEvents
argument_list|()
argument_list|)
expr_stmt|;
name|Notifications
operator|.
name|notifyCommitTransaction
argument_list|(
name|morphline
argument_list|)
expr_stmt|;
name|Record
name|expected
init|=
operator|new
name|Record
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|Fields
operator|.
name|ID
argument_list|,
literal|"id0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|collector
operator|.
name|getRecords
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queryResultSetSize
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|Notifications
operator|.
name|notifyRollbackTransaction
argument_list|(
name|morphline
argument_list|)
expr_stmt|;
name|Notifications
operator|.
name|notifyShutdown
argument_list|(
name|morphline
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenizeText
specifier|public
name|void
name|testTokenizeText
parameter_list|()
throws|throws
name|Exception
block|{
name|morphline
operator|=
name|createMorphline
argument_list|(
literal|"test-morphlines"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"tokenizeText"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|Record
name|record
init|=
operator|new
name|Record
argument_list|()
decl_stmt|;
name|record
operator|.
name|put
argument_list|(
name|Fields
operator|.
name|MESSAGE
argument_list|,
literal|"Hello World!"
argument_list|)
expr_stmt|;
name|record
operator|.
name|put
argument_list|(
name|Fields
operator|.
name|MESSAGE
argument_list|,
literal|"\nFoo@Bar.com #%()123"
argument_list|)
expr_stmt|;
name|Record
name|expected
init|=
name|record
operator|.
name|copy
argument_list|()
decl_stmt|;
name|expected
operator|.
name|getFields
argument_list|()
operator|.
name|putAll
argument_list|(
literal|"tokens"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"hello"
argument_list|,
literal|"world"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar.com"
argument_list|,
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|collector
operator|.
name|reset
argument_list|()
expr_stmt|;
name|startSession
argument_list|()
expr_stmt|;
name|Notifications
operator|.
name|notifyBeginTransaction
argument_list|(
name|morphline
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|morphline
operator|.
name|process
argument_list|(
name|record
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|collector
operator|.
name|getNumStartEvents
argument_list|()
argument_list|)
expr_stmt|;
name|Notifications
operator|.
name|notifyCommitTransaction
argument_list|(
name|morphline
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|collector
operator|.
name|getFirstRecord
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
