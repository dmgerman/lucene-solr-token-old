begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.hadoop
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|PathValidation
specifier|public
class|class
name|PathValidation
extends|extends
name|MRUnitBase
block|{
annotation|@
name|Test
DECL|method|testPath
specifier|public
name|void
name|testPath
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://c2202.mycompany.com:8020/user/foo/bar.txt"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/user/foo/bar.txt"
argument_list|,
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar.txt"
argument_list|,
name|path
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hdfs"
argument_list|,
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c2202.mycompany.com:8020"
argument_list|,
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|=
operator|new
name|Path
argument_list|(
literal|"/user/foo/bar.txt"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/user/foo/bar.txt"
argument_list|,
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar.txt"
argument_list|,
name|path
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"-"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegex
specifier|public
name|void
name|testRegex
parameter_list|()
block|{
name|Pattern
name|regex
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"text/plain|text/html"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|regex
operator|.
name|matcher
argument_list|(
literal|"text/plain"
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|regex
operator|.
name|matcher
argument_list|(
literal|"text/html"
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|regex
operator|.
name|matcher
argument_list|(
literal|"xxtext/html"
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
