begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.hadoop.hack
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
operator|.
name|hack
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JHAdminConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
operator|.
name|STATE
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import
begin_comment
comment|/**  * An adapter for MiniMRYarnCluster providing a MiniMRClientCluster interface.  * This interface could be used by tests across both MR1 and MR2.  */
end_comment
begin_class
DECL|class|MiniMRYarnClusterAdapter
specifier|public
class|class
name|MiniMRYarnClusterAdapter
implements|implements
name|MiniMRClientCluster
block|{
DECL|field|miniMRYarnCluster
specifier|private
name|MiniMRYarnCluster
name|miniMRYarnCluster
decl_stmt|;
DECL|field|testWorkDir
specifier|private
name|File
name|testWorkDir
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MiniMRYarnClusterAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|MiniMRYarnClusterAdapter
specifier|public
name|MiniMRYarnClusterAdapter
parameter_list|(
name|MiniMRYarnCluster
name|miniMRYarnCluster
parameter_list|,
name|File
name|testWorkDir
parameter_list|)
block|{
name|this
operator|.
name|miniMRYarnCluster
operator|=
name|miniMRYarnCluster
expr_stmt|;
name|this
operator|.
name|testWorkDir
operator|=
name|testWorkDir
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConfig
specifier|public
name|Configuration
name|getConfig
parameter_list|()
block|{
return|return
name|miniMRYarnCluster
operator|.
name|getConfig
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|start
specifier|public
name|void
name|start
parameter_list|()
block|{
name|miniMRYarnCluster
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|miniMRYarnCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|restart
specifier|public
name|void
name|restart
parameter_list|()
block|{
if|if
condition|(
operator|!
name|miniMRYarnCluster
operator|.
name|getServiceState
argument_list|()
operator|.
name|equals
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot restart the mini cluster, start it first"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Configuration
name|oldConf
init|=
operator|new
name|Configuration
argument_list|(
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|callerName
init|=
name|oldConf
operator|.
name|get
argument_list|(
literal|"minimrclientcluster.caller.name"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|noOfNMs
init|=
name|oldConf
operator|.
name|getInt
argument_list|(
literal|"minimrclientcluster.nodemanagers.number"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|oldConf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_MINICLUSTER_FIXED_PORTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|oldConf
operator|.
name|setBoolean
argument_list|(
name|JHAdminConfig
operator|.
name|MR_HISTORY_MINICLUSTER_FIXED_PORTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|stop
argument_list|()
expr_stmt|;
name|miniMRYarnCluster
operator|=
operator|new
name|MiniMRYarnCluster
argument_list|(
name|callerName
argument_list|,
name|noOfNMs
argument_list|,
name|testWorkDir
argument_list|)
expr_stmt|;
name|miniMRYarnCluster
operator|.
name|init
argument_list|(
name|oldConf
argument_list|)
expr_stmt|;
name|miniMRYarnCluster
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
