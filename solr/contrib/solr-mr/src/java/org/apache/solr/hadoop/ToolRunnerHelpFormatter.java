begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.hadoop
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import
begin_import
import|import
name|net
operator|.
name|sourceforge
operator|.
name|argparse4j
operator|.
name|ArgumentParsers
import|;
end_import
begin_import
import|import
name|net
operator|.
name|sourceforge
operator|.
name|argparse4j
operator|.
name|helper
operator|.
name|ASCIITextWidthCounter
import|;
end_import
begin_import
import|import
name|net
operator|.
name|sourceforge
operator|.
name|argparse4j
operator|.
name|helper
operator|.
name|TextHelper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import
begin_comment
comment|/**  * Nicely formats the output of  * {@link ToolRunner#printGenericCommandUsage(PrintStream)} with the same look and feel that argparse4j uses for help text.  */
end_comment
begin_class
DECL|class|ToolRunnerHelpFormatter
class|class
name|ToolRunnerHelpFormatter
block|{
DECL|method|getGenericCommandUsage
specifier|public
specifier|static
name|String
name|getGenericCommandUsage
parameter_list|()
block|{
name|ByteArrayOutputStream
name|bout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|String
name|msg
decl_stmt|;
try|try
block|{
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|bout
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|=
operator|new
name|String
argument_list|(
name|bout
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
comment|// unreachable
block|}
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|msg
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|line
decl_stmt|;
try|try
block|{
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
comment|// unreachable
block|}
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
comment|// EOS
block|}
if|if
condition|(
operator|!
name|line
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|line
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
name|int
name|i
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|"  "
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
name|i
operator|=
name|line
operator|.
name|indexOf
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|line
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|title
init|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|title
operator|.
name|length
argument_list|()
operator|>=
literal|3
operator|&&
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|title
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|&&
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|title
operator|.
name|charAt
argument_list|(
literal|2
argument_list|)
argument_list|)
condition|)
block|{
name|title
operator|=
literal|"-"
operator|+
name|title
expr_stmt|;
comment|// prefer "--libjars" long arg style over "-libjars" style but retain "-D foo" short arg style
block|}
name|String
name|help
init|=
name|line
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|line
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|StringWriter
name|strWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|strWriter
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TextHelper
operator|.
name|printHelp
argument_list|(
name|writer
argument_list|,
name|title
argument_list|,
name|help
argument_list|,
operator|new
name|ASCIITextWidthCounter
argument_list|()
argument_list|,
name|ArgumentParsers
operator|.
name|getFormatWidth
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|strWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
