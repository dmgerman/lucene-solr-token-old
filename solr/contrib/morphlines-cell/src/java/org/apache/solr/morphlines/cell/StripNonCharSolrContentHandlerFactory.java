begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.morphlines.cell
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|morphlines
operator|.
name|cell
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|extraction
operator|.
name|SolrContentHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|extraction
operator|.
name|SolrContentHandlerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import
begin_comment
comment|/**  * {@link SolrContentHandler} and associated factory that strips non-characters and trims on output.  * This prevents exceptions on parsing integer fields inside Solr server.  */
end_comment
begin_class
DECL|class|StripNonCharSolrContentHandlerFactory
specifier|public
class|class
name|StripNonCharSolrContentHandlerFactory
extends|extends
name|SolrContentHandlerFactory
block|{
DECL|method|StripNonCharSolrContentHandlerFactory
specifier|public
name|StripNonCharSolrContentHandlerFactory
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|dateFormats
parameter_list|)
block|{
name|super
argument_list|(
name|dateFormats
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createSolrContentHandler
specifier|public
name|SolrContentHandler
name|createSolrContentHandler
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
block|{
return|return
operator|new
name|StripNonCharSolrContentHandler
argument_list|(
name|metadata
argument_list|,
name|params
argument_list|,
name|schema
argument_list|,
name|dateFormats
argument_list|)
return|;
block|}
comment|///////////////////////////////////////////////////////////////////////////////
comment|// Nested classes:
comment|///////////////////////////////////////////////////////////////////////////////
DECL|class|StripNonCharSolrContentHandler
specifier|private
specifier|static
specifier|final
class|class
name|StripNonCharSolrContentHandler
extends|extends
name|SolrContentHandler
block|{
DECL|method|StripNonCharSolrContentHandler
specifier|public
name|StripNonCharSolrContentHandler
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|IndexSchema
name|schema
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|dateFormats
parameter_list|)
block|{
name|super
argument_list|(
name|metadata
argument_list|,
name|params
argument_list|,
name|schema
argument_list|,
name|dateFormats
argument_list|)
expr_stmt|;
block|}
comment|/**      * Strip all non-characters, which can cause SolrReducer problems if present.      * This is borrowed from Apache Nutch.      */
DECL|method|stripNonCharCodepoints
specifier|private
specifier|static
name|String
name|stripNonCharCodepoints
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|StringBuilder
name|stripped
init|=
operator|new
name|StringBuilder
argument_list|(
name|input
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|char
name|ch
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ch
operator|=
name|input
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// Strip all non-characters http://unicode.org/cldr/utility/list-unicodeset.jsp?a=[:Noncharacter_Code_Point=True:]
comment|// and non-printable control characters except tabulator, new line and carriage return
if|if
condition|(
name|ch
operator|%
literal|0x10000
operator|!=
literal|0xffff
operator|&&
comment|// 0xffff - 0x10ffff range step 0x10000
name|ch
operator|%
literal|0x10000
operator|!=
literal|0xfffe
operator|&&
comment|// 0xfffe - 0x10fffe range
operator|(
name|ch
operator|<=
literal|0xfdd0
operator|||
name|ch
operator|>=
literal|0xfdef
operator|)
operator|&&
comment|// 0xfdd0 - 0xfdef
operator|(
name|ch
operator|>
literal|0x1F
operator|||
name|ch
operator|==
literal|0x9
operator|||
name|ch
operator|==
literal|0xa
operator|||
name|ch
operator|==
literal|0xd
operator|)
condition|)
block|{
name|stripped
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|stripped
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|transformValue
specifier|protected
name|String
name|transformValue
parameter_list|(
name|String
name|val
parameter_list|,
name|SchemaField
name|schemaField
parameter_list|)
block|{
name|String
name|ret
init|=
name|super
operator|.
name|transformValue
argument_list|(
name|val
argument_list|,
name|schemaField
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|ret
operator|=
name|stripNonCharCodepoints
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
block|}
end_class
end_unit
