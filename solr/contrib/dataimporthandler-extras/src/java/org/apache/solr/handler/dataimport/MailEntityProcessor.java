begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.dataimport
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
package|;
end_package
begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|mail
operator|.
name|imap
operator|.
name|IMAPMessage
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|Tika
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|HttpHeaders
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaMetadataKeys
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|*
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|AddressException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|ContentType
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|InternetAddress
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|MimeMessage
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|AndTerm
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|ComparisonTerm
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|ReceivedDateTerm
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|SearchTerm
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * An {@link EntityProcessor} instance which can index emails along with their attachments from POP3 or IMAP sources. Refer to  *<a href="http://wiki.apache.org/solr/DataImportHandler">http://wiki.apache.org/solr/DataImportHandler</a> for more  * details.<b>This API is experimental and subject to change</b>  *  *  * @since solr 1.4  */
end_comment
begin_class
DECL|class|MailEntityProcessor
specifier|public
class|class
name|MailEntityProcessor
extends|extends
name|EntityProcessorBase
block|{
DECL|interface|CustomFilter
specifier|public
specifier|static
interface|interface
name|CustomFilter
block|{
DECL|method|getCustomSearch
specifier|public
name|SearchTerm
name|getCustomSearch
parameter_list|(
name|Folder
name|folder
parameter_list|)
function_decl|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// set attributes using  XXX getXXXFromContext(attribute, defualtValue);
comment|// applies variable resolver and return default if value is not found or null
comment|// REQUIRED : connection and folder info
name|user
operator|=
name|getStringFromContext
argument_list|(
literal|"user"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|password
operator|=
name|getStringFromContext
argument_list|(
literal|"password"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|host
operator|=
name|getStringFromContext
argument_list|(
literal|"host"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|protocol
operator|=
name|getStringFromContext
argument_list|(
literal|"protocol"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|folderNames
operator|=
name|getStringFromContext
argument_list|(
literal|"folders"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// validate
if|if
condition|(
name|host
operator|==
literal|null
operator|||
name|protocol
operator|==
literal|null
operator|||
name|user
operator|==
literal|null
operator|||
name|password
operator|==
literal|null
operator|||
name|folderNames
operator|==
literal|null
condition|)
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|DataImportHandlerException
operator|.
name|SEVERE
argument_list|,
literal|"'user|password|protocol|host|folders' are required attributes"
argument_list|)
throw|;
comment|//OPTIONAL : have defaults and are optional
name|recurse
operator|=
name|getBoolFromContext
argument_list|(
literal|"recurse"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|excludes
init|=
name|getStringFromContext
argument_list|(
literal|"exclude"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|excludes
operator|!=
literal|null
operator|&&
operator|!
name|excludes
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|exclude
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|excludes
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|includes
init|=
name|getStringFromContext
argument_list|(
literal|"include"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|includes
operator|!=
literal|null
operator|&&
operator|!
name|includes
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|include
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|includes
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|batchSize
operator|=
name|getIntFromContext
argument_list|(
literal|"batchSize"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|customFilter
operator|=
name|getStringFromContext
argument_list|(
literal|"customFilter"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|getStringFromContext
argument_list|(
literal|"fetchMailsSince"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
try|try
block|{
name|fetchMailsSince
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|parse
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|DataImportHandlerException
operator|.
name|SEVERE
argument_list|,
literal|"Invalid value for fetchMailSince: "
operator|+
name|s
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|fetchSize
operator|=
name|getIntFromContext
argument_list|(
literal|"fetchSize"
argument_list|,
literal|32
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|cTimeout
operator|=
name|getIntFromContext
argument_list|(
literal|"connectTimeout"
argument_list|,
literal|30
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|rTimeout
operator|=
name|getIntFromContext
argument_list|(
literal|"readTimeout"
argument_list|,
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|processAttachment
operator|=
name|getBoolFromContext
argument_list|(
name|getStringFromContext
argument_list|(
literal|"processAttachment"
argument_list|,
literal|null
argument_list|)
operator|==
literal|null
condition|?
literal|"processAttachement"
else|:
literal|"processAttachment"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tika
operator|=
operator|new
name|Tika
argument_list|()
expr_stmt|;
name|logConfig
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nextRow
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|nextRow
parameter_list|()
block|{
name|Message
name|mail
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
init|=
literal|null
decl_stmt|;
do|do
block|{
comment|// try till there is a valid document or folders get exhausted.
comment|// when mail == NULL, it means end of processing
name|mail
operator|=
name|getNextMail
argument_list|()
expr_stmt|;
if|if
condition|(
name|mail
operator|!=
literal|null
condition|)
name|row
operator|=
name|getDocumentFromMail
argument_list|(
name|mail
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|row
operator|==
literal|null
operator|&&
name|mail
operator|!=
literal|null
condition|)
do|;
return|return
name|row
return|;
block|}
DECL|method|getNextMail
specifier|private
name|Message
name|getNextMail
parameter_list|()
block|{
if|if
condition|(
operator|!
name|connected
condition|)
block|{
if|if
condition|(
operator|!
name|connectToMailBox
argument_list|()
condition|)
return|return
literal|null
return|;
name|connected
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|folderIter
operator|==
literal|null
condition|)
block|{
name|createFilters
argument_list|()
expr_stmt|;
name|folderIter
operator|=
operator|new
name|FolderIterator
argument_list|(
name|mailbox
argument_list|)
expr_stmt|;
block|}
comment|// get next message from the folder
comment|// if folder is exhausted get next folder
comment|// loop till a valid mail or all folders exhausted.
while|while
condition|(
name|msgIter
operator|==
literal|null
operator|||
operator|!
name|msgIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Folder
name|next
init|=
name|folderIter
operator|.
name|hasNext
argument_list|()
condition|?
name|folderIter
operator|.
name|next
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|msgIter
operator|=
operator|new
name|MessageIterator
argument_list|(
name|next
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
return|return
name|msgIter
operator|.
name|next
argument_list|()
return|;
block|}
DECL|method|getDocumentFromMail
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getDocumentFromMail
parameter_list|(
name|Message
name|mail
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|addPartToDocument
argument_list|(
name|mail
argument_list|,
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|row
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|addPartToDocument
specifier|public
name|void
name|addPartToDocument
parameter_list|(
name|Part
name|part
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
parameter_list|,
name|boolean
name|outerMost
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|part
operator|instanceof
name|Message
condition|)
block|{
name|addEnvelopToDocument
argument_list|(
name|part
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
name|String
name|ct
init|=
name|part
operator|.
name|getContentType
argument_list|()
decl_stmt|;
name|ContentType
name|ctype
init|=
operator|new
name|ContentType
argument_list|(
name|ct
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|.
name|isMimeType
argument_list|(
literal|"multipart/*"
argument_list|)
condition|)
block|{
name|Multipart
name|mp
init|=
operator|(
name|Multipart
operator|)
name|part
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|mp
operator|.
name|getCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|part
operator|.
name|isMimeType
argument_list|(
literal|"multipart/alternative"
argument_list|)
condition|)
name|count
operator|=
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
name|addPartToDocument
argument_list|(
name|mp
operator|.
name|getBodyPart
argument_list|(
name|i
argument_list|)
argument_list|,
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|.
name|isMimeType
argument_list|(
literal|"message/rfc822"
argument_list|)
condition|)
block|{
name|addPartToDocument
argument_list|(
operator|(
name|Part
operator|)
name|part
operator|.
name|getContent
argument_list|()
argument_list|,
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|disp
init|=
name|part
operator|.
name|getDisposition
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|processAttachment
operator|||
operator|(
name|disp
operator|!=
literal|null
operator|&&
name|disp
operator|.
name|equalsIgnoreCase
argument_list|(
name|Part
operator|.
name|ATTACHMENT
argument_list|)
operator|)
condition|)
return|return;
name|InputStream
name|is
init|=
name|part
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
name|part
operator|.
name|getFileName
argument_list|()
decl_stmt|;
name|Metadata
name|md
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|md
operator|.
name|set
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|ctype
operator|.
name|getBaseType
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|md
operator|.
name|set
argument_list|(
name|TikaMetadataKeys
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|tika
operator|.
name|parseToString
argument_list|(
name|is
argument_list|,
name|md
argument_list|)
decl_stmt|;
if|if
condition|(
name|disp
operator|!=
literal|null
operator|&&
name|disp
operator|.
name|equalsIgnoreCase
argument_list|(
name|Part
operator|.
name|ATTACHMENT
argument_list|)
condition|)
block|{
if|if
condition|(
name|row
operator|.
name|get
argument_list|(
name|ATTACHMENT
argument_list|)
operator|==
literal|null
condition|)
name|row
operator|.
name|put
argument_list|(
name|ATTACHMENT
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|contents
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|row
operator|.
name|get
argument_list|(
name|ATTACHMENT
argument_list|)
decl_stmt|;
name|contents
operator|.
name|add
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
name|ATTACHMENT
argument_list|,
name|contents
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|.
name|get
argument_list|(
name|ATTACHMENT_NAMES
argument_list|)
operator|==
literal|null
condition|)
name|row
operator|.
name|put
argument_list|(
name|ATTACHMENT_NAMES
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|row
operator|.
name|get
argument_list|(
name|ATTACHMENT_NAMES
argument_list|)
decl_stmt|;
name|names
operator|.
name|add
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
name|ATTACHMENT_NAMES
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|row
operator|.
name|get
argument_list|(
name|CONTENT
argument_list|)
operator|==
literal|null
condition|)
name|row
operator|.
name|put
argument_list|(
name|CONTENT
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|contents
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|row
operator|.
name|get
argument_list|(
name|CONTENT
argument_list|)
decl_stmt|;
name|contents
operator|.
name|add
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
name|CONTENT
argument_list|,
name|contents
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addEnvelopToDocument
specifier|private
name|void
name|addEnvelopToDocument
parameter_list|(
name|Part
name|part
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
parameter_list|)
throws|throws
name|MessagingException
block|{
name|MimeMessage
name|mail
init|=
operator|(
name|MimeMessage
operator|)
name|part
decl_stmt|;
name|Address
index|[]
name|adresses
decl_stmt|;
if|if
condition|(
operator|(
name|adresses
operator|=
name|mail
operator|.
name|getFrom
argument_list|()
operator|)
operator|!=
literal|null
operator|&&
name|adresses
operator|.
name|length
operator|>
literal|0
condition|)
name|row
operator|.
name|put
argument_list|(
name|FROM
argument_list|,
name|adresses
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|to
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|adresses
operator|=
name|mail
operator|.
name|getRecipients
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|addAddressToList
argument_list|(
name|adresses
argument_list|,
name|to
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|adresses
operator|=
name|mail
operator|.
name|getRecipients
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|CC
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|addAddressToList
argument_list|(
name|adresses
argument_list|,
name|to
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|adresses
operator|=
name|mail
operator|.
name|getRecipients
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|BCC
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|addAddressToList
argument_list|(
name|adresses
argument_list|,
name|to
argument_list|)
expr_stmt|;
if|if
condition|(
name|to
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|row
operator|.
name|put
argument_list|(
name|TO_CC_BCC
argument_list|,
name|to
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
name|MESSAGE_ID
argument_list|,
name|mail
operator|.
name|getMessageID
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
name|SUBJECT
argument_list|,
name|mail
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|d
init|=
name|mail
operator|.
name|getSentDate
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|put
argument_list|(
name|SENT_DATE
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|flags
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Flags
operator|.
name|Flag
name|flag
range|:
name|mail
operator|.
name|getFlags
argument_list|()
operator|.
name|getSystemFlags
argument_list|()
control|)
block|{
if|if
condition|(
name|flag
operator|==
name|Flags
operator|.
name|Flag
operator|.
name|ANSWERED
condition|)
name|flags
operator|.
name|add
argument_list|(
name|FLAG_ANSWERED
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|flag
operator|==
name|Flags
operator|.
name|Flag
operator|.
name|DELETED
condition|)
name|flags
operator|.
name|add
argument_list|(
name|FLAG_DELETED
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|flag
operator|==
name|Flags
operator|.
name|Flag
operator|.
name|DRAFT
condition|)
name|flags
operator|.
name|add
argument_list|(
name|FLAG_DRAFT
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|flag
operator|==
name|Flags
operator|.
name|Flag
operator|.
name|FLAGGED
condition|)
name|flags
operator|.
name|add
argument_list|(
name|FLAG_FLAGGED
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|flag
operator|==
name|Flags
operator|.
name|Flag
operator|.
name|RECENT
condition|)
name|flags
operator|.
name|add
argument_list|(
name|FLAG_RECENT
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|flag
operator|==
name|Flags
operator|.
name|Flag
operator|.
name|SEEN
condition|)
name|flags
operator|.
name|add
argument_list|(
name|FLAG_SEEN
argument_list|)
expr_stmt|;
block|}
name|flags
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|mail
operator|.
name|getFlags
argument_list|()
operator|.
name|getUserFlags
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
name|FLAGS
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|String
index|[]
name|hdrs
init|=
name|mail
operator|.
name|getHeader
argument_list|(
literal|"X-Mailer"
argument_list|)
decl_stmt|;
if|if
condition|(
name|hdrs
operator|!=
literal|null
condition|)
name|row
operator|.
name|put
argument_list|(
name|XMAILER
argument_list|,
name|hdrs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|addAddressToList
specifier|private
name|void
name|addAddressToList
parameter_list|(
name|Address
index|[]
name|adresses
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|to
parameter_list|)
throws|throws
name|AddressException
block|{
for|for
control|(
name|Address
name|address
range|:
name|adresses
control|)
block|{
name|to
operator|.
name|add
argument_list|(
name|address
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|InternetAddress
name|ia
init|=
operator|(
name|InternetAddress
operator|)
name|address
decl_stmt|;
if|if
condition|(
name|ia
operator|.
name|isGroup
argument_list|()
condition|)
block|{
name|InternetAddress
index|[]
name|group
init|=
name|ia
operator|.
name|getGroup
argument_list|(
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|InternetAddress
name|member
range|:
name|group
control|)
name|to
operator|.
name|add
argument_list|(
name|member
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|connectToMailBox
specifier|private
name|boolean
name|connectToMailBox
parameter_list|()
block|{
try|try
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"mail.store.protocol"
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"mail.imap.fetchsize"
argument_list|,
literal|""
operator|+
name|fetchSize
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"mail.imap.timeout"
argument_list|,
literal|""
operator|+
name|rTimeout
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"mail.imap.connectiontimeout"
argument_list|,
literal|""
operator|+
name|cTimeout
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getDefaultInstance
argument_list|(
name|props
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|mailbox
operator|=
name|session
operator|.
name|getStore
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
name|mailbox
operator|.
name|connect
argument_list|(
name|host
argument_list|,
name|user
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connected to mailbox"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|MessagingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|DataImportHandlerException
operator|.
name|SEVERE
argument_list|,
literal|"Connection failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createFilters
specifier|private
name|void
name|createFilters
parameter_list|()
block|{
if|if
condition|(
name|fetchMailsSince
operator|!=
literal|null
condition|)
block|{
name|filters
operator|.
name|add
argument_list|(
operator|new
name|MailsSinceLastCheckFilter
argument_list|(
name|fetchMailsSince
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|customFilter
operator|!=
literal|null
operator|&&
operator|!
name|customFilter
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
try|try
block|{
name|Class
name|cf
init|=
name|Class
operator|.
name|forName
argument_list|(
name|customFilter
argument_list|)
decl_stmt|;
name|Object
name|obj
init|=
name|cf
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|CustomFilter
condition|)
block|{
name|filters
operator|.
name|add
argument_list|(
operator|(
name|CustomFilter
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|DataImportHandlerException
operator|.
name|SEVERE
argument_list|,
literal|"Custom filter could not be created"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|logConfig
specifier|private
name|void
name|logConfig
parameter_list|()
block|{
if|if
condition|(
operator|!
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
return|return;
name|StringBuilder
name|config
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|config
operator|.
name|append
argument_list|(
literal|"user : "
argument_list|)
operator|.
name|append
argument_list|(
name|user
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|append
argument_list|(
literal|"pwd : "
argument_list|)
operator|.
name|append
argument_list|(
name|password
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|append
argument_list|(
literal|"protocol : "
argument_list|)
operator|.
name|append
argument_list|(
name|protocol
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|append
argument_list|(
literal|"host : "
argument_list|)
operator|.
name|append
argument_list|(
name|host
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|append
argument_list|(
literal|"folders : "
argument_list|)
operator|.
name|append
argument_list|(
name|folderNames
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|append
argument_list|(
literal|"recurse : "
argument_list|)
operator|.
name|append
argument_list|(
name|recurse
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|append
argument_list|(
literal|"exclude : "
argument_list|)
operator|.
name|append
argument_list|(
name|exclude
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|append
argument_list|(
literal|"include : "
argument_list|)
operator|.
name|append
argument_list|(
name|include
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|append
argument_list|(
literal|"batchSize : "
argument_list|)
operator|.
name|append
argument_list|(
name|batchSize
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|append
argument_list|(
literal|"fetchSize : "
argument_list|)
operator|.
name|append
argument_list|(
name|fetchSize
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|append
argument_list|(
literal|"read timeout : "
argument_list|)
operator|.
name|append
argument_list|(
name|rTimeout
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|append
argument_list|(
literal|"conection timeout : "
argument_list|)
operator|.
name|append
argument_list|(
name|cTimeout
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|append
argument_list|(
literal|"custom filter : "
argument_list|)
operator|.
name|append
argument_list|(
name|customFilter
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|append
argument_list|(
literal|"fetch mail since : "
argument_list|)
operator|.
name|append
argument_list|(
name|fetchMailsSince
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|config
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|FolderIterator
class|class
name|FolderIterator
implements|implements
name|Iterator
argument_list|<
name|Folder
argument_list|>
block|{
DECL|field|mailbox
specifier|private
name|Store
name|mailbox
decl_stmt|;
DECL|field|topLevelFolders
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|topLevelFolders
decl_stmt|;
DECL|field|folders
specifier|private
name|List
argument_list|<
name|Folder
argument_list|>
name|folders
init|=
literal|null
decl_stmt|;
DECL|field|lastFolder
specifier|private
name|Folder
name|lastFolder
init|=
literal|null
decl_stmt|;
DECL|method|FolderIterator
specifier|public
name|FolderIterator
parameter_list|(
name|Store
name|mailBox
parameter_list|)
block|{
name|this
operator|.
name|mailbox
operator|=
name|mailBox
expr_stmt|;
name|folders
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|getTopLevelFolders
argument_list|(
name|mailBox
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|!
name|folders
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|Folder
name|next
parameter_list|()
block|{
try|try
block|{
name|boolean
name|hasMessages
init|=
literal|false
decl_stmt|;
name|Folder
name|next
decl_stmt|;
do|do
block|{
if|if
condition|(
name|lastFolder
operator|!=
literal|null
condition|)
block|{
name|lastFolder
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|lastFolder
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|folders
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|mailbox
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|next
operator|=
name|folders
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|String
name|fullName
init|=
name|next
operator|.
name|getFullName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|excludeFolder
argument_list|(
name|fullName
argument_list|)
condition|)
block|{
name|hasMessages
operator|=
operator|(
name|next
operator|.
name|getType
argument_list|()
operator|&
name|Folder
operator|.
name|HOLDS_MESSAGES
operator|)
operator|!=
literal|0
expr_stmt|;
name|next
operator|.
name|open
argument_list|(
name|Folder
operator|.
name|READ_ONLY
argument_list|)
expr_stmt|;
name|lastFolder
operator|=
name|next
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Opened folder : "
operator|+
name|fullName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|recurse
operator|&&
operator|(
operator|(
name|next
operator|.
name|getType
argument_list|()
operator|&
name|Folder
operator|.
name|HOLDS_FOLDERS
operator|)
operator|!=
literal|0
operator|)
condition|)
block|{
name|Folder
index|[]
name|children
init|=
name|next
operator|.
name|list
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added its children to list  : "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|children
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|folders
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|children
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"child name : "
operator|+
name|children
index|[
name|i
index|]
operator|.
name|getFullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|children
operator|.
name|length
operator|==
literal|0
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"NO children : "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
operator|!
name|hasMessages
condition|)
do|;
return|return
name|next
return|;
block|}
catch|catch
parameter_list|(
name|MessagingException
name|e
parameter_list|)
block|{
comment|//throw new DataImportHandlerException(DataImportHandlerException.SEVERE,
comment|//        "Folder open failed", e);
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|remove
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Its read only mode..."
argument_list|)
throw|;
block|}
DECL|method|getTopLevelFolders
specifier|private
name|void
name|getTopLevelFolders
parameter_list|(
name|Store
name|mailBox
parameter_list|)
block|{
if|if
condition|(
name|folderNames
operator|!=
literal|null
condition|)
name|topLevelFolders
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|folderNames
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|topLevelFolders
operator|!=
literal|null
operator|&&
name|i
operator|<
name|topLevelFolders
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|folders
operator|.
name|add
argument_list|(
name|mailbox
operator|.
name|getFolder
argument_list|(
name|topLevelFolders
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessagingException
name|e
parameter_list|)
block|{
comment|// skip bad ones unless its the last one and still no good folder
if|if
condition|(
name|folders
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|i
operator|==
name|topLevelFolders
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|DataImportHandlerException
operator|.
name|SEVERE
argument_list|,
literal|"Folder retreival failed"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|topLevelFolders
operator|==
literal|null
operator|||
name|topLevelFolders
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
try|try
block|{
name|folders
operator|.
name|add
argument_list|(
name|mailBox
operator|.
name|getDefaultFolder
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessagingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|DataImportHandlerException
operator|.
name|SEVERE
argument_list|,
literal|"Folder retreival failed"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|excludeFolder
specifier|private
name|boolean
name|excludeFolder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|String
name|s
range|:
name|exclude
control|)
block|{
if|if
condition|(
name|name
operator|.
name|matches
argument_list|(
name|s
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
for|for
control|(
name|String
name|s
range|:
name|include
control|)
block|{
if|if
condition|(
name|name
operator|.
name|matches
argument_list|(
name|s
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
name|include
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
DECL|class|MessageIterator
class|class
name|MessageIterator
implements|implements
name|Iterator
argument_list|<
name|Message
argument_list|>
block|{
DECL|field|folder
specifier|private
name|Folder
name|folder
decl_stmt|;
DECL|field|messagesInCurBatch
specifier|private
name|Message
index|[]
name|messagesInCurBatch
decl_stmt|;
DECL|field|current
specifier|private
name|int
name|current
init|=
literal|0
decl_stmt|;
DECL|field|currentBatch
specifier|private
name|int
name|currentBatch
init|=
literal|0
decl_stmt|;
DECL|field|batchSize
specifier|private
name|int
name|batchSize
init|=
literal|0
decl_stmt|;
DECL|field|totalInFolder
specifier|private
name|int
name|totalInFolder
init|=
literal|0
decl_stmt|;
DECL|field|doBatching
specifier|private
name|boolean
name|doBatching
init|=
literal|true
decl_stmt|;
DECL|method|MessageIterator
specifier|public
name|MessageIterator
parameter_list|(
name|Folder
name|folder
parameter_list|,
name|int
name|batchSize
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|folder
operator|=
name|folder
expr_stmt|;
name|this
operator|.
name|batchSize
operator|=
name|batchSize
expr_stmt|;
name|SearchTerm
name|st
init|=
name|getSearchTerm
argument_list|()
decl_stmt|;
if|if
condition|(
name|st
operator|!=
literal|null
condition|)
block|{
name|doBatching
operator|=
literal|false
expr_stmt|;
name|messagesInCurBatch
operator|=
name|folder
operator|.
name|search
argument_list|(
name|st
argument_list|)
expr_stmt|;
name|totalInFolder
operator|=
name|messagesInCurBatch
operator|.
name|length
expr_stmt|;
name|folder
operator|.
name|fetch
argument_list|(
name|messagesInCurBatch
argument_list|,
name|fp
argument_list|)
expr_stmt|;
name|current
operator|=
literal|0
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total messages : "
operator|+
name|totalInFolder
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Search criteria applied. Batching disabled"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|totalInFolder
operator|=
name|folder
operator|.
name|getMessageCount
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total messages : "
operator|+
name|totalInFolder
argument_list|)
expr_stmt|;
name|getNextBatch
argument_list|(
name|batchSize
argument_list|,
name|folder
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MessagingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|DataImportHandlerException
operator|.
name|SEVERE
argument_list|,
literal|"Message retreival failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getNextBatch
specifier|private
name|void
name|getNextBatch
parameter_list|(
name|int
name|batchSize
parameter_list|,
name|Folder
name|folder
parameter_list|)
throws|throws
name|MessagingException
block|{
comment|// after each batch invalidate cache
if|if
condition|(
name|messagesInCurBatch
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Message
name|m
range|:
name|messagesInCurBatch
control|)
block|{
if|if
condition|(
name|m
operator|instanceof
name|IMAPMessage
condition|)
operator|(
operator|(
name|IMAPMessage
operator|)
name|m
operator|)
operator|.
name|invalidateHeaders
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|lastMsg
init|=
operator|(
name|currentBatch
operator|+
literal|1
operator|)
operator|*
name|batchSize
decl_stmt|;
name|lastMsg
operator|=
name|lastMsg
operator|>
name|totalInFolder
condition|?
name|totalInFolder
else|:
name|lastMsg
expr_stmt|;
name|messagesInCurBatch
operator|=
name|folder
operator|.
name|getMessages
argument_list|(
name|currentBatch
operator|*
name|batchSize
operator|+
literal|1
argument_list|,
name|lastMsg
argument_list|)
expr_stmt|;
name|folder
operator|.
name|fetch
argument_list|(
name|messagesInCurBatch
argument_list|,
name|fp
argument_list|)
expr_stmt|;
name|current
operator|=
literal|0
expr_stmt|;
name|currentBatch
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Current Batch  : "
operator|+
name|currentBatch
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Messages in this batch  : "
operator|+
name|messagesInCurBatch
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|boolean
name|hasMore
init|=
name|current
operator|<
name|messagesInCurBatch
operator|.
name|length
decl_stmt|;
if|if
condition|(
operator|!
name|hasMore
operator|&&
name|doBatching
operator|&&
name|currentBatch
operator|*
name|batchSize
operator|<
name|totalInFolder
condition|)
block|{
comment|// try next batch
try|try
block|{
name|getNextBatch
argument_list|(
name|batchSize
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|hasMore
operator|=
name|current
operator|<
name|messagesInCurBatch
operator|.
name|length
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessagingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|DataImportHandlerException
operator|.
name|SEVERE
argument_list|,
literal|"Message retreival failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|hasMore
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|Message
name|next
parameter_list|()
block|{
return|return
name|hasNext
argument_list|()
condition|?
name|messagesInCurBatch
index|[
name|current
operator|++
index|]
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|remove
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Its read only mode..."
argument_list|)
throw|;
block|}
DECL|method|getSearchTerm
specifier|private
name|SearchTerm
name|getSearchTerm
parameter_list|()
block|{
if|if
condition|(
name|filters
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|filters
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
return|return
name|filters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCustomSearch
argument_list|(
name|folder
argument_list|)
return|;
name|SearchTerm
name|last
init|=
name|filters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCustomSearch
argument_list|(
name|folder
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|filters
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CustomFilter
name|filter
init|=
name|filters
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SearchTerm
name|st
init|=
name|filter
operator|.
name|getCustomSearch
argument_list|(
name|folder
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|!=
literal|null
condition|)
block|{
name|last
operator|=
operator|new
name|AndTerm
argument_list|(
name|last
argument_list|,
name|st
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|last
return|;
block|}
block|}
DECL|class|MailsSinceLastCheckFilter
class|class
name|MailsSinceLastCheckFilter
implements|implements
name|CustomFilter
block|{
DECL|field|since
specifier|private
name|Date
name|since
decl_stmt|;
DECL|method|MailsSinceLastCheckFilter
specifier|public
name|MailsSinceLastCheckFilter
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|since
operator|=
name|date
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCustomSearch
specifier|public
name|SearchTerm
name|getCustomSearch
parameter_list|(
name|Folder
name|folder
parameter_list|)
block|{
return|return
operator|new
name|ReceivedDateTerm
argument_list|(
name|ComparisonTerm
operator|.
name|GE
argument_list|,
name|since
argument_list|)
return|;
block|}
block|}
comment|// user settings stored in member variables
DECL|field|user
specifier|private
name|String
name|user
decl_stmt|;
DECL|field|password
specifier|private
name|String
name|password
decl_stmt|;
DECL|field|host
specifier|private
name|String
name|host
decl_stmt|;
DECL|field|protocol
specifier|private
name|String
name|protocol
decl_stmt|;
DECL|field|folderNames
specifier|private
name|String
name|folderNames
decl_stmt|;
DECL|field|exclude
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|exclude
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|include
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|include
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|recurse
specifier|private
name|boolean
name|recurse
decl_stmt|;
DECL|field|batchSize
specifier|private
name|int
name|batchSize
decl_stmt|;
DECL|field|fetchSize
specifier|private
name|int
name|fetchSize
decl_stmt|;
DECL|field|cTimeout
specifier|private
name|int
name|cTimeout
decl_stmt|;
DECL|field|rTimeout
specifier|private
name|int
name|rTimeout
decl_stmt|;
DECL|field|fetchMailsSince
specifier|private
name|Date
name|fetchMailsSince
decl_stmt|;
DECL|field|customFilter
specifier|private
name|String
name|customFilter
decl_stmt|;
DECL|field|processAttachment
specifier|private
name|boolean
name|processAttachment
init|=
literal|true
decl_stmt|;
DECL|field|tika
specifier|private
name|Tika
name|tika
decl_stmt|;
comment|// holds the current state
DECL|field|mailbox
specifier|private
name|Store
name|mailbox
decl_stmt|;
DECL|field|connected
specifier|private
name|boolean
name|connected
init|=
literal|false
decl_stmt|;
DECL|field|folderIter
specifier|private
name|FolderIterator
name|folderIter
decl_stmt|;
DECL|field|msgIter
specifier|private
name|MessageIterator
name|msgIter
decl_stmt|;
DECL|field|filters
specifier|private
name|List
argument_list|<
name|CustomFilter
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|fp
specifier|private
specifier|static
name|FetchProfile
name|fp
init|=
operator|new
name|FetchProfile
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DataImporter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// diagnostics
DECL|field|rowCount
specifier|private
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
static|static
block|{
name|fp
operator|.
name|add
argument_list|(
name|FetchProfile
operator|.
name|Item
operator|.
name|ENVELOPE
argument_list|)
expr_stmt|;
name|fp
operator|.
name|add
argument_list|(
name|FetchProfile
operator|.
name|Item
operator|.
name|FLAGS
argument_list|)
expr_stmt|;
name|fp
operator|.
name|add
argument_list|(
literal|"X-Mailer"
argument_list|)
expr_stmt|;
block|}
comment|// Fields To Index
comment|// single valued
DECL|field|MESSAGE_ID
specifier|private
specifier|static
specifier|final
name|String
name|MESSAGE_ID
init|=
literal|"messageId"
decl_stmt|;
DECL|field|SUBJECT
specifier|private
specifier|static
specifier|final
name|String
name|SUBJECT
init|=
literal|"subject"
decl_stmt|;
DECL|field|FROM
specifier|private
specifier|static
specifier|final
name|String
name|FROM
init|=
literal|"from"
decl_stmt|;
DECL|field|SENT_DATE
specifier|private
specifier|static
specifier|final
name|String
name|SENT_DATE
init|=
literal|"sentDate"
decl_stmt|;
DECL|field|XMAILER
specifier|private
specifier|static
specifier|final
name|String
name|XMAILER
init|=
literal|"xMailer"
decl_stmt|;
comment|// multi valued
DECL|field|TO_CC_BCC
specifier|private
specifier|static
specifier|final
name|String
name|TO_CC_BCC
init|=
literal|"allTo"
decl_stmt|;
DECL|field|FLAGS
specifier|private
specifier|static
specifier|final
name|String
name|FLAGS
init|=
literal|"flags"
decl_stmt|;
DECL|field|CONTENT
specifier|private
specifier|static
specifier|final
name|String
name|CONTENT
init|=
literal|"content"
decl_stmt|;
DECL|field|ATTACHMENT
specifier|private
specifier|static
specifier|final
name|String
name|ATTACHMENT
init|=
literal|"attachment"
decl_stmt|;
DECL|field|ATTACHMENT_NAMES
specifier|private
specifier|static
specifier|final
name|String
name|ATTACHMENT_NAMES
init|=
literal|"attachmentNames"
decl_stmt|;
comment|// flag values
DECL|field|FLAG_ANSWERED
specifier|private
specifier|static
specifier|final
name|String
name|FLAG_ANSWERED
init|=
literal|"answered"
decl_stmt|;
DECL|field|FLAG_DELETED
specifier|private
specifier|static
specifier|final
name|String
name|FLAG_DELETED
init|=
literal|"deleted"
decl_stmt|;
DECL|field|FLAG_DRAFT
specifier|private
specifier|static
specifier|final
name|String
name|FLAG_DRAFT
init|=
literal|"draft"
decl_stmt|;
DECL|field|FLAG_FLAGGED
specifier|private
specifier|static
specifier|final
name|String
name|FLAG_FLAGGED
init|=
literal|"flagged"
decl_stmt|;
DECL|field|FLAG_RECENT
specifier|private
specifier|static
specifier|final
name|String
name|FLAG_RECENT
init|=
literal|"recent"
decl_stmt|;
DECL|field|FLAG_SEEN
specifier|private
specifier|static
specifier|final
name|String
name|FLAG_SEEN
init|=
literal|"seen"
decl_stmt|;
DECL|method|getIntFromContext
specifier|private
name|int
name|getIntFromContext
parameter_list|(
name|String
name|prop
parameter_list|,
name|int
name|ifNull
parameter_list|)
block|{
name|int
name|v
init|=
name|ifNull
decl_stmt|;
try|try
block|{
name|String
name|val
init|=
name|context
operator|.
name|getEntityAttribute
argument_list|(
name|prop
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|val
operator|=
name|context
operator|.
name|replaceTokens
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|v
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|//do nothing
block|}
return|return
name|v
return|;
block|}
DECL|method|getBoolFromContext
specifier|private
name|boolean
name|getBoolFromContext
parameter_list|(
name|String
name|prop
parameter_list|,
name|boolean
name|ifNull
parameter_list|)
block|{
name|boolean
name|v
init|=
name|ifNull
decl_stmt|;
name|String
name|val
init|=
name|context
operator|.
name|getEntityAttribute
argument_list|(
name|prop
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|val
operator|=
name|context
operator|.
name|replaceTokens
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|v
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|v
return|;
block|}
DECL|method|getStringFromContext
specifier|private
name|String
name|getStringFromContext
parameter_list|(
name|String
name|prop
parameter_list|,
name|String
name|ifNull
parameter_list|)
block|{
name|String
name|v
init|=
name|ifNull
decl_stmt|;
name|String
name|val
init|=
name|context
operator|.
name|getEntityAttribute
argument_list|(
name|prop
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|val
operator|=
name|context
operator|.
name|replaceTokens
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|v
operator|=
name|val
expr_stmt|;
block|}
return|return
name|v
return|;
block|}
block|}
end_class
end_unit
