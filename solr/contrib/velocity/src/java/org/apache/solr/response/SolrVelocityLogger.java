begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.response
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|RuntimeServices
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|log
operator|.
name|LogChute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_class
DECL|class|SolrVelocityLogger
specifier|public
class|class
name|SolrVelocityLogger
implements|implements
name|LogChute
block|{
DECL|field|log
specifier|private
specifier|final
name|Logger
name|log
decl_stmt|;
DECL|method|SolrVelocityLogger
specifier|public
name|SolrVelocityLogger
parameter_list|(
name|Logger
name|log
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|RuntimeServices
name|runtimeServices
parameter_list|)
throws|throws
name|Exception
block|{   }
annotation|@
name|Override
DECL|method|log
specifier|public
name|void
name|log
parameter_list|(
name|int
name|level
parameter_list|,
name|String
name|message
parameter_list|)
block|{
switch|switch
condition|(
name|level
condition|)
block|{
case|case
name|LogChute
operator|.
name|TRACE_ID
case|:
name|log
operator|.
name|trace
argument_list|(
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|LogChute
operator|.
name|DEBUG_ID
case|:
name|log
operator|.
name|debug
argument_list|(
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|LogChute
operator|.
name|INFO_ID
case|:
name|log
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|LogChute
operator|.
name|WARN_ID
case|:
name|log
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|LogChute
operator|.
name|ERROR_ID
case|:
name|log
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// unknown logging level, use warn
name|log
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
annotation|@
name|Override
DECL|method|log
specifier|public
name|void
name|log
parameter_list|(
name|int
name|level
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
switch|switch
condition|(
name|level
condition|)
block|{
case|case
name|LogChute
operator|.
name|TRACE_ID
case|:
name|log
operator|.
name|trace
argument_list|(
name|message
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
break|break;
case|case
name|LogChute
operator|.
name|DEBUG_ID
case|:
name|log
operator|.
name|debug
argument_list|(
name|message
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
break|break;
case|case
name|LogChute
operator|.
name|INFO_ID
case|:
name|log
operator|.
name|info
argument_list|(
name|message
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
break|break;
case|case
name|LogChute
operator|.
name|WARN_ID
case|:
name|log
operator|.
name|warn
argument_list|(
name|message
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
break|break;
case|case
name|LogChute
operator|.
name|ERROR_ID
case|:
name|log
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// unknown logging level, use warn
name|log
operator|.
name|warn
argument_list|(
name|message
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
annotation|@
name|Override
DECL|method|isLevelEnabled
specifier|public
name|boolean
name|isLevelEnabled
parameter_list|(
name|int
name|level
parameter_list|)
block|{
switch|switch
condition|(
name|level
condition|)
block|{
case|case
name|LogChute
operator|.
name|TRACE_ID
case|:
return|return
name|log
operator|.
name|isTraceEnabled
argument_list|()
return|;
case|case
name|LogChute
operator|.
name|DEBUG_ID
case|:
return|return
name|log
operator|.
name|isDebugEnabled
argument_list|()
return|;
case|case
name|LogChute
operator|.
name|INFO_ID
case|:
return|return
name|log
operator|.
name|isInfoEnabled
argument_list|()
return|;
case|case
name|LogChute
operator|.
name|WARN_ID
case|:
return|return
name|log
operator|.
name|isWarnEnabled
argument_list|()
return|;
case|case
name|LogChute
operator|.
name|ERROR_ID
case|:
return|return
name|log
operator|.
name|isErrorEnabled
argument_list|()
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
block|}
end_class
end_unit
