begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.hadoop
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|JarFinder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
operator|.
name|SuppressSSL
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
operator|.
name|ORDER
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractFullDistribZkTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractZkTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
operator|.
name|hack
operator|.
name|MiniMRClientCluster
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
operator|.
name|hack
operator|.
name|MiniMRClientClusterFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|morphlines
operator|.
name|solr
operator|.
name|AbstractSolrMorphlineTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|BadHdfsThreadsFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|BadMrClusterThreadsFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TimeOut
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|Nightly
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakAction
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakAction
operator|.
name|Action
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakFilters
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakLingering
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakZombies
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakZombies
operator|.
name|Consequence
import|;
end_import
begin_class
annotation|@
name|ThreadLeakAction
argument_list|(
block|{
name|Action
operator|.
name|WARN
block|}
argument_list|)
annotation|@
name|ThreadLeakLingering
argument_list|(
name|linger
operator|=
literal|0
argument_list|)
annotation|@
name|ThreadLeakZombies
argument_list|(
name|Consequence
operator|.
name|CONTINUE
argument_list|)
annotation|@
name|ThreadLeakFilters
argument_list|(
name|defaultFilters
operator|=
literal|true
argument_list|,
name|filters
operator|=
block|{
name|BadHdfsThreadsFilter
operator|.
name|class
block|,
name|BadMrClusterThreadsFilter
operator|.
name|class
comment|// hdfs currently leaks thread(s)
block|}
argument_list|)
annotation|@
name|SuppressSSL
comment|// SSL does not work with this test for currently unknown reasons
annotation|@
name|Slow
annotation|@
name|Nightly
DECL|class|MorphlineGoLiveMiniMRTest
specifier|public
class|class
name|MorphlineGoLiveMiniMRTest
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|field|RECORD_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|RECORD_COUNT
init|=
literal|2104
decl_stmt|;
DECL|field|RESOURCES_DIR
specifier|private
specifier|static
specifier|final
name|String
name|RESOURCES_DIR
init|=
name|getFile
argument_list|(
literal|"morphlines-core.marker"
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
DECL|field|DOCUMENTS_DIR
specifier|private
specifier|static
specifier|final
name|String
name|DOCUMENTS_DIR
init|=
name|RESOURCES_DIR
operator|+
literal|"/test-documents"
decl_stmt|;
DECL|field|MINIMR_INSTANCE_DIR
specifier|private
specifier|static
specifier|final
name|File
name|MINIMR_INSTANCE_DIR
init|=
operator|new
name|File
argument_list|(
name|RESOURCES_DIR
operator|+
literal|"/solr/minimr"
argument_list|)
decl_stmt|;
DECL|field|MINIMR_CONF_DIR
specifier|private
specifier|static
specifier|final
name|File
name|MINIMR_CONF_DIR
init|=
operator|new
name|File
argument_list|(
name|RESOURCES_DIR
operator|+
literal|"/solr/minimr"
argument_list|)
decl_stmt|;
DECL|field|SEARCH_ARCHIVES_JAR
specifier|private
specifier|static
name|String
name|SEARCH_ARCHIVES_JAR
decl_stmt|;
DECL|field|dfsCluster
specifier|private
specifier|static
name|MiniDFSCluster
name|dfsCluster
init|=
literal|null
decl_stmt|;
DECL|field|mrCluster
specifier|private
specifier|static
name|MiniMRClientCluster
name|mrCluster
init|=
literal|null
decl_stmt|;
DECL|field|tempDir
specifier|private
specifier|static
name|String
name|tempDir
decl_stmt|;
DECL|field|inputAvroFile1
specifier|private
specifier|final
name|String
name|inputAvroFile1
decl_stmt|;
DECL|field|inputAvroFile2
specifier|private
specifier|final
name|String
name|inputAvroFile2
decl_stmt|;
DECL|field|inputAvroFile3
specifier|private
specifier|final
name|String
name|inputAvroFile3
decl_stmt|;
DECL|field|solrHomeDirectory
specifier|private
specifier|static
name|File
name|solrHomeDirectory
decl_stmt|;
annotation|@
name|Override
DECL|method|getSolrHome
specifier|public
name|String
name|getSolrHome
parameter_list|()
block|{
return|return
name|solrHomeDirectory
operator|.
name|getPath
argument_list|()
return|;
block|}
DECL|method|MorphlineGoLiveMiniMRTest
specifier|public
name|MorphlineGoLiveMiniMRTest
parameter_list|()
block|{
name|this
operator|.
name|inputAvroFile1
operator|=
literal|"sample-statuses-20120521-100919.avro"
expr_stmt|;
name|this
operator|.
name|inputAvroFile2
operator|=
literal|"sample-statuses-20120906-141433.avro"
expr_stmt|;
name|this
operator|.
name|inputAvroFile3
operator|=
literal|"sample-statuses-20120906-141433-medium.avro"
expr_stmt|;
name|sliceCount
operator|=
name|TEST_NIGHTLY
condition|?
literal|7
else|:
literal|3
expr_stmt|;
name|fixShardCount
argument_list|(
name|TEST_NIGHTLY
condition|?
literal|7
else|:
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|setupClass
specifier|public
specifier|static
name|void
name|setupClass
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.hdfs.blockcache.global"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|LuceneTestCase
operator|.
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.hdfs.blockcache.enabled"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|LuceneTestCase
operator|.
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.hdfs.blockcache.blocksperbank"
argument_list|,
literal|"2048"
argument_list|)
expr_stmt|;
name|solrHomeDirectory
operator|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
expr_stmt|;
name|assumeFalse
argument_list|(
literal|"HDFS tests were disabled by -Dtests.disableHdfs"
argument_list|,
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"tests.disableHdfs"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assumeFalse
argument_list|(
literal|"FIXME: This test does not work with Windows because of native library requirements"
argument_list|,
name|Constants
operator|.
name|WINDOWS
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|SOLRHOME
operator|=
name|solrHomeDirectory
expr_stmt|;
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
name|MINIMR_INSTANCE_DIR
argument_list|,
name|AbstractZkTestCase
operator|.
name|SOLRHOME
argument_list|)
expr_stmt|;
name|tempDir
operator|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|tempDir
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|RESOURCES_DIR
operator|+
literal|"/custom-mimetypes.xml"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|tempDir
operator|+
literal|"/custom-mimetypes.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|AbstractSolrMorphlineTestBase
operator|.
name|setupMorphline
argument_list|(
name|tempDir
argument_list|,
literal|"test-morphlines/solrCellDocumentTypes"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"hadoop.log.dir"
argument_list|,
operator|new
name|File
argument_list|(
name|tempDir
argument_list|,
literal|"logs"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|dataNodes
init|=
literal|2
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.block.access.token.enable"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.permissions"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.jobhistory.minicluster.fixed.ports"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.jobhistory.admin.address"
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|tempDir
operator|+
name|File
operator|.
name|separator
operator|+
literal|"nm-local-dirs"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOG_DIRS
argument_list|,
name|tempDir
operator|+
name|File
operator|.
name|separator
operator|+
literal|"nm-logs"
argument_list|)
expr_stmt|;
operator|new
name|File
argument_list|(
name|tempDir
operator|+
name|File
operator|.
name|separator
operator|+
literal|"nm-local-dirs"
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"test.build.dir"
argument_list|,
name|tempDir
operator|+
name|File
operator|.
name|separator
operator|+
literal|"hdfs"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"test-build-dir"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"test.build.data"
argument_list|,
name|tempDir
operator|+
name|File
operator|.
name|separator
operator|+
literal|"hdfs"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"build"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"test.cache.data"
argument_list|,
name|tempDir
operator|+
name|File
operator|.
name|separator
operator|+
literal|"hdfs"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"cache"
argument_list|)
expr_stmt|;
comment|// Initialize AFTER test.build.dir is set, JarFinder uses it.
name|SEARCH_ARCHIVES_JAR
operator|=
name|JarFinder
operator|.
name|getJar
argument_list|(
name|MapReduceIndexerTool
operator|.
name|class
argument_list|)
expr_stmt|;
name|dfsCluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
name|dataNodes
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileSystem
name|fileSystem
init|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|fileSystem
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user"
argument_list|)
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/hadoop/mapred/system"
argument_list|)
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|valueOf
argument_list|(
literal|"-rwxrwxrwx"
argument_list|)
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|valueOf
argument_list|(
literal|"-rwxrwxrwx"
argument_list|)
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/hadoop/mapred/system"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|valueOf
argument_list|(
literal|"-rwx------"
argument_list|)
argument_list|)
expr_stmt|;
name|mrCluster
operator|=
name|MiniMRClientClusterFactory
operator|.
name|create
argument_list|(
name|MorphlineGoLiveMiniMRTest
operator|.
name|class
argument_list|,
literal|1
argument_list|,
name|conf
argument_list|,
operator|new
name|File
argument_list|(
name|tempDir
argument_list|,
literal|"mrCluster"
argument_list|)
argument_list|)
expr_stmt|;
comment|//new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks,
comment|//hosts, null, conf);
name|ProxyUsers
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|distribSetUp
specifier|public
name|void
name|distribSetUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|distribSetUp
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"host"
argument_list|,
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"numShards"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|sliceCount
argument_list|)
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.hdfs.home"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|uploadConfFiles
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|distribTearDown
specifier|public
name|void
name|distribTearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|distribTearDown
argument_list|()
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"numShards"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.hdfs.home"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|teardownClass
specifier|public
specifier|static
name|void
name|teardownClass
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.hdfs.blockcache.global"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.hdfs.blockcache.blocksperbank"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.hdfs.blockcache.enabled"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"hadoop.log.dir"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"test.build.dir"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"test.build.data"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"test.cache.data"
argument_list|)
expr_stmt|;
if|if
condition|(
name|mrCluster
operator|!=
literal|null
condition|)
block|{
name|mrCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
name|mrCluster
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|dfsCluster
operator|!=
literal|null
condition|)
block|{
name|dfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|dfsCluster
operator|=
literal|null
expr_stmt|;
block|}
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
DECL|method|getJobConf
specifier|private
name|JobConf
name|getJobConf
parameter_list|()
throws|throws
name|IOException
block|{
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|mrCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|jobConf
return|;
block|}
annotation|@
name|Test
DECL|method|testBuildShardUrls
specifier|public
name|void
name|testBuildShardUrls
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 2x3
name|Integer
name|numShards
init|=
literal|2
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|urls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|urls
operator|.
name|add
argument_list|(
literal|"shard1"
argument_list|)
expr_stmt|;
name|urls
operator|.
name|add
argument_list|(
literal|"shard2"
argument_list|)
expr_stmt|;
name|urls
operator|.
name|add
argument_list|(
literal|"shard3"
argument_list|)
expr_stmt|;
name|urls
operator|.
name|add
argument_list|(
literal|"shard4"
argument_list|)
expr_stmt|;
name|urls
operator|.
name|add
argument_list|(
literal|"shard5"
argument_list|)
expr_stmt|;
name|urls
operator|.
name|add
argument_list|(
literal|"shard6"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|shardUrls
init|=
name|MapReduceIndexerTool
operator|.
name|buildShardUrls
argument_list|(
name|urls
argument_list|,
name|numShards
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|shardUrls
operator|.
name|toString
argument_list|()
argument_list|,
literal|2
argument_list|,
name|shardUrls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|u
range|:
name|shardUrls
control|)
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|u
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// 1x6
name|numShards
operator|=
literal|1
expr_stmt|;
name|shardUrls
operator|=
name|MapReduceIndexerTool
operator|.
name|buildShardUrls
argument_list|(
name|urls
argument_list|,
name|numShards
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardUrls
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|shardUrls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|u
range|:
name|shardUrls
control|)
block|{
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|u
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// 6x1
name|numShards
operator|=
literal|6
expr_stmt|;
name|shardUrls
operator|=
name|MapReduceIndexerTool
operator|.
name|buildShardUrls
argument_list|(
name|urls
argument_list|,
name|numShards
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardUrls
operator|.
name|toString
argument_list|()
argument_list|,
literal|6
argument_list|,
name|shardUrls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|u
range|:
name|shardUrls
control|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|u
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// 3x2
name|numShards
operator|=
literal|3
expr_stmt|;
name|shardUrls
operator|=
name|MapReduceIndexerTool
operator|.
name|buildShardUrls
argument_list|(
name|urls
argument_list|,
name|numShards
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardUrls
operator|.
name|toString
argument_list|()
argument_list|,
literal|3
argument_list|,
name|shardUrls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|u
range|:
name|shardUrls
control|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|u
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// null shards, 6x1
name|numShards
operator|=
literal|null
expr_stmt|;
name|shardUrls
operator|=
name|MapReduceIndexerTool
operator|.
name|buildShardUrls
argument_list|(
name|urls
argument_list|,
name|numShards
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardUrls
operator|.
name|toString
argument_list|()
argument_list|,
literal|6
argument_list|,
name|shardUrls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|u
range|:
name|shardUrls
control|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|u
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// null shards 3x1
name|numShards
operator|=
literal|null
expr_stmt|;
name|urls
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|urls
operator|.
name|add
argument_list|(
literal|"shard1"
argument_list|)
expr_stmt|;
name|urls
operator|.
name|add
argument_list|(
literal|"shard2"
argument_list|)
expr_stmt|;
name|urls
operator|.
name|add
argument_list|(
literal|"shard3"
argument_list|)
expr_stmt|;
name|shardUrls
operator|=
name|MapReduceIndexerTool
operator|.
name|buildShardUrls
argument_list|(
name|urls
argument_list|,
name|numShards
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardUrls
operator|.
name|toString
argument_list|()
argument_list|,
literal|3
argument_list|,
name|shardUrls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|u
range|:
name|shardUrls
control|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|u
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// 2x(2,3) off balance
name|numShards
operator|=
literal|2
expr_stmt|;
name|urls
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|urls
operator|.
name|add
argument_list|(
literal|"shard1"
argument_list|)
expr_stmt|;
name|urls
operator|.
name|add
argument_list|(
literal|"shard2"
argument_list|)
expr_stmt|;
name|urls
operator|.
name|add
argument_list|(
literal|"shard3"
argument_list|)
expr_stmt|;
name|urls
operator|.
name|add
argument_list|(
literal|"shard4"
argument_list|)
expr_stmt|;
name|urls
operator|.
name|add
argument_list|(
literal|"shard5"
argument_list|)
expr_stmt|;
name|shardUrls
operator|=
name|MapReduceIndexerTool
operator|.
name|buildShardUrls
argument_list|(
name|urls
argument_list|,
name|numShards
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardUrls
operator|.
name|toString
argument_list|()
argument_list|,
literal|2
argument_list|,
name|shardUrls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|counts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|counts
operator|.
name|add
argument_list|(
name|shardUrls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|counts
operator|.
name|add
argument_list|(
name|shardUrls
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|counts
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|counts
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|prependInitialArgs
specifier|private
name|String
index|[]
name|prependInitialArgs
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|String
index|[]
name|head
init|=
operator|new
name|String
index|[]
block|{
literal|"--morphline-file="
operator|+
name|tempDir
operator|+
literal|"/test-morphlines/solrCellDocumentTypes.conf"
block|,
literal|"--morphline-id=morphline1"
block|,     }
decl_stmt|;
return|return
name|concat
argument_list|(
name|head
argument_list|,
name|args
argument_list|)
return|;
block|}
annotation|@
name|Nightly
annotation|@
name|Test
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|waitForRecoveriesToFinish
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|inDir
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/testing/testMapperReducer/input"
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|inDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|DATADIR
init|=
literal|"/user/testing/testMapperReducer/data"
decl_stmt|;
name|Path
name|dataDir
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|DATADIR
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dataDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Path
name|outDir
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/testing/testMapperReducer/output"
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|inDir
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|INPATH
init|=
name|upAvroFile
argument_list|(
name|fs
argument_list|,
name|inDir
argument_list|,
name|DATADIR
argument_list|,
name|dataDir
argument_list|,
name|inputAvroFile1
argument_list|)
decl_stmt|;
name|JobConf
name|jobConf
init|=
name|getJobConf
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
literal|"jobclient.output.filter"
argument_list|,
literal|"ALL"
argument_list|)
expr_stmt|;
comment|// enable mapred.job.tracker = local to run in debugger and set breakpoints
comment|// jobConf.set("mapred.job.tracker", "local");
name|jobConf
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setMaxReduceAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setJar
argument_list|(
name|SEARCH_ARCHIVES_JAR
argument_list|)
expr_stmt|;
name|MapReduceIndexerTool
name|tool
decl_stmt|;
name|int
name|res
decl_stmt|;
name|QueryResponse
name|results
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|argList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|server
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|cloudJettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|url
argument_list|)
init|)
block|{
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"--solr-home-dir="
operator|+
name|MINIMR_CONF_DIR
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--output-dir="
operator|+
name|outDir
operator|.
name|toString
argument_list|()
block|,
literal|"--log4j="
operator|+
name|getFile
argument_list|(
literal|"log4j.properties"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--mappers=3"
block|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"--input-list="
operator|+
name|INPATH
operator|.
name|toString
argument_list|()
else|:
name|dataDir
operator|.
name|toString
argument_list|()
block|,
literal|"--go-live-threads"
block|,
name|Integer
operator|.
name|toString
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|15
argument_list|)
operator|+
literal|1
argument_list|)
block|,
literal|"--verbose"
block|,
literal|"--go-live"
block|}
expr_stmt|;
name|args
operator|=
name|prependInitialArgs
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|getShardUrlArgs
argument_list|(
name|argList
argument_list|)
expr_stmt|;
name|args
operator|=
name|concat
argument_list|(
name|args
argument_list|,
name|argList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|true
condition|)
block|{
name|tool
operator|=
operator|new
name|MapReduceIndexerTool
argument_list|()
expr_stmt|;
name|res
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|jobConf
argument_list|,
name|tool
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tool
operator|.
name|job
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tool
operator|.
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|server
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|results
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|delete
argument_list|(
name|inDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dataDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|inDir
argument_list|)
argument_list|)
expr_stmt|;
name|INPATH
operator|=
name|upAvroFile
argument_list|(
name|fs
argument_list|,
name|inDir
argument_list|,
name|DATADIR
argument_list|,
name|dataDir
argument_list|,
name|inputAvroFile2
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"--solr-home-dir="
operator|+
name|MINIMR_CONF_DIR
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--output-dir="
operator|+
name|outDir
operator|.
name|toString
argument_list|()
block|,
literal|"--mappers=3"
block|,
literal|"--verbose"
block|,
literal|"--go-live"
block|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"--input-list="
operator|+
name|INPATH
operator|.
name|toString
argument_list|()
else|:
name|dataDir
operator|.
name|toString
argument_list|()
block|,
literal|"--go-live-threads"
block|,
name|Integer
operator|.
name|toString
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|15
argument_list|)
operator|+
literal|1
argument_list|)
block|}
expr_stmt|;
name|args
operator|=
name|prependInitialArgs
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|getShardUrlArgs
argument_list|(
name|argList
argument_list|)
expr_stmt|;
name|args
operator|=
name|concat
argument_list|(
name|args
argument_list|,
name|argList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|true
condition|)
block|{
name|tool
operator|=
operator|new
name|MapReduceIndexerTool
argument_list|()
expr_stmt|;
name|res
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|jobConf
argument_list|,
name|tool
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tool
operator|.
name|job
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tool
operator|.
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|server
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|22
argument_list|,
name|results
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// try using zookeeper
name|String
name|collection
init|=
literal|"collection1"
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// sometimes, use an alias
name|createAlias
argument_list|(
literal|"updatealias"
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|collection
operator|=
literal|"updatealias"
expr_stmt|;
block|}
name|fs
operator|.
name|delete
argument_list|(
name|inDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dataDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|INPATH
operator|=
name|upAvroFile
argument_list|(
name|fs
argument_list|,
name|inDir
argument_list|,
name|DATADIR
argument_list|,
name|dataDir
argument_list|,
name|inputAvroFile3
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cloudClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"--output-dir="
operator|+
name|outDir
operator|.
name|toString
argument_list|()
block|,
literal|"--mappers=3"
block|,
literal|"--reducers=12"
block|,
literal|"--fanout=2"
block|,
literal|"--verbose"
block|,
literal|"--go-live"
block|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"--input-list="
operator|+
name|INPATH
operator|.
name|toString
argument_list|()
else|:
name|dataDir
operator|.
name|toString
argument_list|()
block|,
literal|"--zk-host"
block|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
block|,
literal|"--collection"
block|,
name|collection
block|}
expr_stmt|;
name|args
operator|=
name|prependInitialArgs
argument_list|(
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
literal|true
condition|)
block|{
name|tool
operator|=
operator|new
name|MapReduceIndexerTool
argument_list|()
expr_stmt|;
name|res
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|jobConf
argument_list|,
name|tool
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tool
operator|.
name|job
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tool
operator|.
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|SolrDocumentList
name|resultDocs
init|=
name|executeSolrQuery
argument_list|(
name|cloudClient
argument_list|,
literal|"*:*"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RECORD_COUNT
argument_list|,
name|resultDocs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RECORD_COUNT
argument_list|,
name|resultDocs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// perform updates
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RECORD_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|SolrDocument
name|doc
init|=
name|resultDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SolrInputDocument
name|update
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|doc
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|update
operator|.
name|setField
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|update
operator|.
name|setField
argument_list|(
literal|"user_screen_name"
argument_list|,
literal|"Nadja"
operator|+
name|i
argument_list|)
expr_stmt|;
name|update
operator|.
name|removeField
argument_list|(
literal|"_version_"
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|add
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
name|cloudClient
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// verify updates
name|SolrDocumentList
name|resultDocs2
init|=
name|executeSolrQuery
argument_list|(
name|cloudClient
argument_list|,
literal|"*:*"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RECORD_COUNT
argument_list|,
name|resultDocs2
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RECORD_COUNT
argument_list|,
name|resultDocs2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RECORD_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|SolrDocument
name|doc
init|=
name|resultDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SolrDocument
name|doc2
init|=
name|resultDocs2
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|doc
operator|.
name|getFirstValue
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|doc2
operator|.
name|getFirstValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Nadja"
operator|+
name|i
argument_list|,
name|doc2
operator|.
name|getFirstValue
argument_list|(
literal|"user_screen_name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|doc
operator|.
name|getFirstValue
argument_list|(
literal|"text"
argument_list|)
argument_list|,
name|doc2
operator|.
name|getFirstValue
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
comment|// perform delete
name|cloudClient
operator|.
name|deleteById
argument_list|(
operator|(
name|String
operator|)
name|doc
operator|.
name|getFirstValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cloudClient
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// verify deletes
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|executeSolrQuery
argument_list|(
name|cloudClient
argument_list|,
literal|"*:*"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cloudClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cloudClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// try using zookeeper with replication
name|String
name|replicatedCollection
init|=
literal|"replicated_collection"
decl_stmt|;
if|if
condition|(
name|TEST_NIGHTLY
condition|)
block|{
name|createCollection
argument_list|(
name|replicatedCollection
argument_list|,
literal|7
argument_list|,
literal|3
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createCollection
argument_list|(
name|replicatedCollection
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|waitForRecoveriesToFinish
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|setDefaultCollection
argument_list|(
name|replicatedCollection
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|inDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dataDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|dataDir
argument_list|)
argument_list|)
expr_stmt|;
name|INPATH
operator|=
name|upAvroFile
argument_list|(
name|fs
argument_list|,
name|inDir
argument_list|,
name|DATADIR
argument_list|,
name|dataDir
argument_list|,
name|inputAvroFile3
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"--solr-home-dir="
operator|+
name|MINIMR_CONF_DIR
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--output-dir="
operator|+
name|outDir
operator|.
name|toString
argument_list|()
block|,
literal|"--mappers=3"
block|,
literal|"--reducers=22"
block|,
literal|"--fanout=2"
block|,
literal|"--verbose"
block|,
literal|"--go-live"
block|,
literal|"--zk-host"
block|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
block|,
literal|"--collection"
block|,
name|replicatedCollection
block|,
name|dataDir
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|args
operator|=
name|prependInitialArgs
argument_list|(
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
literal|true
condition|)
block|{
name|tool
operator|=
operator|new
name|MapReduceIndexerTool
argument_list|()
expr_stmt|;
name|res
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|jobConf
argument_list|,
name|tool
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tool
operator|.
name|job
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tool
operator|.
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|SolrDocumentList
name|resultDocs
init|=
name|executeSolrQuery
argument_list|(
name|cloudClient
argument_list|,
literal|"*:*"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RECORD_COUNT
argument_list|,
name|resultDocs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RECORD_COUNT
argument_list|,
name|resultDocs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkConsistency
argument_list|(
name|replicatedCollection
argument_list|)
expr_stmt|;
comment|// perform updates
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RECORD_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|SolrDocument
name|doc
init|=
name|resultDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SolrInputDocument
name|update
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|doc
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|update
operator|.
name|setField
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|update
operator|.
name|setField
argument_list|(
literal|"user_screen_name"
argument_list|,
literal|"@Nadja"
operator|+
name|i
argument_list|)
expr_stmt|;
name|update
operator|.
name|removeField
argument_list|(
literal|"_version_"
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|add
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
name|cloudClient
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// verify updates
name|SolrDocumentList
name|resultDocs2
init|=
name|executeSolrQuery
argument_list|(
name|cloudClient
argument_list|,
literal|"*:*"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RECORD_COUNT
argument_list|,
name|resultDocs2
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RECORD_COUNT
argument_list|,
name|resultDocs2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RECORD_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|SolrDocument
name|doc
init|=
name|resultDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SolrDocument
name|doc2
init|=
name|resultDocs2
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|doc
operator|.
name|getFieldValues
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|doc2
operator|.
name|getFieldValues
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|doc
operator|.
name|getFieldValues
argument_list|(
literal|"id"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"@Nadja"
operator|+
name|i
argument_list|)
argument_list|,
name|doc2
operator|.
name|getFieldValues
argument_list|(
literal|"user_screen_name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|doc
operator|.
name|getFieldValues
argument_list|(
literal|"text"
argument_list|)
argument_list|,
name|doc2
operator|.
name|getFieldValues
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
comment|// perform delete
name|cloudClient
operator|.
name|deleteById
argument_list|(
operator|(
name|String
operator|)
name|doc
operator|.
name|getFirstValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cloudClient
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// verify deletes
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|executeSolrQuery
argument_list|(
name|cloudClient
argument_list|,
literal|"*:*"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// try using solr_url with replication
name|cloudClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|executeSolrQuery
argument_list|(
name|cloudClient
argument_list|,
literal|"*:*"
argument_list|)
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|executeSolrQuery
argument_list|(
name|cloudClient
argument_list|,
literal|"*:*"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|inDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dataDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|dataDir
argument_list|)
argument_list|)
expr_stmt|;
name|INPATH
operator|=
name|upAvroFile
argument_list|(
name|fs
argument_list|,
name|inDir
argument_list|,
name|DATADIR
argument_list|,
name|dataDir
argument_list|,
name|inputAvroFile3
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"--solr-home-dir="
operator|+
name|MINIMR_CONF_DIR
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--output-dir="
operator|+
name|outDir
operator|.
name|toString
argument_list|()
block|,
literal|"--shards"
block|,
literal|"2"
block|,
literal|"--mappers=3"
block|,
literal|"--verbose"
block|,
literal|"--go-live"
block|,
literal|"--go-live-threads"
block|,
name|Integer
operator|.
name|toString
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|15
argument_list|)
operator|+
literal|1
argument_list|)
block|,
name|dataDir
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|args
operator|=
name|prependInitialArgs
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|argList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|getShardUrlArgs
argument_list|(
name|argList
argument_list|,
name|replicatedCollection
argument_list|)
expr_stmt|;
name|args
operator|=
name|concat
argument_list|(
name|args
argument_list|,
name|argList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|true
condition|)
block|{
name|tool
operator|=
operator|new
name|MapReduceIndexerTool
argument_list|()
expr_stmt|;
name|res
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|jobConf
argument_list|,
name|tool
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tool
operator|.
name|job
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tool
operator|.
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|checkConsistency
argument_list|(
name|replicatedCollection
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RECORD_COUNT
argument_list|,
name|executeSolrQuery
argument_list|(
name|cloudClient
argument_list|,
literal|"*:*"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// delete collection
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|DELETE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_INSTANCE_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_DATA_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|replicatedCollection
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
specifier|final
name|TimeOut
name|timeout
init|=
operator|new
name|TimeOut
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
while|while
condition|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|hasCollection
argument_list|(
name|replicatedCollection
argument_list|)
condition|)
block|{
if|if
condition|(
name|timeout
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Timeout waiting to see removed collection leave clusterstate"
argument_list|)
throw|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|updateClusterState
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|TEST_NIGHTLY
condition|)
block|{
name|createCollection
argument_list|(
name|replicatedCollection
argument_list|,
literal|7
argument_list|,
literal|3
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createCollection
argument_list|(
name|replicatedCollection
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|waitForRecoveriesToFinish
argument_list|(
name|replicatedCollection
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|printLayout
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|executeSolrQuery
argument_list|(
name|cloudClient
argument_list|,
literal|"*:*"
argument_list|)
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"--solr-home-dir="
operator|+
name|MINIMR_CONF_DIR
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--output-dir="
operator|+
name|outDir
operator|.
name|toString
argument_list|()
block|,
literal|"--shards"
block|,
literal|"2"
block|,
literal|"--mappers=3"
block|,
literal|"--verbose"
block|,
literal|"--go-live"
block|,
literal|"--go-live-threads"
block|,
name|Integer
operator|.
name|toString
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|15
argument_list|)
operator|+
literal|1
argument_list|)
block|,
name|dataDir
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|args
operator|=
name|prependInitialArgs
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|argList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|getShardUrlArgs
argument_list|(
name|argList
argument_list|,
name|replicatedCollection
argument_list|)
expr_stmt|;
name|args
operator|=
name|concat
argument_list|(
name|args
argument_list|,
name|argList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|tool
operator|=
operator|new
name|MapReduceIndexerTool
argument_list|()
expr_stmt|;
name|res
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|jobConf
argument_list|,
name|tool
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tool
operator|.
name|job
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tool
operator|.
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|checkConsistency
argument_list|(
name|replicatedCollection
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RECORD_COUNT
argument_list|,
name|executeSolrQuery
argument_list|(
name|cloudClient
argument_list|,
literal|"*:*"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getShardUrlArgs
specifier|private
name|void
name|getShardUrlArgs
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getShardCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"--shard-url"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|cloudJettys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|url
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|executeSolrQuery
specifier|private
name|SolrDocumentList
name|executeSolrQuery
parameter_list|(
name|SolrClient
name|collection
parameter_list|,
name|String
name|queryString
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
name|queryString
argument_list|)
operator|.
name|setRows
argument_list|(
literal|2
operator|*
name|RECORD_COUNT
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"id"
argument_list|,
name|ORDER
operator|.
name|asc
argument_list|)
decl_stmt|;
name|QueryResponse
name|response
init|=
name|collection
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getResults
argument_list|()
return|;
block|}
DECL|method|checkConsistency
specifier|private
name|void
name|checkConsistency
parameter_list|(
name|String
name|replicatedCollection
parameter_list|)
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|Slice
argument_list|>
name|slices
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlices
argument_list|(
name|replicatedCollection
argument_list|)
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|slices
control|)
block|{
name|Collection
argument_list|<
name|Replica
argument_list|>
name|replicas
init|=
name|slice
operator|.
name|getReplicas
argument_list|()
decl_stmt|;
name|long
name|found
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Replica
name|replica
range|:
name|replicas
control|)
block|{
try|try
init|(
name|HttpSolrClient
name|client
init|=
operator|new
name|HttpSolrClient
argument_list|(
operator|new
name|ZkCoreNodeProps
argument_list|(
name|replica
argument_list|)
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
init|)
block|{
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QueryResponse
name|replicaResults
init|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|long
name|count
init|=
name|replicaResults
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
if|if
condition|(
name|found
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
operator|+
literal|" is inconsistent "
operator|+
operator|new
name|ZkCoreNodeProps
argument_list|(
name|replica
argument_list|)
operator|.
name|getCoreUrl
argument_list|()
argument_list|,
name|found
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|found
operator|=
name|count
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getShardUrlArgs
specifier|private
name|void
name|getShardUrlArgs
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|,
name|String
name|replicatedCollection
parameter_list|)
block|{
name|Collection
argument_list|<
name|Slice
argument_list|>
name|slices
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlices
argument_list|(
name|replicatedCollection
argument_list|)
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|slices
control|)
block|{
name|Collection
argument_list|<
name|Replica
argument_list|>
name|replicas
init|=
name|slice
operator|.
name|getReplicas
argument_list|()
decl_stmt|;
for|for
control|(
name|Replica
name|replica
range|:
name|replicas
control|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"--shard-url"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
operator|new
name|ZkCoreNodeProps
argument_list|(
name|replica
argument_list|)
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|upAvroFile
specifier|private
name|Path
name|upAvroFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|inDir
parameter_list|,
name|String
name|DATADIR
parameter_list|,
name|Path
name|dataDir
parameter_list|,
name|String
name|localFile
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedEncodingException
block|{
name|Path
name|INPATH
init|=
operator|new
name|Path
argument_list|(
name|inDir
argument_list|,
literal|"input.txt"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|INPATH
argument_list|)
decl_stmt|;
name|Writer
name|wr
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|wr
operator|.
name|write
argument_list|(
name|DATADIR
operator|+
name|File
operator|.
name|separator
operator|+
name|localFile
argument_list|)
expr_stmt|;
name|wr
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|dataDir
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|DOCUMENTS_DIR
argument_list|,
name|localFile
argument_list|)
argument_list|,
name|dataDir
argument_list|)
expr_stmt|;
return|return
name|INPATH
return|;
block|}
annotation|@
name|Override
DECL|method|createJetty
specifier|public
name|JettySolrRunner
name|createJetty
parameter_list|(
name|File
name|solrHome
parameter_list|,
name|String
name|dataDir
parameter_list|,
name|String
name|shardList
parameter_list|,
name|String
name|solrConfigOverride
parameter_list|,
name|String
name|schemaOverride
parameter_list|)
throws|throws
name|Exception
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
if|if
condition|(
name|solrConfigOverride
operator|!=
literal|null
condition|)
name|props
operator|.
name|setProperty
argument_list|(
literal|"solrconfig"
argument_list|,
name|solrConfigOverride
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaOverride
operator|!=
literal|null
condition|)
name|props
operator|.
name|setProperty
argument_list|(
literal|"schema"
argument_list|,
name|schemaOverride
argument_list|)
expr_stmt|;
if|if
condition|(
name|shardList
operator|!=
literal|null
condition|)
name|props
operator|.
name|setProperty
argument_list|(
literal|"shards"
argument_list|,
name|shardList
argument_list|)
expr_stmt|;
name|String
name|collection
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"collection"
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
name|collection
operator|=
literal|"collection1"
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"collection"
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|jetty
init|=
operator|new
name|JettySolrRunner
argument_list|(
name|solrHome
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|props
argument_list|,
name|buildJettyConfig
argument_list|(
name|context
argument_list|)
argument_list|)
decl_stmt|;
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|jetty
return|;
block|}
DECL|method|putConfig
specifier|private
specifier|static
name|void
name|putConfig
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|File
name|solrhome
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|solrhome
argument_list|,
name|name
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|putConfig
specifier|private
specifier|static
name|void
name|putConfig
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|File
name|solrhome
parameter_list|,
name|String
name|srcName
parameter_list|,
name|String
name|destName
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|solrhome
argument_list|,
literal|"conf"
operator|+
name|File
operator|.
name|separator
operator|+
name|srcName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// LOG.info("skipping " + file.getAbsolutePath() +
comment|// " because it doesn't exist");
return|return;
block|}
name|String
name|destPath
init|=
literal|"/configs/conf1/"
operator|+
name|destName
decl_stmt|;
comment|// LOG.info("put " + file.getAbsolutePath() + " to " + destPath);
name|zkClient
operator|.
name|makePath
argument_list|(
name|destPath
argument_list|,
name|file
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|uploadConfFiles
specifier|private
name|void
name|uploadConfFiles
parameter_list|()
throws|throws
name|Exception
block|{
comment|// upload our own config files
name|SolrZkClient
name|zkClient
init|=
operator|new
name|SolrZkClient
argument_list|(
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
operator|new
name|File
argument_list|(
name|RESOURCES_DIR
operator|+
literal|"/solr/solrcloud"
argument_list|)
argument_list|,
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"elevate.xml"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_en.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_ar.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_bg.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_ca.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_cz.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_da.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_el.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_es.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_eu.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_de.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_fa.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_fi.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_fr.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_ga.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_gl.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_hi.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_hu.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_hy.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_id.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_it.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_ja.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_lv.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_nl.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_no.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_pt.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_ro.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_ru.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_sv.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_th.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stopwords_tr.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/contractions_ca.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/contractions_fr.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/contractions_ga.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/contractions_it.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/stemdict_nl.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"lang/hyphenations_ga.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"stopwords.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"protwords.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"currency.xml"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"open-exchange-rates.json"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"mapping-ISOLatin1Accent.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"old_synonyms.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
name|zkClient
argument_list|,
name|MINIMR_CONF_DIR
argument_list|,
literal|"synonyms.txt"
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|concat
specifier|protected
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|concat
parameter_list|(
name|T
index|[]
modifier|...
name|arrays
parameter_list|)
block|{
if|if
condition|(
name|arrays
operator|.
name|length
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|Class
name|clazz
init|=
literal|null
decl_stmt|;
name|int
name|length
init|=
literal|0
decl_stmt|;
for|for
control|(
name|T
index|[]
name|array
range|:
name|arrays
control|)
block|{
name|clazz
operator|=
name|array
operator|.
name|getClass
argument_list|()
expr_stmt|;
name|length
operator|+=
name|array
operator|.
name|length
expr_stmt|;
block|}
name|T
index|[]
name|result
init|=
operator|(
name|T
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|clazz
operator|.
name|getComponentType
argument_list|()
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|T
index|[]
name|array
range|:
name|arrays
control|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|pos
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|array
operator|.
name|length
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|createAlias
specifier|private
name|NamedList
argument_list|<
name|Object
argument_list|>
name|createAlias
parameter_list|(
name|String
name|alias
parameter_list|,
name|String
name|collections
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"collections"
argument_list|,
name|collections
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|alias
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|CREATEALIAS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
return|return
name|cloudClient
operator|.
name|request
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
end_class
end_unit
