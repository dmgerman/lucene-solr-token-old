begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.hadoop.hack
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
operator|.
name|hack
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobPriority
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MapTaskCompletionEventsUpdate
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskCompletionEvent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_comment
comment|/**  * This class is an MR2 replacement for older MR1 MiniMRCluster, that was used  * by tests prior to MR2. This replacement class uses the new MiniMRYarnCluster  * in MR2 but provides the same old MR1 interface, so tests can be migrated from  * MR1 to MR2 with minimal changes.  *  * Due to major differences between MR1 and MR2, a number of methods are either  * unimplemented/unsupported or were re-implemented to provide wrappers around  * MR2 functionality.  *  * @deprecated Use {@link org.apache.hadoop.mapred.MiniMRClientClusterFactory}  * instead  */
end_comment
begin_class
annotation|@
name|Deprecated
DECL|class|MiniMRCluster
specifier|public
class|class
name|MiniMRCluster
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MiniMRCluster
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mrClientCluster
specifier|private
name|MiniMRClientCluster
name|mrClientCluster
decl_stmt|;
DECL|method|getTaskTrackerLocalDir
specifier|public
name|String
name|getTaskTrackerLocalDir
parameter_list|(
name|int
name|taskTracker
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|getTaskTrackerLocalDirs
specifier|public
name|String
index|[]
name|getTaskTrackerLocalDirs
parameter_list|(
name|int
name|taskTracker
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|class|JobTrackerRunner
class|class
name|JobTrackerRunner
block|{
comment|// Mock class
block|}
DECL|class|TaskTrackerRunner
class|class
name|TaskTrackerRunner
block|{
comment|// Mock class
block|}
DECL|method|getJobTrackerRunner
specifier|public
name|JobTrackerRunner
name|getJobTrackerRunner
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|getTaskTrackerRunner
name|TaskTrackerRunner
name|getTaskTrackerRunner
parameter_list|(
name|int
name|id
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|getNumTaskTrackers
specifier|public
name|int
name|getNumTaskTrackers
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|setInlineCleanupThreads
specifier|public
name|void
name|setInlineCleanupThreads
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|waitUntilIdle
specifier|public
name|void
name|waitUntilIdle
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|waitTaskTrackers
specifier|private
name|void
name|waitTaskTrackers
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|getJobTrackerPort
specifier|public
name|int
name|getJobTrackerPort
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|createJobConf
specifier|public
name|JobConf
name|createJobConf
parameter_list|()
block|{
name|JobConf
name|jobConf
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jobConf
operator|=
operator|new
name|JobConf
argument_list|(
name|mrClientCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|jobConf
return|;
block|}
DECL|method|createJobConf
specifier|public
name|JobConf
name|createJobConf
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
name|JobConf
name|jobConf
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jobConf
operator|=
operator|new
name|JobConf
argument_list|(
name|mrClientCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|jobConf
return|;
block|}
DECL|method|configureJobConf
specifier|static
name|JobConf
name|configureJobConf
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|String
name|namenode
parameter_list|,
name|int
name|jobTrackerPort
parameter_list|,
name|int
name|jobTrackerInfoPort
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|MiniMRCluster
specifier|public
name|MiniMRCluster
parameter_list|(
name|int
name|numTaskTrackers
parameter_list|,
name|String
name|namenode
parameter_list|,
name|int
name|numDir
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|numTaskTrackers
argument_list|,
name|namenode
argument_list|,
name|numDir
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|)
expr_stmt|;
block|}
DECL|method|MiniMRCluster
specifier|public
name|MiniMRCluster
parameter_list|(
name|int
name|numTaskTrackers
parameter_list|,
name|String
name|namenode
parameter_list|,
name|int
name|numDir
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|JobConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|numTaskTrackers
argument_list|,
name|namenode
argument_list|,
name|numDir
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|MiniMRCluster
specifier|public
name|MiniMRCluster
parameter_list|(
name|int
name|numTaskTrackers
parameter_list|,
name|String
name|namenode
parameter_list|,
name|int
name|numDir
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|numTaskTrackers
argument_list|,
name|namenode
argument_list|,
name|numDir
argument_list|)
expr_stmt|;
block|}
DECL|method|MiniMRCluster
specifier|public
name|MiniMRCluster
parameter_list|(
name|int
name|jobTrackerPort
parameter_list|,
name|int
name|taskTrackerPort
parameter_list|,
name|int
name|numTaskTrackers
parameter_list|,
name|String
name|namenode
parameter_list|,
name|int
name|numDir
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|jobTrackerPort
argument_list|,
name|taskTrackerPort
argument_list|,
name|numTaskTrackers
argument_list|,
name|namenode
argument_list|,
name|numDir
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|MiniMRCluster
specifier|public
name|MiniMRCluster
parameter_list|(
name|int
name|jobTrackerPort
parameter_list|,
name|int
name|taskTrackerPort
parameter_list|,
name|int
name|numTaskTrackers
parameter_list|,
name|String
name|namenode
parameter_list|,
name|int
name|numDir
parameter_list|,
name|String
index|[]
name|racks
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|jobTrackerPort
argument_list|,
name|taskTrackerPort
argument_list|,
name|numTaskTrackers
argument_list|,
name|namenode
argument_list|,
name|numDir
argument_list|,
name|racks
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|MiniMRCluster
specifier|public
name|MiniMRCluster
parameter_list|(
name|int
name|jobTrackerPort
parameter_list|,
name|int
name|taskTrackerPort
parameter_list|,
name|int
name|numTaskTrackers
parameter_list|,
name|String
name|namenode
parameter_list|,
name|int
name|numDir
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|jobTrackerPort
argument_list|,
name|taskTrackerPort
argument_list|,
name|numTaskTrackers
argument_list|,
name|namenode
argument_list|,
name|numDir
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|MiniMRCluster
specifier|public
name|MiniMRCluster
parameter_list|(
name|int
name|jobTrackerPort
parameter_list|,
name|int
name|taskTrackerPort
parameter_list|,
name|int
name|numTaskTrackers
parameter_list|,
name|String
name|namenode
parameter_list|,
name|int
name|numDir
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|jobTrackerPort
argument_list|,
name|taskTrackerPort
argument_list|,
name|numTaskTrackers
argument_list|,
name|namenode
argument_list|,
name|numDir
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
name|ugi
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|MiniMRCluster
specifier|public
name|MiniMRCluster
parameter_list|(
name|int
name|jobTrackerPort
parameter_list|,
name|int
name|taskTrackerPort
parameter_list|,
name|int
name|numTaskTrackers
parameter_list|,
name|String
name|namenode
parameter_list|,
name|int
name|numDir
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|JobConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|jobTrackerPort
argument_list|,
name|taskTrackerPort
argument_list|,
name|numTaskTrackers
argument_list|,
name|namenode
argument_list|,
name|numDir
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
name|ugi
argument_list|,
name|conf
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|MiniMRCluster
specifier|public
name|MiniMRCluster
parameter_list|(
name|int
name|jobTrackerPort
parameter_list|,
name|int
name|taskTrackerPort
parameter_list|,
name|int
name|numTaskTrackers
parameter_list|,
name|String
name|namenode
parameter_list|,
name|int
name|numDir
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|int
name|numTrackerToExclude
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|jobTrackerPort
argument_list|,
name|taskTrackerPort
argument_list|,
name|numTaskTrackers
argument_list|,
name|namenode
argument_list|,
name|numDir
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
name|ugi
argument_list|,
name|conf
argument_list|,
name|numTrackerToExclude
argument_list|,
operator|new
name|Clock
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|MiniMRCluster
specifier|public
name|MiniMRCluster
parameter_list|(
name|int
name|jobTrackerPort
parameter_list|,
name|int
name|taskTrackerPort
parameter_list|,
name|int
name|numTaskTrackers
parameter_list|,
name|String
name|namenode
parameter_list|,
name|int
name|numDir
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|int
name|numTrackerToExclude
parameter_list|,
name|Clock
name|clock
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
name|conf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|namenode
argument_list|)
expr_stmt|;
name|String
name|identifier
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"_"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|LuceneTestCase
operator|.
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|mrClientCluster
operator|=
name|MiniMRClientClusterFactory
operator|.
name|create
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
name|identifier
argument_list|,
name|numTaskTrackers
argument_list|,
name|conf
argument_list|,
operator|new
name|File
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"testWorkDir"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getUgi
specifier|public
name|UserGroupInformation
name|getUgi
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|getTaskCompletionEvents
specifier|public
name|TaskCompletionEvent
index|[]
name|getTaskCompletionEvents
parameter_list|(
name|JobID
name|id
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|setJobPriority
specifier|public
name|void
name|setJobPriority
parameter_list|(
name|JobID
name|jobId
parameter_list|,
name|JobPriority
name|priority
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|getJobPriority
specifier|public
name|JobPriority
name|getJobPriority
parameter_list|(
name|JobID
name|jobId
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|getJobFinishTime
specifier|public
name|long
name|getJobFinishTime
parameter_list|(
name|JobID
name|jobId
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|initializeJob
specifier|public
name|void
name|initializeJob
parameter_list|(
name|JobID
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|getMapTaskCompletionEventsUpdates
specifier|public
name|MapTaskCompletionEventsUpdate
name|getMapTaskCompletionEventsUpdates
parameter_list|(
name|int
name|index
parameter_list|,
name|JobID
name|jobId
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|getJobTrackerConf
specifier|public
name|JobConf
name|getJobTrackerConf
parameter_list|()
block|{
name|JobConf
name|jobConf
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jobConf
operator|=
operator|new
name|JobConf
argument_list|(
name|mrClientCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|jobConf
return|;
block|}
DECL|method|getFaultCount
specifier|public
name|int
name|getFaultCount
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|startJobTracker
specifier|public
name|void
name|startJobTracker
parameter_list|()
block|{
comment|// Do nothing
block|}
DECL|method|startJobTracker
specifier|public
name|void
name|startJobTracker
parameter_list|(
name|boolean
name|wait
parameter_list|)
block|{
comment|// Do nothing
block|}
DECL|method|stopJobTracker
specifier|public
name|void
name|stopJobTracker
parameter_list|()
block|{
comment|// Do nothing
block|}
DECL|method|stopTaskTracker
specifier|public
name|void
name|stopTaskTracker
parameter_list|(
name|int
name|id
parameter_list|)
block|{
comment|// Do nothing
block|}
DECL|method|startTaskTracker
specifier|public
name|void
name|startTaskTracker
parameter_list|(
name|String
name|host
parameter_list|,
name|String
name|rack
parameter_list|,
name|int
name|idx
parameter_list|,
name|int
name|numDir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Do nothing
block|}
DECL|method|addTaskTracker
name|void
name|addTaskTracker
parameter_list|(
name|TaskTrackerRunner
name|taskTracker
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|getTaskTrackerID
name|int
name|getTaskTrackerID
parameter_list|(
name|String
name|trackerName
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|shutdown
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
try|try
block|{
name|mrClientCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Clock
specifier|static
class|class
name|Clock
block|{
DECL|method|getTime
name|long
name|getTime
parameter_list|()
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
block|}
block|}
end_class
end_unit
