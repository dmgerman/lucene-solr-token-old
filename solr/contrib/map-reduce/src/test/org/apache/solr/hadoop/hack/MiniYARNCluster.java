begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.hadoop.hack
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
operator|.
name|hack
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ShellCommandExecutor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|RPCUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceTracker
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeHealthCheckerService
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeStatusUpdater
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeStatusUpdaterImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceTrackerService
import|;
end_import
begin_class
DECL|class|MiniYARNCluster
specifier|public
class|class
name|MiniYARNCluster
extends|extends
name|CompositeService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MiniYARNCluster
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// temp fix until metrics system can auto-detect itself running in unit test:
static|static
block|{
name|DefaultMetricsSystem
operator|.
name|setMiniClusterMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|field|nodeManagers
specifier|private
name|NodeManager
index|[]
name|nodeManagers
decl_stmt|;
DECL|field|resourceManager
specifier|private
name|ResourceManager
name|resourceManager
decl_stmt|;
DECL|field|resourceManagerWrapper
specifier|private
name|ResourceManagerWrapper
name|resourceManagerWrapper
decl_stmt|;
DECL|field|testWorkDir
specifier|private
name|File
name|testWorkDir
decl_stmt|;
comment|// Number of nm-local-dirs per nodemanager
DECL|field|numLocalDirs
specifier|private
name|int
name|numLocalDirs
decl_stmt|;
comment|// Number of nm-log-dirs per nodemanager
DECL|field|numLogDirs
specifier|private
name|int
name|numLogDirs
decl_stmt|;
comment|/**    * @param testName name of the test    * @param noOfNodeManagers the number of node managers in the cluster    * @param numLocalDirs the number of nm-local-dirs per nodemanager    * @param numLogDirs the number of nm-log-dirs per nodemanager    */
DECL|method|MiniYARNCluster
specifier|public
name|MiniYARNCluster
parameter_list|(
name|String
name|testName
parameter_list|,
name|int
name|noOfNodeManagers
parameter_list|,
name|int
name|numLocalDirs
parameter_list|,
name|int
name|numLogDirs
parameter_list|,
name|File
name|testWorkDir
parameter_list|)
block|{
name|super
argument_list|(
name|testName
operator|.
name|replace
argument_list|(
literal|"$"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|numLocalDirs
operator|=
name|numLocalDirs
expr_stmt|;
name|this
operator|.
name|numLogDirs
operator|=
name|numLogDirs
expr_stmt|;
name|String
name|testSubDir
init|=
name|testName
operator|.
name|replace
argument_list|(
literal|"$"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|File
name|targetWorkDir
init|=
operator|new
name|File
argument_list|(
name|testWorkDir
argument_list|,
name|testSubDir
argument_list|)
decl_stmt|;
try|try
block|{
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|targetWorkDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"COULD NOT CLEANUP"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"could not cleanup test dir: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
comment|// The test working directory can exceed the maximum path length supported
comment|// by some Windows APIs and cmd.exe (260 characters).  To work around this,
comment|// create a symlink in temporary storage with a much shorter path,
comment|// targeting the full path to the test working directory.  Then, use the
comment|// symlink as the test working directory.
name|String
name|targetPath
init|=
name|targetWorkDir
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|File
name|link
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|linkPath
init|=
name|link
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
try|try
block|{
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|linkPath
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"could not cleanup symlink: "
operator|+
name|linkPath
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Guarantee target exists before creating symlink.
name|targetWorkDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|ShellCommandExecutor
name|shexec
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|Shell
operator|.
name|getSymlinkCommand
argument_list|(
name|targetPath
argument_list|,
name|linkPath
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"failed to create symlink from %s to %s, shell output: %s"
argument_list|,
name|linkPath
argument_list|,
name|targetPath
argument_list|,
name|shexec
operator|.
name|getOutput
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|testWorkDir
operator|=
name|link
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|testWorkDir
operator|=
name|targetWorkDir
expr_stmt|;
block|}
name|resourceManagerWrapper
operator|=
operator|new
name|ResourceManagerWrapper
argument_list|()
expr_stmt|;
name|addService
argument_list|(
name|resourceManagerWrapper
argument_list|)
expr_stmt|;
name|nodeManagers
operator|=
operator|new
name|CustomNodeManager
index|[
name|noOfNodeManagers
index|]
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|noOfNodeManagers
condition|;
name|index
operator|++
control|)
block|{
name|addService
argument_list|(
operator|new
name|NodeManagerWrapper
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|nodeManagers
index|[
name|index
index|]
operator|=
operator|new
name|CustomNodeManager
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|serviceInit
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
operator|instanceof
name|YarnConfiguration
condition|?
name|conf
else|:
operator|new
name|YarnConfiguration
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getTestWorkDir
specifier|public
name|File
name|getTestWorkDir
parameter_list|()
block|{
return|return
name|testWorkDir
return|;
block|}
DECL|method|getResourceManager
specifier|public
name|ResourceManager
name|getResourceManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|resourceManager
return|;
block|}
DECL|method|getNodeManager
specifier|public
name|NodeManager
name|getNodeManager
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|this
operator|.
name|nodeManagers
index|[
name|i
index|]
return|;
block|}
DECL|method|getHostname
specifier|public
specifier|static
name|String
name|getHostname
parameter_list|()
block|{
try|try
block|{
return|return
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|class|ResourceManagerWrapper
specifier|private
class|class
name|ResourceManagerWrapper
extends|extends
name|AbstractService
block|{
DECL|method|ResourceManagerWrapper
specifier|public
name|ResourceManagerWrapper
parameter_list|()
block|{
name|super
argument_list|(
name|ResourceManagerWrapper
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart
specifier|public
specifier|synchronized
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|getConfig
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|IS_MINI_YARN_CLUSTER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getConfig
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_MINICLUSTER_FIXED_PORTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_MINICLUSTER_FIXED_PORTS
argument_list|)
condition|)
block|{
comment|// pick free random ports.
name|String
name|hostname
init|=
name|MiniYARNCluster
operator|.
name|getHostname
argument_list|()
decl_stmt|;
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
name|hostname
operator|+
literal|":0"
argument_list|)
expr_stmt|;
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADMIN_ADDRESS
argument_list|,
name|hostname
operator|+
literal|":0"
argument_list|)
expr_stmt|;
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ADDRESS
argument_list|,
name|hostname
operator|+
literal|":0"
argument_list|)
expr_stmt|;
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESOURCE_TRACKER_ADDRESS
argument_list|,
name|hostname
operator|+
literal|":0"
argument_list|)
expr_stmt|;
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_ADDRESS
argument_list|,
name|hostname
operator|+
literal|":0"
argument_list|)
expr_stmt|;
block|}
name|resourceManager
operator|=
operator|new
name|ResourceManager
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doSecureLogin
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Don't try to login using keytab in the testcase.
block|}
empty_stmt|;
block|}
expr_stmt|;
name|resourceManager
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|resourceManager
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|INITED
operator|&&
name|waitCount
operator|++
operator|<
literal|60
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for RM to start..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resourceManager
operator|.
name|getServiceState
argument_list|()
operator|!=
name|STATE
operator|.
name|STARTED
condition|)
block|{
comment|// RM could have failed.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"ResourceManager failed to start. Final state is "
operator|+
name|resourceManager
operator|.
name|getServiceState
argument_list|()
argument_list|)
throw|;
block|}
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"MiniYARN ResourceManager address: "
operator|+
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MiniYARN ResourceManager web address: "
operator|+
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop
specifier|public
specifier|synchronized
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|resourceManager
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
comment|// On Windows, clean up the short temporary symlink that was created to
comment|// work around path length limitation.
name|String
name|testWorkDirPath
init|=
name|testWorkDir
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
try|try
block|{
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|testWorkDirPath
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"could not cleanup symlink: "
operator|+
name|testWorkDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|NodeManagerWrapper
specifier|private
class|class
name|NodeManagerWrapper
extends|extends
name|AbstractService
block|{
DECL|field|index
name|int
name|index
init|=
literal|0
decl_stmt|;
DECL|method|NodeManagerWrapper
specifier|public
name|NodeManagerWrapper
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|super
argument_list|(
name|NodeManagerWrapper
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"_"
operator|+
name|i
argument_list|)
expr_stmt|;
name|index
operator|=
name|i
expr_stmt|;
block|}
DECL|method|serviceInit
specifier|public
specifier|synchronized
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create local/log directories      * @param dirType type of directories i.e. local dirs or log dirs       * @param numDirs number of directories      * @return the created directories as a comma delimited String      */
DECL|method|prepareDirs
specifier|private
name|String
name|prepareDirs
parameter_list|(
name|String
name|dirType
parameter_list|,
name|int
name|numDirs
parameter_list|)
block|{
name|File
index|[]
name|dirs
init|=
operator|new
name|File
index|[
name|numDirs
index|]
decl_stmt|;
name|String
name|dirsString
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDirs
condition|;
name|i
operator|++
control|)
block|{
name|dirs
index|[
name|i
index|]
operator|=
operator|new
name|File
argument_list|(
name|testWorkDir
argument_list|,
name|MiniYARNCluster
operator|.
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|dirType
operator|+
literal|"Dir-nm-"
operator|+
name|index
operator|+
literal|"_"
operator|+
name|i
argument_list|)
expr_stmt|;
name|dirs
index|[
name|i
index|]
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created "
operator|+
name|dirType
operator|+
literal|"Dir in "
operator|+
name|dirs
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|delimiter
init|=
operator|(
name|i
operator|>
literal|0
operator|)
condition|?
literal|","
else|:
literal|""
decl_stmt|;
name|dirsString
operator|=
name|dirsString
operator|.
name|concat
argument_list|(
name|delimiter
operator|+
name|dirs
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|dirsString
return|;
block|}
DECL|method|serviceStart
specifier|public
specifier|synchronized
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
comment|// create nm-local-dirs and configure them for the nodemanager
name|String
name|localDirsString
init|=
name|prepareDirs
argument_list|(
literal|"local"
argument_list|,
name|numLocalDirs
argument_list|)
decl_stmt|;
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|localDirsString
argument_list|)
expr_stmt|;
comment|// create nm-log-dirs and configure them for the nodemanager
name|String
name|logDirsString
init|=
name|prepareDirs
argument_list|(
literal|"log"
argument_list|,
name|numLogDirs
argument_list|)
decl_stmt|;
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|logDirsString
argument_list|)
expr_stmt|;
name|File
name|remoteLogDir
init|=
operator|new
name|File
argument_list|(
name|testWorkDir
argument_list|,
name|MiniYARNCluster
operator|.
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|"-remoteLogDir-nm-"
operator|+
name|index
argument_list|)
decl_stmt|;
name|remoteLogDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|remoteLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// By default AM + 2 containers
name|getConfig
argument_list|()
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PMEM_MB
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_ADDRESS
argument_list|,
name|MiniYARNCluster
operator|.
name|getHostname
argument_list|()
operator|+
literal|":0"
argument_list|)
expr_stmt|;
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCALIZER_ADDRESS
argument_list|,
name|MiniYARNCluster
operator|.
name|getHostname
argument_list|()
operator|+
literal|":0"
argument_list|)
expr_stmt|;
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_WEBAPP_ADDRESS
argument_list|,
name|MiniYARNCluster
operator|.
name|getHostname
argument_list|()
operator|+
literal|":0"
argument_list|)
expr_stmt|;
comment|// Disable resource checks by default
if|if
condition|(
operator|!
name|getConfig
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_MINICLUSTER_CONTROL_RESOURCE_MONITORING
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_MINICLUSTER_CONTROL_RESOURCE_MONITORING
argument_list|)
condition|)
block|{
name|getConfig
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PMEM_CHECK_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getConfig
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_VMEM_CHECK_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting NM: "
operator|+
name|index
argument_list|)
expr_stmt|;
name|nodeManagers
index|[
name|index
index|]
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|nodeManagers
index|[
name|index
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|nodeManagers
index|[
name|index
index|]
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|INITED
operator|&&
name|waitCount
operator|++
operator|<
literal|60
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for NM "
operator|+
name|index
operator|+
literal|" to start..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeManagers
index|[
name|index
index|]
operator|.
name|getServiceState
argument_list|()
operator|!=
name|STATE
operator|.
name|STARTED
condition|)
block|{
comment|// RM could have failed.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"NodeManager "
operator|+
name|index
operator|+
literal|" failed to start"
argument_list|)
throw|;
block|}
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|serviceStop
specifier|public
specifier|synchronized
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|nodeManagers
index|[
name|index
index|]
operator|!=
literal|null
condition|)
block|{
name|nodeManagers
index|[
name|index
index|]
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|CustomNodeManager
specifier|private
class|class
name|CustomNodeManager
extends|extends
name|NodeManager
block|{
annotation|@
name|Override
DECL|method|doSecureLogin
specifier|protected
name|void
name|doSecureLogin
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Don't try to login using keytab in the testcase.
block|}
empty_stmt|;
annotation|@
name|Override
DECL|method|createNodeStatusUpdater
specifier|protected
name|NodeStatusUpdater
name|createNodeStatusUpdater
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|)
block|{
return|return
operator|new
name|NodeStatusUpdaterImpl
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|healthChecker
argument_list|,
name|metrics
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ResourceTracker
name|getRMClient
parameter_list|()
block|{
specifier|final
name|ResourceTrackerService
name|rt
init|=
name|resourceManager
operator|.
name|getResourceTrackerService
argument_list|()
decl_stmt|;
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// For in-process communication without RPC
return|return
operator|new
name|ResourceTracker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeHeartbeatResponse
name|nodeHeartbeat
parameter_list|(
name|NodeHeartbeatRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|NodeHeartbeatResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|NodeHeartbeatResponse
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|response
operator|=
name|rt
operator|.
name|nodeHeartbeat
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception in heartbeat from node "
operator|+
name|request
operator|.
name|getNodeStatus
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|response
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegisterNodeManagerResponse
name|registerNodeManager
parameter_list|(
name|RegisterNodeManagerRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|RegisterNodeManagerResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RegisterNodeManagerResponse
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|response
operator|=
name|rt
operator|.
name|registerNodeManager
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception in node registration from "
operator|+
name|request
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|response
return|;
block|}
block|}
return|;
block|}
empty_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|stopRMProxy
parameter_list|()
block|{
return|return;
block|}
block|}
return|;
block|}
empty_stmt|;
block|}
block|}
end_class
end_unit
