begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.hadoop
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|JarFinder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractZkTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
operator|.
name|hack
operator|.
name|MiniMRCluster
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|ExternalPaths
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakAction
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakAction
operator|.
name|Action
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakLingering
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakScope
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakScope
operator|.
name|Scope
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakZombies
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakZombies
operator|.
name|Consequence
import|;
end_import
begin_class
annotation|@
name|ThreadLeakAction
argument_list|(
block|{
name|Action
operator|.
name|WARN
block|}
argument_list|)
annotation|@
name|ThreadLeakLingering
argument_list|(
name|linger
operator|=
literal|0
argument_list|)
annotation|@
name|ThreadLeakZombies
argument_list|(
name|Consequence
operator|.
name|CONTINUE
argument_list|)
annotation|@
name|ThreadLeakScope
argument_list|(
name|Scope
operator|.
name|NONE
argument_list|)
annotation|@
name|Slow
DECL|class|MorphlineBasicMiniMRTest
specifier|public
class|class
name|MorphlineBasicMiniMRTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|ENABLE_LOCAL_JOB_RUNNER
specifier|private
specifier|static
specifier|final
name|boolean
name|ENABLE_LOCAL_JOB_RUNNER
init|=
literal|false
decl_stmt|;
comment|// for debugging only
DECL|field|RESOURCES_DIR
specifier|private
specifier|static
specifier|final
name|String
name|RESOURCES_DIR
init|=
name|ExternalPaths
operator|.
name|SOURCE_HOME
operator|+
literal|"/contrib/map-reduce/src/test-files"
decl_stmt|;
DECL|field|DOCUMENTS_DIR
specifier|private
specifier|static
specifier|final
name|String
name|DOCUMENTS_DIR
init|=
name|RESOURCES_DIR
operator|+
literal|"/test-documents"
decl_stmt|;
DECL|field|MINIMR_CONF_DIR
specifier|private
specifier|static
specifier|final
name|File
name|MINIMR_CONF_DIR
init|=
operator|new
name|File
argument_list|(
name|RESOURCES_DIR
operator|+
literal|"/solr/minimr"
argument_list|)
decl_stmt|;
DECL|field|SEARCH_ARCHIVES_JAR
specifier|private
specifier|static
specifier|final
name|String
name|SEARCH_ARCHIVES_JAR
init|=
name|JarFinder
operator|.
name|getJar
argument_list|(
name|MapReduceIndexerTool
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|dfsCluster
specifier|private
specifier|static
name|MiniDFSCluster
name|dfsCluster
init|=
literal|null
decl_stmt|;
DECL|field|mrCluster
specifier|private
specifier|static
name|MiniMRCluster
name|mrCluster
init|=
literal|null
decl_stmt|;
DECL|field|numRuns
specifier|private
specifier|static
name|int
name|numRuns
init|=
literal|0
decl_stmt|;
DECL|field|inputAvroFile
specifier|private
specifier|final
name|String
name|inputAvroFile
decl_stmt|;
DECL|field|count
specifier|private
specifier|final
name|int
name|count
decl_stmt|;
DECL|field|tempDir
specifier|private
specifier|static
name|String
name|tempDir
decl_stmt|;
DECL|field|solrHomeDirectory
specifier|private
specifier|static
specifier|final
name|File
name|solrHomeDirectory
init|=
operator|new
name|File
argument_list|(
name|TEMP_DIR
argument_list|,
name|MorphlineBasicMiniMRTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|createTool
specifier|protected
name|MapReduceIndexerTool
name|createTool
parameter_list|()
block|{
return|return
operator|new
name|MapReduceIndexerTool
argument_list|()
return|;
block|}
DECL|method|MorphlineBasicMiniMRTest
specifier|public
name|MorphlineBasicMiniMRTest
parameter_list|()
block|{
name|int
name|data
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|data
condition|)
block|{
case|case
literal|0
case|:
name|this
operator|.
name|inputAvroFile
operator|=
literal|"sample-statuses-20120906-141433.avro"
expr_stmt|;
name|this
operator|.
name|count
operator|=
literal|2
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|this
operator|.
name|inputAvroFile
operator|=
literal|"sample-statuses-20120521-100919.avro"
expr_stmt|;
name|this
operator|.
name|count
operator|=
literal|20
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|this
operator|.
name|inputAvroFile
operator|=
literal|"sample-statuses-20120906-141433-medium.avro"
expr_stmt|;
name|this
operator|.
name|count
operator|=
literal|2104
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Test setup is broken"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|BeforeClass
DECL|method|setupClass
specifier|public
specifier|static
name|void
name|setupClass
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"Currently this test can only be run without the lucene test security policy in place"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.security.manager"
argument_list|,
literal|""
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assumeFalse
argument_list|(
literal|"HDFS tests were disabled by -Dtests.disableHdfs"
argument_list|,
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"tests.disableHdfs"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assumeFalse
argument_list|(
literal|"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301"
argument_list|,
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA8
argument_list|)
expr_stmt|;
name|assumeFalse
argument_list|(
literal|"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vm.info"
argument_list|,
literal|"<?>"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"IBM J9"
argument_list|)
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|SOLRHOME
operator|=
name|solrHomeDirectory
expr_stmt|;
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
name|MINIMR_CONF_DIR
argument_list|,
name|solrHomeDirectory
argument_list|)
expr_stmt|;
name|tempDir
operator|=
name|TEMP_DIR
operator|+
literal|"/test-morphlines-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|tempDir
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|RESOURCES_DIR
operator|+
literal|"/custom-mimetypes.xml"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|tempDir
operator|+
literal|"/custom-mimetypes.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|MRUnitBase
operator|.
name|setupMorphline
argument_list|(
name|tempDir
argument_list|,
literal|"test-morphlines/solrCellDocumentTypes"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"hadoop.log.dir"
argument_list|,
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
literal|"logs"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|taskTrackers
init|=
literal|1
decl_stmt|;
name|int
name|dataNodes
init|=
literal|2
decl_stmt|;
comment|//    String proxyUser = System.getProperty("user.name");
comment|//    String proxyGroup = "g";
comment|//    StringBuilder sb = new StringBuilder();
comment|//    sb.append("127.0.0.1,localhost");
comment|//    for (InetAddress i : InetAddress.getAllByName(InetAddress.getLocalHost().getHostName())) {
comment|//      sb.append(",").append(i.getCanonicalHostName());
comment|//    }
name|createTempDir
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
literal|"nm-local-dirs"
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.hdfs.blockcache.enabled"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"test.build.dir"
argument_list|,
name|dataDir
operator|+
name|File
operator|.
name|separator
operator|+
literal|"hdfs"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"test-build-dir"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"test.build.data"
argument_list|,
name|dataDir
operator|+
name|File
operator|.
name|separator
operator|+
literal|"hdfs"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"build"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"test.cache.data"
argument_list|,
name|dataDir
operator|+
name|File
operator|.
name|separator
operator|+
literal|"hdfs"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"cache"
argument_list|)
expr_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.block.access.token.enable"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.permissions"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|dataDir
operator|.
name|getPath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"nm-local-dirs"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOG_DIRS
argument_list|,
name|dataDir
operator|+
name|File
operator|.
name|separator
operator|+
literal|"nm-logs"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"testWorkDir"
argument_list|,
name|dataDir
operator|.
name|getPath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"testWorkDir"
argument_list|)
expr_stmt|;
name|dfsCluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
name|dataNodes
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileSystem
name|fileSystem
init|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|fileSystem
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user"
argument_list|)
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/hadoop/mapred/system"
argument_list|)
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|valueOf
argument_list|(
literal|"-rwxrwxrwx"
argument_list|)
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|valueOf
argument_list|(
literal|"-rwxrwxrwx"
argument_list|)
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/hadoop/mapred/system"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|valueOf
argument_list|(
literal|"-rwx------"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|nnURI
init|=
name|fileSystem
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|numDirs
init|=
literal|1
decl_stmt|;
name|String
index|[]
name|racks
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|hosts
init|=
literal|null
decl_stmt|;
name|mrCluster
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|taskTrackers
argument_list|,
name|nnURI
argument_list|,
name|numDirs
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|ProxyUsers
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|teardownClass
specifier|public
specifier|static
name|void
name|teardownClass
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.hdfs.blockcache.enabled"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"test.build.dir"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"test.build.data"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"test.cache.data"
argument_list|)
expr_stmt|;
if|if
condition|(
name|mrCluster
operator|!=
literal|null
condition|)
block|{
name|mrCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|mrCluster
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|dfsCluster
operator|!=
literal|null
condition|)
block|{
name|dfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|dfsCluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"hadoop.log.dir"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.hdfs.blockcache.enabled"
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|getJobConf
specifier|private
name|JobConf
name|getJobConf
parameter_list|()
block|{
return|return
name|mrCluster
operator|.
name|createJobConf
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testPathParts
specifier|public
name|void
name|testPathParts
parameter_list|()
throws|throws
name|Exception
block|{
comment|// see PathParts
name|FileSystem
name|fs
init|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|int
name|dfsClusterPort
init|=
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|dfsClusterPort
operator|>
literal|0
argument_list|)
expr_stmt|;
name|JobConf
name|jobConf
init|=
name|getJobConf
argument_list|()
decl_stmt|;
name|Configuration
name|simpleConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
for|for
control|(
name|Configuration
name|conf
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|jobConf
argument_list|,
name|simpleConf
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|queryAndFragment
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|""
argument_list|,
literal|"?key=value#fragment"
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|up
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|""
argument_list|,
literal|"../"
argument_list|)
control|)
block|{
name|String
name|down
init|=
name|up
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|"foo/"
else|:
literal|""
decl_stmt|;
name|String
name|uploadURL
init|=
literal|"hdfs://localhost:12345/user/foo/"
operator|+
name|up
operator|+
literal|"bar.txt"
operator|+
name|queryAndFragment
decl_stmt|;
name|PathParts
name|parts
init|=
operator|new
name|PathParts
argument_list|(
name|uploadURL
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|uploadURL
argument_list|,
name|parts
operator|.
name|getUploadURL
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/user/"
operator|+
name|down
operator|+
literal|"bar.txt"
argument_list|,
name|parts
operator|.
name|getURIPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar.txt"
argument_list|,
name|parts
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hdfs"
argument_list|,
name|parts
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|parts
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12345
argument_list|,
name|parts
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hdfs://localhost:12345/user/"
operator|+
name|down
operator|+
literal|"bar.txt"
argument_list|,
name|parts
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parts
operator|.
name|getId
argument_list|()
argument_list|,
name|parts
operator|.
name|getDownloadURL
argument_list|()
argument_list|)
expr_stmt|;
name|assertFileNotFound
argument_list|(
name|parts
argument_list|)
expr_stmt|;
name|uploadURL
operator|=
literal|"hdfs://localhost/user/foo/"
operator|+
name|up
operator|+
literal|"bar.txt"
operator|+
name|queryAndFragment
expr_stmt|;
name|parts
operator|=
operator|new
name|PathParts
argument_list|(
name|uploadURL
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|uploadURL
argument_list|,
name|parts
operator|.
name|getUploadURL
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/user/"
operator|+
name|down
operator|+
literal|"bar.txt"
argument_list|,
name|parts
operator|.
name|getURIPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar.txt"
argument_list|,
name|parts
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hdfs"
argument_list|,
name|parts
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|parts
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8020
argument_list|,
name|parts
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hdfs://localhost:8020/user/"
operator|+
name|down
operator|+
literal|"bar.txt"
argument_list|,
name|parts
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parts
operator|.
name|getId
argument_list|()
argument_list|,
name|parts
operator|.
name|getDownloadURL
argument_list|()
argument_list|)
expr_stmt|;
name|assertFileNotFound
argument_list|(
name|parts
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Configuration
name|conf
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|jobConf
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|queryAndFragment
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|""
argument_list|,
literal|"?key=value#fragment"
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|up
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|""
argument_list|,
literal|"../"
argument_list|)
control|)
block|{
comment|// verify using absolute path
name|String
name|down
init|=
name|up
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|"foo/"
else|:
literal|""
decl_stmt|;
name|String
name|uploadURL
init|=
literal|"/user/foo/"
operator|+
name|up
operator|+
literal|"bar.txt"
operator|+
name|queryAndFragment
decl_stmt|;
name|PathParts
name|parts
init|=
operator|new
name|PathParts
argument_list|(
name|uploadURL
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|uploadURL
argument_list|,
name|parts
operator|.
name|getUploadURL
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/user/"
operator|+
name|down
operator|+
literal|"bar.txt"
argument_list|,
name|parts
operator|.
name|getURIPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar.txt"
argument_list|,
name|parts
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hdfs"
argument_list|,
name|parts
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"localhost"
operator|.
name|equals
argument_list|(
name|parts
operator|.
name|getHost
argument_list|()
argument_list|)
operator|||
literal|"localhost.localdomain"
operator|.
name|equals
argument_list|(
name|parts
operator|.
name|getHost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dfsClusterPort
argument_list|,
name|parts
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parts
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hdfs://localhost:"
operator|+
name|dfsClusterPort
operator|+
literal|"/user/"
operator|+
name|down
operator|+
literal|"bar.txt"
argument_list|)
operator|||
name|parts
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hdfs://localhost.localdomain:"
operator|+
name|dfsClusterPort
operator|+
literal|"/user/"
operator|+
name|down
operator|+
literal|"bar.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFileNotFound
argument_list|(
name|parts
argument_list|)
expr_stmt|;
comment|// verify relative path is interpreted to be relative to user's home dir and resolved to an absolute path
name|uploadURL
operator|=
literal|"xuser/foo/"
operator|+
name|up
operator|+
literal|"bar.txt"
operator|+
name|queryAndFragment
expr_stmt|;
name|parts
operator|=
operator|new
name|PathParts
argument_list|(
name|uploadURL
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|uploadURL
argument_list|,
name|parts
operator|.
name|getUploadURL
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|homeDir
init|=
literal|"/user/"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|homeDir
operator|+
literal|"/xuser/"
operator|+
name|down
operator|+
literal|"bar.txt"
argument_list|,
name|parts
operator|.
name|getURIPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar.txt"
argument_list|,
name|parts
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hdfs"
argument_list|,
name|parts
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"localhost"
operator|.
name|equals
argument_list|(
name|parts
operator|.
name|getHost
argument_list|()
argument_list|)
operator|||
literal|"localhost.localdomain"
operator|.
name|equals
argument_list|(
name|parts
operator|.
name|getHost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dfsClusterPort
argument_list|,
name|parts
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parts
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hdfs://localhost:"
operator|+
name|dfsClusterPort
operator|+
name|homeDir
operator|+
literal|"/xuser/"
operator|+
name|down
operator|+
literal|"bar.txt"
argument_list|)
operator|||
name|parts
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hdfs://localhost.localdomain:"
operator|+
name|dfsClusterPort
operator|+
name|homeDir
operator|+
literal|"/xuser/"
operator|+
name|down
operator|+
literal|"bar.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFileNotFound
argument_list|(
name|parts
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
operator|new
name|PathParts
argument_list|(
literal|"/user/foo/bar.txt"
argument_list|,
name|simpleConf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"host/port resolution requires minimr conf, not a simple conf"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
empty_stmt|;
comment|// expected
block|}
block|}
DECL|method|assertFileNotFound
specifier|private
name|void
name|assertFileNotFound
parameter_list|(
name|PathParts
name|parts
parameter_list|)
block|{
try|try
block|{
name|parts
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|parts
operator|.
name|getUploadPath
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
empty_stmt|;
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|mrRun
specifier|public
name|void
name|mrRun
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|inDir
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/testing/testMapperReducer/input"
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|inDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|DATADIR
init|=
literal|"/user/testing/testMapperReducer/data"
decl_stmt|;
name|Path
name|dataDir
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|DATADIR
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dataDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Path
name|outDir
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/testing/testMapperReducer/output"
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|inDir
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|INPATH
init|=
operator|new
name|Path
argument_list|(
name|inDir
argument_list|,
literal|"input.txt"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|INPATH
argument_list|)
decl_stmt|;
name|Writer
name|wr
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|wr
operator|.
name|write
argument_list|(
name|DATADIR
operator|+
literal|"/"
operator|+
name|inputAvroFile
argument_list|)
expr_stmt|;
name|wr
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|dataDir
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|DOCUMENTS_DIR
argument_list|,
name|inputAvroFile
argument_list|)
argument_list|,
name|dataDir
argument_list|)
expr_stmt|;
name|JobConf
name|jobConf
init|=
name|getJobConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|ENABLE_LOCAL_JOB_RUNNER
condition|)
block|{
comment|// enable Hadoop LocalJobRunner; this enables to run in debugger and set breakpoints
name|jobConf
operator|.
name|set
argument_list|(
literal|"mapred.job.tracker"
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
block|}
name|jobConf
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setMaxReduceAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setJar
argument_list|(
name|SEARCH_ARCHIVES_JAR
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setBoolean
argument_list|(
literal|"ignoreTikaException"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|int
name|shards
init|=
literal|2
decl_stmt|;
name|int
name|maxReducers
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|ENABLE_LOCAL_JOB_RUNNER
condition|)
block|{
comment|// local job runner has a couple of limitations: only one reducer is supported and the DistributedCache doesn't work.
comment|// see http://blog.cloudera.com/blog/2009/07/advice-on-qa-testing-your-mapreduce-jobs/
name|maxReducers
operator|=
literal|1
expr_stmt|;
name|shards
operator|=
literal|1
expr_stmt|;
block|}
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"--morphline-file="
operator|+
name|tempDir
operator|+
literal|"/test-morphlines/solrCellDocumentTypes.conf"
block|,
literal|"--morphline-id=morphline1"
block|,
literal|"--solr-home-dir="
operator|+
name|MINIMR_CONF_DIR
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--output-dir="
operator|+
name|outDir
operator|.
name|toString
argument_list|()
block|,
literal|"--shards="
operator|+
name|shards
block|,
literal|"--verbose"
block|,
name|numRuns
operator|%
literal|2
operator|==
literal|0
condition|?
literal|"--input-list="
operator|+
name|INPATH
operator|.
name|toString
argument_list|()
else|:
name|dataDir
operator|.
name|toString
argument_list|()
block|,
name|numRuns
operator|%
literal|3
operator|==
literal|0
condition|?
literal|"--reducers="
operator|+
name|shards
else|:
operator|(
name|numRuns
operator|%
literal|3
operator|==
literal|1
condition|?
literal|"--reducers=-1"
else|:
literal|"--reducers="
operator|+
name|Math
operator|.
name|min
argument_list|(
literal|8
argument_list|,
name|maxReducers
argument_list|)
operator|)
block|}
decl_stmt|;
if|if
condition|(
name|numRuns
operator|%
literal|3
operator|==
literal|2
condition|)
block|{
name|args
operator|=
name|concat
argument_list|(
name|args
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"--fanout=2"
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numRuns
operator|==
literal|0
condition|)
block|{
comment|// force (slow) MapReduce based randomization to get coverage for that as well
name|args
operator|=
name|concat
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-D"
block|,
name|MapReduceIndexerTool
operator|.
name|MAIN_MEMORY_RANDOMIZATION_THRESHOLD
operator|+
literal|"=-1"
block|}
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
name|MapReduceIndexerTool
name|tool
init|=
name|createTool
argument_list|()
decl_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|jobConf
argument_list|,
name|tool
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|tool
operator|.
name|job
decl_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|numRuns
operator|%
literal|3
operator|!=
literal|2
condition|)
block|{
comment|// Only run this check if mtree merge is disabled.
comment|// With mtree merge enabled the BatchWriter counters aren't available anymore because
comment|// variable "job" now refers to the merge job rather than the indexing job
name|assertEquals
argument_list|(
literal|"Invalid counter "
operator|+
name|SolrRecordWriter
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|SolrCounters
operator|.
name|DOCUMENTS_WRITTEN
argument_list|,
name|count
argument_list|,
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|SolrCounters
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|SolrCounters
operator|.
name|DOCUMENTS_WRITTEN
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check the output is as expected
name|outDir
operator|=
operator|new
name|Path
argument_list|(
name|outDir
argument_list|,
name|MapReduceIndexerTool
operator|.
name|RESULTS_DIR
argument_list|)
expr_stmt|;
name|Path
index|[]
name|outputFiles
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|fs
operator|.
name|listStatus
argument_list|(
name|outDir
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"outputfiles:"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|outputFiles
argument_list|)
argument_list|)
expr_stmt|;
name|UtilsForTests
operator|.
name|validateSolrServerDocumentCount
argument_list|(
name|MINIMR_CONF_DIR
argument_list|,
name|fs
argument_list|,
name|outDir
argument_list|,
name|count
argument_list|,
name|shards
argument_list|)
expr_stmt|;
comment|// run again with --dryrun mode:
name|tool
operator|=
name|createTool
argument_list|()
expr_stmt|;
name|args
operator|=
name|concat
argument_list|(
name|args
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"--dry-run"
block|}
argument_list|)
expr_stmt|;
name|res
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|jobConf
argument_list|,
name|tool
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|numRuns
operator|++
expr_stmt|;
block|}
DECL|method|concat
specifier|protected
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|concat
parameter_list|(
name|T
index|[]
modifier|...
name|arrays
parameter_list|)
block|{
if|if
condition|(
name|arrays
operator|.
name|length
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|Class
name|clazz
init|=
literal|null
decl_stmt|;
name|int
name|length
init|=
literal|0
decl_stmt|;
for|for
control|(
name|T
index|[]
name|array
range|:
name|arrays
control|)
block|{
name|clazz
operator|=
name|array
operator|.
name|getClass
argument_list|()
expr_stmt|;
name|length
operator|+=
name|array
operator|.
name|length
expr_stmt|;
block|}
name|T
index|[]
name|result
init|=
operator|(
name|T
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|clazz
operator|.
name|getComponentType
argument_list|()
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|T
index|[]
name|array
range|:
name|arrays
control|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|pos
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|array
operator|.
name|length
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class
end_unit
