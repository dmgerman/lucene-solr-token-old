begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.hadoop.hack
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
operator|.
name|hack
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|JarFinder
import|;
end_import
begin_comment
comment|/**  * A MiniMRCluster factory. In MR2, it provides a wrapper MiniMRClientCluster  * interface around the MiniMRYarnCluster. While in MR1, it provides such  * wrapper around MiniMRCluster. This factory should be used in tests to provide  * an easy migration of tests across MR1 and MR2.  */
end_comment
begin_class
DECL|class|MiniMRClientClusterFactory
specifier|public
class|class
name|MiniMRClientClusterFactory
block|{
DECL|method|create
specifier|public
specifier|static
name|MiniMRClientCluster
name|create
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|caller
parameter_list|,
name|int
name|noOfNMs
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|File
name|testWorkDir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|caller
argument_list|,
name|caller
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|noOfNMs
argument_list|,
name|conf
argument_list|,
name|testWorkDir
argument_list|)
return|;
block|}
DECL|method|create
specifier|public
specifier|static
name|MiniMRClientCluster
name|create
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|caller
parameter_list|,
name|String
name|identifier
parameter_list|,
name|int
name|noOfNMs
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|File
name|testWorkDir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
block|}
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|testRootDir
init|=
operator|new
name|Path
argument_list|(
name|testWorkDir
operator|.
name|getPath
argument_list|()
argument_list|,
name|identifier
operator|+
literal|"-tmpDir"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|Path
name|appJar
init|=
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|,
literal|"MRAppJar.jar"
argument_list|)
decl_stmt|;
comment|// Copy MRAppJar and make it private.
name|Path
name|appMasterJar
init|=
operator|new
name|Path
argument_list|(
name|MiniMRYarnCluster
operator|.
name|APPJAR
argument_list|)
decl_stmt|;
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
name|appMasterJar
argument_list|,
name|appJar
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|appJar
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"744"
argument_list|)
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|addFileToClassPath
argument_list|(
name|appJar
argument_list|)
expr_stmt|;
name|Path
name|callerJar
init|=
operator|new
name|Path
argument_list|(
name|JarFinder
operator|.
name|getJar
argument_list|(
name|caller
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|remoteCallerJar
init|=
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|,
name|callerJar
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
name|callerJar
argument_list|,
name|remoteCallerJar
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|remoteCallerJar
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"744"
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|addFileToClassPath
argument_list|(
name|remoteCallerJar
argument_list|)
expr_stmt|;
name|MiniMRYarnCluster
name|miniMRYarnCluster
decl_stmt|;
try|try
block|{
name|miniMRYarnCluster
operator|=
operator|new
name|MiniMRYarnCluster
argument_list|(
name|identifier
argument_list|,
name|noOfNMs
argument_list|,
name|testWorkDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
literal|"minimrclientcluster.caller.name"
argument_list|,
name|identifier
argument_list|)
expr_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"minimrclientcluster.nodemanagers.number"
argument_list|,
name|noOfNMs
argument_list|)
expr_stmt|;
name|miniMRYarnCluster
operator|.
name|init
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|miniMRYarnCluster
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
operator|new
name|MiniMRYarnClusterAdapter
argument_list|(
name|miniMRYarnCluster
argument_list|,
name|testWorkDir
argument_list|)
return|;
block|}
block|}
end_class
end_unit
