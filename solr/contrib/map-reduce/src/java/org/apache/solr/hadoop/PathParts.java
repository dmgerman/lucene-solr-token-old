begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.hadoop
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import
begin_comment
comment|/**  * Extracts various components of an HDFS Path  */
end_comment
begin_class
DECL|class|PathParts
specifier|public
specifier|final
class|class
name|PathParts
block|{
DECL|field|uploadURL
specifier|private
specifier|final
name|String
name|uploadURL
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|fs
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|normalizedPath
specifier|private
specifier|final
name|Path
name|normalizedPath
decl_stmt|;
DECL|field|stats
specifier|private
name|FileStatus
name|stats
decl_stmt|;
DECL|method|PathParts
specifier|public
name|PathParts
parameter_list|(
name|String
name|uploadURL
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|uploadURL
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Path must not be null: "
operator|+
name|uploadURL
argument_list|)
throw|;
block|}
name|this
operator|.
name|uploadURL
operator|=
name|uploadURL
expr_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Configuration must not be null: "
operator|+
name|uploadURL
argument_list|)
throw|;
block|}
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|URI
name|uri
init|=
name|stringToUri
argument_list|(
name|uploadURL
argument_list|)
decl_stmt|;
name|this
operator|.
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"File system must not be null: "
operator|+
name|uploadURL
argument_list|)
throw|;
block|}
name|this
operator|.
name|normalizedPath
operator|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|normalizedPath
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Path must be absolute: "
operator|+
name|uploadURL
argument_list|)
throw|;
block|}
if|if
condition|(
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Scheme must not be null: "
operator|+
name|uploadURL
argument_list|)
throw|;
block|}
if|if
condition|(
name|getHost
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Host must not be null: "
operator|+
name|uploadURL
argument_list|)
throw|;
block|}
if|if
condition|(
name|getPort
argument_list|()
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Port must not be negative: "
operator|+
name|uploadURL
argument_list|)
throw|;
block|}
block|}
DECL|method|getUploadURL
specifier|public
name|String
name|getUploadURL
parameter_list|()
block|{
return|return
name|uploadURL
return|;
block|}
DECL|method|getUploadPath
specifier|public
name|Path
name|getUploadPath
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|getUploadURL
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getURIPath
specifier|public
name|String
name|getURIPath
parameter_list|()
block|{
return|return
name|normalizedPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
return|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|normalizedPath
operator|.
name|getName
argument_list|()
return|;
block|}
DECL|method|getScheme
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|normalizedPath
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
return|;
block|}
DECL|method|getHost
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|normalizedPath
operator|.
name|toUri
argument_list|()
operator|.
name|getHost
argument_list|()
return|;
block|}
DECL|method|getPort
specifier|public
name|int
name|getPort
parameter_list|()
block|{
name|int
name|port
init|=
name|normalizedPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|port
operator|==
operator|-
literal|1
condition|)
block|{
name|port
operator|=
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPort
argument_list|()
expr_stmt|;
if|if
condition|(
name|port
operator|==
operator|-
literal|1
condition|)
block|{
name|port
operator|=
name|NameNode
operator|.
name|DEFAULT_PORT
expr_stmt|;
block|}
block|}
return|return
name|port
return|;
block|}
DECL|method|getId
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|getPort
argument_list|()
operator|+
name|getURIPath
argument_list|()
return|;
block|}
DECL|method|getDownloadURL
specifier|public
name|String
name|getDownloadURL
parameter_list|()
block|{
return|return
name|getId
argument_list|()
return|;
block|}
DECL|method|getConfiguration
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
DECL|method|getFileSystem
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|()
block|{
return|return
name|fs
return|;
block|}
DECL|method|getFileStatus
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|stats
operator|==
literal|null
condition|)
block|{
name|stats
operator|=
name|getFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|getUploadPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|stats
return|;
block|}
DECL|method|stringToUri
specifier|private
name|URI
name|stringToUri
parameter_list|(
name|String
name|pathString
parameter_list|)
block|{
comment|//return new Path(pathString).toUri().normalize();
return|return
name|URI
operator|.
name|create
argument_list|(
name|pathString
argument_list|)
operator|.
name|normalize
argument_list|()
return|;
block|}
block|}
end_class
end_unit
