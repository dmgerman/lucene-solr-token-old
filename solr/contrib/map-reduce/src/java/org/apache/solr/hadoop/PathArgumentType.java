begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.hadoop
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|net
operator|.
name|sourceforge
operator|.
name|argparse4j
operator|.
name|inf
operator|.
name|Argument
import|;
end_import
begin_import
import|import
name|net
operator|.
name|sourceforge
operator|.
name|argparse4j
operator|.
name|inf
operator|.
name|ArgumentParser
import|;
end_import
begin_import
import|import
name|net
operator|.
name|sourceforge
operator|.
name|argparse4j
operator|.
name|inf
operator|.
name|ArgumentParserException
import|;
end_import
begin_import
import|import
name|net
operator|.
name|sourceforge
operator|.
name|argparse4j
operator|.
name|inf
operator|.
name|ArgumentType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import
begin_comment
comment|/**  * ArgumentType subclass for HDFS Path type, using fluent style API.  */
end_comment
begin_class
DECL|class|PathArgumentType
specifier|public
class|class
name|PathArgumentType
implements|implements
name|ArgumentType
argument_list|<
name|Path
argument_list|>
block|{
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|acceptSystemIn
specifier|private
name|boolean
name|acceptSystemIn
init|=
literal|false
decl_stmt|;
DECL|field|verifyExists
specifier|private
name|boolean
name|verifyExists
init|=
literal|false
decl_stmt|;
DECL|field|verifyNotExists
specifier|private
name|boolean
name|verifyNotExists
init|=
literal|false
decl_stmt|;
DECL|field|verifyIsFile
specifier|private
name|boolean
name|verifyIsFile
init|=
literal|false
decl_stmt|;
DECL|field|verifyIsDirectory
specifier|private
name|boolean
name|verifyIsDirectory
init|=
literal|false
decl_stmt|;
DECL|field|verifyCanRead
specifier|private
name|boolean
name|verifyCanRead
init|=
literal|false
decl_stmt|;
DECL|field|verifyCanWrite
specifier|private
name|boolean
name|verifyCanWrite
init|=
literal|false
decl_stmt|;
DECL|field|verifyCanWriteParent
specifier|private
name|boolean
name|verifyCanWriteParent
init|=
literal|false
decl_stmt|;
DECL|field|verifyCanExecute
specifier|private
name|boolean
name|verifyCanExecute
init|=
literal|false
decl_stmt|;
DECL|field|verifyIsAbsolute
specifier|private
name|boolean
name|verifyIsAbsolute
init|=
literal|false
decl_stmt|;
DECL|field|verifyHasScheme
specifier|private
name|boolean
name|verifyHasScheme
init|=
literal|false
decl_stmt|;
DECL|field|verifyScheme
specifier|private
name|String
name|verifyScheme
init|=
literal|null
decl_stmt|;
DECL|method|PathArgumentType
specifier|public
name|PathArgumentType
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|acceptSystemIn
specifier|public
name|PathArgumentType
name|acceptSystemIn
parameter_list|()
block|{
name|acceptSystemIn
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|verifyExists
specifier|public
name|PathArgumentType
name|verifyExists
parameter_list|()
block|{
name|verifyExists
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|verifyNotExists
specifier|public
name|PathArgumentType
name|verifyNotExists
parameter_list|()
block|{
name|verifyNotExists
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|verifyIsFile
specifier|public
name|PathArgumentType
name|verifyIsFile
parameter_list|()
block|{
name|verifyIsFile
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|verifyIsDirectory
specifier|public
name|PathArgumentType
name|verifyIsDirectory
parameter_list|()
block|{
name|verifyIsDirectory
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|verifyCanRead
specifier|public
name|PathArgumentType
name|verifyCanRead
parameter_list|()
block|{
name|verifyCanRead
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|verifyCanWrite
specifier|public
name|PathArgumentType
name|verifyCanWrite
parameter_list|()
block|{
name|verifyCanWrite
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|verifyCanWriteParent
specifier|public
name|PathArgumentType
name|verifyCanWriteParent
parameter_list|()
block|{
name|verifyCanWriteParent
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|verifyCanExecute
specifier|public
name|PathArgumentType
name|verifyCanExecute
parameter_list|()
block|{
name|verifyCanExecute
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|verifyIsAbsolute
specifier|public
name|PathArgumentType
name|verifyIsAbsolute
parameter_list|()
block|{
name|verifyIsAbsolute
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|verifyHasScheme
specifier|public
name|PathArgumentType
name|verifyHasScheme
parameter_list|()
block|{
name|verifyHasScheme
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|verifyScheme
specifier|public
name|PathArgumentType
name|verifyScheme
parameter_list|(
name|String
name|scheme
parameter_list|)
block|{
name|verifyScheme
operator|=
name|scheme
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|convert
specifier|public
name|Path
name|convert
parameter_list|(
name|ArgumentParser
name|parser
parameter_list|,
name|Argument
name|arg
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|ArgumentParserException
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|value
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|=
name|file
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|verifyHasScheme
operator|&&
operator|!
name|isSystemIn
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|verifyHasScheme
argument_list|(
name|parser
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verifyScheme
operator|!=
literal|null
operator|&&
operator|!
name|isSystemIn
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|verifyScheme
argument_list|(
name|parser
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verifyIsAbsolute
operator|&&
operator|!
name|isSystemIn
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|verifyIsAbsolute
argument_list|(
name|parser
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verifyExists
operator|&&
operator|!
name|isSystemIn
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|verifyExists
argument_list|(
name|parser
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verifyNotExists
operator|&&
operator|!
name|isSystemIn
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|verifyNotExists
argument_list|(
name|parser
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verifyIsFile
operator|&&
operator|!
name|isSystemIn
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|verifyIsFile
argument_list|(
name|parser
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verifyIsDirectory
operator|&&
operator|!
name|isSystemIn
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|verifyIsDirectory
argument_list|(
name|parser
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verifyCanRead
operator|&&
operator|!
name|isSystemIn
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|verifyCanRead
argument_list|(
name|parser
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verifyCanWrite
operator|&&
operator|!
name|isSystemIn
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|verifyCanWrite
argument_list|(
name|parser
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verifyCanWriteParent
operator|&&
operator|!
name|isSystemIn
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|verifyCanWriteParent
argument_list|(
name|parser
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verifyCanExecute
operator|&&
operator|!
name|isSystemIn
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|verifyCanExecute
argument_list|(
name|parser
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArgumentParserException
argument_list|(
name|e
argument_list|,
name|parser
argument_list|)
throw|;
block|}
return|return
name|file
return|;
block|}
DECL|method|verifyExists
specifier|private
name|void
name|verifyExists
parameter_list|(
name|ArgumentParser
name|parser
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|ArgumentParserException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ArgumentParserException
argument_list|(
literal|"File not found: "
operator|+
name|file
argument_list|,
name|parser
argument_list|)
throw|;
block|}
block|}
DECL|method|verifyNotExists
specifier|private
name|void
name|verifyNotExists
parameter_list|(
name|ArgumentParser
name|parser
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|ArgumentParserException
throws|,
name|IOException
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ArgumentParserException
argument_list|(
literal|"File found: "
operator|+
name|file
argument_list|,
name|parser
argument_list|)
throw|;
block|}
block|}
DECL|method|verifyIsFile
specifier|private
name|void
name|verifyIsFile
parameter_list|(
name|ArgumentParser
name|parser
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|ArgumentParserException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|isFile
argument_list|(
name|file
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ArgumentParserException
argument_list|(
literal|"Not a file: "
operator|+
name|file
argument_list|,
name|parser
argument_list|)
throw|;
block|}
block|}
DECL|method|verifyIsDirectory
specifier|private
name|void
name|verifyIsDirectory
parameter_list|(
name|ArgumentParser
name|parser
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|ArgumentParserException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|isDirectory
argument_list|(
name|file
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ArgumentParserException
argument_list|(
literal|"Not a directory: "
operator|+
name|file
argument_list|,
name|parser
argument_list|)
throw|;
block|}
block|}
DECL|method|verifyCanRead
specifier|private
name|void
name|verifyCanRead
parameter_list|(
name|ArgumentParser
name|parser
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|ArgumentParserException
throws|,
name|IOException
block|{
name|verifyExists
argument_list|(
name|parser
argument_list|,
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getPermission
argument_list|()
operator|.
name|getUserAction
argument_list|()
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ArgumentParserException
argument_list|(
literal|"Insufficient permissions to read file: "
operator|+
name|file
argument_list|,
name|parser
argument_list|)
throw|;
block|}
block|}
DECL|method|verifyCanWrite
specifier|private
name|void
name|verifyCanWrite
parameter_list|(
name|ArgumentParser
name|parser
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|ArgumentParserException
throws|,
name|IOException
block|{
name|verifyExists
argument_list|(
name|parser
argument_list|,
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getPermission
argument_list|()
operator|.
name|getUserAction
argument_list|()
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|WRITE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ArgumentParserException
argument_list|(
literal|"Insufficient permissions to write file: "
operator|+
name|file
argument_list|,
name|parser
argument_list|)
throw|;
block|}
block|}
DECL|method|verifyCanWriteParent
specifier|private
name|void
name|verifyCanWriteParent
parameter_list|(
name|ArgumentParser
name|parser
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|ArgumentParserException
throws|,
name|IOException
block|{
name|Path
name|parent
init|=
name|file
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
operator|||
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|parent
argument_list|)
operator|||
operator|!
name|fs
operator|.
name|getFileStatus
argument_list|(
name|parent
argument_list|)
operator|.
name|getPermission
argument_list|()
operator|.
name|getUserAction
argument_list|()
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|WRITE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ArgumentParserException
argument_list|(
literal|"Cannot write parent of file: "
operator|+
name|file
argument_list|,
name|parser
argument_list|)
throw|;
block|}
block|}
DECL|method|verifyCanExecute
specifier|private
name|void
name|verifyCanExecute
parameter_list|(
name|ArgumentParser
name|parser
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|ArgumentParserException
throws|,
name|IOException
block|{
name|verifyExists
argument_list|(
name|parser
argument_list|,
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getPermission
argument_list|()
operator|.
name|getUserAction
argument_list|()
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|EXECUTE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ArgumentParserException
argument_list|(
literal|"Insufficient permissions to execute file: "
operator|+
name|file
argument_list|,
name|parser
argument_list|)
throw|;
block|}
block|}
DECL|method|verifyIsAbsolute
specifier|private
name|void
name|verifyIsAbsolute
parameter_list|(
name|ArgumentParser
name|parser
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|ArgumentParserException
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ArgumentParserException
argument_list|(
literal|"Not an absolute file: "
operator|+
name|file
argument_list|,
name|parser
argument_list|)
throw|;
block|}
block|}
DECL|method|verifyHasScheme
specifier|private
name|void
name|verifyHasScheme
parameter_list|(
name|ArgumentParser
name|parser
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|ArgumentParserException
block|{
if|if
condition|(
name|file
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ArgumentParserException
argument_list|(
literal|"URI scheme is missing in path: "
operator|+
name|file
argument_list|,
name|parser
argument_list|)
throw|;
block|}
block|}
DECL|method|verifyScheme
specifier|private
name|void
name|verifyScheme
parameter_list|(
name|ArgumentParser
name|parser
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|ArgumentParserException
block|{
if|if
condition|(
operator|!
name|verifyScheme
operator|.
name|equals
argument_list|(
name|file
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ArgumentParserException
argument_list|(
literal|"Scheme of path: "
operator|+
name|file
operator|+
literal|" must be: "
operator|+
name|verifyScheme
argument_list|,
name|parser
argument_list|)
throw|;
block|}
block|}
DECL|method|isSystemIn
specifier|private
name|boolean
name|isSystemIn
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
return|return
name|acceptSystemIn
operator|&&
name|file
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"-"
argument_list|)
return|;
block|}
block|}
end_class
end_unit
