begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.hadoop.dedup
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
operator|.
name|dedup
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
operator|.
name|Context
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
operator|.
name|HdfsFileFieldNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
operator|.
name|Utils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * UpdateConflictResolver implementation that ignores all but the most recent  * document version, based on a configurable numeric Solr field, which defaults  * to the file_last_modified timestamp.  */
end_comment
begin_class
DECL|class|RetainMostRecentUpdateConflictResolver
specifier|public
class|class
name|RetainMostRecentUpdateConflictResolver
implements|implements
name|UpdateConflictResolver
implements|,
name|Configurable
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|orderByFieldName
specifier|private
name|String
name|orderByFieldName
init|=
name|ORDER_BY_FIELD_NAME_DEFAULT
decl_stmt|;
DECL|field|ORDER_BY_FIELD_NAME_KEY
specifier|public
specifier|static
specifier|final
name|String
name|ORDER_BY_FIELD_NAME_KEY
init|=
name|RetainMostRecentUpdateConflictResolver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".orderByFieldName"
decl_stmt|;
DECL|field|ORDER_BY_FIELD_NAME_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|ORDER_BY_FIELD_NAME_DEFAULT
init|=
name|HdfsFileFieldNames
operator|.
name|FILE_LAST_MODIFIED
decl_stmt|;
DECL|field|COUNTER_GROUP
specifier|public
specifier|static
specifier|final
name|String
name|COUNTER_GROUP
init|=
name|Utils
operator|.
name|getShortClassName
argument_list|(
name|RetainMostRecentUpdateConflictResolver
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DUPLICATES_COUNTER_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DUPLICATES_COUNTER_NAME
init|=
literal|"Number of documents ignored as duplicates"
decl_stmt|;
DECL|field|OUTDATED_COUNTER_NAME
specifier|public
specifier|static
specifier|final
name|String
name|OUTDATED_COUNTER_NAME
init|=
literal|"Number of documents ignored as outdated"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RetainMostRecentUpdateConflictResolver
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|setConf
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|orderByFieldName
operator|=
name|conf
operator|.
name|get
argument_list|(
name|ORDER_BY_FIELD_NAME_KEY
argument_list|,
name|orderByFieldName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
DECL|method|getOrderByFieldName
specifier|protected
name|String
name|getOrderByFieldName
parameter_list|()
block|{
return|return
name|orderByFieldName
return|;
block|}
annotation|@
name|Override
DECL|method|orderUpdates
specifier|public
name|Iterator
argument_list|<
name|SolrInputDocument
argument_list|>
name|orderUpdates
parameter_list|(
name|Text
name|key
parameter_list|,
name|Iterator
argument_list|<
name|SolrInputDocument
argument_list|>
name|updates
parameter_list|,
name|Context
name|ctx
parameter_list|)
block|{
return|return
name|getMaximum
argument_list|(
name|updates
argument_list|,
name|getOrderByFieldName
argument_list|()
argument_list|,
operator|new
name|SolrInputDocumentComparator
operator|.
name|TimeStampComparator
argument_list|()
argument_list|,
name|ctx
argument_list|)
return|;
block|}
comment|/** Returns the most recent document among the colliding updates */
DECL|method|getMaximum
specifier|protected
name|Iterator
argument_list|<
name|SolrInputDocument
argument_list|>
name|getMaximum
parameter_list|(
name|Iterator
argument_list|<
name|SolrInputDocument
argument_list|>
name|updates
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Comparator
name|child
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
name|SolrInputDocumentComparator
name|comp
init|=
operator|new
name|SolrInputDocumentComparator
argument_list|(
name|fieldName
argument_list|,
name|child
argument_list|)
decl_stmt|;
name|SolrInputDocument
name|max
init|=
literal|null
decl_stmt|;
name|long
name|numDupes
init|=
literal|0
decl_stmt|;
name|long
name|numOutdated
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|updates
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SolrInputDocument
name|next
init|=
name|updates
operator|.
name|next
argument_list|()
decl_stmt|;
assert|assert
name|next
operator|!=
literal|null
assert|;
if|if
condition|(
name|max
operator|==
literal|null
condition|)
block|{
name|max
operator|=
name|next
expr_stmt|;
block|}
else|else
block|{
name|int
name|c
init|=
name|comp
operator|.
name|compare
argument_list|(
name|next
argument_list|,
name|max
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring document version because it is a duplicate: {}"
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|numDupes
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring document version because it is outdated: {}"
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|max
operator|=
name|next
expr_stmt|;
name|numOutdated
operator|++
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring document version because it is outdated: {}"
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|numOutdated
operator|++
expr_stmt|;
block|}
block|}
block|}
assert|assert
name|max
operator|!=
literal|null
assert|;
if|if
condition|(
name|numDupes
operator|>
literal|0
condition|)
block|{
name|context
operator|.
name|getCounter
argument_list|(
name|COUNTER_GROUP
argument_list|,
name|DUPLICATES_COUNTER_NAME
argument_list|)
operator|.
name|increment
argument_list|(
name|numDupes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numOutdated
operator|>
literal|0
condition|)
block|{
name|context
operator|.
name|getCounter
argument_list|(
name|COUNTER_GROUP
argument_list|,
name|OUTDATED_COUNTER_NAME
argument_list|)
operator|.
name|increment
argument_list|(
name|numOutdated
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|max
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
end_class
end_unit
