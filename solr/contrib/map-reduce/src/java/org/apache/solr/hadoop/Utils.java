begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.hadoop
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import
begin_class
annotation|@
name|Beta
DECL|class|Utils
specifier|public
specifier|final
class|class
name|Utils
block|{
DECL|field|LOG_CONFIG_FILE
specifier|private
specifier|static
specifier|final
name|String
name|LOG_CONFIG_FILE
init|=
literal|"hadoop.log4j.configuration"
decl_stmt|;
DECL|method|setLogConfigFile
specifier|public
specifier|static
name|void
name|setLogConfigFile
parameter_list|(
name|File
name|file
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|LOG_CONFIG_FILE
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getLogConfigFile
specifier|public
specifier|static
name|void
name|getLogConfigFile
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|log4jPropertiesFile
init|=
name|conf
operator|.
name|get
argument_list|(
name|LOG_CONFIG_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|log4jPropertiesFile
operator|!=
literal|null
condition|)
block|{
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|log4jPropertiesFile
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getShortClassName
specifier|public
specifier|static
name|String
name|getShortClassName
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
return|return
name|getShortClassName
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getShortClassName
specifier|public
specifier|static
name|String
name|getShortClassName
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|int
name|i
init|=
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
comment|// regular class
name|int
name|j
init|=
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|'$'
argument_list|)
decl_stmt|;
comment|// inner class
return|return
name|className
operator|.
name|substring
argument_list|(
literal|1
operator|+
name|Math
operator|.
name|max
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class
end_unit
