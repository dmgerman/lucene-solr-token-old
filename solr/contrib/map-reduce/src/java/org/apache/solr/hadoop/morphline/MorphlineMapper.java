begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.hadoop.morphline
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
operator|.
name|morphline
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|SolrPingResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|UpdateResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
operator|.
name|HeartBeater
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
operator|.
name|SolrInputDocumentWritable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
operator|.
name|SolrMapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|morphlines
operator|.
name|solr
operator|.
name|DocumentLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import
begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counting
import|;
end_import
begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Histogram
import|;
end_import
begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Meter
import|;
end_import
begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import
begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import
begin_comment
comment|/**  * This class takes the input files, extracts the relevant content, transforms  * it and hands SolrInputDocuments to a set of reducers.  *   * More specifically, it consumes a list of&lt;offset, hdfsFilePath&gt; input pairs.  * For each such pair extracts a set of zero or more SolrInputDocuments and  * sends them to a downstream Reducer. The key for the reducer is the unique id  * of the SolrInputDocument specified in Solr schema.xml.  */
end_comment
begin_class
DECL|class|MorphlineMapper
specifier|public
class|class
name|MorphlineMapper
extends|extends
name|SolrMapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|context
specifier|private
name|Context
name|context
decl_stmt|;
DECL|field|runner
specifier|private
name|MorphlineMapRunner
name|runner
decl_stmt|;
DECL|field|heartBeater
specifier|private
name|HeartBeater
name|heartBeater
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MorphlineMapper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|getSchema
specifier|protected
name|IndexSchema
name|getSchema
parameter_list|()
block|{
return|return
name|runner
operator|.
name|getSchema
argument_list|()
return|;
block|}
DECL|method|getContext
specifier|protected
name|Context
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
annotation|@
name|Override
DECL|method|setup
specifier|protected
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|super
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|heartBeater
operator|=
operator|new
name|HeartBeater
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|runner
operator|=
operator|new
name|MorphlineMapRunner
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|MyDocumentLoader
argument_list|()
argument_list|,
name|getSolrHomeDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Extract content from the path specified in the value. Key is useless.    */
annotation|@
name|Override
DECL|method|map
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|heartBeater
operator|.
name|needHeartBeat
argument_list|()
expr_stmt|;
try|try
block|{
name|runner
operator|.
name|map
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|heartBeater
operator|.
name|cancelHeartBeat
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|cleanup
specifier|protected
name|void
name|cleanup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|heartBeater
operator|.
name|close
argument_list|()
expr_stmt|;
name|runner
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|addMetricsToMRCounters
argument_list|(
name|runner
operator|.
name|getMorphlineContext
argument_list|()
operator|.
name|getMetricRegistry
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|super
operator|.
name|cleanup
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|addMetricsToMRCounters
specifier|private
name|void
name|addMetricsToMRCounters
parameter_list|(
name|MetricRegistry
name|metricRegistry
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|entry
range|:
name|metricRegistry
operator|.
name|getCounters
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|addCounting
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Histogram
argument_list|>
name|entry
range|:
name|metricRegistry
operator|.
name|getHistograms
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|addCounting
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Meter
argument_list|>
name|entry
range|:
name|metricRegistry
operator|.
name|getMeters
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|addCounting
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Timer
argument_list|>
name|entry
range|:
name|metricRegistry
operator|.
name|getTimers
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|long
name|nanosPerMilliSec
init|=
literal|1000
operator|*
literal|1000
decl_stmt|;
name|addCounting
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|nanosPerMilliSec
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addCounting
specifier|private
name|void
name|addCounting
parameter_list|(
name|String
name|metricName
parameter_list|,
name|Counting
name|value
parameter_list|,
name|long
name|scale
parameter_list|)
block|{
name|context
operator|.
name|getCounter
argument_list|(
literal|"morphline"
argument_list|,
name|metricName
argument_list|)
operator|.
name|increment
argument_list|(
name|value
operator|.
name|getCount
argument_list|()
operator|/
name|scale
argument_list|)
expr_stmt|;
block|}
comment|///////////////////////////////////////////////////////////////////////////////
comment|// Nested classes:
comment|///////////////////////////////////////////////////////////////////////////////
DECL|class|MyDocumentLoader
specifier|private
specifier|final
class|class
name|MyDocumentLoader
implements|implements
name|DocumentLoader
block|{
annotation|@
name|Override
DECL|method|beginTransaction
specifier|public
name|void
name|beginTransaction
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|load
specifier|public
name|void
name|load
parameter_list|(
name|SolrInputDocument
name|doc
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|String
name|uniqueKeyFieldName
init|=
name|getSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Object
name|id
init|=
name|doc
operator|.
name|getFieldValue
argument_list|(
name|uniqueKeyFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing value for (required) unique document key: "
operator|+
name|uniqueKeyFieldName
operator|+
literal|" (see Solr schema.xml)"
argument_list|)
throw|;
block|}
try|try
block|{
name|context
operator|.
name|write
argument_list|(
operator|new
name|Text
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|SolrInputDocumentWritable
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted while writing "
operator|+
name|doc
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|long
name|numParserOutputBytes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SolrInputField
name|field
range|:
name|doc
operator|.
name|values
argument_list|()
control|)
block|{
name|numParserOutputBytes
operator|+=
name|sizeOf
argument_list|(
name|field
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|getCounter
argument_list|(
name|MorphlineCounters
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|MorphlineCounters
operator|.
name|PARSER_OUTPUT_BYTES
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|increment
argument_list|(
name|numParserOutputBytes
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|getCounter
argument_list|(
name|MorphlineCounters
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|MorphlineCounters
operator|.
name|DOCS_READ
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// just an approximation
DECL|method|sizeOf
specifier|private
name|long
name|sizeOf
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|CharSequence
condition|)
block|{
return|return
operator|(
operator|(
name|CharSequence
operator|)
name|value
operator|)
operator|.
name|length
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
return|return
literal|4
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Long
condition|)
block|{
return|return
literal|8
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Collection
condition|)
block|{
name|long
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|val
range|:
operator|(
name|Collection
operator|)
name|value
control|)
block|{
name|size
operator|+=
name|sizeOf
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
else|else
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
operator|.
name|length
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|commitTransaction
specifier|public
name|void
name|commitTransaction
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|rollbackTransaction
specifier|public
name|UpdateResponse
name|rollbackTransaction
parameter_list|()
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
return|return
operator|new
name|UpdateResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|shutdown
specifier|public
name|void
name|shutdown
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|ping
specifier|public
name|SolrPingResponse
name|ping
parameter_list|()
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
return|return
operator|new
name|SolrPingResponse
argument_list|()
return|;
block|}
block|}
block|}
end_class
end_unit
