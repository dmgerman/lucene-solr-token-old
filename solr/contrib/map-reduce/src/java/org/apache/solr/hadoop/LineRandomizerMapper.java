begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.hadoop
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * MR Mapper that randomizing a list of URLs.  *   * Mapper input is (offset, URL) pairs. Each such pair indicates a file to  * index.  *   * Mapper output is (randomPosition, URL) pairs. The reducer receives these  * pairs sorted by randomPosition.  */
end_comment
begin_class
DECL|class|LineRandomizerMapper
specifier|public
class|class
name|LineRandomizerMapper
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|random
specifier|private
name|Random
name|random
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|setup
specifier|protected
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|super
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|random
operator|=
name|createRandom
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|map
specifier|protected
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"map key: {}, value: {}"
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
operator|new
name|LongWritable
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|createRandom
specifier|private
name|Random
name|createRandom
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|long
name|taskId
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getTaskAttemptID
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// MRUnit returns null
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"context.getTaskAttemptID().getId(): {}"
argument_list|,
name|context
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"context.getTaskAttemptID().getTaskID().getId(): {}"
argument_list|,
name|context
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getTaskID
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|taskId
operator|=
name|context
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getTaskID
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
comment|// taskId = 0, 1, ..., N
block|}
comment|// create a good random seed, yet ensure deterministic PRNG sequence for easy reproducability
return|return
operator|new
name|Random
argument_list|(
literal|421439783L
operator|*
operator|(
name|taskId
operator|+
literal|1
operator|)
argument_list|)
return|;
block|}
block|}
end_class
end_unit
