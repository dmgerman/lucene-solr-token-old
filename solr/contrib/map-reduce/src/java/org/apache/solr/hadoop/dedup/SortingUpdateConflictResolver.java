begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.hadoop.dedup
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
operator|.
name|dedup
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
operator|.
name|Context
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|hadoop
operator|.
name|HdfsFileFieldNames
import|;
end_import
begin_comment
comment|/**  * UpdateConflictResolver implementation that orders colliding updates ascending  * from least recent to most recent (partial) update, based on a configurable  * numeric Solr field, which defaults to the file_last_modified timestamp.  */
end_comment
begin_class
DECL|class|SortingUpdateConflictResolver
specifier|public
class|class
name|SortingUpdateConflictResolver
implements|implements
name|UpdateConflictResolver
implements|,
name|Configurable
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|orderByFieldName
specifier|private
name|String
name|orderByFieldName
init|=
name|ORDER_BY_FIELD_NAME_DEFAULT
decl_stmt|;
DECL|field|ORDER_BY_FIELD_NAME_KEY
specifier|public
specifier|static
specifier|final
name|String
name|ORDER_BY_FIELD_NAME_KEY
init|=
name|SortingUpdateConflictResolver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".orderByFieldName"
decl_stmt|;
DECL|field|ORDER_BY_FIELD_NAME_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|ORDER_BY_FIELD_NAME_DEFAULT
init|=
name|HdfsFileFieldNames
operator|.
name|FILE_LAST_MODIFIED
decl_stmt|;
annotation|@
name|Override
DECL|method|setConf
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|orderByFieldName
operator|=
name|conf
operator|.
name|get
argument_list|(
name|ORDER_BY_FIELD_NAME_KEY
argument_list|,
name|orderByFieldName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
DECL|method|getOrderByFieldName
specifier|protected
name|String
name|getOrderByFieldName
parameter_list|()
block|{
return|return
name|orderByFieldName
return|;
block|}
annotation|@
name|Override
DECL|method|orderUpdates
specifier|public
name|Iterator
argument_list|<
name|SolrInputDocument
argument_list|>
name|orderUpdates
parameter_list|(
name|Text
name|key
parameter_list|,
name|Iterator
argument_list|<
name|SolrInputDocument
argument_list|>
name|updates
parameter_list|,
name|Context
name|ctx
parameter_list|)
block|{
return|return
name|sort
argument_list|(
name|updates
argument_list|,
name|getOrderByFieldName
argument_list|()
argument_list|,
operator|new
name|SolrInputDocumentComparator
operator|.
name|TimeStampComparator
argument_list|()
argument_list|)
return|;
block|}
DECL|method|sort
specifier|protected
name|Iterator
argument_list|<
name|SolrInputDocument
argument_list|>
name|sort
parameter_list|(
name|Iterator
argument_list|<
name|SolrInputDocument
argument_list|>
name|updates
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Comparator
name|child
parameter_list|)
block|{
comment|// TODO: use an external merge sort in the pathological case where there are a huge amount of collisions
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|sortedUpdates
init|=
operator|new
name|ArrayList
argument_list|(
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
name|updates
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sortedUpdates
operator|.
name|add
argument_list|(
name|updates
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sortedUpdates
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// conflicts are rare
name|Collections
operator|.
name|sort
argument_list|(
name|sortedUpdates
argument_list|,
operator|new
name|SolrInputDocumentComparator
argument_list|(
name|fieldName
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sortedUpdates
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
end_class
end_unit
