begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.index
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|index
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MergePolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortingMergePolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SortSpecParsing
import|;
end_import
begin_comment
comment|/**  * A {@link MergePolicyFactory} for {@link SortingMergePolicy} objects.  */
end_comment
begin_class
DECL|class|SortingMergePolicyFactory
specifier|public
class|class
name|SortingMergePolicyFactory
extends|extends
name|WrapperMergePolicyFactory
block|{
DECL|field|SORT
specifier|static
specifier|final
name|String
name|SORT
init|=
literal|"sort"
decl_stmt|;
comment|// not private so that test(s) can use it
DECL|field|mergeSort
specifier|protected
specifier|final
name|Sort
name|mergeSort
decl_stmt|;
DECL|method|SortingMergePolicyFactory
specifier|public
name|SortingMergePolicyFactory
parameter_list|(
name|SolrResourceLoader
name|resourceLoader
parameter_list|,
name|MergePolicyFactoryArgs
name|args
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
block|{
name|super
argument_list|(
name|resourceLoader
argument_list|,
name|args
argument_list|,
name|schema
argument_list|)
expr_stmt|;
specifier|final
name|String
name|sortArg
init|=
operator|(
name|String
operator|)
name|args
operator|.
name|remove
argument_list|(
name|SORT
argument_list|)
decl_stmt|;
if|if
condition|(
name|sortArg
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|SortingMergePolicyFactory
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" requires a '"
operator|+
name|SORT
operator|+
literal|"' argument."
argument_list|)
throw|;
block|}
name|this
operator|.
name|mergeSort
operator|=
name|SortSpecParsing
operator|.
name|parseSortSpec
argument_list|(
name|sortArg
argument_list|,
name|schema
argument_list|)
operator|.
name|getSort
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMergePolicyInstance
specifier|protected
name|MergePolicy
name|getMergePolicyInstance
parameter_list|(
name|MergePolicy
name|wrappedMP
parameter_list|)
block|{
specifier|final
name|MergePolicy
name|mp
init|=
operator|new
name|SortingMergePolicy
argument_list|(
name|wrappedMP
argument_list|,
name|mergeSort
argument_list|)
decl_stmt|;
return|return
name|mp
return|;
block|}
block|}
end_class
end_unit
