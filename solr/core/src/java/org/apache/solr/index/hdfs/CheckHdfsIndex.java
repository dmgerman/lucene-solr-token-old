begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.index.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|index
operator|.
name|hdfs
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CheckIndex
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SuppressForbidden
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|HdfsDirectoryFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|store
operator|.
name|hdfs
operator|.
name|HdfsDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|HdfsUtil
import|;
end_import
begin_class
DECL|class|CheckHdfsIndex
specifier|public
class|class
name|CheckHdfsIndex
block|{
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|exitCode
init|=
name|doMain
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
block|}
comment|// actual main: returns exit code instead of terminating JVM (for easy testing)
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"System.out required: command line tool"
argument_list|)
DECL|method|doMain
specifier|protected
specifier|static
name|int
name|doMain
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|CheckIndex
operator|.
name|Options
name|opts
decl_stmt|;
try|try
block|{
name|opts
operator|=
name|CheckIndex
operator|.
name|parseOptions
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|CheckIndex
operator|.
name|assertsOn
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nNOTE: testing will be more thorough if you run java with '-ea:org.apache.lucene...', so assertions are enabled"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|opts
operator|.
name|getDirImpl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nIgnoring specified -dir-impl, instead using "
operator|+
name|HdfsDirectory
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nOpening index @ "
operator|+
name|opts
operator|.
name|getIndexPath
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|Directory
name|directory
decl_stmt|;
try|try
block|{
name|directory
operator|=
operator|new
name|HdfsDirectory
argument_list|(
operator|new
name|Path
argument_list|(
name|opts
operator|.
name|getIndexPath
argument_list|()
argument_list|)
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: could not open hdfs directory \""
operator|+
name|opts
operator|.
name|getIndexPath
argument_list|()
operator|+
literal|"\"; exiting"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
try|try
init|(
name|Directory
name|dir
init|=
name|directory
init|;
name|CheckIndex
name|checker
operator|=
operator|new
name|CheckIndex
argument_list|(
name|dir
argument_list|)
init|)
block|{
name|opts
operator|.
name|setOut
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
return|return
name|checker
operator|.
name|doCheck
argument_list|(
name|opts
argument_list|)
return|;
block|}
block|}
DECL|method|getConf
specifier|private
specifier|static
name|Configuration
name|getConf
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
name|confDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|HdfsDirectoryFactory
operator|.
name|CONFIG_DIRECTORY
argument_list|)
decl_stmt|;
name|HdfsUtil
operator|.
name|addHdfsResources
argument_list|(
name|conf
argument_list|,
name|confDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"fs.hdfs.impl.disable.cache"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
block|}
end_class
end_unit
