begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_class
DECL|class|HdfsUtil
specifier|public
class|class
name|HdfsUtil
block|{
comment|// Allows tests to easily add additional conf
DECL|field|TEST_CONF
specifier|public
specifier|static
name|Configuration
name|TEST_CONF
init|=
literal|null
decl_stmt|;
DECL|field|HADOOP_CONF_FILES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|HADOOP_CONF_FILES
init|=
block|{
literal|"core-site.xml"
block|,
literal|"hdfs-site.xml"
block|,
literal|"mapred-site.xml"
block|,
literal|"yarn-site.xml"
block|,
literal|"hadoop-site.xml"
block|}
decl_stmt|;
DECL|method|addHdfsResources
specifier|public
specifier|static
name|void
name|addHdfsResources
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|confDir
parameter_list|)
block|{
if|if
condition|(
name|confDir
operator|!=
literal|null
operator|&&
name|confDir
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|File
name|confDirFile
init|=
operator|new
name|File
argument_list|(
name|confDir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|confDirFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Resource directory does not exist: "
operator|+
name|confDirFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|confDirFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Specified resource directory is not a directory"
operator|+
name|confDirFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|confDirFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Resource directory must be readable by the Solr process: "
operator|+
name|confDirFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|file
range|:
name|HADOOP_CONF_FILES
control|)
block|{
if|if
condition|(
operator|new
name|File
argument_list|(
name|confDirFile
argument_list|,
name|file
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|conf
operator|.
name|addResource
argument_list|(
operator|new
name|Path
argument_list|(
name|confDir
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|TEST_CONF
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|addResource
argument_list|(
name|TEST_CONF
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
