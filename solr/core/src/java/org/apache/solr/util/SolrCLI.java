begin_unit
begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipInputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|NoHttpResponseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|StatusLine
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|ClientProtocolException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpResponseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|ResponseHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URIBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|ConnectTimeoutException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpClientUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|CharArr
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|NAME
import|;
end_import
begin_comment
comment|/**  * Command-line utility for working with Solr.  */
end_comment
begin_class
DECL|class|SolrCLI
specifier|public
class|class
name|SolrCLI
block|{
comment|/**    * Defines the interface to a Solr tool that can be run from this command-line app.    */
DECL|interface|Tool
specifier|public
interface|interface
name|Tool
block|{
DECL|method|getName
name|String
name|getName
parameter_list|()
function_decl|;
DECL|method|getOptions
name|Option
index|[]
name|getOptions
parameter_list|()
function_decl|;
DECL|method|runTool
name|int
name|runTool
parameter_list|(
name|CommandLine
name|cli
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
comment|/**    * Helps build SolrCloud aware tools by initializing a CloudSolrClient    * instance before running the tool.    */
DECL|class|SolrCloudTool
specifier|public
specifier|static
specifier|abstract
class|class
name|SolrCloudTool
implements|implements
name|Tool
block|{
DECL|method|getOptions
specifier|public
name|Option
index|[]
name|getOptions
parameter_list|()
block|{
return|return
name|cloudOptions
return|;
block|}
DECL|method|runTool
specifier|public
name|int
name|runTool
parameter_list|(
name|CommandLine
name|cli
parameter_list|)
throws|throws
name|Exception
block|{
comment|// quiet down the ZK logging for cli tools
name|LogManager
operator|.
name|getLogger
argument_list|(
literal|"org.apache.zookeeper"
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ERROR
argument_list|)
expr_stmt|;
name|LogManager
operator|.
name|getLogger
argument_list|(
literal|"org.apache.solr.common.cloud"
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
expr_stmt|;
name|String
name|zkHost
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"zkHost"
argument_list|,
name|ZK_HOST
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Connecting to Solr cluster: "
operator|+
name|zkHost
argument_list|)
expr_stmt|;
name|int
name|exitStatus
init|=
literal|0
decl_stmt|;
try|try
init|(
name|CloudSolrClient
name|cloudSolrClient
init|=
operator|new
name|CloudSolrClient
argument_list|(
name|zkHost
argument_list|)
init|)
block|{
name|String
name|collection
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"collection"
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
name|cloudSolrClient
operator|.
name|setDefaultCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|cloudSolrClient
operator|.
name|connect
argument_list|()
expr_stmt|;
name|exitStatus
operator|=
name|runCloudTool
argument_list|(
name|cloudSolrClient
argument_list|,
name|cli
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
comment|// since this is a CLI, spare the user the stacktrace
name|String
name|excMsg
init|=
name|exc
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|excMsg
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\nERROR: "
operator|+
name|excMsg
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|exitStatus
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|exc
throw|;
block|}
block|}
return|return
name|exitStatus
return|;
block|}
comment|/**      * Runs a SolrCloud tool with CloudSolrServer initialized      */
DECL|method|runCloudTool
specifier|protected
specifier|abstract
name|int
name|runCloudTool
parameter_list|(
name|CloudSolrClient
name|cloudSolrClient
parameter_list|,
name|CommandLine
name|cli
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
DECL|field|log
specifier|public
specifier|static
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|SolrCLI
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_SOLR_URL
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SOLR_URL
init|=
literal|"http://localhost:8983/solr"
decl_stmt|;
DECL|field|ZK_HOST
specifier|public
specifier|static
specifier|final
name|String
name|ZK_HOST
init|=
literal|"localhost:9983"
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
DECL|field|cloudOptions
specifier|public
specifier|static
name|Option
index|[]
name|cloudOptions
init|=
operator|new
name|Option
index|[]
block|{
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"HOST"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|false
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Address of the Zookeeper ensemble; defaults to: "
operator|+
name|ZK_HOST
argument_list|)
operator|.
name|create
argument_list|(
literal|"zkHost"
argument_list|)
block|,
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"COLLECTION"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|false
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Name of collection; no default"
argument_list|)
operator|.
name|create
argument_list|(
literal|"collection"
argument_list|)
block|}
decl_stmt|;
comment|/**    * Runs a tool.    */
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|==
literal|null
operator|||
name|args
operator|.
name|length
operator|==
literal|0
operator|||
name|args
index|[
literal|0
index|]
operator|==
literal|null
operator|||
name|args
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid command-line args! Must pass the name of a tool to run.\n"
operator|+
literal|"Supported tools:\n"
argument_list|)
expr_stmt|;
name|displayToolOptions
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Determine the tool
name|String
name|toolType
init|=
name|args
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|Tool
name|tool
init|=
name|newTool
argument_list|(
name|toolType
argument_list|)
decl_stmt|;
name|String
index|[]
name|toolArgs
init|=
operator|new
name|String
index|[
name|args
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|args
argument_list|,
literal|1
argument_list|,
name|toolArgs
argument_list|,
literal|0
argument_list|,
name|toolArgs
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// process command-line args to configure this application
name|CommandLine
name|cli
init|=
name|processCommandLineArgs
argument_list|(
name|joinCommonAndToolOptions
argument_list|(
name|tool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|toolArgs
argument_list|)
decl_stmt|;
comment|// for SSL support, try to accommodate relative paths set for SSL store props
name|String
name|solrInstallDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"solr.install.dir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|solrInstallDir
operator|!=
literal|null
condition|)
block|{
name|checkSslStoreSysProp
argument_list|(
name|solrInstallDir
argument_list|,
literal|"keyStore"
argument_list|)
expr_stmt|;
name|checkSslStoreSysProp
argument_list|(
name|solrInstallDir
argument_list|,
literal|"trustStore"
argument_list|)
expr_stmt|;
block|}
comment|// run the tool
name|System
operator|.
name|exit
argument_list|(
name|tool
operator|.
name|runTool
argument_list|(
name|cli
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkSslStoreSysProp
specifier|protected
specifier|static
name|void
name|checkSslStoreSysProp
parameter_list|(
name|String
name|solrInstallDir
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|String
name|sysProp
init|=
literal|"javax.net.ssl."
operator|+
name|key
decl_stmt|;
name|String
name|keyStore
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|sysProp
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyStore
operator|==
literal|null
condition|)
return|return;
name|File
name|keyStoreFile
init|=
operator|new
name|File
argument_list|(
name|keyStore
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyStoreFile
operator|.
name|isFile
argument_list|()
condition|)
return|return;
comment|// configured setting is OK
name|keyStoreFile
operator|=
operator|new
name|File
argument_list|(
name|solrInstallDir
argument_list|,
literal|"server/"
operator|+
name|keyStore
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyStoreFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|sysProp
argument_list|,
name|keyStoreFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"WARNING: "
operator|+
name|sysProp
operator|+
literal|" file "
operator|+
name|keyStore
operator|+
literal|" not found! https requests to Solr will likely fail; please update your "
operator|+
name|sysProp
operator|+
literal|" setting to use an absolute path."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Support options common to all tools.    */
DECL|method|getCommonToolOptions
specifier|public
specifier|static
name|Option
index|[]
name|getCommonToolOptions
parameter_list|()
block|{
return|return
operator|new
name|Option
index|[
literal|0
index|]
return|;
block|}
comment|// Creates an instance of the requested tool, using classpath scanning if necessary
DECL|method|newTool
specifier|private
specifier|static
name|Tool
name|newTool
parameter_list|(
name|String
name|toolType
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
literal|"healthcheck"
operator|.
name|equals
argument_list|(
name|toolType
argument_list|)
condition|)
return|return
operator|new
name|HealthcheckTool
argument_list|()
return|;
elseif|else
if|if
condition|(
literal|"status"
operator|.
name|equals
argument_list|(
name|toolType
argument_list|)
condition|)
return|return
operator|new
name|StatusTool
argument_list|()
return|;
elseif|else
if|if
condition|(
literal|"api"
operator|.
name|equals
argument_list|(
name|toolType
argument_list|)
condition|)
return|return
operator|new
name|ApiTool
argument_list|()
return|;
elseif|else
if|if
condition|(
literal|"create_collection"
operator|.
name|equals
argument_list|(
name|toolType
argument_list|)
condition|)
return|return
operator|new
name|CreateCollectionTool
argument_list|()
return|;
elseif|else
if|if
condition|(
literal|"create_core"
operator|.
name|equals
argument_list|(
name|toolType
argument_list|)
condition|)
return|return
operator|new
name|CreateCoreTool
argument_list|()
return|;
elseif|else
if|if
condition|(
literal|"create"
operator|.
name|equals
argument_list|(
name|toolType
argument_list|)
condition|)
return|return
operator|new
name|CreateTool
argument_list|()
return|;
elseif|else
if|if
condition|(
literal|"delete"
operator|.
name|equals
argument_list|(
name|toolType
argument_list|)
condition|)
return|return
operator|new
name|DeleteTool
argument_list|()
return|;
comment|// If you add a built-in tool to this class, add it here to avoid
comment|// classpath scanning
for|for
control|(
name|Class
argument_list|<
name|Tool
argument_list|>
name|next
range|:
name|findToolClassesInPackage
argument_list|(
literal|"org.apache.solr.util"
argument_list|)
control|)
block|{
name|Tool
name|tool
init|=
name|next
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|toolType
operator|.
name|equals
argument_list|(
name|tool
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
return|return
name|tool
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|toolType
operator|+
literal|" not supported!"
argument_list|)
throw|;
block|}
DECL|method|displayToolOptions
specifier|private
specifier|static
name|void
name|displayToolOptions
parameter_list|(
name|PrintStream
name|out
parameter_list|)
throws|throws
name|Exception
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"healthcheck"
argument_list|,
name|getToolOptions
argument_list|(
operator|new
name|HealthcheckTool
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"status"
argument_list|,
name|getToolOptions
argument_list|(
operator|new
name|StatusTool
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"api"
argument_list|,
name|getToolOptions
argument_list|(
operator|new
name|ApiTool
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"create_collection"
argument_list|,
name|getToolOptions
argument_list|(
operator|new
name|CreateCollectionTool
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"create_core"
argument_list|,
name|getToolOptions
argument_list|(
operator|new
name|CreateCoreTool
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"create"
argument_list|,
name|getToolOptions
argument_list|(
operator|new
name|CreateTool
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"delete"
argument_list|,
name|getToolOptions
argument_list|(
operator|new
name|DeleteTool
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Class
argument_list|<
name|Tool
argument_list|>
argument_list|>
name|toolClasses
init|=
name|findToolClassesInPackage
argument_list|(
literal|"org.apache.solr.util"
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|Tool
argument_list|>
name|next
range|:
name|toolClasses
control|)
block|{
name|Tool
name|tool
init|=
name|next
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
name|tool
operator|.
name|getName
argument_list|()
argument_list|,
name|getToolOptions
argument_list|(
name|tool
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getToolOptions
specifier|private
specifier|static
name|Options
name|getToolOptions
parameter_list|(
name|Tool
name|tool
parameter_list|)
block|{
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"h"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"Print this message"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"v"
argument_list|,
literal|"verbose"
argument_list|,
literal|false
argument_list|,
literal|"Generate verbose log messages"
argument_list|)
expr_stmt|;
name|Option
index|[]
name|toolOpts
init|=
name|joinCommonAndToolOptions
argument_list|(
name|tool
operator|.
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toolOpts
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|options
operator|.
name|addOption
argument_list|(
name|toolOpts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|options
return|;
block|}
DECL|method|joinCommonAndToolOptions
specifier|public
specifier|static
name|Option
index|[]
name|joinCommonAndToolOptions
parameter_list|(
name|Option
index|[]
name|toolOpts
parameter_list|)
block|{
return|return
name|joinOptions
argument_list|(
name|getCommonToolOptions
argument_list|()
argument_list|,
name|toolOpts
argument_list|)
return|;
block|}
DECL|method|joinOptions
specifier|public
specifier|static
name|Option
index|[]
name|joinOptions
parameter_list|(
name|Option
index|[]
name|lhs
parameter_list|,
name|Option
index|[]
name|rhs
parameter_list|)
block|{
name|List
argument_list|<
name|Option
argument_list|>
name|options
init|=
operator|new
name|ArrayList
argument_list|<
name|Option
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|lhs
operator|!=
literal|null
operator|&&
name|lhs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Option
name|opt
range|:
name|lhs
control|)
name|options
operator|.
name|add
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rhs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Option
name|opt
range|:
name|rhs
control|)
name|options
operator|.
name|add
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
return|return
name|options
operator|.
name|toArray
argument_list|(
operator|new
name|Option
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/**    * Parses the command-line arguments passed by the user.    */
DECL|method|processCommandLineArgs
specifier|public
specifier|static
name|CommandLine
name|processCommandLineArgs
parameter_list|(
name|Option
index|[]
name|customOptions
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
block|{
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"h"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"Print this message"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"v"
argument_list|,
literal|"verbose"
argument_list|,
literal|false
argument_list|,
literal|"Generate verbose log messages"
argument_list|)
expr_stmt|;
if|if
condition|(
name|customOptions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|customOptions
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|options
operator|.
name|addOption
argument_list|(
name|customOptions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|CommandLine
name|cli
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cli
operator|=
operator|(
operator|new
name|GnuParser
argument_list|()
operator|)
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|exp
parameter_list|)
block|{
name|boolean
name|hasHelpArg
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|z
init|=
literal|0
init|;
name|z
operator|<
name|args
operator|.
name|length
condition|;
name|z
operator|++
control|)
block|{
if|if
condition|(
literal|"-h"
operator|.
name|equals
argument_list|(
name|args
index|[
name|z
index|]
argument_list|)
operator|||
literal|"-help"
operator|.
name|equals
argument_list|(
name|args
index|[
name|z
index|]
argument_list|)
condition|)
block|{
name|hasHelpArg
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasHelpArg
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Failed to parse command-line arguments due to: "
operator|+
name|exp
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
name|SolrCLI
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|"help"
argument_list|)
condition|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
name|SolrCLI
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|cli
return|;
block|}
comment|/**    * Scans Jar files on the classpath for Tool implementations to activate.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|findToolClassesInPackage
specifier|private
specifier|static
name|List
argument_list|<
name|Class
argument_list|<
name|Tool
argument_list|>
argument_list|>
name|findToolClassesInPackage
parameter_list|(
name|String
name|packageName
parameter_list|)
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|Tool
argument_list|>
argument_list|>
name|toolClasses
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|Tool
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|ClassLoader
name|classLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|packageName
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|resources
init|=
name|classLoader
operator|.
name|getResources
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|classes
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|resources
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|URL
name|resource
init|=
operator|(
name|URL
operator|)
name|resources
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|classes
operator|.
name|addAll
argument_list|(
name|findClasses
argument_list|(
name|resource
operator|.
name|getFile
argument_list|()
argument_list|,
name|packageName
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|classInPackage
range|:
name|classes
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|theClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|classInPackage
argument_list|)
decl_stmt|;
if|if
condition|(
name|Tool
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|theClass
argument_list|)
condition|)
name|toolClasses
operator|.
name|add
argument_list|(
operator|(
name|Class
argument_list|<
name|Tool
argument_list|>
operator|)
name|theClass
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// safe to squelch this as it's just looking for tools to run
comment|//e.printStackTrace();
block|}
return|return
name|toolClasses
return|;
block|}
DECL|method|findClasses
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|findClasses
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|packageName
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|classes
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
operator|&&
name|path
operator|.
name|contains
argument_list|(
literal|"!"
argument_list|)
condition|)
block|{
name|String
index|[]
name|split
init|=
name|path
operator|.
name|split
argument_list|(
literal|"!"
argument_list|)
decl_stmt|;
name|URL
name|jar
init|=
operator|new
name|URL
argument_list|(
name|split
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|ZipInputStream
name|zip
init|=
operator|new
name|ZipInputStream
argument_list|(
name|jar
operator|.
name|openStream
argument_list|()
argument_list|)
decl_stmt|;
name|ZipEntry
name|entry
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|zip
operator|.
name|getNextEntry
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
condition|)
block|{
name|String
name|className
init|=
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"[$].*"
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"[.]class"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|startsWith
argument_list|(
name|packageName
argument_list|)
condition|)
name|classes
operator|.
name|add
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|classes
return|;
block|}
comment|/**    * Determine if a request to Solr failed due to a communication error,    * which is generally retry-able.     */
DECL|method|checkCommunicationError
specifier|public
specifier|static
name|boolean
name|checkCommunicationError
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
name|Throwable
name|rootCause
init|=
name|SolrException
operator|.
name|getRootCause
argument_list|(
name|exc
argument_list|)
decl_stmt|;
name|boolean
name|wasCommError
init|=
operator|(
name|rootCause
operator|instanceof
name|ConnectException
operator|||
name|rootCause
operator|instanceof
name|ConnectTimeoutException
operator|||
name|rootCause
operator|instanceof
name|NoHttpResponseException
operator|||
name|rootCause
operator|instanceof
name|SocketException
operator|)
decl_stmt|;
return|return
name|wasCommError
return|;
block|}
DECL|method|getHttpClient
specifier|public
specifier|static
name|CloseableHttpClient
name|getHttpClient
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_MAX_CONNECTIONS
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_MAX_CONNECTIONS_PER_HOST
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_FOLLOW_REDIRECTS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|HttpClientUtil
operator|.
name|createClient
argument_list|(
name|params
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|closeHttpClient
specifier|public
specifier|static
name|void
name|closeHttpClient
parameter_list|(
name|CloseableHttpClient
name|httpClient
parameter_list|)
block|{
if|if
condition|(
name|httpClient
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|HttpClientUtil
operator|.
name|close
argument_list|(
name|httpClient
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
comment|// safe to ignore, we're just shutting things down
block|}
block|}
block|}
comment|/**    * Useful when a tool just needs to send one request to Solr.     */
DECL|method|getJson
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getJson
parameter_list|(
name|String
name|getUrl
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
literal|null
decl_stmt|;
name|CloseableHttpClient
name|httpClient
init|=
name|getHttpClient
argument_list|()
decl_stmt|;
try|try
block|{
name|json
operator|=
name|getJson
argument_list|(
name|httpClient
argument_list|,
name|getUrl
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeHttpClient
argument_list|(
name|httpClient
argument_list|)
expr_stmt|;
block|}
return|return
name|json
return|;
block|}
comment|/**    * Utility function for sending HTTP GET request to Solr with built-in retry support.    */
DECL|method|getJson
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getJson
parameter_list|(
name|HttpClient
name|httpClient
parameter_list|,
name|String
name|getUrl
parameter_list|,
name|int
name|attempts
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|attempts
operator|>=
literal|1
condition|)
block|{
try|try
block|{
name|json
operator|=
name|getJson
argument_list|(
name|httpClient
argument_list|,
name|getUrl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
if|if
condition|(
operator|--
name|attempts
operator|>
literal|0
operator|&&
name|checkCommunicationError
argument_list|(
name|exc
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Request to "
operator|+
name|getUrl
operator|+
literal|" failed due to: "
operator|+
name|exc
operator|.
name|getMessage
argument_list|()
operator|+
literal|", sleeping for 5 seconds before re-trying the request ..."
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
block|}
comment|// retry using recursion with one-less attempt available
name|json
operator|=
name|getJson
argument_list|(
name|httpClient
argument_list|,
name|getUrl
argument_list|,
name|attempts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no more attempts or error is not retry-able
throw|throw
name|exc
throw|;
block|}
block|}
block|}
return|return
name|json
return|;
block|}
DECL|class|SolrResponseHandler
specifier|private
specifier|static
class|class
name|SolrResponseHandler
implements|implements
name|ResponseHandler
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
block|{
DECL|method|handleResponse
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|handleResponse
parameter_list|(
name|HttpResponse
name|response
parameter_list|)
throws|throws
name|ClientProtocolException
throws|,
name|IOException
block|{
name|HttpEntity
name|entity
init|=
name|response
operator|.
name|getEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|String
name|respBody
init|=
name|EntityUtils
operator|.
name|toString
argument_list|(
name|entity
argument_list|)
decl_stmt|;
name|Object
name|resp
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
operator|new
name|JSONParser
argument_list|(
name|respBody
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONParser
operator|.
name|ParseException
name|pe
parameter_list|)
block|{
throw|throw
operator|new
name|ClientProtocolException
argument_list|(
literal|"Expected JSON response from server but received: "
operator|+
name|respBody
operator|+
literal|"\nTypically, this indicates a problem with the Solr server; check the Solr server logs for more information."
argument_list|)
throw|;
block|}
if|if
condition|(
name|resp
operator|!=
literal|null
operator|&&
name|resp
operator|instanceof
name|Map
condition|)
block|{
return|return
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|resp
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ClientProtocolException
argument_list|(
literal|"Expected JSON object in response but received "
operator|+
name|resp
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|StatusLine
name|statusLine
init|=
name|response
operator|.
name|getStatusLine
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|HttpResponseException
argument_list|(
name|statusLine
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|statusLine
operator|.
name|getReasonPhrase
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Utility function for sending HTTP GET request to Solr and then doing some    * validation of the response.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|getJson
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getJson
parameter_list|(
name|HttpClient
name|httpClient
parameter_list|,
name|String
name|getUrl
parameter_list|)
throws|throws
name|Exception
block|{
comment|// ensure we're requesting JSON back from Solr
name|HttpGet
name|httpGet
init|=
operator|new
name|HttpGet
argument_list|(
operator|new
name|URIBuilder
argument_list|(
name|getUrl
argument_list|)
operator|.
name|setParameter
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|,
name|CommonParams
operator|.
name|JSON
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
comment|// make the request and get back a parsed JSON object
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
name|httpClient
operator|.
name|execute
argument_list|(
name|httpGet
argument_list|,
operator|new
name|SolrResponseHandler
argument_list|()
argument_list|)
decl_stmt|;
comment|// check the response JSON from Solr to see if it is an error
name|Long
name|statusCode
init|=
name|asLong
argument_list|(
literal|"/responseHeader/status"
argument_list|,
name|json
argument_list|)
decl_stmt|;
if|if
condition|(
name|statusCode
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|SolrServerException
argument_list|(
literal|"Unable to determine outcome of GET request to: "
operator|+
name|getUrl
operator|+
literal|"! Response: "
operator|+
name|json
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|statusCode
operator|!=
literal|0
condition|)
block|{
name|String
name|errMsg
init|=
name|asString
argument_list|(
literal|"/error/msg"
argument_list|,
name|json
argument_list|)
decl_stmt|;
if|if
condition|(
name|errMsg
operator|==
literal|null
condition|)
name|errMsg
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|json
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrServerException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
return|return
name|json
return|;
block|}
comment|/**    * Helper function for reading a String value from a JSON Object tree.     */
DECL|method|asString
specifier|public
specifier|static
name|String
name|asString
parameter_list|(
name|String
name|jsonPath
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
parameter_list|)
block|{
return|return
name|pathAs
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|jsonPath
argument_list|,
name|json
argument_list|)
return|;
block|}
comment|/**    * Helper function for reading a Long value from a JSON Object tree.     */
DECL|method|asLong
specifier|public
specifier|static
name|Long
name|asLong
parameter_list|(
name|String
name|jsonPath
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
parameter_list|)
block|{
return|return
name|pathAs
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|jsonPath
argument_list|,
name|json
argument_list|)
return|;
block|}
comment|/**    * Helper function for reading a List of Strings from a JSON Object tree.     */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|asList
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|asList
parameter_list|(
name|String
name|jsonPath
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
parameter_list|)
block|{
return|return
name|pathAs
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|jsonPath
argument_list|,
name|json
argument_list|)
return|;
block|}
comment|/**    * Helper function for reading a Map from a JSON Object tree.     */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|asMap
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|asMap
parameter_list|(
name|String
name|jsonPath
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
parameter_list|)
block|{
return|return
name|pathAs
argument_list|(
name|Map
operator|.
name|class
argument_list|,
name|jsonPath
argument_list|,
name|json
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|pathAs
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|pathAs
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|String
name|jsonPath
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
parameter_list|)
block|{
name|T
name|val
init|=
literal|null
decl_stmt|;
name|Object
name|obj
init|=
name|atPath
argument_list|(
name|jsonPath
argument_list|,
name|json
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|val
operator|=
operator|(
name|T
operator|)
name|obj
expr_stmt|;
block|}
else|else
block|{
comment|// no ok if it's not null and of a different type
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Expected a "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|" at path "
operator|+
name|jsonPath
operator|+
literal|" but found "
operator|+
name|obj
operator|+
literal|" instead! "
operator|+
name|json
argument_list|)
throw|;
block|}
block|}
comment|// it's ok if it is null
return|return
name|val
return|;
block|}
comment|/**    * Helper function for reading an Object of unknown type from a JSON Object tree.     */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|atPath
specifier|public
specifier|static
name|Object
name|atPath
parameter_list|(
name|String
name|jsonPath
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
parameter_list|)
block|{
if|if
condition|(
literal|"/"
operator|.
name|equals
argument_list|(
name|jsonPath
argument_list|)
condition|)
return|return
name|json
return|;
if|if
condition|(
operator|!
name|jsonPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid JSON path: "
operator|+
name|jsonPath
operator|+
literal|"! Must start with a /"
argument_list|)
throw|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parent
init|=
name|json
decl_stmt|;
name|Object
name|result
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|path
init|=
name|jsonPath
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|1
init|;
name|p
operator|<
name|path
operator|.
name|length
condition|;
name|p
operator|++
control|)
block|{
name|Object
name|child
init|=
name|parent
operator|.
name|get
argument_list|(
name|path
index|[
name|p
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
break|break;
if|if
condition|(
name|p
operator|==
name|path
operator|.
name|length
operator|-
literal|1
condition|)
block|{
comment|// success - found the node at the desired path
name|result
operator|=
name|child
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|child
operator|instanceof
name|Map
condition|)
block|{
comment|// keep walking the path down to the desired node
name|parent
operator|=
operator|(
name|Map
operator|)
name|child
expr_stmt|;
block|}
else|else
block|{
comment|// early termination - hit a leaf before the requested node
break|break;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get the status of a Solr server.    */
DECL|class|StatusTool
specifier|public
specifier|static
class|class
name|StatusTool
implements|implements
name|Tool
block|{
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"status"
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
annotation|@
name|Override
DECL|method|getOptions
specifier|public
name|Option
index|[]
name|getOptions
parameter_list|()
block|{
return|return
operator|new
name|Option
index|[]
block|{
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"URL"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|false
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Address of the Solr Web application, defaults to: "
operator|+
name|DEFAULT_SOLR_URL
argument_list|)
operator|.
name|create
argument_list|(
literal|"solr"
argument_list|)
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|runTool
specifier|public
name|int
name|runTool
parameter_list|(
name|CommandLine
name|cli
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|solrUrl
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"solr"
argument_list|,
name|DEFAULT_SOLR_URL
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|solrUrl
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|solrUrl
operator|+=
literal|"/"
expr_stmt|;
name|int
name|exitCode
init|=
literal|0
decl_stmt|;
name|String
name|systemInfoUrl
init|=
name|solrUrl
operator|+
literal|"admin/info/system"
decl_stmt|;
name|CloseableHttpClient
name|httpClient
init|=
name|getHttpClient
argument_list|()
decl_stmt|;
try|try
block|{
comment|// hit Solr to get system info
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|systemInfo
init|=
name|getJson
argument_list|(
name|httpClient
argument_list|,
name|systemInfoUrl
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// convert raw JSON into user-friendly output
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|status
init|=
name|reportStatus
argument_list|(
name|solrUrl
argument_list|,
name|systemInfo
argument_list|,
name|httpClient
argument_list|)
decl_stmt|;
comment|// pretty-print the status to stdout
name|CharArr
name|arr
init|=
operator|new
name|CharArr
argument_list|()
decl_stmt|;
operator|new
name|JSONWriter
argument_list|(
name|arr
argument_list|,
literal|2
argument_list|)
operator|.
name|write
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|arr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
if|if
condition|(
name|checkCommunicationError
argument_list|(
name|exc
argument_list|)
condition|)
block|{
comment|// this is not actually an error from the tool as it's ok if Solr is not online.
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Solr at "
operator|+
name|solrUrl
operator|+
literal|" not online."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Failed to get system information from "
operator|+
name|solrUrl
operator|+
literal|" due to: "
argument_list|)
expr_stmt|;
name|exc
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|exitCode
operator|=
literal|1
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|closeHttpClient
argument_list|(
name|httpClient
argument_list|)
expr_stmt|;
block|}
return|return
name|exitCode
return|;
block|}
DECL|method|reportStatus
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|reportStatus
parameter_list|(
name|String
name|solrUrl
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|info
parameter_list|,
name|HttpClient
name|httpClient
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|status
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|solrHome
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"solr_home"
argument_list|)
decl_stmt|;
name|status
operator|.
name|put
argument_list|(
literal|"solr_home"
argument_list|,
name|solrHome
operator|!=
literal|null
condition|?
name|solrHome
else|:
literal|"?"
argument_list|)
expr_stmt|;
name|status
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|asString
argument_list|(
literal|"/lucene/solr-impl-version"
argument_list|,
name|info
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|put
argument_list|(
literal|"startTime"
argument_list|,
name|asString
argument_list|(
literal|"/jvm/jmx/startTime"
argument_list|,
name|info
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|put
argument_list|(
literal|"uptime"
argument_list|,
name|uptime
argument_list|(
name|asLong
argument_list|(
literal|"/jvm/jmx/upTimeMS"
argument_list|,
name|info
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|usedMemory
init|=
name|asString
argument_list|(
literal|"/jvm/memory/used"
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|String
name|totalMemory
init|=
name|asString
argument_list|(
literal|"/jvm/memory/total"
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|status
operator|.
name|put
argument_list|(
literal|"memory"
argument_list|,
name|usedMemory
operator|+
literal|" of "
operator|+
name|totalMemory
argument_list|)
expr_stmt|;
comment|// if this is a Solr in solrcloud mode, gather some basic cluster info
if|if
condition|(
literal|"solrcloud"
operator|.
name|equals
argument_list|(
name|info
operator|.
name|get
argument_list|(
literal|"mode"
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|zkHost
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"zkHost"
argument_list|)
decl_stmt|;
name|status
operator|.
name|put
argument_list|(
literal|"cloud"
argument_list|,
name|getCloudStatus
argument_list|(
name|httpClient
argument_list|,
name|solrUrl
argument_list|,
name|zkHost
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|status
return|;
block|}
comment|/**      * Calls the CLUSTERSTATUS endpoint in Solr to get basic status information about      * the SolrCloud cluster.       */
DECL|method|getCloudStatus
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getCloudStatus
parameter_list|(
name|HttpClient
name|httpClient
parameter_list|,
name|String
name|solrUrl
parameter_list|,
name|String
name|zkHost
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cloudStatus
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cloudStatus
operator|.
name|put
argument_list|(
literal|"ZooKeeper"
argument_list|,
operator|(
name|zkHost
operator|!=
literal|null
operator|)
condition|?
name|zkHost
else|:
literal|"?"
argument_list|)
expr_stmt|;
name|String
name|clusterStatusUrl
init|=
name|solrUrl
operator|+
literal|"admin/collections?action=CLUSTERSTATUS"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
name|getJson
argument_list|(
name|httpClient
argument_list|,
name|clusterStatusUrl
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
name|asList
argument_list|(
literal|"/cluster/live_nodes"
argument_list|,
name|json
argument_list|)
decl_stmt|;
name|cloudStatus
operator|.
name|put
argument_list|(
literal|"liveNodes"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|liveNodes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collections
init|=
name|asMap
argument_list|(
literal|"/cluster/collections"
argument_list|,
name|json
argument_list|)
decl_stmt|;
name|cloudStatus
operator|.
name|put
argument_list|(
literal|"collections"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|collections
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cloudStatus
return|;
block|}
block|}
comment|// end StatusTool class
comment|/**    * Used to send an arbitrary HTTP request to a Solr API endpoint.    */
DECL|class|ApiTool
specifier|public
specifier|static
class|class
name|ApiTool
implements|implements
name|Tool
block|{
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"api"
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
annotation|@
name|Override
DECL|method|getOptions
specifier|public
name|Option
index|[]
name|getOptions
parameter_list|()
block|{
return|return
operator|new
name|Option
index|[]
block|{
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"URL"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|false
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Send a GET request to a Solr API endpoint"
argument_list|)
operator|.
name|create
argument_list|(
literal|"get"
argument_list|)
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|runTool
specifier|public
name|int
name|runTool
parameter_list|(
name|CommandLine
name|cli
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|getUrl
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"get"
argument_list|)
decl_stmt|;
if|if
condition|(
name|getUrl
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
name|getJson
argument_list|(
name|getUrl
argument_list|)
decl_stmt|;
comment|// pretty-print the response to stdout
name|CharArr
name|arr
init|=
operator|new
name|CharArr
argument_list|()
decl_stmt|;
operator|new
name|JSONWriter
argument_list|(
name|arr
argument_list|,
literal|2
argument_list|)
operator|.
name|write
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|arr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
block|}
comment|// end ApiTool class
DECL|field|DEFAULT_CONFIG_SET
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CONFIG_SET
init|=
literal|"data_driven_schema_configs"
decl_stmt|;
DECL|field|MS_IN_MIN
specifier|private
specifier|static
specifier|final
name|long
name|MS_IN_MIN
init|=
literal|60
operator|*
literal|1000L
decl_stmt|;
DECL|field|MS_IN_HOUR
specifier|private
specifier|static
specifier|final
name|long
name|MS_IN_HOUR
init|=
name|MS_IN_MIN
operator|*
literal|60L
decl_stmt|;
DECL|field|MS_IN_DAY
specifier|private
specifier|static
specifier|final
name|long
name|MS_IN_DAY
init|=
name|MS_IN_HOUR
operator|*
literal|24L
decl_stmt|;
DECL|method|uptime
specifier|private
specifier|static
specifier|final
name|String
name|uptime
parameter_list|(
name|long
name|uptimeMs
parameter_list|)
block|{
if|if
condition|(
name|uptimeMs
operator|<=
literal|0L
condition|)
return|return
literal|"?"
return|;
name|long
name|numDays
init|=
operator|(
name|uptimeMs
operator|>=
name|MS_IN_DAY
operator|)
condition|?
operator|(
name|long
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|uptimeMs
operator|/
name|MS_IN_DAY
argument_list|)
else|:
literal|0L
decl_stmt|;
name|long
name|rem
init|=
name|uptimeMs
operator|-
operator|(
name|numDays
operator|*
name|MS_IN_DAY
operator|)
decl_stmt|;
name|long
name|numHours
init|=
operator|(
name|rem
operator|>=
name|MS_IN_HOUR
operator|)
condition|?
operator|(
name|long
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|rem
operator|/
name|MS_IN_HOUR
argument_list|)
else|:
literal|0L
decl_stmt|;
name|rem
operator|=
name|rem
operator|-
operator|(
name|numHours
operator|*
name|MS_IN_HOUR
operator|)
expr_stmt|;
name|long
name|numMinutes
init|=
operator|(
name|rem
operator|>=
name|MS_IN_MIN
operator|)
condition|?
operator|(
name|long
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|rem
operator|/
name|MS_IN_MIN
argument_list|)
else|:
literal|0L
decl_stmt|;
name|rem
operator|=
name|rem
operator|-
operator|(
name|numMinutes
operator|*
name|MS_IN_MIN
operator|)
expr_stmt|;
name|long
name|numSeconds
init|=
name|Math
operator|.
name|round
argument_list|(
name|rem
operator|/
literal|1000
argument_list|)
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%d days, %d hours, %d minutes, %d seconds"
argument_list|,
name|numDays
argument_list|,
name|numHours
argument_list|,
name|numMinutes
argument_list|,
name|numSeconds
argument_list|)
return|;
block|}
DECL|class|ReplicaHealth
specifier|static
class|class
name|ReplicaHealth
implements|implements
name|Comparable
argument_list|<
name|ReplicaHealth
argument_list|>
block|{
DECL|field|shard
name|String
name|shard
decl_stmt|;
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|url
name|String
name|url
decl_stmt|;
DECL|field|status
name|String
name|status
decl_stmt|;
DECL|field|numDocs
name|long
name|numDocs
decl_stmt|;
DECL|field|isLeader
name|boolean
name|isLeader
decl_stmt|;
DECL|field|uptime
name|String
name|uptime
decl_stmt|;
DECL|field|memory
name|String
name|memory
decl_stmt|;
DECL|method|ReplicaHealth
name|ReplicaHealth
parameter_list|(
name|String
name|shard
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|url
parameter_list|,
name|String
name|status
parameter_list|,
name|long
name|numDocs
parameter_list|,
name|boolean
name|isLeader
parameter_list|,
name|String
name|uptime
parameter_list|,
name|String
name|memory
parameter_list|)
block|{
name|this
operator|.
name|shard
operator|=
name|shard
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|numDocs
operator|=
name|numDocs
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|isLeader
operator|=
name|isLeader
expr_stmt|;
name|this
operator|.
name|uptime
operator|=
name|uptime
expr_stmt|;
name|this
operator|.
name|memory
operator|=
name|memory
expr_stmt|;
block|}
DECL|method|asMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|asMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"url"
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"numDocs"
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"status"
argument_list|,
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|uptime
operator|!=
literal|null
condition|)
name|map
operator|.
name|put
argument_list|(
literal|"uptime"
argument_list|,
name|uptime
argument_list|)
expr_stmt|;
if|if
condition|(
name|memory
operator|!=
literal|null
condition|)
name|map
operator|.
name|put
argument_list|(
literal|"memory"
argument_list|,
name|memory
argument_list|)
expr_stmt|;
if|if
condition|(
name|isLeader
condition|)
name|map
operator|.
name|put
argument_list|(
literal|"leader"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|CharArr
name|arr
init|=
operator|new
name|CharArr
argument_list|()
decl_stmt|;
operator|new
name|JSONWriter
argument_list|(
name|arr
argument_list|,
literal|2
argument_list|)
operator|.
name|write
argument_list|(
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|arr
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|shard
operator|.
name|hashCode
argument_list|()
operator|+
operator|(
name|isLeader
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|ReplicaHealth
operator|)
condition|)
return|return
literal|true
return|;
name|ReplicaHealth
name|that
init|=
operator|(
name|ReplicaHealth
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|shard
operator|.
name|equals
argument_list|(
name|that
operator|.
name|shard
argument_list|)
operator|&&
name|this
operator|.
name|isLeader
operator|==
name|that
operator|.
name|isLeader
return|;
block|}
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|ReplicaHealth
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|other
operator|==
literal|null
condition|)
return|return
literal|1
return|;
name|int
name|myShardIndex
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|this
operator|.
name|shard
operator|.
name|substring
argument_list|(
literal|"shard"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|otherShardIndex
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|other
operator|.
name|shard
operator|.
name|substring
argument_list|(
literal|"shard"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|myShardIndex
operator|==
name|otherShardIndex
condition|)
block|{
comment|// same shard index, list leaders first
return|return
name|this
operator|.
name|isLeader
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
return|return
name|myShardIndex
operator|-
name|otherShardIndex
return|;
block|}
block|}
DECL|enum|ShardState
specifier|static
enum|enum
name|ShardState
block|{
DECL|enum constant|healthy
DECL|enum constant|degraded
DECL|enum constant|down
DECL|enum constant|no_leader
name|healthy
block|,
name|degraded
block|,
name|down
block|,
name|no_leader
block|}
DECL|class|ShardHealth
specifier|static
class|class
name|ShardHealth
block|{
DECL|field|shard
name|String
name|shard
decl_stmt|;
DECL|field|replicas
name|List
argument_list|<
name|ReplicaHealth
argument_list|>
name|replicas
decl_stmt|;
DECL|method|ShardHealth
name|ShardHealth
parameter_list|(
name|String
name|shard
parameter_list|,
name|List
argument_list|<
name|ReplicaHealth
argument_list|>
name|replicas
parameter_list|)
block|{
name|this
operator|.
name|shard
operator|=
name|shard
expr_stmt|;
name|this
operator|.
name|replicas
operator|=
name|replicas
expr_stmt|;
block|}
DECL|method|getShardState
specifier|public
name|ShardState
name|getShardState
parameter_list|()
block|{
name|boolean
name|healthy
init|=
literal|true
decl_stmt|;
name|boolean
name|hasLeader
init|=
literal|false
decl_stmt|;
name|boolean
name|atLeastOneActive
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ReplicaHealth
name|replicaHealth
range|:
name|replicas
control|)
block|{
if|if
condition|(
name|replicaHealth
operator|.
name|isLeader
condition|)
name|hasLeader
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|ZkStateReader
operator|.
name|ACTIVE
operator|.
name|equals
argument_list|(
name|replicaHealth
operator|.
name|status
argument_list|)
condition|)
block|{
name|healthy
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|atLeastOneActive
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|hasLeader
condition|)
return|return
name|ShardState
operator|.
name|no_leader
return|;
return|return
name|healthy
condition|?
name|ShardState
operator|.
name|healthy
else|:
operator|(
name|atLeastOneActive
condition|?
name|ShardState
operator|.
name|degraded
else|:
name|ShardState
operator|.
name|down
operator|)
return|;
block|}
DECL|method|asMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|asMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"shard"
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"status"
argument_list|,
name|getShardState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|replicaList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ReplicaHealth
name|replica
range|:
name|replicas
control|)
name|replicaList
operator|.
name|add
argument_list|(
name|replica
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"replicas"
argument_list|,
name|replicaList
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|CharArr
name|arr
init|=
operator|new
name|CharArr
argument_list|()
decl_stmt|;
operator|new
name|JSONWriter
argument_list|(
name|arr
argument_list|,
literal|2
argument_list|)
operator|.
name|write
argument_list|(
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|arr
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * Requests health information about a specific collection in SolrCloud.    */
DECL|class|HealthcheckTool
specifier|public
specifier|static
class|class
name|HealthcheckTool
extends|extends
name|SolrCloudTool
block|{
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"healthcheck"
return|;
block|}
annotation|@
name|Override
DECL|method|runCloudTool
specifier|protected
name|int
name|runCloudTool
parameter_list|(
name|CloudSolrClient
name|cloudSolrClient
parameter_list|,
name|CommandLine
name|cli
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|collection
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"collection"
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must provide a collection to run a healthcheck against!"
argument_list|)
throw|;
name|log
operator|.
name|debug
argument_list|(
literal|"Running healthcheck for "
operator|+
name|collection
argument_list|)
expr_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
name|cloudSolrClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
name|clusterState
operator|.
name|getLiveNodes
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Slice
argument_list|>
name|slices
init|=
name|clusterState
operator|.
name|getSlices
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|slices
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Collection "
operator|+
name|collection
operator|+
literal|" not found!"
argument_list|)
throw|;
name|SolrQuery
name|q
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setRows
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QueryResponse
name|qr
init|=
name|cloudSolrClient
operator|.
name|query
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|String
name|collErr
init|=
literal|null
decl_stmt|;
name|long
name|docCount
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|docCount
operator|=
name|qr
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
name|collErr
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|exc
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|shardList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|collectionIsHealthy
init|=
operator|(
name|docCount
operator|!=
operator|-
literal|1
operator|)
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|slices
control|)
block|{
name|String
name|shardName
init|=
name|slice
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// since we're reporting health of this shard, there's no guarantee of a leader
name|String
name|leaderUrl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|leaderUrl
operator|=
name|zkStateReader
operator|.
name|getLeaderUrl
argument_list|(
name|collection
argument_list|,
name|shardName
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to get leader for shard "
operator|+
name|shardName
operator|+
literal|" due to: "
operator|+
name|exc
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ReplicaHealth
argument_list|>
name|replicaList
init|=
operator|new
name|ArrayList
argument_list|<
name|ReplicaHealth
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Replica
name|r
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
name|String
name|uptime
init|=
literal|null
decl_stmt|;
name|String
name|memory
init|=
literal|null
decl_stmt|;
name|String
name|replicaStatus
init|=
literal|null
decl_stmt|;
name|long
name|numDocs
init|=
operator|-
literal|1L
decl_stmt|;
name|ZkCoreNodeProps
name|replicaCoreProps
init|=
operator|new
name|ZkCoreNodeProps
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|String
name|coreUrl
init|=
name|replicaCoreProps
operator|.
name|getCoreUrl
argument_list|()
decl_stmt|;
name|boolean
name|isLeader
init|=
name|coreUrl
operator|.
name|equals
argument_list|(
name|leaderUrl
argument_list|)
decl_stmt|;
comment|// if replica's node is not live, its status is DOWN
name|String
name|nodeName
init|=
name|replicaCoreProps
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeName
operator|==
literal|null
operator|||
operator|!
name|liveNodes
operator|.
name|contains
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
name|replicaStatus
operator|=
name|ZkStateReader
operator|.
name|DOWN
expr_stmt|;
block|}
else|else
block|{
comment|// query this replica directly to get doc count and assess health
name|q
operator|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setRows
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|q
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
try|try
init|(
name|HttpSolrClient
name|solr
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|coreUrl
argument_list|)
init|)
block|{
name|String
name|solrUrl
init|=
name|solr
operator|.
name|getBaseURL
argument_list|()
decl_stmt|;
name|qr
operator|=
name|solr
operator|.
name|query
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|numDocs
operator|=
name|qr
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
name|int
name|lastSlash
init|=
name|solrUrl
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|systemInfoUrl
init|=
name|solrUrl
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastSlash
argument_list|)
operator|+
literal|"/admin/info/system"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|info
init|=
name|getJson
argument_list|(
name|solr
operator|.
name|getHttpClient
argument_list|()
argument_list|,
name|systemInfoUrl
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|uptime
operator|=
name|uptime
argument_list|(
name|asLong
argument_list|(
literal|"/jvm/jmx/upTimeMS"
argument_list|,
name|info
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|usedMemory
init|=
name|asString
argument_list|(
literal|"/jvm/memory/used"
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|String
name|totalMemory
init|=
name|asString
argument_list|(
literal|"/jvm/memory/total"
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|memory
operator|=
name|usedMemory
operator|+
literal|" of "
operator|+
name|totalMemory
expr_stmt|;
comment|// if we get here, we can trust the state
name|replicaStatus
operator|=
name|replicaCoreProps
operator|.
name|getState
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"ERROR: "
operator|+
name|exc
operator|+
literal|" when trying to reach: "
operator|+
name|coreUrl
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkCommunicationError
argument_list|(
name|exc
argument_list|)
condition|)
block|{
name|replicaStatus
operator|=
literal|"down"
expr_stmt|;
block|}
else|else
block|{
name|replicaStatus
operator|=
literal|"error: "
operator|+
name|exc
expr_stmt|;
block|}
block|}
block|}
name|replicaList
operator|.
name|add
argument_list|(
operator|new
name|ReplicaHealth
argument_list|(
name|shardName
argument_list|,
name|r
operator|.
name|getName
argument_list|()
argument_list|,
name|coreUrl
argument_list|,
name|replicaStatus
argument_list|,
name|numDocs
argument_list|,
name|isLeader
argument_list|,
name|uptime
argument_list|,
name|memory
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ShardHealth
name|shardHealth
init|=
operator|new
name|ShardHealth
argument_list|(
name|shardName
argument_list|,
name|replicaList
argument_list|)
decl_stmt|;
if|if
condition|(
name|ShardState
operator|.
name|healthy
operator|!=
name|shardHealth
operator|.
name|getShardState
argument_list|()
condition|)
name|collectionIsHealthy
operator|=
literal|false
expr_stmt|;
comment|// at least one shard is un-healthy
name|shardList
operator|.
name|add
argument_list|(
name|shardHealth
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|report
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|report
operator|.
name|put
argument_list|(
literal|"collection"
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|report
operator|.
name|put
argument_list|(
literal|"status"
argument_list|,
name|collectionIsHealthy
condition|?
literal|"healthy"
else|:
literal|"degraded"
argument_list|)
expr_stmt|;
if|if
condition|(
name|collErr
operator|!=
literal|null
condition|)
block|{
name|report
operator|.
name|put
argument_list|(
literal|"error"
argument_list|,
name|collErr
argument_list|)
expr_stmt|;
block|}
name|report
operator|.
name|put
argument_list|(
literal|"numDocs"
argument_list|,
name|docCount
argument_list|)
expr_stmt|;
name|report
operator|.
name|put
argument_list|(
literal|"numShards"
argument_list|,
name|slices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|put
argument_list|(
literal|"shards"
argument_list|,
name|shardList
argument_list|)
expr_stmt|;
name|CharArr
name|arr
init|=
operator|new
name|CharArr
argument_list|()
decl_stmt|;
operator|new
name|JSONWriter
argument_list|(
name|arr
argument_list|,
literal|2
argument_list|)
operator|.
name|write
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|arr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
comment|// end HealthcheckTool
DECL|field|CREATE_COLLECTION_OPTIONS
specifier|private
specifier|static
specifier|final
name|Option
index|[]
name|CREATE_COLLECTION_OPTIONS
init|=
operator|new
name|Option
index|[]
block|{
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"HOST"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|false
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Address of the Zookeeper ensemble; defaults to: "
operator|+
name|ZK_HOST
argument_list|)
operator|.
name|create
argument_list|(
literal|"zkHost"
argument_list|)
block|,
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"HOST"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|false
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Base Solr URL, which can be used to determine the zkHost if that's not known"
argument_list|)
operator|.
name|create
argument_list|(
literal|"solrUrl"
argument_list|)
block|,
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"NAME"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|true
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Name of collection to create."
argument_list|)
operator|.
name|create
argument_list|(
name|NAME
argument_list|)
block|,
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"#"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|false
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Number of shards; default is 1"
argument_list|)
operator|.
name|create
argument_list|(
literal|"shards"
argument_list|)
block|,
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"#"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|false
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Number of copies of each document across the collection (replicas per shard); default is 1"
argument_list|)
operator|.
name|create
argument_list|(
literal|"replicationFactor"
argument_list|)
block|,
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"#"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|false
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Maximum number of shards per Solr node; default is determined based on the number of shards, replication factor, and live nodes."
argument_list|)
operator|.
name|create
argument_list|(
literal|"maxShardsPerNode"
argument_list|)
block|,
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"NAME"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|false
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Configuration directory to copy when creating the new collection; default is "
operator|+
name|DEFAULT_CONFIG_SET
argument_list|)
operator|.
name|create
argument_list|(
literal|"confdir"
argument_list|)
block|,
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"NAME"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|false
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Configuration name; default is the collection name"
argument_list|)
operator|.
name|create
argument_list|(
literal|"confname"
argument_list|)
block|,
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"DIR"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|true
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Path to configsets directory on the local system."
argument_list|)
operator|.
name|create
argument_list|(
literal|"configsetsDir"
argument_list|)
block|}
decl_stmt|;
DECL|method|getZkHost
specifier|public
specifier|static
name|String
name|getZkHost
parameter_list|(
name|CommandLine
name|cli
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|zkHost
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"zkHost"
argument_list|)
decl_stmt|;
if|if
condition|(
name|zkHost
operator|!=
literal|null
condition|)
return|return
name|zkHost
return|;
comment|// find it using the localPort
name|String
name|solrUrl
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"solrUrl"
argument_list|)
decl_stmt|;
if|if
condition|(
name|solrUrl
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!"
argument_list|)
throw|;
if|if
condition|(
operator|!
name|solrUrl
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|solrUrl
operator|+=
literal|"/"
expr_stmt|;
name|String
name|systemInfoUrl
init|=
name|solrUrl
operator|+
literal|"admin/info/system"
decl_stmt|;
name|CloseableHttpClient
name|httpClient
init|=
name|getHttpClient
argument_list|()
decl_stmt|;
try|try
block|{
comment|// hit Solr to get system info
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|systemInfo
init|=
name|getJson
argument_list|(
name|httpClient
argument_list|,
name|systemInfoUrl
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// convert raw JSON into user-friendly output
name|StatusTool
name|statusTool
init|=
operator|new
name|StatusTool
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|status
init|=
name|statusTool
operator|.
name|reportStatus
argument_list|(
name|solrUrl
argument_list|,
name|systemInfo
argument_list|,
name|httpClient
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|cloud
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|status
operator|.
name|get
argument_list|(
literal|"cloud"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cloud
operator|!=
literal|null
condition|)
block|{
name|String
name|zookeeper
init|=
operator|(
name|String
operator|)
name|cloud
operator|.
name|get
argument_list|(
literal|"ZooKeeper"
argument_list|)
decl_stmt|;
if|if
condition|(
name|zookeeper
operator|.
name|endsWith
argument_list|(
literal|"(embedded)"
argument_list|)
condition|)
block|{
name|zookeeper
operator|=
name|zookeeper
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|zookeeper
operator|.
name|length
argument_list|()
operator|-
literal|"(embedded)"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|zkHost
operator|=
name|zookeeper
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|HttpClientUtil
operator|.
name|close
argument_list|(
name|httpClient
argument_list|)
expr_stmt|;
block|}
return|return
name|zkHost
return|;
block|}
comment|/**    * Supports create_collection command in the bin/solr script.    */
DECL|class|CreateCollectionTool
specifier|public
specifier|static
class|class
name|CreateCollectionTool
implements|implements
name|Tool
block|{
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"create_collection"
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
annotation|@
name|Override
DECL|method|getOptions
specifier|public
name|Option
index|[]
name|getOptions
parameter_list|()
block|{
return|return
name|CREATE_COLLECTION_OPTIONS
return|;
block|}
DECL|method|runTool
specifier|public
name|int
name|runTool
parameter_list|(
name|CommandLine
name|cli
parameter_list|)
throws|throws
name|Exception
block|{
comment|// quiet down the ZK logging for cli tools
name|LogManager
operator|.
name|getLogger
argument_list|(
literal|"org.apache.zookeeper"
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ERROR
argument_list|)
expr_stmt|;
name|LogManager
operator|.
name|getLogger
argument_list|(
literal|"org.apache.solr.common.cloud"
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
expr_stmt|;
name|String
name|zkHost
init|=
name|getZkHost
argument_list|(
name|cli
argument_list|)
decl_stmt|;
if|if
condition|(
name|zkHost
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\nERROR: Solr at "
operator|+
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"solrUrl"
argument_list|)
operator|+
literal|" is running in standalone server mode, please use the create_core command instead;\n"
operator|+
literal|"create_collection can only be used when running in SolrCloud mode.\n"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|int
name|toolExitStatus
init|=
literal|0
decl_stmt|;
try|try
init|(
name|CloudSolrClient
name|cloudSolrServer
init|=
operator|new
name|CloudSolrClient
argument_list|(
name|zkHost
argument_list|)
init|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Connecting to ZooKeeper at "
operator|+
name|zkHost
argument_list|)
expr_stmt|;
name|cloudSolrServer
operator|.
name|connect
argument_list|()
expr_stmt|;
name|toolExitStatus
operator|=
name|runCloudTool
argument_list|(
name|cloudSolrServer
argument_list|,
name|cli
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
comment|// since this is a CLI, spare the user the stacktrace
name|String
name|excMsg
init|=
name|exc
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|excMsg
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\nERROR: "
operator|+
name|excMsg
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|toolExitStatus
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|exc
throw|;
block|}
block|}
return|return
name|toolExitStatus
return|;
block|}
DECL|method|runCloudTool
specifier|protected
name|int
name|runCloudTool
parameter_list|(
name|CloudSolrClient
name|cloudSolrClient
parameter_list|,
name|CommandLine
name|cli
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
name|cloudSolrClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|liveNodes
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No live nodes found! Cannot create a collection until "
operator|+
literal|"there is at least 1 live node in the cluster."
argument_list|)
throw|;
name|String
name|firstLiveNode
init|=
name|liveNodes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|collectionName
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
comment|// build a URL to create the collection
name|int
name|numShards
init|=
name|optionAsInt
argument_list|(
name|cli
argument_list|,
literal|"shards"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|replicationFactor
init|=
name|optionAsInt
argument_list|(
name|cli
argument_list|,
literal|"replicationFactor"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|maxShardsPerNode
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|"maxShardsPerNode"
argument_list|)
condition|)
block|{
name|maxShardsPerNode
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"maxShardsPerNode"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// need number of live nodes to determine maxShardsPerNode if it is not set
name|int
name|numNodes
init|=
name|liveNodes
operator|.
name|size
argument_list|()
decl_stmt|;
name|maxShardsPerNode
operator|=
operator|(
operator|(
name|numShards
operator|*
name|replicationFactor
operator|)
operator|+
name|numNodes
operator|-
literal|1
operator|)
operator|/
name|numNodes
expr_stmt|;
block|}
name|String
name|confname
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"confname"
argument_list|,
name|collectionName
argument_list|)
decl_stmt|;
name|boolean
name|configExistsInZk
init|=
name|cloudSolrClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
operator|.
name|exists
argument_list|(
literal|"/configs/"
operator|+
name|confname
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|configExistsInZk
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Re-using existing configuration directory "
operator|+
name|confname
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|configSet
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"confdir"
argument_list|,
name|DEFAULT_CONFIG_SET
argument_list|)
decl_stmt|;
name|File
name|configSetDir
init|=
literal|null
decl_stmt|;
comment|// we try to be flexible and allow the user to specify a configuration directory instead of a configset name
name|File
name|possibleConfigDir
init|=
operator|new
name|File
argument_list|(
name|configSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|possibleConfigDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|configSetDir
operator|=
name|possibleConfigDir
expr_stmt|;
block|}
else|else
block|{
name|File
name|configsetsDir
init|=
operator|new
name|File
argument_list|(
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"configsetsDir"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|configsetsDir
operator|.
name|isDirectory
argument_list|()
condition|)
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|configsetsDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" not found!"
argument_list|)
throw|;
comment|// upload the configset if it exists
name|configSetDir
operator|=
operator|new
name|File
argument_list|(
name|configsetsDir
argument_list|,
name|configSet
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|configSetDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Specified config "
operator|+
name|configSet
operator|+
literal|" not found in "
operator|+
name|configsetsDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|File
name|confDir
init|=
operator|new
name|File
argument_list|(
name|configSetDir
argument_list|,
literal|"conf"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|confDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// config dir should contain a conf sub-directory but if not and there's a solrconfig.xml, then use it
if|if
condition|(
operator|(
operator|new
name|File
argument_list|(
name|configSetDir
argument_list|,
literal|"solrconfig.xml"
argument_list|)
operator|)
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|confDir
operator|=
name|configSetDir
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Specified configuration directory "
operator|+
name|configSetDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" is invalid;\nit should contain either conf sub-directory or solrconfig.xml"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
comment|// test to see if that config exists in ZK
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Uploading "
operator|+
name|confDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" for config "
operator|+
name|confname
operator|+
literal|" to ZooKeeper at "
operator|+
name|cloudSolrClient
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|cloudSolrClient
operator|.
name|uploadConfig
argument_list|(
name|confDir
operator|.
name|toPath
argument_list|()
argument_list|,
name|confname
argument_list|)
expr_stmt|;
block|}
name|String
name|baseUrl
init|=
name|cloudSolrClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|firstLiveNode
argument_list|)
decl_stmt|;
comment|// since creating a collection is a heavy-weight operation, check for existence first
name|String
name|collectionListUrl
init|=
name|baseUrl
operator|+
literal|"/admin/collections?action=list"
decl_stmt|;
if|if
condition|(
name|safeCheckCollectionExists
argument_list|(
name|collectionListUrl
argument_list|,
name|collectionName
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\nCollection '"
operator|+
name|collectionName
operator|+
literal|"' already exists!"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\nChecked collection existence using Collections API command:\n"
operator|+
name|collectionListUrl
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
comment|// doesn't seem to exist ... try to create
name|String
name|createCollectionUrl
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s"
argument_list|,
name|baseUrl
argument_list|,
name|collectionName
argument_list|,
name|numShards
argument_list|,
name|replicationFactor
argument_list|,
name|maxShardsPerNode
argument_list|,
name|confname
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nCreating new collection '"
operator|+
name|collectionName
operator|+
literal|"' using command:\n"
operator|+
name|createCollectionUrl
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
literal|null
decl_stmt|;
try|try
block|{
name|json
operator|=
name|getJson
argument_list|(
name|createCollectionUrl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|sse
parameter_list|)
block|{
comment|// check if already exists
if|if
condition|(
name|safeCheckCollectionExists
argument_list|(
name|collectionListUrl
argument_list|,
name|collectionName
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Collection '"
operator|+
name|collectionName
operator|+
literal|"' already exists!"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\nChecked collection existence using Collections API command:\n"
operator|+
name|collectionListUrl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Failed to create collection '"
operator|+
name|collectionName
operator|+
literal|"' due to: "
operator|+
name|sse
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
name|CharArr
name|arr
init|=
operator|new
name|CharArr
argument_list|()
decl_stmt|;
operator|new
name|JSONWriter
argument_list|(
name|arr
argument_list|,
literal|2
argument_list|)
operator|.
name|write
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|arr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|safeCheckCollectionExists
specifier|protected
name|boolean
name|safeCheckCollectionExists
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|collection
parameter_list|)
block|{
name|boolean
name|exists
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|existsCheckResult
init|=
name|getJson
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|collections
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|existsCheckResult
operator|.
name|get
argument_list|(
literal|"collections"
argument_list|)
decl_stmt|;
name|exists
operator|=
name|collections
operator|!=
literal|null
operator|&&
name|collections
operator|.
name|contains
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
comment|// just ignore it since we're only interested in a positive result here
block|}
return|return
name|exists
return|;
block|}
DECL|method|optionAsInt
specifier|protected
name|int
name|optionAsInt
parameter_list|(
name|CommandLine
name|cli
parameter_list|,
name|String
name|option
parameter_list|,
name|int
name|defaultVal
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|cli
operator|.
name|getOptionValue
argument_list|(
name|option
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|defaultVal
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|// end CreateCollectionTool class
DECL|class|CreateCoreTool
specifier|public
specifier|static
class|class
name|CreateCoreTool
implements|implements
name|Tool
block|{
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"create_core"
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
annotation|@
name|Override
DECL|method|getOptions
specifier|public
name|Option
index|[]
name|getOptions
parameter_list|()
block|{
return|return
operator|new
name|Option
index|[]
block|{
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"URL"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|false
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Base Solr URL, default is http://localhost:8983/solr"
argument_list|)
operator|.
name|create
argument_list|(
literal|"solrUrl"
argument_list|)
block|,
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"NAME"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|true
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Name of the core to create."
argument_list|)
operator|.
name|create
argument_list|(
name|NAME
argument_list|)
block|,
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"CONFIG"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|false
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Configuration directory to copy when creating the new core; default is "
operator|+
name|DEFAULT_CONFIG_SET
argument_list|)
operator|.
name|create
argument_list|(
literal|"confdir"
argument_list|)
block|,
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"DIR"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|true
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Path to configsets directory on the local system."
argument_list|)
operator|.
name|create
argument_list|(
literal|"configsetsDir"
argument_list|)
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|runTool
specifier|public
name|int
name|runTool
parameter_list|(
name|CommandLine
name|cli
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|solrUrl
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"solrUrl"
argument_list|,
literal|"http://localhost:8983/solr"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|solrUrl
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|solrUrl
operator|+=
literal|"/"
expr_stmt|;
name|File
name|configsetsDir
init|=
operator|new
name|File
argument_list|(
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"configsetsDir"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|configsetsDir
operator|.
name|isDirectory
argument_list|()
condition|)
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|configsetsDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" not found!"
argument_list|)
throw|;
name|String
name|configSet
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"confdir"
argument_list|,
name|DEFAULT_CONFIG_SET
argument_list|)
decl_stmt|;
name|File
name|configSetDir
init|=
operator|new
name|File
argument_list|(
name|configsetsDir
argument_list|,
name|configSet
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|configSetDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// we allow them to pass a directory instead of a configset name
name|File
name|possibleConfigDir
init|=
operator|new
name|File
argument_list|(
name|configSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|possibleConfigDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|configSetDir
operator|=
name|possibleConfigDir
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Specified config directory "
operator|+
name|configSet
operator|+
literal|" not found in "
operator|+
name|configsetsDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|String
name|coreName
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
name|String
name|systemInfoUrl
init|=
name|solrUrl
operator|+
literal|"admin/info/system"
decl_stmt|;
name|CloseableHttpClient
name|httpClient
init|=
name|getHttpClient
argument_list|()
decl_stmt|;
name|String
name|solrHome
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|systemInfo
init|=
name|getJson
argument_list|(
name|httpClient
argument_list|,
name|systemInfoUrl
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"solrcloud"
operator|.
name|equals
argument_list|(
name|systemInfo
operator|.
name|get
argument_list|(
literal|"mode"
argument_list|)
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\nERROR: Solr at "
operator|+
name|solrUrl
operator|+
literal|" is running in SolrCloud mode, please use create_collection command instead.\n"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
comment|// convert raw JSON into user-friendly output
name|solrHome
operator|=
operator|(
name|String
operator|)
name|systemInfo
operator|.
name|get
argument_list|(
literal|"solr_home"
argument_list|)
expr_stmt|;
if|if
condition|(
name|solrHome
operator|==
literal|null
condition|)
name|solrHome
operator|=
name|configsetsDir
operator|.
name|getParentFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|closeHttpClient
argument_list|(
name|httpClient
argument_list|)
expr_stmt|;
block|}
name|String
name|coreStatusUrl
init|=
name|solrUrl
operator|+
literal|"admin/cores?action=STATUS&core="
operator|+
name|coreName
decl_stmt|;
if|if
condition|(
name|safeCheckCoreExists
argument_list|(
name|coreStatusUrl
argument_list|,
name|coreName
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\nCore '"
operator|+
name|coreName
operator|+
literal|"' already exists!"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\nChecked core existence using Core API command:\n"
operator|+
name|coreStatusUrl
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
name|File
name|coreInstanceDir
init|=
operator|new
name|File
argument_list|(
name|solrHome
argument_list|,
name|coreName
argument_list|)
decl_stmt|;
name|File
name|confDir
init|=
operator|new
name|File
argument_list|(
name|configSetDir
argument_list|,
literal|"conf"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|coreInstanceDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|coreInstanceDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|coreInstanceDir
operator|.
name|isDirectory
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create new core instance directory: "
operator|+
name|coreInstanceDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|confDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|copyDirectoryToDirectory
argument_list|(
name|confDir
argument_list|,
name|coreInstanceDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// hmmm ... the configset we're cloning doesn't have a conf sub-directory,
comment|// we'll just assume it is OK if it has solrconfig.xml
if|if
condition|(
operator|(
operator|new
name|File
argument_list|(
name|configSetDir
argument_list|,
literal|"solrconfig.xml"
argument_list|)
operator|)
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
name|configSetDir
argument_list|,
operator|new
name|File
argument_list|(
name|coreInstanceDir
argument_list|,
literal|"conf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\n"
operator|+
name|configSetDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" doesn't contain a conf subdirectory or solrconfig.xml\n"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nSetup new core instance directory:\n"
operator|+
name|coreInstanceDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|createCoreUrl
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%sadmin/cores?action=CREATE&name=%s&instanceDir=%s"
argument_list|,
name|solrUrl
argument_list|,
name|coreName
argument_list|,
name|coreName
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nCreating new core '"
operator|+
name|coreName
operator|+
literal|"' using command:\n"
operator|+
name|createCoreUrl
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
literal|null
decl_stmt|;
try|try
block|{
name|json
operator|=
name|getJson
argument_list|(
name|createCoreUrl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|sse
parameter_list|)
block|{
comment|// mostly likely the core already exists ...
if|if
condition|(
name|safeCheckCoreExists
argument_list|(
name|coreStatusUrl
argument_list|,
name|coreName
argument_list|)
condition|)
block|{
comment|// core already exists
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Core '"
operator|+
name|coreName
operator|+
literal|"' already exists!"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\nChecked core existence using Core API command:\n"
operator|+
name|coreStatusUrl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Failed to create core '"
operator|+
name|coreName
operator|+
literal|"' due to: "
operator|+
name|sse
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
name|CharArr
name|arr
init|=
operator|new
name|CharArr
argument_list|()
decl_stmt|;
operator|new
name|JSONWriter
argument_list|(
name|arr
argument_list|,
literal|2
argument_list|)
operator|.
name|write
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|arr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|safeCheckCoreExists
specifier|protected
name|boolean
name|safeCheckCoreExists
parameter_list|(
name|String
name|coreStatusUrl
parameter_list|,
name|String
name|coreName
parameter_list|)
block|{
name|boolean
name|exists
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|existsCheckResult
init|=
name|getJson
argument_list|(
name|coreStatusUrl
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|status
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|existsCheckResult
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|coreStatus
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|status
operator|.
name|get
argument_list|(
name|coreName
argument_list|)
decl_stmt|;
name|exists
operator|=
name|coreStatus
operator|!=
literal|null
operator|&&
name|coreStatus
operator|.
name|containsKey
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
comment|// just ignore it since we're only interested in a positive result here
block|}
return|return
name|exists
return|;
block|}
block|}
comment|// end CreateCoreTool class
DECL|class|CreateTool
specifier|public
specifier|static
class|class
name|CreateTool
implements|implements
name|Tool
block|{
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"create"
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
annotation|@
name|Override
DECL|method|getOptions
specifier|public
name|Option
index|[]
name|getOptions
parameter_list|()
block|{
return|return
name|CREATE_COLLECTION_OPTIONS
return|;
block|}
annotation|@
name|Override
DECL|method|runTool
specifier|public
name|int
name|runTool
parameter_list|(
name|CommandLine
name|cli
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|solrUrl
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"solrUrl"
argument_list|,
literal|"http://localhost:8983/solr"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|solrUrl
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|solrUrl
operator|+=
literal|"/"
expr_stmt|;
name|String
name|systemInfoUrl
init|=
name|solrUrl
operator|+
literal|"admin/info/system"
decl_stmt|;
name|CloseableHttpClient
name|httpClient
init|=
name|getHttpClient
argument_list|()
decl_stmt|;
name|int
name|result
init|=
operator|-
literal|1
decl_stmt|;
name|Tool
name|tool
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|systemInfo
init|=
name|getJson
argument_list|(
name|httpClient
argument_list|,
name|systemInfoUrl
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"solrcloud"
operator|.
name|equals
argument_list|(
name|systemInfo
operator|.
name|get
argument_list|(
literal|"mode"
argument_list|)
argument_list|)
condition|)
block|{
name|tool
operator|=
operator|new
name|CreateCollectionTool
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tool
operator|=
operator|new
name|CreateCoreTool
argument_list|()
expr_stmt|;
block|}
name|result
operator|=
name|tool
operator|.
name|runTool
argument_list|(
name|cli
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: create failed due to: "
operator|+
name|exc
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|result
operator|=
literal|1
expr_stmt|;
block|}
finally|finally
block|{
name|closeHttpClient
argument_list|(
name|httpClient
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
comment|// end CreateTool class
DECL|class|DeleteTool
specifier|public
specifier|static
class|class
name|DeleteTool
implements|implements
name|Tool
block|{
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"delete"
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
annotation|@
name|Override
DECL|method|getOptions
specifier|public
name|Option
index|[]
name|getOptions
parameter_list|()
block|{
return|return
operator|new
name|Option
index|[]
block|{
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"URL"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|false
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Base Solr URL, default is http://localhost:8983/solr"
argument_list|)
operator|.
name|create
argument_list|(
literal|"solrUrl"
argument_list|)
block|,
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"NAME"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|true
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Name of the core / collection to delete."
argument_list|)
operator|.
name|create
argument_list|(
name|NAME
argument_list|)
block|,
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"true|false"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|false
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Flag to indicate if the underlying configuration directory for a collection should also be deleted; default is true"
argument_list|)
operator|.
name|create
argument_list|(
literal|"deleteConfig"
argument_list|)
block|,
name|OptionBuilder
operator|.
name|isRequired
argument_list|(
literal|false
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Skip safety checks when deleting the configuration directory used by a collection"
argument_list|)
operator|.
name|create
argument_list|(
literal|"forceDeleteConfig"
argument_list|)
block|,
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"HOST"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|false
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Address of the Zookeeper ensemble; defaults to: "
operator|+
name|ZK_HOST
argument_list|)
operator|.
name|create
argument_list|(
literal|"zkHost"
argument_list|)
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|runTool
specifier|public
name|int
name|runTool
parameter_list|(
name|CommandLine
name|cli
parameter_list|)
throws|throws
name|Exception
block|{
comment|// quiet down the ZK logging for cli tools
name|LogManager
operator|.
name|getLogger
argument_list|(
literal|"org.apache.zookeeper"
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ERROR
argument_list|)
expr_stmt|;
name|LogManager
operator|.
name|getLogger
argument_list|(
literal|"org.apache.solr.common.cloud"
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
expr_stmt|;
name|String
name|solrUrl
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"solrUrl"
argument_list|,
literal|"http://localhost:8983/solr"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|solrUrl
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|solrUrl
operator|+=
literal|"/"
expr_stmt|;
name|String
name|systemInfoUrl
init|=
name|solrUrl
operator|+
literal|"admin/info/system"
decl_stmt|;
name|CloseableHttpClient
name|httpClient
init|=
name|getHttpClient
argument_list|()
decl_stmt|;
name|int
name|result
init|=
literal|0
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|systemInfo
init|=
name|getJson
argument_list|(
name|httpClient
argument_list|,
name|systemInfoUrl
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"solrcloud"
operator|.
name|equals
argument_list|(
name|systemInfo
operator|.
name|get
argument_list|(
literal|"mode"
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|=
name|deleteCollection
argument_list|(
name|cli
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|deleteCore
argument_list|(
name|cli
argument_list|,
name|httpClient
argument_list|,
name|solrUrl
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|closeHttpClient
argument_list|(
name|httpClient
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|deleteCollection
specifier|protected
name|int
name|deleteCollection
parameter_list|(
name|CommandLine
name|cli
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|zkHost
init|=
name|getZkHost
argument_list|(
name|cli
argument_list|)
decl_stmt|;
name|int
name|toolExitStatus
init|=
literal|0
decl_stmt|;
try|try
init|(
name|CloudSolrClient
name|cloudSolrClient
init|=
operator|new
name|CloudSolrClient
argument_list|(
name|zkHost
argument_list|)
init|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Connecting to ZooKeeper at "
operator|+
name|zkHost
argument_list|)
expr_stmt|;
name|cloudSolrClient
operator|.
name|connect
argument_list|()
expr_stmt|;
name|toolExitStatus
operator|=
name|deleteCollection
argument_list|(
name|cloudSolrClient
argument_list|,
name|cli
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
comment|// since this is a CLI, spare the user the stacktrace
name|String
name|excMsg
init|=
name|exc
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|excMsg
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\nERROR: "
operator|+
name|excMsg
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|toolExitStatus
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|exc
throw|;
block|}
block|}
return|return
name|toolExitStatus
return|;
block|}
DECL|method|deleteCollection
specifier|protected
name|int
name|deleteCollection
parameter_list|(
name|CloudSolrClient
name|cloudSolrClient
parameter_list|,
name|CommandLine
name|cli
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
name|cloudSolrClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|liveNodes
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No live nodes found! Cannot delete a collection until "
operator|+
literal|"there is at least 1 live node in the cluster."
argument_list|)
throw|;
name|String
name|firstLiveNode
init|=
name|liveNodes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
name|cloudSolrClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|String
name|baseUrl
init|=
name|zkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|firstLiveNode
argument_list|)
decl_stmt|;
name|String
name|collectionName
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|hasCollection
argument_list|(
name|collectionName
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\nERROR: Collection "
operator|+
name|collectionName
operator|+
literal|" not found!"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
name|String
name|configName
init|=
name|zkStateReader
operator|.
name|readConfigName
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|boolean
name|deleteConfig
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"deleteConfig"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleteConfig
operator|&&
name|configName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|"forceDeleteConfig"
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Skipping safety checks, configuration directory "
operator|+
name|configName
operator|+
literal|" will be deleted with impunity."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// need to scan all Collections to see if any are using the config
name|Set
argument_list|<
name|String
argument_list|>
name|collections
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollections
argument_list|()
decl_stmt|;
comment|// give a little note to the user if there are many collections in case it takes a while
if|if
condition|(
name|collections
operator|.
name|size
argument_list|()
operator|>
literal|50
condition|)
name|log
operator|.
name|info
argument_list|(
literal|"Scanning "
operator|+
name|collections
operator|.
name|size
argument_list|()
operator|+
literal|" to ensure no other collections are using config "
operator|+
name|configName
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|next
range|:
name|collections
control|)
block|{
if|if
condition|(
name|collectionName
operator|.
name|equals
argument_list|(
name|next
argument_list|)
condition|)
continue|continue;
comment|// don't check the collection we're deleting
if|if
condition|(
name|configName
operator|.
name|equals
argument_list|(
name|zkStateReader
operator|.
name|readConfigName
argument_list|(
name|next
argument_list|)
argument_list|)
condition|)
block|{
name|deleteConfig
operator|=
literal|false
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Configuration directory "
operator|+
name|configName
operator|+
literal|" is also being used by "
operator|+
name|next
operator|+
literal|"; configuration will not be deleted from ZooKeeper. You can pass the -forceDeleteConfig flag to force delete."
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|String
name|deleteCollectionUrl
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s/admin/collections?action=DELETE&name=%s"
argument_list|,
name|baseUrl
argument_list|,
name|collectionName
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nDeleting collection '"
operator|+
name|collectionName
operator|+
literal|"' using command:\n"
operator|+
name|deleteCollectionUrl
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
literal|null
decl_stmt|;
try|try
block|{
name|json
operator|=
name|getJson
argument_list|(
name|deleteCollectionUrl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|sse
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Failed to delete collection '"
operator|+
name|collectionName
operator|+
literal|"' due to: "
operator|+
name|sse
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
name|deleteConfig
condition|)
block|{
name|String
name|configZnode
init|=
literal|"/configs/"
operator|+
name|configName
decl_stmt|;
try|try
block|{
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|clean
argument_list|(
name|configZnode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\nERROR: Failed to delete configuration directory "
operator|+
name|configZnode
operator|+
literal|" in ZooKeeper due to: "
operator|+
name|exc
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\nYou'll need to manually delete this znode using the zkcli script."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|CharArr
name|arr
init|=
operator|new
name|CharArr
argument_list|()
decl_stmt|;
operator|new
name|JSONWriter
argument_list|(
name|arr
argument_list|,
literal|2
argument_list|)
operator|.
name|write
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|arr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|deleteCore
specifier|protected
name|int
name|deleteCore
parameter_list|(
name|CommandLine
name|cli
parameter_list|,
name|CloseableHttpClient
name|httpClient
parameter_list|,
name|String
name|solrUrl
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|status
init|=
literal|0
decl_stmt|;
name|String
name|coreName
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
name|String
name|deleteCoreUrl
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%sadmin/cores?action=UNLOAD&core=%s&deleteIndex=true&deleteDataDir=true&deleteInstanceDir=true"
argument_list|,
name|solrUrl
argument_list|,
name|coreName
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nDeleting core '"
operator|+
name|coreName
operator|+
literal|"' using command:\n"
operator|+
name|deleteCoreUrl
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
literal|null
decl_stmt|;
try|try
block|{
name|json
operator|=
name|getJson
argument_list|(
name|deleteCoreUrl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|sse
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Failed to delete core '"
operator|+
name|coreName
operator|+
literal|"' due to: "
operator|+
name|sse
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|status
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|CharArr
name|arr
init|=
operator|new
name|CharArr
argument_list|()
decl_stmt|;
operator|new
name|JSONWriter
argument_list|(
name|arr
argument_list|,
literal|2
argument_list|)
operator|.
name|write
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|arr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
return|return
name|status
return|;
block|}
block|}
comment|// end DeleteTool class
block|}
end_class
end_unit
