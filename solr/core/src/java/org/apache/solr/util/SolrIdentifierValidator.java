begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * Ensures that provided identifiers align with Solr's recommendations/requirements for choosing  * collection, core, etc identifiers.  *    * Identifiers are allowed to contain underscores, periods, and alphanumeric characters.   */
end_comment
begin_class
DECL|class|SolrIdentifierValidator
specifier|public
class|class
name|SolrIdentifierValidator
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|identifierPattern
specifier|final
specifier|static
name|Pattern
name|identifierPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^[\\._A-Za-z0-9]*$"
argument_list|)
decl_stmt|;
DECL|method|validateCollectionName
specifier|public
specifier|static
name|void
name|validateCollectionName
parameter_list|(
name|String
name|collectionName
parameter_list|)
throws|throws
name|SolrException
block|{
name|validateCoreName
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
block|}
DECL|method|validateCoreName
specifier|public
specifier|static
name|void
name|validateCoreName
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SolrException
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
operator|!
name|identifierPattern
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Validation failed on the invalid identifier [{}].  Throwing SolrException to indicate a BAD REQUEST."
argument_list|,
name|name
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Invalid name: '"
operator|+
name|name
operator|+
literal|"' Identifiers must consist entirely of periods, underscores and alphanumerics"
argument_list|)
throw|;
block|}
block|}
block|}
end_class
end_unit
