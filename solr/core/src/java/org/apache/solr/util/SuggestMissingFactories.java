begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * Given a list of Jar files, suggest missing analysis factories.  *  *  */
end_comment
begin_class
DECL|class|SuggestMissingFactories
specifier|public
class|class
name|SuggestMissingFactories
block|{
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ClassNotFoundException
throws|,
name|IOException
throws|,
name|NoSuchMethodException
block|{
specifier|final
name|File
index|[]
name|files
init|=
operator|new
name|File
index|[
name|args
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|files
index|[
name|i
index|]
operator|=
operator|new
name|File
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
specifier|final
name|FindClasses
name|finder
init|=
operator|new
name|FindClasses
argument_list|(
name|files
argument_list|)
decl_stmt|;
specifier|final
name|ClassLoader
name|cl
init|=
name|finder
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
specifier|final
name|Class
name|TOKENSTREAM
init|=
name|cl
operator|.
name|loadClass
argument_list|(
literal|"org.apache.lucene.analysis.TokenStream"
argument_list|)
decl_stmt|;
specifier|final
name|Class
name|TOKENIZER
init|=
name|cl
operator|.
name|loadClass
argument_list|(
literal|"org.apache.lucene.analysis.Tokenizer"
argument_list|)
decl_stmt|;
specifier|final
name|Class
name|TOKENFILTER
init|=
name|cl
operator|.
name|loadClass
argument_list|(
literal|"org.apache.lucene.analysis.TokenFilter"
argument_list|)
decl_stmt|;
specifier|final
name|Class
name|TOKENIZERFACTORY
init|=
name|cl
operator|.
name|loadClass
argument_list|(
literal|"org.apache.solr.analysis.TokenizerFactory"
argument_list|)
decl_stmt|;
specifier|final
name|Class
name|TOKENFILTERFACTORY
init|=
name|cl
operator|.
name|loadClass
argument_list|(
literal|"org.apache.solr.analysis.TokenFilterFactory"
argument_list|)
decl_stmt|;
specifier|final
name|HashSet
argument_list|<
name|Class
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|Class
argument_list|>
argument_list|(
name|finder
operator|.
name|findExtends
argument_list|(
name|TOKENIZER
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|finder
operator|.
name|findExtends
argument_list|(
name|TOKENFILTER
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|removeAll
argument_list|(
name|finder
operator|.
name|findMethodReturns
argument_list|(
name|finder
operator|.
name|findExtends
argument_list|(
name|TOKENIZERFACTORY
argument_list|)
argument_list|,
literal|"create"
argument_list|,
name|Reader
operator|.
name|class
argument_list|)
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|removeAll
argument_list|(
name|finder
operator|.
name|findMethodReturns
argument_list|(
name|finder
operator|.
name|findExtends
argument_list|(
name|TOKENFILTERFACTORY
argument_list|)
argument_list|,
literal|"create"
argument_list|,
name|TOKENSTREAM
argument_list|)
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Class
name|c
range|:
name|result
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
begin_comment
comment|/**  * Takes in a clazz name and a jar and finds  * all classes in that jar that extend clazz.  */
end_comment
begin_class
DECL|class|FindClasses
class|class
name|FindClasses
block|{
comment|/**    * Simple command line test method    */
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ClassNotFoundException
throws|,
name|IOException
throws|,
name|NoSuchMethodException
block|{
name|FindClasses
name|finder
init|=
operator|new
name|FindClasses
argument_list|(
operator|new
name|File
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|ClassLoader
name|cl
init|=
name|finder
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|Class
name|clazz
init|=
name|cl
operator|.
name|loadClass
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Finding all extenders of "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Class
name|c
range|:
name|finder
operator|.
name|findExtends
argument_list|(
name|clazz
argument_list|)
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|methName
init|=
name|args
index|[
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Finding all extenders of "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|" with method: "
operator|+
name|methName
argument_list|)
expr_stmt|;
name|Class
index|[]
name|methArgs
init|=
operator|new
name|Class
index|[
name|args
operator|.
name|length
operator|-
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|3
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|methArgs
index|[
name|i
operator|-
literal|3
index|]
operator|=
name|cl
operator|.
name|loadClass
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Class
argument_list|,
name|Class
argument_list|>
name|map
init|=
name|finder
operator|.
name|findMethodReturns
argument_list|(
name|finder
operator|.
name|findExtends
argument_list|(
name|clazz
argument_list|)
argument_list|,
name|methName
argument_list|,
name|methArgs
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
name|key
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|key
operator|.
name|getName
argument_list|()
operator|+
literal|" => "
operator|+
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|jarFiles
specifier|private
name|JarFile
index|[]
name|jarFiles
decl_stmt|;
DECL|field|cl
specifier|private
name|ClassLoader
name|cl
decl_stmt|;
DECL|method|FindClasses
specifier|public
name|FindClasses
parameter_list|(
name|File
modifier|...
name|jars
parameter_list|)
throws|throws
name|IOException
block|{
name|jarFiles
operator|=
operator|new
name|JarFile
index|[
name|jars
operator|.
name|length
index|]
expr_stmt|;
name|URL
index|[]
name|urls
init|=
operator|new
name|URL
index|[
name|jars
operator|.
name|length
index|]
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|jarFiles
index|[
name|i
index|]
operator|=
operator|new
name|JarFile
argument_list|(
name|jars
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|urls
index|[
name|i
index|]
operator|=
name|jars
index|[
name|i
index|]
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"WTF, how can JarFile.toURL() be malformed?"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|cl
operator|=
operator|new
name|URLClassLoader
argument_list|(
name|urls
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * returns a class loader that includes the jar used to    * construct this instance    */
DECL|method|getClassLoader
specifier|public
name|ClassLoader
name|getClassLoader
parameter_list|()
block|{
return|return
name|this
operator|.
name|cl
return|;
block|}
comment|/**    * Find useful concrete (ie: not anonymous, not abstract, not an interface)    * classes that extend clazz    */
DECL|method|findExtends
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|>
name|findExtends
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|HashSet
argument_list|<
name|Class
argument_list|>
name|results
init|=
operator|new
name|HashSet
argument_list|<
name|Class
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|JarFile
name|jarFile
range|:
name|jarFiles
control|)
block|{
for|for
control|(
name|Enumeration
argument_list|<
name|JarEntry
argument_list|>
name|e
init|=
name|jarFile
operator|.
name|entries
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|n
init|=
name|e
operator|.
name|nextElement
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
condition|)
block|{
name|String
name|cn
init|=
name|n
operator|.
name|replace
argument_list|(
literal|"/"
argument_list|,
literal|"."
argument_list|)
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|n
operator|.
name|length
argument_list|()
operator|-
literal|6
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|target
decl_stmt|;
try|try
block|{
name|target
operator|=
name|cl
operator|.
name|loadClass
argument_list|(
name|cn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoClassDefFoundError
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
literal|"Can't load: "
operator|+
name|cn
argument_list|,
name|e1
argument_list|)
throw|;
block|}
if|if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|target
argument_list|)
operator|&&
operator|!
name|target
operator|.
name|isAnonymousClass
argument_list|()
condition|)
block|{
name|int
name|mods
init|=
name|target
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|mods
argument_list|)
operator|||
name|Modifier
operator|.
name|isInterface
argument_list|(
name|mods
argument_list|)
operator|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|results
return|;
block|}
comment|/**    * Given a collection of classes, returns a Map containing the    * subset of those classes that impliment the method specified,    * where the value in the map is the return type of the method    */
DECL|method|findMethodReturns
specifier|public
name|Map
argument_list|<
name|Class
argument_list|,
name|Class
argument_list|>
name|findMethodReturns
parameter_list|(
name|Collection
argument_list|<
name|Class
argument_list|>
name|clazzes
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Class
modifier|...
name|parameterTypes
parameter_list|)
throws|throws
name|NoSuchMethodException
block|{
name|HashMap
argument_list|<
name|Class
argument_list|,
name|Class
argument_list|>
name|results
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|,
name|Class
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
name|clazz
range|:
name|clazzes
control|)
block|{
try|try
block|{
name|Method
name|m
init|=
name|clazz
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|,
name|parameterTypes
argument_list|)
decl_stmt|;
name|results
operator|.
name|put
argument_list|(
name|clazz
argument_list|,
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|/* :NOOP: we expect this and skip clazz */
block|}
block|}
return|return
name|results
return|;
block|}
block|}
end_class
end_unit
