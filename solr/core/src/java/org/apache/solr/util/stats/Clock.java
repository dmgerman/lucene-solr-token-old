begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/*  * Forked from https://github.com/codahale/metrics  */
end_comment
begin_package
DECL|package|org.apache.solr.util.stats
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|stats
package|;
end_package
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ThreadMXBean
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SuppressForbidden
import|;
end_import
begin_comment
comment|/**  * An abstraction for how time passes. It is passed to {@link Timer} to track timing.  */
end_comment
begin_class
DECL|class|Clock
specifier|public
specifier|abstract
class|class
name|Clock
block|{
comment|/**    * Returns the current time tick.    *    * @return time tick in nanoseconds    */
DECL|method|getTick
specifier|public
specifier|abstract
name|long
name|getTick
parameter_list|()
function_decl|;
comment|/**    * Returns the current time in milliseconds.    *    * @return time in milliseconds    */
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"Need currentTimeMillis, API used by ExponentiallyDecayingSample for suspect reasons"
argument_list|)
DECL|method|getTime
specifier|public
name|long
name|getTime
parameter_list|()
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
DECL|field|DEFAULT
specifier|private
specifier|static
specifier|final
name|Clock
name|DEFAULT
init|=
operator|new
name|UserTimeClock
argument_list|()
decl_stmt|;
comment|/**    * The default clock to use.    *    * @return the default {@link Clock} instance    *    * @see UserTimeClock    */
DECL|method|defaultClock
specifier|public
specifier|static
name|Clock
name|defaultClock
parameter_list|()
block|{
return|return
name|DEFAULT
return|;
block|}
comment|/**    * A clock implementation which returns the current time in epoch nanoseconds.    */
DECL|class|UserTimeClock
specifier|public
specifier|static
class|class
name|UserTimeClock
extends|extends
name|Clock
block|{
annotation|@
name|Override
DECL|method|getTick
specifier|public
name|long
name|getTick
parameter_list|()
block|{
return|return
name|System
operator|.
name|nanoTime
argument_list|()
return|;
block|}
block|}
comment|/**    * A clock implementation which returns the current thread's CPU time.    */
DECL|class|CpuTimeClock
specifier|public
specifier|static
class|class
name|CpuTimeClock
extends|extends
name|Clock
block|{
DECL|field|THREAD_MX_BEAN
specifier|private
specifier|static
specifier|final
name|ThreadMXBean
name|THREAD_MX_BEAN
init|=
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|getTick
specifier|public
name|long
name|getTick
parameter_list|()
block|{
return|return
name|THREAD_MX_BEAN
operator|.
name|getCurrentThreadCpuTime
argument_list|()
return|;
block|}
block|}
block|}
end_class
end_unit
