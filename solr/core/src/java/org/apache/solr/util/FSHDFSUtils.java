begin_unit
begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|LeaseExpiredException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * Borrowed from Apache HBase to recover an HDFS lease.  */
end_comment
begin_class
DECL|class|FSHDFSUtils
specifier|public
class|class
name|FSHDFSUtils
block|{
DECL|field|log
specifier|public
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FSHDFSUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|interface|CallerInfo
specifier|public
interface|interface
name|CallerInfo
block|{
DECL|method|isCallerClosed
name|boolean
name|isCallerClosed
parameter_list|()
function_decl|;
block|}
comment|/**    * Recover the lease from HDFS, retrying multiple times.    */
DECL|method|recoverFileLease
specifier|public
specifier|static
name|void
name|recoverFileLease
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CallerInfo
name|callerInfo
parameter_list|)
throws|throws
name|IOException
block|{
comment|// lease recovery not needed for local file system case.
if|if
condition|(
operator|!
operator|(
name|fs
operator|instanceof
name|DistributedFileSystem
operator|)
condition|)
return|return;
name|recoverDFSFileLease
argument_list|(
operator|(
name|DistributedFileSystem
operator|)
name|fs
argument_list|,
name|p
argument_list|,
name|conf
argument_list|,
name|callerInfo
argument_list|)
expr_stmt|;
block|}
comment|/*    * Run the dfs recover lease. recoverLease is asynchronous. It returns:    *    -false when it starts the lease recovery (i.e. lease recovery not *yet* done)    *    - true when the lease recovery has succeeded or the file is closed.    * But, we have to be careful.  Each time we call recoverLease, it starts the recover lease    * process over from the beginning.  We could put ourselves in a situation where we are    * doing nothing but starting a recovery, interrupting it to start again, and so on.    * The findings over in HBASE-8354 have it that the namenode will try to recover the lease    * on the file's primary node.  If all is well, it should return near immediately.  But,    * as is common, it is the very primary node that has crashed and so the namenode will be    * stuck waiting on a socket timeout before it will ask another datanode to start the    * recovery. It does not help if we call recoverLease in the meantime and in particular,    * subsequent to the socket timeout, a recoverLease invocation will cause us to start    * over from square one (possibly waiting on socket timeout against primary node).  So,    * in the below, we do the following:    * 1. Call recoverLease.    * 2. If it returns true, break.    * 3. If it returns false, wait a few seconds and then call it again.    * 4. If it returns true, break.    * 5. If it returns false, wait for what we think the datanode socket timeout is    * (configurable) and then try again.    * 6. If it returns true, break.    * 7. If it returns false, repeat starting at step 5. above.    *    * If HDFS-4525 is available, call it every second and we might be able to exit early.    */
DECL|method|recoverDFSFileLease
specifier|static
name|boolean
name|recoverDFSFileLease
parameter_list|(
specifier|final
name|DistributedFileSystem
name|dfs
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
name|CallerInfo
name|callerInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Recovering lease on dfs file "
operator|+
name|p
argument_list|)
expr_stmt|;
name|long
name|startWaiting
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
comment|// Default is 15 minutes. It's huge, but the idea is that if we have a major issue, HDFS
comment|// usually needs 10 minutes before marking the nodes as dead. So we're putting ourselves
comment|// beyond that limit 'to be safe'.
name|long
name|recoveryTimeout
init|=
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|convert
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
literal|"solr.hdfs.lease.recovery.timeout"
argument_list|,
literal|900000
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|+
name|startWaiting
decl_stmt|;
comment|// This setting should be a little bit above what the cluster dfs heartbeat is set to.
name|long
name|firstPause
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"solr.hdfs.lease.recovery.first.pause"
argument_list|,
literal|4000
argument_list|)
decl_stmt|;
comment|// This should be set to how long it'll take for us to timeout against primary datanode if it
comment|// is dead.  We set it to 61 seconds, 1 second than the default READ_TIMEOUT in HDFS, the
comment|// default value for DFS_CLIENT_SOCKET_TIMEOUT_KEY.
name|long
name|subsequentPause
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"solr.hdfs.lease.recovery.dfs.timeout"
argument_list|,
literal|61
operator|*
literal|1000
argument_list|)
decl_stmt|;
name|Method
name|isFileClosedMeth
init|=
literal|null
decl_stmt|;
comment|// whether we need to look for isFileClosed method
try|try
block|{
name|isFileClosedMeth
operator|=
name|dfs
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"isFileClosed"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Path
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nsme
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"isFileClosed not available"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isFileClosedMeth
operator|!=
literal|null
operator|&&
name|isFileClosed
argument_list|(
name|dfs
argument_list|,
name|isFileClosedMeth
argument_list|,
name|p
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|boolean
name|recovered
init|=
literal|false
decl_stmt|;
comment|// We break the loop if we succeed the lease recovery, timeout, or we throw an exception.
for|for
control|(
name|int
name|nbAttempt
init|=
literal|0
init|;
operator|!
name|recovered
condition|;
name|nbAttempt
operator|++
control|)
block|{
name|recovered
operator|=
name|recoverLease
argument_list|(
name|dfs
argument_list|,
name|nbAttempt
argument_list|,
name|p
argument_list|,
name|startWaiting
argument_list|)
expr_stmt|;
if|if
condition|(
name|recovered
condition|)
break|break;
if|if
condition|(
name|checkIfTimedout
argument_list|(
name|conf
argument_list|,
name|recoveryTimeout
argument_list|,
name|nbAttempt
argument_list|,
name|p
argument_list|,
name|startWaiting
argument_list|)
operator|||
name|callerInfo
operator|.
name|isCallerClosed
argument_list|()
condition|)
break|break;
try|try
block|{
comment|// On the first time through wait the short 'firstPause'.
if|if
condition|(
name|nbAttempt
operator|==
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|firstPause
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Cycle here until subsequentPause elapses.  While spinning, check isFileClosed if
comment|// available (should be in hadoop 2.0.5... not in hadoop 1 though.
name|long
name|localStartWaiting
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|localStartWaiting
operator|)
operator|<
name|subsequentPause
operator|&&
operator|!
name|callerInfo
operator|.
name|isCallerClosed
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
literal|"solr.hdfs.lease.recovery.pause"
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFileClosedMeth
operator|!=
literal|null
operator|&&
name|isFileClosed
argument_list|(
name|dfs
argument_list|,
name|isFileClosedMeth
argument_list|,
name|p
argument_list|)
condition|)
block|{
name|recovered
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|InterruptedIOException
name|iioe
init|=
operator|new
name|InterruptedIOException
argument_list|()
decl_stmt|;
name|iioe
operator|.
name|initCause
argument_list|(
name|ie
argument_list|)
expr_stmt|;
throw|throw
name|iioe
throw|;
block|}
block|}
return|return
name|recovered
return|;
block|}
DECL|method|checkIfTimedout
specifier|static
name|boolean
name|checkIfTimedout
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|long
name|recoveryTimeout
parameter_list|,
specifier|final
name|int
name|nbAttempt
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|long
name|startWaiting
parameter_list|)
block|{
if|if
condition|(
name|recoveryTimeout
operator|<
name|System
operator|.
name|nanoTime
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot recoverLease after trying for "
operator|+
name|conf
operator|.
name|getInt
argument_list|(
literal|"solr.hdfs.lease.recovery.timeout"
argument_list|,
literal|900000
argument_list|)
operator|+
literal|"ms (solr.hdfs.lease.recovery.timeout); continuing, but may be DATALOSS!!!; "
operator|+
name|getLogMessageDetail
argument_list|(
name|nbAttempt
argument_list|,
name|p
argument_list|,
name|startWaiting
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Try to recover the lease.    * @return True if dfs#recoverLease came by true.    */
DECL|method|recoverLease
specifier|static
name|boolean
name|recoverLease
parameter_list|(
specifier|final
name|DistributedFileSystem
name|dfs
parameter_list|,
specifier|final
name|int
name|nbAttempt
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|long
name|startWaiting
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|boolean
name|recovered
init|=
literal|false
decl_stmt|;
try|try
block|{
name|recovered
operator|=
name|dfs
operator|.
name|recoverLease
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"recoverLease="
operator|+
name|recovered
operator|+
literal|", "
operator|+
name|getLogMessageDetail
argument_list|(
name|nbAttempt
argument_list|,
name|p
argument_list|,
name|startWaiting
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|LeaseExpiredException
operator|&&
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"File does not exist"
argument_list|)
condition|)
block|{
comment|// This exception comes out instead of FNFE, fix it
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"The given transactionlog file wasn't found at "
operator|+
name|p
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|FileNotFoundException
condition|)
block|{
throw|throw
operator|(
name|FileNotFoundException
operator|)
name|e
throw|;
block|}
name|log
operator|.
name|warn
argument_list|(
name|getLogMessageDetail
argument_list|(
name|nbAttempt
argument_list|,
name|p
argument_list|,
name|startWaiting
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|recovered
return|;
block|}
comment|/**    * @return Detail to append to any log message around lease recovering.    */
DECL|method|getLogMessageDetail
specifier|private
specifier|static
name|String
name|getLogMessageDetail
parameter_list|(
specifier|final
name|int
name|nbAttempt
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|long
name|startWaiting
parameter_list|)
block|{
return|return
literal|"attempt="
operator|+
name|nbAttempt
operator|+
literal|" on file="
operator|+
name|p
operator|+
literal|" after "
operator|+
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startWaiting
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|+
literal|"ms"
return|;
block|}
comment|/**    * Call HDFS-4525 isFileClosed if it is available.    *     * @return True if file is closed.    */
DECL|method|isFileClosed
specifier|private
specifier|static
name|boolean
name|isFileClosed
parameter_list|(
specifier|final
name|DistributedFileSystem
name|dfs
parameter_list|,
specifier|final
name|Method
name|m
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|Boolean
operator|)
name|m
operator|.
name|invoke
argument_list|(
name|dfs
argument_list|,
name|p
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No access"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed invocation for "
operator|+
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class
end_unit
