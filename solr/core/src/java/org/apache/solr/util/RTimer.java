begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_comment
comment|/** A simple timer.  *   * RTimers are started automatically when instantiated.  *  * @since solr 1.3  *  */
end_comment
begin_class
DECL|class|RTimer
specifier|public
class|class
name|RTimer
block|{
DECL|field|STARTED
specifier|public
specifier|static
specifier|final
name|int
name|STARTED
init|=
literal|0
decl_stmt|;
DECL|field|STOPPED
specifier|public
specifier|static
specifier|final
name|int
name|STOPPED
init|=
literal|1
decl_stmt|;
DECL|field|PAUSED
specifier|public
specifier|static
specifier|final
name|int
name|PAUSED
init|=
literal|2
decl_stmt|;
DECL|field|state
specifier|protected
name|int
name|state
decl_stmt|;
DECL|field|timerImpl
specifier|private
name|TimerImpl
name|timerImpl
decl_stmt|;
DECL|field|time
specifier|private
name|double
name|time
decl_stmt|;
DECL|field|culmTime
specifier|private
name|double
name|culmTime
decl_stmt|;
DECL|interface|TimerImpl
specifier|protected
interface|interface
name|TimerImpl
block|{
DECL|method|start
name|void
name|start
parameter_list|()
function_decl|;
DECL|method|elapsed
name|double
name|elapsed
parameter_list|()
function_decl|;
block|}
DECL|class|NanoTimeTimerImpl
specifier|private
class|class
name|NanoTimeTimerImpl
implements|implements
name|TimerImpl
block|{
DECL|field|start
specifier|private
name|long
name|start
decl_stmt|;
DECL|method|start
specifier|public
name|void
name|start
parameter_list|()
block|{
name|start
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
DECL|method|elapsed
specifier|public
name|double
name|elapsed
parameter_list|()
block|{
return|return
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
return|;
block|}
block|}
DECL|method|newTimerImpl
specifier|protected
name|TimerImpl
name|newTimerImpl
parameter_list|()
block|{
return|return
operator|new
name|NanoTimeTimerImpl
argument_list|()
return|;
block|}
DECL|method|RTimer
specifier|public
name|RTimer
parameter_list|()
block|{
name|time
operator|=
literal|0
expr_stmt|;
name|culmTime
operator|=
literal|0
expr_stmt|;
name|timerImpl
operator|=
name|newTimerImpl
argument_list|()
expr_stmt|;
name|timerImpl
operator|.
name|start
argument_list|()
expr_stmt|;
name|state
operator|=
name|STARTED
expr_stmt|;
block|}
comment|/** Stop this timer */
DECL|method|stop
specifier|public
name|double
name|stop
parameter_list|()
block|{
assert|assert
name|state
operator|==
name|STARTED
operator|||
name|state
operator|==
name|PAUSED
assert|;
name|time
operator|=
name|culmTime
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|STARTED
condition|)
name|time
operator|+=
name|timerImpl
operator|.
name|elapsed
argument_list|()
expr_stmt|;
name|state
operator|=
name|STOPPED
expr_stmt|;
return|return
name|time
return|;
block|}
DECL|method|pause
specifier|public
name|void
name|pause
parameter_list|()
block|{
assert|assert
name|state
operator|==
name|STARTED
assert|;
name|culmTime
operator|+=
name|timerImpl
operator|.
name|elapsed
argument_list|()
expr_stmt|;
name|state
operator|=
name|PAUSED
expr_stmt|;
block|}
DECL|method|resume
specifier|public
name|void
name|resume
parameter_list|()
block|{
if|if
condition|(
name|state
operator|==
name|STARTED
condition|)
return|return;
assert|assert
name|state
operator|==
name|PAUSED
assert|;
name|state
operator|=
name|STARTED
expr_stmt|;
name|timerImpl
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/** Get total elapsed time for this timer. */
DECL|method|getTime
specifier|public
name|double
name|getTime
parameter_list|()
block|{
if|if
condition|(
name|state
operator|==
name|STOPPED
condition|)
return|return
name|time
return|;
elseif|else
if|if
condition|(
name|state
operator|==
name|PAUSED
condition|)
return|return
name|culmTime
return|;
else|else
block|{
assert|assert
name|state
operator|==
name|STARTED
assert|;
return|return
name|culmTime
operator|+
name|timerImpl
operator|.
name|elapsed
argument_list|()
return|;
block|}
block|}
block|}
end_class
end_unit
