begin_unit
begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Signature
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SignatureException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|X509EncodedKeySpec
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Base64
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**A utility class to verify signatures  *  */
end_comment
begin_class
DECL|class|CryptoKeys
specifier|public
specifier|final
class|class
name|CryptoKeys
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CryptoKeys
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|keys
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PublicKey
argument_list|>
name|keys
decl_stmt|;
DECL|field|exception
specifier|private
name|Exception
name|exception
decl_stmt|;
DECL|method|CryptoKeys
specifier|public
name|CryptoKeys
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|trustedKeys
parameter_list|)
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|PublicKey
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|e
range|:
name|trustedKeys
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|m
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|getX509PublicKey
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|keys
operator|=
name|m
expr_stmt|;
block|}
comment|/**    * Try with all signatures and return the name of the signature that matched    */
DECL|method|verify
specifier|public
name|String
name|verify
parameter_list|(
name|String
name|sig
parameter_list|,
name|ByteBuffer
name|data
parameter_list|)
block|{
name|exception
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PublicKey
argument_list|>
name|entry
range|:
name|keys
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|boolean
name|verified
decl_stmt|;
try|try
block|{
name|verified
operator|=
name|CryptoKeys
operator|.
name|verify
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|Base64
operator|.
name|base64ToByteArray
argument_list|(
name|sig
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"verified {} "
argument_list|,
name|verified
argument_list|)
expr_stmt|;
if|if
condition|(
name|verified
condition|)
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"NOT verified  "
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Create PublicKey from a .DER file    */
DECL|method|getX509PublicKey
specifier|public
specifier|static
name|PublicKey
name|getX509PublicKey
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
throws|throws
name|Exception
block|{
name|X509EncodedKeySpec
name|spec
init|=
operator|new
name|X509EncodedKeySpec
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|KeyFactory
name|kf
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"RSA"
argument_list|)
decl_stmt|;
return|return
name|kf
operator|.
name|generatePublic
argument_list|(
name|spec
argument_list|)
return|;
block|}
comment|/**    * Verify the signature of a file    *    * @param publicKey the public key used to sign this    * @param sig       the signature    * @param data      The data tha is signed    */
DECL|method|verify
specifier|public
specifier|static
name|boolean
name|verify
parameter_list|(
name|PublicKey
name|publicKey
parameter_list|,
name|byte
index|[]
name|sig
parameter_list|,
name|ByteBuffer
name|data
parameter_list|)
throws|throws
name|InvalidKeyException
throws|,
name|SignatureException
block|{
name|int
name|oldPos
init|=
name|data
operator|.
name|position
argument_list|()
decl_stmt|;
name|Signature
name|signature
init|=
literal|null
decl_stmt|;
try|try
block|{
name|signature
operator|=
name|Signature
operator|.
name|getInstance
argument_list|(
literal|"SHA1withRSA"
argument_list|)
expr_stmt|;
name|signature
operator|.
name|initVerify
argument_list|(
name|publicKey
argument_list|)
expr_stmt|;
name|signature
operator|.
name|update
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|boolean
name|verify
init|=
name|signature
operator|.
name|verify
argument_list|(
name|sig
argument_list|)
decl_stmt|;
return|return
name|verify
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
comment|//will not happen
block|}
finally|finally
block|{
comment|//Signature.update resets the position. set it back to old
name|data
operator|.
name|position
argument_list|(
name|oldPos
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class
end_unit
