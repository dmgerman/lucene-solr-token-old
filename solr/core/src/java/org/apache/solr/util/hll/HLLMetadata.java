begin_unit
begin_package
DECL|package|org.apache.solr.util.hll
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|hll
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A concrete {@link IHLLMetadata} implemented as a simple struct.  */
end_comment
begin_class
DECL|class|HLLMetadata
class|class
name|HLLMetadata
implements|implements
name|IHLLMetadata
block|{
DECL|field|schemaVersion
specifier|private
specifier|final
name|int
name|schemaVersion
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|HLLType
name|type
decl_stmt|;
DECL|field|registerCountLog2
specifier|private
specifier|final
name|int
name|registerCountLog2
decl_stmt|;
DECL|field|registerWidth
specifier|private
specifier|final
name|int
name|registerWidth
decl_stmt|;
DECL|field|log2ExplicitCutoff
specifier|private
specifier|final
name|int
name|log2ExplicitCutoff
decl_stmt|;
DECL|field|explicitOff
specifier|private
specifier|final
name|boolean
name|explicitOff
decl_stmt|;
DECL|field|explicitAuto
specifier|private
specifier|final
name|boolean
name|explicitAuto
decl_stmt|;
DECL|field|sparseEnabled
specifier|private
specifier|final
name|boolean
name|sparseEnabled
decl_stmt|;
comment|/**      * @param schemaVersion the schema version number of the HLL. This must      *        be greater than or equal to zero.      * @param type the {@link HLLType type} of the HLL. This cannot      *        be<code>null</code>.      * @param registerCountLog2 the log-base-2 register count parameter for      *        probabilistic HLLs. This must be greater than or equal to zero.      * @param registerWidth the register width parameter for probabilistic      *        HLLs. This must be greater than or equal to zero.      * @param log2ExplicitCutoff the log-base-2 of the explicit cardinality cutoff,      *        if it is explicitly defined. (If<code>explicitOff</code> or      *<code>explicitAuto</code> is<code>true</code> then this has no      *        meaning.)      * @param explicitOff the flag for 'explicit off'-mode, where the      *        {@link HLLType#EXPLICIT} representation is not used. Both this and      *<code>explicitAuto</code> cannot be<code>true</code> at the same      *        time.      * @param explicitAuto the flag for 'explicit auto'-mode, where the      *        {@link HLLType#EXPLICIT} representation's promotion cutoff is      *        determined based on in-memory size automatically. Both this and      *<code>explicitOff</code> cannot be<code>true</code> at the same      *        time.      * @param sparseEnabled the flag for 'sparse-enabled'-mode, where the      *        {@link HLLType#SPARSE} representation is used.      */
DECL|method|HLLMetadata
specifier|public
name|HLLMetadata
parameter_list|(
specifier|final
name|int
name|schemaVersion
parameter_list|,
specifier|final
name|HLLType
name|type
parameter_list|,
specifier|final
name|int
name|registerCountLog2
parameter_list|,
specifier|final
name|int
name|registerWidth
parameter_list|,
specifier|final
name|int
name|log2ExplicitCutoff
parameter_list|,
specifier|final
name|boolean
name|explicitOff
parameter_list|,
specifier|final
name|boolean
name|explicitAuto
parameter_list|,
specifier|final
name|boolean
name|sparseEnabled
parameter_list|)
block|{
name|this
operator|.
name|schemaVersion
operator|=
name|schemaVersion
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|registerCountLog2
operator|=
name|registerCountLog2
expr_stmt|;
name|this
operator|.
name|registerWidth
operator|=
name|registerWidth
expr_stmt|;
name|this
operator|.
name|log2ExplicitCutoff
operator|=
name|log2ExplicitCutoff
expr_stmt|;
name|this
operator|.
name|explicitOff
operator|=
name|explicitOff
expr_stmt|;
name|this
operator|.
name|explicitAuto
operator|=
name|explicitAuto
expr_stmt|;
name|this
operator|.
name|sparseEnabled
operator|=
name|sparseEnabled
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see net.agkn.hll.serialization.IHLLMetadata#schemaVersion()      */
annotation|@
name|Override
DECL|method|schemaVersion
specifier|public
name|int
name|schemaVersion
parameter_list|()
block|{
return|return
name|schemaVersion
return|;
block|}
comment|/* (non-Javadoc)      * @see net.agkn.hll.serialization.IHLLMetadata#HLLType()      */
annotation|@
name|Override
DECL|method|HLLType
specifier|public
name|HLLType
name|HLLType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/* (non-Javadoc)      * @see net.agkn.hll.serialization.IHLLMetadata#registerCountLog2()      */
annotation|@
name|Override
DECL|method|registerCountLog2
specifier|public
name|int
name|registerCountLog2
parameter_list|()
block|{
return|return
name|registerCountLog2
return|;
block|}
comment|/* (non-Javadoc)      * @see net.agkn.hll.serialization.IHLLMetadata#registerWidth()      */
annotation|@
name|Override
DECL|method|registerWidth
specifier|public
name|int
name|registerWidth
parameter_list|()
block|{
return|return
name|registerWidth
return|;
block|}
comment|/* (non-Javadoc)      * @see net.agkn.hll.serialization.IHLLMetadata#log2ExplicitCutoff()      */
annotation|@
name|Override
DECL|method|log2ExplicitCutoff
specifier|public
name|int
name|log2ExplicitCutoff
parameter_list|()
block|{
return|return
name|log2ExplicitCutoff
return|;
block|}
comment|/* (non-Javadoc)      * @see net.agkn.hll.serialization.IHLLMetadata#explicitOff()      */
annotation|@
name|Override
DECL|method|explicitOff
specifier|public
name|boolean
name|explicitOff
parameter_list|()
block|{
return|return
name|explicitOff
return|;
block|}
comment|/* (non-Javadoc)      * @see net.agkn.hll.serialization.IHLLMetadata#explicitAuto()      * @see net.agkn.hll.serialization.IHLLMetadata#log2ExplicitCutoff()      */
annotation|@
name|Override
DECL|method|explicitAuto
specifier|public
name|boolean
name|explicitAuto
parameter_list|()
block|{
return|return
name|explicitAuto
return|;
block|}
comment|/* (non-Javadoc)      * @see net.agkn.hll.serialization.IHLLMetadata#sparseEnabled()      */
annotation|@
name|Override
DECL|method|sparseEnabled
specifier|public
name|boolean
name|sparseEnabled
parameter_list|()
block|{
return|return
name|sparseEnabled
return|;
block|}
comment|/* (non-Javadoc)      * @see java.lang.Object#toString()      */
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"<HLLMetadata schemaVersion: "
operator|+
name|this
operator|.
name|schemaVersion
operator|+
literal|", type: "
operator|+
name|this
operator|.
name|type
operator|.
name|toString
argument_list|()
operator|+
literal|", registerCountLog2: "
operator|+
name|this
operator|.
name|registerCountLog2
operator|+
literal|", registerWidth: "
operator|+
name|this
operator|.
name|registerWidth
operator|+
literal|", log2ExplicitCutoff: "
operator|+
name|this
operator|.
name|log2ExplicitCutoff
operator|+
literal|", explicitOff: "
operator|+
name|this
operator|.
name|explicitOff
operator|+
literal|", explicitAuto: "
operator|+
name|this
operator|.
name|explicitAuto
operator|+
literal|">"
return|;
block|}
block|}
end_class
end_unit
