begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_comment
comment|/** A recursive timer.  *  * RTimerTree's are started automatically when instantiated; sub-timers are also  * started automatically when created.  */
end_comment
begin_class
DECL|class|RTimerTree
specifier|public
class|class
name|RTimerTree
extends|extends
name|RTimer
block|{
DECL|field|children
specifier|protected
name|SimpleOrderedMap
argument_list|<
name|RTimerTree
argument_list|>
name|children
decl_stmt|;
DECL|method|RTimerTree
specifier|public
name|RTimerTree
parameter_list|()
block|{
name|children
operator|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/** Recursively stop timer and sub timers */
annotation|@
name|Override
DECL|method|stop
specifier|public
name|double
name|stop
parameter_list|()
block|{
name|double
name|time
init|=
name|super
operator|.
name|stop
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RTimerTree
argument_list|>
name|entry
range|:
name|children
control|)
block|{
name|RTimer
name|child
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|state
operator|==
name|STARTED
operator|||
name|child
operator|.
name|state
operator|==
name|PAUSED
condition|)
name|child
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
return|return
name|time
return|;
block|}
DECL|method|newTimer
specifier|protected
name|RTimerTree
name|newTimer
parameter_list|()
block|{
return|return
operator|new
name|RTimerTree
argument_list|()
return|;
block|}
comment|/** Create new subtimer with given name    *    * Subtimer will be started.    */
DECL|method|sub
specifier|public
name|RTimerTree
name|sub
parameter_list|(
name|String
name|desc
parameter_list|)
block|{
name|RTimerTree
name|child
init|=
name|children
operator|.
name|get
argument_list|(
name|desc
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
name|child
operator|=
name|newTimer
argument_list|()
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|desc
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
return|return
name|child
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|asNamedList
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|asNamedList
specifier|public
name|NamedList
name|asNamedList
parameter_list|()
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|m
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"time"
argument_list|,
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RTimerTree
argument_list|>
name|entry
range|:
name|children
control|)
block|{
name|m
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|asNamedList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|m
return|;
block|}
comment|/**    * Manipulating this map may have undefined results.    */
DECL|method|getChildren
specifier|public
name|SimpleOrderedMap
argument_list|<
name|RTimerTree
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|children
return|;
block|}
block|}
end_class
end_unit
