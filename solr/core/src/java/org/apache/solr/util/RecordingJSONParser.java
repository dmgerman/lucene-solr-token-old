begin_unit
begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|CharArr
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONParser
import|;
end_import
begin_class
DECL|class|RecordingJSONParser
specifier|public
class|class
name|RecordingJSONParser
extends|extends
name|JSONParser
block|{
DECL|method|RecordingJSONParser
specifier|public
name|RecordingJSONParser
parameter_list|(
name|Reader
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|field|sb
specifier|private
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
DECL|field|position
specifier|private
name|long
name|position
decl_stmt|;
DECL|field|objectStarted
specifier|private
name|boolean
name|objectStarted
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|getChar
specifier|protected
name|int
name|getChar
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|aChar
init|=
name|super
operator|.
name|getChar
argument_list|()
decl_stmt|;
if|if
condition|(
name|aChar
operator|==
literal|'{'
condition|)
name|objectStarted
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|getPosition
argument_list|()
operator|>
name|position
condition|)
name|recordChar
argument_list|(
operator|(
name|char
operator|)
name|aChar
argument_list|)
expr_stmt|;
comment|// check before adding if a pushback happened ignore
name|position
operator|=
name|getPosition
argument_list|()
expr_stmt|;
return|return
name|aChar
return|;
block|}
DECL|method|recordChar
specifier|private
name|void
name|recordChar
parameter_list|(
name|int
name|aChar
parameter_list|)
block|{
if|if
condition|(
name|objectStarted
condition|)
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|aChar
argument_list|)
expr_stmt|;
block|}
DECL|method|recordStr
specifier|private
name|void
name|recordStr
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|objectStarted
condition|)
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getStringChars
specifier|public
name|CharArr
name|getStringChars
parameter_list|()
throws|throws
name|IOException
block|{
name|CharArr
name|chars
init|=
name|super
operator|.
name|getStringChars
argument_list|()
decl_stmt|;
name|recordStr
argument_list|(
name|chars
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|position
operator|=
name|getPosition
argument_list|()
expr_stmt|;
comment|// if reading a String , the getStringChars do not return the closing single quote or double quote
comment|//so, try to capture that
if|if
condition|(
name|chars
operator|.
name|getArray
argument_list|()
operator|.
name|length
operator|>
name|chars
operator|.
name|getStart
argument_list|()
operator|+
name|chars
operator|.
name|size
argument_list|()
condition|)
block|{
name|char
name|next
init|=
name|chars
operator|.
name|getArray
argument_list|()
index|[
name|chars
operator|.
name|getStart
argument_list|()
operator|+
name|chars
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|next
operator|==
literal|'"'
operator|||
name|next
operator|==
literal|'\''
condition|)
block|{
name|recordChar
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|chars
return|;
block|}
DECL|method|resetBuf
specifier|public
name|void
name|resetBuf
parameter_list|()
block|{
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|objectStarted
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|getBuf
specifier|public
name|String
name|getBuf
parameter_list|()
block|{
if|if
condition|(
name|sb
operator|!=
literal|null
condition|)
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
return|return
literal|null
return|;
block|}
DECL|method|error
specifier|public
name|JSONParser
operator|.
name|ParseException
name|error
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
return|return
name|err
argument_list|(
name|msg
argument_list|)
return|;
block|}
block|}
end_class
end_unit
