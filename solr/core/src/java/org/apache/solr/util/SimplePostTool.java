begin_unit
begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|DatatypeConverter
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpression
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ProtocolException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|BufferOverflowException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Inflater
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|InflaterInputStream
import|;
end_import
begin_comment
comment|/**  * A simple utility class for posting raw updates to a Solr server,   * has a main method so it can be run on the command line.  * View this not as a best-practice code example, but as a standalone   * example built with an explicit purpose of not having external  * jar dependencies.  */
end_comment
begin_class
DECL|class|SimplePostTool
specifier|public
class|class
name|SimplePostTool
block|{
DECL|field|DEFAULT_POST_HOST
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_POST_HOST
init|=
literal|"localhost"
decl_stmt|;
DECL|field|DEFAULT_POST_PORT
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_POST_PORT
init|=
literal|"8983"
decl_stmt|;
DECL|field|VERSION_OF_THIS_TOOL
specifier|private
specifier|static
specifier|final
name|String
name|VERSION_OF_THIS_TOOL
init|=
literal|"5.0.0"
decl_stmt|;
comment|// TODO: hardcoded for now, but eventually to sync with actual Solr version
DECL|field|DEFAULT_COMMIT
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_COMMIT
init|=
literal|"yes"
decl_stmt|;
DECL|field|DEFAULT_OPTIMIZE
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_OPTIMIZE
init|=
literal|"no"
decl_stmt|;
DECL|field|DEFAULT_OUT
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_OUT
init|=
literal|"no"
decl_stmt|;
DECL|field|DEFAULT_AUTO
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_AUTO
init|=
literal|"no"
decl_stmt|;
DECL|field|DEFAULT_RECURSIVE
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_RECURSIVE
init|=
literal|"0"
decl_stmt|;
DECL|field|DEFAULT_WEB_DELAY
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_WEB_DELAY
init|=
literal|10
decl_stmt|;
DECL|field|MAX_WEB_DEPTH
specifier|private
specifier|static
specifier|final
name|int
name|MAX_WEB_DEPTH
init|=
literal|10
decl_stmt|;
DECL|field|DEFAULT_CONTENT_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CONTENT_TYPE
init|=
literal|"application/xml"
decl_stmt|;
DECL|field|DEFAULT_FILE_TYPES
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_FILE_TYPES
init|=
literal|"xml,json,csv,pdf,doc,docx,ppt,pptx,xls,xlsx,odt,odp,ods,ott,otp,ots,rtf,htm,html,txt,log"
decl_stmt|;
DECL|field|DATA_MODE_FILES
specifier|static
specifier|final
name|String
name|DATA_MODE_FILES
init|=
literal|"files"
decl_stmt|;
DECL|field|DATA_MODE_ARGS
specifier|static
specifier|final
name|String
name|DATA_MODE_ARGS
init|=
literal|"args"
decl_stmt|;
DECL|field|DATA_MODE_STDIN
specifier|static
specifier|final
name|String
name|DATA_MODE_STDIN
init|=
literal|"stdin"
decl_stmt|;
DECL|field|DATA_MODE_WEB
specifier|static
specifier|final
name|String
name|DATA_MODE_WEB
init|=
literal|"web"
decl_stmt|;
DECL|field|DEFAULT_DATA_MODE
specifier|static
specifier|final
name|String
name|DEFAULT_DATA_MODE
init|=
name|DATA_MODE_FILES
decl_stmt|;
comment|// Input args
DECL|field|auto
name|boolean
name|auto
init|=
literal|false
decl_stmt|;
DECL|field|recursive
name|int
name|recursive
init|=
literal|0
decl_stmt|;
DECL|field|delay
name|int
name|delay
init|=
literal|0
decl_stmt|;
DECL|field|fileTypes
name|String
name|fileTypes
decl_stmt|;
DECL|field|solrUrl
name|URL
name|solrUrl
decl_stmt|;
DECL|field|out
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
DECL|field|type
name|String
name|type
decl_stmt|;
DECL|field|mode
name|String
name|mode
decl_stmt|;
DECL|field|commit
name|boolean
name|commit
decl_stmt|;
DECL|field|optimize
name|boolean
name|optimize
decl_stmt|;
DECL|field|args
name|String
index|[]
name|args
decl_stmt|;
DECL|field|currentDepth
specifier|private
name|int
name|currentDepth
decl_stmt|;
DECL|field|mimeMap
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mimeMap
decl_stmt|;
DECL|field|globFileFilter
name|GlobFileFilter
name|globFileFilter
decl_stmt|;
comment|// Backlog for crawling
DECL|field|backlog
name|List
argument_list|<
name|LinkedHashSet
argument_list|<
name|URL
argument_list|>
argument_list|>
name|backlog
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|visited
name|Set
argument_list|<
name|URL
argument_list|>
name|visited
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|DATA_MODES
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|DATA_MODES
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|USAGE_STRING_SHORT
specifier|static
specifier|final
name|String
name|USAGE_STRING_SHORT
init|=
literal|"Usage: java [SystemProperties] -jar post.jar [-h|-] [<file|folder|url|arg> [<file|folder|url|arg>...]]"
decl_stmt|;
comment|// Used in tests to avoid doing actual network traffic
DECL|field|mockMode
specifier|static
name|boolean
name|mockMode
init|=
literal|false
decl_stmt|;
DECL|field|pageFetcher
specifier|static
name|PageFetcher
name|pageFetcher
decl_stmt|;
static|static
block|{
name|DATA_MODES
operator|.
name|add
argument_list|(
name|DATA_MODE_FILES
argument_list|)
expr_stmt|;
name|DATA_MODES
operator|.
name|add
argument_list|(
name|DATA_MODE_ARGS
argument_list|)
expr_stmt|;
name|DATA_MODES
operator|.
name|add
argument_list|(
name|DATA_MODE_STDIN
argument_list|)
expr_stmt|;
name|DATA_MODES
operator|.
name|add
argument_list|(
name|DATA_MODE_WEB
argument_list|)
expr_stmt|;
name|mimeMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"xml"
argument_list|,
literal|"application/xml"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"csv"
argument_list|,
literal|"text/csv"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"json"
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"pdf"
argument_list|,
literal|"application/pdf"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"rtf"
argument_list|,
literal|"text/rtf"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"html"
argument_list|,
literal|"text/html"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"htm"
argument_list|,
literal|"text/html"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"doc"
argument_list|,
literal|"application/msword"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"docx"
argument_list|,
literal|"application/vnd.openxmlformats-officedocument.wordprocessingml.document"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"ppt"
argument_list|,
literal|"application/vnd.ms-powerpoint"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"pptx"
argument_list|,
literal|"application/vnd.openxmlformats-officedocument.presentationml.presentation"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"xls"
argument_list|,
literal|"application/vnd.ms-excel"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"xlsx"
argument_list|,
literal|"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"odt"
argument_list|,
literal|"application/vnd.oasis.opendocument.text"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"ott"
argument_list|,
literal|"application/vnd.oasis.opendocument.text"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"odp"
argument_list|,
literal|"application/vnd.oasis.opendocument.presentation"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"otp"
argument_list|,
literal|"application/vnd.oasis.opendocument.presentation"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"ods"
argument_list|,
literal|"application/vnd.oasis.opendocument.spreadsheet"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"ots"
argument_list|,
literal|"application/vnd.oasis.opendocument.spreadsheet"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"txt"
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"log"
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
block|}
comment|/**    * See usage() for valid command line usage    * @param args the params on the command line    */
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|info
argument_list|(
literal|"SimplePostTool version "
operator|+
name|VERSION_OF_THIS_TOOL
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|<
name|args
operator|.
name|length
operator|&&
operator|(
literal|"-help"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
operator|||
literal|"--help"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
operator|||
literal|"-h"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
operator|)
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|SimplePostTool
name|t
init|=
name|parseArgsAndInit
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|t
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * After initialization, call execute to start the post job.    * This method delegates to the correct mode method.    */
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|()
block|{
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|DATA_MODE_FILES
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
operator|&&
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|doFilesMode
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DATA_MODE_ARGS
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
operator|&&
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|doArgsMode
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DATA_MODE_WEB
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
operator|&&
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|doWebMode
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DATA_MODE_STDIN
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|doStdinMode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|usageShort
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|commit
condition|)
name|commit
argument_list|()
expr_stmt|;
if|if
condition|(
name|optimize
condition|)
name|optimize
argument_list|()
expr_stmt|;
specifier|final
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|displayTiming
argument_list|(
name|endTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
comment|/**    * Pretty prints the number of milliseconds taken to post the content to Solr    * @param millis the time in milliseconds    */
DECL|method|displayTiming
specifier|private
name|void
name|displayTiming
parameter_list|(
name|long
name|millis
parameter_list|)
block|{
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"H:mm:ss.SSS"
argument_list|,
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|)
decl_stmt|;
name|df
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Time spent: "
operator|+
name|df
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|millis
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Parses incoming arguments and system params and initializes the tool    * @param args the incoming cmd line args    * @return an instance of SimplePostTool    */
DECL|method|parseArgsAndInit
specifier|protected
specifier|static
name|SimplePostTool
name|parseArgsAndInit
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|String
name|urlStr
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Parse args
specifier|final
name|String
name|mode
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"data"
argument_list|,
name|DEFAULT_DATA_MODE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|DATA_MODES
operator|.
name|contains
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|fatal
argument_list|(
literal|"System Property 'data' is not valid for this tool: "
operator|+
name|mode
argument_list|)
expr_stmt|;
block|}
name|String
name|params
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"params"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"host"
argument_list|,
name|DEFAULT_POST_HOST
argument_list|)
decl_stmt|;
name|String
name|port
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"port"
argument_list|,
name|DEFAULT_POST_PORT
argument_list|)
decl_stmt|;
name|String
name|core
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|urlStr
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
if|if
condition|(
name|urlStr
operator|==
literal|null
operator|&&
name|core
operator|==
literal|null
condition|)
block|{
name|fatal
argument_list|(
literal|"Specifying either url or core/collection is mandatory.\n"
operator|+
name|USAGE_STRING_SHORT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|urlStr
operator|==
literal|null
condition|)
block|{
name|urlStr
operator|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"http://%s:%s/solr/%s/update"
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|core
argument_list|)
expr_stmt|;
block|}
name|urlStr
operator|=
name|SimplePostTool
operator|.
name|appendParam
argument_list|(
name|urlStr
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|urlStr
argument_list|)
decl_stmt|;
name|boolean
name|auto
init|=
name|isOn
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"auto"
argument_list|,
name|DEFAULT_AUTO
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
comment|// Recursive
name|int
name|recursive
init|=
literal|0
decl_stmt|;
name|String
name|r
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"recursive"
argument_list|,
name|DEFAULT_RECURSIVE
argument_list|)
decl_stmt|;
try|try
block|{
name|recursive
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|isOn
argument_list|(
name|r
argument_list|)
condition|)
name|recursive
operator|=
name|DATA_MODE_WEB
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|?
literal|1
else|:
literal|999
expr_stmt|;
block|}
comment|// Delay
name|int
name|delay
init|=
name|DATA_MODE_WEB
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|?
name|DEFAULT_WEB_DELAY
else|:
literal|0
decl_stmt|;
try|try
block|{
name|delay
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"delay"
argument_list|,
literal|""
operator|+
name|delay
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{ }
name|OutputStream
name|out
init|=
name|isOn
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"out"
argument_list|,
name|DEFAULT_OUT
argument_list|)
argument_list|)
condition|?
name|System
operator|.
name|out
else|:
literal|null
decl_stmt|;
name|String
name|fileTypes
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"filetypes"
argument_list|,
name|DEFAULT_FILE_TYPES
argument_list|)
decl_stmt|;
name|boolean
name|commit
init|=
name|isOn
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"commit"
argument_list|,
name|DEFAULT_COMMIT
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|optimize
init|=
name|isOn
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"optimize"
argument_list|,
name|DEFAULT_OPTIMIZE
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|SimplePostTool
argument_list|(
name|mode
argument_list|,
name|url
argument_list|,
name|auto
argument_list|,
name|type
argument_list|,
name|recursive
argument_list|,
name|delay
argument_list|,
name|fileTypes
argument_list|,
name|out
argument_list|,
name|commit
argument_list|,
name|optimize
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"System Property 'url' is not a valid URL: "
operator|+
name|urlStr
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Constructor which takes in all mandatory input for the tool to work.    * Also see usage() for further explanation of the params.    * @param mode whether to post files, web pages, params or stdin    * @param url the Solr base Url to post to, should end with /update    * @param auto if true, we'll guess type and add resourcename/url    * @param type content-type of the data you are posting    * @param recursive number of levels for file/web mode, or 0 if one file only    * @param delay if recursive then delay will be the wait time between posts    * @param fileTypes a comma separated list of file-name endings to accept for file/web    * @param out an OutputStream to write output to, e.g. stdout to print to console    * @param commit if true, will commit at end of posting    * @param optimize if true, will optimize at end of posting    * @param args a String[] of arguments, varies between modes    */
DECL|method|SimplePostTool
specifier|public
name|SimplePostTool
parameter_list|(
name|String
name|mode
parameter_list|,
name|URL
name|url
parameter_list|,
name|boolean
name|auto
parameter_list|,
name|String
name|type
parameter_list|,
name|int
name|recursive
parameter_list|,
name|int
name|delay
parameter_list|,
name|String
name|fileTypes
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|boolean
name|commit
parameter_list|,
name|boolean
name|optimize
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
block|{
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
name|this
operator|.
name|solrUrl
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|auto
operator|=
name|auto
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|recursive
operator|=
name|recursive
expr_stmt|;
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
name|this
operator|.
name|fileTypes
operator|=
name|fileTypes
expr_stmt|;
name|this
operator|.
name|globFileFilter
operator|=
name|getFileFilterFromFileTypes
argument_list|(
name|fileTypes
argument_list|)
expr_stmt|;
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|this
operator|.
name|commit
operator|=
name|commit
expr_stmt|;
name|this
operator|.
name|optimize
operator|=
name|optimize
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
name|pageFetcher
operator|=
operator|new
name|PageFetcher
argument_list|()
expr_stmt|;
block|}
DECL|method|SimplePostTool
specifier|public
name|SimplePostTool
parameter_list|()
block|{}
comment|//
comment|// Do some action depending on which mode we have
comment|//
DECL|method|doFilesMode
specifier|private
name|void
name|doFilesMode
parameter_list|()
block|{
name|currentDepth
operator|=
literal|0
expr_stmt|;
comment|// Skip posting files if special param "-" given
if|if
condition|(
operator|!
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|info
argument_list|(
literal|"Posting files to [base] url "
operator|+
name|solrUrl
operator|+
operator|(
operator|!
name|auto
condition|?
literal|" using content-type "
operator|+
operator|(
name|type
operator|==
literal|null
condition|?
name|DEFAULT_CONTENT_TYPE
else|:
name|type
operator|)
else|:
literal|""
operator|)
operator|+
literal|"..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|auto
condition|)
name|info
argument_list|(
literal|"Entering auto mode. File endings considered are "
operator|+
name|fileTypes
argument_list|)
expr_stmt|;
if|if
condition|(
name|recursive
operator|>
literal|0
condition|)
name|info
argument_list|(
literal|"Entering recursive mode, max depth="
operator|+
name|recursive
operator|+
literal|", delay="
operator|+
name|delay
operator|+
literal|"s"
argument_list|)
expr_stmt|;
name|int
name|numFilesPosted
init|=
name|postFiles
argument_list|(
name|args
argument_list|,
literal|0
argument_list|,
name|out
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|info
argument_list|(
name|numFilesPosted
operator|+
literal|" files indexed."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doArgsMode
specifier|private
name|void
name|doArgsMode
parameter_list|()
block|{
name|info
argument_list|(
literal|"POSTing args to "
operator|+
name|solrUrl
operator|+
literal|"..."
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|a
range|:
name|args
control|)
block|{
name|postData
argument_list|(
name|stringToStream
argument_list|(
name|a
argument_list|)
argument_list|,
literal|null
argument_list|,
name|out
argument_list|,
name|type
argument_list|,
name|solrUrl
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doWebMode
specifier|private
name|int
name|doWebMode
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
name|int
name|numPagesPosted
init|=
literal|0
decl_stmt|;
try|try
block|{
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|fatal
argument_list|(
literal|"Specifying content-type with \"-Ddata=web\" is not supported"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
comment|// Skip posting url if special param "-" given
return|return
literal|0
return|;
block|}
comment|// Set Extracting handler as default
name|solrUrl
operator|=
name|appendUrlPath
argument_list|(
name|solrUrl
argument_list|,
literal|"/extract"
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"Posting web pages to Solr url "
operator|+
name|solrUrl
argument_list|)
expr_stmt|;
name|auto
operator|=
literal|true
expr_stmt|;
name|info
argument_list|(
literal|"Entering auto mode. Indexing pages with content-types corresponding to file endings "
operator|+
name|fileTypes
argument_list|)
expr_stmt|;
if|if
condition|(
name|recursive
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|recursive
operator|>
name|MAX_WEB_DEPTH
condition|)
block|{
name|recursive
operator|=
name|MAX_WEB_DEPTH
expr_stmt|;
name|warn
argument_list|(
literal|"Too large recursion depth for web mode, limiting to "
operator|+
name|MAX_WEB_DEPTH
operator|+
literal|"..."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|delay
operator|<
name|DEFAULT_WEB_DELAY
condition|)
name|warn
argument_list|(
literal|"Never crawl an external web site faster than every 10 seconds, your IP will probably be blocked"
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"Entering recursive mode, depth="
operator|+
name|recursive
operator|+
literal|", delay="
operator|+
name|delay
operator|+
literal|"s"
argument_list|)
expr_stmt|;
block|}
name|numPagesPosted
operator|=
name|postWebPages
argument_list|(
name|args
argument_list|,
literal|0
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|info
argument_list|(
name|numPagesPosted
operator|+
literal|" web pages indexed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Wrong URL trying to append /extract to "
operator|+
name|solrUrl
argument_list|)
expr_stmt|;
block|}
return|return
name|numPagesPosted
return|;
block|}
DECL|method|doStdinMode
specifier|private
name|void
name|doStdinMode
parameter_list|()
block|{
name|info
argument_list|(
literal|"POSTing stdin to "
operator|+
name|solrUrl
operator|+
literal|"..."
argument_list|)
expr_stmt|;
name|postData
argument_list|(
name|System
operator|.
name|in
argument_list|,
literal|null
argument_list|,
name|out
argument_list|,
name|type
argument_list|,
name|solrUrl
argument_list|)
expr_stmt|;
block|}
DECL|method|reset
specifier|private
name|void
name|reset
parameter_list|()
block|{
name|fileTypes
operator|=
name|DEFAULT_FILE_TYPES
expr_stmt|;
name|globFileFilter
operator|=
name|this
operator|.
name|getFileFilterFromFileTypes
argument_list|(
name|fileTypes
argument_list|)
expr_stmt|;
name|backlog
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|visited
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|//
comment|// USAGE
comment|//
DECL|method|usageShort
specifier|private
specifier|static
name|void
name|usageShort
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|USAGE_STRING_SHORT
operator|+
literal|"\n"
operator|+
literal|"       Please invoke with -h option for extended usage help."
argument_list|)
expr_stmt|;
block|}
DECL|method|usage
specifier|private
specifier|static
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|USAGE_STRING_SHORT
operator|+
literal|"\n\n"
operator|+
literal|"Supported System Properties and their defaults:\n"
operator|+
literal|"  -Dc=<core/collection>\n"
operator|+
literal|"  -Durl=<base Solr update URL> (overrides -Dc option if specified)\n"
operator|+
literal|"  -Ddata=files|web|args|stdin (default="
operator|+
name|DEFAULT_DATA_MODE
operator|+
literal|")\n"
operator|+
literal|"  -Dtype=<content-type> (default="
operator|+
name|DEFAULT_CONTENT_TYPE
operator|+
literal|")\n"
operator|+
literal|"  -Dhost=<host> (default: "
operator|+
name|DEFAULT_POST_HOST
operator|+
literal|")\n"
operator|+
literal|"  -Dport=<port> (default: "
operator|+
name|DEFAULT_POST_PORT
operator|+
literal|")\n"
operator|+
literal|"  -Dauto=yes|no (default="
operator|+
name|DEFAULT_AUTO
operator|+
literal|")\n"
operator|+
literal|"  -Drecursive=yes|no|<depth> (default="
operator|+
name|DEFAULT_RECURSIVE
operator|+
literal|")\n"
operator|+
literal|"  -Ddelay=<seconds> (default=0 for files, 10 for web)\n"
operator|+
literal|"  -Dfiletypes=<type>[,<type>,...] (default="
operator|+
name|DEFAULT_FILE_TYPES
operator|+
literal|")\n"
operator|+
literal|"  -Dparams=\"<key>=<value>[&<key>=<value>...]\" (values must be URL-encoded)\n"
operator|+
literal|"  -Dcommit=yes|no (default="
operator|+
name|DEFAULT_COMMIT
operator|+
literal|")\n"
operator|+
literal|"  -Doptimize=yes|no (default="
operator|+
name|DEFAULT_OPTIMIZE
operator|+
literal|")\n"
operator|+
literal|"  -Dout=yes|no (default="
operator|+
name|DEFAULT_OUT
operator|+
literal|")\n\n"
operator|+
literal|"This is a simple command line tool for POSTing raw data to a Solr port.\n"
operator|+
literal|"NOTE: Specifying the url/core/collection name is mandatory.\n"
operator|+
literal|"Data can be read from files specified as commandline args,\n"
operator|+
literal|"URLs specified as args, as raw commandline arg strings or via STDIN.\n"
operator|+
literal|"Examples:\n"
operator|+
literal|"  java -Dc=gettingstarted -jar post.jar *.xml\n"
operator|+
literal|"  java -Ddata=args -Dc=gettingstarted -jar post.jar '<delete><id>42</id></delete>'\n"
operator|+
literal|"  java -Ddata=stdin -Dc=gettingstarted -jar post.jar< hd.xml\n"
operator|+
literal|"  java -Ddata=web -Dc=gettingstarted -jar post.jar http://example.com/\n"
operator|+
literal|"  java -Dtype=text/csv -Dc=gettingstarted -jar post.jar *.csv\n"
operator|+
literal|"  java -Dtype=application/json -Dc=gettingstarted -jar post.jar *.json\n"
operator|+
literal|"  java -Durl=http://localhost:8983/solr/techproducts/update/extract -Dparams=literal.id=pdf1 -jar post.jar solr-word.pdf\n"
operator|+
literal|"  java -Dauto -Dc=gettingstarted -jar post.jar *\n"
operator|+
literal|"  java -Dauto -Dc=gettingstarted -Drecursive -jar post.jar afolder\n"
operator|+
literal|"  java -Dauto -Dc=gettingstarted -Dfiletypes=ppt,html -jar post.jar afolder\n"
operator|+
literal|"The options controlled by System Properties include the Solr\n"
operator|+
literal|"URL to POST to, the Content-Type of the data, whether a commit\n"
operator|+
literal|"or optimize should be executed, and whether the response should\n"
operator|+
literal|"be written to STDOUT. If auto=yes the tool will try to set type\n"
operator|+
literal|"automatically from file name. When posting rich documents the\n"
operator|+
literal|"file name will be propagated as \"resource.name\" and also used\n"
operator|+
literal|"as \"literal.id\". You may override these or any other request parameter\n"
operator|+
literal|"through the -Dparams property. To do a commit only, use \"-\" as argument.\n"
operator|+
literal|"The web mode is a simple crawler following links within domain, default delay=10s."
argument_list|)
expr_stmt|;
block|}
comment|/** Post all filenames provided in args    * @param args array of file names    * @param startIndexInArgs offset to start    * @param out output stream to post data to    * @param type default content-type to use when posting (may be overridden in auto mode)    * @return number of files posted    * */
DECL|method|postFiles
specifier|public
name|int
name|postFiles
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|int
name|startIndexInArgs
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|reset
argument_list|()
expr_stmt|;
name|int
name|filesPosted
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|startIndexInArgs
init|;
name|j
operator|<
name|args
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|File
name|srcFile
init|=
operator|new
name|File
argument_list|(
name|args
index|[
name|j
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcFile
operator|.
name|isDirectory
argument_list|()
operator|&&
name|srcFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|filesPosted
operator|+=
name|postDirectory
argument_list|(
name|srcFile
argument_list|,
name|out
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|srcFile
operator|.
name|isFile
argument_list|()
operator|&&
name|srcFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|filesPosted
operator|+=
name|postFiles
argument_list|(
operator|new
name|File
index|[]
block|{
name|srcFile
block|}
argument_list|,
name|out
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|File
name|parent
init|=
name|srcFile
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
name|parent
operator|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|String
name|fileGlob
init|=
name|srcFile
operator|.
name|getName
argument_list|()
decl_stmt|;
name|GlobFileFilter
name|ff
init|=
operator|new
name|GlobFileFilter
argument_list|(
name|fileGlob
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
index|[]
name|files
init|=
name|parent
operator|.
name|listFiles
argument_list|(
name|ff
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
operator|||
name|files
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|warn
argument_list|(
literal|"No files or directories matching "
operator|+
name|srcFile
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|filesPosted
operator|+=
name|postFiles
argument_list|(
name|parent
operator|.
name|listFiles
argument_list|(
name|ff
argument_list|)
argument_list|,
name|out
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|filesPosted
return|;
block|}
comment|/** Post all filenames provided in args    * @param files array of Files    * @param startIndexInArgs offset to start    * @param out output stream to post data to    * @param type default content-type to use when posting (may be overridden in auto mode)    * @return number of files posted    * */
DECL|method|postFiles
specifier|public
name|int
name|postFiles
parameter_list|(
name|File
index|[]
name|files
parameter_list|,
name|int
name|startIndexInArgs
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|reset
argument_list|()
expr_stmt|;
name|int
name|filesPosted
init|=
literal|0
decl_stmt|;
for|for
control|(
name|File
name|srcFile
range|:
name|files
control|)
block|{
if|if
condition|(
name|srcFile
operator|.
name|isDirectory
argument_list|()
operator|&&
name|srcFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|filesPosted
operator|+=
name|postDirectory
argument_list|(
name|srcFile
argument_list|,
name|out
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|srcFile
operator|.
name|isFile
argument_list|()
operator|&&
name|srcFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|filesPosted
operator|+=
name|postFiles
argument_list|(
operator|new
name|File
index|[]
block|{
name|srcFile
block|}
argument_list|,
name|out
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|File
name|parent
init|=
name|srcFile
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
name|parent
operator|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|String
name|fileGlob
init|=
name|srcFile
operator|.
name|getName
argument_list|()
decl_stmt|;
name|GlobFileFilter
name|ff
init|=
operator|new
name|GlobFileFilter
argument_list|(
name|fileGlob
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
index|[]
name|fileList
init|=
name|parent
operator|.
name|listFiles
argument_list|(
name|ff
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileList
operator|==
literal|null
operator|||
name|fileList
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|warn
argument_list|(
literal|"No files or directories matching "
operator|+
name|srcFile
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|filesPosted
operator|+=
name|postFiles
argument_list|(
name|fileList
argument_list|,
name|out
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|filesPosted
return|;
block|}
comment|/**    * Posts a whole directory    * @return number of files posted total    */
DECL|method|postDirectory
specifier|private
name|int
name|postDirectory
parameter_list|(
name|File
name|dir
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|dir
operator|.
name|isHidden
argument_list|()
operator|&&
operator|!
name|dir
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
condition|)
return|return
operator|(
literal|0
operator|)
return|;
name|info
argument_list|(
literal|"Indexing directory "
operator|+
name|dir
operator|.
name|getPath
argument_list|()
operator|+
literal|" ("
operator|+
name|dir
operator|.
name|listFiles
argument_list|(
name|globFileFilter
argument_list|)
operator|.
name|length
operator|+
literal|" files, depth="
operator|+
name|currentDepth
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|int
name|posted
init|=
literal|0
decl_stmt|;
name|posted
operator|+=
name|postFiles
argument_list|(
name|dir
operator|.
name|listFiles
argument_list|(
name|globFileFilter
argument_list|)
argument_list|,
name|out
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|recursive
operator|>
name|currentDepth
condition|)
block|{
for|for
control|(
name|File
name|d
range|:
name|dir
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|currentDepth
operator|++
expr_stmt|;
name|posted
operator|+=
name|postDirectory
argument_list|(
name|d
argument_list|,
name|out
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|currentDepth
operator|--
expr_stmt|;
block|}
block|}
block|}
return|return
name|posted
return|;
block|}
comment|/**    * Posts a list of file names    * @return number of files posted    */
DECL|method|postFiles
name|int
name|postFiles
parameter_list|(
name|File
index|[]
name|files
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|int
name|filesPosted
init|=
literal|0
decl_stmt|;
for|for
control|(
name|File
name|srcFile
range|:
name|files
control|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|srcFile
operator|.
name|isFile
argument_list|()
operator|||
name|srcFile
operator|.
name|isHidden
argument_list|()
condition|)
continue|continue;
name|postFile
argument_list|(
name|srcFile
argument_list|,
name|out
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|delay
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|filesPosted
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|filesPosted
return|;
block|}
comment|/**    * This method takes as input a list of start URL strings for crawling,    * adds each one to a backlog and then starts crawling    * @param args the raw input args from main()    * @param startIndexInArgs offset for where to start    * @param out outputStream to write results to    * @return the number of web pages posted    */
DECL|method|postWebPages
specifier|public
name|int
name|postWebPages
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|int
name|startIndexInArgs
parameter_list|,
name|OutputStream
name|out
parameter_list|)
block|{
name|reset
argument_list|()
expr_stmt|;
name|LinkedHashSet
argument_list|<
name|URL
argument_list|>
name|s
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|startIndexInArgs
init|;
name|j
operator|<
name|args
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
try|try
block|{
name|URL
name|u
init|=
operator|new
name|URL
argument_list|(
name|normalizeUrlEnding
argument_list|(
name|args
index|[
name|j
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|add
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|warn
argument_list|(
literal|"Skipping malformed input URL: "
operator|+
name|args
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add URLs to level 0 of the backlog and start recursive crawling
name|backlog
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|webCrawl
argument_list|(
literal|0
argument_list|,
name|out
argument_list|)
return|;
block|}
comment|/**    * Normalizes a URL string by removing anchor part and trailing slash    * @return the normalized URL string    */
DECL|method|normalizeUrlEnding
specifier|protected
specifier|static
name|String
name|normalizeUrlEnding
parameter_list|(
name|String
name|link
parameter_list|)
block|{
if|if
condition|(
name|link
operator|.
name|indexOf
argument_list|(
literal|"#"
argument_list|)
operator|>
operator|-
literal|1
condition|)
name|link
operator|=
name|link
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|link
operator|.
name|indexOf
argument_list|(
literal|"#"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|link
operator|.
name|endsWith
argument_list|(
literal|"?"
argument_list|)
condition|)
name|link
operator|=
name|link
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|link
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|link
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|link
operator|=
name|link
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|link
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|link
return|;
block|}
comment|/**    * A very simple crawler, pulling URLs to fetch from a backlog and then    * recurses N levels deep if recursive&gt;0. Links are parsed from HTML    * through first getting an XHTML version using SolrCell with extractOnly,    * and followed if they are local. The crawler pauses for a default delay    * of 10 seconds between each fetch, this can be configured in the delay    * variable. This is only meant for test purposes, as it does not respect    * robots or anything else fancy :)    * @param level which level to crawl    * @param out output stream to write to    * @return number of pages crawled on this level and below    */
DECL|method|webCrawl
specifier|protected
name|int
name|webCrawl
parameter_list|(
name|int
name|level
parameter_list|,
name|OutputStream
name|out
parameter_list|)
block|{
name|int
name|numPages
init|=
literal|0
decl_stmt|;
name|LinkedHashSet
argument_list|<
name|URL
argument_list|>
name|stack
init|=
name|backlog
operator|.
name|get
argument_list|(
name|level
argument_list|)
decl_stmt|;
name|int
name|rawStackSize
init|=
name|stack
operator|.
name|size
argument_list|()
decl_stmt|;
name|stack
operator|.
name|removeAll
argument_list|(
name|visited
argument_list|)
expr_stmt|;
name|int
name|stackSize
init|=
name|stack
operator|.
name|size
argument_list|()
decl_stmt|;
name|LinkedHashSet
argument_list|<
name|URL
argument_list|>
name|subStack
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|info
argument_list|(
literal|"Entering crawl at level "
operator|+
name|level
operator|+
literal|" ("
operator|+
name|rawStackSize
operator|+
literal|" links total, "
operator|+
name|stackSize
operator|+
literal|" new)"
argument_list|)
expr_stmt|;
for|for
control|(
name|URL
name|u
range|:
name|stack
control|)
block|{
try|try
block|{
name|visited
operator|.
name|add
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|PageFetcherResult
name|result
init|=
name|pageFetcher
operator|.
name|readPageFromUrl
argument_list|(
name|u
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|httpStatus
operator|==
literal|200
condition|)
block|{
name|u
operator|=
operator|(
name|result
operator|.
name|redirectUrl
operator|!=
literal|null
operator|)
condition|?
name|result
operator|.
name|redirectUrl
else|:
name|u
expr_stmt|;
name|URL
name|postUrl
init|=
operator|new
name|URL
argument_list|(
name|appendParam
argument_list|(
name|solrUrl
operator|.
name|toString
argument_list|()
argument_list|,
literal|"literal.id="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|u
operator|.
name|toString
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
operator|+
literal|"&literal.url="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|u
operator|.
name|toString
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
name|postData
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|result
operator|.
name|content
operator|.
name|array
argument_list|()
argument_list|,
name|result
operator|.
name|content
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|result
operator|.
name|content
operator|.
name|limit
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|out
argument_list|,
name|result
operator|.
name|contentType
argument_list|,
name|postUrl
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|info
argument_list|(
literal|"POSTed web resource "
operator|+
name|u
operator|+
literal|" (depth: "
operator|+
name|level
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|delay
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|numPages
operator|++
expr_stmt|;
comment|// Pull links from HTML pages only
if|if
condition|(
name|recursive
operator|>
name|level
operator|&&
name|result
operator|.
name|contentType
operator|.
name|equals
argument_list|(
literal|"text/html"
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|URL
argument_list|>
name|children
init|=
name|pageFetcher
operator|.
name|getLinksFromWebPage
argument_list|(
name|u
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|result
operator|.
name|content
operator|.
name|array
argument_list|()
argument_list|,
name|result
operator|.
name|content
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|result
operator|.
name|content
operator|.
name|limit
argument_list|()
argument_list|)
argument_list|,
name|result
operator|.
name|contentType
argument_list|,
name|postUrl
argument_list|)
decl_stmt|;
name|subStack
operator|.
name|addAll
argument_list|(
name|children
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|warn
argument_list|(
literal|"An error occurred while posting "
operator|+
name|u
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|warn
argument_list|(
literal|"The URL "
operator|+
name|u
operator|+
literal|" returned a HTTP result status of "
operator|+
name|result
operator|.
name|httpStatus
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|warn
argument_list|(
literal|"Caught exception when trying to open connection to "
operator|+
name|u
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|subStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|backlog
operator|.
name|add
argument_list|(
name|subStack
argument_list|)
expr_stmt|;
name|numPages
operator|+=
name|webCrawl
argument_list|(
name|level
operator|+
literal|1
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
return|return
name|numPages
return|;
block|}
DECL|class|BAOS
specifier|public
specifier|static
class|class
name|BAOS
extends|extends
name|ByteArrayOutputStream
block|{
DECL|method|getByteBuffer
specifier|public
name|ByteBuffer
name|getByteBuffer
parameter_list|()
block|{
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|super
operator|.
name|buf
argument_list|,
literal|0
argument_list|,
name|super
operator|.
name|count
argument_list|)
return|;
block|}
block|}
DECL|method|inputStreamToByteArray
specifier|public
specifier|static
name|ByteBuffer
name|inputStreamToByteArray
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|inputStreamToByteArray
argument_list|(
name|is
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
comment|/**    * Reads an input stream into a byte array    *    * @param is the input stream    * @return the byte array    * @throws IOException If there is a low-level I/O error.    */
DECL|method|inputStreamToByteArray
specifier|public
specifier|static
name|ByteBuffer
name|inputStreamToByteArray
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|long
name|maxSize
parameter_list|)
throws|throws
name|IOException
block|{
name|BAOS
name|bos
init|=
operator|new
name|BAOS
argument_list|()
decl_stmt|;
name|long
name|sz
init|=
literal|0
decl_stmt|;
name|int
name|next
init|=
name|is
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|>
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|++
name|sz
operator|>
name|maxSize
condition|)
throw|throw
operator|new
name|BufferOverflowException
argument_list|()
throw|;
name|bos
operator|.
name|write
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|next
operator|=
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|bos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|bos
operator|.
name|getByteBuffer
argument_list|()
return|;
block|}
comment|/**    * Computes the full URL based on a base url and a possibly relative link found    * in the href param of an HTML anchor.    * @param baseUrl the base url from where the link was found    * @param link the absolute or relative link    * @return the string version of the full URL    */
DECL|method|computeFullUrl
specifier|protected
name|String
name|computeFullUrl
parameter_list|(
name|URL
name|baseUrl
parameter_list|,
name|String
name|link
parameter_list|)
block|{
if|if
condition|(
name|link
operator|==
literal|null
operator|||
name|link
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|link
operator|.
name|startsWith
argument_list|(
literal|"http"
argument_list|)
condition|)
block|{
if|if
condition|(
name|link
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|link
operator|=
name|baseUrl
operator|.
name|getProtocol
argument_list|()
operator|+
literal|"://"
operator|+
name|baseUrl
operator|.
name|getAuthority
argument_list|()
operator|+
name|link
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|link
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
comment|// Skip non-relative URLs
block|}
name|String
name|path
init|=
name|baseUrl
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|int
name|sep
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|file
init|=
name|path
operator|.
name|substring
argument_list|(
name|sep
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
operator|||
name|file
operator|.
name|contains
argument_list|(
literal|"?"
argument_list|)
condition|)
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sep
argument_list|)
expr_stmt|;
block|}
name|link
operator|=
name|baseUrl
operator|.
name|getProtocol
argument_list|()
operator|+
literal|"://"
operator|+
name|baseUrl
operator|.
name|getAuthority
argument_list|()
operator|+
name|path
operator|+
literal|"/"
operator|+
name|link
expr_stmt|;
block|}
block|}
name|link
operator|=
name|normalizeUrlEnding
argument_list|(
name|link
argument_list|)
expr_stmt|;
name|String
name|l
init|=
name|link
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
comment|// Simple brute force skip images
if|if
condition|(
name|l
operator|.
name|endsWith
argument_list|(
literal|".jpg"
argument_list|)
operator|||
name|l
operator|.
name|endsWith
argument_list|(
literal|".jpeg"
argument_list|)
operator|||
name|l
operator|.
name|endsWith
argument_list|(
literal|".png"
argument_list|)
operator|||
name|l
operator|.
name|endsWith
argument_list|(
literal|".gif"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
comment|// Skip images
block|}
return|return
name|link
return|;
block|}
comment|/**    * Uses the mime-type map to reverse lookup whether the file ending for our type    * is supported by the fileTypes option    * @param type what content-type to lookup    * @return true if this is a supported content type    */
DECL|method|typeSupported
specifier|protected
name|boolean
name|typeSupported
parameter_list|(
name|String
name|type
parameter_list|)
block|{
for|for
control|(
name|String
name|key
range|:
name|mimeMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|mimeMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|fileTypes
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Tests if a string is either "true", "on", "yes" or "1"    * @param property the string to test    * @return true if "on"    */
DECL|method|isOn
specifier|protected
specifier|static
name|boolean
name|isOn
parameter_list|(
name|String
name|property
parameter_list|)
block|{
return|return
operator|(
literal|"true,on,yes,1"
operator|.
name|indexOf
argument_list|(
name|property
argument_list|)
operator|>
operator|-
literal|1
operator|)
return|;
block|}
DECL|method|warn
specifier|static
name|void
name|warn
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"SimplePostTool: WARNING: "
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|info
specifier|static
name|void
name|info
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|fatal
specifier|static
name|void
name|fatal
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"SimplePostTool: FATAL: "
operator|+
name|msg
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Does a simple commit operation     */
DECL|method|commit
specifier|public
name|void
name|commit
parameter_list|()
block|{
name|info
argument_list|(
literal|"COMMITting Solr index changes to "
operator|+
name|solrUrl
operator|+
literal|"..."
argument_list|)
expr_stmt|;
name|doGet
argument_list|(
name|appendParam
argument_list|(
name|solrUrl
operator|.
name|toString
argument_list|()
argument_list|,
literal|"commit=true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Does a simple optimize operation     */
DECL|method|optimize
specifier|public
name|void
name|optimize
parameter_list|()
block|{
name|info
argument_list|(
literal|"Performing an OPTIMIZE to "
operator|+
name|solrUrl
operator|+
literal|"..."
argument_list|)
expr_stmt|;
name|doGet
argument_list|(
name|appendParam
argument_list|(
name|solrUrl
operator|.
name|toString
argument_list|()
argument_list|,
literal|"optimize=true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Appends a URL query parameter to a URL     * @param url the original URL    * @param param the parameter(s) to append, separated by "&amp;"    * @return the string version of the resulting URL    */
DECL|method|appendParam
specifier|public
specifier|static
name|String
name|appendParam
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|param
parameter_list|)
block|{
name|String
index|[]
name|pa
init|=
name|param
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|pa
control|)
block|{
if|if
condition|(
name|p
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|String
index|[]
name|kv
init|=
name|p
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|kv
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|url
operator|=
name|url
operator|+
operator|(
name|url
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
operator|>
literal|0
condition|?
literal|"&"
else|:
literal|"?"
operator|)
operator|+
name|kv
index|[
literal|0
index|]
operator|+
literal|"="
operator|+
name|kv
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|warn
argument_list|(
literal|"Skipping param "
operator|+
name|p
operator|+
literal|" which is not on form key=value"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|url
return|;
block|}
comment|/**    * Opens the file and posts its contents to the solrUrl,    * writes to response to output.     */
DECL|method|postFile
specifier|public
name|void
name|postFile
parameter_list|(
name|File
name|file
parameter_list|,
name|OutputStream
name|output
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|URL
name|url
init|=
name|solrUrl
decl_stmt|;
name|String
name|suffix
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|auto
condition|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|guessType
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"application/xml"
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
literal|"text/csv"
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
literal|"application/json"
argument_list|)
condition|)
block|{
comment|// Default handler
block|}
else|else
block|{
comment|// SolrCell
name|suffix
operator|=
literal|"/extract"
expr_stmt|;
name|String
name|urlStr
init|=
name|appendUrlPath
argument_list|(
name|solrUrl
argument_list|,
name|suffix
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|urlStr
operator|.
name|indexOf
argument_list|(
literal|"resource.name"
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|urlStr
operator|=
name|appendParam
argument_list|(
name|urlStr
argument_list|,
literal|"resource.name="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|urlStr
operator|.
name|indexOf
argument_list|(
literal|"literal.id"
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|urlStr
operator|=
name|appendParam
argument_list|(
name|urlStr
argument_list|,
literal|"literal.id="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|urlStr
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|warn
argument_list|(
literal|"Skipping "
operator|+
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|". Unsupported file type for auto mode."
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
name|type
operator|=
name|DEFAULT_CONTENT_TYPE
expr_stmt|;
block|}
name|info
argument_list|(
literal|"POSTing file "
operator|+
name|file
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|auto
condition|?
literal|" ("
operator|+
name|type
operator|+
literal|")"
else|:
literal|""
operator|)
operator|+
literal|" to [base]"
operator|+
name|suffix
argument_list|)
expr_stmt|;
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|postData
argument_list|(
name|is
argument_list|,
operator|(
name|int
operator|)
name|file
operator|.
name|length
argument_list|()
argument_list|,
name|output
argument_list|,
name|type
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|warn
argument_list|(
literal|"Can't open/read file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"IOException while closing file: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Appends to the path of the URL    * @param url the URL    * @param append the path to append    * @return the final URL version     */
DECL|method|appendUrlPath
specifier|protected
specifier|static
name|URL
name|appendUrlPath
parameter_list|(
name|URL
name|url
parameter_list|,
name|String
name|append
parameter_list|)
throws|throws
name|MalformedURLException
block|{
return|return
operator|new
name|URL
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
operator|+
literal|"://"
operator|+
name|url
operator|.
name|getAuthority
argument_list|()
operator|+
name|url
operator|.
name|getPath
argument_list|()
operator|+
name|append
operator|+
operator|(
name|url
operator|.
name|getQuery
argument_list|()
operator|!=
literal|null
condition|?
literal|"?"
operator|+
name|url
operator|.
name|getQuery
argument_list|()
else|:
literal|""
operator|)
argument_list|)
return|;
block|}
comment|/**    * Guesses the type of a file, based on file name suffix    * @param file the file    * @return the content-type guessed    */
DECL|method|guessType
specifier|protected
specifier|static
name|String
name|guessType
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|suffix
init|=
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|mimeMap
operator|.
name|get
argument_list|(
name|suffix
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Performs a simple get on the given URL    */
DECL|method|doGet
specifier|public
specifier|static
name|void
name|doGet
parameter_list|(
name|String
name|url
parameter_list|)
block|{
try|try
block|{
name|doGet
argument_list|(
operator|new
name|URL
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|warn
argument_list|(
literal|"The specified URL "
operator|+
name|url
operator|+
literal|" is not a valid URL. Please check"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Performs a simple get on the given URL    */
DECL|method|doGet
specifier|public
specifier|static
name|void
name|doGet
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|mockMode
condition|)
return|return;
name|HttpURLConnection
name|urlc
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|.
name|getUserInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|encoding
init|=
name|DatatypeConverter
operator|.
name|printBase64Binary
argument_list|(
name|url
operator|.
name|getUserInfo
argument_list|()
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
argument_list|)
decl_stmt|;
name|urlc
operator|.
name|setRequestProperty
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Basic "
operator|+
name|encoding
argument_list|)
expr_stmt|;
block|}
name|urlc
operator|.
name|connect
argument_list|()
expr_stmt|;
name|checkResponseCode
argument_list|(
name|urlc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|warn
argument_list|(
literal|"An error occurred posting data to "
operator|+
name|url
operator|+
literal|". Please check that Solr is running."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Reads data from the data stream and posts it to solr,    * writes to the response to output    * @return true if success    */
DECL|method|postData
specifier|public
name|boolean
name|postData
parameter_list|(
name|InputStream
name|data
parameter_list|,
name|Integer
name|length
parameter_list|,
name|OutputStream
name|output
parameter_list|,
name|String
name|type
parameter_list|,
name|URL
name|url
parameter_list|)
block|{
if|if
condition|(
name|mockMode
condition|)
return|return
literal|true
return|;
name|boolean
name|success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
name|type
operator|=
name|DEFAULT_CONTENT_TYPE
expr_stmt|;
name|HttpURLConnection
name|urlc
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|urlc
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
try|try
block|{
name|urlc
operator|.
name|setRequestMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProtocolException
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Shouldn't happen: HttpURLConnection doesn't support POST??"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|urlc
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|urlc
operator|.
name|setDoInput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|urlc
operator|.
name|setUseCaches
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|urlc
operator|.
name|setAllowUserInteraction
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|urlc
operator|.
name|setRequestProperty
argument_list|(
literal|"Content-type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|.
name|getUserInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|encoding
init|=
name|DatatypeConverter
operator|.
name|printBase64Binary
argument_list|(
name|url
operator|.
name|getUserInfo
argument_list|()
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
argument_list|)
decl_stmt|;
name|urlc
operator|.
name|setRequestProperty
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Basic "
operator|+
name|encoding
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|length
condition|)
name|urlc
operator|.
name|setFixedLengthStreamingMode
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|urlc
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Connection error (is Solr running at "
operator|+
name|solrUrl
operator|+
literal|" ?): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
block|}
try|try
init|(
specifier|final
name|OutputStream
name|out
init|=
name|urlc
operator|.
name|getOutputStream
argument_list|()
init|)
block|{
name|pipe
argument_list|(
name|data
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"IOException while posting data: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
block|}
try|try
block|{
name|success
operator|&=
name|checkResponseCode
argument_list|(
name|urlc
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|InputStream
name|in
init|=
name|urlc
operator|.
name|getInputStream
argument_list|()
init|)
block|{
name|pipe
argument_list|(
name|in
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|warn
argument_list|(
literal|"IOException while reading response: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|urlc
operator|!=
literal|null
condition|)
name|urlc
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
DECL|method|checkResponseCode
specifier|private
specifier|static
name|boolean
name|checkResponseCode
parameter_list|(
name|HttpURLConnection
name|urlc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|urlc
operator|.
name|getResponseCode
argument_list|()
operator|>=
literal|400
condition|)
block|{
name|warn
argument_list|(
literal|"Solr returned an error #"
operator|+
name|urlc
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|" ("
operator|+
name|urlc
operator|.
name|getResponseMessage
argument_list|()
operator|+
literal|") for url: "
operator|+
name|urlc
operator|.
name|getURL
argument_list|()
argument_list|)
expr_stmt|;
name|Charset
name|charset
init|=
name|StandardCharsets
operator|.
name|ISO_8859_1
decl_stmt|;
specifier|final
name|String
name|contentType
init|=
name|urlc
operator|.
name|getContentType
argument_list|()
decl_stmt|;
comment|// code cloned from ContentStreamBase, but post.jar should be standalone!
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
name|int
name|idx
init|=
name|contentType
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"charset="
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|charset
operator|=
name|Charset
operator|.
name|forName
argument_list|(
name|contentType
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|"charset="
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Print the response returned by Solr
try|try
init|(
name|InputStream
name|errStream
init|=
name|urlc
operator|.
name|getErrorStream
argument_list|()
init|)
block|{
if|if
condition|(
name|errStream
operator|!=
literal|null
condition|)
block|{
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|errStream
argument_list|,
name|charset
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|response
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Response: "
argument_list|)
decl_stmt|;
name|int
name|ch
decl_stmt|;
while|while
condition|(
operator|(
name|ch
operator|=
name|br
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|response
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
name|warn
argument_list|(
name|response
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Converts a string to an input stream     * @param s the string    * @return the input stream    */
DECL|method|stringToStream
specifier|public
specifier|static
name|InputStream
name|stringToStream
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|s
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Pipes everything from the source to the dest.  If dest is null,     * then everything is read from source and thrown away.    */
DECL|method|pipe
specifier|private
specifier|static
name|void
name|pipe
parameter_list|(
name|InputStream
name|source
parameter_list|,
name|OutputStream
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|read
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|source
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|dest
condition|)
name|dest
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|dest
condition|)
name|dest
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|getFileFilterFromFileTypes
specifier|public
name|GlobFileFilter
name|getFileFilterFromFileTypes
parameter_list|(
name|String
name|fileTypes
parameter_list|)
block|{
name|String
name|glob
decl_stmt|;
if|if
condition|(
name|fileTypes
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
name|glob
operator|=
literal|".*"
expr_stmt|;
else|else
name|glob
operator|=
literal|"^.*\\.("
operator|+
name|fileTypes
operator|.
name|replace
argument_list|(
literal|","
argument_list|,
literal|"|"
argument_list|)
operator|+
literal|")$"
expr_stmt|;
return|return
operator|new
name|GlobFileFilter
argument_list|(
name|glob
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|//
comment|// Utility methods for XPath handing
comment|//
comment|/**    * Gets all nodes matching an XPath    */
DECL|method|getNodesFromXP
specifier|public
specifier|static
name|NodeList
name|getNodesFromXP
parameter_list|(
name|Node
name|n
parameter_list|,
name|String
name|xpath
parameter_list|)
throws|throws
name|XPathExpressionException
block|{
name|XPathFactory
name|factory
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|XPath
name|xp
init|=
name|factory
operator|.
name|newXPath
argument_list|()
decl_stmt|;
name|XPathExpression
name|expr
init|=
name|xp
operator|.
name|compile
argument_list|(
name|xpath
argument_list|)
decl_stmt|;
return|return
operator|(
name|NodeList
operator|)
name|expr
operator|.
name|evaluate
argument_list|(
name|n
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
return|;
block|}
comment|/**    * Gets the string content of the matching an XPath    * @param n the node (or doc)    * @param xpath the xpath string    * @param concatAll if true, text from all matching nodes will be concatenated, else only the first returned    */
DECL|method|getXP
specifier|public
specifier|static
name|String
name|getXP
parameter_list|(
name|Node
name|n
parameter_list|,
name|String
name|xpath
parameter_list|,
name|boolean
name|concatAll
parameter_list|)
throws|throws
name|XPathExpressionException
block|{
name|NodeList
name|nodes
init|=
name|getNodesFromXP
argument_list|(
name|n
argument_list|,
name|xpath
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|getNodeValue
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|concatAll
condition|)
break|break;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
else|else
return|return
literal|""
return|;
block|}
comment|/**    * Takes a string as input and returns a DOM     */
DECL|method|makeDom
specifier|public
specifier|static
name|Document
name|makeDom
parameter_list|(
name|byte
index|[]
name|in
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|ParserConfigurationException
block|{
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Document
name|dom
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
return|return
name|dom
return|;
block|}
comment|/**    * Inner class to filter files based on glob wildcards    */
DECL|class|GlobFileFilter
class|class
name|GlobFileFilter
implements|implements
name|FileFilter
block|{
DECL|field|_pattern
specifier|private
name|String
name|_pattern
decl_stmt|;
DECL|field|p
specifier|private
name|Pattern
name|p
decl_stmt|;
DECL|method|GlobFileFilter
specifier|public
name|GlobFileFilter
parameter_list|(
name|String
name|pattern
parameter_list|,
name|boolean
name|isRegex
parameter_list|)
block|{
name|_pattern
operator|=
name|pattern
expr_stmt|;
if|if
condition|(
operator|!
name|isRegex
condition|)
block|{
name|_pattern
operator|=
name|_pattern
operator|.
name|replace
argument_list|(
literal|"^"
argument_list|,
literal|"\\^"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"$"
argument_list|,
literal|"\\$"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"\\."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"("
argument_list|,
literal|"\\("
argument_list|)
operator|.
name|replace
argument_list|(
literal|")"
argument_list|,
literal|"\\)"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"+"
argument_list|,
literal|"\\+"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"*"
argument_list|,
literal|".*"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"?"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
name|_pattern
operator|=
literal|"^"
operator|+
name|_pattern
operator|+
literal|"$"
expr_stmt|;
block|}
try|try
block|{
name|p
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|_pattern
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Invalid type list "
operator|+
name|pattern
operator|+
literal|". "
operator|+
name|e
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|file
parameter_list|)
block|{
return|return
name|p
operator|.
name|matcher
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|find
argument_list|()
return|;
block|}
block|}
comment|//
comment|// Simple crawler class which can fetch a page and check for robots.txt
comment|//
DECL|class|PageFetcher
class|class
name|PageFetcher
block|{
DECL|field|robotsCache
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|robotsCache
decl_stmt|;
DECL|field|DISALLOW
specifier|final
name|String
name|DISALLOW
init|=
literal|"Disallow:"
decl_stmt|;
DECL|method|PageFetcher
specifier|public
name|PageFetcher
parameter_list|()
block|{
name|robotsCache
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|readPageFromUrl
specifier|public
name|PageFetcherResult
name|readPageFromUrl
parameter_list|(
name|URL
name|u
parameter_list|)
block|{
name|PageFetcherResult
name|res
init|=
operator|new
name|PageFetcherResult
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isDisallowedByRobots
argument_list|(
name|u
argument_list|)
condition|)
block|{
name|warn
argument_list|(
literal|"The URL "
operator|+
name|u
operator|+
literal|" is disallowed by robots.txt and will not be crawled."
argument_list|)
expr_stmt|;
name|res
operator|.
name|httpStatus
operator|=
literal|403
expr_stmt|;
name|visited
operator|.
name|add
argument_list|(
name|u
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
name|res
operator|.
name|httpStatus
operator|=
literal|404
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|u
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
literal|"User-Agent"
argument_list|,
literal|"SimplePostTool-crawler/"
operator|+
name|VERSION_OF_THIS_TOOL
operator|+
literal|" (http://lucene.apache.org/solr/)"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
literal|"Accept-Encoding"
argument_list|,
literal|"gzip, deflate"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|res
operator|.
name|httpStatus
operator|=
name|conn
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|normalizeUrlEnding
argument_list|(
name|conn
operator|.
name|getURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|normalizeUrlEnding
argument_list|(
name|u
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|info
argument_list|(
literal|"The URL "
operator|+
name|u
operator|+
literal|" caused a redirect to "
operator|+
name|conn
operator|.
name|getURL
argument_list|()
argument_list|)
expr_stmt|;
name|u
operator|=
name|conn
operator|.
name|getURL
argument_list|()
expr_stmt|;
name|res
operator|.
name|redirectUrl
operator|=
name|u
expr_stmt|;
name|visited
operator|.
name|add
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|res
operator|.
name|httpStatus
operator|==
literal|200
condition|)
block|{
comment|// Raw content type of form "text/html; encoding=utf-8"
name|String
name|rawContentType
init|=
name|conn
operator|.
name|getContentType
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|rawContentType
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|typeSupported
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|String
name|encoding
init|=
name|conn
operator|.
name|getContentEncoding
argument_list|()
decl_stmt|;
name|InputStream
name|is
decl_stmt|;
if|if
condition|(
name|encoding
operator|!=
literal|null
operator|&&
name|encoding
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"gzip"
argument_list|)
condition|)
block|{
name|is
operator|=
operator|new
name|GZIPInputStream
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encoding
operator|!=
literal|null
operator|&&
name|encoding
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"deflate"
argument_list|)
condition|)
block|{
name|is
operator|=
operator|new
name|InflaterInputStream
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|,
operator|new
name|Inflater
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|is
operator|=
name|conn
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
block|}
comment|// Read into memory, so that we later can pull links from the page without re-fetching
name|res
operator|.
name|content
operator|=
name|inputStreamToByteArray
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|warn
argument_list|(
literal|"Skipping URL with unsupported type "
operator|+
name|type
argument_list|)
expr_stmt|;
name|res
operator|.
name|httpStatus
operator|=
literal|415
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|warn
argument_list|(
literal|"IOException when reading page from url "
operator|+
name|u
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
DECL|method|isDisallowedByRobots
specifier|public
name|boolean
name|isDisallowedByRobots
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
name|String
name|host
init|=
name|url
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|String
name|strRobot
init|=
name|url
operator|.
name|getProtocol
argument_list|()
operator|+
literal|"://"
operator|+
name|host
operator|+
literal|"/robots.txt"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|disallows
init|=
name|robotsCache
operator|.
name|get
argument_list|(
name|host
argument_list|)
decl_stmt|;
if|if
condition|(
name|disallows
operator|==
literal|null
condition|)
block|{
name|disallows
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|URL
name|urlRobot
decl_stmt|;
try|try
block|{
name|urlRobot
operator|=
operator|new
name|URL
argument_list|(
name|strRobot
argument_list|)
expr_stmt|;
name|disallows
operator|=
name|parseRobotsTxt
argument_list|(
name|urlRobot
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// We cannot trust this robots URL, should not happen
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// There is no robots.txt, will cache an empty disallow list
block|}
block|}
name|robotsCache
operator|.
name|put
argument_list|(
name|host
argument_list|,
name|disallows
argument_list|)
expr_stmt|;
name|String
name|strURL
init|=
name|url
operator|.
name|getFile
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|disallows
control|)
block|{
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
operator|||
name|strURL
operator|.
name|indexOf
argument_list|(
name|path
argument_list|)
operator|==
literal|0
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Very simple robots.txt parser which obeys all Disallow lines regardless      * of user agent or whether there are valid Allow: lines.      * @param is Input stream of the robots.txt file      * @return a list of disallow paths      * @throws IOException if problems reading the stream      */
DECL|method|parseRobotsTxt
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|parseRobotsTxt
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|disallows
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|l
decl_stmt|;
while|while
condition|(
operator|(
name|l
operator|=
name|r
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|arr
init|=
name|l
operator|.
name|split
argument_list|(
literal|"#"
argument_list|)
decl_stmt|;
if|if
condition|(
name|arr
operator|.
name|length
operator|==
literal|0
condition|)
continue|continue;
name|l
operator|=
name|arr
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|l
operator|.
name|startsWith
argument_list|(
name|DISALLOW
argument_list|)
condition|)
block|{
name|l
operator|=
name|l
operator|.
name|substring
argument_list|(
name|DISALLOW
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|l
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|disallows
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
block|}
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|disallows
return|;
block|}
comment|/**      * Finds links on a web page, using /extract?extractOnly=true      * @param u the URL of the web page      * @param is the input stream of the page      * @param type the content-type      * @param postUrl the URL (typically /solr/extract) in order to pull out links      * @return a set of URLs parsed from the page      */
DECL|method|getLinksFromWebPage
specifier|protected
name|Set
argument_list|<
name|URL
argument_list|>
name|getLinksFromWebPage
parameter_list|(
name|URL
name|u
parameter_list|,
name|InputStream
name|is
parameter_list|,
name|String
name|type
parameter_list|,
name|URL
name|postUrl
parameter_list|)
block|{
name|Set
argument_list|<
name|URL
argument_list|>
name|l
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|URL
name|extractUrl
init|=
operator|new
name|URL
argument_list|(
name|appendParam
argument_list|(
name|postUrl
operator|.
name|toString
argument_list|()
argument_list|,
literal|"extractOnly=true"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
name|postData
argument_list|(
name|is
argument_list|,
literal|null
argument_list|,
name|os
argument_list|,
name|type
argument_list|,
name|extractUrl
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|Document
name|d
init|=
name|makeDom
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|innerXml
init|=
name|getXP
argument_list|(
name|d
argument_list|,
literal|"/response/str/text()[1]"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|d
operator|=
name|makeDom
argument_list|(
name|innerXml
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|NodeList
name|links
init|=
name|getNodesFromXP
argument_list|(
name|d
argument_list|,
literal|"/html/body//a/@href"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|links
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|link
init|=
name|links
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
name|link
operator|=
name|computeFullUrl
argument_list|(
name|u
argument_list|,
name|link
argument_list|)
expr_stmt|;
if|if
condition|(
name|link
operator|==
literal|null
condition|)
continue|continue;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|link
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|.
name|getAuthority
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|url
operator|.
name|getAuthority
argument_list|()
operator|.
name|equals
argument_list|(
name|u
operator|.
name|getAuthority
argument_list|()
argument_list|)
condition|)
continue|continue;
name|l
operator|.
name|add
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|warn
argument_list|(
literal|"Malformed URL "
operator|+
name|url
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|warn
argument_list|(
literal|"IOException opening URL "
operator|+
name|url
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|l
return|;
block|}
block|}
comment|/**    * Utility class to hold the result form a page fetch    */
DECL|class|PageFetcherResult
specifier|public
class|class
name|PageFetcherResult
block|{
DECL|field|httpStatus
name|int
name|httpStatus
init|=
literal|200
decl_stmt|;
DECL|field|contentType
name|String
name|contentType
init|=
literal|"text/html"
decl_stmt|;
DECL|field|redirectUrl
name|URL
name|redirectUrl
init|=
literal|null
decl_stmt|;
DECL|field|content
name|ByteBuffer
name|content
decl_stmt|;
block|}
block|}
end_class
end_unit
