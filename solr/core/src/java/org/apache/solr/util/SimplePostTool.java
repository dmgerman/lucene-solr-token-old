begin_unit
begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ProtocolException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import
begin_comment
comment|/**  * A simple utility class for posting raw updates to a Solr server,   * has a main method so it can be run on the command line.  */
end_comment
begin_class
DECL|class|SimplePostTool
specifier|public
class|class
name|SimplePostTool
block|{
DECL|field|DEFAULT_POST_URL
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_POST_URL
init|=
literal|"http://localhost:8983/solr/update"
decl_stmt|;
DECL|field|VERSION_OF_THIS_TOOL
specifier|public
specifier|static
specifier|final
name|String
name|VERSION_OF_THIS_TOOL
init|=
literal|"1.5"
decl_stmt|;
DECL|field|DEFAULT_COMMIT
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_COMMIT
init|=
literal|"yes"
decl_stmt|;
DECL|field|DEFAULT_OPTIMIZE
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_OPTIMIZE
init|=
literal|"no"
decl_stmt|;
DECL|field|DEFAULT_OUT
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_OUT
init|=
literal|"no"
decl_stmt|;
DECL|field|DEFAULT_AUTO
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_AUTO
init|=
literal|"no"
decl_stmt|;
DECL|field|DEFAULT_RECURSIVE
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_RECURSIVE
init|=
literal|"no"
decl_stmt|;
DECL|field|DEFAULT_CONTENT_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CONTENT_TYPE
init|=
literal|"application/xml"
decl_stmt|;
DECL|field|DEFAULT_FILE_TYPES
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_FILE_TYPES
init|=
literal|"xml,json,csv,pdf,doc,docx,ppt,pptx,xls,xlsx,odt,odp,ods,ott,otp,ots,rtf,htm,html,txt,log"
decl_stmt|;
DECL|field|DATA_MODE_FILES
specifier|private
specifier|static
specifier|final
name|String
name|DATA_MODE_FILES
init|=
literal|"files"
decl_stmt|;
DECL|field|DATA_MODE_ARGS
specifier|private
specifier|static
specifier|final
name|String
name|DATA_MODE_ARGS
init|=
literal|"args"
decl_stmt|;
DECL|field|DATA_MODE_STDIN
specifier|private
specifier|static
specifier|final
name|String
name|DATA_MODE_STDIN
init|=
literal|"stdin"
decl_stmt|;
DECL|field|DEFAULT_DATA_MODE
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_DATA_MODE
init|=
name|DATA_MODE_FILES
decl_stmt|;
DECL|field|TRUE_STRINGS
specifier|private
specifier|static
specifier|final
name|String
name|TRUE_STRINGS
init|=
literal|"true,on,yes,1"
decl_stmt|;
DECL|field|auto
specifier|private
name|boolean
name|auto
init|=
literal|false
decl_stmt|;
DECL|field|recursive
specifier|private
name|boolean
name|recursive
init|=
literal|false
decl_stmt|;
DECL|field|fileTypes
specifier|private
name|String
name|fileTypes
decl_stmt|;
DECL|field|mimeMap
specifier|private
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mimeMap
decl_stmt|;
DECL|field|globFileFilter
specifier|private
name|GlobFileFilter
name|globFileFilter
decl_stmt|;
DECL|field|DATA_MODES
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|DATA_MODES
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|USAGE_STRING_SHORT
specifier|private
specifier|static
specifier|final
name|String
name|USAGE_STRING_SHORT
init|=
literal|"Usage: java [SystemProperties] -jar post.jar [-h|-] [<file|folder|arg> [<file|folder|arg>...]]"
decl_stmt|;
static|static
block|{
name|DATA_MODES
operator|.
name|add
argument_list|(
name|DATA_MODE_FILES
argument_list|)
expr_stmt|;
name|DATA_MODES
operator|.
name|add
argument_list|(
name|DATA_MODE_ARGS
argument_list|)
expr_stmt|;
name|DATA_MODES
operator|.
name|add
argument_list|(
name|DATA_MODE_STDIN
argument_list|)
expr_stmt|;
name|mimeMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"xml"
argument_list|,
literal|"text/xml"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"csv"
argument_list|,
literal|"text/csv"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"json"
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"pdf"
argument_list|,
literal|"application/pdf"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"rtf"
argument_list|,
literal|"text/rtf"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"html"
argument_list|,
literal|"text/html"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"htm"
argument_list|,
literal|"text/html"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"doc"
argument_list|,
literal|"application/msword"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"docx"
argument_list|,
literal|"application/vnd.openxmlformats-officedocument.wordprocessingml.document"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"ppt"
argument_list|,
literal|"application/vnd.ms-powerpoint"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"pptx"
argument_list|,
literal|"application/vnd.openxmlformats-officedocument.presentationml.presentation"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"xls"
argument_list|,
literal|"application/vnd.ms-excel"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"xlsx"
argument_list|,
literal|"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"odt"
argument_list|,
literal|"application/vnd.oasis.opendocument.text"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"ott"
argument_list|,
literal|"application/vnd.oasis.opendocument.text"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"odp"
argument_list|,
literal|"application/vnd.oasis.opendocument.presentation"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"otp"
argument_list|,
literal|"application/vnd.oasis.opendocument.presentation"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"ods"
argument_list|,
literal|"application/vnd.oasis.opendocument.spreadsheet"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"ots"
argument_list|,
literal|"application/vnd.oasis.opendocument.spreadsheet"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"txt"
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|mimeMap
operator|.
name|put
argument_list|(
literal|"log"
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
block|}
DECL|field|solrUrl
specifier|protected
name|URL
name|solrUrl
decl_stmt|;
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|info
argument_list|(
literal|"SimplePostTool version "
operator|+
name|VERSION_OF_THIS_TOOL
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|<
name|args
operator|.
name|length
operator|&&
operator|(
literal|"-help"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
operator|||
literal|"--help"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
operator|||
literal|"-h"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
operator|)
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
return|return;
block|}
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|type
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|params
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"params"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|URL
name|u
init|=
literal|null
decl_stmt|;
try|try
block|{
name|u
operator|=
operator|new
name|URL
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"url"
argument_list|,
name|SimplePostTool
operator|.
name|appendParam
argument_list|(
name|DEFAULT_POST_URL
argument_list|,
name|params
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"System Property 'url' is not a valid URL: "
operator|+
name|u
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SimplePostTool
name|t
init|=
operator|new
name|SimplePostTool
argument_list|(
name|u
argument_list|)
decl_stmt|;
if|if
condition|(
name|isOn
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"auto"
argument_list|,
name|DEFAULT_AUTO
argument_list|)
argument_list|)
condition|)
block|{
name|t
operator|.
name|setAuto
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isOn
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"recursive"
argument_list|,
name|DEFAULT_RECURSIVE
argument_list|)
argument_list|)
condition|)
block|{
name|t
operator|.
name|setRecursive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|mode
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"data"
argument_list|,
name|DEFAULT_DATA_MODE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|DATA_MODES
operator|.
name|contains
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|fatal
argument_list|(
literal|"System Property 'data' is not valid for this tool: "
operator|+
name|mode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isOn
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"out"
argument_list|,
name|DEFAULT_OUT
argument_list|)
argument_list|)
condition|)
block|{
name|out
operator|=
name|System
operator|.
name|out
expr_stmt|;
block|}
name|t
operator|.
name|setFileTypes
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"filetypes"
argument_list|,
name|DEFAULT_FILE_TYPES
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numFilesPosted
init|=
literal|0
decl_stmt|;
try|try
block|{
if|if
condition|(
name|DATA_MODE_FILES
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
if|if
condition|(
literal|0
operator|<
name|args
operator|.
name|length
condition|)
block|{
comment|// Skip posting files if special param "-" given
if|if
condition|(
operator|!
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|info
argument_list|(
literal|"Posting files to base url "
operator|+
name|u
operator|+
operator|(
operator|!
name|t
operator|.
name|auto
condition|?
literal|" using content-type "
operator|+
operator|(
name|type
operator|==
literal|null
condition|?
name|DEFAULT_CONTENT_TYPE
else|:
name|type
operator|)
else|:
literal|""
operator|)
operator|+
literal|".."
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|auto
condition|)
name|info
argument_list|(
literal|"Entering auto mode. File endings considered are "
operator|+
name|t
operator|.
name|getFileTypes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|recursive
condition|)
name|info
argument_list|(
literal|"Entering recursive mode"
argument_list|)
expr_stmt|;
name|numFilesPosted
operator|=
name|t
operator|.
name|postFiles
argument_list|(
name|args
argument_list|,
literal|0
argument_list|,
name|out
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|info
argument_list|(
name|numFilesPosted
operator|+
literal|" files indexed."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|usageShort
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
elseif|else
if|if
condition|(
name|DATA_MODE_ARGS
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
if|if
condition|(
literal|0
operator|<
name|args
operator|.
name|length
condition|)
block|{
name|info
argument_list|(
literal|"POSTing args to "
operator|+
name|u
operator|+
literal|".."
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|a
range|:
name|args
control|)
block|{
name|t
operator|.
name|postData
argument_list|(
name|SimplePostTool
operator|.
name|stringToStream
argument_list|(
name|a
argument_list|)
argument_list|,
literal|null
argument_list|,
name|out
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|usageShort
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
elseif|else
if|if
condition|(
name|DATA_MODE_STDIN
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|info
argument_list|(
literal|"POSTing stdin to "
operator|+
name|u
operator|+
literal|".."
argument_list|)
expr_stmt|;
name|t
operator|.
name|postData
argument_list|(
name|System
operator|.
name|in
argument_list|,
literal|null
argument_list|,
name|out
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isOn
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"commit"
argument_list|,
name|DEFAULT_COMMIT
argument_list|)
argument_list|)
condition|)
block|{
name|info
argument_list|(
literal|"COMMITting Solr index changes to "
operator|+
name|u
operator|+
literal|".."
argument_list|)
expr_stmt|;
name|t
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isOn
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"optimize"
argument_list|,
name|DEFAULT_OPTIMIZE
argument_list|)
argument_list|)
condition|)
block|{
name|info
argument_list|(
literal|"Performing an OPTIMIZE to "
operator|+
name|u
operator|+
literal|".."
argument_list|)
expr_stmt|;
name|t
operator|.
name|optimize
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fatal
argument_list|(
literal|"RuntimeException "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|usageShort
specifier|private
specifier|static
name|void
name|usageShort
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|USAGE_STRING_SHORT
operator|+
literal|"\n"
operator|+
literal|"       Please invoke with -h option for extended usage help."
argument_list|)
expr_stmt|;
block|}
DECL|method|usage
specifier|private
specifier|static
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|USAGE_STRING_SHORT
operator|+
literal|"\n\n"
operator|+
literal|"Supported System Properties and their defaults:\n"
operator|+
literal|"  -Ddata=files|args|stdin (default="
operator|+
name|DEFAULT_DATA_MODE
operator|+
literal|")\n"
operator|+
literal|"  -Dtype=<content-type> (default="
operator|+
name|DEFAULT_CONTENT_TYPE
operator|+
literal|")\n"
operator|+
literal|"  -Durl=<solr-update-url> (default="
operator|+
name|DEFAULT_POST_URL
operator|+
literal|")\n"
operator|+
literal|"  -Dauto=yes|no (default="
operator|+
name|DEFAULT_AUTO
operator|+
literal|")\n"
operator|+
literal|"  -Drecursive=yes|no (default="
operator|+
name|DEFAULT_RECURSIVE
operator|+
literal|")\n"
operator|+
literal|"  -Dfiletypes=<type>[,<type>,...] (default="
operator|+
name|DEFAULT_FILE_TYPES
operator|+
literal|")\n"
operator|+
literal|"  -Dparams=\"<key>=<value>[&<key>=<value>...]\" (values must be URL-encoded)\n"
operator|+
literal|"  -Dcommit=yes|no (default="
operator|+
name|DEFAULT_COMMIT
operator|+
literal|")\n"
operator|+
literal|"  -Doptimize=yes|no (default="
operator|+
name|DEFAULT_OPTIMIZE
operator|+
literal|")\n"
operator|+
literal|"  -Dout=yes|no (default="
operator|+
name|DEFAULT_OUT
operator|+
literal|")\n\n"
operator|+
literal|"This is a simple command line tool for POSTing raw data to a Solr\n"
operator|+
literal|"port.  Data can be read from files specified as commandline args,\n"
operator|+
literal|"as raw commandline arg strings, or via STDIN.\n"
operator|+
literal|"Examples:\n"
operator|+
literal|"  java -jar post.jar *.xml\n"
operator|+
literal|"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\n"
operator|+
literal|"  java -Ddata=stdin -jar post.jar< hd.xml\n"
operator|+
literal|"  java -Dtype=text/csv -jar post.jar *.csv\n"
operator|+
literal|"  java -Dtype=application/json -jar post.jar *.json\n"
operator|+
literal|"  java -Durl=http://localhost:8983/solr/update/extract -Dparams=literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\n"
operator|+
literal|"  java -Dauto -jar post.jar *\n"
operator|+
literal|"  java -Dauto -Drecursive -jar post.jar afolder\n"
operator|+
literal|"  java -Dauto -Dfiletypes=ppt,html -jar post.jar afolder\n"
operator|+
literal|"The options controlled by System Properties include the Solr\n"
operator|+
literal|"URL to POST to, the Content-Type of the data, whether a commit\n"
operator|+
literal|"or optimize should be executed, and whether the response should\n"
operator|+
literal|"be written to STDOUT. If auto=yes the tool will try to set type\n"
operator|+
literal|"and url automatically from file name. When posting rich documents\n"
operator|+
literal|"the file name will be propagated as \"resource.name\" and also used as \"literal.id\".\n"
operator|+
literal|"You may override these or any other request parameter through the -Dparams property.\n"
operator|+
literal|"If you want to do a commit only, use \"-\" as argument."
argument_list|)
expr_stmt|;
block|}
DECL|method|isOn
specifier|private
specifier|static
name|boolean
name|isOn
parameter_list|(
name|String
name|property
parameter_list|)
block|{
return|return
operator|(
name|TRUE_STRINGS
operator|.
name|indexOf
argument_list|(
name|property
argument_list|)
operator|>=
literal|0
operator|)
return|;
block|}
comment|/** Post all filenames provided in args    * @param args array of file names    * @param startIndexInArgs offset to start    * @param out output stream to post data to    * @param type default content-type to use when posting (may be overridden in auto mode)    * @return number of files posted    * */
DECL|method|postFiles
name|int
name|postFiles
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|int
name|startIndexInArgs
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|int
name|filesPosted
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|startIndexInArgs
init|;
name|j
operator|<
name|args
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|File
name|srcFile
init|=
operator|new
name|File
argument_list|(
name|args
index|[
name|j
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcFile
operator|.
name|isDirectory
argument_list|()
operator|&&
name|srcFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|filesPosted
operator|+=
name|postDirectory
argument_list|(
name|srcFile
argument_list|,
name|out
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|srcFile
operator|.
name|isFile
argument_list|()
operator|&&
name|srcFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|filesPosted
operator|+=
name|postFiles
argument_list|(
operator|new
name|File
index|[]
block|{
name|srcFile
block|}
argument_list|,
name|out
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|File
name|parent
init|=
name|srcFile
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
name|parent
operator|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|String
name|fileGlob
init|=
name|srcFile
operator|.
name|getName
argument_list|()
decl_stmt|;
name|GlobFileFilter
name|ff
init|=
operator|new
name|GlobFileFilter
argument_list|(
name|fileGlob
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
index|[]
name|files
init|=
name|parent
operator|.
name|listFiles
argument_list|(
name|ff
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|warn
argument_list|(
literal|"No files or directories matching "
operator|+
name|srcFile
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|filesPosted
operator|+=
name|postFiles
argument_list|(
name|parent
operator|.
name|listFiles
argument_list|(
name|ff
argument_list|)
argument_list|,
name|out
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|filesPosted
return|;
block|}
DECL|method|postDirectory
specifier|private
name|int
name|postDirectory
parameter_list|(
name|File
name|dir
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|dir
operator|.
name|isHidden
argument_list|()
operator|&&
operator|!
name|dir
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
condition|)
return|return
operator|(
literal|0
operator|)
return|;
name|info
argument_list|(
literal|"Indexing directory "
operator|+
name|dir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|posted
init|=
literal|0
decl_stmt|;
name|posted
operator|+=
name|postFiles
argument_list|(
name|dir
operator|.
name|listFiles
argument_list|(
name|globFileFilter
argument_list|)
argument_list|,
name|out
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|recursive
condition|)
block|{
for|for
control|(
name|File
name|d
range|:
name|dir
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|isDirectory
argument_list|()
condition|)
name|posted
operator|+=
name|postDirectory
argument_list|(
name|d
argument_list|,
name|out
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|posted
return|;
block|}
DECL|method|postFiles
name|int
name|postFiles
parameter_list|(
name|File
index|[]
name|files
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|int
name|filesPosted
init|=
literal|0
decl_stmt|;
for|for
control|(
name|File
name|srcFile
range|:
name|files
control|)
block|{
if|if
condition|(
operator|!
name|srcFile
operator|.
name|isFile
argument_list|()
operator|||
name|srcFile
operator|.
name|isHidden
argument_list|()
condition|)
continue|continue;
name|postFile
argument_list|(
name|srcFile
argument_list|,
name|out
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|filesPosted
operator|++
expr_stmt|;
block|}
return|return
name|filesPosted
return|;
block|}
DECL|method|warn
specifier|static
name|void
name|warn
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"SimplePostTool: WARNING: "
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|info
specifier|static
name|void
name|info
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|fatal
specifier|static
name|void
name|fatal
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"SimplePostTool: FATAL: "
operator|+
name|msg
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs an instance for posting data to the specified Solr URL     * (ie: "http://localhost:8983/solr/update")    */
DECL|method|SimplePostTool
specifier|public
name|SimplePostTool
parameter_list|(
name|URL
name|solrUrl
parameter_list|)
block|{
name|this
operator|.
name|solrUrl
operator|=
name|solrUrl
expr_stmt|;
block|}
comment|/**    * Does a simple commit operation     */
DECL|method|commit
specifier|public
name|void
name|commit
parameter_list|()
block|{
name|doGet
argument_list|(
name|appendParam
argument_list|(
name|solrUrl
operator|.
name|toString
argument_list|()
argument_list|,
literal|"commit=true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Does a simple optimize operation     */
DECL|method|optimize
specifier|public
name|void
name|optimize
parameter_list|()
block|{
name|doGet
argument_list|(
name|appendParam
argument_list|(
name|solrUrl
operator|.
name|toString
argument_list|()
argument_list|,
literal|"optimize=true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|appendParam
specifier|public
specifier|static
name|String
name|appendParam
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|param
parameter_list|)
block|{
name|String
index|[]
name|pa
init|=
name|param
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|pa
control|)
block|{
if|if
condition|(
name|p
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|String
index|[]
name|kv
init|=
name|p
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|kv
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|url
operator|=
name|url
operator|+
operator|(
name|url
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
operator|>
literal|0
condition|?
literal|"&"
else|:
literal|"?"
operator|)
operator|+
name|kv
index|[
literal|0
index|]
operator|+
literal|"="
operator|+
name|kv
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|warn
argument_list|(
literal|"Skipping param "
operator|+
name|p
operator|+
literal|" which is not on form key=value"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|url
return|;
block|}
comment|/**    * Opens the file and posts it's contents to the solrUrl,    * writes to response to output.     */
DECL|method|postFile
specifier|public
name|void
name|postFile
parameter_list|(
name|File
name|file
parameter_list|,
name|OutputStream
name|output
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|URL
name|url
init|=
name|solrUrl
decl_stmt|;
if|if
condition|(
name|auto
condition|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|guessType
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"text/xml"
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
literal|"text/csv"
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
literal|"application/json"
argument_list|)
condition|)
block|{
comment|// Default handler
block|}
else|else
block|{
comment|// SolrCell
name|String
name|urlStr
init|=
name|url
operator|.
name|getProtocol
argument_list|()
operator|+
literal|"://"
operator|+
name|url
operator|.
name|getAuthority
argument_list|()
operator|+
name|url
operator|.
name|getPath
argument_list|()
operator|+
literal|"/extract"
operator|+
operator|(
name|url
operator|.
name|getQuery
argument_list|()
operator|!=
literal|null
condition|?
literal|"?"
operator|+
name|url
operator|.
name|getQuery
argument_list|()
else|:
literal|""
operator|)
decl_stmt|;
if|if
condition|(
name|urlStr
operator|.
name|indexOf
argument_list|(
literal|"resource.name"
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|urlStr
operator|=
name|appendParam
argument_list|(
name|urlStr
argument_list|,
literal|"resource.name="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|urlStr
operator|.
name|indexOf
argument_list|(
literal|"literal.id"
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|urlStr
operator|=
name|appendParam
argument_list|(
name|urlStr
argument_list|,
literal|"literal.id="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|urlStr
argument_list|)
expr_stmt|;
comment|//            info("Indexing to ExtractingRequestHandler with URL "+url);
block|}
block|}
else|else
block|{
name|warn
argument_list|(
literal|"Skipping "
operator|+
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|". Unsupported file type for auto mode."
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
name|type
operator|=
name|DEFAULT_CONTENT_TYPE
expr_stmt|;
block|}
name|info
argument_list|(
literal|"POSTing file "
operator|+
name|file
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|auto
condition|?
literal|" ("
operator|+
name|type
operator|+
literal|")"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|postData
argument_list|(
name|is
argument_list|,
operator|(
name|int
operator|)
name|file
operator|.
name|length
argument_list|()
argument_list|,
name|output
argument_list|,
name|type
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|warn
argument_list|(
literal|"Can't open/read file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"IOException while closing file: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|guessType
specifier|private
name|String
name|guessType
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|suffix
init|=
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|mimeMap
operator|.
name|get
argument_list|(
name|suffix
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Performs a simple get on the given URL    */
DECL|method|doGet
specifier|public
specifier|static
name|void
name|doGet
parameter_list|(
name|String
name|url
parameter_list|)
block|{
try|try
block|{
name|doGet
argument_list|(
operator|new
name|URL
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|warn
argument_list|(
literal|"The specified URL "
operator|+
name|url
operator|+
literal|" is not a valid URL. Please check"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Performs a simple get on the given URL    */
DECL|method|doGet
specifier|public
specifier|static
name|void
name|doGet
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
try|try
block|{
name|HttpURLConnection
name|urlc
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|HttpURLConnection
operator|.
name|HTTP_OK
operator|!=
name|urlc
operator|.
name|getResponseCode
argument_list|()
condition|)
block|{
name|warn
argument_list|(
literal|"Solr returned an error #"
operator|+
name|urlc
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|" "
operator|+
name|urlc
operator|.
name|getResponseMessage
argument_list|()
operator|+
literal|" for url "
operator|+
name|url
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|warn
argument_list|(
literal|"An error occured posting data to "
operator|+
name|url
operator|+
literal|". Please check that Solr is running."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|postData
specifier|public
name|void
name|postData
parameter_list|(
name|InputStream
name|data
parameter_list|,
name|Integer
name|length
parameter_list|,
name|OutputStream
name|output
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|postData
argument_list|(
name|data
argument_list|,
name|length
argument_list|,
name|output
argument_list|,
name|type
argument_list|,
name|solrUrl
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reads data from the data stream and posts it to solr,    * writes to the response to output    */
DECL|method|postData
specifier|public
name|void
name|postData
parameter_list|(
name|InputStream
name|data
parameter_list|,
name|Integer
name|length
parameter_list|,
name|OutputStream
name|output
parameter_list|,
name|String
name|type
parameter_list|,
name|URL
name|url
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
name|type
operator|=
name|DEFAULT_CONTENT_TYPE
expr_stmt|;
name|HttpURLConnection
name|urlc
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|urlc
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
try|try
block|{
name|urlc
operator|.
name|setRequestMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProtocolException
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Shouldn't happen: HttpURLConnection doesn't support POST??"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|urlc
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|urlc
operator|.
name|setDoInput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|urlc
operator|.
name|setUseCaches
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|urlc
operator|.
name|setAllowUserInteraction
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|urlc
operator|.
name|setRequestProperty
argument_list|(
literal|"Content-type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|length
condition|)
name|urlc
operator|.
name|setFixedLengthStreamingMode
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Connection error (is Solr running at "
operator|+
name|solrUrl
operator|+
literal|" ?): "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|urlc
operator|.
name|getOutputStream
argument_list|()
expr_stmt|;
name|pipe
argument_list|(
name|data
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"IOException while posting data: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|x
parameter_list|)
block|{
comment|/*NOOP*/
block|}
block|}
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|HttpURLConnection
operator|.
name|HTTP_OK
operator|!=
name|urlc
operator|.
name|getResponseCode
argument_list|()
condition|)
block|{
name|warn
argument_list|(
literal|"Solr returned an error #"
operator|+
name|urlc
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|" "
operator|+
name|urlc
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|in
operator|=
name|urlc
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|pipe
argument_list|(
name|in
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|warn
argument_list|(
literal|"IOException while reading response: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|x
parameter_list|)
block|{
comment|/*NOOP*/
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|urlc
operator|!=
literal|null
condition|)
name|urlc
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|stringToStream
specifier|public
specifier|static
name|InputStream
name|stringToStream
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|s
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Shouldn't happen: UTF-8 not supported?!?!?!"
argument_list|)
expr_stmt|;
block|}
return|return
name|is
return|;
block|}
comment|/**    * Pipes everything from the source to the dest.  If dest is null,     * then everything is read from source and thrown away.    */
DECL|method|pipe
specifier|private
specifier|static
name|void
name|pipe
parameter_list|(
name|InputStream
name|source
parameter_list|,
name|OutputStream
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|read
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|source
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|dest
condition|)
name|dest
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|dest
condition|)
name|dest
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|isAuto
specifier|public
name|boolean
name|isAuto
parameter_list|()
block|{
return|return
name|auto
return|;
block|}
DECL|method|setAuto
specifier|public
name|void
name|setAuto
parameter_list|(
name|boolean
name|auto
parameter_list|)
block|{
name|this
operator|.
name|auto
operator|=
name|auto
expr_stmt|;
block|}
DECL|method|isRecursive
specifier|public
name|boolean
name|isRecursive
parameter_list|()
block|{
return|return
name|recursive
return|;
block|}
DECL|method|setRecursive
specifier|public
name|void
name|setRecursive
parameter_list|(
name|boolean
name|recursive
parameter_list|)
block|{
name|this
operator|.
name|recursive
operator|=
name|recursive
expr_stmt|;
block|}
DECL|method|getFileTypes
specifier|public
name|String
name|getFileTypes
parameter_list|()
block|{
return|return
name|fileTypes
return|;
block|}
DECL|method|setFileTypes
specifier|public
name|void
name|setFileTypes
parameter_list|(
name|String
name|fileTypes
parameter_list|)
block|{
name|this
operator|.
name|fileTypes
operator|=
name|fileTypes
expr_stmt|;
name|String
name|glob
decl_stmt|;
if|if
condition|(
name|fileTypes
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
name|glob
operator|=
literal|".*"
expr_stmt|;
else|else
name|glob
operator|=
literal|"^.*\\.("
operator|+
name|fileTypes
operator|.
name|replace
argument_list|(
literal|","
argument_list|,
literal|"|"
argument_list|)
operator|+
literal|")$"
expr_stmt|;
name|this
operator|.
name|globFileFilter
operator|=
operator|new
name|GlobFileFilter
argument_list|(
name|glob
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|class|GlobFileFilter
class|class
name|GlobFileFilter
implements|implements
name|FileFilter
block|{
DECL|field|_pattern
specifier|private
name|String
name|_pattern
decl_stmt|;
DECL|field|p
specifier|private
name|Pattern
name|p
decl_stmt|;
DECL|method|GlobFileFilter
specifier|public
name|GlobFileFilter
parameter_list|(
name|String
name|pattern
parameter_list|,
name|boolean
name|isRegex
parameter_list|)
block|{
name|_pattern
operator|=
name|pattern
expr_stmt|;
if|if
condition|(
operator|!
name|isRegex
condition|)
block|{
name|_pattern
operator|=
name|_pattern
operator|.
name|replace
argument_list|(
literal|"^"
argument_list|,
literal|"\\^"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"$"
argument_list|,
literal|"\\$"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"\\."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"("
argument_list|,
literal|"\\("
argument_list|)
operator|.
name|replace
argument_list|(
literal|")"
argument_list|,
literal|"\\)"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"+"
argument_list|,
literal|"\\+"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"*"
argument_list|,
literal|".*"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"?"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
name|_pattern
operator|=
literal|"^"
operator|+
name|_pattern
operator|+
literal|"$"
expr_stmt|;
block|}
try|try
block|{
name|p
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|_pattern
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Invalid type list "
operator|+
name|pattern
operator|+
literal|". "
operator|+
name|e
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|accept
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|file
parameter_list|)
block|{
return|return
name|p
operator|.
name|matcher
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|find
argument_list|()
return|;
block|}
block|}
block|}
end_class
end_unit
