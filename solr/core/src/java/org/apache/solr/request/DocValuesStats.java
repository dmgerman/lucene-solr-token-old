begin_unit
begin_package
DECL|package|org.apache.solr.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocValues
operator|.
name|MultiSortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocValues
operator|.
name|MultiSortedSetDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocValues
operator|.
name|OrdinalMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|FieldFacetStats
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|StatsField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|StatsValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|StatsValuesFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_comment
comment|/**  * Computes term stats for docvalues field (single or multivalued).  *<p>  * Instead of working on a top-level reader view (binary-search per docid),  * it collects per-segment, but maps ordinals to global ordinal space using  * MultiDocValues' OrdinalMap.  */
end_comment
begin_class
DECL|class|DocValuesStats
specifier|public
class|class
name|DocValuesStats
block|{
DECL|method|DocValuesStats
specifier|private
name|DocValuesStats
parameter_list|()
block|{}
DECL|method|getCounts
specifier|public
specifier|static
name|StatsValues
name|getCounts
parameter_list|(
name|SolrIndexSearcher
name|searcher
parameter_list|,
name|StatsField
name|statsField
parameter_list|,
name|DocSet
name|docs
parameter_list|,
name|String
index|[]
name|facet
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SchemaField
name|schemaField
init|=
name|statsField
operator|.
name|getSchemaField
argument_list|()
decl_stmt|;
assert|assert
literal|null
operator|!=
name|statsField
operator|.
name|getSchemaField
argument_list|()
operator|:
literal|"DocValuesStats requires a StatsField using a SchemaField"
assert|;
specifier|final
name|String
name|fieldName
init|=
name|schemaField
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|FieldType
name|ft
init|=
name|schemaField
operator|.
name|getType
argument_list|()
decl_stmt|;
specifier|final
name|StatsValues
name|res
init|=
name|StatsValuesFactory
operator|.
name|createStatsValues
argument_list|(
name|statsField
argument_list|)
decl_stmt|;
comment|//Initialize facetstats, if facets have been passed in
specifier|final
name|FieldFacetStats
index|[]
name|facetStats
init|=
operator|new
name|FieldFacetStats
index|[
name|facet
operator|.
name|length
index|]
decl_stmt|;
name|int
name|upto
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|facetField
range|:
name|facet
control|)
block|{
name|SchemaField
name|fsf
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|facetField
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsf
operator|.
name|multiValued
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Stats can only facet on single-valued fields, not: "
operator|+
name|facetField
argument_list|)
throw|;
block|}
name|SchemaField
name|facetSchemaField
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|facetField
argument_list|)
decl_stmt|;
name|facetStats
index|[
name|upto
operator|++
index|]
operator|=
operator|new
name|FieldFacetStats
argument_list|(
name|searcher
argument_list|,
name|facetSchemaField
argument_list|,
name|statsField
argument_list|)
expr_stmt|;
block|}
comment|// TODO: remove multiValuedFieldCache(), check dv type / uninversion type?
specifier|final
name|boolean
name|multiValued
init|=
name|schemaField
operator|.
name|multiValued
argument_list|()
operator|||
name|ft
operator|.
name|multiValuedFieldCache
argument_list|()
decl_stmt|;
name|SortedSetDocValues
name|si
decl_stmt|;
comment|// for term lookups only
name|OrdinalMap
name|ordinalMap
init|=
literal|null
decl_stmt|;
comment|// for mapping per-segment ords to global ones
if|if
condition|(
name|multiValued
condition|)
block|{
name|si
operator|=
name|searcher
operator|.
name|getLeafReader
argument_list|()
operator|.
name|getSortedSetDocValues
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
if|if
condition|(
name|si
operator|instanceof
name|MultiSortedSetDocValues
condition|)
block|{
name|ordinalMap
operator|=
operator|(
operator|(
name|MultiSortedSetDocValues
operator|)
name|si
operator|)
operator|.
name|mapping
expr_stmt|;
block|}
block|}
else|else
block|{
name|SortedDocValues
name|single
init|=
name|searcher
operator|.
name|getLeafReader
argument_list|()
operator|.
name|getSortedDocValues
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|si
operator|=
name|single
operator|==
literal|null
condition|?
literal|null
else|:
name|DocValues
operator|.
name|singleton
argument_list|(
name|single
argument_list|)
expr_stmt|;
if|if
condition|(
name|single
operator|instanceof
name|MultiSortedDocValues
condition|)
block|{
name|ordinalMap
operator|=
operator|(
operator|(
name|MultiSortedDocValues
operator|)
name|single
operator|)
operator|.
name|mapping
expr_stmt|;
block|}
block|}
if|if
condition|(
name|si
operator|==
literal|null
condition|)
block|{
name|si
operator|=
name|DocValues
operator|.
name|emptySortedSet
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|si
operator|.
name|getValueCount
argument_list|()
operator|>=
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Currently this stats method is limited to "
operator|+
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|" unique terms"
argument_list|)
throw|;
block|}
name|int
name|missingDocCountTotal
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|nTerms
init|=
operator|(
name|int
operator|)
name|si
operator|.
name|getValueCount
argument_list|()
decl_stmt|;
comment|// count collection array only needs to be as big as the number of terms we are
comment|// going to collect counts for.
specifier|final
name|int
index|[]
name|counts
init|=
operator|new
name|int
index|[
name|nTerms
index|]
decl_stmt|;
name|Filter
name|filter
init|=
name|docs
operator|.
name|getTopFilter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LeafReaderContext
argument_list|>
name|leaves
init|=
name|searcher
operator|.
name|getTopReaderContext
argument_list|()
operator|.
name|leaves
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|subIndex
init|=
literal|0
init|;
name|subIndex
operator|<
name|leaves
operator|.
name|size
argument_list|()
condition|;
name|subIndex
operator|++
control|)
block|{
name|LeafReaderContext
name|leaf
init|=
name|leaves
operator|.
name|get
argument_list|(
name|subIndex
argument_list|)
decl_stmt|;
name|DocIdSet
name|dis
init|=
name|filter
operator|.
name|getDocIdSet
argument_list|(
name|leaf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// solr docsets already exclude any deleted docs
name|DocIdSetIterator
name|disi
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dis
operator|!=
literal|null
condition|)
block|{
name|disi
operator|=
name|dis
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|disi
operator|!=
literal|null
condition|)
block|{
name|int
name|docBase
init|=
name|leaf
operator|.
name|docBase
decl_stmt|;
if|if
condition|(
name|multiValued
condition|)
block|{
name|SortedSetDocValues
name|sub
init|=
name|leaf
operator|.
name|reader
argument_list|()
operator|.
name|getSortedSetDocValues
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|==
literal|null
condition|)
block|{
name|sub
operator|=
name|DocValues
operator|.
name|emptySortedSet
argument_list|()
expr_stmt|;
block|}
specifier|final
name|SortedDocValues
name|singleton
init|=
name|DocValues
operator|.
name|unwrapSingleton
argument_list|(
name|sub
argument_list|)
decl_stmt|;
if|if
condition|(
name|singleton
operator|!=
literal|null
condition|)
block|{
comment|// some codecs may optimize SORTED_SET storage for single-valued fields
name|missingDocCountTotal
operator|+=
name|accumSingle
argument_list|(
name|counts
argument_list|,
name|docBase
argument_list|,
name|facetStats
argument_list|,
name|singleton
argument_list|,
name|disi
argument_list|,
name|subIndex
argument_list|,
name|ordinalMap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|missingDocCountTotal
operator|+=
name|accumMulti
argument_list|(
name|counts
argument_list|,
name|docBase
argument_list|,
name|facetStats
argument_list|,
name|sub
argument_list|,
name|disi
argument_list|,
name|subIndex
argument_list|,
name|ordinalMap
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|SortedDocValues
name|sub
init|=
name|leaf
operator|.
name|reader
argument_list|()
operator|.
name|getSortedDocValues
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|==
literal|null
condition|)
block|{
name|sub
operator|=
name|DocValues
operator|.
name|emptySorted
argument_list|()
expr_stmt|;
block|}
name|missingDocCountTotal
operator|+=
name|accumSingle
argument_list|(
name|counts
argument_list|,
name|docBase
argument_list|,
name|facetStats
argument_list|,
name|sub
argument_list|,
name|disi
argument_list|,
name|subIndex
argument_list|,
name|ordinalMap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// add results in index order
for|for
control|(
name|int
name|ord
init|=
literal|0
init|;
name|ord
operator|<
name|counts
operator|.
name|length
condition|;
name|ord
operator|++
control|)
block|{
name|int
name|count
init|=
name|counts
index|[
name|ord
index|]
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
specifier|final
name|BytesRef
name|value
init|=
name|si
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
decl_stmt|;
name|res
operator|.
name|accumulate
argument_list|(
name|value
argument_list|,
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldFacetStats
name|f
range|:
name|facetStats
control|)
block|{
name|f
operator|.
name|accumulateTermNum
argument_list|(
name|ord
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|res
operator|.
name|addMissing
argument_list|(
name|missingDocCountTotal
argument_list|)
expr_stmt|;
if|if
condition|(
name|facetStats
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|FieldFacetStats
name|f
range|:
name|facetStats
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|StatsValues
argument_list|>
name|facetStatsValues
init|=
name|f
operator|.
name|facetStatsValues
decl_stmt|;
name|f
operator|.
name|accumulateMissing
argument_list|()
expr_stmt|;
name|res
operator|.
name|addFacet
argument_list|(
name|f
operator|.
name|name
argument_list|,
name|facetStatsValues
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
comment|/** accumulates per-segment single-valued stats */
DECL|method|accumSingle
specifier|static
name|int
name|accumSingle
parameter_list|(
name|int
name|counts
index|[]
parameter_list|,
name|int
name|docBase
parameter_list|,
name|FieldFacetStats
index|[]
name|facetStats
parameter_list|,
name|SortedDocValues
name|si
parameter_list|,
name|DocIdSetIterator
name|disi
parameter_list|,
name|int
name|subIndex
parameter_list|,
name|OrdinalMap
name|map
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|LongValues
name|ordMap
init|=
name|map
operator|==
literal|null
condition|?
literal|null
else|:
name|map
operator|.
name|getGlobalOrds
argument_list|(
name|subIndex
argument_list|)
decl_stmt|;
name|int
name|missingDocCount
init|=
literal|0
decl_stmt|;
name|int
name|doc
decl_stmt|;
while|while
condition|(
operator|(
name|doc
operator|=
name|disi
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|int
name|term
init|=
name|si
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|term
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
name|term
operator|=
operator|(
name|int
operator|)
name|ordMap
operator|.
name|get
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
name|counts
index|[
name|term
index|]
operator|++
expr_stmt|;
for|for
control|(
name|FieldFacetStats
name|f
range|:
name|facetStats
control|)
block|{
name|f
operator|.
name|facetTermNum
argument_list|(
name|docBase
operator|+
name|doc
argument_list|,
name|term
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|FieldFacetStats
name|f
range|:
name|facetStats
control|)
block|{
name|f
operator|.
name|facetMissingNum
argument_list|(
name|docBase
operator|+
name|doc
argument_list|)
expr_stmt|;
block|}
name|missingDocCount
operator|++
expr_stmt|;
block|}
block|}
return|return
name|missingDocCount
return|;
block|}
comment|/** accumulates per-segment multi-valued stats */
DECL|method|accumMulti
specifier|static
name|int
name|accumMulti
parameter_list|(
name|int
name|counts
index|[]
parameter_list|,
name|int
name|docBase
parameter_list|,
name|FieldFacetStats
index|[]
name|facetStats
parameter_list|,
name|SortedSetDocValues
name|si
parameter_list|,
name|DocIdSetIterator
name|disi
parameter_list|,
name|int
name|subIndex
parameter_list|,
name|OrdinalMap
name|map
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|LongValues
name|ordMap
init|=
name|map
operator|==
literal|null
condition|?
literal|null
else|:
name|map
operator|.
name|getGlobalOrds
argument_list|(
name|subIndex
argument_list|)
decl_stmt|;
name|int
name|missingDocCount
init|=
literal|0
decl_stmt|;
name|int
name|doc
decl_stmt|;
while|while
condition|(
operator|(
name|doc
operator|=
name|disi
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|si
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|long
name|ord
decl_stmt|;
name|boolean
name|emptyTerm
init|=
literal|true
decl_stmt|;
while|while
condition|(
operator|(
name|ord
operator|=
name|si
operator|.
name|nextOrd
argument_list|()
operator|)
operator|!=
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
condition|)
block|{
name|emptyTerm
operator|=
literal|false
expr_stmt|;
name|int
name|term
init|=
operator|(
name|int
operator|)
name|ord
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
name|term
operator|=
operator|(
name|int
operator|)
name|ordMap
operator|.
name|get
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
name|counts
index|[
name|term
index|]
operator|++
expr_stmt|;
for|for
control|(
name|FieldFacetStats
name|f
range|:
name|facetStats
control|)
block|{
name|f
operator|.
name|facetTermNum
argument_list|(
name|docBase
operator|+
name|doc
argument_list|,
name|term
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|emptyTerm
condition|)
block|{
for|for
control|(
name|FieldFacetStats
name|f
range|:
name|facetStats
control|)
block|{
name|f
operator|.
name|facetMissingNum
argument_list|(
name|docBase
operator|+
name|doc
argument_list|)
expr_stmt|;
block|}
name|missingDocCount
operator|++
expr_stmt|;
block|}
block|}
return|return
name|missingDocCount
return|;
block|}
block|}
end_class
end_unit
