begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|uninverting
operator|.
name|DocTermOrds
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrCache
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_comment
comment|/**  *  * Final form of the un-inverted field:  *   Each document points to a list of term numbers that are contained in that document.  *  *   Term numbers are in sorted order, and are encoded as variable-length deltas from the  *   previous term number.  Real term numbers start at 2 since 0 and 1 are reserved.  A  *   term number of 0 signals the end of the termNumber list.  *  *   There is a single int[maxDoc()] which either contains a pointer into a byte[] for  *   the termNumber lists, or directly contains the termNumber list if it fits in the 4  *   bytes of an integer.  If the first byte in the integer is 1, the next 3 bytes  *   are a pointer into a byte[] where the termNumber list starts.  *  *   There are actually 256 byte arrays, to compensate for the fact that the pointers  *   into the byte arrays are only 3 bytes long.  The correct byte array for a document  *   is a function of its id.  *  *   To save space and speed up faceting, any term that matches enough documents will  *   not be un-inverted... it will be skipped while building the un-inverted field structure,  *   and will use a set intersection method during faceting.  *  *   To further save memory, the terms (the actual string values) are not all stored in  *   memory, but a TermIndex is used to convert term numbers to term values only  *   for the terms needed after faceting has completed.  Only every 128th term value  *   is stored, along with its corresponding term number, and this is used as an  *   index to find the closest term and iterate until the desired number is hit (very  *   much like Lucene's own internal term index).  *  */
end_comment
begin_class
DECL|class|UnInvertedField
specifier|public
class|class
name|UnInvertedField
extends|extends
name|DocTermOrds
block|{
DECL|class|TopTerm
specifier|static
class|class
name|TopTerm
block|{
DECL|field|term
name|BytesRef
name|term
decl_stmt|;
DECL|field|termNum
name|int
name|termNum
decl_stmt|;
DECL|method|memSize
name|long
name|memSize
parameter_list|()
block|{
return|return
literal|8
operator|+
comment|// obj header
literal|8
operator|+
literal|8
operator|+
name|term
operator|.
name|length
operator|+
comment|//term
literal|4
return|;
comment|// int
block|}
block|}
DECL|field|memsz
name|long
name|memsz
decl_stmt|;
DECL|field|use
specifier|final
name|AtomicLong
name|use
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
comment|// number of uses
DECL|field|maxTermCounts
name|int
index|[]
name|maxTermCounts
init|=
operator|new
name|int
index|[
literal|1024
index|]
decl_stmt|;
DECL|field|bigTerms
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|TopTerm
argument_list|>
name|bigTerms
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|deState
specifier|private
name|SolrIndexSearcher
operator|.
name|DocsEnumState
name|deState
decl_stmt|;
DECL|field|searcher
specifier|private
specifier|final
name|SolrIndexSearcher
name|searcher
decl_stmt|;
DECL|field|uifPlaceholder
specifier|private
specifier|static
name|UnInvertedField
name|uifPlaceholder
init|=
operator|new
name|UnInvertedField
argument_list|()
decl_stmt|;
DECL|method|UnInvertedField
specifier|private
name|UnInvertedField
parameter_list|()
block|{
comment|// Dummy for synchronization.
name|super
argument_list|(
literal|"fake"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// cheapest initialization I can find.
name|searcher
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|visitTerm
specifier|protected
name|void
name|visitTerm
parameter_list|(
name|TermsEnum
name|te
parameter_list|,
name|int
name|termNum
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|termNum
operator|>=
name|maxTermCounts
operator|.
name|length
condition|)
block|{
comment|// resize by doubling - for very large number of unique terms, expanding
comment|// by 4K and resultant GC will dominate uninvert times.  Resize at end if material
name|int
index|[]
name|newMaxTermCounts
init|=
operator|new
name|int
index|[
name|maxTermCounts
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|maxTermCounts
argument_list|,
literal|0
argument_list|,
name|newMaxTermCounts
argument_list|,
literal|0
argument_list|,
name|termNum
argument_list|)
expr_stmt|;
name|maxTermCounts
operator|=
name|newMaxTermCounts
expr_stmt|;
block|}
specifier|final
name|BytesRef
name|term
init|=
name|te
operator|.
name|term
argument_list|()
decl_stmt|;
if|if
condition|(
name|te
operator|.
name|docFreq
argument_list|()
operator|>
name|maxTermDocFreq
condition|)
block|{
name|TopTerm
name|topTerm
init|=
operator|new
name|TopTerm
argument_list|()
decl_stmt|;
name|topTerm
operator|.
name|term
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|topTerm
operator|.
name|termNum
operator|=
name|termNum
expr_stmt|;
name|bigTerms
operator|.
name|put
argument_list|(
name|topTerm
operator|.
name|termNum
argument_list|,
name|topTerm
argument_list|)
expr_stmt|;
if|if
condition|(
name|deState
operator|==
literal|null
condition|)
block|{
name|deState
operator|=
operator|new
name|SolrIndexSearcher
operator|.
name|DocsEnumState
argument_list|()
expr_stmt|;
name|deState
operator|.
name|fieldName
operator|=
name|field
expr_stmt|;
name|deState
operator|.
name|liveDocs
operator|=
name|searcher
operator|.
name|getLeafReader
argument_list|()
operator|.
name|getLiveDocs
argument_list|()
expr_stmt|;
name|deState
operator|.
name|termsEnum
operator|=
name|te
expr_stmt|;
comment|// TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?
name|deState
operator|.
name|postingsEnum
operator|=
name|postingsEnum
expr_stmt|;
name|deState
operator|.
name|minSetSizeCached
operator|=
name|maxTermDocFreq
expr_stmt|;
block|}
name|postingsEnum
operator|=
name|deState
operator|.
name|postingsEnum
expr_stmt|;
name|DocSet
name|set
init|=
name|searcher
operator|.
name|getDocSet
argument_list|(
name|deState
argument_list|)
decl_stmt|;
name|maxTermCounts
index|[
name|termNum
index|]
operator|=
name|set
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setActualDocFreq
specifier|protected
name|void
name|setActualDocFreq
parameter_list|(
name|int
name|termNum
parameter_list|,
name|int
name|docFreq
parameter_list|)
block|{
name|maxTermCounts
index|[
name|termNum
index|]
operator|=
name|docFreq
expr_stmt|;
block|}
DECL|method|memSize
specifier|public
name|long
name|memSize
parameter_list|()
block|{
comment|// can cache the mem size since it shouldn't change
if|if
condition|(
name|memsz
operator|!=
literal|0
condition|)
return|return
name|memsz
return|;
name|long
name|sz
init|=
name|super
operator|.
name|ramBytesUsed
argument_list|()
decl_stmt|;
name|sz
operator|+=
literal|8
operator|*
literal|8
operator|+
literal|32
expr_stmt|;
comment|// local fields
name|sz
operator|+=
name|bigTerms
operator|.
name|size
argument_list|()
operator|*
literal|64
expr_stmt|;
for|for
control|(
name|TopTerm
name|tt
range|:
name|bigTerms
operator|.
name|values
argument_list|()
control|)
block|{
name|sz
operator|+=
name|tt
operator|.
name|memSize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|maxTermCounts
operator|!=
literal|null
condition|)
name|sz
operator|+=
name|maxTermCounts
operator|.
name|length
operator|*
literal|4
expr_stmt|;
if|if
condition|(
name|indexedTermsArray
operator|!=
literal|null
condition|)
block|{
comment|// assume 8 byte references?
name|sz
operator|+=
literal|8
operator|+
literal|8
operator|+
literal|8
operator|+
literal|8
operator|+
operator|(
name|indexedTermsArray
operator|.
name|length
operator|<<
literal|3
operator|)
operator|+
name|sizeOfIndexedStrings
expr_stmt|;
block|}
name|memsz
operator|=
name|sz
expr_stmt|;
return|return
name|sz
return|;
block|}
DECL|method|UnInvertedField
specifier|public
name|UnInvertedField
parameter_list|(
name|String
name|field
parameter_list|,
name|SolrIndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|field
argument_list|,
comment|// threshold, over which we use set intersections instead of counting
comment|// to (1) save memory, and (2) speed up faceting.
comment|// Add 2 for testing purposes so that there will always be some terms under
comment|// the threshold even when the index is very
comment|// small.
name|searcher
operator|.
name|maxDoc
argument_list|()
operator|/
literal|20
operator|+
literal|2
argument_list|,
name|DEFAULT_INDEX_INTERVAL_BITS
argument_list|)
expr_stmt|;
comment|//System.out.println("maxTermDocFreq=" + maxTermDocFreq + " maxDoc=" + searcher.maxDoc());
specifier|final
name|String
name|prefix
init|=
name|TrieField
operator|.
name|getMainValuePrefix
argument_list|(
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getFieldType
argument_list|(
name|field
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
try|try
block|{
name|LeafReader
name|r
init|=
name|searcher
operator|.
name|getLeafReader
argument_list|()
decl_stmt|;
name|uninvert
argument_list|(
name|r
argument_list|,
name|r
operator|.
name|getLiveDocs
argument_list|()
argument_list|,
name|prefix
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|BytesRef
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|ise
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|tnums
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|target
range|:
name|tnums
control|)
block|{
if|if
condition|(
name|target
operator|!=
literal|null
operator|&&
name|target
operator|.
name|length
operator|>
operator|(
literal|1
operator|<<
literal|24
operator|)
operator|*
literal|.9
condition|)
block|{
name|SolrCore
operator|.
name|log
operator|.
name|warn
argument_list|(
literal|"Approaching too many values for UnInvertedField faceting on field '"
operator|+
name|field
operator|+
literal|"' : bucket size="
operator|+
name|target
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// free space if outrageously wasteful (tradeoff memory/cpu)
if|if
condition|(
operator|(
name|maxTermCounts
operator|.
name|length
operator|-
name|numTermsInField
operator|)
operator|>
literal|1024
condition|)
block|{
comment|// too much waste!
name|int
index|[]
name|newMaxTermCounts
init|=
operator|new
name|int
index|[
name|numTermsInField
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|maxTermCounts
argument_list|,
literal|0
argument_list|,
name|newMaxTermCounts
argument_list|,
literal|0
argument_list|,
name|numTermsInField
argument_list|)
expr_stmt|;
name|maxTermCounts
operator|=
name|newMaxTermCounts
expr_stmt|;
block|}
name|SolrCore
operator|.
name|log
operator|.
name|info
argument_list|(
literal|"UnInverted multi-valued field "
operator|+
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//System.out.println("CREATED: " + toString() + " ti.index=" + ti.index);
block|}
DECL|method|getNumTerms
specifier|public
name|int
name|getNumTerms
parameter_list|()
block|{
return|return
name|numTermsInField
return|;
block|}
DECL|method|getReadableValue
name|String
name|getReadableValue
parameter_list|(
name|BytesRef
name|termval
parameter_list|,
name|FieldType
name|ft
parameter_list|,
name|CharsRefBuilder
name|charsRef
parameter_list|)
block|{
return|return
name|ft
operator|.
name|indexedToReadable
argument_list|(
name|termval
argument_list|,
name|charsRef
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** may return a reused BytesRef */
DECL|method|getTermValue
name|BytesRef
name|getTermValue
parameter_list|(
name|TermsEnum
name|te
parameter_list|,
name|int
name|termNum
parameter_list|)
throws|throws
name|IOException
block|{
comment|//System.out.println("getTermValue termNum=" + termNum + " this=" + this + " numTerms=" + numTermsInField);
if|if
condition|(
name|bigTerms
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// see if the term is one of our big terms.
name|TopTerm
name|tt
init|=
name|bigTerms
operator|.
name|get
argument_list|(
name|termNum
argument_list|)
decl_stmt|;
if|if
condition|(
name|tt
operator|!=
literal|null
condition|)
block|{
comment|//System.out.println("  return big " + tt.term);
return|return
name|tt
operator|.
name|term
return|;
block|}
block|}
return|return
name|lookupTerm
argument_list|(
name|te
argument_list|,
name|termNum
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|long
name|indexSize
init|=
name|indexedTermsArray
operator|==
literal|null
condition|?
literal|0
else|:
operator|(
literal|8
operator|+
literal|8
operator|+
literal|8
operator|+
literal|8
operator|+
operator|(
name|indexedTermsArray
operator|.
name|length
operator|<<
literal|3
operator|)
operator|+
name|sizeOfIndexedStrings
operator|)
decl_stmt|;
comment|// assume 8 byte references?
return|return
literal|"{field="
operator|+
name|field
operator|+
literal|",memSize="
operator|+
name|memSize
argument_list|()
operator|+
literal|",tindexSize="
operator|+
name|indexSize
operator|+
literal|",time="
operator|+
name|total_time
operator|+
literal|",phase1="
operator|+
name|phase1_time
operator|+
literal|",nTerms="
operator|+
name|numTermsInField
operator|+
literal|",bigTerms="
operator|+
name|bigTerms
operator|.
name|size
argument_list|()
operator|+
literal|",termInstances="
operator|+
name|termInstances
operator|+
literal|",uses="
operator|+
name|use
operator|.
name|get
argument_list|()
operator|+
literal|"}"
return|;
block|}
comment|//////////////////////////////////////////////////////////////////
comment|//////////////////////////// caching /////////////////////////////
comment|//////////////////////////////////////////////////////////////////
DECL|method|getUnInvertedField
specifier|public
specifier|static
name|UnInvertedField
name|getUnInvertedField
parameter_list|(
name|String
name|field
parameter_list|,
name|SolrIndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrCache
argument_list|<
name|String
argument_list|,
name|UnInvertedField
argument_list|>
name|cache
init|=
name|searcher
operator|.
name|getFieldValueCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|UnInvertedField
argument_list|(
name|field
argument_list|,
name|searcher
argument_list|)
return|;
block|}
name|UnInvertedField
name|uif
init|=
literal|null
decl_stmt|;
name|Boolean
name|doWait
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|cache
init|)
block|{
name|uif
operator|=
name|cache
operator|.
name|get
argument_list|(
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|uif
operator|==
literal|null
condition|)
block|{
comment|/**          * We use this place holder object to pull the UninvertedField construction out of the sync          * so that if many fields are accessed in a short time, the UninvertedField can be          * built for these fields in parallel rather than sequentially.          */
name|cache
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|uifPlaceholder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|uif
operator|!=
name|uifPlaceholder
condition|)
block|{
return|return
name|uif
return|;
block|}
name|doWait
operator|=
literal|true
expr_stmt|;
comment|// Someone else has put the place holder in, wait for that to complete.
block|}
block|}
while|while
condition|(
name|doWait
condition|)
block|{
try|try
block|{
synchronized|synchronized
init|(
name|cache
init|)
block|{
name|uif
operator|=
name|cache
operator|.
name|get
argument_list|(
name|field
argument_list|)
expr_stmt|;
comment|// Should at least return the placeholder, NPE if not is OK.
if|if
condition|(
name|uif
operator|!=
name|uifPlaceholder
condition|)
block|{
comment|// OK, another thread put this in the cache we should be good.
return|return
name|uif
return|;
block|}
name|cache
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Thread interrupted in getUninvertedField."
argument_list|)
throw|;
block|}
block|}
name|uif
operator|=
operator|new
name|UnInvertedField
argument_list|(
name|field
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|cache
init|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|uif
argument_list|)
expr_stmt|;
comment|// Note, this cleverly replaces the placeholder.
name|cache
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
return|return
name|uif
return|;
block|}
block|}
end_class
end_unit
