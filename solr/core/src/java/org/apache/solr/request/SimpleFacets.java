begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermRangeQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|AbstractAllGroupHeadsCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|term
operator|.
name|TermAllGroupsCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|term
operator|.
name|TermGroupFacetCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|OpenBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
operator|.
name|FacetRangeInclude
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
operator|.
name|FacetRangeOther
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|GroupParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|RequiredSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ResponseBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|BoolField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|DateField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SortableDoubleField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SortableFloatField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SortableIntField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SortableLongField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|BitDocSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|Grouping
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|HashDocSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QueryParsing
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SortedIntDocSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SyntaxError
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|GroupingSpecification
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|BoundedTreeSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DateMathParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DefaultSolrThreadFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|LongPriorityQueue
import|;
end_import
begin_comment
comment|/**  * A class that generates simple Facet information for a request.  *  * More advanced facet implementations may compose or subclass this class   * to leverage any of it's functionality.  */
end_comment
begin_class
DECL|class|SimpleFacets
specifier|public
class|class
name|SimpleFacets
block|{
comment|/** The main set of documents all facet counts should be relative to */
DECL|field|docsOrig
specifier|protected
name|DocSet
name|docsOrig
decl_stmt|;
comment|/** Configuration params behavior should be driven by */
DECL|field|orig
specifier|protected
specifier|final
name|SolrParams
name|orig
decl_stmt|;
comment|/** Searcher to use for all calculations */
DECL|field|searcher
specifier|protected
specifier|final
name|SolrIndexSearcher
name|searcher
decl_stmt|;
DECL|field|req
specifier|protected
specifier|final
name|SolrQueryRequest
name|req
decl_stmt|;
DECL|field|rb
specifier|protected
specifier|final
name|ResponseBuilder
name|rb
decl_stmt|;
DECL|field|facetResponse
specifier|protected
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|facetResponse
decl_stmt|;
comment|// per-facet values
DECL|field|localParams
specifier|protected
name|SolrParams
name|localParams
decl_stmt|;
comment|// localParams on this particular facet command
DECL|field|params
specifier|protected
name|SolrParams
name|params
decl_stmt|;
comment|// local+original
DECL|field|required
specifier|protected
name|SolrParams
name|required
decl_stmt|;
comment|// required version of params
DECL|field|facetValue
specifier|protected
name|String
name|facetValue
decl_stmt|;
comment|// the field to or query to facet on (minus local params)
DECL|field|docs
specifier|protected
name|DocSet
name|docs
decl_stmt|;
comment|// the base docset for this particular facet
DECL|field|key
specifier|protected
name|String
name|key
decl_stmt|;
comment|// what name should the results be stored under
DECL|field|threads
specifier|protected
name|int
name|threads
decl_stmt|;
DECL|method|SimpleFacets
specifier|public
name|SimpleFacets
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|DocSet
name|docs
parameter_list|,
name|SolrParams
name|params
parameter_list|)
block|{
name|this
argument_list|(
name|req
argument_list|,
name|docs
argument_list|,
name|params
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|SimpleFacets
specifier|public
name|SimpleFacets
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|DocSet
name|docs
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|ResponseBuilder
name|rb
parameter_list|)
block|{
name|this
operator|.
name|req
operator|=
name|req
expr_stmt|;
name|this
operator|.
name|searcher
operator|=
name|req
operator|.
name|getSearcher
argument_list|()
expr_stmt|;
name|this
operator|.
name|docs
operator|=
name|this
operator|.
name|docsOrig
operator|=
name|docs
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|orig
operator|=
name|params
expr_stmt|;
name|this
operator|.
name|required
operator|=
operator|new
name|RequiredSolrParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|this
operator|.
name|rb
operator|=
name|rb
expr_stmt|;
block|}
DECL|method|parseParams
specifier|protected
name|void
name|parseParams
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|param
parameter_list|)
throws|throws
name|SyntaxError
throws|,
name|IOException
block|{
name|localParams
operator|=
name|QueryParsing
operator|.
name|getLocalParams
argument_list|(
name|param
argument_list|,
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
name|docs
operator|=
name|docsOrig
expr_stmt|;
name|facetValue
operator|=
name|param
expr_stmt|;
name|key
operator|=
name|param
expr_stmt|;
name|threads
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|localParams
operator|==
literal|null
condition|)
block|{
name|params
operator|=
name|orig
expr_stmt|;
name|required
operator|=
operator|new
name|RequiredSolrParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
return|return;
block|}
name|params
operator|=
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|localParams
argument_list|,
name|orig
argument_list|)
expr_stmt|;
name|required
operator|=
operator|new
name|RequiredSolrParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
comment|// remove local params unless it's a query
if|if
condition|(
name|type
operator|!=
name|FacetParams
operator|.
name|FACET_QUERY
condition|)
block|{
comment|// TODO Cut over to an Enum here
name|facetValue
operator|=
name|localParams
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|VALUE
argument_list|)
expr_stmt|;
block|}
comment|// reset set the default key now that localParams have been removed
name|key
operator|=
name|facetValue
expr_stmt|;
comment|// allow explicit set of the key
name|key
operator|=
name|localParams
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|OUTPUT_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|String
name|threadStr
init|=
name|localParams
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|THREADS
argument_list|)
decl_stmt|;
if|if
condition|(
name|threadStr
operator|!=
literal|null
condition|)
block|{
name|threads
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|threadStr
argument_list|)
expr_stmt|;
block|}
comment|// figure out if we need a new base DocSet
name|String
name|excludeStr
init|=
name|localParams
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|EXCLUDE
argument_list|)
decl_stmt|;
if|if
condition|(
name|excludeStr
operator|==
literal|null
condition|)
return|return;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|tagMap
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|get
argument_list|(
literal|"tags"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tagMap
operator|!=
literal|null
operator|&&
name|rb
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|excludeTagList
init|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|excludeStr
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|IdentityHashMap
argument_list|<
name|Query
argument_list|,
name|Boolean
argument_list|>
name|excludeSet
init|=
operator|new
name|IdentityHashMap
argument_list|<
name|Query
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|excludeTag
range|:
name|excludeTagList
control|)
block|{
name|Object
name|olst
init|=
name|tagMap
operator|.
name|get
argument_list|(
name|excludeTag
argument_list|)
decl_stmt|;
comment|// tagMap has entries of List<String,List<QParser>>, but subject to change in the future
if|if
condition|(
operator|!
operator|(
name|olst
operator|instanceof
name|Collection
operator|)
condition|)
continue|continue;
for|for
control|(
name|Object
name|o
range|:
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|olst
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|QParser
operator|)
condition|)
continue|continue;
name|QParser
name|qp
init|=
operator|(
name|QParser
operator|)
name|o
decl_stmt|;
name|excludeSet
operator|.
name|put
argument_list|(
name|qp
operator|.
name|getQuery
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|excludeSet
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|List
argument_list|<
name|Query
argument_list|>
name|qlist
init|=
operator|new
name|ArrayList
argument_list|<
name|Query
argument_list|>
argument_list|()
decl_stmt|;
comment|// add the base query
if|if
condition|(
operator|!
name|excludeSet
operator|.
name|containsKey
argument_list|(
name|rb
operator|.
name|getQuery
argument_list|()
argument_list|)
condition|)
block|{
name|qlist
operator|.
name|add
argument_list|(
name|rb
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// add the filters
if|if
condition|(
name|rb
operator|.
name|getFilters
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Query
name|q
range|:
name|rb
operator|.
name|getFilters
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|excludeSet
operator|.
name|containsKey
argument_list|(
name|q
argument_list|)
condition|)
block|{
name|qlist
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// get the new base docset for this facet
name|DocSet
name|base
init|=
name|searcher
operator|.
name|getDocSet
argument_list|(
name|qlist
argument_list|)
decl_stmt|;
if|if
condition|(
name|rb
operator|.
name|grouping
argument_list|()
operator|&&
name|rb
operator|.
name|getGroupingSpec
argument_list|()
operator|.
name|isTruncateGroups
argument_list|()
condition|)
block|{
name|Grouping
name|grouping
init|=
operator|new
name|Grouping
argument_list|(
name|searcher
argument_list|,
literal|null
argument_list|,
name|rb
operator|.
name|getQueryCommand
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|grouping
operator|.
name|setGroupSort
argument_list|(
name|rb
operator|.
name|getGroupingSpec
argument_list|()
operator|.
name|getSortWithinGroup
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rb
operator|.
name|getGroupingSpec
argument_list|()
operator|.
name|getFields
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|grouping
operator|.
name|addFieldCommand
argument_list|(
name|rb
operator|.
name|getGroupingSpec
argument_list|()
operator|.
name|getFields
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rb
operator|.
name|getGroupingSpec
argument_list|()
operator|.
name|getFunctions
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|grouping
operator|.
name|addFunctionCommand
argument_list|(
name|rb
operator|.
name|getGroupingSpec
argument_list|()
operator|.
name|getFunctions
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|docs
operator|=
name|base
expr_stmt|;
return|return;
block|}
name|AbstractAllGroupHeadsCollector
name|allGroupHeadsCollector
init|=
name|grouping
operator|.
name|getCommands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|createAllGroupCollector
argument_list|()
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|base
operator|.
name|getTopFilter
argument_list|()
argument_list|,
name|allGroupHeadsCollector
argument_list|)
expr_stmt|;
name|int
name|maxDoc
init|=
name|searcher
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
name|FixedBitSet
name|fixedBitSet
init|=
name|allGroupHeadsCollector
operator|.
name|retrieveGroupHeads
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
name|long
index|[]
name|bits
init|=
name|fixedBitSet
operator|.
name|getBits
argument_list|()
decl_stmt|;
name|this
operator|.
name|docs
operator|=
operator|new
name|BitDocSet
argument_list|(
operator|new
name|OpenBitSet
argument_list|(
name|bits
argument_list|,
name|bits
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|docs
operator|=
name|base
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Looks at various Params to determining if any simple Facet Constraint count    * computations are desired.    *    * @see #getFacetQueryCounts    * @see #getFacetFieldCounts    * @see #getFacetDateCounts    * @see #getFacetRangeCounts    * @see FacetParams#FACET    * @return a NamedList of Facet Count info or null    */
DECL|method|getFacetCounts
specifier|public
name|NamedList
argument_list|<
name|Object
argument_list|>
name|getFacetCounts
parameter_list|()
block|{
comment|// if someone called this method, benefit of the doubt: assume true
if|if
condition|(
operator|!
name|params
operator|.
name|getBool
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|true
argument_list|)
condition|)
return|return
literal|null
return|;
name|facetResponse
operator|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|facetResponse
operator|.
name|add
argument_list|(
literal|"facet_queries"
argument_list|,
name|getFacetQueryCounts
argument_list|()
argument_list|)
expr_stmt|;
name|facetResponse
operator|.
name|add
argument_list|(
literal|"facet_fields"
argument_list|,
name|getFacetFieldCounts
argument_list|()
argument_list|)
expr_stmt|;
name|facetResponse
operator|.
name|add
argument_list|(
literal|"facet_dates"
argument_list|,
name|getFacetDateCounts
argument_list|()
argument_list|)
expr_stmt|;
name|facetResponse
operator|.
name|add
argument_list|(
literal|"facet_ranges"
argument_list|,
name|getFacetRangeCounts
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SyntaxError
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|facetResponse
return|;
block|}
comment|/**    * Returns a list of facet counts for each of the facet queries     * specified in the params    *    * @see FacetParams#FACET_QUERY    */
DECL|method|getFacetQueryCounts
specifier|public
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|getFacetQueryCounts
parameter_list|()
throws|throws
name|IOException
throws|,
name|SyntaxError
block|{
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|res
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|/* Ignore CommonParams.DF - could have init param facet.query assuming      * the schema default with query param DF intented to only affect Q.      * If user doesn't want schema default for facet.query, they should be      * explicit.      */
comment|// SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);
name|String
index|[]
name|facetQs
init|=
name|params
operator|.
name|getParams
argument_list|(
name|FacetParams
operator|.
name|FACET_QUERY
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|facetQs
operator|&&
literal|0
operator|!=
name|facetQs
operator|.
name|length
condition|)
block|{
for|for
control|(
name|String
name|q
range|:
name|facetQs
control|)
block|{
name|parseParams
argument_list|(
name|FacetParams
operator|.
name|FACET_QUERY
argument_list|,
name|q
argument_list|)
expr_stmt|;
comment|// TODO: slight optimization would prevent double-parsing of any localParams
name|Query
name|qobj
init|=
name|QParser
operator|.
name|getParser
argument_list|(
name|q
argument_list|,
literal|null
argument_list|,
name|req
argument_list|)
operator|.
name|getQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|qobj
operator|==
literal|null
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
name|key
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|params
operator|.
name|getBool
argument_list|(
name|GroupParams
operator|.
name|GROUP_FACET
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|getGroupedFacetQueryCount
argument_list|(
name|qobj
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|res
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|searcher
operator|.
name|numDocs
argument_list|(
name|qobj
argument_list|,
name|docs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|res
return|;
block|}
comment|/**    * Returns a grouped facet count for the facet query    *    * @see FacetParams#FACET_QUERY    */
DECL|method|getGroupedFacetQueryCount
specifier|public
name|int
name|getGroupedFacetQueryCount
parameter_list|(
name|Query
name|facetQuery
parameter_list|)
throws|throws
name|IOException
block|{
name|GroupingSpecification
name|groupingSpecification
init|=
name|rb
operator|.
name|getGroupingSpec
argument_list|()
decl_stmt|;
name|String
name|groupField
init|=
name|groupingSpecification
operator|!=
literal|null
condition|?
name|groupingSpecification
operator|.
name|getFields
argument_list|()
index|[
literal|0
index|]
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|groupField
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Specify the group.field as parameter or local parameter"
argument_list|)
throw|;
block|}
name|TermAllGroupsCollector
name|collector
init|=
operator|new
name|TermAllGroupsCollector
argument_list|(
name|groupField
argument_list|)
decl_stmt|;
name|Filter
name|mainQueryFilter
init|=
name|docs
operator|.
name|getTopFilter
argument_list|()
decl_stmt|;
comment|// This returns a filter that only matches documents matching with q param and fq params
name|searcher
operator|.
name|search
argument_list|(
name|facetQuery
argument_list|,
name|mainQueryFilter
argument_list|,
name|collector
argument_list|)
expr_stmt|;
return|return
name|collector
operator|.
name|getGroupCount
argument_list|()
return|;
block|}
DECL|enum|FacetMethod
enum|enum
name|FacetMethod
block|{
DECL|enum constant|ENUM
DECL|enum constant|FC
DECL|enum constant|FCS
name|ENUM
block|,
name|FC
block|,
name|FCS
block|;   }
DECL|method|getTermCounts
specifier|public
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|getTermCounts
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getTermCounts
argument_list|(
name|field
argument_list|,
name|this
operator|.
name|docs
argument_list|)
return|;
block|}
DECL|method|getTermCounts
specifier|public
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|getTermCounts
parameter_list|(
name|String
name|field
parameter_list|,
name|DocSet
name|base
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|offset
init|=
name|params
operator|.
name|getFieldInt
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_OFFSET
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|limit
init|=
name|params
operator|.
name|getFieldInt
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|limit
operator|==
literal|0
condition|)
return|return
operator|new
name|NamedList
argument_list|<
name|Integer
argument_list|>
argument_list|()
return|;
name|Integer
name|mincount
init|=
name|params
operator|.
name|getFieldInt
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_MINCOUNT
argument_list|)
decl_stmt|;
if|if
condition|(
name|mincount
operator|==
literal|null
condition|)
block|{
name|Boolean
name|zeros
init|=
name|params
operator|.
name|getFieldBool
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_ZEROS
argument_list|)
decl_stmt|;
comment|// mincount = (zeros!=null&& zeros) ? 0 : 1;
name|mincount
operator|=
operator|(
name|zeros
operator|!=
literal|null
operator|&&
operator|!
name|zeros
operator|)
condition|?
literal|1
else|:
literal|0
expr_stmt|;
comment|// current default is to include zeros.
block|}
name|boolean
name|missing
init|=
name|params
operator|.
name|getFieldBool
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_MISSING
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// default to sorting if there is a limit.
name|String
name|sort
init|=
name|params
operator|.
name|getFieldParam
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_SORT
argument_list|,
name|limit
operator|>
literal|0
condition|?
name|FacetParams
operator|.
name|FACET_SORT_COUNT
else|:
name|FacetParams
operator|.
name|FACET_SORT_INDEX
argument_list|)
decl_stmt|;
name|String
name|prefix
init|=
name|params
operator|.
name|getFieldParam
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_PREFIX
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|counts
decl_stmt|;
name|SchemaField
name|sf
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|FieldType
name|ft
init|=
name|sf
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// determine what type of faceting method to use
specifier|final
name|String
name|methodStr
init|=
name|params
operator|.
name|getFieldParam
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_METHOD
argument_list|)
decl_stmt|;
name|FacetMethod
name|method
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|FacetParams
operator|.
name|FACET_METHOD_enum
operator|.
name|equals
argument_list|(
name|methodStr
argument_list|)
condition|)
block|{
name|method
operator|=
name|FacetMethod
operator|.
name|ENUM
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FacetParams
operator|.
name|FACET_METHOD_fcs
operator|.
name|equals
argument_list|(
name|methodStr
argument_list|)
condition|)
block|{
name|method
operator|=
name|FacetMethod
operator|.
name|FCS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FacetParams
operator|.
name|FACET_METHOD_fc
operator|.
name|equals
argument_list|(
name|methodStr
argument_list|)
condition|)
block|{
name|method
operator|=
name|FacetMethod
operator|.
name|FC
expr_stmt|;
block|}
if|if
condition|(
name|method
operator|==
name|FacetMethod
operator|.
name|ENUM
operator|&&
name|TrieField
operator|.
name|getMainValuePrefix
argument_list|(
name|ft
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// enum can't deal with trie fields that index several terms per value
name|method
operator|=
name|sf
operator|.
name|multiValued
argument_list|()
condition|?
name|FacetMethod
operator|.
name|FC
else|:
name|FacetMethod
operator|.
name|FCS
expr_stmt|;
block|}
if|if
condition|(
name|method
operator|==
literal|null
operator|&&
name|ft
operator|instanceof
name|BoolField
condition|)
block|{
comment|// Always use filters for booleans... we know the number of values is very small.
name|method
operator|=
name|FacetMethod
operator|.
name|ENUM
expr_stmt|;
block|}
specifier|final
name|boolean
name|multiToken
init|=
name|sf
operator|.
name|multiValued
argument_list|()
operator|||
name|ft
operator|.
name|multiValuedFieldCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
operator|&&
name|ft
operator|.
name|getNumericType
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|sf
operator|.
name|multiValued
argument_list|()
condition|)
block|{
comment|// the per-segment approach is optimal for numeric field types since there
comment|// are no global ords to merge and no need to create an expensive
comment|// top-level reader
name|method
operator|=
name|FacetMethod
operator|.
name|FCS
expr_stmt|;
block|}
if|if
condition|(
name|ft
operator|.
name|getNumericType
argument_list|()
operator|!=
literal|null
operator|&&
name|sf
operator|.
name|hasDocValues
argument_list|()
condition|)
block|{
comment|// only fcs is able to leverage the numeric field caches
name|method
operator|=
name|FacetMethod
operator|.
name|FCS
expr_stmt|;
block|}
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
comment|// TODO: default to per-segment or not?
name|method
operator|=
name|FacetMethod
operator|.
name|FC
expr_stmt|;
block|}
if|if
condition|(
name|method
operator|==
name|FacetMethod
operator|.
name|FCS
operator|&&
name|multiToken
condition|)
block|{
comment|// only fc knows how to deal with multi-token fields
name|method
operator|=
name|FacetMethod
operator|.
name|FC
expr_stmt|;
block|}
if|if
condition|(
name|method
operator|==
name|FacetMethod
operator|.
name|ENUM
operator|&&
name|sf
operator|.
name|hasDocValues
argument_list|()
condition|)
block|{
comment|// only fc can handle docvalues types
name|method
operator|=
name|FacetMethod
operator|.
name|FC
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|getFieldBool
argument_list|(
name|field
argument_list|,
name|GroupParams
operator|.
name|GROUP_FACET
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|counts
operator|=
name|getGroupedCounts
argument_list|(
name|searcher
argument_list|,
name|base
argument_list|,
name|field
argument_list|,
name|multiToken
argument_list|,
name|offset
argument_list|,
name|limit
argument_list|,
name|mincount
argument_list|,
name|missing
argument_list|,
name|sort
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|method
operator|!=
literal|null
assert|;
switch|switch
condition|(
name|method
condition|)
block|{
case|case
name|ENUM
case|:
assert|assert
name|TrieField
operator|.
name|getMainValuePrefix
argument_list|(
name|ft
argument_list|)
operator|==
literal|null
assert|;
name|counts
operator|=
name|getFacetTermEnumCounts
argument_list|(
name|searcher
argument_list|,
name|base
argument_list|,
name|field
argument_list|,
name|offset
argument_list|,
name|limit
argument_list|,
name|mincount
argument_list|,
name|missing
argument_list|,
name|sort
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
break|break;
case|case
name|FCS
case|:
assert|assert
operator|!
name|multiToken
assert|;
if|if
condition|(
name|ft
operator|.
name|getNumericType
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|sf
operator|.
name|multiValued
argument_list|()
condition|)
block|{
comment|// force numeric faceting
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
operator|!
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|FacetParams
operator|.
name|FACET_PREFIX
operator|+
literal|" is not supported on numeric types"
argument_list|)
throw|;
block|}
name|counts
operator|=
name|NumericFacets
operator|.
name|getCounts
argument_list|(
name|searcher
argument_list|,
name|base
argument_list|,
name|field
argument_list|,
name|offset
argument_list|,
name|limit
argument_list|,
name|mincount
argument_list|,
name|missing
argument_list|,
name|sort
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PerSegmentSingleValuedFaceting
name|ps
init|=
operator|new
name|PerSegmentSingleValuedFaceting
argument_list|(
name|searcher
argument_list|,
name|base
argument_list|,
name|field
argument_list|,
name|offset
argument_list|,
name|limit
argument_list|,
name|mincount
argument_list|,
name|missing
argument_list|,
name|sort
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|Executor
name|executor
init|=
name|threads
operator|==
literal|0
condition|?
name|directExecutor
else|:
name|facetExecutor
decl_stmt|;
name|ps
operator|.
name|setNumThreads
argument_list|(
name|threads
argument_list|)
expr_stmt|;
name|counts
operator|=
name|ps
operator|.
name|getFacetCounts
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FC
case|:
if|if
condition|(
name|sf
operator|.
name|hasDocValues
argument_list|()
condition|)
block|{
name|counts
operator|=
name|DocValuesFacets
operator|.
name|getCounts
argument_list|(
name|searcher
argument_list|,
name|base
argument_list|,
name|field
argument_list|,
name|offset
argument_list|,
name|limit
argument_list|,
name|mincount
argument_list|,
name|missing
argument_list|,
name|sort
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|multiToken
operator|||
name|TrieField
operator|.
name|getMainValuePrefix
argument_list|(
name|ft
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|UnInvertedField
name|uif
init|=
name|UnInvertedField
operator|.
name|getUnInvertedField
argument_list|(
name|field
argument_list|,
name|searcher
argument_list|)
decl_stmt|;
name|counts
operator|=
name|uif
operator|.
name|getCounts
argument_list|(
name|searcher
argument_list|,
name|base
argument_list|,
name|offset
argument_list|,
name|limit
argument_list|,
name|mincount
argument_list|,
name|missing
argument_list|,
name|sort
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|counts
operator|=
name|getFieldCacheCounts
argument_list|(
name|searcher
argument_list|,
name|base
argument_list|,
name|field
argument_list|,
name|offset
argument_list|,
name|limit
argument_list|,
name|mincount
argument_list|,
name|missing
argument_list|,
name|sort
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
return|return
name|counts
return|;
block|}
DECL|method|getGroupedCounts
specifier|public
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|getGroupedCounts
parameter_list|(
name|SolrIndexSearcher
name|searcher
parameter_list|,
name|DocSet
name|base
parameter_list|,
name|String
name|field
parameter_list|,
name|boolean
name|multiToken
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|limit
parameter_list|,
name|int
name|mincount
parameter_list|,
name|boolean
name|missing
parameter_list|,
name|String
name|sort
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|GroupingSpecification
name|groupingSpecification
init|=
name|rb
operator|.
name|getGroupingSpec
argument_list|()
decl_stmt|;
name|String
name|groupField
init|=
name|groupingSpecification
operator|!=
literal|null
condition|?
name|groupingSpecification
operator|.
name|getFields
argument_list|()
index|[
literal|0
index|]
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|groupField
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Specify the group.field as parameter or local parameter"
argument_list|)
throw|;
block|}
name|BytesRef
name|prefixBR
init|=
name|prefix
operator|!=
literal|null
condition|?
operator|new
name|BytesRef
argument_list|(
name|prefix
argument_list|)
else|:
literal|null
decl_stmt|;
name|TermGroupFacetCollector
name|collector
init|=
name|TermGroupFacetCollector
operator|.
name|createTermGroupFacetCollector
argument_list|(
name|groupField
argument_list|,
name|field
argument_list|,
name|multiToken
argument_list|,
name|prefixBR
argument_list|,
literal|128
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|base
operator|.
name|getTopFilter
argument_list|()
argument_list|,
name|collector
argument_list|)
expr_stmt|;
name|boolean
name|orderByCount
init|=
name|sort
operator|.
name|equals
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT_COUNT
argument_list|)
operator|||
name|sort
operator|.
name|equals
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT_COUNT_LEGACY
argument_list|)
decl_stmt|;
name|TermGroupFacetCollector
operator|.
name|GroupedFacetResult
name|result
init|=
name|collector
operator|.
name|mergeSegmentResults
argument_list|(
name|limit
operator|<
literal|0
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
operator|(
name|offset
operator|+
name|limit
operator|)
argument_list|,
name|mincount
argument_list|,
name|orderByCount
argument_list|)
decl_stmt|;
name|CharsRef
name|charsRef
init|=
operator|new
name|CharsRef
argument_list|()
decl_stmt|;
name|FieldType
name|facetFieldType
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getFieldType
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|facetCounts
init|=
operator|new
name|NamedList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TermGroupFacetCollector
operator|.
name|FacetEntry
argument_list|>
name|scopedEntries
init|=
name|result
operator|.
name|getFacetEntries
argument_list|(
name|offset
argument_list|,
name|limit
operator|<
literal|0
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|limit
argument_list|)
decl_stmt|;
for|for
control|(
name|TermGroupFacetCollector
operator|.
name|FacetEntry
name|facetEntry
range|:
name|scopedEntries
control|)
block|{
name|facetFieldType
operator|.
name|indexedToReadable
argument_list|(
name|facetEntry
operator|.
name|getValue
argument_list|()
argument_list|,
name|charsRef
argument_list|)
expr_stmt|;
name|facetCounts
operator|.
name|add
argument_list|(
name|charsRef
operator|.
name|toString
argument_list|()
argument_list|,
name|facetEntry
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|missing
condition|)
block|{
name|facetCounts
operator|.
name|add
argument_list|(
literal|null
argument_list|,
name|result
operator|.
name|getTotalMissingCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|facetCounts
return|;
block|}
DECL|field|directExecutor
specifier|static
specifier|final
name|Executor
name|directExecutor
init|=
operator|new
name|Executor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|r
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|field|facetExecutor
specifier|static
specifier|final
name|Executor
name|facetExecutor
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
comment|// terminate idle threads after 10 sec
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
comment|// directly hand off tasks
argument_list|,
operator|new
name|DefaultSolrThreadFactory
argument_list|(
literal|"facetExecutor"
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * Returns a list of value constraints and the associated facet counts     * for each facet field specified in the params.    *    * @see FacetParams#FACET_FIELD    * @see #getFieldMissingCount    * @see #getFacetTermEnumCounts    */
DECL|method|getFacetFieldCounts
specifier|public
name|NamedList
argument_list|<
name|Object
argument_list|>
name|getFacetFieldCounts
parameter_list|()
throws|throws
name|IOException
throws|,
name|SyntaxError
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|res
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|facetFs
init|=
name|params
operator|.
name|getParams
argument_list|(
name|FacetParams
operator|.
name|FACET_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|facetFs
condition|)
block|{
return|return
name|res
return|;
block|}
name|int
name|maxThreads
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getInt
argument_list|(
name|FacetParams
operator|.
name|FACET_THREADS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Executor
name|executor
init|=
name|maxThreads
operator|==
literal|0
condition|?
name|directExecutor
else|:
name|facetExecutor
decl_stmt|;
comment|// passing a negative number for FACET_THREADS implies an unlimited number of threads is acceptable.
comment|// Also, a subtlety of directeExecutor is that no matter how many times you "submit" a job, it's really
comment|// just a method call in that it's run by this thread.
name|maxThreads
operator|=
operator|(
name|maxThreads
operator|<=
literal|0
operator|)
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|maxThreads
expr_stmt|;
name|CompletionService
name|completionService
init|=
operator|new
name|ExecutorCompletionService
argument_list|(
name|executor
argument_list|)
decl_stmt|;
name|LinkedList
argument_list|<
name|Callable
argument_list|>
name|pending
init|=
operator|new
name|LinkedList
argument_list|<
name|Callable
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|facetFs
control|)
block|{
name|parseParams
argument_list|(
name|FacetParams
operator|.
name|FACET_FIELD
argument_list|,
name|f
argument_list|)
expr_stmt|;
specifier|final
name|String
name|termList
init|=
name|localParams
operator|==
literal|null
condition|?
literal|null
else|:
name|localParams
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|TERMS
argument_list|)
decl_stmt|;
specifier|final
name|String
name|workerKey
init|=
name|key
decl_stmt|;
specifier|final
name|String
name|workerFacetValue
init|=
name|facetValue
decl_stmt|;
specifier|final
name|DocSet
name|workerBase
init|=
name|this
operator|.
name|docs
decl_stmt|;
name|Callable
name|worker
init|=
operator|new
name|Callable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|result
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|termList
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|workerKey
argument_list|,
name|getListedTermCounts
argument_list|(
name|workerFacetValue
argument_list|,
name|termList
argument_list|,
name|workerBase
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|workerKey
argument_list|,
name|getTermCounts
argument_list|(
name|workerFacetValue
argument_list|,
name|workerBase
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SolrException
name|se
parameter_list|)
block|{
throw|throw
name|se
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Exception during facet.field: "
operator|+
name|workerFacetValue
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
block|}
decl_stmt|;
if|if
condition|(
operator|--
name|maxThreads
operator|>=
literal|0
condition|)
block|{
name|completionService
operator|.
name|submit
argument_list|(
name|worker
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pending
operator|.
name|add
argument_list|(
name|worker
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|f
range|:
name|facetFs
control|)
block|{
name|NamedList
name|taskResult
decl_stmt|;
try|try
block|{
name|Future
name|future
init|=
name|completionService
operator|.
name|take
argument_list|()
decl_stmt|;
name|taskResult
operator|=
operator|(
name|NamedList
operator|)
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|taskResult
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|addAll
argument_list|(
name|taskResult
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pending
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|completionService
operator|.
name|submit
argument_list|(
name|pending
operator|.
name|removeFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Processing of facet fields InterruptedException"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SolrException
condition|)
block|{
throw|throw
operator|(
name|SolrException
operator|)
name|cause
throw|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Processing of facet fields ExecutionException "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|res
return|;
block|}
DECL|method|getListedTermCounts
specifier|private
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|getListedTermCounts
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termList
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getListedTermCounts
argument_list|(
name|field
argument_list|,
name|termList
argument_list|,
name|this
operator|.
name|docs
argument_list|)
return|;
block|}
DECL|method|getListedTermCounts
specifier|private
name|NamedList
name|getListedTermCounts
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termList
parameter_list|,
name|DocSet
name|base
parameter_list|)
throws|throws
name|IOException
block|{
name|FieldType
name|ft
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getFieldType
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|terms
init|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|termList
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|res
init|=
operator|new
name|NamedList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|term
range|:
name|terms
control|)
block|{
name|String
name|internal
init|=
name|ft
operator|.
name|toInternal
argument_list|(
name|term
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|searcher
operator|.
name|numDocs
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|internal
argument_list|)
argument_list|)
argument_list|,
name|base
argument_list|)
decl_stmt|;
name|res
operator|.
name|add
argument_list|(
name|term
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|/**    * Returns a count of the documents in the set which do not have any     * terms for for the specified field.    *    * @see FacetParams#FACET_MISSING    */
DECL|method|getFieldMissingCount
specifier|public
specifier|static
name|int
name|getFieldMissingCount
parameter_list|(
name|SolrIndexSearcher
name|searcher
parameter_list|,
name|DocSet
name|docs
parameter_list|,
name|String
name|fieldName
parameter_list|)
throws|throws
name|IOException
block|{
name|SchemaField
name|sf
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|DocSet
name|hasVal
init|=
name|searcher
operator|.
name|getDocSet
argument_list|(
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|getRangeQuery
argument_list|(
literal|null
argument_list|,
name|sf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|docs
operator|.
name|andNotSize
argument_list|(
name|hasVal
argument_list|)
return|;
block|}
comment|/**    * Use the Lucene FieldCache to get counts for each unique field value in<code>docs</code>.    * The field must have at most one indexed token per document.    */
DECL|method|getFieldCacheCounts
specifier|public
specifier|static
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|getFieldCacheCounts
parameter_list|(
name|SolrIndexSearcher
name|searcher
parameter_list|,
name|DocSet
name|docs
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|limit
parameter_list|,
name|int
name|mincount
parameter_list|,
name|boolean
name|missing
parameter_list|,
name|String
name|sort
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: If the number of terms is high compared to docs.size(), and zeros==false,
comment|//  we should use an alternate strategy to avoid
comment|//  1) creating another huge int[] for the counts
comment|//  2) looping over that huge int[] looking for the rare non-zeros.
comment|//
comment|// Yet another variation: if docs.size() is small and termvectors are stored,
comment|// then use them instead of the FieldCache.
comment|//
comment|// TODO: this function is too big and could use some refactoring, but
comment|// we also need a facet cache, and refactoring of SimpleFacets instead of
comment|// trying to pass all the various params around.
name|FieldType
name|ft
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getFieldType
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|res
init|=
operator|new
name|NamedList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|SortedDocValues
name|si
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTermsIndex
argument_list|(
name|searcher
operator|.
name|getAtomicReader
argument_list|()
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
specifier|final
name|BytesRef
name|br
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
specifier|final
name|BytesRef
name|prefixRef
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|prefixRef
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prefix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|prefix
operator|=
literal|null
expr_stmt|;
name|prefixRef
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|prefixRef
operator|=
operator|new
name|BytesRef
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
name|int
name|startTermIndex
decl_stmt|,
name|endTermIndex
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|startTermIndex
operator|=
name|si
operator|.
name|lookupTerm
argument_list|(
name|prefixRef
argument_list|)
expr_stmt|;
if|if
condition|(
name|startTermIndex
operator|<
literal|0
condition|)
name|startTermIndex
operator|=
operator|-
name|startTermIndex
operator|-
literal|1
expr_stmt|;
name|prefixRef
operator|.
name|append
argument_list|(
name|UnicodeUtil
operator|.
name|BIG_TERM
argument_list|)
expr_stmt|;
name|endTermIndex
operator|=
name|si
operator|.
name|lookupTerm
argument_list|(
name|prefixRef
argument_list|)
expr_stmt|;
assert|assert
name|endTermIndex
operator|<
literal|0
assert|;
name|endTermIndex
operator|=
operator|-
name|endTermIndex
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|startTermIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|endTermIndex
operator|=
name|si
operator|.
name|getValueCount
argument_list|()
expr_stmt|;
block|}
specifier|final
name|int
name|nTerms
init|=
name|endTermIndex
operator|-
name|startTermIndex
decl_stmt|;
name|int
name|missingCount
init|=
operator|-
literal|1
decl_stmt|;
specifier|final
name|CharsRef
name|charsRef
init|=
operator|new
name|CharsRef
argument_list|(
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
name|nTerms
operator|>
literal|0
operator|&&
name|docs
operator|.
name|size
argument_list|()
operator|>=
name|mincount
condition|)
block|{
comment|// count collection array only needs to be as big as the number of terms we are
comment|// going to collect counts for.
specifier|final
name|int
index|[]
name|counts
init|=
operator|new
name|int
index|[
name|nTerms
index|]
decl_stmt|;
name|DocIterator
name|iter
init|=
name|docs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|term
init|=
name|si
operator|.
name|getOrd
argument_list|(
name|iter
operator|.
name|nextDoc
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|arrIdx
init|=
name|term
operator|-
name|startTermIndex
decl_stmt|;
if|if
condition|(
name|arrIdx
operator|>=
literal|0
operator|&&
name|arrIdx
operator|<
name|nTerms
condition|)
name|counts
index|[
name|arrIdx
index|]
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|startTermIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|missingCount
operator|=
name|counts
index|[
literal|0
index|]
expr_stmt|;
block|}
comment|// IDEA: we could also maintain a count of "other"... everything that fell outside
comment|// of the top 'N'
name|int
name|off
init|=
name|offset
decl_stmt|;
name|int
name|lim
init|=
name|limit
operator|>=
literal|0
condition|?
name|limit
else|:
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|sort
operator|.
name|equals
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT_COUNT
argument_list|)
operator|||
name|sort
operator|.
name|equals
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT_COUNT_LEGACY
argument_list|)
condition|)
block|{
name|int
name|maxsize
init|=
name|limit
operator|>
literal|0
condition|?
name|offset
operator|+
name|limit
else|:
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
decl_stmt|;
name|maxsize
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maxsize
argument_list|,
name|nTerms
argument_list|)
expr_stmt|;
name|LongPriorityQueue
name|queue
init|=
operator|new
name|LongPriorityQueue
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|maxsize
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|maxsize
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
name|int
name|min
init|=
name|mincount
operator|-
literal|1
decl_stmt|;
comment|// the smallest value in the top 'N' values
for|for
control|(
name|int
name|i
init|=
operator|(
name|startTermIndex
operator|==
operator|-
literal|1
operator|)
condition|?
literal|1
else|:
literal|0
init|;
name|i
operator|<
name|nTerms
condition|;
name|i
operator|++
control|)
block|{
name|int
name|c
init|=
name|counts
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|>
name|min
condition|)
block|{
comment|// NOTE: we use c>min rather than c>=min as an optimization because we are going in
comment|// index order, so we already know that the keys are ordered.  This can be very
comment|// important if a lot of the counts are repeated (like zero counts would be).
comment|// smaller term numbers sort higher, so subtract the term number instead
name|long
name|pair
init|=
operator|(
operator|(
operator|(
name|long
operator|)
name|c
operator|)
operator|<<
literal|32
operator|)
operator|+
operator|(
name|Integer
operator|.
name|MAX_VALUE
operator|-
name|i
operator|)
decl_stmt|;
name|boolean
name|displaced
init|=
name|queue
operator|.
name|insert
argument_list|(
name|pair
argument_list|)
decl_stmt|;
if|if
condition|(
name|displaced
condition|)
name|min
operator|=
call|(
name|int
call|)
argument_list|(
name|queue
operator|.
name|top
argument_list|()
operator|>>>
literal|32
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if we are deep paging, we don't have to order the highest "offset" counts.
name|int
name|collectCount
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|size
argument_list|()
operator|-
name|off
argument_list|)
decl_stmt|;
assert|assert
name|collectCount
operator|<=
name|lim
assert|;
comment|// the start and end indexes of our list "sorted" (starting with the highest value)
name|int
name|sortedIdxStart
init|=
name|queue
operator|.
name|size
argument_list|()
operator|-
operator|(
name|collectCount
operator|-
literal|1
operator|)
decl_stmt|;
name|int
name|sortedIdxEnd
init|=
name|queue
operator|.
name|size
argument_list|()
operator|+
literal|1
decl_stmt|;
specifier|final
name|long
index|[]
name|sorted
init|=
name|queue
operator|.
name|sort
argument_list|(
name|collectCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|sortedIdxStart
init|;
name|i
operator|<
name|sortedIdxEnd
condition|;
name|i
operator|++
control|)
block|{
name|long
name|pair
init|=
name|sorted
index|[
name|i
index|]
decl_stmt|;
name|int
name|c
init|=
call|(
name|int
call|)
argument_list|(
name|pair
operator|>>>
literal|32
argument_list|)
decl_stmt|;
name|int
name|tnum
init|=
name|Integer
operator|.
name|MAX_VALUE
operator|-
operator|(
name|int
operator|)
name|pair
decl_stmt|;
name|si
operator|.
name|lookupOrd
argument_list|(
name|startTermIndex
operator|+
name|tnum
argument_list|,
name|br
argument_list|)
expr_stmt|;
name|ft
operator|.
name|indexedToReadable
argument_list|(
name|br
argument_list|,
name|charsRef
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
name|charsRef
operator|.
name|toString
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// add results in index order
name|int
name|i
init|=
operator|(
name|startTermIndex
operator|==
operator|-
literal|1
operator|)
condition|?
literal|1
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|mincount
operator|<=
literal|0
condition|)
block|{
comment|// if mincount<=0, then we won't discard any terms and we know exactly
comment|// where to start.
name|i
operator|+=
name|off
expr_stmt|;
name|off
operator|=
literal|0
expr_stmt|;
block|}
for|for
control|(
init|;
name|i
operator|<
name|nTerms
condition|;
name|i
operator|++
control|)
block|{
name|int
name|c
init|=
name|counts
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|<
name|mincount
operator|||
operator|--
name|off
operator|>=
literal|0
condition|)
continue|continue;
if|if
condition|(
operator|--
name|lim
operator|<
literal|0
condition|)
break|break;
name|si
operator|.
name|lookupOrd
argument_list|(
name|startTermIndex
operator|+
name|i
argument_list|,
name|br
argument_list|)
expr_stmt|;
name|ft
operator|.
name|indexedToReadable
argument_list|(
name|br
argument_list|,
name|charsRef
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
name|charsRef
operator|.
name|toString
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|missing
condition|)
block|{
if|if
condition|(
name|missingCount
operator|<
literal|0
condition|)
block|{
name|missingCount
operator|=
name|getFieldMissingCount
argument_list|(
name|searcher
argument_list|,
name|docs
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|add
argument_list|(
literal|null
argument_list|,
name|missingCount
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|/**    * Returns a list of terms in the specified field along with the     * corresponding count of documents in the set that match that constraint.    * This method uses the FilterCache to get the intersection count between<code>docs</code>    * and the DocSet for each term in the filter.    *    * @see FacetParams#FACET_LIMIT    * @see FacetParams#FACET_ZEROS    * @see FacetParams#FACET_MISSING    */
DECL|method|getFacetTermEnumCounts
specifier|public
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|getFacetTermEnumCounts
parameter_list|(
name|SolrIndexSearcher
name|searcher
parameter_list|,
name|DocSet
name|docs
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|limit
parameter_list|,
name|int
name|mincount
parameter_list|,
name|boolean
name|missing
parameter_list|,
name|String
name|sort
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
comment|/* :TODO: potential optimization...     * cache the Terms with the highest docFreq and try them first     * don't enum if we get our max from them     */
comment|// Minimum term docFreq in order to use the filterCache for that term.
name|int
name|minDfFilterCache
init|=
name|params
operator|.
name|getFieldInt
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_ENUM_CACHE_MINDF
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// make sure we have a set that is fast for random access, if we will use it for that
name|DocSet
name|fastForRandomSet
init|=
name|docs
decl_stmt|;
if|if
condition|(
name|minDfFilterCache
operator|>
literal|0
operator|&&
name|docs
operator|instanceof
name|SortedIntDocSet
condition|)
block|{
name|SortedIntDocSet
name|sset
init|=
operator|(
name|SortedIntDocSet
operator|)
name|docs
decl_stmt|;
name|fastForRandomSet
operator|=
operator|new
name|HashDocSet
argument_list|(
name|sset
operator|.
name|getDocs
argument_list|()
argument_list|,
literal|0
argument_list|,
name|sset
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|IndexSchema
name|schema
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|AtomicReader
name|r
init|=
name|searcher
operator|.
name|getAtomicReader
argument_list|()
decl_stmt|;
name|FieldType
name|ft
init|=
name|schema
operator|.
name|getFieldType
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|boolean
name|sortByCount
init|=
name|sort
operator|.
name|equals
argument_list|(
literal|"count"
argument_list|)
operator|||
name|sort
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxsize
init|=
name|limit
operator|>=
literal|0
condition|?
name|offset
operator|+
name|limit
else|:
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
decl_stmt|;
specifier|final
name|BoundedTreeSet
argument_list|<
name|CountPair
argument_list|<
name|BytesRef
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|queue
init|=
name|sortByCount
condition|?
operator|new
name|BoundedTreeSet
argument_list|<
name|CountPair
argument_list|<
name|BytesRef
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|(
name|maxsize
argument_list|)
else|:
literal|null
decl_stmt|;
specifier|final
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|res
init|=
operator|new
name|NamedList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|min
init|=
name|mincount
operator|-
literal|1
decl_stmt|;
comment|// the smallest value in the top 'N' values
name|int
name|off
init|=
name|offset
decl_stmt|;
name|int
name|lim
init|=
name|limit
operator|>=
literal|0
condition|?
name|limit
else|:
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|BytesRef
name|startTermBytes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|String
name|indexedPrefix
init|=
name|ft
operator|.
name|toInternal
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
name|startTermBytes
operator|=
operator|new
name|BytesRef
argument_list|(
name|indexedPrefix
argument_list|)
expr_stmt|;
block|}
name|Fields
name|fields
init|=
name|r
operator|.
name|fields
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|fields
operator|==
literal|null
condition|?
literal|null
else|:
name|fields
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|TermsEnum
name|termsEnum
init|=
literal|null
decl_stmt|;
name|SolrIndexSearcher
operator|.
name|DocsEnumState
name|deState
init|=
literal|null
decl_stmt|;
name|BytesRef
name|term
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
name|termsEnum
operator|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for
comment|// facet.offset when sorting by index order.
if|if
condition|(
name|startTermBytes
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|termsEnum
operator|.
name|seekCeil
argument_list|(
name|startTermBytes
argument_list|)
operator|==
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|END
condition|)
block|{
name|termsEnum
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|term
operator|=
name|termsEnum
operator|.
name|term
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// position termsEnum on first term
name|term
operator|=
name|termsEnum
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
name|DocsEnum
name|docsEnum
init|=
literal|null
decl_stmt|;
name|CharsRef
name|charsRef
init|=
operator|new
name|CharsRef
argument_list|(
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
name|docs
operator|.
name|size
argument_list|()
operator|>=
name|mincount
condition|)
block|{
while|while
condition|(
name|term
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|startTermBytes
operator|!=
literal|null
operator|&&
operator|!
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|term
argument_list|,
name|startTermBytes
argument_list|)
condition|)
break|break;
name|int
name|df
init|=
name|termsEnum
operator|.
name|docFreq
argument_list|()
decl_stmt|;
comment|// If we are sorting, we can use df>min (rather than>=) since we
comment|// are going in index order.  For certain term distributions this can
comment|// make a large difference (for example, many terms with df=1).
if|if
condition|(
name|df
operator|>
literal|0
operator|&&
name|df
operator|>
name|min
condition|)
block|{
name|int
name|c
decl_stmt|;
if|if
condition|(
name|df
operator|>=
name|minDfFilterCache
condition|)
block|{
comment|// use the filter cache
if|if
condition|(
name|deState
operator|==
literal|null
condition|)
block|{
name|deState
operator|=
operator|new
name|SolrIndexSearcher
operator|.
name|DocsEnumState
argument_list|()
expr_stmt|;
name|deState
operator|.
name|fieldName
operator|=
name|field
expr_stmt|;
name|deState
operator|.
name|liveDocs
operator|=
name|r
operator|.
name|getLiveDocs
argument_list|()
expr_stmt|;
name|deState
operator|.
name|termsEnum
operator|=
name|termsEnum
expr_stmt|;
name|deState
operator|.
name|docsEnum
operator|=
name|docsEnum
expr_stmt|;
block|}
name|c
operator|=
name|searcher
operator|.
name|numDocs
argument_list|(
name|docs
argument_list|,
name|deState
argument_list|)
expr_stmt|;
name|docsEnum
operator|=
name|deState
operator|.
name|docsEnum
expr_stmt|;
block|}
else|else
block|{
comment|// iterate over TermDocs to calculate the intersection
comment|// TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?
comment|// TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)
comment|// TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?
name|docsEnum
operator|=
name|termsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|docsEnum
argument_list|,
name|DocsEnum
operator|.
name|FLAG_NONE
argument_list|)
expr_stmt|;
name|c
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|docsEnum
operator|instanceof
name|MultiDocsEnum
condition|)
block|{
name|MultiDocsEnum
operator|.
name|EnumWithSlice
index|[]
name|subs
init|=
operator|(
operator|(
name|MultiDocsEnum
operator|)
name|docsEnum
operator|)
operator|.
name|getSubs
argument_list|()
decl_stmt|;
name|int
name|numSubs
init|=
operator|(
operator|(
name|MultiDocsEnum
operator|)
name|docsEnum
operator|)
operator|.
name|getNumSubs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|subindex
init|=
literal|0
init|;
name|subindex
operator|<
name|numSubs
condition|;
name|subindex
operator|++
control|)
block|{
name|MultiDocsEnum
operator|.
name|EnumWithSlice
name|sub
init|=
name|subs
index|[
name|subindex
index|]
decl_stmt|;
if|if
condition|(
name|sub
operator|.
name|docsEnum
operator|==
literal|null
condition|)
continue|continue;
name|int
name|base
init|=
name|sub
operator|.
name|slice
operator|.
name|start
decl_stmt|;
name|int
name|docid
decl_stmt|;
while|while
condition|(
operator|(
name|docid
operator|=
name|sub
operator|.
name|docsEnum
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
if|if
condition|(
name|fastForRandomSet
operator|.
name|exists
argument_list|(
name|docid
operator|+
name|base
argument_list|)
condition|)
name|c
operator|++
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|int
name|docid
decl_stmt|;
while|while
condition|(
operator|(
name|docid
operator|=
name|docsEnum
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
if|if
condition|(
name|fastForRandomSet
operator|.
name|exists
argument_list|(
name|docid
argument_list|)
condition|)
name|c
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|sortByCount
condition|)
block|{
if|if
condition|(
name|c
operator|>
name|min
condition|)
block|{
name|BytesRef
name|termCopy
init|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|term
argument_list|)
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
operator|new
name|CountPair
argument_list|<
name|BytesRef
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|termCopy
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|>=
name|maxsize
condition|)
name|min
operator|=
name|queue
operator|.
name|last
argument_list|()
operator|.
name|val
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|c
operator|>=
name|mincount
operator|&&
operator|--
name|off
operator|<
literal|0
condition|)
block|{
if|if
condition|(
operator|--
name|lim
operator|<
literal|0
condition|)
break|break;
name|ft
operator|.
name|indexedToReadable
argument_list|(
name|term
argument_list|,
name|charsRef
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
name|charsRef
operator|.
name|toString
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|term
operator|=
name|termsEnum
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sortByCount
condition|)
block|{
for|for
control|(
name|CountPair
argument_list|<
name|BytesRef
argument_list|,
name|Integer
argument_list|>
name|p
range|:
name|queue
control|)
block|{
if|if
condition|(
operator|--
name|off
operator|>=
literal|0
condition|)
continue|continue;
if|if
condition|(
operator|--
name|lim
operator|<
literal|0
condition|)
break|break;
name|ft
operator|.
name|indexedToReadable
argument_list|(
name|p
operator|.
name|key
argument_list|,
name|charsRef
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
name|charsRef
operator|.
name|toString
argument_list|()
argument_list|,
name|p
operator|.
name|val
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|missing
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
literal|null
argument_list|,
name|getFieldMissingCount
argument_list|(
name|searcher
argument_list|,
name|docs
argument_list|,
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|/**    * Returns a list of value constraints and the associated facet counts     * for each facet date field, range, and interval specified in the    * SolrParams    *    * @see FacetParams#FACET_DATE    * @deprecated Use getFacetRangeCounts which is more generalized    */
annotation|@
name|Deprecated
DECL|method|getFacetDateCounts
specifier|public
name|NamedList
argument_list|<
name|Object
argument_list|>
name|getFacetDateCounts
parameter_list|()
throws|throws
name|IOException
throws|,
name|SyntaxError
block|{
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|resOuter
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|fields
init|=
name|params
operator|.
name|getParams
argument_list|(
name|FacetParams
operator|.
name|FACET_DATE
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|fields
operator|||
literal|0
operator|==
name|fields
operator|.
name|length
condition|)
return|return
name|resOuter
return|;
for|for
control|(
name|String
name|f
range|:
name|fields
control|)
block|{
name|getFacetDateCounts
argument_list|(
name|f
argument_list|,
name|resOuter
argument_list|)
expr_stmt|;
block|}
return|return
name|resOuter
return|;
block|}
comment|/**    * @deprecated Use getFacetRangeCounts which is more generalized    */
annotation|@
name|Deprecated
DECL|method|getFacetDateCounts
specifier|public
name|void
name|getFacetDateCounts
parameter_list|(
name|String
name|dateFacet
parameter_list|,
name|NamedList
argument_list|<
name|Object
argument_list|>
name|resOuter
parameter_list|)
throws|throws
name|IOException
throws|,
name|SyntaxError
block|{
specifier|final
name|IndexSchema
name|schema
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|parseParams
argument_list|(
name|FacetParams
operator|.
name|FACET_DATE
argument_list|,
name|dateFacet
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|facetValue
decl_stmt|;
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|resInner
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|resOuter
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|resInner
argument_list|)
expr_stmt|;
specifier|final
name|SchemaField
name|sf
init|=
name|schema
operator|.
name|getField
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|sf
operator|.
name|getType
argument_list|()
operator|instanceof
name|DateField
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Can not date facet on a field which is not a DateField: "
operator|+
name|f
argument_list|)
throw|;
block|}
specifier|final
name|DateField
name|ft
init|=
operator|(
name|DateField
operator|)
name|sf
operator|.
name|getType
argument_list|()
decl_stmt|;
specifier|final
name|String
name|startS
init|=
name|required
operator|.
name|getFieldParam
argument_list|(
name|f
argument_list|,
name|FacetParams
operator|.
name|FACET_DATE_START
argument_list|)
decl_stmt|;
specifier|final
name|Date
name|start
decl_stmt|;
try|try
block|{
name|start
operator|=
name|ft
operator|.
name|parseMath
argument_list|(
literal|null
argument_list|,
name|startS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"date facet 'start' is not a valid Date string: "
operator|+
name|startS
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|String
name|endS
init|=
name|required
operator|.
name|getFieldParam
argument_list|(
name|f
argument_list|,
name|FacetParams
operator|.
name|FACET_DATE_END
argument_list|)
decl_stmt|;
name|Date
name|end
decl_stmt|;
comment|// not final, hardend may change this
try|try
block|{
name|end
operator|=
name|ft
operator|.
name|parseMath
argument_list|(
literal|null
argument_list|,
name|endS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"date facet 'end' is not a valid Date string: "
operator|+
name|endS
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|end
operator|.
name|before
argument_list|(
name|start
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"date facet 'end' comes before 'start': "
operator|+
name|endS
operator|+
literal|"< "
operator|+
name|startS
argument_list|)
throw|;
block|}
specifier|final
name|String
name|gap
init|=
name|required
operator|.
name|getFieldParam
argument_list|(
name|f
argument_list|,
name|FacetParams
operator|.
name|FACET_DATE_GAP
argument_list|)
decl_stmt|;
specifier|final
name|DateMathParser
name|dmp
init|=
operator|new
name|DateMathParser
argument_list|()
decl_stmt|;
specifier|final
name|int
name|minCount
init|=
name|params
operator|.
name|getFieldInt
argument_list|(
name|f
argument_list|,
name|FacetParams
operator|.
name|FACET_MINCOUNT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
index|[]
name|iStrs
init|=
name|params
operator|.
name|getFieldParams
argument_list|(
name|f
argument_list|,
name|FacetParams
operator|.
name|FACET_DATE_INCLUDE
argument_list|)
decl_stmt|;
comment|// Legacy support for default of [lower,upper,edge] for date faceting
comment|// this is not handled by FacetRangeInclude.parseParam because
comment|// range faceting has differnet defaults
specifier|final
name|EnumSet
argument_list|<
name|FacetRangeInclude
argument_list|>
name|include
init|=
operator|(
literal|null
operator|==
name|iStrs
operator|||
literal|0
operator|==
name|iStrs
operator|.
name|length
operator|)
condition|?
name|EnumSet
operator|.
name|of
argument_list|(
name|FacetRangeInclude
operator|.
name|LOWER
argument_list|,
name|FacetRangeInclude
operator|.
name|UPPER
argument_list|,
name|FacetRangeInclude
operator|.
name|EDGE
argument_list|)
else|:
name|FacetRangeInclude
operator|.
name|parseParam
argument_list|(
name|iStrs
argument_list|)
decl_stmt|;
try|try
block|{
name|Date
name|low
init|=
name|start
decl_stmt|;
while|while
condition|(
name|low
operator|.
name|before
argument_list|(
name|end
argument_list|)
condition|)
block|{
name|dmp
operator|.
name|setNow
argument_list|(
name|low
argument_list|)
expr_stmt|;
name|String
name|label
init|=
name|ft
operator|.
name|toExternal
argument_list|(
name|low
argument_list|)
decl_stmt|;
name|Date
name|high
init|=
name|dmp
operator|.
name|parseMath
argument_list|(
name|gap
argument_list|)
decl_stmt|;
if|if
condition|(
name|end
operator|.
name|before
argument_list|(
name|high
argument_list|)
condition|)
block|{
if|if
condition|(
name|params
operator|.
name|getFieldBool
argument_list|(
name|f
argument_list|,
name|FacetParams
operator|.
name|FACET_DATE_HARD_END
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|high
operator|=
name|end
expr_stmt|;
block|}
else|else
block|{
name|end
operator|=
name|high
expr_stmt|;
block|}
block|}
if|if
condition|(
name|high
operator|.
name|before
argument_list|(
name|low
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"date facet infinite loop (is gap negative?)"
argument_list|)
throw|;
block|}
if|if
condition|(
name|high
operator|.
name|equals
argument_list|(
name|low
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"date facet infinite loop: gap is effectively zero"
argument_list|)
throw|;
block|}
specifier|final
name|boolean
name|includeLower
init|=
operator|(
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|LOWER
argument_list|)
operator|||
operator|(
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|EDGE
argument_list|)
operator|&&
name|low
operator|.
name|equals
argument_list|(
name|start
argument_list|)
operator|)
operator|)
decl_stmt|;
specifier|final
name|boolean
name|includeUpper
init|=
operator|(
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|UPPER
argument_list|)
operator|||
operator|(
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|EDGE
argument_list|)
operator|&&
name|high
operator|.
name|equals
argument_list|(
name|end
argument_list|)
operator|)
operator|)
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|rangeCount
argument_list|(
name|sf
argument_list|,
name|low
argument_list|,
name|high
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>=
name|minCount
condition|)
block|{
name|resInner
operator|.
name|add
argument_list|(
name|label
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|low
operator|=
name|high
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|text
operator|.
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"date facet 'gap' is not a valid Date Math string: "
operator|+
name|gap
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// explicitly return the gap and end so all the counts
comment|// (including before/after/between) are meaningful - even if mincount
comment|// has removed the neighboring ranges
name|resInner
operator|.
name|add
argument_list|(
literal|"gap"
argument_list|,
name|gap
argument_list|)
expr_stmt|;
name|resInner
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|resInner
operator|.
name|add
argument_list|(
literal|"end"
argument_list|,
name|end
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|othersP
init|=
name|params
operator|.
name|getFieldParams
argument_list|(
name|f
argument_list|,
name|FacetParams
operator|.
name|FACET_DATE_OTHER
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|othersP
operator|&&
literal|0
operator|<
name|othersP
operator|.
name|length
condition|)
block|{
specifier|final
name|Set
argument_list|<
name|FacetRangeOther
argument_list|>
name|others
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|FacetRangeOther
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|o
range|:
name|othersP
control|)
block|{
name|others
operator|.
name|add
argument_list|(
name|FacetRangeOther
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// no matter what other values are listed, we don't do
comment|// anything if "none" is specified.
if|if
condition|(
operator|!
name|others
operator|.
name|contains
argument_list|(
name|FacetRangeOther
operator|.
name|NONE
argument_list|)
condition|)
block|{
name|boolean
name|all
init|=
name|others
operator|.
name|contains
argument_list|(
name|FacetRangeOther
operator|.
name|ALL
argument_list|)
decl_stmt|;
if|if
condition|(
name|all
operator|||
name|others
operator|.
name|contains
argument_list|(
name|FacetRangeOther
operator|.
name|BEFORE
argument_list|)
condition|)
block|{
comment|// include upper bound if "outer" or if first gap doesn't already include it
name|resInner
operator|.
name|add
argument_list|(
name|FacetRangeOther
operator|.
name|BEFORE
operator|.
name|toString
argument_list|()
argument_list|,
name|rangeCount
argument_list|(
name|sf
argument_list|,
literal|null
argument_list|,
name|start
argument_list|,
literal|false
argument_list|,
operator|(
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|OUTER
argument_list|)
operator|||
operator|(
operator|!
operator|(
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|LOWER
argument_list|)
operator|||
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|EDGE
argument_list|)
operator|)
operator|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|all
operator|||
name|others
operator|.
name|contains
argument_list|(
name|FacetRangeOther
operator|.
name|AFTER
argument_list|)
condition|)
block|{
comment|// include lower bound if "outer" or if last gap doesn't already include it
name|resInner
operator|.
name|add
argument_list|(
name|FacetRangeOther
operator|.
name|AFTER
operator|.
name|toString
argument_list|()
argument_list|,
name|rangeCount
argument_list|(
name|sf
argument_list|,
name|end
argument_list|,
literal|null
argument_list|,
operator|(
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|OUTER
argument_list|)
operator|||
operator|(
operator|!
operator|(
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|UPPER
argument_list|)
operator|||
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|EDGE
argument_list|)
operator|)
operator|)
operator|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|all
operator|||
name|others
operator|.
name|contains
argument_list|(
name|FacetRangeOther
operator|.
name|BETWEEN
argument_list|)
condition|)
block|{
name|resInner
operator|.
name|add
argument_list|(
name|FacetRangeOther
operator|.
name|BETWEEN
operator|.
name|toString
argument_list|()
argument_list|,
name|rangeCount
argument_list|(
name|sf
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
operator|(
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|LOWER
argument_list|)
operator|||
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|EDGE
argument_list|)
operator|)
argument_list|,
operator|(
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|UPPER
argument_list|)
operator|||
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|EDGE
argument_list|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Returns a list of value constraints and the associated facet    * counts for each facet numerical field, range, and interval    * specified in the SolrParams    *    * @see FacetParams#FACET_RANGE    */
DECL|method|getFacetRangeCounts
specifier|public
name|NamedList
argument_list|<
name|Object
argument_list|>
name|getFacetRangeCounts
parameter_list|()
throws|throws
name|IOException
throws|,
name|SyntaxError
block|{
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|resOuter
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|fields
init|=
name|params
operator|.
name|getParams
argument_list|(
name|FacetParams
operator|.
name|FACET_RANGE
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|fields
operator|||
literal|0
operator|==
name|fields
operator|.
name|length
condition|)
return|return
name|resOuter
return|;
for|for
control|(
name|String
name|f
range|:
name|fields
control|)
block|{
name|getFacetRangeCounts
argument_list|(
name|f
argument_list|,
name|resOuter
argument_list|)
expr_stmt|;
block|}
return|return
name|resOuter
return|;
block|}
DECL|method|getFacetRangeCounts
name|void
name|getFacetRangeCounts
parameter_list|(
name|String
name|facetRange
parameter_list|,
name|NamedList
argument_list|<
name|Object
argument_list|>
name|resOuter
parameter_list|)
throws|throws
name|IOException
throws|,
name|SyntaxError
block|{
specifier|final
name|IndexSchema
name|schema
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|parseParams
argument_list|(
name|FacetParams
operator|.
name|FACET_RANGE
argument_list|,
name|facetRange
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|facetValue
decl_stmt|;
specifier|final
name|SchemaField
name|sf
init|=
name|schema
operator|.
name|getField
argument_list|(
name|f
argument_list|)
decl_stmt|;
specifier|final
name|FieldType
name|ft
init|=
name|sf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|RangeEndpointCalculator
argument_list|<
name|?
argument_list|>
name|calc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ft
operator|instanceof
name|TrieField
condition|)
block|{
specifier|final
name|TrieField
name|trie
init|=
operator|(
name|TrieField
operator|)
name|ft
decl_stmt|;
switch|switch
condition|(
name|trie
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|FLOAT
case|:
name|calc
operator|=
operator|new
name|FloatRangeEndpointCalculator
argument_list|(
name|sf
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|calc
operator|=
operator|new
name|DoubleRangeEndpointCalculator
argument_list|(
name|sf
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTEGER
case|:
name|calc
operator|=
operator|new
name|IntegerRangeEndpointCalculator
argument_list|(
name|sf
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|calc
operator|=
operator|new
name|LongRangeEndpointCalculator
argument_list|(
name|sf
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unable to range facet on tried field of unexpected type:"
operator|+
name|f
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ft
operator|instanceof
name|DateField
condition|)
block|{
name|calc
operator|=
operator|new
name|DateRangeEndpointCalculator
argument_list|(
name|sf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ft
operator|instanceof
name|SortableIntField
condition|)
block|{
name|calc
operator|=
operator|new
name|IntegerRangeEndpointCalculator
argument_list|(
name|sf
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ft
operator|instanceof
name|SortableLongField
condition|)
block|{
name|calc
operator|=
operator|new
name|LongRangeEndpointCalculator
argument_list|(
name|sf
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ft
operator|instanceof
name|SortableFloatField
condition|)
block|{
name|calc
operator|=
operator|new
name|FloatRangeEndpointCalculator
argument_list|(
name|sf
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ft
operator|instanceof
name|SortableDoubleField
condition|)
block|{
name|calc
operator|=
operator|new
name|DoubleRangeEndpointCalculator
argument_list|(
name|sf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unable to range facet on field:"
operator|+
name|sf
argument_list|)
throw|;
block|}
name|resOuter
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|getFacetRangeCounts
argument_list|(
name|sf
argument_list|,
name|calc
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getFacetRangeCounts
specifier|private
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|NamedList
name|getFacetRangeCounts
parameter_list|(
specifier|final
name|SchemaField
name|sf
parameter_list|,
specifier|final
name|RangeEndpointCalculator
argument_list|<
name|T
argument_list|>
name|calc
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|f
init|=
name|sf
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|res
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|counts
init|=
operator|new
name|NamedList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|res
operator|.
name|add
argument_list|(
literal|"counts"
argument_list|,
name|counts
argument_list|)
expr_stmt|;
specifier|final
name|T
name|start
init|=
name|calc
operator|.
name|getValue
argument_list|(
name|required
operator|.
name|getFieldParam
argument_list|(
name|f
argument_list|,
name|FacetParams
operator|.
name|FACET_RANGE_START
argument_list|)
argument_list|)
decl_stmt|;
comment|// not final, hardend may change this
name|T
name|end
init|=
name|calc
operator|.
name|getValue
argument_list|(
name|required
operator|.
name|getFieldParam
argument_list|(
name|f
argument_list|,
name|FacetParams
operator|.
name|FACET_RANGE_END
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|end
operator|.
name|compareTo
argument_list|(
name|start
argument_list|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"range facet 'end' comes before 'start': "
operator|+
name|end
operator|+
literal|"< "
operator|+
name|start
argument_list|)
throw|;
block|}
specifier|final
name|String
name|gap
init|=
name|required
operator|.
name|getFieldParam
argument_list|(
name|f
argument_list|,
name|FacetParams
operator|.
name|FACET_RANGE_GAP
argument_list|)
decl_stmt|;
comment|// explicitly return the gap.  compute this early so we are more
comment|// likely to catch parse errors before attempting math
name|res
operator|.
name|add
argument_list|(
literal|"gap"
argument_list|,
name|calc
operator|.
name|getGap
argument_list|(
name|gap
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|minCount
init|=
name|params
operator|.
name|getFieldInt
argument_list|(
name|f
argument_list|,
name|FacetParams
operator|.
name|FACET_MINCOUNT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|EnumSet
argument_list|<
name|FacetRangeInclude
argument_list|>
name|include
init|=
name|FacetRangeInclude
operator|.
name|parseParam
argument_list|(
name|params
operator|.
name|getFieldParams
argument_list|(
name|f
argument_list|,
name|FacetParams
operator|.
name|FACET_RANGE_INCLUDE
argument_list|)
argument_list|)
decl_stmt|;
name|T
name|low
init|=
name|start
decl_stmt|;
while|while
condition|(
name|low
operator|.
name|compareTo
argument_list|(
name|end
argument_list|)
operator|<
literal|0
condition|)
block|{
name|T
name|high
init|=
name|calc
operator|.
name|addGap
argument_list|(
name|low
argument_list|,
name|gap
argument_list|)
decl_stmt|;
if|if
condition|(
name|end
operator|.
name|compareTo
argument_list|(
name|high
argument_list|)
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|params
operator|.
name|getFieldBool
argument_list|(
name|f
argument_list|,
name|FacetParams
operator|.
name|FACET_RANGE_HARD_END
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|high
operator|=
name|end
expr_stmt|;
block|}
else|else
block|{
name|end
operator|=
name|high
expr_stmt|;
block|}
block|}
if|if
condition|(
name|high
operator|.
name|compareTo
argument_list|(
name|low
argument_list|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"range facet infinite loop (is gap negative? did the math overflow?)"
argument_list|)
throw|;
block|}
if|if
condition|(
name|high
operator|.
name|compareTo
argument_list|(
name|low
argument_list|)
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: "
operator|+
name|low
operator|+
literal|" + "
operator|+
name|gap
operator|+
literal|" = "
operator|+
name|high
argument_list|)
throw|;
block|}
specifier|final
name|boolean
name|includeLower
init|=
operator|(
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|LOWER
argument_list|)
operator|||
operator|(
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|EDGE
argument_list|)
operator|&&
literal|0
operator|==
name|low
operator|.
name|compareTo
argument_list|(
name|start
argument_list|)
operator|)
operator|)
decl_stmt|;
specifier|final
name|boolean
name|includeUpper
init|=
operator|(
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|UPPER
argument_list|)
operator|||
operator|(
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|EDGE
argument_list|)
operator|&&
literal|0
operator|==
name|high
operator|.
name|compareTo
argument_list|(
name|end
argument_list|)
operator|)
operator|)
decl_stmt|;
specifier|final
name|String
name|lowS
init|=
name|calc
operator|.
name|formatValue
argument_list|(
name|low
argument_list|)
decl_stmt|;
specifier|final
name|String
name|highS
init|=
name|calc
operator|.
name|formatValue
argument_list|(
name|high
argument_list|)
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|rangeCount
argument_list|(
name|sf
argument_list|,
name|lowS
argument_list|,
name|highS
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>=
name|minCount
condition|)
block|{
name|counts
operator|.
name|add
argument_list|(
name|lowS
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|low
operator|=
name|high
expr_stmt|;
block|}
comment|// explicitly return the start and end so all the counts
comment|// (including before/after/between) are meaningful - even if mincount
comment|// has removed the neighboring ranges
name|res
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
literal|"end"
argument_list|,
name|end
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|othersP
init|=
name|params
operator|.
name|getFieldParams
argument_list|(
name|f
argument_list|,
name|FacetParams
operator|.
name|FACET_RANGE_OTHER
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|othersP
operator|&&
literal|0
operator|<
name|othersP
operator|.
name|length
condition|)
block|{
name|Set
argument_list|<
name|FacetRangeOther
argument_list|>
name|others
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|FacetRangeOther
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|o
range|:
name|othersP
control|)
block|{
name|others
operator|.
name|add
argument_list|(
name|FacetRangeOther
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// no matter what other values are listed, we don't do
comment|// anything if "none" is specified.
if|if
condition|(
operator|!
name|others
operator|.
name|contains
argument_list|(
name|FacetRangeOther
operator|.
name|NONE
argument_list|)
condition|)
block|{
name|boolean
name|all
init|=
name|others
operator|.
name|contains
argument_list|(
name|FacetRangeOther
operator|.
name|ALL
argument_list|)
decl_stmt|;
specifier|final
name|String
name|startS
init|=
name|calc
operator|.
name|formatValue
argument_list|(
name|start
argument_list|)
decl_stmt|;
specifier|final
name|String
name|endS
init|=
name|calc
operator|.
name|formatValue
argument_list|(
name|end
argument_list|)
decl_stmt|;
if|if
condition|(
name|all
operator|||
name|others
operator|.
name|contains
argument_list|(
name|FacetRangeOther
operator|.
name|BEFORE
argument_list|)
condition|)
block|{
comment|// include upper bound if "outer" or if first gap doesn't already include it
name|res
operator|.
name|add
argument_list|(
name|FacetRangeOther
operator|.
name|BEFORE
operator|.
name|toString
argument_list|()
argument_list|,
name|rangeCount
argument_list|(
name|sf
argument_list|,
literal|null
argument_list|,
name|startS
argument_list|,
literal|false
argument_list|,
operator|(
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|OUTER
argument_list|)
operator|||
operator|(
operator|!
operator|(
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|LOWER
argument_list|)
operator|||
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|EDGE
argument_list|)
operator|)
operator|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|all
operator|||
name|others
operator|.
name|contains
argument_list|(
name|FacetRangeOther
operator|.
name|AFTER
argument_list|)
condition|)
block|{
comment|// include lower bound if "outer" or if last gap doesn't already include it
name|res
operator|.
name|add
argument_list|(
name|FacetRangeOther
operator|.
name|AFTER
operator|.
name|toString
argument_list|()
argument_list|,
name|rangeCount
argument_list|(
name|sf
argument_list|,
name|endS
argument_list|,
literal|null
argument_list|,
operator|(
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|OUTER
argument_list|)
operator|||
operator|(
operator|!
operator|(
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|UPPER
argument_list|)
operator|||
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|EDGE
argument_list|)
operator|)
operator|)
operator|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|all
operator|||
name|others
operator|.
name|contains
argument_list|(
name|FacetRangeOther
operator|.
name|BETWEEN
argument_list|)
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
name|FacetRangeOther
operator|.
name|BETWEEN
operator|.
name|toString
argument_list|()
argument_list|,
name|rangeCount
argument_list|(
name|sf
argument_list|,
name|startS
argument_list|,
name|endS
argument_list|,
operator|(
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|LOWER
argument_list|)
operator|||
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|EDGE
argument_list|)
operator|)
argument_list|,
operator|(
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|UPPER
argument_list|)
operator|||
name|include
operator|.
name|contains
argument_list|(
name|FacetRangeInclude
operator|.
name|EDGE
argument_list|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|res
return|;
block|}
comment|/**    * Macro for getting the numDocs of range over docs    * @see SolrIndexSearcher#numDocs    * @see TermRangeQuery    */
DECL|method|rangeCount
specifier|protected
name|int
name|rangeCount
parameter_list|(
name|SchemaField
name|sf
parameter_list|,
name|String
name|low
parameter_list|,
name|String
name|high
parameter_list|,
name|boolean
name|iLow
parameter_list|,
name|boolean
name|iHigh
parameter_list|)
throws|throws
name|IOException
block|{
name|Query
name|rangeQ
init|=
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|getRangeQuery
argument_list|(
literal|null
argument_list|,
name|sf
argument_list|,
name|low
argument_list|,
name|high
argument_list|,
name|iLow
argument_list|,
name|iHigh
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|.
name|getBool
argument_list|(
name|GroupParams
operator|.
name|GROUP_FACET
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return
name|getGroupedFacetQueryCount
argument_list|(
name|rangeQ
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|searcher
operator|.
name|numDocs
argument_list|(
name|rangeQ
argument_list|,
name|docs
argument_list|)
return|;
block|}
block|}
comment|/**    * @deprecated Use rangeCount(SchemaField,String,String,boolean,boolean) which is more generalized    */
annotation|@
name|Deprecated
DECL|method|rangeCount
specifier|protected
name|int
name|rangeCount
parameter_list|(
name|SchemaField
name|sf
parameter_list|,
name|Date
name|low
parameter_list|,
name|Date
name|high
parameter_list|,
name|boolean
name|iLow
parameter_list|,
name|boolean
name|iHigh
parameter_list|)
throws|throws
name|IOException
block|{
name|Query
name|rangeQ
init|=
operator|(
call|(
name|DateField
call|)
argument_list|(
name|sf
operator|.
name|getType
argument_list|()
argument_list|)
operator|)
operator|.
name|getRangeQuery
argument_list|(
literal|null
argument_list|,
name|sf
argument_list|,
name|low
argument_list|,
name|high
argument_list|,
name|iLow
argument_list|,
name|iHigh
argument_list|)
decl_stmt|;
return|return
name|searcher
operator|.
name|numDocs
argument_list|(
name|rangeQ
argument_list|,
name|docs
argument_list|)
return|;
block|}
comment|/**    * A simple key=>val pair whose natural order is such that     *<b>higher</b> vals come before lower vals.    * In case of tie vals, then<b>lower</b> keys come before higher keys.    */
DECL|class|CountPair
specifier|public
specifier|static
class|class
name|CountPair
parameter_list|<
name|K
extends|extends
name|Comparable
parameter_list|<
name|?
super|super
name|K
parameter_list|>
parameter_list|,
name|V
extends|extends
name|Comparable
parameter_list|<
name|?
super|super
name|V
parameter_list|>
parameter_list|>
implements|implements
name|Comparable
argument_list|<
name|CountPair
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|method|CountPair
specifier|public
name|CountPair
parameter_list|(
name|K
name|k
parameter_list|,
name|V
name|v
parameter_list|)
block|{
name|key
operator|=
name|k
expr_stmt|;
name|val
operator|=
name|v
expr_stmt|;
block|}
DECL|field|key
specifier|public
name|K
name|key
decl_stmt|;
DECL|field|val
specifier|public
name|V
name|val
decl_stmt|;
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|key
operator|.
name|hashCode
argument_list|()
operator|^
name|val
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|CountPair
operator|)
condition|)
return|return
literal|false
return|;
name|CountPair
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|that
init|=
operator|(
name|CountPair
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
return|return
operator|(
name|this
operator|.
name|key
operator|.
name|equals
argument_list|(
name|that
operator|.
name|key
argument_list|)
operator|&&
name|this
operator|.
name|val
operator|.
name|equals
argument_list|(
name|that
operator|.
name|val
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|CountPair
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|o
parameter_list|)
block|{
name|int
name|vc
init|=
name|o
operator|.
name|val
operator|.
name|compareTo
argument_list|(
name|val
argument_list|)
decl_stmt|;
return|return
operator|(
literal|0
operator|!=
name|vc
condition|?
name|vc
else|:
name|key
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|key
argument_list|)
operator|)
return|;
block|}
block|}
comment|/**    * Perhaps someday instead of having a giant "instanceof" case     * statement to pick an impl, we can add a "RangeFacetable" marker     * interface to FieldTypes and they can return instances of these     * directly from some method -- but until then, keep this locked down     * and private.    */
DECL|class|RangeEndpointCalculator
specifier|private
specifier|static
specifier|abstract
class|class
name|RangeEndpointCalculator
parameter_list|<
name|T
extends|extends
name|Comparable
parameter_list|<
name|T
parameter_list|>
parameter_list|>
block|{
DECL|field|field
specifier|protected
specifier|final
name|SchemaField
name|field
decl_stmt|;
DECL|method|RangeEndpointCalculator
specifier|public
name|RangeEndpointCalculator
parameter_list|(
specifier|final
name|SchemaField
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
comment|/**      * Formats a Range endpoint for use as a range label name in the response.      * Default Impl just uses toString()      */
DECL|method|formatValue
specifier|public
name|String
name|formatValue
parameter_list|(
specifier|final
name|T
name|val
parameter_list|)
block|{
return|return
name|val
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Parses a String param into an Range endpoint value throwing       * a useful exception if not possible      */
DECL|method|getValue
specifier|public
specifier|final
name|T
name|getValue
parameter_list|(
specifier|final
name|String
name|rawval
parameter_list|)
block|{
try|try
block|{
return|return
name|parseVal
argument_list|(
name|rawval
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Can't parse value "
operator|+
name|rawval
operator|+
literal|" for field: "
operator|+
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Parses a String param into an Range endpoint.       * Can throw a low level format exception as needed.      */
DECL|method|parseVal
specifier|protected
specifier|abstract
name|T
name|parseVal
parameter_list|(
specifier|final
name|String
name|rawval
parameter_list|)
throws|throws
name|java
operator|.
name|text
operator|.
name|ParseException
function_decl|;
comment|/**       * Parses a String param into a value that represents the gap and       * can be included in the response, throwing       * a useful exception if not possible.      *      * Note: uses Object as the return type instead of T for things like       * Date where gap is just a DateMathParser string       */
DECL|method|getGap
specifier|public
specifier|final
name|Object
name|getGap
parameter_list|(
specifier|final
name|String
name|gap
parameter_list|)
block|{
try|try
block|{
return|return
name|parseGap
argument_list|(
name|gap
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Can't parse gap "
operator|+
name|gap
operator|+
literal|" for field: "
operator|+
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Parses a String param into a value that represents the gap and       * can be included in the response.       * Can throw a low level format exception as needed.      *      * Default Impl calls parseVal      */
DECL|method|parseGap
specifier|protected
name|Object
name|parseGap
parameter_list|(
specifier|final
name|String
name|rawval
parameter_list|)
throws|throws
name|java
operator|.
name|text
operator|.
name|ParseException
block|{
return|return
name|parseVal
argument_list|(
name|rawval
argument_list|)
return|;
block|}
comment|/**      * Adds the String gap param to a low Range endpoint value to determine       * the corrisponding high Range endpoint value, throwing       * a useful exception if not possible.      */
DECL|method|addGap
specifier|public
specifier|final
name|T
name|addGap
parameter_list|(
name|T
name|value
parameter_list|,
name|String
name|gap
parameter_list|)
block|{
try|try
block|{
return|return
name|parseAndAddGap
argument_list|(
name|value
argument_list|,
name|gap
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Can't add gap "
operator|+
name|gap
operator|+
literal|" to value "
operator|+
name|value
operator|+
literal|" for field: "
operator|+
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Adds the String gap param to a low Range endpoint value to determine       * the corrisponding high Range endpoint value.      * Can throw a low level format exception as needed.      */
DECL|method|parseAndAddGap
specifier|protected
specifier|abstract
name|T
name|parseAndAddGap
parameter_list|(
name|T
name|value
parameter_list|,
name|String
name|gap
parameter_list|)
throws|throws
name|java
operator|.
name|text
operator|.
name|ParseException
function_decl|;
block|}
DECL|class|FloatRangeEndpointCalculator
specifier|private
specifier|static
class|class
name|FloatRangeEndpointCalculator
extends|extends
name|RangeEndpointCalculator
argument_list|<
name|Float
argument_list|>
block|{
DECL|method|FloatRangeEndpointCalculator
specifier|public
name|FloatRangeEndpointCalculator
parameter_list|(
specifier|final
name|SchemaField
name|f
parameter_list|)
block|{
name|super
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parseVal
specifier|protected
name|Float
name|parseVal
parameter_list|(
name|String
name|rawval
parameter_list|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|rawval
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|parseAndAddGap
specifier|public
name|Float
name|parseAndAddGap
parameter_list|(
name|Float
name|value
parameter_list|,
name|String
name|gap
parameter_list|)
block|{
return|return
operator|new
name|Float
argument_list|(
name|value
operator|.
name|floatValue
argument_list|()
operator|+
name|Float
operator|.
name|valueOf
argument_list|(
name|gap
argument_list|)
operator|.
name|floatValue
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|DoubleRangeEndpointCalculator
specifier|private
specifier|static
class|class
name|DoubleRangeEndpointCalculator
extends|extends
name|RangeEndpointCalculator
argument_list|<
name|Double
argument_list|>
block|{
DECL|method|DoubleRangeEndpointCalculator
specifier|public
name|DoubleRangeEndpointCalculator
parameter_list|(
specifier|final
name|SchemaField
name|f
parameter_list|)
block|{
name|super
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parseVal
specifier|protected
name|Double
name|parseVal
parameter_list|(
name|String
name|rawval
parameter_list|)
block|{
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|rawval
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|parseAndAddGap
specifier|public
name|Double
name|parseAndAddGap
parameter_list|(
name|Double
name|value
parameter_list|,
name|String
name|gap
parameter_list|)
block|{
return|return
operator|new
name|Double
argument_list|(
name|value
operator|.
name|doubleValue
argument_list|()
operator|+
name|Double
operator|.
name|valueOf
argument_list|(
name|gap
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|IntegerRangeEndpointCalculator
specifier|private
specifier|static
class|class
name|IntegerRangeEndpointCalculator
extends|extends
name|RangeEndpointCalculator
argument_list|<
name|Integer
argument_list|>
block|{
DECL|method|IntegerRangeEndpointCalculator
specifier|public
name|IntegerRangeEndpointCalculator
parameter_list|(
specifier|final
name|SchemaField
name|f
parameter_list|)
block|{
name|super
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parseVal
specifier|protected
name|Integer
name|parseVal
parameter_list|(
name|String
name|rawval
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|rawval
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|parseAndAddGap
specifier|public
name|Integer
name|parseAndAddGap
parameter_list|(
name|Integer
name|value
parameter_list|,
name|String
name|gap
parameter_list|)
block|{
return|return
operator|new
name|Integer
argument_list|(
name|value
operator|.
name|intValue
argument_list|()
operator|+
name|Integer
operator|.
name|valueOf
argument_list|(
name|gap
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|LongRangeEndpointCalculator
specifier|private
specifier|static
class|class
name|LongRangeEndpointCalculator
extends|extends
name|RangeEndpointCalculator
argument_list|<
name|Long
argument_list|>
block|{
DECL|method|LongRangeEndpointCalculator
specifier|public
name|LongRangeEndpointCalculator
parameter_list|(
specifier|final
name|SchemaField
name|f
parameter_list|)
block|{
name|super
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parseVal
specifier|protected
name|Long
name|parseVal
parameter_list|(
name|String
name|rawval
parameter_list|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|rawval
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|parseAndAddGap
specifier|public
name|Long
name|parseAndAddGap
parameter_list|(
name|Long
name|value
parameter_list|,
name|String
name|gap
parameter_list|)
block|{
return|return
operator|new
name|Long
argument_list|(
name|value
operator|.
name|longValue
argument_list|()
operator|+
name|Long
operator|.
name|valueOf
argument_list|(
name|gap
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|DateRangeEndpointCalculator
specifier|private
specifier|static
class|class
name|DateRangeEndpointCalculator
extends|extends
name|RangeEndpointCalculator
argument_list|<
name|Date
argument_list|>
block|{
DECL|field|now
specifier|private
specifier|final
name|Date
name|now
decl_stmt|;
DECL|method|DateRangeEndpointCalculator
specifier|public
name|DateRangeEndpointCalculator
parameter_list|(
specifier|final
name|SchemaField
name|f
parameter_list|,
specifier|final
name|Date
name|now
parameter_list|)
block|{
name|super
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|this
operator|.
name|now
operator|=
name|now
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|field
operator|.
name|getType
argument_list|()
operator|instanceof
name|DateField
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"SchemaField must use filed type extending DateField"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|formatValue
specifier|public
name|String
name|formatValue
parameter_list|(
name|Date
name|val
parameter_list|)
block|{
return|return
operator|(
operator|(
name|DateField
operator|)
name|field
operator|.
name|getType
argument_list|()
operator|)
operator|.
name|toExternal
argument_list|(
name|val
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|parseVal
specifier|protected
name|Date
name|parseVal
parameter_list|(
name|String
name|rawval
parameter_list|)
block|{
return|return
operator|(
operator|(
name|DateField
operator|)
name|field
operator|.
name|getType
argument_list|()
operator|)
operator|.
name|parseMath
argument_list|(
name|now
argument_list|,
name|rawval
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|parseGap
specifier|protected
name|Object
name|parseGap
parameter_list|(
specifier|final
name|String
name|rawval
parameter_list|)
block|{
return|return
name|rawval
return|;
block|}
annotation|@
name|Override
DECL|method|parseAndAddGap
specifier|public
name|Date
name|parseAndAddGap
parameter_list|(
name|Date
name|value
parameter_list|,
name|String
name|gap
parameter_list|)
throws|throws
name|java
operator|.
name|text
operator|.
name|ParseException
block|{
specifier|final
name|DateMathParser
name|dmp
init|=
operator|new
name|DateMathParser
argument_list|()
decl_stmt|;
name|dmp
operator|.
name|setNow
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|dmp
operator|.
name|parseMath
argument_list|(
name|gap
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
