begin_unit
begin_package
DECL|package|org.apache.solr.request.json
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|json
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|MultiMapSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|SearchHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|macro
operator|.
name|MacroExpander
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|JSON
import|;
end_import
begin_class
DECL|class|RequestUtil
specifier|public
class|class
name|RequestUtil
block|{
comment|/**    * Set default-ish params on a SolrQueryRequest as well as do standard macro processing and JSON request parsing.    *    * @param handler The search handler this is for (may be null if you don't want this method touching the content streams)    * @param req The request whose params we are interested in    * @param defaults values to be used if no values are specified in the request params    * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.    * @param invariants values which will be used instead of any request, or default values, regardless of context.    */
DECL|method|processParams
specifier|public
specifier|static
name|void
name|processParams
parameter_list|(
name|SolrRequestHandler
name|handler
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrParams
name|defaults
parameter_list|,
name|SolrParams
name|appends
parameter_list|,
name|SolrParams
name|invariants
parameter_list|)
block|{
name|boolean
name|searchHandler
init|=
name|handler
operator|instanceof
name|SearchHandler
decl_stmt|;
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
comment|// Handle JSON stream for search requests
if|if
condition|(
name|searchHandler
operator|&&
name|req
operator|.
name|getContentStreams
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|map
init|=
name|MultiMapSolrParams
operator|.
name|asMultiMap
argument_list|(
name|params
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|params
operator|instanceof
name|MultiMapSolrParams
operator|||
name|params
operator|instanceof
name|ModifiableSolrParams
operator|)
condition|)
block|{
comment|// need to set params on request since we weren't able to access the original map
name|params
operator|=
operator|new
name|MultiMapSolrParams
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|req
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|jsonFromParams
init|=
name|map
operator|.
name|remove
argument_list|(
name|JSON
argument_list|)
decl_stmt|;
comment|// params from the query string should come after (and hence override) JSON content streams
for|for
control|(
name|ContentStream
name|cs
range|:
name|req
operator|.
name|getContentStreams
argument_list|()
control|)
block|{
name|String
name|contentType
init|=
name|cs
operator|.
name|getContentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentType
operator|==
literal|null
operator|||
operator|!
name|contentType
operator|.
name|contains
argument_list|(
literal|"/json"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Bad contentType for search handler :"
operator|+
name|contentType
operator|+
literal|" request="
operator|+
name|req
argument_list|)
throw|;
block|}
try|try
block|{
name|String
name|jsonString
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|cs
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
name|MultiMapSolrParams
operator|.
name|addParam
argument_list|(
name|JSON
argument_list|,
name|jsonString
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Exception reading content stream for request:"
operator|+
name|req
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// append existing "json" params
if|if
condition|(
name|jsonFromParams
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|json
range|:
name|jsonFromParams
control|)
block|{
name|MultiMapSolrParams
operator|.
name|addParam
argument_list|(
name|JSON
argument_list|,
name|json
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
index|[]
name|jsonS
init|=
name|params
operator|.
name|getParams
argument_list|(
name|JSON
argument_list|)
decl_stmt|;
name|boolean
name|hasAdditions
init|=
name|defaults
operator|!=
literal|null
operator|||
name|invariants
operator|!=
literal|null
operator|||
name|appends
operator|!=
literal|null
operator|||
name|jsonS
operator|!=
literal|null
decl_stmt|;
comment|// short circuit processing
if|if
condition|(
operator|!
name|hasAdditions
operator|&&
operator|!
name|params
operator|.
name|getBool
argument_list|(
literal|"expandMacros"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return;
comment|// nothing to do...
block|}
name|boolean
name|isShard
init|=
name|params
operator|.
name|getBool
argument_list|(
literal|"isShard"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|newMap
init|=
name|MultiMapSolrParams
operator|.
name|asMultiMap
argument_list|(
name|params
argument_list|,
name|hasAdditions
argument_list|)
decl_stmt|;
comment|// see if the json has a "params" section
comment|// TODO: we should currently *not* do this if this is a leaf of a distributed search since it could overwrite parameters set by the top-level
comment|// The parameters we extract will be propagated anyway.
if|if
condition|(
name|jsonS
operator|!=
literal|null
operator|&&
operator|!
name|isShard
condition|)
block|{
for|for
control|(
name|String
name|json
range|:
name|jsonS
control|)
block|{
name|getParamsFromJSON
argument_list|(
name|newMap
argument_list|,
name|json
argument_list|)
expr_stmt|;
block|}
block|}
comment|// first populate defaults, etc..
if|if
condition|(
name|defaults
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|defaultsMap
init|=
name|MultiMapSolrParams
operator|.
name|asMultiMap
argument_list|(
name|defaults
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|entry
range|:
name|defaultsMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|newMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|newMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|appends
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|appendsMap
init|=
name|MultiMapSolrParams
operator|.
name|asMultiMap
argument_list|(
name|appends
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|entry
range|:
name|appendsMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
index|[]
name|arr
init|=
name|newMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|arr
operator|==
literal|null
condition|)
block|{
name|newMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|appendArr
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
index|[]
name|newArr
init|=
operator|new
name|String
index|[
name|arr
operator|.
name|length
operator|+
name|appendArr
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|arr
argument_list|,
literal|0
argument_list|,
name|newArr
argument_list|,
literal|0
argument_list|,
name|arr
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|appendArr
argument_list|,
literal|0
argument_list|,
name|newArr
argument_list|,
name|arr
operator|.
name|length
argument_list|,
name|appendArr
operator|.
name|length
argument_list|)
expr_stmt|;
name|newMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|newArr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|invariants
operator|!=
literal|null
condition|)
block|{
name|newMap
operator|.
name|putAll
argument_list|(
name|MultiMapSolrParams
operator|.
name|asMultiMap
argument_list|(
name|invariants
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|doMacrosStr
init|=
name|newMap
operator|.
name|get
argument_list|(
literal|"expandMacros"
argument_list|)
decl_stmt|;
name|boolean
name|doMacros
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|doMacrosStr
operator|!=
literal|null
condition|)
block|{
name|doMacros
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|doMacrosStr
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doMacros
condition|)
block|{
name|newMap
operator|=
name|MacroExpander
operator|.
name|expand
argument_list|(
name|newMap
argument_list|)
expr_stmt|;
block|}
comment|// Set these params as soon as possible so if there is an error processing later, things like
comment|// "wt=json" will take effect from the defaults.
name|SolrParams
name|newParams
init|=
operator|new
name|MultiMapSolrParams
argument_list|(
name|newMap
argument_list|)
decl_stmt|;
comment|// newMap may still change below, but that should be OK
name|req
operator|.
name|setParams
argument_list|(
name|newParams
argument_list|)
expr_stmt|;
comment|// Skip the rest of the processing (including json processing for now) if this isn't a search handler.
comment|// For example json.command started to be used  in SOLR-6294, and that caused errors here.
if|if
condition|(
operator|!
name|searchHandler
condition|)
return|return;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
literal|null
decl_stmt|;
comment|// Handle JSON body first, so query params will always overlay on that
name|jsonS
operator|=
name|newMap
operator|.
name|get
argument_list|(
name|JSON
argument_list|)
expr_stmt|;
if|if
condition|(
name|jsonS
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
name|json
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|mergeJSON
argument_list|(
name|json
argument_list|,
name|JSON
argument_list|,
name|jsonS
argument_list|,
operator|new
name|ObjectUtil
operator|.
name|ConflictHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|key
range|:
name|newMap
operator|.
name|keySet
argument_list|()
control|)
block|{
comment|// json.nl, json.wrf are existing query parameters
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"json."
argument_list|)
operator|&&
operator|!
operator|(
literal|"json.nl"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|||
literal|"json.wrf"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
name|json
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|mergeJSON
argument_list|(
name|json
argument_list|,
name|key
argument_list|,
name|newMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
operator|new
name|ObjectUtil
operator|.
name|ConflictHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// implement compat for existing components...
if|if
condition|(
name|json
operator|!=
literal|null
operator|&&
operator|!
name|isShard
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|json
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|out
init|=
literal|null
decl_stmt|;
name|boolean
name|arr
init|=
literal|false
decl_stmt|;
if|if
condition|(
literal|"query"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|out
operator|=
literal|"q"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"filter"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|out
operator|=
literal|"fq"
expr_stmt|;
name|arr
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"fields"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|out
operator|=
literal|"fl"
expr_stmt|;
name|arr
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"offset"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|out
operator|=
literal|"start"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"limit"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|out
operator|=
literal|"rows"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sort"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|out
operator|=
literal|"sort"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"params"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|||
literal|"facet"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// handled elsewhere
continue|continue;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown top-level key in JSON request : "
operator|+
name|key
argument_list|)
throw|;
block|}
name|Object
name|val
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|arr
condition|)
block|{
name|String
index|[]
name|existing
init|=
name|newMap
operator|.
name|get
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|List
name|lst
init|=
name|val
operator|instanceof
name|List
condition|?
operator|(
name|List
operator|)
name|val
else|:
literal|null
decl_stmt|;
name|int
name|existingSize
init|=
name|existing
operator|==
literal|null
condition|?
literal|0
else|:
name|existing
operator|.
name|length
decl_stmt|;
name|int
name|jsonSize
init|=
name|lst
operator|==
literal|null
condition|?
literal|1
else|:
name|lst
operator|.
name|size
argument_list|()
decl_stmt|;
name|String
index|[]
name|newval
init|=
operator|new
name|String
index|[
name|existingSize
operator|+
name|jsonSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|existingSize
condition|;
name|i
operator|++
control|)
block|{
name|newval
index|[
name|i
index|]
operator|=
name|existing
index|[
name|i
index|]
expr_stmt|;
block|}
if|if
condition|(
name|lst
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jsonSize
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|v
init|=
name|lst
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|newval
index|[
name|existingSize
operator|+
name|i
index|]
operator|=
name|v
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|newval
index|[
name|newval
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|val
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|newMap
operator|.
name|put
argument_list|(
name|out
argument_list|,
name|newval
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newMap
operator|.
name|put
argument_list|(
name|out
argument_list|,
operator|new
name|String
index|[]
block|{
name|val
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|req
operator|.
name|setJSON
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
block|}
comment|// queryParamName is something like json.facet or json.query, or just json...
DECL|method|mergeJSON
specifier|private
specifier|static
name|void
name|mergeJSON
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
parameter_list|,
name|String
name|queryParamName
parameter_list|,
name|String
index|[]
name|vals
parameter_list|,
name|ObjectUtil
operator|.
name|ConflictHandler
name|handler
parameter_list|)
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|path
init|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|queryParamName
argument_list|,
literal|"."
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|path
operator|=
name|path
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|path
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|jsonStr
range|:
name|vals
control|)
block|{
name|Object
name|o
init|=
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|jsonStr
argument_list|)
decl_stmt|;
name|ObjectUtil
operator|.
name|mergeObjects
argument_list|(
name|json
argument_list|,
name|path
argument_list|,
name|o
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// impossible
block|}
block|}
DECL|method|getParamsFromJSON
specifier|private
specifier|static
name|void
name|getParamsFromJSON
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|params
parameter_list|,
name|String
name|json
parameter_list|)
block|{
if|if
condition|(
name|json
operator|.
name|indexOf
argument_list|(
literal|"params"
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return;
block|}
name|JSONParser
name|parser
init|=
operator|new
name|JSONParser
argument_list|(
name|json
argument_list|)
decl_stmt|;
try|try
block|{
name|JSONUtil
operator|.
name|expect
argument_list|(
name|parser
argument_list|,
name|JSONParser
operator|.
name|OBJECT_START
argument_list|)
expr_stmt|;
name|boolean
name|found
init|=
name|JSONUtil
operator|.
name|advanceToMapKey
argument_list|(
name|parser
argument_list|,
literal|"params"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|found
condition|)
block|{
return|return;
block|}
name|parser
operator|.
name|nextEvent
argument_list|()
expr_stmt|;
comment|// advance to the value
name|Object
name|o
init|=
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
name|parser
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Map
operator|)
condition|)
return|return;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|o
decl_stmt|;
comment|// To make consistent with json.param handling, we should make query params come after json params (i.e. query params should
comment|// appear to overwrite json params.
comment|// Solr params are based on String though, so we need to convert
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|params
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|List
condition|)
block|{
name|List
name|lst
init|=
operator|(
name|List
operator|)
name|val
decl_stmt|;
name|String
index|[]
name|vals
init|=
operator|new
name|String
index|[
name|lst
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|vals
index|[
name|i
index|]
operator|=
name|lst
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|params
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|params
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|String
index|[]
block|{
name|val
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore parse exceptions at this stage, they may be caused by incomplete macro expansions
return|return;
block|}
block|}
block|}
end_class
end_unit
