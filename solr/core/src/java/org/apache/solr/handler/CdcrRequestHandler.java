begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ZkController
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ExecutorUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CloseHook
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|PluginBag
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|CdcrUpdateLog
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateLog
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DefaultSolrThreadFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|SolrCoreAware
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  *<p>  * This request handler implements the CDCR API and is responsible of the execution of the  * {@link CdcrReplicator} threads.  *</p>  *<p>  * It relies on three classes, {@link org.apache.solr.handler.CdcrLeaderStateManager},  * {@link org.apache.solr.handler.CdcrBufferStateManager} and {@link org.apache.solr.handler.CdcrProcessStateManager}  * to synchronise the state of the CDCR across all the nodes.  *</p>  *<p>  * The CDCR process can be either {@link org.apache.solr.handler.CdcrParams.ProcessState#STOPPED} or {@link org.apache.solr.handler.CdcrParams.ProcessState#STARTED} by using the  * actions {@link org.apache.solr.handler.CdcrParams.CdcrAction#STOP} and {@link org.apache.solr.handler.CdcrParams.CdcrAction#START} respectively. If a node is leader and the process  * state is {@link org.apache.solr.handler.CdcrParams.ProcessState#STARTED}, the {@link CdcrReplicatorManager} will  * start the {@link CdcrReplicator} threads. If a node becomes non-leader or if the process state becomes  * {@link org.apache.solr.handler.CdcrParams.ProcessState#STOPPED}, the {@link CdcrReplicator} threads are stopped.  *</p>  *<p>  * The CDCR can be switched to a "buffering" mode, in which the update log will never delete old transaction log  * files. Such a mode can be enabled or disabled using the action {@link org.apache.solr.handler.CdcrParams.CdcrAction#ENABLEBUFFER} and  * {@link org.apache.solr.handler.CdcrParams.CdcrAction#DISABLEBUFFER} respectively.  *</p>  *<p>  * Known limitations: The source and target clusters must have the same topology. Replication between clusters  * with a different number of shards will likely results in an inconsistent index.  *</p>  */
end_comment
begin_class
DECL|class|CdcrRequestHandler
specifier|public
class|class
name|CdcrRequestHandler
extends|extends
name|RequestHandlerBase
implements|implements
name|SolrCoreAware
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|core
specifier|private
name|SolrCore
name|core
decl_stmt|;
DECL|field|collection
specifier|private
name|String
name|collection
decl_stmt|;
DECL|field|path
specifier|private
name|String
name|path
decl_stmt|;
DECL|field|updateLogSynchronizerConfiguration
specifier|private
name|SolrParams
name|updateLogSynchronizerConfiguration
decl_stmt|;
DECL|field|replicatorConfiguration
specifier|private
name|SolrParams
name|replicatorConfiguration
decl_stmt|;
DECL|field|bufferConfiguration
specifier|private
name|SolrParams
name|bufferConfiguration
decl_stmt|;
DECL|field|replicasConfiguration
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SolrParams
argument_list|>
argument_list|>
name|replicasConfiguration
decl_stmt|;
DECL|field|processStateManager
specifier|private
name|CdcrProcessStateManager
name|processStateManager
decl_stmt|;
DECL|field|bufferStateManager
specifier|private
name|CdcrBufferStateManager
name|bufferStateManager
decl_stmt|;
DECL|field|replicatorManager
specifier|private
name|CdcrReplicatorManager
name|replicatorManager
decl_stmt|;
DECL|field|leaderStateManager
specifier|private
name|CdcrLeaderStateManager
name|leaderStateManager
decl_stmt|;
DECL|field|updateLogSynchronizer
specifier|private
name|CdcrUpdateLogSynchronizer
name|updateLogSynchronizer
decl_stmt|;
DECL|field|bufferManager
specifier|private
name|CdcrBufferManager
name|bufferManager
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
condition|)
block|{
comment|// Configuration of the Update Log Synchronizer
name|Object
name|updateLogSynchonizerParam
init|=
name|args
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|UPDATE_LOG_SYNCHRONIZER_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|updateLogSynchonizerParam
operator|!=
literal|null
operator|&&
name|updateLogSynchonizerParam
operator|instanceof
name|NamedList
condition|)
block|{
name|updateLogSynchronizerConfiguration
operator|=
name|SolrParams
operator|.
name|toSolrParams
argument_list|(
operator|(
name|NamedList
operator|)
name|updateLogSynchonizerParam
argument_list|)
expr_stmt|;
block|}
comment|// Configuration of the Replicator
name|Object
name|replicatorParam
init|=
name|args
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|REPLICATOR_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicatorParam
operator|!=
literal|null
operator|&&
name|replicatorParam
operator|instanceof
name|NamedList
condition|)
block|{
name|replicatorConfiguration
operator|=
name|SolrParams
operator|.
name|toSolrParams
argument_list|(
operator|(
name|NamedList
operator|)
name|replicatorParam
argument_list|)
expr_stmt|;
block|}
comment|// Configuration of the Buffer
name|Object
name|bufferParam
init|=
name|args
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|BUFFER_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|bufferParam
operator|!=
literal|null
operator|&&
name|bufferParam
operator|instanceof
name|NamedList
condition|)
block|{
name|bufferConfiguration
operator|=
name|SolrParams
operator|.
name|toSolrParams
argument_list|(
operator|(
name|NamedList
operator|)
name|bufferParam
argument_list|)
expr_stmt|;
block|}
comment|// Configuration of the Replicas
name|replicasConfiguration
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|List
name|replicas
init|=
name|args
operator|.
name|getAll
argument_list|(
name|CdcrParams
operator|.
name|REPLICA_PARAM
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|replica
range|:
name|replicas
control|)
block|{
if|if
condition|(
name|replica
operator|!=
literal|null
operator|&&
name|replica
operator|instanceof
name|NamedList
condition|)
block|{
name|SolrParams
name|params
init|=
name|SolrParams
operator|.
name|toSolrParams
argument_list|(
operator|(
name|NamedList
operator|)
name|replica
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|replicasConfiguration
operator|.
name|containsKey
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|SOURCE_COLLECTION_PARAM
argument_list|)
argument_list|)
condition|)
block|{
name|replicasConfiguration
operator|.
name|put
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|SOURCE_COLLECTION_PARAM
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|replicasConfiguration
operator|.
name|get
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|SOURCE_COLLECTION_PARAM
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|handleRequestBody
specifier|public
name|void
name|handleRequestBody
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Pick the action
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|CdcrParams
operator|.
name|CdcrAction
name|action
init|=
literal|null
decl_stmt|;
name|String
name|a
init|=
name|params
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|action
operator|=
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|get
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown action: "
operator|+
name|a
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|START
case|:
block|{
name|this
operator|.
name|handleStartAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|STOP
case|:
block|{
name|this
operator|.
name|handleStopAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|STATUS
case|:
block|{
name|this
operator|.
name|handleStatusAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|COLLECTIONCHECKPOINT
case|:
block|{
name|this
operator|.
name|handleCollectionCheckpointAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SHARDCHECKPOINT
case|:
block|{
name|this
operator|.
name|handleShardCheckpointAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ENABLEBUFFER
case|:
block|{
name|this
operator|.
name|handleEnableBufferAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DISABLEBUFFER
case|:
block|{
name|this
operator|.
name|handleDisableBufferAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LASTPROCESSEDVERSION
case|:
block|{
name|this
operator|.
name|handleLastProcessedVersionAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QUEUES
case|:
block|{
name|this
operator|.
name|handleQueuesAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OPS
case|:
block|{
name|this
operator|.
name|handleOpsAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ERRORS
case|:
block|{
name|this
operator|.
name|handleErrorsAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown action: "
operator|+
name|action
argument_list|)
throw|;
block|}
block|}
name|rsp
operator|.
name|setHttpCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|this
operator|.
name|core
operator|=
name|core
expr_stmt|;
name|collection
operator|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
expr_stmt|;
comment|// Make sure that the core is ZKAware
if|if
condition|(
operator|!
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|isZooKeeperAware
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Solr instance is not running in SolrCloud mode."
argument_list|)
throw|;
block|}
comment|// Make sure that the core is using the CdcrUpdateLog implementation
if|if
condition|(
operator|!
operator|(
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|instanceof
name|CdcrUpdateLog
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Solr instance is not configured with the cdcr update log."
argument_list|)
throw|;
block|}
comment|// Find the registered path of the handler
name|path
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PluginBag
operator|.
name|PluginHolder
argument_list|<
name|SolrRequestHandler
argument_list|>
argument_list|>
name|entry
range|:
name|core
operator|.
name|getRequestHandlers
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|core
operator|.
name|getRequestHandlers
argument_list|()
operator|.
name|isLoaded
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
operator|==
name|this
condition|)
block|{
name|path
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"The CdcrRequestHandler is not registered with the current core."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"The CdcrRequestHandler needs to be registered to a path. Typically this is '/cdcr'"
argument_list|)
throw|;
block|}
comment|// Initialisation phase
comment|// If the Solr cloud is being initialised, each CDCR node will start up in its default state, i.e., STOPPED
comment|// and non-leader. The leader state will be updated later, when all the Solr cores have been loaded.
comment|// If the Solr cloud has already been initialised, and the core is reloaded (i.e., because a node died or a new node
comment|// is added to the cluster), the CDCR node will synchronise its state with the global CDCR state that is stored
comment|// in zookeeper.
comment|// Initialise the buffer state manager
name|bufferStateManager
operator|=
operator|new
name|CdcrBufferStateManager
argument_list|(
name|core
argument_list|,
name|bufferConfiguration
argument_list|)
expr_stmt|;
comment|// Initialise the process state manager
name|processStateManager
operator|=
operator|new
name|CdcrProcessStateManager
argument_list|(
name|core
argument_list|)
expr_stmt|;
comment|// Initialise the leader state manager
name|leaderStateManager
operator|=
operator|new
name|CdcrLeaderStateManager
argument_list|(
name|core
argument_list|)
expr_stmt|;
comment|// Initialise the replicator states manager
name|replicatorManager
operator|=
operator|new
name|CdcrReplicatorManager
argument_list|(
name|core
argument_list|,
name|path
argument_list|,
name|replicatorConfiguration
argument_list|,
name|replicasConfiguration
argument_list|)
expr_stmt|;
name|replicatorManager
operator|.
name|setProcessStateManager
argument_list|(
name|processStateManager
argument_list|)
expr_stmt|;
name|replicatorManager
operator|.
name|setLeaderStateManager
argument_list|(
name|leaderStateManager
argument_list|)
expr_stmt|;
comment|// we need to inform it of a state event since the process and leader state
comment|// may have been synchronised during the initialisation
name|replicatorManager
operator|.
name|stateUpdate
argument_list|()
expr_stmt|;
comment|// Initialise the update log synchronizer
name|updateLogSynchronizer
operator|=
operator|new
name|CdcrUpdateLogSynchronizer
argument_list|(
name|core
argument_list|,
name|path
argument_list|,
name|updateLogSynchronizerConfiguration
argument_list|)
expr_stmt|;
name|updateLogSynchronizer
operator|.
name|setLeaderStateManager
argument_list|(
name|leaderStateManager
argument_list|)
expr_stmt|;
comment|// we need to inform it of a state event since the leader state
comment|// may have been synchronised during the initialisation
name|updateLogSynchronizer
operator|.
name|stateUpdate
argument_list|()
expr_stmt|;
comment|// Initialise the buffer manager
name|bufferManager
operator|=
operator|new
name|CdcrBufferManager
argument_list|(
name|core
argument_list|)
expr_stmt|;
name|bufferManager
operator|.
name|setLeaderStateManager
argument_list|(
name|leaderStateManager
argument_list|)
expr_stmt|;
name|bufferManager
operator|.
name|setBufferStateManager
argument_list|(
name|bufferStateManager
argument_list|)
expr_stmt|;
comment|// we need to inform it of a state event since the leader state
comment|// may have been synchronised during the initialisation
name|bufferManager
operator|.
name|stateUpdate
argument_list|()
expr_stmt|;
comment|// register the close hook
name|this
operator|.
name|registerCloseHook
argument_list|(
name|core
argument_list|)
expr_stmt|;
block|}
comment|/**    * register a close hook to properly shutdown the state manager and scheduler    */
DECL|method|registerCloseHook
specifier|private
name|void
name|registerCloseHook
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|core
operator|.
name|addCloseHook
argument_list|(
operator|new
name|CloseHook
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|preClose
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|String
name|collectionName
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|String
name|shard
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getShardId
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Solr core is being closed - shutting down CDCR handler @ {}:{}"
argument_list|,
name|collectionName
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|updateLogSynchronizer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|replicatorManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|bufferStateManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|processStateManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|leaderStateManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postClose
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{       }
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    *<p>    * Update and synchronize the process state.    *</p>    *<p>    * The process state manager must notify the replicator states manager of the change of state.    *</p>    */
DECL|method|handleStartAction
specifier|private
name|void
name|handleStartAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
if|if
condition|(
name|processStateManager
operator|.
name|getState
argument_list|()
operator|==
name|CdcrParams
operator|.
name|ProcessState
operator|.
name|STOPPED
condition|)
block|{
name|processStateManager
operator|.
name|setState
argument_list|(
name|CdcrParams
operator|.
name|ProcessState
operator|.
name|STARTED
argument_list|)
expr_stmt|;
name|processStateManager
operator|.
name|synchronize
argument_list|()
expr_stmt|;
block|}
name|rsp
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|STATUS
operator|.
name|toLower
argument_list|()
argument_list|,
name|this
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|handleStopAction
specifier|private
name|void
name|handleStopAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
if|if
condition|(
name|processStateManager
operator|.
name|getState
argument_list|()
operator|==
name|CdcrParams
operator|.
name|ProcessState
operator|.
name|STARTED
condition|)
block|{
name|processStateManager
operator|.
name|setState
argument_list|(
name|CdcrParams
operator|.
name|ProcessState
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|processStateManager
operator|.
name|synchronize
argument_list|()
expr_stmt|;
block|}
name|rsp
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|STATUS
operator|.
name|toLower
argument_list|()
argument_list|,
name|this
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|handleStatusAction
specifier|private
name|void
name|handleStatusAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
name|rsp
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|STATUS
operator|.
name|toLower
argument_list|()
argument_list|,
name|this
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getStatus
specifier|private
name|NamedList
name|getStatus
parameter_list|()
block|{
name|NamedList
name|status
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|status
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|ProcessState
operator|.
name|getParam
argument_list|()
argument_list|,
name|processStateManager
operator|.
name|getState
argument_list|()
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|BufferState
operator|.
name|getParam
argument_list|()
argument_list|,
name|bufferStateManager
operator|.
name|getState
argument_list|()
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
comment|/**    * This action is generally executed on the target cluster in order to retrieve the latest update checkpoint.    * This checkpoint is used on the source cluster to setup the    * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader} of a shard leader.<br/>    * This method will execute in parallel one    * {@link org.apache.solr.handler.CdcrParams.CdcrAction#SHARDCHECKPOINT} request per shard leader. It will    * then pick the lowest version number as checkpoint. Picking the lowest amongst all shards will ensure that we do not    * pick a checkpoint that is ahead of the source cluster. This can occur when other shard leaders are sending new    * updates to the target cluster while we are currently instantiating the    * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader}.    * This solution only works in scenarios where the topology of the source and target clusters are identical.    */
DECL|method|handleCollectionCheckpointAction
specifier|private
name|void
name|handleCollectionCheckpointAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|ZkController
name|zkController
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
decl_stmt|;
try|try
block|{
name|zkController
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|forceUpdateCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error when updating cluster state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|ClusterState
name|cstate
init|=
name|zkController
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Slice
argument_list|>
name|shards
init|=
name|cstate
operator|.
name|getActiveSlices
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|ExecutorService
name|parallelExecutor
init|=
name|ExecutorUtil
operator|.
name|newMDCAwareCachedThreadPool
argument_list|(
operator|new
name|DefaultSolrThreadFactory
argument_list|(
literal|"parallelCdcrExecutor"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|checkpoint
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Callable
argument_list|<
name|Long
argument_list|>
argument_list|>
name|callables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Slice
name|shard
range|:
name|shards
control|)
block|{
name|ZkNodeProps
name|leaderProps
init|=
name|zkController
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getLeaderRetry
argument_list|(
name|collection
argument_list|,
name|shard
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|ZkCoreNodeProps
name|nodeProps
init|=
operator|new
name|ZkCoreNodeProps
argument_list|(
name|leaderProps
argument_list|)
decl_stmt|;
name|callables
operator|.
name|add
argument_list|(
operator|new
name|SliceCheckpointCallable
argument_list|(
name|nodeProps
operator|.
name|getCoreUrl
argument_list|()
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|Future
argument_list|<
name|Long
argument_list|>
name|future
range|:
name|parallelExecutor
operator|.
name|invokeAll
argument_list|(
name|callables
argument_list|)
control|)
block|{
name|long
name|version
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|<
name|checkpoint
condition|)
block|{
comment|// we must take the lowest checkpoint from all the shards
name|checkpoint
operator|=
name|version
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error while requesting shard's checkpoints"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error while requesting shard's checkpoints"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|parallelExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|rsp
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|CHECKPOINT
argument_list|,
name|checkpoint
argument_list|)
expr_stmt|;
block|}
comment|/**    * Retrieve the version number of the latest entry of the {@link org.apache.solr.update.UpdateLog}.    */
DECL|method|handleShardCheckpointAction
specifier|private
name|void
name|handleShardCheckpointAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
if|if
condition|(
operator|!
name|leaderStateManager
operator|.
name|amILeader
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Action '"
operator|+
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|SHARDCHECKPOINT
operator|+
literal|"' sent to non-leader replica"
argument_list|)
throw|;
block|}
name|UpdateLog
name|ulog
init|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
try|try
init|(
name|UpdateLog
operator|.
name|RecentUpdates
name|recentUpdates
init|=
name|ulog
operator|.
name|getRecentUpdates
argument_list|()
init|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|versions
init|=
name|recentUpdates
operator|.
name|getVersions
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|long
name|lastVersion
init|=
name|versions
operator|.
name|isEmpty
argument_list|()
condition|?
operator|-
literal|1
else|:
name|Math
operator|.
name|abs
argument_list|(
name|versions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|rsp
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|CHECKPOINT
argument_list|,
name|lastVersion
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleEnableBufferAction
specifier|private
name|void
name|handleEnableBufferAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
if|if
condition|(
name|bufferStateManager
operator|.
name|getState
argument_list|()
operator|==
name|CdcrParams
operator|.
name|BufferState
operator|.
name|DISABLED
condition|)
block|{
name|bufferStateManager
operator|.
name|setState
argument_list|(
name|CdcrParams
operator|.
name|BufferState
operator|.
name|ENABLED
argument_list|)
expr_stmt|;
name|bufferStateManager
operator|.
name|synchronize
argument_list|()
expr_stmt|;
block|}
name|rsp
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|STATUS
operator|.
name|toLower
argument_list|()
argument_list|,
name|this
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|handleDisableBufferAction
specifier|private
name|void
name|handleDisableBufferAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
if|if
condition|(
name|bufferStateManager
operator|.
name|getState
argument_list|()
operator|==
name|CdcrParams
operator|.
name|BufferState
operator|.
name|ENABLED
condition|)
block|{
name|bufferStateManager
operator|.
name|setState
argument_list|(
name|CdcrParams
operator|.
name|BufferState
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
name|bufferStateManager
operator|.
name|synchronize
argument_list|()
expr_stmt|;
block|}
name|rsp
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|STATUS
operator|.
name|toLower
argument_list|()
argument_list|,
name|this
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    *<p>    * We have to take care of four cases:    *<ul>    *<li>Replication& Buffering</li>    *<li>Replication& No Buffering</li>    *<li>No Replication& Buffering</li>    *<li>No Replication& No Buffering</li>    *</ul>    * In the first three cases, at least one log reader should have been initialised. We should take the lowest    * last processed version across all the initialised readers. In the last case, there isn't a log reader    * initialised. We should instantiate one and get the version of the first entries.    *</p>    */
DECL|method|handleLastProcessedVersionAction
specifier|private
name|void
name|handleLastProcessedVersionAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
name|String
name|collectionName
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|String
name|shard
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getShardId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|leaderStateManager
operator|.
name|amILeader
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Action {} sent to non-leader replica @ {}:{}"
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|LASTPROCESSEDVERSION
argument_list|,
name|collectionName
argument_list|,
name|shard
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Action "
operator|+
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|LASTPROCESSEDVERSION
operator|+
literal|" sent to non-leader replica"
argument_list|)
throw|;
block|}
comment|// take care of the first three cases
comment|// first check the log readers from the replicator states
name|long
name|lastProcessedVersion
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|CdcrReplicatorState
name|state
range|:
name|replicatorManager
operator|.
name|getReplicatorStates
argument_list|()
control|)
block|{
name|long
name|version
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|getLogReader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|version
operator|=
name|state
operator|.
name|getLogReader
argument_list|()
operator|.
name|getLastVersion
argument_list|()
expr_stmt|;
block|}
name|lastProcessedVersion
operator|=
name|Math
operator|.
name|min
argument_list|(
name|lastProcessedVersion
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
comment|// next check the log reader of the buffer
name|CdcrUpdateLog
operator|.
name|CdcrLogReader
name|bufferLogReader
init|=
operator|(
operator|(
name|CdcrUpdateLog
operator|)
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|)
operator|.
name|getBufferToggle
argument_list|()
decl_stmt|;
if|if
condition|(
name|bufferLogReader
operator|!=
literal|null
condition|)
block|{
name|lastProcessedVersion
operator|=
name|Math
operator|.
name|min
argument_list|(
name|lastProcessedVersion
argument_list|,
name|bufferLogReader
operator|.
name|getLastVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// the fourth case: no cdc replication, no buffering: all readers were null
if|if
condition|(
name|processStateManager
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|CdcrParams
operator|.
name|ProcessState
operator|.
name|STOPPED
argument_list|)
operator|&&
name|bufferStateManager
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|CdcrParams
operator|.
name|BufferState
operator|.
name|DISABLED
argument_list|)
condition|)
block|{
name|CdcrUpdateLog
operator|.
name|CdcrLogReader
name|logReader
init|=
operator|(
operator|(
name|CdcrUpdateLog
operator|)
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|)
operator|.
name|newLogReader
argument_list|()
decl_stmt|;
try|try
block|{
comment|// let the reader initialize lastVersion
name|logReader
operator|.
name|next
argument_list|()
expr_stmt|;
name|lastProcessedVersion
operator|=
name|Math
operator|.
name|min
argument_list|(
name|lastProcessedVersion
argument_list|,
name|logReader
operator|.
name|getLastVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error while fetching the last processed version"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error while fetching the last processed version"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|logReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Returning the lowest last processed version {}  @ {}:{}"
argument_list|,
name|lastProcessedVersion
argument_list|,
name|collectionName
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|LAST_PROCESSED_VERSION
argument_list|,
name|lastProcessedVersion
argument_list|)
expr_stmt|;
block|}
DECL|method|handleQueuesAction
specifier|private
name|void
name|handleQueuesAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
name|NamedList
name|hosts
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
for|for
control|(
name|CdcrReplicatorState
name|state
range|:
name|replicatorManager
operator|.
name|getReplicatorStates
argument_list|()
control|)
block|{
name|NamedList
name|queueStats
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|CdcrUpdateLog
operator|.
name|CdcrLogReader
name|logReader
init|=
name|state
operator|.
name|getLogReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|logReader
operator|==
literal|null
condition|)
block|{
name|String
name|collectionName
init|=
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|String
name|shard
init|=
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getShardId
argument_list|()
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"The log reader for target collection {} is not initialised @ {}:{}"
argument_list|,
name|state
operator|.
name|getTargetCollection
argument_list|()
argument_list|,
name|collectionName
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|queueStats
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|QUEUE_SIZE
argument_list|,
operator|-
literal|1l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queueStats
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|QUEUE_SIZE
argument_list|,
name|logReader
operator|.
name|getNumberOfRemainingRecords
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|queueStats
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|LAST_TIMESTAMP
argument_list|,
name|state
operator|.
name|getTimestampOfLastProcessedOperation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hosts
operator|.
name|get
argument_list|(
name|state
operator|.
name|getZkHost
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|hosts
operator|.
name|add
argument_list|(
name|state
operator|.
name|getZkHost
argument_list|()
argument_list|,
operator|new
name|NamedList
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|NamedList
operator|)
name|hosts
operator|.
name|get
argument_list|(
name|state
operator|.
name|getZkHost
argument_list|()
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|state
operator|.
name|getTargetCollection
argument_list|()
argument_list|,
name|queueStats
argument_list|)
expr_stmt|;
block|}
name|rsp
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|QUEUES
argument_list|,
name|hosts
argument_list|)
expr_stmt|;
name|UpdateLog
name|updateLog
init|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
name|rsp
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|TLOG_TOTAL_SIZE
argument_list|,
name|updateLog
operator|.
name|getTotalLogsSize
argument_list|()
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|TLOG_TOTAL_COUNT
argument_list|,
name|updateLog
operator|.
name|getTotalLogsNumber
argument_list|()
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|UPDATE_LOG_SYNCHRONIZER
argument_list|,
name|updateLogSynchronizer
operator|.
name|isStarted
argument_list|()
condition|?
name|CdcrParams
operator|.
name|ProcessState
operator|.
name|STARTED
operator|.
name|toLower
argument_list|()
else|:
name|CdcrParams
operator|.
name|ProcessState
operator|.
name|STOPPED
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|handleOpsAction
specifier|private
name|void
name|handleOpsAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
name|NamedList
name|hosts
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
for|for
control|(
name|CdcrReplicatorState
name|state
range|:
name|replicatorManager
operator|.
name|getReplicatorStates
argument_list|()
control|)
block|{
name|NamedList
name|ops
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|COUNTER_ALL
argument_list|,
name|state
operator|.
name|getBenchmarkTimer
argument_list|()
operator|.
name|getOperationsPerSecond
argument_list|()
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|COUNTER_ADDS
argument_list|,
name|state
operator|.
name|getBenchmarkTimer
argument_list|()
operator|.
name|getAddsPerSecond
argument_list|()
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|COUNTER_DELETES
argument_list|,
name|state
operator|.
name|getBenchmarkTimer
argument_list|()
operator|.
name|getDeletesPerSecond
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hosts
operator|.
name|get
argument_list|(
name|state
operator|.
name|getZkHost
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|hosts
operator|.
name|add
argument_list|(
name|state
operator|.
name|getZkHost
argument_list|()
argument_list|,
operator|new
name|NamedList
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|NamedList
operator|)
name|hosts
operator|.
name|get
argument_list|(
name|state
operator|.
name|getZkHost
argument_list|()
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|state
operator|.
name|getTargetCollection
argument_list|()
argument_list|,
name|ops
argument_list|)
expr_stmt|;
block|}
name|rsp
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|OPERATIONS_PER_SECOND
argument_list|,
name|hosts
argument_list|)
expr_stmt|;
block|}
DECL|method|handleErrorsAction
specifier|private
name|void
name|handleErrorsAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
name|NamedList
name|hosts
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
for|for
control|(
name|CdcrReplicatorState
name|state
range|:
name|replicatorManager
operator|.
name|getReplicatorStates
argument_list|()
control|)
block|{
name|NamedList
name|errors
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|errors
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|CONSECUTIVE_ERRORS
argument_list|,
name|state
operator|.
name|getConsecutiveErrors
argument_list|()
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
name|CdcrReplicatorState
operator|.
name|ErrorType
operator|.
name|BAD_REQUEST
operator|.
name|toLower
argument_list|()
argument_list|,
name|state
operator|.
name|getErrorCount
argument_list|(
name|CdcrReplicatorState
operator|.
name|ErrorType
operator|.
name|BAD_REQUEST
argument_list|)
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
name|CdcrReplicatorState
operator|.
name|ErrorType
operator|.
name|INTERNAL
operator|.
name|toLower
argument_list|()
argument_list|,
name|state
operator|.
name|getErrorCount
argument_list|(
name|CdcrReplicatorState
operator|.
name|ErrorType
operator|.
name|INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|NamedList
name|lastErrors
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
index|[]
name|lastError
range|:
name|state
operator|.
name|getLastErrors
argument_list|()
control|)
block|{
name|lastErrors
operator|.
name|add
argument_list|(
name|lastError
index|[
literal|0
index|]
argument_list|,
name|lastError
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|errors
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|LAST
argument_list|,
name|lastErrors
argument_list|)
expr_stmt|;
if|if
condition|(
name|hosts
operator|.
name|get
argument_list|(
name|state
operator|.
name|getZkHost
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|hosts
operator|.
name|add
argument_list|(
name|state
operator|.
name|getZkHost
argument_list|()
argument_list|,
operator|new
name|NamedList
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|NamedList
operator|)
name|hosts
operator|.
name|get
argument_list|(
name|state
operator|.
name|getZkHost
argument_list|()
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|state
operator|.
name|getTargetCollection
argument_list|()
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
name|rsp
operator|.
name|add
argument_list|(
name|CdcrParams
operator|.
name|ERRORS
argument_list|,
name|hosts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Manage Cross Data Center Replication"
return|;
block|}
comment|/**    * A thread subclass for executing a single    * {@link org.apache.solr.handler.CdcrParams.CdcrAction#SHARDCHECKPOINT} action.    */
DECL|class|SliceCheckpointCallable
specifier|private
specifier|static
specifier|final
class|class
name|SliceCheckpointCallable
implements|implements
name|Callable
argument_list|<
name|Long
argument_list|>
block|{
DECL|field|baseUrl
specifier|final
name|String
name|baseUrl
decl_stmt|;
DECL|field|cdcrPath
specifier|final
name|String
name|cdcrPath
decl_stmt|;
DECL|method|SliceCheckpointCallable
name|SliceCheckpointCallable
parameter_list|(
specifier|final
name|String
name|baseUrl
parameter_list|,
specifier|final
name|String
name|cdcrPath
parameter_list|)
block|{
name|this
operator|.
name|baseUrl
operator|=
name|baseUrl
expr_stmt|;
name|this
operator|.
name|cdcrPath
operator|=
name|cdcrPath
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call
specifier|public
name|Long
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|HttpSolrClient
name|server
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|baseUrl
argument_list|)
init|)
block|{
name|server
operator|.
name|setConnectionTimeout
argument_list|(
literal|15000
argument_list|)
expr_stmt|;
name|server
operator|.
name|setSoTimeout
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|ACTION
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|SHARDCHECKPOINT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SolrRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
name|cdcrPath
argument_list|)
expr_stmt|;
name|NamedList
name|response
init|=
name|server
operator|.
name|request
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
operator|(
name|Long
operator|)
name|response
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|CHECKPOINT
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class
end_unit
