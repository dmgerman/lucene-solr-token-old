begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|PivotListEntry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_class
DECL|class|PivotFacetHelper
specifier|public
class|class
name|PivotFacetHelper
block|{
comment|/**    * Encodes a value path as a string for the purposes of a refinement request    *    * @see PivotFacetValue#getValuePath    * @see #decodeRefinementValuePath    */
DECL|method|encodeRefinementValuePath
specifier|public
specifier|static
name|String
name|encodeRefinementValuePath
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
comment|// HACK: prefix flag every value to account for empty string vs null
comment|// NOTE: even if we didn't have to worry about null's smartSplit is stupid about
comment|// pruning empty strings from list
comment|// "^" prefix = null
comment|// "~" prefix = not null, may be empty string
assert|assert
literal|null
operator|!=
name|values
assert|;
comment|// special case: empty list => empty string
if|if
condition|(
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|val
range|:
name|values
control|)
block|{
if|if
condition|(
literal|null
operator|==
name|val
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'^'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|append
argument_list|(
literal|'~'
argument_list|)
expr_stmt|;
name|StrUtils
operator|.
name|appendEscapedTextToBuilder
argument_list|(
name|out
argument_list|,
name|val
argument_list|,
literal|','
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|deleteCharAt
argument_list|(
name|out
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// prune the last seperator
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
comment|// return StrUtils.join(values, ',');
block|}
comment|/**    * Decodes a value path string specified for refinement.    *    * @see #encodeRefinementValuePath    */
DECL|method|decodeRefinementValuePath
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|decodeRefinementValuePath
parameter_list|(
name|String
name|valuePath
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|rawvals
init|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|valuePath
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// special case: empty list => empty string
if|if
condition|(
name|rawvals
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|rawvals
return|;
name|List
argument_list|<
name|String
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|rawvals
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|raw
range|:
name|rawvals
control|)
block|{
assert|assert
literal|0
operator|<
name|raw
operator|.
name|length
argument_list|()
assert|;
if|if
condition|(
literal|'^'
operator|==
name|raw
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
condition|)
block|{
assert|assert
literal|1
operator|==
name|raw
operator|.
name|length
argument_list|()
assert|;
name|out
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
literal|'~'
operator|==
name|raw
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
assert|;
name|out
operator|.
name|add
argument_list|(
name|raw
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|out
return|;
block|}
comment|/** @see PivotListEntry#VALUE */
DECL|method|getValue
specifier|public
specifier|static
name|Comparable
name|getValue
parameter_list|(
name|NamedList
argument_list|<
name|Object
argument_list|>
name|pivotList
parameter_list|)
block|{
return|return
operator|(
name|Comparable
operator|)
name|PivotFacetHelper
operator|.
name|retrieve
argument_list|(
name|PivotListEntry
operator|.
name|VALUE
argument_list|,
name|pivotList
argument_list|)
return|;
block|}
comment|/** @see PivotListEntry#FIELD */
DECL|method|getField
specifier|public
specifier|static
name|String
name|getField
parameter_list|(
name|NamedList
argument_list|<
name|Object
argument_list|>
name|pivotList
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|PivotFacetHelper
operator|.
name|retrieve
argument_list|(
name|PivotListEntry
operator|.
name|FIELD
argument_list|,
name|pivotList
argument_list|)
return|;
block|}
comment|/** @see PivotListEntry#COUNT */
DECL|method|getCount
specifier|public
specifier|static
name|Integer
name|getCount
parameter_list|(
name|NamedList
argument_list|<
name|Object
argument_list|>
name|pivotList
parameter_list|)
block|{
return|return
operator|(
name|Integer
operator|)
name|PivotFacetHelper
operator|.
name|retrieve
argument_list|(
name|PivotListEntry
operator|.
name|COUNT
argument_list|,
name|pivotList
argument_list|)
return|;
block|}
comment|/** @see PivotListEntry#PIVOT */
DECL|method|getPivots
specifier|public
specifier|static
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|getPivots
parameter_list|(
name|NamedList
argument_list|<
name|Object
argument_list|>
name|pivotList
parameter_list|)
block|{
name|int
name|pivotIdx
init|=
name|pivotList
operator|.
name|indexOf
argument_list|(
name|PivotListEntry
operator|.
name|PIVOT
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|pivotIdx
operator|>
operator|-
literal|1
condition|)
block|{
return|return
operator|(
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
operator|)
name|pivotList
operator|.
name|getVal
argument_list|(
name|pivotIdx
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|retrieve
specifier|private
specifier|static
name|Object
name|retrieve
parameter_list|(
name|PivotListEntry
name|entryToGet
parameter_list|,
name|NamedList
argument_list|<
name|Object
argument_list|>
name|pivotList
parameter_list|)
block|{
return|return
name|pivotList
operator|.
name|get
argument_list|(
name|entryToGet
operator|.
name|getName
argument_list|()
argument_list|,
name|entryToGet
operator|.
name|getIndex
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class
end_unit
