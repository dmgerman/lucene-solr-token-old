begin_unit
begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|CdcrUpdateLog
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * This manager is responsible in enabling or disabling the buffering of the update logs. Currently, buffer  * is always activated for non-leader nodes. For leader nodes, it is enabled only if the user explicitly  * enabled it with the action {@link org.apache.solr.handler.CdcrParams.CdcrAction#ENABLEBUFFER}.  */
end_comment
begin_class
DECL|class|CdcrBufferManager
class|class
name|CdcrBufferManager
implements|implements
name|CdcrStateManager
operator|.
name|CdcrStateObserver
block|{
DECL|field|leaderStateManager
specifier|private
name|CdcrLeaderStateManager
name|leaderStateManager
decl_stmt|;
DECL|field|bufferStateManager
specifier|private
name|CdcrBufferStateManager
name|bufferStateManager
decl_stmt|;
DECL|field|core
specifier|private
specifier|final
name|SolrCore
name|core
decl_stmt|;
DECL|field|log
specifier|protected
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CdcrBufferManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|CdcrBufferManager
name|CdcrBufferManager
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|this
operator|.
name|core
operator|=
name|core
expr_stmt|;
block|}
DECL|method|setLeaderStateManager
name|void
name|setLeaderStateManager
parameter_list|(
specifier|final
name|CdcrLeaderStateManager
name|leaderStateManager
parameter_list|)
block|{
name|this
operator|.
name|leaderStateManager
operator|=
name|leaderStateManager
expr_stmt|;
name|this
operator|.
name|leaderStateManager
operator|.
name|register
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|setBufferStateManager
name|void
name|setBufferStateManager
parameter_list|(
specifier|final
name|CdcrBufferStateManager
name|bufferStateManager
parameter_list|)
block|{
name|this
operator|.
name|bufferStateManager
operator|=
name|bufferStateManager
expr_stmt|;
name|this
operator|.
name|bufferStateManager
operator|.
name|register
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method is synchronised as it can both be called by the leaderStateManager and the bufferStateManager.    */
annotation|@
name|Override
DECL|method|stateUpdate
specifier|public
specifier|synchronized
name|void
name|stateUpdate
parameter_list|()
block|{
name|CdcrUpdateLog
name|ulog
init|=
operator|(
name|CdcrUpdateLog
operator|)
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
comment|// If I am not the leader, I should always buffer my updates
if|if
condition|(
operator|!
name|leaderStateManager
operator|.
name|amILeader
argument_list|()
condition|)
block|{
name|ulog
operator|.
name|enableBuffer
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// If I am the leader, I should buffer my updates only if buffer is enabled
elseif|else
if|if
condition|(
name|bufferStateManager
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|CdcrParams
operator|.
name|BufferState
operator|.
name|ENABLED
argument_list|)
condition|)
block|{
name|ulog
operator|.
name|enableBuffer
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// otherwise, disable the buffer
name|ulog
operator|.
name|disableBuffer
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
