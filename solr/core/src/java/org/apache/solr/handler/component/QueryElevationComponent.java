begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BoostQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldComparatorSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SimpleFieldComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SentinelIntSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ZkController
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|QueryElevationParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QueryParsing
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|GroupingSpecification
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DOMUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|Config
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|transform
operator|.
name|ElevatedMarkerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|transform
operator|.
name|ExcludedMarkerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SortSpec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|VersionedFile
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|SolrCoreAware
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|IntIntHashMap
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|WeakHashMap
import|;
end_import
begin_comment
comment|/**  * A component to elevate some documents to the top of the result set.  *  * @since solr 1.3  */
end_comment
begin_class
DECL|class|QueryElevationComponent
specifier|public
class|class
name|QueryElevationComponent
extends|extends
name|SearchComponent
implements|implements
name|SolrCoreAware
block|{
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QueryElevationComponent
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Constants used in solrconfig.xml
DECL|field|FIELD_TYPE
specifier|static
specifier|final
name|String
name|FIELD_TYPE
init|=
literal|"queryFieldType"
decl_stmt|;
DECL|field|CONFIG_FILE
specifier|static
specifier|final
name|String
name|CONFIG_FILE
init|=
literal|"config-file"
decl_stmt|;
DECL|field|EXCLUDE
specifier|static
specifier|final
name|String
name|EXCLUDE
init|=
literal|"exclude"
decl_stmt|;
DECL|field|BOOSTED
specifier|public
specifier|static
specifier|final
name|String
name|BOOSTED
init|=
literal|"BOOSTED"
decl_stmt|;
DECL|field|BOOSTED_DOCIDS
specifier|public
specifier|static
specifier|final
name|String
name|BOOSTED_DOCIDS
init|=
literal|"BOOSTED_DOCIDS"
decl_stmt|;
DECL|field|BOOSTED_PRIORITY
specifier|public
specifier|static
specifier|final
name|String
name|BOOSTED_PRIORITY
init|=
literal|"BOOSTED_PRIORITY"
decl_stmt|;
DECL|field|EXCLUDED
specifier|public
specifier|static
specifier|final
name|String
name|EXCLUDED
init|=
literal|"EXCLUDED"
decl_stmt|;
comment|// Runtime param -- should be in common?
DECL|field|initArgs
specifier|private
name|SolrParams
name|initArgs
init|=
literal|null
decl_stmt|;
DECL|field|analyzer
specifier|private
name|Analyzer
name|analyzer
init|=
literal|null
decl_stmt|;
DECL|field|idField
specifier|private
name|String
name|idField
init|=
literal|null
decl_stmt|;
DECL|field|idSchemaFT
specifier|private
name|FieldType
name|idSchemaFT
decl_stmt|;
DECL|field|forceElevation
name|boolean
name|forceElevation
init|=
literal|false
decl_stmt|;
comment|// For each IndexReader, keep a query->elevation map
comment|// When the configuration is loaded from the data directory.
comment|// The key is null if loaded from the config directory, and
comment|// is never re-loaded.
DECL|field|elevationCache
specifier|final
name|Map
argument_list|<
name|IndexReader
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ElevationObj
argument_list|>
argument_list|>
name|elevationCache
init|=
operator|new
name|WeakHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|class|ElevationObj
class|class
name|ElevationObj
block|{
DECL|field|text
specifier|final
name|String
name|text
decl_stmt|;
DECL|field|analyzed
specifier|final
name|String
name|analyzed
decl_stmt|;
DECL|field|exclude
specifier|final
name|TermQuery
index|[]
name|exclude
decl_stmt|;
comment|//just keep the term query, b/c we will not always explicitly exclude the item based on markExcludes query time param
DECL|field|include
specifier|final
name|BooleanQuery
name|include
decl_stmt|;
DECL|field|priority
specifier|final
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|Integer
argument_list|>
name|priority
decl_stmt|;
DECL|field|ids
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|ids
decl_stmt|;
DECL|field|excludeIds
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|excludeIds
decl_stmt|;
DECL|method|ElevationObj
name|ElevationObj
parameter_list|(
name|String
name|qstr
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|elevate
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|exclude
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|text
operator|=
name|qstr
expr_stmt|;
name|this
operator|.
name|analyzed
operator|=
name|getAnalyzedQuery
argument_list|(
name|this
operator|.
name|text
argument_list|)
expr_stmt|;
name|this
operator|.
name|ids
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|excludeIds
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|include
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|this
operator|.
name|priority
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|int
name|max
init|=
name|elevate
operator|.
name|size
argument_list|()
operator|+
literal|5
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|elevate
control|)
block|{
name|id
operator|=
name|idSchemaFT
operator|.
name|readableToIndexed
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|TermQuery
name|tq
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|idField
argument_list|,
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|include
operator|.
name|add
argument_list|(
name|tq
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|this
operator|.
name|priority
operator|.
name|put
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|id
argument_list|)
argument_list|,
name|max
operator|--
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|include
operator|=
name|include
operator|.
name|build
argument_list|()
expr_stmt|;
if|if
condition|(
name|exclude
operator|==
literal|null
operator|||
name|exclude
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|exclude
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|exclude
operator|=
operator|new
name|TermQuery
index|[
name|exclude
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exclude
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|idSchemaFT
operator|.
name|readableToIndexed
argument_list|(
name|exclude
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|excludeIds
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|exclude
index|[
name|i
index|]
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|idField
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
name|this
operator|.
name|initArgs
operator|=
name|SolrParams
operator|.
name|toSolrParams
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|IndexSchema
name|schema
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|String
name|a
init|=
name|initArgs
operator|.
name|get
argument_list|(
name|FIELD_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|FieldType
name|ft
init|=
name|schema
operator|.
name|getFieldTypes
argument_list|()
operator|.
name|get
argument_list|(
name|a
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unknown FieldType: '"
operator|+
name|a
operator|+
literal|"' used in QueryElevationComponent"
argument_list|)
throw|;
block|}
name|analyzer
operator|=
name|ft
operator|.
name|getQueryAnalyzer
argument_list|()
expr_stmt|;
block|}
name|SchemaField
name|sf
init|=
name|schema
operator|.
name|getUniqueKeyField
argument_list|()
decl_stmt|;
if|if
condition|(
name|sf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"QueryElevationComponent requires the schema to have a uniqueKeyField."
argument_list|)
throw|;
block|}
name|idSchemaFT
operator|=
name|sf
operator|.
name|getType
argument_list|()
expr_stmt|;
name|idField
operator|=
name|sf
operator|.
name|getName
argument_list|()
expr_stmt|;
comment|//register the EditorialMarkerFactory
name|String
name|excludeName
init|=
name|initArgs
operator|.
name|get
argument_list|(
name|QueryElevationParams
operator|.
name|EXCLUDE_MARKER_FIELD_NAME
argument_list|,
literal|"excluded"
argument_list|)
decl_stmt|;
if|if
condition|(
name|excludeName
operator|==
literal|null
operator|||
name|excludeName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|==
literal|true
condition|)
block|{
name|excludeName
operator|=
literal|"excluded"
expr_stmt|;
block|}
name|ExcludedMarkerFactory
name|excludedMarkerFactory
init|=
operator|new
name|ExcludedMarkerFactory
argument_list|()
decl_stmt|;
name|core
operator|.
name|addTransformerFactory
argument_list|(
name|excludeName
argument_list|,
name|excludedMarkerFactory
argument_list|)
expr_stmt|;
name|ElevatedMarkerFactory
name|elevatedMarkerFactory
init|=
operator|new
name|ElevatedMarkerFactory
argument_list|()
decl_stmt|;
name|String
name|markerName
init|=
name|initArgs
operator|.
name|get
argument_list|(
name|QueryElevationParams
operator|.
name|EDITORIAL_MARKER_FIELD_NAME
argument_list|,
literal|"elevated"
argument_list|)
decl_stmt|;
if|if
condition|(
name|markerName
operator|==
literal|null
operator|||
name|markerName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|==
literal|true
condition|)
block|{
name|markerName
operator|=
literal|"elevated"
expr_stmt|;
block|}
name|core
operator|.
name|addTransformerFactory
argument_list|(
name|markerName
argument_list|,
name|elevatedMarkerFactory
argument_list|)
expr_stmt|;
name|forceElevation
operator|=
name|initArgs
operator|.
name|getBool
argument_list|(
name|QueryElevationParams
operator|.
name|FORCE_ELEVATION
argument_list|,
name|forceElevation
argument_list|)
expr_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|elevationCache
init|)
block|{
name|elevationCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|f
init|=
name|initArgs
operator|.
name|get
argument_list|(
name|CONFIG_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"QueryElevationComponent must specify argument: '"
operator|+
name|CONFIG_FILE
operator|+
literal|"' -- path to elevate.xml"
argument_list|)
throw|;
block|}
name|boolean
name|exists
init|=
literal|false
decl_stmt|;
comment|// check if using ZooKeeper
name|ZkController
name|zkController
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
decl_stmt|;
if|if
condition|(
name|zkController
operator|!=
literal|null
condition|)
block|{
comment|// TODO : shouldn't have to keep reading the config name when it has been read before
name|exists
operator|=
name|zkController
operator|.
name|configFileExists
argument_list|(
name|zkController
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|readConfigName
argument_list|(
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
argument_list|)
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|File
name|fC
init|=
operator|new
name|File
argument_list|(
name|core
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|getConfigDir
argument_list|()
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|File
name|fD
init|=
operator|new
name|File
argument_list|(
name|core
operator|.
name|getDataDir
argument_list|()
argument_list|,
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|fC
operator|.
name|exists
argument_list|()
operator|==
name|fD
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"QueryElevationComponent missing config file: '"
operator|+
name|f
operator|+
literal|"\n"
operator|+
literal|"either: "
operator|+
name|fC
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" or "
operator|+
name|fD
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" must exist, but not both."
argument_list|)
throw|;
block|}
if|if
condition|(
name|fC
operator|.
name|exists
argument_list|()
condition|)
block|{
name|exists
operator|=
literal|true
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Loading QueryElevation from: "
operator|+
name|fC
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|(
name|core
operator|.
name|getResourceLoader
argument_list|()
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|elevationCache
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|loadElevationMap
argument_list|(
name|cfg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//in other words, we think this is in the data dir, not the conf dir
if|if
condition|(
operator|!
name|exists
condition|)
block|{
comment|// preload the first data
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searchHolder
init|=
literal|null
decl_stmt|;
try|try
block|{
name|searchHolder
operator|=
name|core
operator|.
name|getNewestSearcher
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|searchHolder
operator|.
name|get
argument_list|()
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
name|getElevationMap
argument_list|(
name|reader
argument_list|,
name|core
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|searchHolder
operator|!=
literal|null
condition|)
name|searchHolder
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error initializing QueryElevationComponent."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|//get the elevation map from the data dir
DECL|method|getElevationMap
name|Map
argument_list|<
name|String
argument_list|,
name|ElevationObj
argument_list|>
name|getElevationMap
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|SolrCore
name|core
parameter_list|)
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|elevationCache
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ElevationObj
argument_list|>
name|map
init|=
name|elevationCache
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
return|return
name|map
return|;
name|map
operator|=
name|elevationCache
operator|.
name|get
argument_list|(
name|reader
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|String
name|f
init|=
name|initArgs
operator|.
name|get
argument_list|(
name|CONFIG_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"QueryElevationComponent must specify argument: "
operator|+
name|CONFIG_FILE
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Loading QueryElevation from data dir: "
operator|+
name|f
argument_list|)
expr_stmt|;
name|Config
name|cfg
decl_stmt|;
name|ZkController
name|zkController
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
decl_stmt|;
if|if
condition|(
name|zkController
operator|!=
literal|null
condition|)
block|{
name|cfg
operator|=
operator|new
name|Config
argument_list|(
name|core
operator|.
name|getResourceLoader
argument_list|()
argument_list|,
name|f
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|InputStream
name|is
init|=
name|VersionedFile
operator|.
name|getLatestFile
argument_list|(
name|core
operator|.
name|getDataDir
argument_list|()
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|cfg
operator|=
operator|new
name|Config
argument_list|(
name|core
operator|.
name|getResourceLoader
argument_list|()
argument_list|,
name|f
argument_list|,
operator|new
name|InputSource
argument_list|(
name|is
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|map
operator|=
name|loadElevationMap
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|elevationCache
operator|.
name|put
argument_list|(
name|reader
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
block|}
comment|//load up the elevation map
DECL|method|loadElevationMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ElevationObj
argument_list|>
name|loadElevationMap
parameter_list|(
name|Config
name|cfg
parameter_list|)
throws|throws
name|IOException
block|{
name|XPath
name|xpath
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXPath
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ElevationObj
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|NodeList
name|nodes
init|=
operator|(
name|NodeList
operator|)
name|cfg
operator|.
name|evaluate
argument_list|(
literal|"elevate/query"
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|qstr
init|=
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
literal|"text"
argument_list|,
literal|"missing query 'text'"
argument_list|)
decl_stmt|;
name|NodeList
name|children
init|=
literal|null
decl_stmt|;
try|try
block|{
name|children
operator|=
operator|(
name|NodeList
operator|)
name|xpath
operator|.
name|evaluate
argument_list|(
literal|"doc"
argument_list|,
name|node
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"query requires '<doc .../>' child"
argument_list|)
throw|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|include
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|exclude
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Node
name|child
init|=
name|children
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|child
argument_list|,
literal|"id"
argument_list|,
literal|"missing 'id'"
argument_list|)
decl_stmt|;
name|String
name|e
init|=
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|child
argument_list|,
name|EXCLUDE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|exclude
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|include
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|ElevationObj
name|elev
init|=
operator|new
name|ElevationObj
argument_list|(
name|qstr
argument_list|,
name|include
argument_list|,
name|exclude
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|elev
operator|.
name|analyzed
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Boosting query defined twice for query: '"
operator|+
name|elev
operator|.
name|text
operator|+
literal|"' ("
operator|+
name|elev
operator|.
name|analyzed
operator|+
literal|"')"
argument_list|)
throw|;
block|}
name|map
operator|.
name|put
argument_list|(
name|elev
operator|.
name|analyzed
argument_list|,
name|elev
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
comment|/**    * Helpful for testing without loading config.xml    *    * @throws IOException If there is a low-level I/O error.    */
DECL|method|setTopQueryResults
name|void
name|setTopQueryResults
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|query
parameter_list|,
name|String
index|[]
name|ids
parameter_list|,
name|String
index|[]
name|ex
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ids
operator|==
literal|null
condition|)
block|{
name|ids
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
if|if
condition|(
name|ex
operator|==
literal|null
condition|)
block|{
name|ex
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ElevationObj
argument_list|>
name|elev
init|=
name|elevationCache
operator|.
name|get
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|elev
operator|==
literal|null
condition|)
block|{
name|elev
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|elevationCache
operator|.
name|put
argument_list|(
name|reader
argument_list|,
name|elev
argument_list|)
expr_stmt|;
block|}
name|ElevationObj
name|obj
init|=
operator|new
name|ElevationObj
argument_list|(
name|query
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ids
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ex
argument_list|)
argument_list|)
decl_stmt|;
name|elev
operator|.
name|put
argument_list|(
name|obj
operator|.
name|analyzed
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
DECL|method|getAnalyzedQuery
name|String
name|getAnalyzedQuery
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
return|return
name|query
return|;
block|}
name|StringBuilder
name|norm
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
init|(
name|TokenStream
name|tokens
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
literal|""
argument_list|,
name|query
argument_list|)
init|)
block|{
name|tokens
operator|.
name|reset
argument_list|()
expr_stmt|;
name|CharTermAttribute
name|termAtt
init|=
name|tokens
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokens
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|norm
operator|.
name|append
argument_list|(
name|termAtt
operator|.
name|buffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|termAtt
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tokens
operator|.
name|end
argument_list|()
expr_stmt|;
return|return
name|norm
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|//---------------------------------------------------------------------------------
comment|// SearchComponent
comment|//---------------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|prepare
specifier|public
name|void
name|prepare
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrQueryRequest
name|req
init|=
name|rb
operator|.
name|req
decl_stmt|;
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
comment|// A runtime param can skip
if|if
condition|(
operator|!
name|params
operator|.
name|getBool
argument_list|(
name|QueryElevationParams
operator|.
name|ENABLE
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return;
block|}
name|boolean
name|exclusive
init|=
name|params
operator|.
name|getBool
argument_list|(
name|QueryElevationParams
operator|.
name|EXCLUSIVE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// A runtime parameter can alter the config value for forceElevation
name|boolean
name|force
init|=
name|params
operator|.
name|getBool
argument_list|(
name|QueryElevationParams
operator|.
name|FORCE_ELEVATION
argument_list|,
name|forceElevation
argument_list|)
decl_stmt|;
name|boolean
name|markExcludes
init|=
name|params
operator|.
name|getBool
argument_list|(
name|QueryElevationParams
operator|.
name|MARK_EXCLUDES
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|boostStr
init|=
name|params
operator|.
name|get
argument_list|(
name|QueryElevationParams
operator|.
name|IDS
argument_list|)
decl_stmt|;
name|String
name|exStr
init|=
name|params
operator|.
name|get
argument_list|(
name|QueryElevationParams
operator|.
name|EXCLUDE
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|rb
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|SolrParams
name|localParams
init|=
name|rb
operator|.
name|getQparser
argument_list|()
operator|.
name|getLocalParams
argument_list|()
decl_stmt|;
name|String
name|qstr
init|=
name|localParams
operator|==
literal|null
condition|?
name|rb
operator|.
name|getQueryString
argument_list|()
else|:
name|localParams
operator|.
name|get
argument_list|(
name|QueryParsing
operator|.
name|V
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
operator|||
name|qstr
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|ElevationObj
name|booster
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|boostStr
operator|!=
literal|null
operator|||
name|exStr
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|boosts
init|=
operator|(
name|boostStr
operator|!=
literal|null
operator|)
condition|?
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|boostStr
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
else|:
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|excludes
init|=
operator|(
name|exStr
operator|!=
literal|null
operator|)
condition|?
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|exStr
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
else|:
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|booster
operator|=
operator|new
name|ElevationObj
argument_list|(
name|qstr
argument_list|,
name|boosts
argument_list|,
name|excludes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IndexReader
name|reader
init|=
name|req
operator|.
name|getSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
name|qstr
operator|=
name|getAnalyzedQuery
argument_list|(
name|qstr
argument_list|)
expr_stmt|;
name|booster
operator|=
name|getElevationMap
argument_list|(
name|reader
argument_list|,
name|req
operator|.
name|getCore
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|qstr
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error loading elevation"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
if|if
condition|(
name|booster
operator|!=
literal|null
condition|)
block|{
name|rb
operator|.
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|put
argument_list|(
name|BOOSTED
argument_list|,
name|booster
operator|.
name|ids
argument_list|)
expr_stmt|;
name|rb
operator|.
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|put
argument_list|(
name|BOOSTED_PRIORITY
argument_list|,
name|booster
operator|.
name|priority
argument_list|)
expr_stmt|;
comment|// Change the query to insert forced documents
if|if
condition|(
name|exclusive
operator|==
literal|true
condition|)
block|{
comment|//we only want these results
name|rb
operator|.
name|setQuery
argument_list|(
operator|new
name|BoostQuery
argument_list|(
name|booster
operator|.
name|include
argument_list|,
literal|0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BooleanQuery
operator|.
name|Builder
name|newq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|newq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|newq
operator|.
name|add
argument_list|(
name|query
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|newq
operator|.
name|add
argument_list|(
operator|new
name|BoostQuery
argument_list|(
name|booster
operator|.
name|include
argument_list|,
literal|0f
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
if|if
condition|(
name|booster
operator|.
name|exclude
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|markExcludes
operator|==
literal|false
condition|)
block|{
for|for
control|(
name|TermQuery
name|tq
range|:
name|booster
operator|.
name|exclude
control|)
block|{
name|newq
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|tq
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//we are only going to mark items as excluded, not actually exclude them.  This works
comment|//with the EditorialMarkerFactory
name|rb
operator|.
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|put
argument_list|(
name|EXCLUDED
argument_list|,
name|booster
operator|.
name|excludeIds
argument_list|)
expr_stmt|;
block|}
block|}
name|rb
operator|.
name|setQuery
argument_list|(
name|newq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ElevationComparatorSource
name|comparator
init|=
operator|new
name|ElevationComparatorSource
argument_list|(
name|booster
argument_list|)
decl_stmt|;
comment|// if the sort is 'score desc' use a custom sorting method to
comment|// insert documents in their proper place
name|SortSpec
name|sortSpec
init|=
name|rb
operator|.
name|getSortSpec
argument_list|()
decl_stmt|;
if|if
condition|(
name|sortSpec
operator|.
name|getSort
argument_list|()
operator|==
literal|null
condition|)
block|{
name|sortSpec
operator|.
name|setSortAndFields
argument_list|(
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"_elevate_"
argument_list|,
name|comparator
argument_list|,
literal|true
argument_list|)
block|,
operator|new
name|SortField
argument_list|(
literal|null
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|SCORE
argument_list|,
literal|false
argument_list|)
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|SchemaField
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Check if the sort is based on score
name|SortSpec
name|modSortSpec
init|=
name|this
operator|.
name|modifySortSpec
argument_list|(
name|sortSpec
argument_list|,
name|force
argument_list|,
name|comparator
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|modSortSpec
condition|)
block|{
name|rb
operator|.
name|setSortSpec
argument_list|(
name|modSortSpec
argument_list|)
expr_stmt|;
block|}
block|}
comment|// alter the sorting in the grouping specification if there is one
name|GroupingSpecification
name|groupingSpec
init|=
name|rb
operator|.
name|getGroupingSpec
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupingSpec
operator|!=
literal|null
condition|)
block|{
name|SortField
index|[]
name|groupSort
init|=
name|groupingSpec
operator|.
name|getGroupSort
argument_list|()
operator|.
name|getSort
argument_list|()
decl_stmt|;
name|Sort
name|modGroupSort
init|=
name|this
operator|.
name|modifySort
argument_list|(
name|groupSort
argument_list|,
name|force
argument_list|,
name|comparator
argument_list|)
decl_stmt|;
if|if
condition|(
name|modGroupSort
operator|!=
literal|null
condition|)
block|{
name|groupingSpec
operator|.
name|setGroupSort
argument_list|(
name|modGroupSort
argument_list|)
expr_stmt|;
block|}
name|SortField
index|[]
name|withinGroupSort
init|=
name|groupingSpec
operator|.
name|getSortWithinGroup
argument_list|()
operator|.
name|getSort
argument_list|()
decl_stmt|;
name|Sort
name|modWithinGroupSort
init|=
name|this
operator|.
name|modifySort
argument_list|(
name|withinGroupSort
argument_list|,
name|force
argument_list|,
name|comparator
argument_list|)
decl_stmt|;
if|if
condition|(
name|modWithinGroupSort
operator|!=
literal|null
condition|)
block|{
name|groupingSpec
operator|.
name|setSortWithinGroup
argument_list|(
name|modWithinGroupSort
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Add debugging information
if|if
condition|(
name|rb
operator|.
name|isDebug
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|match
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|booster
operator|!=
literal|null
condition|)
block|{
comment|// Extract the elevated terms into a list
name|match
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|booster
operator|.
name|priority
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|booster
operator|.
name|include
operator|.
name|clauses
argument_list|()
control|)
block|{
name|TermQuery
name|tq
init|=
call|(
name|TermQuery
call|)
argument_list|(
operator|(
name|BooleanClause
operator|)
name|o
argument_list|)
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|match
operator|.
name|add
argument_list|(
name|tq
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|dbg
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
name|dbg
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
name|qstr
argument_list|)
expr_stmt|;
name|dbg
operator|.
name|add
argument_list|(
literal|"match"
argument_list|,
name|match
argument_list|)
expr_stmt|;
if|if
condition|(
name|rb
operator|.
name|isDebugQuery
argument_list|()
condition|)
block|{
name|rb
operator|.
name|addDebugInfo
argument_list|(
literal|"queryBoosting"
argument_list|,
name|dbg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|modifySort
specifier|private
name|Sort
name|modifySort
parameter_list|(
name|SortField
index|[]
name|current
parameter_list|,
name|boolean
name|force
parameter_list|,
name|ElevationComparatorSource
name|comparator
parameter_list|)
block|{
name|SortSpec
name|tmp
init|=
operator|new
name|SortSpec
argument_list|(
operator|new
name|Sort
argument_list|(
name|current
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|SchemaField
index|[
name|current
operator|.
name|length
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|tmp
operator|=
name|modifySortSpec
argument_list|(
name|tmp
argument_list|,
name|force
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
return|return
literal|null
operator|==
name|tmp
condition|?
literal|null
else|:
name|tmp
operator|.
name|getSort
argument_list|()
return|;
block|}
DECL|method|modifySortSpec
specifier|private
name|SortSpec
name|modifySortSpec
parameter_list|(
name|SortSpec
name|current
parameter_list|,
name|boolean
name|force
parameter_list|,
name|ElevationComparatorSource
name|comparator
parameter_list|)
block|{
name|boolean
name|modify
init|=
literal|false
decl_stmt|;
name|SortField
index|[]
name|currentSorts
init|=
name|current
operator|.
name|getSort
argument_list|()
operator|.
name|getSort
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SchemaField
argument_list|>
name|currentFields
init|=
name|current
operator|.
name|getSchemaFields
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|SortField
argument_list|>
name|sorts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|currentSorts
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SchemaField
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|currentFields
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// Perhaps force it to always sort by score
if|if
condition|(
name|force
operator|&&
name|currentSorts
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
operator|!=
name|SortField
operator|.
name|Type
operator|.
name|SCORE
condition|)
block|{
name|sorts
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"_elevate_"
argument_list|,
name|comparator
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|modify
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentSorts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SortField
name|sf
init|=
name|currentSorts
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|sf
operator|.
name|getType
argument_list|()
operator|==
name|SortField
operator|.
name|Type
operator|.
name|SCORE
condition|)
block|{
name|sorts
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"_elevate_"
argument_list|,
name|comparator
argument_list|,
operator|!
name|sf
operator|.
name|getReverse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|modify
operator|=
literal|true
expr_stmt|;
block|}
name|sorts
operator|.
name|add
argument_list|(
name|sf
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|currentFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|modify
condition|)
block|{
name|SortSpec
name|newSpec
init|=
operator|new
name|SortSpec
argument_list|(
operator|new
name|Sort
argument_list|(
name|sorts
operator|.
name|toArray
argument_list|(
operator|new
name|SortField
index|[
name|sorts
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|,
name|fields
argument_list|)
decl_stmt|;
name|newSpec
operator|.
name|setOffset
argument_list|(
name|current
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|newSpec
operator|.
name|setCount
argument_list|(
name|current
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newSpec
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getBoostDocs
specifier|public
specifier|static
name|IntIntHashMap
name|getBoostDocs
parameter_list|(
name|SolrIndexSearcher
name|indexSearcher
parameter_list|,
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|Integer
argument_list|>
name|boosted
parameter_list|,
name|Map
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|IntIntHashMap
name|boostDocs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|boosted
operator|!=
literal|null
condition|)
block|{
comment|//First see if it's already in the request context. Could have been put there
comment|//by another caller.
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|boostDocs
operator|=
operator|(
name|IntIntHashMap
operator|)
name|context
operator|.
name|get
argument_list|(
name|BOOSTED_DOCIDS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|boostDocs
operator|!=
literal|null
condition|)
block|{
return|return
name|boostDocs
return|;
block|}
comment|//Not in the context yet so load it.
name|SchemaField
name|idField
init|=
name|indexSearcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
decl_stmt|;
name|String
name|fieldName
init|=
name|idField
operator|.
name|getName
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|BytesRef
argument_list|>
name|localBoosts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|boosted
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|BytesRef
argument_list|>
name|boostedIt
init|=
name|boosted
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|boostedIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|localBoosts
operator|.
name|add
argument_list|(
name|boostedIt
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boostDocs
operator|=
operator|new
name|IntIntHashMap
argument_list|(
name|boosted
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LeafReaderContext
argument_list|>
name|leaves
init|=
name|indexSearcher
operator|.
name|getTopReaderContext
argument_list|()
operator|.
name|leaves
argument_list|()
decl_stmt|;
name|PostingsEnum
name|postingsEnum
init|=
literal|null
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|leaf
range|:
name|leaves
control|)
block|{
name|LeafReader
name|reader
init|=
name|leaf
operator|.
name|reader
argument_list|()
decl_stmt|;
name|int
name|docBase
init|=
name|leaf
operator|.
name|docBase
decl_stmt|;
name|Bits
name|liveDocs
init|=
name|reader
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|reader
operator|.
name|terms
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|BytesRef
argument_list|>
name|it
init|=
name|localBoosts
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BytesRef
name|ref
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|ref
argument_list|)
condition|)
block|{
name|postingsEnum
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|postingsEnum
argument_list|)
expr_stmt|;
name|int
name|doc
init|=
name|postingsEnum
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
while|while
condition|(
name|doc
operator|!=
name|PostingsEnum
operator|.
name|NO_MORE_DOCS
operator|&&
name|liveDocs
operator|!=
literal|null
operator|&&
name|liveDocs
operator|.
name|get
argument_list|(
name|doc
argument_list|)
operator|==
literal|false
condition|)
block|{
name|doc
operator|=
name|postingsEnum
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|doc
operator|!=
name|PostingsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
comment|//Found the document.
name|int
name|p
init|=
name|boosted
operator|.
name|get
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|boostDocs
operator|.
name|put
argument_list|(
name|doc
operator|+
name|docBase
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|put
argument_list|(
name|BOOSTED_DOCIDS
argument_list|,
name|boostDocs
argument_list|)
expr_stmt|;
block|}
return|return
name|boostDocs
return|;
block|}
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Do nothing -- the real work is modifying the input query
block|}
comment|//---------------------------------------------------------------------------------
comment|// SolrInfoMBean
comment|//---------------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Query Boosting -- boost particular documents for a given query"
return|;
block|}
annotation|@
name|Override
DECL|method|getDocs
specifier|public
name|URL
index|[]
name|getDocs
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|URL
index|[]
block|{
operator|new
name|URL
argument_list|(
literal|"http://wiki.apache.org/solr/QueryElevationComponent"
argument_list|)
block|}
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|class|ElevationComparatorSource
class|class
name|ElevationComparatorSource
extends|extends
name|FieldComparatorSource
block|{
DECL|field|elevations
specifier|private
name|QueryElevationComponent
operator|.
name|ElevationObj
name|elevations
decl_stmt|;
DECL|field|ordSet
specifier|private
name|SentinelIntSet
name|ordSet
decl_stmt|;
comment|//the key half of the map
DECL|field|termValues
specifier|private
name|BytesRef
index|[]
name|termValues
decl_stmt|;
comment|//the value half of the map
DECL|method|ElevationComparatorSource
specifier|public
name|ElevationComparatorSource
parameter_list|(
specifier|final
name|QueryElevationComponent
operator|.
name|ElevationObj
name|elevations
parameter_list|)
block|{
name|this
operator|.
name|elevations
operator|=
name|elevations
expr_stmt|;
name|int
name|size
init|=
name|elevations
operator|.
name|ids
operator|.
name|size
argument_list|()
decl_stmt|;
name|ordSet
operator|=
operator|new
name|SentinelIntSet
argument_list|(
name|size
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|termValues
operator|=
operator|new
name|BytesRef
index|[
name|ordSet
operator|.
name|keys
operator|.
name|length
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newComparator
specifier|public
name|FieldComparator
argument_list|<
name|Integer
argument_list|>
name|newComparator
parameter_list|(
name|String
name|fieldname
parameter_list|,
specifier|final
name|int
name|numHits
parameter_list|,
name|int
name|sortPos
parameter_list|,
name|boolean
name|reversed
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SimpleFieldComparator
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|private
specifier|final
name|int
index|[]
name|values
init|=
operator|new
name|int
index|[
name|numHits
index|]
decl_stmt|;
specifier|private
name|int
name|bottomVal
decl_stmt|;
specifier|private
name|int
name|topVal
decl_stmt|;
specifier|private
name|PostingsEnum
name|postingsEnum
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|seen
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|elevations
operator|.
name|ids
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
return|return
name|values
index|[
name|slot1
index|]
operator|-
name|values
index|[
name|slot2
index|]
return|;
comment|// values will be small enough that there is no overflow concern
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBottom
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
name|bottomVal
operator|=
name|values
index|[
name|slot
index|]
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTopValue
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
name|topVal
operator|=
name|value
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
specifier|private
name|int
name|docVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
if|if
condition|(
name|ordSet
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|slot
init|=
name|ordSet
operator|.
name|find
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|slot
operator|>=
literal|0
condition|)
block|{
name|BytesRef
name|id
init|=
name|termValues
index|[
name|slot
index|]
decl_stmt|;
name|Integer
name|prio
init|=
name|elevations
operator|.
name|priority
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
return|return
name|prio
operator|==
literal|null
condition|?
literal|0
else|:
name|prio
operator|.
name|intValue
argument_list|()
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|bottomVal
operator|-
name|docVal
argument_list|(
name|doc
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
index|[
name|slot
index|]
operator|=
name|docVal
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|//convert the ids to Lucene doc ids, the ordSet and termValues needs to be the same size as the number of elevation docs we have
name|ordSet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Fields
name|fields
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|fields
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
return|return;
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
name|idField
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
return|return;
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|BytesRefBuilder
name|term
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
name|Bits
name|liveDocs
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|elevations
operator|.
name|ids
control|)
block|{
name|term
operator|.
name|copyChars
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|seen
operator|.
name|contains
argument_list|(
name|id
argument_list|)
operator|==
literal|false
operator|&&
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|term
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|postingsEnum
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|postingsEnum
argument_list|,
name|PostingsEnum
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|int
name|docId
init|=
name|postingsEnum
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
while|while
condition|(
name|docId
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
operator|&&
name|liveDocs
operator|!=
literal|null
operator|&&
name|liveDocs
operator|.
name|get
argument_list|(
name|docId
argument_list|)
operator|==
literal|false
condition|)
block|{
name|docId
operator|=
name|postingsEnum
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|docId
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
continue|continue;
comment|// must have been deleted
name|termValues
index|[
name|ordSet
operator|.
name|put
argument_list|(
name|docId
argument_list|)
index|]
operator|=
name|term
operator|.
name|toBytesRef
argument_list|()
expr_stmt|;
name|seen
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
assert|assert
name|postingsEnum
operator|.
name|nextDoc
argument_list|()
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
assert|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|values
index|[
name|slot
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTop
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
specifier|final
name|int
name|docValue
init|=
name|docVal
argument_list|(
name|doc
argument_list|)
decl_stmt|;
return|return
name|topVal
operator|-
name|docValue
return|;
comment|// values will be small enough that there is no overflow concern
block|}
block|}
return|;
block|}
block|}
block|}
end_class
end_unit
