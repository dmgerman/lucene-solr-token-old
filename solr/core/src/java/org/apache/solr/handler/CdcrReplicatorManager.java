begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
operator|.
name|Builder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|CdcrUpdateLog
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_class
DECL|class|CdcrReplicatorManager
class|class
name|CdcrReplicatorManager
implements|implements
name|CdcrStateManager
operator|.
name|CdcrStateObserver
block|{
DECL|field|replicatorStates
specifier|private
name|List
argument_list|<
name|CdcrReplicatorState
argument_list|>
name|replicatorStates
decl_stmt|;
DECL|field|scheduler
specifier|private
specifier|final
name|CdcrReplicatorScheduler
name|scheduler
decl_stmt|;
DECL|field|processStateManager
specifier|private
name|CdcrProcessStateManager
name|processStateManager
decl_stmt|;
DECL|field|leaderStateManager
specifier|private
name|CdcrLeaderStateManager
name|leaderStateManager
decl_stmt|;
DECL|field|core
specifier|private
name|SolrCore
name|core
decl_stmt|;
DECL|field|path
specifier|private
name|String
name|path
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|CdcrReplicatorManager
name|CdcrReplicatorManager
parameter_list|(
specifier|final
name|SolrCore
name|core
parameter_list|,
name|String
name|path
parameter_list|,
name|SolrParams
name|replicatorConfiguration
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SolrParams
argument_list|>
argument_list|>
name|replicasConfiguration
parameter_list|)
block|{
name|this
operator|.
name|core
operator|=
name|core
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
comment|// create states
name|replicatorStates
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|String
name|myCollection
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SolrParams
argument_list|>
name|targets
init|=
name|replicasConfiguration
operator|.
name|get
argument_list|(
name|myCollection
argument_list|)
decl_stmt|;
if|if
condition|(
name|targets
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SolrParams
name|params
range|:
name|targets
control|)
block|{
name|String
name|zkHost
init|=
name|params
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|ZK_HOST_PARAM
argument_list|)
decl_stmt|;
name|String
name|targetCollection
init|=
name|params
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|TARGET_COLLECTION_PARAM
argument_list|)
decl_stmt|;
name|CloudSolrClient
name|client
init|=
operator|new
name|Builder
argument_list|()
operator|.
name|withZkHost
argument_list|(
name|zkHost
argument_list|)
operator|.
name|sendUpdatesOnlyToShardLeaders
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|setDefaultCollection
argument_list|(
name|targetCollection
argument_list|)
expr_stmt|;
name|replicatorStates
operator|.
name|add
argument_list|(
operator|new
name|CdcrReplicatorState
argument_list|(
name|targetCollection
argument_list|,
name|zkHost
argument_list|,
name|client
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|scheduler
operator|=
operator|new
name|CdcrReplicatorScheduler
argument_list|(
name|this
argument_list|,
name|replicatorConfiguration
argument_list|)
expr_stmt|;
block|}
DECL|method|setProcessStateManager
name|void
name|setProcessStateManager
parameter_list|(
specifier|final
name|CdcrProcessStateManager
name|processStateManager
parameter_list|)
block|{
name|this
operator|.
name|processStateManager
operator|=
name|processStateManager
expr_stmt|;
name|this
operator|.
name|processStateManager
operator|.
name|register
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|setLeaderStateManager
name|void
name|setLeaderStateManager
parameter_list|(
specifier|final
name|CdcrLeaderStateManager
name|leaderStateManager
parameter_list|)
block|{
name|this
operator|.
name|leaderStateManager
operator|=
name|leaderStateManager
expr_stmt|;
name|this
operator|.
name|leaderStateManager
operator|.
name|register
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    *<p>    * Inform the replicator manager of a change of state, and tell him to update its own state.    *</p>    *<p>    * If we are the leader and the process state is STARTED, we need to initialise the log readers and start the    * scheduled thread poll.    * Otherwise, if the process state is STOPPED or if we are not the leader, we need to close the log readers and stop    * the thread pool.    *</p>    *<p>    * This method is synchronised as it can both be called by the leaderStateManager and the processStateManager.    *</p>    */
annotation|@
name|Override
DECL|method|stateUpdate
specifier|public
specifier|synchronized
name|void
name|stateUpdate
parameter_list|()
block|{
if|if
condition|(
name|leaderStateManager
operator|.
name|amILeader
argument_list|()
operator|&&
name|processStateManager
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|CdcrParams
operator|.
name|ProcessState
operator|.
name|STARTED
argument_list|)
condition|)
block|{
name|this
operator|.
name|initLogReaders
argument_list|()
expr_stmt|;
name|this
operator|.
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|scheduler
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|this
operator|.
name|closeLogReaders
argument_list|()
expr_stmt|;
block|}
DECL|method|getReplicatorStates
name|List
argument_list|<
name|CdcrReplicatorState
argument_list|>
name|getReplicatorStates
parameter_list|()
block|{
return|return
name|replicatorStates
return|;
block|}
DECL|method|initLogReaders
name|void
name|initLogReaders
parameter_list|()
block|{
name|String
name|collectionName
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|String
name|shard
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getShardId
argument_list|()
decl_stmt|;
name|CdcrUpdateLog
name|ulog
init|=
operator|(
name|CdcrUpdateLog
operator|)
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
for|for
control|(
name|CdcrReplicatorState
name|state
range|:
name|replicatorStates
control|)
block|{
name|state
operator|.
name|closeLogReader
argument_list|()
expr_stmt|;
try|try
block|{
name|long
name|checkpoint
init|=
name|this
operator|.
name|getCheckpoint
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Create new update log reader for target {} with checkpoint {} @ {}:{}"
argument_list|,
name|state
operator|.
name|getTargetCollection
argument_list|()
argument_list|,
name|checkpoint
argument_list|,
name|collectionName
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|CdcrUpdateLog
operator|.
name|CdcrLogReader
name|reader
init|=
name|ulog
operator|.
name|newLogReader
argument_list|()
decl_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|checkpoint
argument_list|)
expr_stmt|;
name|state
operator|.
name|init
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|SolrServerException
decl||
name|SolrException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to instantiate the log reader for target collection "
operator|+
name|state
operator|.
name|getTargetCollection
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Thread interrupted while instantiate the log reader for target collection "
operator|+
name|state
operator|.
name|getTargetCollection
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getCheckpoint
specifier|private
name|long
name|getCheckpoint
parameter_list|(
name|CdcrReplicatorState
name|state
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|ACTION
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|COLLECTIONCHECKPOINT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SolrRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|NamedList
name|response
init|=
name|state
operator|.
name|getClient
argument_list|()
operator|.
name|request
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
operator|(
name|Long
operator|)
name|response
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|CHECKPOINT
argument_list|)
return|;
block|}
DECL|method|closeLogReaders
name|void
name|closeLogReaders
parameter_list|()
block|{
for|for
control|(
name|CdcrReplicatorState
name|state
range|:
name|replicatorStates
control|)
block|{
name|state
operator|.
name|closeLogReader
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Shutdown all the {@link org.apache.solr.handler.CdcrReplicatorState} by closing their    * {@link org.apache.solr.client.solrj.impl.CloudSolrClient} and    * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader}.    */
DECL|method|shutdown
name|void
name|shutdown
parameter_list|()
block|{
name|this
operator|.
name|scheduler
operator|.
name|shutdown
argument_list|()
expr_stmt|;
for|for
control|(
name|CdcrReplicatorState
name|state
range|:
name|replicatorStates
control|)
block|{
name|state
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|replicatorStates
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
