begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ShardParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|StatsParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocSet
import|;
end_import
begin_comment
comment|/**  * Stats component calculates simple statistics on numeric field values  * @since solr 1.4  */
end_comment
begin_class
DECL|class|StatsComponent
specifier|public
class|class
name|StatsComponent
extends|extends
name|SearchComponent
block|{
DECL|field|COMPONENT_NAME
specifier|public
specifier|static
specifier|final
name|String
name|COMPONENT_NAME
init|=
literal|"stats"
decl_stmt|;
annotation|@
name|Override
DECL|method|prepare
specifier|public
name|void
name|prepare
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|StatsParams
operator|.
name|STATS
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|rb
operator|.
name|setNeedDocSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rb
operator|.
name|doStats
operator|=
literal|true
expr_stmt|;
name|rb
operator|.
name|_statsInfo
operator|=
operator|new
name|StatsInfo
argument_list|(
name|rb
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|rb
operator|.
name|doStats
condition|)
return|return;
name|boolean
name|isShard
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|ShardParams
operator|.
name|IS_SHARD
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|StatsValues
argument_list|>
name|statsValues
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|StatsField
name|statsField
range|:
name|rb
operator|.
name|_statsInfo
operator|.
name|getStatsFields
argument_list|()
control|)
block|{
name|DocSet
name|docs
init|=
name|statsField
operator|.
name|computeBaseDocSet
argument_list|()
decl_stmt|;
name|statsValues
operator|.
name|put
argument_list|(
name|statsField
operator|.
name|getOutputKey
argument_list|()
argument_list|,
name|statsField
operator|.
name|computeLocalStatsValues
argument_list|(
name|docs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"stats"
argument_list|,
name|convertToResponse
argument_list|(
name|isShard
argument_list|,
name|statsValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|distributedProcess
specifier|public
name|int
name|distributedProcess
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ResponseBuilder
operator|.
name|STAGE_DONE
return|;
block|}
annotation|@
name|Override
DECL|method|modifyRequest
specifier|public
name|void
name|modifyRequest
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|SearchComponent
name|who
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rb
operator|.
name|doStats
condition|)
return|return;
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_GET_TOP_IDS
operator|)
operator|!=
literal|0
condition|)
block|{
name|sreq
operator|.
name|purpose
operator||=
name|ShardRequest
operator|.
name|PURPOSE_GET_STATS
expr_stmt|;
block|}
else|else
block|{
comment|// turn off stats on other requests
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|StatsParams
operator|.
name|STATS
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
comment|// we could optionally remove stats params
block|}
block|}
annotation|@
name|Override
DECL|method|handleResponses
specifier|public
name|void
name|handleResponses
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rb
operator|.
name|doStats
operator|||
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_GET_STATS
operator|)
operator|==
literal|0
condition|)
return|return;
name|Map
argument_list|<
name|String
argument_list|,
name|StatsValues
argument_list|>
name|allStatsValues
init|=
name|rb
operator|.
name|_statsInfo
operator|.
name|getAggregateStatsValues
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardResponse
name|srsp
range|:
name|sreq
operator|.
name|responses
control|)
block|{
name|NamedList
name|stats
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stats
operator|=
operator|(
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
operator|)
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"stats"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|ShardParams
operator|.
name|SHARDS_TOLERANT
argument_list|,
literal|false
argument_list|)
condition|)
block|{
continue|continue;
comment|// looks like a shard did not return anything
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unable to read stats info for shard: "
operator|+
name|srsp
operator|.
name|getShard
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|NamedList
name|stats_fields
init|=
name|unwrapStats
argument_list|(
name|stats
argument_list|)
decl_stmt|;
if|if
condition|(
name|stats_fields
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats_fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|stats_fields
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|StatsValues
name|stv
init|=
name|allStatsValues
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|NamedList
name|shardStv
init|=
operator|(
name|NamedList
operator|)
name|stats_fields
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|stv
operator|.
name|accumulate
argument_list|(
name|shardStv
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|finishStage
specifier|public
name|void
name|finishStage
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rb
operator|.
name|doStats
operator|||
name|rb
operator|.
name|stage
operator|!=
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
condition|)
return|return;
comment|// wait until STAGE_GET_FIELDS
comment|// so that "result" is already stored in the response (for aesthetics)
name|Map
argument_list|<
name|String
argument_list|,
name|StatsValues
argument_list|>
name|allStatsValues
init|=
name|rb
operator|.
name|_statsInfo
operator|.
name|getAggregateStatsValues
argument_list|()
decl_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"stats"
argument_list|,
name|convertToResponse
argument_list|(
literal|false
argument_list|,
name|allStatsValues
argument_list|)
argument_list|)
expr_stmt|;
name|rb
operator|.
name|_statsInfo
operator|=
literal|null
expr_stmt|;
comment|// free some objects
block|}
comment|/**    * Helper to pull the "stats_fields" out of the extra "stats" wrapper    */
DECL|method|unwrapStats
specifier|public
specifier|static
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|?
argument_list|>
argument_list|>
name|unwrapStats
parameter_list|(
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|stats
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|stats
condition|)
return|return
literal|null
return|;
return|return
name|stats
operator|.
name|get
argument_list|(
literal|"stats_fields"
argument_list|)
return|;
block|}
comment|/**    * Given a map of {@link StatsValues} using the appropriate response key,    * builds up the necessary "stats" data structure for including in the response --     * including the esoteric "stats_fields" wrapper.    */
DECL|method|convertToResponse
specifier|public
specifier|static
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|convertToResponse
parameter_list|(
name|boolean
name|force
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|StatsValues
argument_list|>
name|statsValues
parameter_list|)
block|{
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|stats
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|?
argument_list|>
argument_list|>
name|stats_fields
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
name|stats
operator|.
name|add
argument_list|(
literal|"stats_fields"
argument_list|,
name|stats_fields
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|StatsValues
argument_list|>
name|entry
range|:
name|statsValues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|NamedList
name|stv
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getStatsValues
argument_list|()
decl_stmt|;
if|if
condition|(
name|force
operator|||
operator|(
operator|(
name|Long
operator|)
name|stv
operator|.
name|get
argument_list|(
literal|"count"
argument_list|)
operator|!=
literal|0
operator|)
condition|)
block|{
name|stats_fields
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|stv
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stats_fields
operator|.
name|add
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|stats
return|;
block|}
comment|/////////////////////////////////////////////
comment|///  SolrInfoMBean
comment|////////////////////////////////////////////
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Calculate Statistics"
return|;
block|}
block|}
end_class
begin_comment
comment|/**  * Models all of the information about stats needed for a single request  * @see StatsField  */
end_comment
begin_class
DECL|class|StatsInfo
class|class
name|StatsInfo
block|{
DECL|field|rb
specifier|private
specifier|final
name|ResponseBuilder
name|rb
decl_stmt|;
DECL|field|statsFields
specifier|private
specifier|final
name|List
argument_list|<
name|StatsField
argument_list|>
name|statsFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|7
argument_list|)
decl_stmt|;
DECL|field|distribStatsValues
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|StatsValues
argument_list|>
name|distribStatsValues
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|statsFieldMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|StatsField
argument_list|>
name|statsFieldMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|tagToStatsFields
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|StatsField
argument_list|>
argument_list|>
name|tagToStatsFields
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|StatsInfo
specifier|public
name|StatsInfo
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
name|this
operator|.
name|rb
operator|=
name|rb
expr_stmt|;
name|SolrParams
name|params
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
index|[]
name|statsParams
init|=
name|params
operator|.
name|getParams
argument_list|(
name|StatsParams
operator|.
name|STATS_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|statsParams
condition|)
block|{
comment|// no stats.field params, nothing to parse.
return|return;
block|}
for|for
control|(
name|String
name|paramValue
range|:
name|statsParams
control|)
block|{
name|StatsField
name|current
init|=
operator|new
name|StatsField
argument_list|(
name|rb
argument_list|,
name|paramValue
argument_list|)
decl_stmt|;
name|statsFields
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tag
range|:
name|current
operator|.
name|getTagList
argument_list|()
control|)
block|{
name|List
argument_list|<
name|StatsField
argument_list|>
name|fieldList
init|=
name|tagToStatsFields
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldList
operator|==
literal|null
condition|)
block|{
name|fieldList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|fieldList
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|tagToStatsFields
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|fieldList
argument_list|)
expr_stmt|;
block|}
name|statsFieldMap
operator|.
name|put
argument_list|(
name|current
operator|.
name|getOutputKey
argument_list|()
argument_list|,
name|current
argument_list|)
expr_stmt|;
name|distribStatsValues
operator|.
name|put
argument_list|(
name|current
operator|.
name|getOutputKey
argument_list|()
argument_list|,
name|StatsValuesFactory
operator|.
name|createStatsValues
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns an immutable list of {@link StatsField} instances    * modeling each of the {@link StatsParams#STATS_FIELD} params specified    * as part of this request    */
DECL|method|getStatsFields
specifier|public
name|List
argument_list|<
name|StatsField
argument_list|>
name|getStatsFields
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|statsFields
argument_list|)
return|;
block|}
comment|/**    * Returns the {@link StatsField} associated with the specified (effective)     * outputKey, or null if there was no {@link StatsParams#STATS_FIELD} param    * that would corrispond with that key.    */
DECL|method|getStatsField
specifier|public
name|StatsField
name|getStatsField
parameter_list|(
name|String
name|outputKey
parameter_list|)
block|{
return|return
name|statsFieldMap
operator|.
name|get
argument_list|(
name|outputKey
argument_list|)
return|;
block|}
comment|/**    * Return immutable list of {@link StatsField} instances by string tag local parameter.    *    * @param tag tag local parameter    * @return list of stats fields    */
DECL|method|getStatsFieldsByTag
specifier|public
name|List
argument_list|<
name|StatsField
argument_list|>
name|getStatsFieldsByTag
parameter_list|(
name|String
name|tag
parameter_list|)
block|{
name|List
argument_list|<
name|StatsField
argument_list|>
name|raw
init|=
name|tagToStatsFields
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|raw
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|raw
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns an immutable map of response key =&gt; {@link StatsValues}    * instances for the current distributed request.      * Depending on where we are in the process of handling this request,     * these {@link StatsValues} instances may not be complete -- but they     * will never be null.    */
DECL|method|getAggregateStatsValues
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|StatsValues
argument_list|>
name|getAggregateStatsValues
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|distribStatsValues
argument_list|)
return|;
block|}
block|}
end_class
end_unit
