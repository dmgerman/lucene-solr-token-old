begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ZkController
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ZkSolrResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|MapSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ExecutorUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|ConfigOverlay
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|PluginInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|RequestParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|AuthorizationContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|PermissionNameProvider
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|PermissionNameProvider
operator|.
name|Name
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|CommandOperation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DefaultSolrThreadFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RTimer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|SolrCoreAware
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
operator|.
name|isNullOrEmpty
import|;
end_import
begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
operator|.
name|makeMap
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
operator|.
name|NAME
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
operator|.
name|formatString
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|ConfigOverlay
operator|.
name|NOT_EDITABLE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|ConfigOverlay
operator|.
name|ZNODEVER
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|ConfigSetProperties
operator|.
name|IMMUTABLE_CONFIGSET_ARG
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrConfig
operator|.
name|PluginOpts
operator|.
name|REQUIRE_CLASS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrConfig
operator|.
name|PluginOpts
operator|.
name|REQUIRE_NAME
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrConfig
operator|.
name|PluginOpts
operator|.
name|REQUIRE_NAME_IN_OVERLAY
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
operator|.
name|CLASS_NAME
import|;
end_import
begin_class
DECL|class|SolrConfigHandler
specifier|public
class|class
name|SolrConfigHandler
extends|extends
name|RequestHandlerBase
implements|implements
name|SolrCoreAware
implements|,
name|PermissionNameProvider
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|CONFIGSET_EDITING_DISABLED_ARG
specifier|public
specifier|static
specifier|final
name|String
name|CONFIGSET_EDITING_DISABLED_ARG
init|=
literal|"disable.configEdit"
decl_stmt|;
DECL|field|configEditing_disabled
specifier|public
specifier|static
specifier|final
name|boolean
name|configEditing_disabled
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|CONFIGSET_EDITING_DISABLED_ARG
argument_list|)
decl_stmt|;
DECL|field|namedPlugins
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SolrConfig
operator|.
name|SolrPluginInfo
argument_list|>
name|namedPlugins
decl_stmt|;
DECL|field|reloadLock
specifier|private
name|Lock
name|reloadLock
init|=
operator|new
name|ReentrantLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|field|isImmutableConfigSet
specifier|private
name|boolean
name|isImmutableConfigSet
init|=
literal|false
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|SolrConfig
operator|.
name|SolrPluginInfo
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrConfig
operator|.
name|SolrPluginInfo
name|plugin
range|:
name|SolrConfig
operator|.
name|plugins
control|)
block|{
if|if
condition|(
name|plugin
operator|.
name|options
operator|.
name|contains
argument_list|(
name|REQUIRE_NAME
argument_list|)
operator|||
name|plugin
operator|.
name|options
operator|.
name|contains
argument_list|(
name|REQUIRE_NAME_IN_OVERLAY
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|plugin
operator|.
name|getCleanTag
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
name|plugin
argument_list|)
expr_stmt|;
block|}
block|}
name|namedPlugins
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleRequestBody
specifier|public
name|void
name|handleRequestBody
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|Exception
block|{
name|setWt
argument_list|(
name|req
argument_list|,
name|CommonParams
operator|.
name|JSON
argument_list|)
expr_stmt|;
name|String
name|httpMethod
init|=
operator|(
name|String
operator|)
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|get
argument_list|(
literal|"httpMethod"
argument_list|)
decl_stmt|;
name|Command
name|command
init|=
operator|new
name|Command
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|,
name|httpMethod
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"POST"
operator|.
name|equals
argument_list|(
name|httpMethod
argument_list|)
condition|)
block|{
if|if
condition|(
name|configEditing_disabled
operator|||
name|isImmutableConfigSet
condition|)
block|{
specifier|final
name|String
name|reason
init|=
name|configEditing_disabled
condition|?
literal|"due to "
operator|+
name|CONFIGSET_EDITING_DISABLED_ARG
else|:
literal|"because ConfigSet is immutable"
decl_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|FORBIDDEN
argument_list|,
literal|" solrconfig editing is not enabled "
operator|+
name|reason
argument_list|)
throw|;
block|}
try|try
block|{
name|command
operator|.
name|handlePOST
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|RequestHandlerUtils
operator|.
name|addExperimentalFormatWarning
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|command
operator|.
name|handleGET
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|isImmutableConfigSet
operator|=
name|getImmutable
argument_list|(
name|core
argument_list|)
expr_stmt|;
block|}
DECL|method|getImmutable
specifier|public
specifier|static
name|boolean
name|getImmutable
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|NamedList
name|configSetProperties
init|=
name|core
operator|.
name|getConfigSetProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|configSetProperties
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|Object
name|immutable
init|=
name|configSetProperties
operator|.
name|get
argument_list|(
name|IMMUTABLE_CONFIGSET_ARG
argument_list|)
decl_stmt|;
return|return
name|immutable
operator|!=
literal|null
condition|?
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|immutable
operator|.
name|toString
argument_list|()
argument_list|)
else|:
literal|false
return|;
block|}
DECL|class|Command
specifier|private
class|class
name|Command
block|{
DECL|field|req
specifier|private
specifier|final
name|SolrQueryRequest
name|req
decl_stmt|;
DECL|field|resp
specifier|private
specifier|final
name|SolrQueryResponse
name|resp
decl_stmt|;
DECL|field|method
specifier|private
specifier|final
name|String
name|method
decl_stmt|;
DECL|field|path
specifier|private
name|String
name|path
decl_stmt|;
DECL|field|parts
name|List
argument_list|<
name|String
argument_list|>
name|parts
decl_stmt|;
DECL|method|Command
specifier|private
name|Command
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|resp
parameter_list|,
name|String
name|httpMethod
parameter_list|)
block|{
name|this
operator|.
name|req
operator|=
name|req
expr_stmt|;
name|this
operator|.
name|resp
operator|=
name|resp
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|httpMethod
expr_stmt|;
name|path
operator|=
operator|(
name|String
operator|)
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|get
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
name|path
operator|=
name|getDefaultPath
argument_list|()
expr_stmt|;
name|parts
operator|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|path
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|parts
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|getDefaultPath
specifier|private
name|String
name|getDefaultPath
parameter_list|()
block|{
return|return
literal|"/config"
return|;
block|}
DECL|method|handleGET
specifier|private
name|void
name|handleGET
parameter_list|()
block|{
if|if
condition|(
name|parts
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|//this is the whole config. sent out the whole payload
name|resp
operator|.
name|add
argument_list|(
literal|"config"
argument_list|,
name|getConfigDetails
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ConfigOverlay
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|parts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|resp
operator|.
name|add
argument_list|(
name|ConfigOverlay
operator|.
name|NAME
argument_list|,
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getOverlay
argument_list|()
operator|.
name|toMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RequestParams
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|parts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|parts
operator|.
name|size
argument_list|()
operator|==
literal|3
condition|)
block|{
name|RequestParams
name|params
init|=
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getRequestParams
argument_list|()
decl_stmt|;
name|RequestParams
operator|.
name|ParamSet
name|p
init|=
name|params
operator|.
name|getParams
argument_list|(
name|parts
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|Map
name|m
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|ZNODEVER
argument_list|,
name|params
operator|.
name|getZnodeVersion
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|put
argument_list|(
name|RequestParams
operator|.
name|NAME
argument_list|,
name|makeMap
argument_list|(
name|parts
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|p
operator|.
name|toMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|resp
operator|.
name|add
argument_list|(
name|SolrQueryResponse
operator|.
name|NAME
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resp
operator|.
name|add
argument_list|(
name|SolrQueryResponse
operator|.
name|NAME
argument_list|,
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getRequestParams
argument_list|()
operator|.
name|toMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|ZNODEVER
operator|.
name|equals
argument_list|(
name|parts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|resp
operator|.
name|add
argument_list|(
name|ZNODEVER
argument_list|,
name|Utils
operator|.
name|makeMap
argument_list|(
name|ConfigOverlay
operator|.
name|NAME
argument_list|,
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getOverlay
argument_list|()
operator|.
name|getZnodeVersion
argument_list|()
argument_list|,
name|RequestParams
operator|.
name|NAME
argument_list|,
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getRequestParams
argument_list|()
operator|.
name|getZnodeVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|checkStale
init|=
literal|false
decl_stmt|;
name|int
name|expectedVersion
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getInt
argument_list|(
name|ConfigOverlay
operator|.
name|NAME
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|actualVersion
init|=
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getOverlay
argument_list|()
operator|.
name|getZnodeVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|expectedVersion
operator|>
name|actualVersion
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"expecting overlay version {} but my version is {}"
argument_list|,
name|expectedVersion
argument_list|,
name|actualVersion
argument_list|)
expr_stmt|;
name|checkStale
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expectedVersion
operator|!=
operator|-
literal|1
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"I already have the expected version {} of config"
argument_list|,
name|expectedVersion
argument_list|)
expr_stmt|;
block|}
name|expectedVersion
operator|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getInt
argument_list|(
name|RequestParams
operator|.
name|NAME
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|actualVersion
operator|=
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getRequestParams
argument_list|()
operator|.
name|getZnodeVersion
argument_list|()
expr_stmt|;
if|if
condition|(
name|expectedVersion
operator|>
name|actualVersion
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"expecting params version {} but my version is {}"
argument_list|,
name|expectedVersion
argument_list|,
name|actualVersion
argument_list|)
expr_stmt|;
name|checkStale
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expectedVersion
operator|!=
operator|-
literal|1
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"I already have the expected version {} of params"
argument_list|,
name|expectedVersion
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkStale
operator|&&
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getResourceLoader
argument_list|()
operator|instanceof
name|ZkSolrResourceLoader
condition|)
block|{
operator|new
name|Thread
argument_list|(
name|SolrConfigHandler
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-refreshconf"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
operator|!
name|reloadLock
operator|.
name|tryLock
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Another reload is in progress . Not doing anything"
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Trying to update my configs"
argument_list|)
expr_stmt|;
name|SolrCore
operator|.
name|getConfListener
argument_list|(
name|req
operator|.
name|getCore
argument_list|()
argument_list|,
operator|(
name|ZkSolrResourceLoader
operator|)
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getResourceLoader
argument_list|()
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to refresh conf "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reloadLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"checkStale {} , resourceloader {}"
argument_list|,
name|checkStale
argument_list|,
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
name|getConfigDetails
argument_list|()
decl_stmt|;
name|resp
operator|.
name|add
argument_list|(
literal|"config"
argument_list|,
name|makeMap
argument_list|(
name|parts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|parts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getConfigDetails
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getConfigDetails
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|toMap
argument_list|()
decl_stmt|;
name|Map
name|reqHandlers
init|=
operator|(
name|Map
operator|)
name|map
operator|.
name|get
argument_list|(
name|SolrRequestHandler
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqHandlers
operator|==
literal|null
condition|)
name|map
operator|.
name|put
argument_list|(
name|SolrRequestHandler
operator|.
name|TYPE
argument_list|,
name|reqHandlers
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|plugins
init|=
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getImplicitHandlers
argument_list|()
decl_stmt|;
for|for
control|(
name|PluginInfo
name|plugin
range|:
name|plugins
control|)
block|{
if|if
condition|(
name|SolrRequestHandler
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|plugin
operator|.
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|reqHandlers
operator|.
name|containsKey
argument_list|(
name|plugin
operator|.
name|name
argument_list|)
condition|)
block|{
name|reqHandlers
operator|.
name|put
argument_list|(
name|plugin
operator|.
name|name
argument_list|,
name|plugin
operator|.
name|toMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|map
return|;
block|}
DECL|method|handlePOST
specifier|private
name|void
name|handlePOST
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|CommandOperation
argument_list|>
name|ops
init|=
name|CommandOperation
operator|.
name|readCommands
argument_list|(
name|req
operator|.
name|getContentStreams
argument_list|()
argument_list|,
name|resp
argument_list|)
decl_stmt|;
if|if
condition|(
name|ops
operator|==
literal|null
condition|)
return|return;
try|try
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|ArrayList
argument_list|<
name|CommandOperation
argument_list|>
name|opsCopy
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ops
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CommandOperation
name|op
range|:
name|ops
control|)
name|opsCopy
operator|.
name|add
argument_list|(
name|op
operator|.
name|getCopy
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|parts
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|RequestParams
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|parts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|RequestParams
name|params
init|=
name|RequestParams
operator|.
name|getFreshRequestParams
argument_list|(
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getResourceLoader
argument_list|()
argument_list|,
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getRequestParams
argument_list|()
argument_list|)
decl_stmt|;
name|handleParams
argument_list|(
name|opsCopy
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ConfigOverlay
name|overlay
init|=
name|SolrConfig
operator|.
name|getConfigOverlay
argument_list|(
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getResourceLoader
argument_list|()
argument_list|)
decl_stmt|;
name|handleCommands
argument_list|(
name|opsCopy
argument_list|,
name|overlay
argument_list|)
expr_stmt|;
block|}
break|break;
comment|//succeeded . so no need to go over the loop again
block|}
catch|catch
parameter_list|(
name|ZkController
operator|.
name|ResourceModifiedInZkException
name|e
parameter_list|)
block|{
comment|//retry
name|log
operator|.
name|info
argument_list|(
literal|"Race condition, the node is modified in ZK by someone else "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|resp
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|resp
operator|.
name|add
argument_list|(
name|CommandOperation
operator|.
name|ERR_MSGS
argument_list|,
name|singletonList
argument_list|(
name|SchemaManager
operator|.
name|getErrorStr
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleParams
specifier|private
name|void
name|handleParams
parameter_list|(
name|ArrayList
argument_list|<
name|CommandOperation
argument_list|>
name|ops
parameter_list|,
name|RequestParams
name|params
parameter_list|)
block|{
for|for
control|(
name|CommandOperation
name|op
range|:
name|ops
control|)
block|{
switch|switch
condition|(
name|op
operator|.
name|name
condition|)
block|{
case|case
name|SET
case|:
case|case
name|UPDATE
case|:
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|op
operator|.
name|getDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|hasError
argument_list|()
condition|)
break|break;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
name|val
init|=
literal|null
decl_stmt|;
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|op
operator|.
name|addError
argument_list|(
literal|"null key "
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|key
operator|=
name|key
operator|.
name|trim
argument_list|()
expr_stmt|;
name|String
name|err
init|=
name|validateName
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|op
operator|.
name|addError
argument_list|(
name|err
argument_list|)
expr_stmt|;
continue|continue;
block|}
try|try
block|{
name|val
operator|=
operator|(
name|Map
operator|)
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
name|op
operator|.
name|addError
argument_list|(
literal|"invalid params for key : "
operator|+
name|key
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|val
operator|.
name|containsKey
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|op
operator|.
name|addError
argument_list|(
literal|"Empty keys are not allowed in params"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|RequestParams
operator|.
name|ParamSet
name|old
init|=
name|params
operator|.
name|getParams
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|name
operator|.
name|equals
argument_list|(
name|UPDATE
argument_list|)
condition|)
block|{
if|if
condition|(
name|old
operator|==
literal|null
condition|)
block|{
name|op
operator|.
name|addError
argument_list|(
name|formatString
argument_list|(
literal|"unknown paramset {} cannot update "
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|params
operator|=
name|params
operator|.
name|setParams
argument_list|(
name|key
argument_list|,
name|old
operator|.
name|update
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Long
name|version
init|=
name|old
operator|==
literal|null
condition|?
literal|0
else|:
name|old
operator|.
name|getVersion
argument_list|()
operator|+
literal|1
decl_stmt|;
name|params
operator|=
name|params
operator|.
name|setParams
argument_list|(
name|key
argument_list|,
name|RequestParams
operator|.
name|createParamSet
argument_list|(
name|val
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
literal|"delete"
case|:
block|{
name|List
argument_list|<
name|String
argument_list|>
name|name
init|=
name|op
operator|.
name|getStrs
argument_list|(
name|CommandOperation
operator|.
name|ROOT_OBJ
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|hasError
argument_list|()
condition|)
break|break;
for|for
control|(
name|String
name|s
range|:
name|name
control|)
block|{
if|if
condition|(
name|params
operator|.
name|getParams
argument_list|(
name|s
argument_list|)
operator|==
literal|null
condition|)
block|{
name|op
operator|.
name|addError
argument_list|(
name|formatString
argument_list|(
literal|"can't delete . No such params ''{0}'' exist"
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|params
operator|=
name|params
operator|.
name|setParams
argument_list|(
name|s
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|List
name|errs
init|=
name|CommandOperation
operator|.
name|captureErrors
argument_list|(
name|ops
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|errs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resp
operator|.
name|add
argument_list|(
name|CommandOperation
operator|.
name|ERR_MSGS
argument_list|,
name|errs
argument_list|)
expr_stmt|;
return|return;
block|}
name|SolrResourceLoader
name|loader
init|=
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getResourceLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|loader
operator|instanceof
name|ZkSolrResourceLoader
condition|)
block|{
name|ZkSolrResourceLoader
name|zkLoader
init|=
operator|(
name|ZkSolrResourceLoader
operator|)
name|loader
decl_stmt|;
if|if
condition|(
name|ops
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ZkController
operator|.
name|touchConfDir
argument_list|(
name|zkLoader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"persisting params data : {}"
argument_list|,
name|Utils
operator|.
name|toJSONString
argument_list|(
name|params
operator|.
name|toMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|latestVersion
init|=
name|ZkController
operator|.
name|persistConfigResourceToZooKeeper
argument_list|(
name|zkLoader
argument_list|,
name|params
operator|.
name|getZnodeVersion
argument_list|()
argument_list|,
name|RequestParams
operator|.
name|RESOURCE
argument_list|,
name|params
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"persisted to version : {} "
argument_list|,
name|latestVersion
argument_list|)
expr_stmt|;
name|waitForAllReplicasState
argument_list|(
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
argument_list|,
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
argument_list|,
name|RequestParams
operator|.
name|NAME
argument_list|,
name|latestVersion
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|SolrResourceLoader
operator|.
name|persistConfLocally
argument_list|(
name|loader
argument_list|,
name|RequestParams
operator|.
name|RESOURCE
argument_list|,
name|params
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|refreshRequestParams
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|handleCommands
specifier|private
name|void
name|handleCommands
parameter_list|(
name|List
argument_list|<
name|CommandOperation
argument_list|>
name|ops
parameter_list|,
name|ConfigOverlay
name|overlay
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|CommandOperation
name|op
range|:
name|ops
control|)
block|{
switch|switch
condition|(
name|op
operator|.
name|name
condition|)
block|{
case|case
name|SET_PROPERTY
case|:
name|overlay
operator|=
name|applySetProp
argument_list|(
name|op
argument_list|,
name|overlay
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNSET_PROPERTY
case|:
name|overlay
operator|=
name|applyUnset
argument_list|(
name|op
argument_list|,
name|overlay
argument_list|)
expr_stmt|;
break|break;
case|case
name|SET_USER_PROPERTY
case|:
name|overlay
operator|=
name|applySetUserProp
argument_list|(
name|op
argument_list|,
name|overlay
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNSET_USER_PROPERTY
case|:
name|overlay
operator|=
name|applyUnsetUserProp
argument_list|(
name|op
argument_list|,
name|overlay
argument_list|)
expr_stmt|;
break|break;
default|default:
block|{
name|List
argument_list|<
name|String
argument_list|>
name|pcs
init|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|op
operator|.
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
literal|'-'
argument_list|)
decl_stmt|;
if|if
condition|(
name|pcs
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
name|op
operator|.
name|addError
argument_list|(
name|formatString
argument_list|(
literal|"Unknown operation ''{0}'' "
argument_list|,
name|op
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|prefix
init|=
name|pcs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|pcs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmdPrefixes
operator|.
name|contains
argument_list|(
name|prefix
argument_list|)
operator|&&
name|namedPlugins
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|SolrConfig
operator|.
name|SolrPluginInfo
name|info
init|=
name|namedPlugins
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"delete"
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|overlay
operator|=
name|deleteNamedComponent
argument_list|(
name|op
argument_list|,
name|overlay
argument_list|,
name|info
operator|.
name|getCleanTag
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|overlay
operator|=
name|updateNamedPlugin
argument_list|(
name|info
argument_list|,
name|op
argument_list|,
name|overlay
argument_list|,
name|prefix
operator|.
name|equals
argument_list|(
literal|"create"
argument_list|)
operator|||
name|prefix
operator|.
name|equals
argument_list|(
literal|"add"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|op
operator|.
name|unknownOperation
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|List
name|errs
init|=
name|CommandOperation
operator|.
name|captureErrors
argument_list|(
name|ops
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|errs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Failed to run commands. errors are {}"
argument_list|,
name|StrUtils
operator|.
name|join
argument_list|(
name|errs
argument_list|,
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|resp
operator|.
name|add
argument_list|(
name|CommandOperation
operator|.
name|ERR_MSGS
argument_list|,
name|errs
argument_list|)
expr_stmt|;
return|return;
block|}
name|SolrResourceLoader
name|loader
init|=
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getResourceLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|loader
operator|instanceof
name|ZkSolrResourceLoader
condition|)
block|{
name|int
name|latestVersion
init|=
name|ZkController
operator|.
name|persistConfigResourceToZooKeeper
argument_list|(
operator|(
name|ZkSolrResourceLoader
operator|)
name|loader
argument_list|,
name|overlay
operator|.
name|getZnodeVersion
argument_list|()
argument_list|,
name|ConfigOverlay
operator|.
name|RESOURCE_NAME
argument_list|,
name|overlay
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Executed config commands successfully and persisted to ZK {}"
argument_list|,
name|ops
argument_list|)
expr_stmt|;
name|waitForAllReplicasState
argument_list|(
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
argument_list|,
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
argument_list|,
name|ConfigOverlay
operator|.
name|NAME
argument_list|,
name|latestVersion
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SolrResourceLoader
operator|.
name|persistConfLocally
argument_list|(
name|loader
argument_list|,
name|ConfigOverlay
operator|.
name|RESOURCE_NAME
argument_list|,
name|overlay
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|reload
argument_list|(
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Executed config commands successfully and persited to File System {}"
argument_list|,
name|ops
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteNamedComponent
specifier|private
name|ConfigOverlay
name|deleteNamedComponent
parameter_list|(
name|CommandOperation
name|op
parameter_list|,
name|ConfigOverlay
name|overlay
parameter_list|,
name|String
name|typ
parameter_list|)
block|{
name|String
name|name
init|=
name|op
operator|.
name|getStr
argument_list|(
name|CommandOperation
operator|.
name|ROOT_OBJ
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|hasError
argument_list|()
condition|)
return|return
name|overlay
return|;
if|if
condition|(
name|overlay
operator|.
name|getNamedPlugins
argument_list|(
name|typ
argument_list|)
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|overlay
operator|.
name|deleteNamedPlugin
argument_list|(
name|name
argument_list|,
name|typ
argument_list|)
return|;
block|}
else|else
block|{
name|op
operator|.
name|addError
argument_list|(
name|formatString
argument_list|(
literal|"NO such {0} ''{1}'' "
argument_list|,
name|typ
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|overlay
return|;
block|}
block|}
DECL|method|updateNamedPlugin
specifier|private
name|ConfigOverlay
name|updateNamedPlugin
parameter_list|(
name|SolrConfig
operator|.
name|SolrPluginInfo
name|info
parameter_list|,
name|CommandOperation
name|op
parameter_list|,
name|ConfigOverlay
name|overlay
parameter_list|,
name|boolean
name|isCeate
parameter_list|)
block|{
name|String
name|name
init|=
name|op
operator|.
name|getStr
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
name|String
name|clz
init|=
name|info
operator|.
name|options
operator|.
name|contains
argument_list|(
name|REQUIRE_CLASS
argument_list|)
condition|?
name|op
operator|.
name|getStr
argument_list|(
name|CLASS_NAME
argument_list|)
else|:
name|op
operator|.
name|getStr
argument_list|(
name|CLASS_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|op
operator|.
name|getMap
argument_list|(
name|PluginInfo
operator|.
name|DEFAULTS
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|op
operator|.
name|getMap
argument_list|(
name|PluginInfo
operator|.
name|INVARIANTS
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|op
operator|.
name|getMap
argument_list|(
name|PluginInfo
operator|.
name|APPENDS
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|hasError
argument_list|()
condition|)
return|return
name|overlay
return|;
if|if
condition|(
operator|!
name|verifyClass
argument_list|(
name|op
argument_list|,
name|clz
argument_list|,
name|info
operator|.
name|clazz
argument_list|)
condition|)
return|return
name|overlay
return|;
if|if
condition|(
name|pluginExists
argument_list|(
name|info
argument_list|,
name|overlay
argument_list|,
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|isCeate
condition|)
block|{
name|op
operator|.
name|addError
argument_list|(
name|formatString
argument_list|(
literal|" ''{0}'' already exists . Do an ''{1}'' , if you want to change it "
argument_list|,
name|name
argument_list|,
literal|"update-"
operator|+
name|info
operator|.
name|getTagCleanLower
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|overlay
return|;
block|}
else|else
block|{
return|return
name|overlay
operator|.
name|addNamedPlugin
argument_list|(
name|op
operator|.
name|getDataMap
argument_list|()
argument_list|,
name|info
operator|.
name|getCleanTag
argument_list|()
argument_list|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isCeate
condition|)
block|{
return|return
name|overlay
operator|.
name|addNamedPlugin
argument_list|(
name|op
operator|.
name|getDataMap
argument_list|()
argument_list|,
name|info
operator|.
name|getCleanTag
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|op
operator|.
name|addError
argument_list|(
name|formatString
argument_list|(
literal|" ''{0}'' does not exist . Do an ''{1}'' , if you want to create it "
argument_list|,
name|name
argument_list|,
literal|"create-"
operator|+
name|info
operator|.
name|getTagCleanLower
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|overlay
return|;
block|}
block|}
block|}
DECL|method|pluginExists
specifier|private
name|boolean
name|pluginExists
parameter_list|(
name|SolrConfig
operator|.
name|SolrPluginInfo
name|info
parameter_list|,
name|ConfigOverlay
name|overlay
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|l
init|=
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getPluginInfos
argument_list|(
name|info
operator|.
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PluginInfo
name|pluginInfo
range|:
name|l
control|)
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|pluginInfo
operator|.
name|name
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|overlay
operator|.
name|getNamedPlugins
argument_list|(
name|info
operator|.
name|getCleanTag
argument_list|()
argument_list|)
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|verifyClass
specifier|private
name|boolean
name|verifyClass
parameter_list|(
name|CommandOperation
name|op
parameter_list|,
name|String
name|clz
parameter_list|,
name|Class
name|expected
parameter_list|)
block|{
if|if
condition|(
name|clz
operator|==
literal|null
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|op
operator|.
name|getStr
argument_list|(
literal|"runtimeLib"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
comment|//this is not dynamically loaded so we can verify the class right away
try|try
block|{
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|createInitInstance
argument_list|(
operator|new
name|PluginInfo
argument_list|(
name|SolrRequestHandler
operator|.
name|TYPE
argument_list|,
name|op
operator|.
name|getDataMap
argument_list|()
argument_list|)
argument_list|,
name|expected
argument_list|,
name|clz
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|op
operator|.
name|addError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|applySetUserProp
specifier|private
name|ConfigOverlay
name|applySetUserProp
parameter_list|(
name|CommandOperation
name|op
parameter_list|,
name|ConfigOverlay
name|overlay
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
name|op
operator|.
name|getDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|hasError
argument_list|()
condition|)
return|return
name|overlay
return|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|m
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|overlay
operator|=
name|overlay
operator|.
name|setUserProperty
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|overlay
return|;
block|}
DECL|method|applyUnsetUserProp
specifier|private
name|ConfigOverlay
name|applyUnsetUserProp
parameter_list|(
name|CommandOperation
name|op
parameter_list|,
name|ConfigOverlay
name|overlay
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|name
init|=
name|op
operator|.
name|getStrs
argument_list|(
name|CommandOperation
operator|.
name|ROOT_OBJ
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|hasError
argument_list|()
condition|)
return|return
name|overlay
return|;
for|for
control|(
name|String
name|o
range|:
name|name
control|)
block|{
if|if
condition|(
operator|!
name|overlay
operator|.
name|getUserProps
argument_list|()
operator|.
name|containsKey
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|op
operator|.
name|addError
argument_list|(
name|formatString
argument_list|(
literal|"No such property ''{0}''"
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|overlay
operator|=
name|overlay
operator|.
name|unsetUserProperty
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|overlay
return|;
block|}
DECL|method|applyUnset
specifier|private
name|ConfigOverlay
name|applyUnset
parameter_list|(
name|CommandOperation
name|op
parameter_list|,
name|ConfigOverlay
name|overlay
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|name
init|=
name|op
operator|.
name|getStrs
argument_list|(
name|CommandOperation
operator|.
name|ROOT_OBJ
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|hasError
argument_list|()
condition|)
return|return
name|overlay
return|;
for|for
control|(
name|String
name|o
range|:
name|name
control|)
block|{
if|if
condition|(
operator|!
name|ConfigOverlay
operator|.
name|isEditableProp
argument_list|(
name|o
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|op
operator|.
name|addError
argument_list|(
name|formatString
argument_list|(
name|NOT_EDITABLE
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|overlay
operator|=
name|overlay
operator|.
name|unsetProperty
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|overlay
return|;
block|}
DECL|method|applySetProp
specifier|private
name|ConfigOverlay
name|applySetProp
parameter_list|(
name|CommandOperation
name|op
parameter_list|,
name|ConfigOverlay
name|overlay
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
name|op
operator|.
name|getDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|hasError
argument_list|()
condition|)
return|return
name|overlay
return|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|m
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Class
name|typ
init|=
name|ConfigOverlay
operator|.
name|checkEditable
argument_list|(
name|name
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|typ
operator|==
literal|null
condition|)
block|{
name|op
operator|.
name|addError
argument_list|(
name|formatString
argument_list|(
name|NOT_EDITABLE
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|typ
operator|==
name|String
operator|.
name|class
condition|)
name|val
operator|=
name|val
operator|.
name|toString
argument_list|()
expr_stmt|;
name|String
name|typeErr
init|=
literal|"Property {0} must be of {1} type "
decl_stmt|;
if|if
condition|(
name|typ
operator|==
name|Boolean
operator|.
name|class
condition|)
block|{
try|try
block|{
name|val
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exp
parameter_list|)
block|{
name|op
operator|.
name|addError
argument_list|(
name|formatString
argument_list|(
name|typeErr
argument_list|,
name|name
argument_list|,
name|typ
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
name|typ
operator|==
name|Integer
operator|.
name|class
condition|)
block|{
try|try
block|{
name|val
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exp
parameter_list|)
block|{
name|op
operator|.
name|addError
argument_list|(
name|formatString
argument_list|(
name|typeErr
argument_list|,
name|typ
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
name|typ
operator|==
name|Float
operator|.
name|class
condition|)
block|{
try|try
block|{
name|val
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exp
parameter_list|)
block|{
name|op
operator|.
name|addError
argument_list|(
name|formatString
argument_list|(
name|typeErr
argument_list|,
name|typ
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
name|overlay
operator|=
name|overlay
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|overlay
return|;
block|}
block|}
DECL|method|validateName
specifier|public
specifier|static
name|String
name|validateName
parameter_list|(
name|String
name|s
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|c
operator|>=
literal|'a'
operator|&&
name|c
operator|<=
literal|'z'
operator|)
operator|||
operator|(
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
operator|)
operator|||
name|c
operator|==
literal|'_'
operator|||
name|c
operator|==
literal|'-'
operator|||
name|c
operator|==
literal|'.'
condition|)
continue|continue;
else|else
block|{
return|return
name|formatString
argument_list|(
literal|"''{0}'' name should only have chars [a-zA-Z_-.0-9] "
argument_list|,
name|s
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|setWt
specifier|public
specifier|static
name|void
name|setWt
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|String
name|wt
parameter_list|)
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
name|params
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|)
operator|!=
literal|null
condition|)
return|return;
comment|//wt is set by user
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|,
name|wt
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|req
operator|.
name|setParams
argument_list|(
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|params
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|map
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSubHandler
specifier|public
name|SolrRequestHandler
name|getSubHandler
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|subPaths
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
return|return
name|this
return|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/params/"
argument_list|)
condition|)
return|return
name|this
return|;
return|return
literal|null
return|;
block|}
DECL|field|subPaths
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|subPaths
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/overlay"
argument_list|,
literal|"/params"
argument_list|,
literal|"/updateHandler"
argument_list|,
literal|"/query"
argument_list|,
literal|"/jmx"
argument_list|,
literal|"/requestDispatcher"
argument_list|,
literal|"/znodeVersion"
argument_list|)
argument_list|)
decl_stmt|;
static|static
block|{
for|for
control|(
name|SolrConfig
operator|.
name|SolrPluginInfo
name|solrPluginInfo
range|:
name|SolrConfig
operator|.
name|plugins
control|)
name|subPaths
operator|.
name|add
argument_list|(
literal|"/"
operator|+
name|solrPluginInfo
operator|.
name|getCleanTag
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//////////////////////// SolrInfoMBeans methods //////////////////////
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Edit solrconfig.xml"
return|;
block|}
annotation|@
name|Override
DECL|method|getVersion
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getSpecificationVersion
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getCategory
specifier|public
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|Category
operator|.
name|OTHER
return|;
block|}
DECL|field|SET_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|SET_PROPERTY
init|=
literal|"set-property"
decl_stmt|;
DECL|field|UNSET_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|UNSET_PROPERTY
init|=
literal|"unset-property"
decl_stmt|;
DECL|field|SET_USER_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|SET_USER_PROPERTY
init|=
literal|"set-user-property"
decl_stmt|;
DECL|field|UNSET_USER_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|UNSET_USER_PROPERTY
init|=
literal|"unset-user-property"
decl_stmt|;
DECL|field|SET
specifier|public
specifier|static
specifier|final
name|String
name|SET
init|=
literal|"set"
decl_stmt|;
DECL|field|UPDATE
specifier|public
specifier|static
specifier|final
name|String
name|UPDATE
init|=
literal|"update"
decl_stmt|;
DECL|field|CREATE
specifier|public
specifier|static
specifier|final
name|String
name|CREATE
init|=
literal|"create"
decl_stmt|;
DECL|field|cmdPrefixes
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|cmdPrefixes
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|CREATE
argument_list|,
name|UPDATE
argument_list|,
literal|"delete"
argument_list|,
literal|"add"
argument_list|)
decl_stmt|;
comment|/**    * Block up to a specified maximum time until we see agreement on the schema    * version in ZooKeeper across all replicas for a collection.    */
DECL|method|waitForAllReplicasState
specifier|private
specifier|static
name|void
name|waitForAllReplicasState
parameter_list|(
name|String
name|collection
parameter_list|,
name|ZkController
name|zkController
parameter_list|,
name|String
name|prop
parameter_list|,
name|int
name|expectedVersion
parameter_list|,
name|int
name|maxWaitSecs
parameter_list|)
block|{
specifier|final
name|RTimer
name|timer
init|=
operator|new
name|RTimer
argument_list|()
decl_stmt|;
comment|// get a list of active replica cores to query for the schema zk version (skipping this core of course)
name|List
argument_list|<
name|PerReplicaCallable
argument_list|>
name|concurrentTasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|coreUrl
range|:
name|getActiveReplicaCoreUrls
argument_list|(
name|zkController
argument_list|,
name|collection
argument_list|)
control|)
block|{
name|PerReplicaCallable
name|e
init|=
operator|new
name|PerReplicaCallable
argument_list|(
name|coreUrl
argument_list|,
name|prop
argument_list|,
name|expectedVersion
argument_list|,
name|maxWaitSecs
argument_list|)
decl_stmt|;
name|concurrentTasks
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|concurrentTasks
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
comment|// nothing to wait for ...
name|log
operator|.
name|info
argument_list|(
name|formatString
argument_list|(
literal|"Waiting up to {0} secs for {1} replicas to set the property {2} to be of version {3} for collection {4}"
argument_list|,
name|maxWaitSecs
argument_list|,
name|concurrentTasks
operator|.
name|size
argument_list|()
argument_list|,
name|prop
argument_list|,
name|expectedVersion
argument_list|,
name|collection
argument_list|)
argument_list|)
expr_stmt|;
comment|// use an executor service to invoke schema zk version requests in parallel with a max wait time
name|int
name|poolSize
init|=
name|Math
operator|.
name|min
argument_list|(
name|concurrentTasks
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|ExecutorService
name|parallelExecutor
init|=
name|ExecutorUtil
operator|.
name|newMDCAwareFixedThreadPool
argument_list|(
name|poolSize
argument_list|,
operator|new
name|DefaultSolrThreadFactory
argument_list|(
literal|"solrHandlerExecutor"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Future
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|results
init|=
name|parallelExecutor
operator|.
name|invokeAll
argument_list|(
name|concurrentTasks
argument_list|,
name|maxWaitSecs
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
comment|// determine whether all replicas have the update
name|List
argument_list|<
name|String
argument_list|>
name|failedList
init|=
literal|null
decl_stmt|;
comment|// lazily init'd
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|f
operator|++
control|)
block|{
name|Boolean
name|success
init|=
literal|false
decl_stmt|;
name|Future
argument_list|<
name|Boolean
argument_list|>
name|next
init|=
name|results
operator|.
name|get
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|.
name|isDone
argument_list|()
operator|&&
operator|!
name|next
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
comment|// looks to have finished, but need to check if it succeeded
try|try
block|{
name|success
operator|=
name|next
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
comment|// shouldn't happen since we checked isCancelled
block|}
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|String
name|coreUrl
init|=
name|concurrentTasks
operator|.
name|get
argument_list|(
name|f
argument_list|)
operator|.
name|coreUrl
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Core "
operator|+
name|coreUrl
operator|+
literal|"could not get the expected version "
operator|+
name|expectedVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|failedList
operator|==
literal|null
condition|)
name|failedList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|failedList
operator|.
name|add
argument_list|(
name|coreUrl
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if any tasks haven't completed within the specified timeout, it's an error
if|if
condition|(
name|failedList
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|formatString
argument_list|(
literal|"{0} out of {1} the property {2} to be of version {3} within {4} seconds! Failed cores: {5}"
argument_list|,
name|failedList
operator|.
name|size
argument_list|()
argument_list|,
name|concurrentTasks
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|prop
argument_list|,
name|expectedVersion
argument_list|,
name|maxWaitSecs
argument_list|,
name|failedList
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|formatString
argument_list|(
literal|"Core  was interrupted . trying to set the property {1} to version {2} to propagate to {3} replicas for collection {4}"
argument_list|,
name|prop
argument_list|,
name|expectedVersion
argument_list|,
name|concurrentTasks
operator|.
name|size
argument_list|()
argument_list|,
name|collection
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|ExecutorUtil
operator|.
name|shutdownAndAwaitTermination
argument_list|(
name|parallelExecutor
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Took {}ms to set the property {} to be of version {} for collection {}"
argument_list|,
name|timer
operator|.
name|getTime
argument_list|()
argument_list|,
name|prop
argument_list|,
name|expectedVersion
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
DECL|method|getActiveReplicaCoreUrls
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getActiveReplicaCoreUrls
parameter_list|(
name|ZkController
name|zkController
parameter_list|,
name|String
name|collection
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|activeReplicaCoreUrls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|zkController
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
name|clusterState
operator|.
name|getLiveNodes
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Slice
argument_list|>
name|activeSlices
init|=
name|clusterState
operator|.
name|getActiveSlices
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|activeSlices
operator|!=
literal|null
operator|&&
name|activeSlices
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Slice
name|next
range|:
name|activeSlices
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|replicasMap
init|=
name|next
operator|.
name|getReplicasMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|replicasMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|entry
range|:
name|replicasMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Replica
name|replica
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|replica
operator|.
name|getState
argument_list|()
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
operator|&&
name|liveNodes
operator|.
name|contains
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
name|activeReplicaCoreUrls
operator|.
name|add
argument_list|(
name|replica
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|activeReplicaCoreUrls
return|;
block|}
annotation|@
name|Override
DECL|method|getPermissionName
specifier|public
name|Name
name|getPermissionName
parameter_list|(
name|AuthorizationContext
name|ctx
parameter_list|)
block|{
switch|switch
condition|(
name|ctx
operator|.
name|getHttpMethod
argument_list|()
condition|)
block|{
case|case
literal|"GET"
case|:
return|return
name|Name
operator|.
name|CONFIG_READ_PERM
return|;
case|case
literal|"POST"
case|:
return|return
name|Name
operator|.
name|CONFIG_EDIT_PERM
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
DECL|class|PerReplicaCallable
specifier|private
specifier|static
class|class
name|PerReplicaCallable
extends|extends
name|SolrRequest
implements|implements
name|Callable
argument_list|<
name|Boolean
argument_list|>
block|{
DECL|field|coreUrl
name|String
name|coreUrl
decl_stmt|;
DECL|field|prop
name|String
name|prop
decl_stmt|;
DECL|field|expectedZkVersion
name|int
name|expectedZkVersion
decl_stmt|;
DECL|field|remoteVersion
name|Number
name|remoteVersion
init|=
literal|null
decl_stmt|;
DECL|field|maxWait
name|int
name|maxWait
decl_stmt|;
DECL|method|PerReplicaCallable
name|PerReplicaCallable
parameter_list|(
name|String
name|coreUrl
parameter_list|,
name|String
name|prop
parameter_list|,
name|int
name|expectedZkVersion
parameter_list|,
name|int
name|maxWait
parameter_list|)
block|{
name|super
argument_list|(
name|METHOD
operator|.
name|GET
argument_list|,
literal|"/config/"
operator|+
name|ZNODEVER
argument_list|)
expr_stmt|;
name|this
operator|.
name|coreUrl
operator|=
name|coreUrl
expr_stmt|;
name|this
operator|.
name|expectedZkVersion
operator|=
name|expectedZkVersion
expr_stmt|;
name|this
operator|.
name|prop
operator|=
name|prop
expr_stmt|;
name|this
operator|.
name|maxWait
operator|=
name|maxWait
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
return|return
operator|new
name|ModifiableSolrParams
argument_list|()
operator|.
name|set
argument_list|(
name|prop
argument_list|,
name|expectedZkVersion
argument_list|)
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|,
name|CommonParams
operator|.
name|JAVABIN
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|call
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|RTimer
name|timer
init|=
operator|new
name|RTimer
argument_list|()
decl_stmt|;
name|int
name|attempts
init|=
literal|0
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|solr
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|coreUrl
argument_list|)
init|)
block|{
comment|// eventually, this loop will get killed by the ExecutorService's timeout
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|long
name|timeElapsed
init|=
operator|(
name|long
operator|)
name|timer
operator|.
name|getTime
argument_list|()
operator|/
literal|1000
decl_stmt|;
if|if
condition|(
name|timeElapsed
operator|>=
name|maxWait
condition|)
block|{
return|return
literal|false
return|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Time elapsed : {} secs, maxWait {}"
argument_list|,
name|timeElapsed
argument_list|,
name|maxWait
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|resp
init|=
name|solr
operator|.
name|httpUriRequest
argument_list|(
name|this
argument_list|)
operator|.
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|resp
operator|!=
literal|null
condition|)
block|{
name|Map
name|m
init|=
operator|(
name|Map
operator|)
name|resp
operator|.
name|get
argument_list|(
name|ZNODEVER
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|remoteVersion
operator|=
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
name|prop
argument_list|)
expr_stmt|;
if|if
condition|(
name|remoteVersion
operator|!=
literal|null
operator|&&
name|remoteVersion
operator|.
name|intValue
argument_list|()
operator|>=
name|expectedZkVersion
condition|)
break|break;
block|}
block|}
name|attempts
operator|++
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|formatString
argument_list|(
literal|"Could not get expectedVersion {0} from {1} for prop {2}   after {3} attempts"
argument_list|,
name|expectedZkVersion
argument_list|,
name|coreUrl
argument_list|,
name|prop
argument_list|,
name|attempts
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InterruptedException
condition|)
block|{
break|break;
comment|// stop looping
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to get /schema/zkversion from "
operator|+
name|coreUrl
operator|+
literal|" due to: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getContentStreams
specifier|public
name|Collection
argument_list|<
name|ContentStream
argument_list|>
name|getContentStreams
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|createResponse
specifier|protected
name|SolrResponse
name|createResponse
parameter_list|(
name|SolrClient
name|client
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class
end_unit
