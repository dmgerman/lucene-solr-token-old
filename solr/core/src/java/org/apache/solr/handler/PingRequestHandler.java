begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_comment
comment|/**  * Ping solr core  *   * @since solr 1.3  */
end_comment
begin_class
DECL|class|PingRequestHandler
specifier|public
class|class
name|PingRequestHandler
extends|extends
name|RequestHandlerBase
block|{
DECL|field|formatRFC3339
name|SimpleDateFormat
name|formatRFC3339
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'h:m:ss.SZ"
argument_list|)
decl_stmt|;
DECL|enum|ACTIONS
DECL|enum constant|STATUS
DECL|enum constant|ENABLE
DECL|enum constant|DISABLE
DECL|enum constant|PING
specifier|protected
enum|enum
name|ACTIONS
block|{
name|STATUS
block|,
name|ENABLE
block|,
name|DISABLE
block|,
name|PING
block|}
empty_stmt|;
DECL|field|healthcheck
specifier|private
name|String
name|healthcheck
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|handleRequestBody
specifier|public
name|void
name|handleRequestBody
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|SolrCore
name|core
init|=
name|req
operator|.
name|getCore
argument_list|()
decl_stmt|;
comment|// Check if the service is available
name|healthcheck
operator|=
name|core
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|get
argument_list|(
literal|"admin/healthcheck/text()"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|actionParam
init|=
name|params
operator|.
name|get
argument_list|(
literal|"action"
argument_list|)
decl_stmt|;
name|ACTIONS
name|action
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|actionParam
operator|==
literal|null
condition|)
block|{
name|action
operator|=
name|ACTIONS
operator|.
name|PING
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|action
operator|=
name|ACTIONS
operator|.
name|valueOf
argument_list|(
name|actionParam
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown action: "
operator|+
name|actionParam
argument_list|)
throw|;
block|}
block|}
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|PING
case|:
if|if
condition|(
name|healthcheck
operator|!=
literal|null
operator|&&
operator|!
operator|new
name|File
argument_list|(
name|healthcheck
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
literal|"Service disabled"
argument_list|)
throw|;
block|}
name|handlePing
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
case|case
name|ENABLE
case|:
name|handleEnable
argument_list|(
name|healthcheck
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|DISABLE
case|:
name|handleEnable
argument_list|(
name|healthcheck
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|STATUS
case|:
if|if
condition|(
name|healthcheck
operator|==
literal|null
condition|)
block|{
name|SolrException
name|e
init|=
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
literal|"healthcheck not configured"
argument_list|)
decl_stmt|;
name|rsp
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|new
name|File
argument_list|(
name|healthcheck
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|rsp
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
literal|"enabled"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rsp
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
literal|"disabled"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|handlePing
specifier|protected
name|void
name|handlePing
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|SolrCore
name|core
init|=
name|req
operator|.
name|getCore
argument_list|()
decl_stmt|;
comment|// Get the RequestHandler
name|String
name|qt
init|=
name|params
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|)
decl_stmt|;
comment|//optional; you get the default otherwise
name|SolrRequestHandler
name|handler
init|=
name|core
operator|.
name|getRequestHandler
argument_list|(
name|qt
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown RequestHandler (qt): "
operator|+
name|qt
argument_list|)
throw|;
block|}
if|if
condition|(
name|handler
operator|instanceof
name|PingRequestHandler
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Cannot execute the PingRequestHandler recursively"
argument_list|)
throw|;
block|}
comment|// Execute the ping query and catch any possible exception
name|Throwable
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SolrQueryResponse
name|pingrsp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|core
operator|.
name|execute
argument_list|(
name|handler
argument_list|,
name|req
argument_list|,
name|pingrsp
argument_list|)
expr_stmt|;
name|ex
operator|=
name|pingrsp
operator|.
name|getException
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|ex
operator|=
name|th
expr_stmt|;
block|}
comment|// Send an error or an 'OK' message (response code will be 200)
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Ping query caused exception: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|rsp
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
literal|"OK"
argument_list|)
expr_stmt|;
block|}
DECL|method|handleEnable
specifier|protected
name|void
name|handleEnable
parameter_list|(
name|String
name|healthcheck
parameter_list|,
name|boolean
name|enable
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|healthcheck
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
literal|"No healthcheck file defined."
argument_list|)
throw|;
block|}
name|File
name|enableFile
init|=
operator|new
name|File
argument_list|(
name|healthcheck
argument_list|)
decl_stmt|;
if|if
condition|(
name|enable
condition|)
block|{
name|enableFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
comment|// write out when the file was created
name|FileWriter
name|fw
init|=
operator|new
name|FileWriter
argument_list|(
name|enableFile
argument_list|)
decl_stmt|;
name|fw
operator|.
name|write
argument_list|(
name|formatRFC3339
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|enableFile
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|enableFile
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|NOT_FOUND
argument_list|,
literal|"Did not successfully delete healthcheck file:'"
operator|+
name|healthcheck
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
block|}
comment|//////////////////////// SolrInfoMBeans methods //////////////////////
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Reports application health to a load-balancer"
return|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
literal|"$URL$"
return|;
block|}
block|}
end_class
end_unit
