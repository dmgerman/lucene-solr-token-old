begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|PluginInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|PluginInfoInitialized
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_class
DECL|class|ShardHandlerFactory
specifier|public
specifier|abstract
class|class
name|ShardHandlerFactory
block|{
DECL|method|getShardHandler
specifier|public
specifier|abstract
name|ShardHandler
name|getShardHandler
parameter_list|()
function_decl|;
DECL|method|close
specifier|public
specifier|abstract
name|void
name|close
parameter_list|()
function_decl|;
comment|/**    * Create a new ShardHandlerFactory instance    * @param info    a PluginInfo object defining which type to create.  If null,    *                the default {@link HttpShardHandlerFactory} will be used    * @param loader  a SolrResourceLoader used to find the ShardHandlerFactory classes    * @return a new, initialized ShardHandlerFactory instance    */
DECL|method|newInstance
specifier|public
specifier|static
name|ShardHandlerFactory
name|newInstance
parameter_list|(
name|PluginInfo
name|info
parameter_list|,
name|SolrResourceLoader
name|loader
parameter_list|)
block|{
if|if
condition|(
name|info
operator|==
literal|null
condition|)
name|info
operator|=
name|DEFAULT_SHARDHANDLER_INFO
expr_stmt|;
try|try
block|{
name|ShardHandlerFactory
name|shf
init|=
name|loader
operator|.
name|findClass
argument_list|(
name|info
operator|.
name|className
argument_list|,
name|ShardHandlerFactory
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|PluginInfoInitialized
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|shf
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
name|PluginInfoInitialized
operator|.
name|class
operator|.
name|cast
argument_list|(
name|shf
argument_list|)
operator|.
name|init
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return
name|shf
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Error instantiating shardHandlerFactory class [%s]: %s"
argument_list|,
name|info
operator|.
name|className
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|field|DEFAULT_SHARDHANDLER_INFO
specifier|public
specifier|static
specifier|final
name|PluginInfo
name|DEFAULT_SHARDHANDLER_INFO
init|=
operator|new
name|PluginInfo
argument_list|(
literal|"shardHandlerFactory"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"class"
argument_list|,
name|HttpShardHandlerFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|PluginInfo
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
block|}
end_class
end_unit
