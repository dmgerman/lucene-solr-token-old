begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|NoSuchFileException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Adler32
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Checksum
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|InflaterInputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexCommit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpClientUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|FastInputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|DirectoryFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|DirectoryFactory
operator|.
name|DirContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|IndexDeletionPolicyWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|FileInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|CommitUpdateCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DefaultSolrThreadFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|PropertiesInputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|PropertiesOutputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|JAVABIN
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|NAME
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|ALIAS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|CHECKSUM
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|CMD_DETAILS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|CMD_GET_FILE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|CMD_GET_FILE_LIST
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|CMD_INDEX_VERSION
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|COMMAND
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|COMPRESSION
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|CONF_FILES
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|CONF_FILE_SHORT
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|EXTERNAL
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|FILE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|FILE_STREAM
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|GENERATION
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|INTERNAL
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|MASTER_URL
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|OFFSET
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|SIZE
import|;
end_import
begin_comment
comment|/**  *<p> Provides functionality of downloading changed index files as well as config files and a timer for scheduling fetches from the  * master.</p>  *  *  * @since solr 1.4  */
end_comment
begin_class
DECL|class|IndexFetcher
specifier|public
class|class
name|IndexFetcher
block|{
DECL|field|_100K
specifier|private
specifier|static
specifier|final
name|int
name|_100K
init|=
literal|100000
decl_stmt|;
DECL|field|INDEX_PROPERTIES
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_PROPERTIES
init|=
literal|"index.properties"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IndexFetcher
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|masterUrl
specifier|private
specifier|final
name|String
name|masterUrl
decl_stmt|;
DECL|field|replicationHandler
specifier|final
name|ReplicationHandler
name|replicationHandler
decl_stmt|;
DECL|field|replicationStartTime
specifier|private
specifier|volatile
name|long
name|replicationStartTime
decl_stmt|;
DECL|field|solrCore
specifier|private
specifier|final
name|SolrCore
name|solrCore
decl_stmt|;
DECL|field|filesToDownload
specifier|private
specifier|volatile
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|filesToDownload
decl_stmt|;
DECL|field|confFilesToDownload
specifier|private
specifier|volatile
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|confFilesToDownload
decl_stmt|;
DECL|field|filesDownloaded
specifier|private
specifier|volatile
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|filesDownloaded
decl_stmt|;
DECL|field|confFilesDownloaded
specifier|private
specifier|volatile
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|confFilesDownloaded
decl_stmt|;
DECL|field|currentFile
specifier|private
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|currentFile
decl_stmt|;
DECL|field|dirFileFetcher
specifier|private
specifier|volatile
name|DirectoryFileFetcher
name|dirFileFetcher
decl_stmt|;
DECL|field|localFileFetcher
specifier|private
specifier|volatile
name|LocalFsFileFetcher
name|localFileFetcher
decl_stmt|;
DECL|field|fsyncService
specifier|private
specifier|volatile
name|ExecutorService
name|fsyncService
decl_stmt|;
DECL|field|stop
specifier|private
specifier|volatile
name|boolean
name|stop
init|=
literal|false
decl_stmt|;
DECL|field|useInternal
specifier|private
name|boolean
name|useInternal
init|=
literal|false
decl_stmt|;
DECL|field|useExternal
specifier|private
name|boolean
name|useExternal
init|=
literal|false
decl_stmt|;
DECL|field|myHttpClient
specifier|private
specifier|final
name|HttpClient
name|myHttpClient
decl_stmt|;
DECL|method|createHttpClient
specifier|private
specifier|static
name|HttpClient
name|createHttpClient
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|String
name|connTimeout
parameter_list|,
name|String
name|readTimeout
parameter_list|,
name|String
name|httpBasicAuthUser
parameter_list|,
name|String
name|httpBasicAuthPassword
parameter_list|,
name|boolean
name|useCompression
parameter_list|)
block|{
specifier|final
name|ModifiableSolrParams
name|httpClientParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|httpClientParams
operator|.
name|set
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_CONNECTION_TIMEOUT
argument_list|,
name|connTimeout
operator|!=
literal|null
condition|?
name|connTimeout
else|:
literal|"5000"
argument_list|)
expr_stmt|;
name|httpClientParams
operator|.
name|set
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_SO_TIMEOUT
argument_list|,
name|readTimeout
operator|!=
literal|null
condition|?
name|readTimeout
else|:
literal|"20000"
argument_list|)
expr_stmt|;
name|httpClientParams
operator|.
name|set
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_BASIC_AUTH_USER
argument_list|,
name|httpBasicAuthUser
argument_list|)
expr_stmt|;
name|httpClientParams
operator|.
name|set
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_BASIC_AUTH_PASS
argument_list|,
name|httpBasicAuthPassword
argument_list|)
expr_stmt|;
name|httpClientParams
operator|.
name|set
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_ALLOW_COMPRESSION
argument_list|,
name|useCompression
argument_list|)
expr_stmt|;
return|return
name|HttpClientUtil
operator|.
name|createClient
argument_list|(
name|httpClientParams
argument_list|,
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getUpdateShardHandler
argument_list|()
operator|.
name|getConnectionManager
argument_list|()
argument_list|)
return|;
block|}
DECL|method|IndexFetcher
specifier|public
name|IndexFetcher
parameter_list|(
specifier|final
name|NamedList
name|initArgs
parameter_list|,
specifier|final
name|ReplicationHandler
name|handler
parameter_list|,
specifier|final
name|SolrCore
name|sc
parameter_list|)
block|{
name|solrCore
operator|=
name|sc
expr_stmt|;
name|String
name|masterUrl
init|=
operator|(
name|String
operator|)
name|initArgs
operator|.
name|get
argument_list|(
name|MASTER_URL
argument_list|)
decl_stmt|;
if|if
condition|(
name|masterUrl
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"'masterUrl' is required for a slave"
argument_list|)
throw|;
if|if
condition|(
name|masterUrl
operator|.
name|endsWith
argument_list|(
literal|"/replication"
argument_list|)
condition|)
block|{
name|masterUrl
operator|=
name|masterUrl
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|masterUrl
operator|.
name|length
argument_list|()
operator|-
literal|12
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"'masterUrl' must be specified without the /replication suffix"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|masterUrl
operator|=
name|masterUrl
expr_stmt|;
name|this
operator|.
name|replicationHandler
operator|=
name|handler
expr_stmt|;
name|String
name|compress
init|=
operator|(
name|String
operator|)
name|initArgs
operator|.
name|get
argument_list|(
name|COMPRESSION
argument_list|)
decl_stmt|;
name|useInternal
operator|=
name|INTERNAL
operator|.
name|equals
argument_list|(
name|compress
argument_list|)
expr_stmt|;
name|useExternal
operator|=
name|EXTERNAL
operator|.
name|equals
argument_list|(
name|compress
argument_list|)
expr_stmt|;
name|String
name|connTimeout
init|=
operator|(
name|String
operator|)
name|initArgs
operator|.
name|get
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_CONNECTION_TIMEOUT
argument_list|)
decl_stmt|;
name|String
name|readTimeout
init|=
operator|(
name|String
operator|)
name|initArgs
operator|.
name|get
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_SO_TIMEOUT
argument_list|)
decl_stmt|;
name|String
name|httpBasicAuthUser
init|=
operator|(
name|String
operator|)
name|initArgs
operator|.
name|get
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_BASIC_AUTH_USER
argument_list|)
decl_stmt|;
name|String
name|httpBasicAuthPassword
init|=
operator|(
name|String
operator|)
name|initArgs
operator|.
name|get
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_BASIC_AUTH_PASS
argument_list|)
decl_stmt|;
name|myHttpClient
operator|=
name|createHttpClient
argument_list|(
name|solrCore
argument_list|,
name|connTimeout
argument_list|,
name|readTimeout
argument_list|,
name|httpBasicAuthUser
argument_list|,
name|httpBasicAuthPassword
argument_list|,
name|useExternal
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets the latest commit version and generation from the master    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getLatestVersion
name|NamedList
name|getLatestVersion
parameter_list|()
throws|throws
name|IOException
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|COMMAND
argument_list|,
name|CMD_INDEX_VERSION
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|,
name|JAVABIN
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/replication"
argument_list|)
expr_stmt|;
name|QueryRequest
name|req
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
comment|// TODO modify to use shardhandler
try|try
init|(
name|HttpSolrClient
name|client
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|masterUrl
argument_list|,
name|myHttpClient
argument_list|)
init|)
block|{
name|client
operator|.
name|setSoTimeout
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|client
operator|.
name|setConnectionTimeout
argument_list|(
literal|15000
argument_list|)
expr_stmt|;
return|return
name|client
operator|.
name|request
argument_list|(
name|req
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Fetches the list of files in a given index commit point and updates internal list of files to download.    */
DECL|method|fetchFileList
specifier|private
name|void
name|fetchFileList
parameter_list|(
name|long
name|gen
parameter_list|)
throws|throws
name|IOException
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|COMMAND
argument_list|,
name|CMD_GET_FILE_LIST
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|GENERATION
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|gen
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|,
name|JAVABIN
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/replication"
argument_list|)
expr_stmt|;
name|QueryRequest
name|req
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
comment|// TODO modify to use shardhandler
try|try
init|(
name|HttpSolrClient
name|client
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|masterUrl
argument_list|,
name|myHttpClient
argument_list|)
init|)
block|{
name|client
operator|.
name|setSoTimeout
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|client
operator|.
name|setConnectionTimeout
argument_list|(
literal|15000
argument_list|)
expr_stmt|;
name|NamedList
name|response
init|=
name|client
operator|.
name|request
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|files
init|=
operator|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|response
operator|.
name|get
argument_list|(
name|CMD_GET_FILE_LIST
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
name|filesToDownload
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
name|files
argument_list|)
expr_stmt|;
else|else
block|{
name|filesToDownload
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"No files to download for index generation: "
operator|+
name|gen
argument_list|)
expr_stmt|;
block|}
name|files
operator|=
operator|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|response
operator|.
name|get
argument_list|(
name|CONF_FILES
argument_list|)
expr_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
name|confFilesToDownload
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
name|files
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|fetchLatestIndex
name|boolean
name|fetchLatestIndex
parameter_list|(
name|boolean
name|forceReplication
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|fetchLatestIndex
argument_list|(
name|forceReplication
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * This command downloads all the necessary files from master to install a index commit point. Only changed files are    * downloaded. It also downloads the conf files (if they are modified).    *    * @param forceReplication force a replication in all cases     * @param forceCoreReload force a core reload in all cases    * @return true on success, false if slave is already in sync    * @throws IOException if an exception occurs    */
DECL|method|fetchLatestIndex
name|boolean
name|fetchLatestIndex
parameter_list|(
name|boolean
name|forceReplication
parameter_list|,
name|boolean
name|forceCoreReload
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|boolean
name|cleanupDone
init|=
literal|false
decl_stmt|;
name|boolean
name|successfulInstall
init|=
literal|false
decl_stmt|;
name|replicationStartTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|Directory
name|tmpIndexDir
init|=
literal|null
decl_stmt|;
name|String
name|tmpIndex
decl_stmt|;
name|Directory
name|indexDir
init|=
literal|null
decl_stmt|;
name|String
name|indexDirPath
decl_stmt|;
name|boolean
name|deleteTmpIdxDir
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|solrCore
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|getLastReplicateIndexSuccess
argument_list|()
condition|)
block|{
comment|// if the last replication was not a success, we force a full replication
comment|// when we are a bit more confident we may want to try a partial replication
comment|// if the error is connection related or something, but we have to be careful
name|forceReplication
operator|=
literal|true
expr_stmt|;
block|}
try|try
block|{
comment|//get the current 'replicateable' index version in the master
name|NamedList
name|response
decl_stmt|;
try|try
block|{
name|response
operator|=
name|getLatestVersion
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Master at: "
operator|+
name|masterUrl
operator|+
literal|" is not available. Index fetch failed. Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|long
name|latestVersion
init|=
operator|(
name|Long
operator|)
name|response
operator|.
name|get
argument_list|(
name|CMD_INDEX_VERSION
argument_list|)
decl_stmt|;
name|long
name|latestGeneration
init|=
operator|(
name|Long
operator|)
name|response
operator|.
name|get
argument_list|(
name|GENERATION
argument_list|)
decl_stmt|;
comment|// TODO: make sure that getLatestCommit only returns commit points for the main index (i.e. no side-car indexes)
name|IndexCommit
name|commit
init|=
name|solrCore
operator|.
name|getDeletionPolicy
argument_list|()
operator|.
name|getLatestCommit
argument_list|()
decl_stmt|;
if|if
condition|(
name|commit
operator|==
literal|null
condition|)
block|{
comment|// Presumably the IndexWriter hasn't been opened yet, and hence the deletion policy hasn't been updated with commit points
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcherRefCounted
init|=
literal|null
decl_stmt|;
try|try
block|{
name|searcherRefCounted
operator|=
name|solrCore
operator|.
name|getNewestSearcher
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|searcherRefCounted
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No open searcher found - fetch aborted"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|commit
operator|=
name|searcherRefCounted
operator|.
name|get
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|getIndexCommit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|searcherRefCounted
operator|!=
literal|null
condition|)
name|searcherRefCounted
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|latestVersion
operator|==
literal|0L
condition|)
block|{
if|if
condition|(
name|forceReplication
operator|&&
name|commit
operator|.
name|getGeneration
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// since we won't get the files for an empty index,
comment|// we just clear ours and commit
name|RefCounted
argument_list|<
name|IndexWriter
argument_list|>
name|iw
init|=
name|solrCore
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|getIndexWriter
argument_list|(
name|solrCore
argument_list|)
decl_stmt|;
try|try
block|{
name|iw
operator|.
name|get
argument_list|()
operator|.
name|deleteAll
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|iw
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|solrCore
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|()
argument_list|)
decl_stmt|;
name|solrCore
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|commit
argument_list|(
operator|new
name|CommitUpdateCommand
argument_list|(
name|req
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//there is nothing to be replicated
name|successfulInstall
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|forceReplication
operator|&&
name|IndexDeletionPolicyWrapper
operator|.
name|getCommitTimestamp
argument_list|(
name|commit
argument_list|)
operator|==
name|latestVersion
condition|)
block|{
comment|//master and slave are already in sync just return
name|LOG
operator|.
name|info
argument_list|(
literal|"Slave in sync with master."
argument_list|)
expr_stmt|;
name|successfulInstall
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Master's generation: "
operator|+
name|latestGeneration
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Slave's generation: "
operator|+
name|commit
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting replication process"
argument_list|)
expr_stmt|;
comment|// get the list of files first
name|fetchFileList
argument_list|(
name|latestGeneration
argument_list|)
expr_stmt|;
comment|// this can happen if the commit point is deleted before we fetch the file list.
if|if
condition|(
name|filesToDownload
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of files in latest index in master: "
operator|+
name|filesToDownload
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create the sync service
name|fsyncService
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|(
operator|new
name|DefaultSolrThreadFactory
argument_list|(
literal|"fsyncService"
argument_list|)
argument_list|)
expr_stmt|;
comment|// use a synchronized list because the list is read by other threads (to show details)
name|filesDownloaded
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// if the generation of master is older than that of the slave , it means they are not compatible to be copied
comment|// then a new index directory to be created and all the files need to be copied
name|boolean
name|isFullCopyNeeded
init|=
name|IndexDeletionPolicyWrapper
operator|.
name|getCommitTimestamp
argument_list|(
name|commit
argument_list|)
operator|>=
name|latestVersion
operator|||
name|commit
operator|.
name|getGeneration
argument_list|()
operator|>=
name|latestGeneration
operator|||
name|forceReplication
decl_stmt|;
name|String
name|tmpIdxDirName
init|=
literal|"index."
operator|+
operator|new
name|SimpleDateFormat
argument_list|(
name|SnapShooter
operator|.
name|DATE_FMT
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
name|tmpIndex
operator|=
name|solrCore
operator|.
name|getDataDir
argument_list|()
operator|+
name|tmpIdxDirName
expr_stmt|;
name|tmpIndexDir
operator|=
name|solrCore
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|get
argument_list|(
name|tmpIndex
argument_list|,
name|DirContext
operator|.
name|DEFAULT
argument_list|,
name|solrCore
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|indexConfig
operator|.
name|lockType
argument_list|)
expr_stmt|;
comment|// cindex dir...
name|indexDirPath
operator|=
name|solrCore
operator|.
name|getIndexDir
argument_list|()
expr_stmt|;
name|indexDir
operator|=
name|solrCore
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|get
argument_list|(
name|indexDirPath
argument_list|,
name|DirContext
operator|.
name|DEFAULT
argument_list|,
name|solrCore
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|indexConfig
operator|.
name|lockType
argument_list|)
expr_stmt|;
try|try
block|{
comment|//We will compare all the index files from the master vs the index files on disk to see if there is a mismatch
comment|//in the metadata. If there is a mismatch for the same index file then we download the entire index again.
if|if
condition|(
operator|!
name|isFullCopyNeeded
operator|&&
name|isIndexStale
argument_list|(
name|indexDir
argument_list|)
condition|)
block|{
name|isFullCopyNeeded
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isFullCopyNeeded
condition|)
block|{
comment|// a searcher might be using some flushed but not committed segments
comment|// because of soft commits (which open a searcher on IW's data)
comment|// so we need to close the existing searcher on the last commit
comment|// and wait until we are able to clean up all unused lucene files
if|if
condition|(
name|solrCore
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|isZooKeeperAware
argument_list|()
condition|)
block|{
name|solrCore
operator|.
name|closeSearcher
argument_list|()
expr_stmt|;
block|}
comment|// rollback and reopen index writer and wait until all unused files
comment|// are successfully deleted
name|solrCore
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|newIndexWriter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RefCounted
argument_list|<
name|IndexWriter
argument_list|>
name|writer
init|=
name|solrCore
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|getIndexWriter
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|IndexWriter
name|indexWriter
init|=
name|writer
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
name|indexWriter
operator|.
name|deleteUnusedFiles
argument_list|()
expr_stmt|;
while|while
condition|(
name|hasUnusedFiles
argument_list|(
name|indexDir
argument_list|,
name|commit
argument_list|)
condition|)
block|{
name|indexWriter
operator|.
name|deleteUnusedFiles
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleeping for 1000ms to wait for unused lucene index files to be delete-able"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
if|if
condition|(
name|c
operator|>=
literal|30
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"IndexFetcher unable to cleanup unused lucene index files so we must do a full copy instead"
argument_list|)
expr_stmt|;
name|isFullCopyNeeded
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|c
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"IndexFetcher slept for "
operator|+
operator|(
name|c
operator|*
literal|1000
operator|)
operator|+
literal|"ms for unused lucene index files to be delete-able"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writer
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
name|solrCore
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|closeIndexWriter
argument_list|(
name|solrCore
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|boolean
name|reloadCore
init|=
literal|false
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting download to "
operator|+
name|tmpIndexDir
operator|+
literal|" fullCopy="
operator|+
name|isFullCopyNeeded
argument_list|)
expr_stmt|;
name|successfulInstall
operator|=
literal|false
expr_stmt|;
name|downloadIndexFiles
argument_list|(
name|isFullCopyNeeded
argument_list|,
name|indexDir
argument_list|,
name|tmpIndexDir
argument_list|,
name|latestGeneration
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total time taken for download : "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|replicationStartTime
operator|)
operator|/
literal|1000
operator|)
operator|+
literal|" secs"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|modifiedConfFiles
init|=
name|getModifiedConfFiles
argument_list|(
name|confFilesToDownload
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|modifiedConfFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|reloadCore
operator|=
literal|true
expr_stmt|;
name|downloadConfFiles
argument_list|(
name|confFilesToDownload
argument_list|,
name|latestGeneration
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFullCopyNeeded
condition|)
block|{
name|successfulInstall
operator|=
name|IndexFetcher
operator|.
name|modifyIndexProps
argument_list|(
name|solrCore
argument_list|,
name|tmpIdxDirName
argument_list|)
expr_stmt|;
name|deleteTmpIdxDir
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|successfulInstall
operator|=
name|moveIndexFiles
argument_list|(
name|tmpIndexDir
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|successfulInstall
condition|)
block|{
if|if
condition|(
name|isFullCopyNeeded
condition|)
block|{
comment|// let the system know we are changing dir's and the old one
comment|// may be closed
if|if
condition|(
name|indexDir
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"removing old index directory "
operator|+
name|indexDir
argument_list|)
expr_stmt|;
name|solrCore
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|doneWithDirectory
argument_list|(
name|indexDir
argument_list|)
expr_stmt|;
name|solrCore
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|remove
argument_list|(
name|indexDir
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Configuration files are modified, core will be reloaded"
argument_list|)
expr_stmt|;
name|logReplicationTimeAndConfFiles
argument_list|(
name|modifiedConfFiles
argument_list|,
name|successfulInstall
argument_list|)
expr_stmt|;
comment|// write to a file time of replication and
comment|// conf files.
block|}
block|}
else|else
block|{
name|terminateAndWaitFsyncService
argument_list|()
expr_stmt|;
if|if
condition|(
name|isFullCopyNeeded
condition|)
block|{
name|successfulInstall
operator|=
name|IndexFetcher
operator|.
name|modifyIndexProps
argument_list|(
name|solrCore
argument_list|,
name|tmpIdxDirName
argument_list|)
expr_stmt|;
name|deleteTmpIdxDir
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|successfulInstall
operator|=
name|moveIndexFiles
argument_list|(
name|tmpIndexDir
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|successfulInstall
condition|)
block|{
name|logReplicationTimeAndConfFiles
argument_list|(
name|modifiedConfFiles
argument_list|,
name|successfulInstall
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|isFullCopyNeeded
condition|)
block|{
name|solrCore
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|openIndexWriter
argument_list|(
name|solrCore
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we must reload the core after we open the IW back up
if|if
condition|(
name|successfulInstall
operator|&&
operator|(
name|reloadCore
operator|||
name|forceCoreReload
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reloading SolrCore {}"
argument_list|,
name|solrCore
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|reloadCore
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|successfulInstall
condition|)
block|{
if|if
condition|(
name|isFullCopyNeeded
condition|)
block|{
comment|// let the system know we are changing dir's and the old one
comment|// may be closed
if|if
condition|(
name|indexDir
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"removing old index directory "
operator|+
name|indexDir
argument_list|)
expr_stmt|;
name|solrCore
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|doneWithDirectory
argument_list|(
name|indexDir
argument_list|)
expr_stmt|;
name|solrCore
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|remove
argument_list|(
name|indexDir
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isFullCopyNeeded
condition|)
block|{
name|solrCore
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|newIndexWriter
argument_list|(
name|isFullCopyNeeded
argument_list|)
expr_stmt|;
block|}
name|openNewSearcherAndUpdateCommitPoint
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isFullCopyNeeded
operator|&&
operator|!
name|forceReplication
operator|&&
operator|!
name|successfulInstall
condition|)
block|{
name|cleanup
argument_list|(
name|solrCore
argument_list|,
name|tmpIndexDir
argument_list|,
name|indexDir
argument_list|,
name|deleteTmpIdxDir
argument_list|,
name|successfulInstall
argument_list|)
expr_stmt|;
name|cleanupDone
operator|=
literal|true
expr_stmt|;
comment|// we try with a full copy of the index
name|LOG
operator|.
name|warn
argument_list|(
literal|"Replication attempt was not successful - trying a full index replication reloadCore={}"
argument_list|,
name|reloadCore
argument_list|)
expr_stmt|;
name|successfulInstall
operator|=
name|fetchLatestIndex
argument_list|(
literal|true
argument_list|,
name|reloadCore
argument_list|)
expr_stmt|;
block|}
name|replicationStartTime
operator|=
literal|0
expr_stmt|;
return|return
name|successfulInstall
return|;
block|}
catch|catch
parameter_list|(
name|ReplicationHandlerException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"User aborted Replication"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedException
argument_list|(
literal|"Index fetch interrupted"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Index fetch failed : "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|cleanupDone
condition|)
block|{
name|cleanup
argument_list|(
name|solrCore
argument_list|,
name|tmpIndexDir
argument_list|,
name|indexDir
argument_list|,
name|deleteTmpIdxDir
argument_list|,
name|successfulInstall
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|cleanup
specifier|private
name|void
name|cleanup
parameter_list|(
specifier|final
name|SolrCore
name|core
parameter_list|,
name|Directory
name|tmpIndexDir
parameter_list|,
name|Directory
name|indexDir
parameter_list|,
name|boolean
name|deleteTmpIdxDir
parameter_list|,
name|boolean
name|successfulInstall
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|successfulInstall
condition|)
block|{
try|try
block|{
name|logReplicationTimeAndConfFiles
argument_list|(
literal|null
argument_list|,
name|successfulInstall
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"caught"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|setLastReplicateIndexSuccess
argument_list|(
name|successfulInstall
argument_list|)
expr_stmt|;
name|filesToDownload
operator|=
name|filesDownloaded
operator|=
name|confFilesDownloaded
operator|=
name|confFilesToDownload
operator|=
literal|null
expr_stmt|;
name|replicationStartTime
operator|=
literal|0
expr_stmt|;
name|dirFileFetcher
operator|=
literal|null
expr_stmt|;
name|localFileFetcher
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|fsyncService
operator|!=
literal|null
operator|&&
operator|!
name|fsyncService
operator|.
name|isShutdown
argument_list|()
condition|)
name|fsyncService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|fsyncService
operator|=
literal|null
expr_stmt|;
name|stop
operator|=
literal|false
expr_stmt|;
name|fsyncException
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|deleteTmpIdxDir
operator|&&
name|tmpIndexDir
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|doneWithDirectory
argument_list|(
name|tmpIndexDir
argument_list|)
expr_stmt|;
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|remove
argument_list|(
name|tmpIndexDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
literal|"Error removing directory "
operator|+
name|tmpIndexDir
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tmpIndexDir
operator|!=
literal|null
condition|)
block|{
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|release
argument_list|(
name|tmpIndexDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexDir
operator|!=
literal|null
condition|)
block|{
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|release
argument_list|(
name|indexDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|hasUnusedFiles
specifier|private
name|boolean
name|hasUnusedFiles
parameter_list|(
name|Directory
name|indexDir
parameter_list|,
name|IndexCommit
name|commit
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|segmentsFileName
init|=
name|commit
operator|.
name|getSegmentsFileName
argument_list|()
decl_stmt|;
name|SegmentInfos
name|infos
init|=
name|SegmentInfos
operator|.
name|readCommit
argument_list|(
name|indexDir
argument_list|,
name|segmentsFileName
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|currentFiles
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|infos
operator|.
name|files
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|String
index|[]
name|allFiles
init|=
name|indexDir
operator|.
name|listAll
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|allFiles
control|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|equals
argument_list|(
name|segmentsFileName
argument_list|)
operator|&&
operator|!
name|currentFiles
operator|.
name|contains
argument_list|(
name|file
argument_list|)
operator|&&
operator|!
name|file
operator|.
name|endsWith
argument_list|(
literal|".lock"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Found unused file: "
operator|+
name|file
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|field|fsyncException
specifier|private
specifier|volatile
name|Exception
name|fsyncException
decl_stmt|;
comment|/**    * terminate the fsync service and wait for all the tasks to complete. If it is already terminated    */
DECL|method|terminateAndWaitFsyncService
specifier|private
name|void
name|terminateAndWaitFsyncService
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fsyncService
operator|.
name|isTerminated
argument_list|()
condition|)
return|return;
name|fsyncService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// give a long wait say 1 hr
name|fsyncService
operator|.
name|awaitTermination
argument_list|(
literal|3600
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// if any fsync failed, throw that exception back
name|Exception
name|fsyncExceptionCopy
init|=
name|fsyncException
decl_stmt|;
if|if
condition|(
name|fsyncExceptionCopy
operator|!=
literal|null
condition|)
throw|throw
name|fsyncExceptionCopy
throw|;
block|}
comment|/**    * Helper method to record the last replication's details so that we can show them on the statistics page across    * restarts.    * @throws IOException on IO error    */
DECL|method|logReplicationTimeAndConfFiles
specifier|private
name|void
name|logReplicationTimeAndConfFiles
parameter_list|(
name|Collection
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|modifiedConfFiles
parameter_list|,
name|boolean
name|successfulInstall
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|confFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|modifiedConfFiles
operator|!=
literal|null
operator|&&
operator|!
name|modifiedConfFiles
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map1
range|:
name|modifiedConfFiles
control|)
name|confFiles
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|map1
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Properties
name|props
init|=
name|replicationHandler
operator|.
name|loadReplicationProperties
argument_list|()
decl_stmt|;
name|long
name|replicationTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|replicationTimeTaken
init|=
operator|(
name|replicationTime
operator|-
name|getReplicationStartTime
argument_list|()
operator|)
operator|/
literal|1000
decl_stmt|;
name|Directory
name|dir
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dir
operator|=
name|solrCore
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|get
argument_list|(
name|solrCore
operator|.
name|getDataDir
argument_list|()
argument_list|,
name|DirContext
operator|.
name|META_DATA
argument_list|,
name|solrCore
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|indexConfig
operator|.
name|lockType
argument_list|)
expr_stmt|;
name|int
name|indexCount
init|=
literal|1
decl_stmt|,
name|confFilesCount
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|containsKey
argument_list|(
name|TIMES_INDEX_REPLICATED
argument_list|)
condition|)
block|{
name|indexCount
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|TIMES_INDEX_REPLICATED
argument_list|)
argument_list|)
operator|+
literal|1
expr_stmt|;
block|}
name|StringBuilder
name|sb
init|=
name|readToStringBuilder
argument_list|(
name|replicationTime
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
name|INDEX_REPLICATED_AT_LIST
argument_list|)
argument_list|)
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|INDEX_REPLICATED_AT_LIST
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|INDEX_REPLICATED_AT
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|replicationTime
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|PREVIOUS_CYCLE_TIME_TAKEN
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|replicationTimeTaken
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|TIMES_INDEX_REPLICATED
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|indexCount
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|modifiedConfFiles
operator|!=
literal|null
operator|&&
operator|!
name|modifiedConfFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|CONF_FILES_REPLICATED
argument_list|,
name|confFiles
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|CONF_FILES_REPLICATED_AT
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|replicationTime
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|props
operator|.
name|containsKey
argument_list|(
name|TIMES_CONFIG_REPLICATED
argument_list|)
condition|)
block|{
name|confFilesCount
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|TIMES_CONFIG_REPLICATED
argument_list|)
argument_list|)
operator|+
literal|1
expr_stmt|;
block|}
name|props
operator|.
name|setProperty
argument_list|(
name|TIMES_CONFIG_REPLICATED
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|confFilesCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|props
operator|.
name|setProperty
argument_list|(
name|LAST_CYCLE_BYTES_DOWNLOADED
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|getTotalBytesDownloaded
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|successfulInstall
condition|)
block|{
name|int
name|numFailures
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|containsKey
argument_list|(
name|TIMES_FAILED
argument_list|)
condition|)
block|{
name|numFailures
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|TIMES_FAILED
argument_list|)
argument_list|)
operator|+
literal|1
expr_stmt|;
block|}
name|props
operator|.
name|setProperty
argument_list|(
name|TIMES_FAILED
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|numFailures
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|REPLICATION_FAILED_AT
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|replicationTime
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|=
name|readToStringBuilder
argument_list|(
name|replicationTime
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
name|REPLICATION_FAILED_AT_LIST
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|REPLICATION_FAILED_AT_LIST
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|REPLICATION_PROPERTIES
argument_list|,
name|DirectoryFactory
operator|.
name|IOCONTEXT_NO_CACHE
argument_list|)
decl_stmt|;
name|Writer
name|outFile
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|PropertiesOutputStream
argument_list|(
name|out
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
try|try
block|{
name|props
operator|.
name|store
argument_list|(
name|outFile
argument_list|,
literal|"Replication details"
argument_list|)
expr_stmt|;
name|dir
operator|.
name|sync
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|REPLICATION_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|outFile
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while updating statistics"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
name|solrCore
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|release
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getTotalBytesDownloaded
name|long
name|getTotalBytesDownloaded
parameter_list|()
block|{
name|long
name|bytesDownloaded
init|=
literal|0
decl_stmt|;
comment|//get size from list of files to download
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|file
range|:
name|getFilesDownloaded
argument_list|()
control|)
block|{
name|bytesDownloaded
operator|+=
operator|(
name|Long
operator|)
name|file
operator|.
name|get
argument_list|(
name|SIZE
argument_list|)
expr_stmt|;
block|}
comment|//get size from list of conf files to download
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|file
range|:
name|getConfFilesDownloaded
argument_list|()
control|)
block|{
name|bytesDownloaded
operator|+=
operator|(
name|Long
operator|)
name|file
operator|.
name|get
argument_list|(
name|SIZE
argument_list|)
expr_stmt|;
block|}
comment|//get size from current file being downloaded
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|currentFile
init|=
name|getCurrentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|currentFile
operator|.
name|containsKey
argument_list|(
literal|"bytesDownloaded"
argument_list|)
condition|)
block|{
name|bytesDownloaded
operator|+=
operator|(
name|Long
operator|)
name|currentFile
operator|.
name|get
argument_list|(
literal|"bytesDownloaded"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bytesDownloaded
return|;
block|}
DECL|method|readToStringBuilder
specifier|private
name|StringBuilder
name|readToStringBuilder
parameter_list|(
name|long
name|replicationTime
parameter_list|,
name|String
name|str
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
operator|!=
literal|null
operator|&&
name|str
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|String
index|[]
name|ss
init|=
name|str
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|l
argument_list|,
name|ss
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|replicationTime
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|size
argument_list|()
operator|||
name|i
operator|<
literal|9
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|l
operator|.
name|size
argument_list|()
operator|||
name|i
operator|==
literal|9
condition|)
break|break;
name|String
name|s
init|=
name|l
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
return|;
block|}
DECL|method|openNewSearcherAndUpdateCommitPoint
specifier|private
name|void
name|openNewSearcherAndUpdateCommitPoint
parameter_list|()
throws|throws
name|IOException
block|{
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|solrCore
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|()
argument_list|)
decl_stmt|;
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcher
init|=
literal|null
decl_stmt|;
name|IndexCommit
name|commitPoint
decl_stmt|;
try|try
block|{
name|Future
index|[]
name|waitSearcher
init|=
operator|new
name|Future
index|[
literal|1
index|]
decl_stmt|;
name|searcher
operator|=
name|solrCore
operator|.
name|getSearcher
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|waitSearcher
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|waitSearcher
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|waitSearcher
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|commitPoint
operator|=
name|searcher
operator|.
name|get
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|getIndexCommit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|searcher
operator|!=
literal|null
condition|)
block|{
name|searcher
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
comment|// update the commit point in replication handler
name|replicationHandler
operator|.
name|indexCommitPoint
operator|=
name|commitPoint
expr_stmt|;
block|}
DECL|method|reloadCore
specifier|private
name|void
name|reloadCore
parameter_list|()
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|solrCore
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|reload
argument_list|(
name|solrCore
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not reload core "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Interrupted while waiting for core reload to finish"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|downloadConfFiles
specifier|private
name|void
name|downloadConfFiles
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|confFilesToDownload
parameter_list|,
name|long
name|latestGeneration
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting download of configuration files from master: "
operator|+
name|confFilesToDownload
argument_list|)
expr_stmt|;
name|confFilesDownloaded
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|tmpconfDir
init|=
operator|new
name|File
argument_list|(
name|solrCore
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|getConfigDir
argument_list|()
argument_list|,
literal|"conf."
operator|+
name|getDateAsStr
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|boolean
name|status
init|=
name|tmpconfDir
operator|.
name|mkdirs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|status
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Failed to create temporary config folder: "
operator|+
name|tmpconfDir
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|file
range|:
name|confFilesToDownload
control|)
block|{
name|String
name|saveAs
init|=
call|(
name|String
call|)
argument_list|(
name|file
operator|.
name|get
argument_list|(
name|ALIAS
argument_list|)
operator|==
literal|null
condition|?
name|file
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
else|:
name|file
operator|.
name|get
argument_list|(
name|ALIAS
argument_list|)
argument_list|)
decl_stmt|;
name|localFileFetcher
operator|=
operator|new
name|LocalFsFileFetcher
argument_list|(
name|tmpconfDir
argument_list|,
name|file
argument_list|,
name|saveAs
argument_list|,
literal|true
argument_list|,
name|latestGeneration
argument_list|)
expr_stmt|;
name|currentFile
operator|=
name|file
expr_stmt|;
name|localFileFetcher
operator|.
name|fetchFile
argument_list|()
expr_stmt|;
name|confFilesDownloaded
operator|.
name|add
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// this is called before copying the files to the original conf dir
comment|// so that if there is an exception avoid corrupting the original files.
name|terminateAndWaitFsyncService
argument_list|()
expr_stmt|;
name|copyTmpConfFiles2Conf
argument_list|(
name|tmpconfDir
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|delTree
argument_list|(
name|tmpconfDir
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Download the index files. If a new index is needed, download all the files.    *    * @param downloadCompleteIndex is it a fresh index copy    * @param tmpIndexDir              the directory to which files need to be downloadeed to    * @param indexDir                 the indexDir to be merged to    * @param latestGeneration         the version number    */
DECL|method|downloadIndexFiles
specifier|private
name|void
name|downloadIndexFiles
parameter_list|(
name|boolean
name|downloadCompleteIndex
parameter_list|,
name|Directory
name|indexDir
parameter_list|,
name|Directory
name|tmpIndexDir
parameter_list|,
name|long
name|latestGeneration
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Download files to dir: "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|indexDir
operator|.
name|listAll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|file
range|:
name|filesToDownload
control|)
block|{
name|String
name|filename
init|=
operator|(
name|String
operator|)
name|file
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
name|long
name|size
init|=
operator|(
name|Long
operator|)
name|file
operator|.
name|get
argument_list|(
name|SIZE
argument_list|)
decl_stmt|;
name|CompareResult
name|compareResult
init|=
name|compareFile
argument_list|(
name|indexDir
argument_list|,
name|filename
argument_list|,
name|size
argument_list|,
operator|(
name|Long
operator|)
name|file
operator|.
name|get
argument_list|(
name|CHECKSUM
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|compareResult
operator|.
name|equal
operator|||
name|downloadCompleteIndex
operator|||
name|filesToAlwaysDownloadIfNoChecksums
argument_list|(
name|filename
argument_list|,
name|size
argument_list|,
name|compareResult
argument_list|)
condition|)
block|{
name|dirFileFetcher
operator|=
operator|new
name|DirectoryFileFetcher
argument_list|(
name|tmpIndexDir
argument_list|,
name|file
argument_list|,
operator|(
name|String
operator|)
name|file
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
argument_list|,
literal|false
argument_list|,
name|latestGeneration
argument_list|)
expr_stmt|;
name|currentFile
operator|=
name|file
expr_stmt|;
name|dirFileFetcher
operator|.
name|fetchFile
argument_list|()
expr_stmt|;
name|filesDownloaded
operator|.
name|add
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping download for "
operator|+
name|file
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
operator|+
literal|" because it already exists"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|filesToAlwaysDownloadIfNoChecksums
specifier|private
name|boolean
name|filesToAlwaysDownloadIfNoChecksums
parameter_list|(
name|String
name|filename
parameter_list|,
name|long
name|size
parameter_list|,
name|CompareResult
name|compareResult
parameter_list|)
block|{
comment|// without checksums to compare, we always download .si, .liv, segments_N,
comment|// and any very small files
return|return
operator|!
name|compareResult
operator|.
name|checkSummed
operator|&&
operator|(
name|filename
operator|.
name|endsWith
argument_list|(
literal|".si"
argument_list|)
operator|||
name|filename
operator|.
name|endsWith
argument_list|(
literal|".liv"
argument_list|)
operator|||
name|filename
operator|.
name|startsWith
argument_list|(
literal|"segments_"
argument_list|)
operator|||
name|size
operator|<
name|_100K
operator|)
return|;
block|}
DECL|class|CompareResult
specifier|protected
specifier|static
class|class
name|CompareResult
block|{
DECL|field|equal
name|boolean
name|equal
init|=
literal|false
decl_stmt|;
DECL|field|checkSummed
name|boolean
name|checkSummed
init|=
literal|false
decl_stmt|;
block|}
DECL|method|compareFile
specifier|protected
specifier|static
name|CompareResult
name|compareFile
parameter_list|(
name|Directory
name|indexDir
parameter_list|,
name|String
name|filename
parameter_list|,
name|Long
name|backupIndexFileLen
parameter_list|,
name|Long
name|backupIndexFileChecksum
parameter_list|)
block|{
name|CompareResult
name|compareResult
init|=
operator|new
name|CompareResult
argument_list|()
decl_stmt|;
try|try
block|{
try|try
init|(
specifier|final
name|IndexInput
name|indexInput
init|=
name|indexDir
operator|.
name|openInput
argument_list|(
name|filename
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
init|)
block|{
name|long
name|indexFileLen
init|=
name|indexInput
operator|.
name|length
argument_list|()
decl_stmt|;
name|long
name|indexFileChecksum
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|backupIndexFileChecksum
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|indexFileChecksum
operator|=
name|CodecUtil
operator|.
name|retrieveChecksum
argument_list|(
name|indexInput
argument_list|)
expr_stmt|;
name|compareResult
operator|.
name|checkSummed
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not retrieve checksum from file."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|compareResult
operator|.
name|checkSummed
condition|)
block|{
comment|// we don't have checksums to compare
if|if
condition|(
name|indexFileLen
operator|==
name|backupIndexFileLen
condition|)
block|{
name|compareResult
operator|.
name|equal
operator|=
literal|true
expr_stmt|;
return|return
name|compareResult
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"File {} did not match. expected length is {} and actual length is {}"
argument_list|,
name|filename
argument_list|,
name|backupIndexFileLen
argument_list|,
name|indexFileLen
argument_list|)
expr_stmt|;
name|compareResult
operator|.
name|equal
operator|=
literal|false
expr_stmt|;
return|return
name|compareResult
return|;
block|}
block|}
comment|// we have checksums to compare
if|if
condition|(
name|indexFileLen
operator|==
name|backupIndexFileLen
operator|&&
name|indexFileChecksum
operator|==
name|backupIndexFileChecksum
condition|)
block|{
name|compareResult
operator|.
name|equal
operator|=
literal|true
expr_stmt|;
return|return
name|compareResult
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"File {} did not match. expected checksum is {} and actual is checksum {}. "
operator|+
literal|"expected length is {} and actual length is {}"
argument_list|,
name|filename
argument_list|,
name|backupIndexFileChecksum
argument_list|,
name|indexFileChecksum
argument_list|,
name|backupIndexFileLen
argument_list|,
name|indexFileLen
argument_list|)
expr_stmt|;
name|compareResult
operator|.
name|equal
operator|=
literal|false
expr_stmt|;
return|return
name|compareResult
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchFileException
decl||
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|compareResult
operator|.
name|equal
operator|=
literal|false
expr_stmt|;
return|return
name|compareResult
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not read file "
operator|+
name|filename
operator|+
literal|". Downloading it again"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|compareResult
operator|.
name|equal
operator|=
literal|false
expr_stmt|;
return|return
name|compareResult
return|;
block|}
block|}
comment|/** Returns true if the file exists (can be opened), false    *  if it cannot be opened, and (unlike Java's    *  File.exists) throws IOException if there's some    *  unexpected error. */
DECL|method|slowFileExists
specifier|private
specifier|static
name|boolean
name|slowFileExists
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|dir
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFileException
decl||
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * All the files which are common between master and slave must have same size and same checksum else we assume    * they are not compatible (stale).    *    * @return true if the index stale and we need to download a fresh copy, false otherwise.    * @throws IOException  if low level io error    */
DECL|method|isIndexStale
specifier|private
name|boolean
name|isIndexStale
parameter_list|(
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|file
range|:
name|filesToDownload
control|)
block|{
name|String
name|filename
init|=
operator|(
name|String
operator|)
name|file
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
name|Long
name|length
init|=
operator|(
name|Long
operator|)
name|file
operator|.
name|get
argument_list|(
name|SIZE
argument_list|)
decl_stmt|;
name|Long
name|checksum
init|=
operator|(
name|Long
operator|)
name|file
operator|.
name|get
argument_list|(
name|CHECKSUM
argument_list|)
decl_stmt|;
if|if
condition|(
name|slowFileExists
argument_list|(
name|dir
argument_list|,
name|filename
argument_list|)
condition|)
block|{
if|if
condition|(
name|checksum
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|compareFile
argument_list|(
name|dir
argument_list|,
name|filename
argument_list|,
name|length
argument_list|,
name|checksum
argument_list|)
operator|.
name|equal
operator|)
condition|)
block|{
comment|// file exists and size or checksum is different, therefore we must download it again
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|length
operator|!=
name|dir
operator|.
name|fileLength
argument_list|(
name|filename
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"File {} did not match. expected length is {} and actual length is {}"
argument_list|,
name|filename
argument_list|,
name|length
argument_list|,
name|dir
operator|.
name|fileLength
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Copy a file by the File#renameTo() method. If it fails, it is considered a failure    *<p/>    */
DECL|method|moveAFile
specifier|private
name|boolean
name|moveAFile
parameter_list|(
name|Directory
name|tmpIdxDir
parameter_list|,
name|Directory
name|indexDir
parameter_list|,
name|String
name|fname
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Moving file: {}"
argument_list|,
name|fname
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|slowFileExists
argument_list|(
name|indexDir
argument_list|,
name|fname
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping move file - it already exists:"
operator|+
name|fname
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
literal|"could not check if a file exists"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
try|try
block|{
name|solrCore
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|move
argument_list|(
name|tmpIdxDir
argument_list|,
name|indexDir
argument_list|,
name|fname
argument_list|,
name|DirectoryFactory
operator|.
name|IOCONTEXT_NO_CACHE
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
literal|"Could not move file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
comment|/**    * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.    */
DECL|method|moveIndexFiles
specifier|private
name|boolean
name|moveIndexFiles
parameter_list|(
name|Directory
name|tmpIdxDir
parameter_list|,
name|Directory
name|indexDir
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"From dir files:"
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|tmpIdxDir
operator|.
name|listAll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"To dir files:"
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|indexDir
operator|.
name|listAll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|String
name|segmentsFile
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|f
range|:
name|filesDownloaded
control|)
block|{
name|String
name|fname
init|=
operator|(
name|String
operator|)
name|f
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
comment|// the segments file must be copied last
comment|// or else if there is a failure in between the
comment|// index will be corrupted
if|if
condition|(
name|fname
operator|.
name|startsWith
argument_list|(
literal|"segments_"
argument_list|)
condition|)
block|{
comment|//The segments file must be copied in the end
comment|//Otherwise , if the copy fails index ends up corrupted
name|segmentsFile
operator|=
name|fname
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|moveAFile
argument_list|(
name|tmpIdxDir
argument_list|,
name|indexDir
argument_list|,
name|fname
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
comment|//copy the segments file last
if|if
condition|(
name|segmentsFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|moveAFile
argument_list|(
name|tmpIdxDir
argument_list|,
name|indexDir
argument_list|,
name|segmentsFile
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Make file list     */
DECL|method|makeTmpConfDirFileList
specifier|private
name|List
argument_list|<
name|File
argument_list|>
name|makeTmpConfDirFileList
parameter_list|(
name|File
name|dir
parameter_list|,
name|List
argument_list|<
name|File
argument_list|>
name|fileList
parameter_list|)
block|{
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|fileList
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|fileList
operator|=
name|makeTmpConfDirFileList
argument_list|(
name|file
argument_list|,
name|fileList
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fileList
return|;
block|}
comment|/**    * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained    */
DECL|method|copyTmpConfFiles2Conf
specifier|private
name|void
name|copyTmpConfFiles2Conf
parameter_list|(
name|File
name|tmpconfDir
parameter_list|)
block|{
name|boolean
name|status
init|=
literal|false
decl_stmt|;
name|File
name|confDir
init|=
operator|new
name|File
argument_list|(
name|solrCore
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|getConfigDir
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|makeTmpConfDirFileList
argument_list|(
name|tmpconfDir
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
control|)
block|{
name|File
name|oldFile
init|=
operator|new
name|File
argument_list|(
name|confDir
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|substring
argument_list|(
name|tmpconfDir
operator|.
name|getPath
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oldFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|status
operator|=
name|oldFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|status
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unable to mkdirs: "
operator|+
name|oldFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|oldFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|File
name|backupFile
init|=
operator|new
name|File
argument_list|(
name|oldFile
operator|.
name|getPath
argument_list|()
operator|+
literal|"."
operator|+
name|getDateAsStr
argument_list|(
operator|new
name|Date
argument_list|(
name|oldFile
operator|.
name|lastModified
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|backupFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|status
operator|=
name|backupFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|status
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unable to mkdirs: "
operator|+
name|backupFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|status
operator|=
name|oldFile
operator|.
name|renameTo
argument_list|(
name|backupFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|status
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unable to rename: "
operator|+
name|oldFile
operator|+
literal|" to: "
operator|+
name|backupFile
argument_list|)
throw|;
block|}
block|}
name|status
operator|=
name|file
operator|.
name|renameTo
argument_list|(
name|oldFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|status
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unable to rename: "
operator|+
name|file
operator|+
literal|" to: "
operator|+
name|oldFile
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getDateAsStr
specifier|private
name|String
name|getDateAsStr
parameter_list|(
name|Date
name|d
parameter_list|)
block|{
return|return
operator|new
name|SimpleDateFormat
argument_list|(
name|SnapShooter
operator|.
name|DATE_FMT
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|format
argument_list|(
name|d
argument_list|)
return|;
block|}
comment|/**    * If the index is stale by any chance, load index from a different dir in the data dir.    */
DECL|method|modifyIndexProps
specifier|protected
specifier|static
name|boolean
name|modifyIndexProps
parameter_list|(
name|SolrCore
name|solrCore
parameter_list|,
name|String
name|tmpIdxDirName
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"New index installed. Updating index properties... index="
operator|+
name|tmpIdxDirName
argument_list|)
expr_stmt|;
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Directory
name|dir
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dir
operator|=
name|solrCore
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|get
argument_list|(
name|solrCore
operator|.
name|getDataDir
argument_list|()
argument_list|,
name|DirContext
operator|.
name|META_DATA
argument_list|,
name|solrCore
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|indexConfig
operator|.
name|lockType
argument_list|)
expr_stmt|;
if|if
condition|(
name|slowFileExists
argument_list|(
name|dir
argument_list|,
name|IndexFetcher
operator|.
name|INDEX_PROPERTIES
argument_list|)
condition|)
block|{
specifier|final
name|IndexInput
name|input
init|=
name|dir
operator|.
name|openInput
argument_list|(
name|IndexFetcher
operator|.
name|INDEX_PROPERTIES
argument_list|,
name|DirectoryFactory
operator|.
name|IOCONTEXT_NO_CACHE
argument_list|)
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|PropertiesInputStream
argument_list|(
name|input
argument_list|)
decl_stmt|;
try|try
block|{
name|p
operator|.
name|load
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to load "
operator|+
name|IndexFetcher
operator|.
name|INDEX_PROPERTIES
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|dir
operator|.
name|deleteFile
argument_list|(
name|IndexFetcher
operator|.
name|INDEX_PROPERTIES
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// no problem
block|}
specifier|final
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|IndexFetcher
operator|.
name|INDEX_PROPERTIES
argument_list|,
name|DirectoryFactory
operator|.
name|IOCONTEXT_NO_CACHE
argument_list|)
decl_stmt|;
name|p
operator|.
name|put
argument_list|(
literal|"index"
argument_list|,
name|tmpIdxDirName
argument_list|)
expr_stmt|;
name|Writer
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|os
operator|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|PropertiesOutputStream
argument_list|(
name|out
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|p
operator|.
name|store
argument_list|(
name|os
argument_list|,
name|IndexFetcher
operator|.
name|INDEX_PROPERTIES
argument_list|)
expr_stmt|;
name|dir
operator|.
name|sync
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|INDEX_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unable to write "
operator|+
name|IndexFetcher
operator|.
name|INDEX_PROPERTIES
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e1
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|solrCore
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|release
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|field|confFileInfoCache
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|confFileInfoCache
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.    *    * @param confFilesToDownload The list of files obtained from master    *    * @return a list of configuration files which have changed on the master and need to be downloaded.    */
DECL|method|getModifiedConfFiles
specifier|private
name|Collection
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getModifiedConfFiles
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|confFilesToDownload
parameter_list|)
block|{
if|if
condition|(
name|confFilesToDownload
operator|==
literal|null
operator|||
name|confFilesToDownload
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
comment|//build a map with alias/name as the key
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|nameVsFile
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|NamedList
name|names
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
range|:
name|confFilesToDownload
control|)
block|{
comment|//if alias is present that is the name the file may have in the slave
name|String
name|name
init|=
call|(
name|String
call|)
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|ALIAS
argument_list|)
operator|==
literal|null
condition|?
name|map
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
else|:
name|map
operator|.
name|get
argument_list|(
name|ALIAS
argument_list|)
argument_list|)
decl_stmt|;
name|nameVsFile
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|//get the details of the local conf files with the same alias/name
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|localFilesInfo
init|=
name|replicationHandler
operator|.
name|getConfFileInfoFromCache
argument_list|(
name|names
argument_list|,
name|confFileInfoCache
argument_list|)
decl_stmt|;
comment|//compare their size/checksum to see if
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fileInfo
range|:
name|localFilesInfo
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|fileInfo
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
name|nameVsFile
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
continue|continue;
comment|// the file is not even present locally (so must be downloaded)
if|if
condition|(
name|m
operator|.
name|get
argument_list|(
name|CHECKSUM
argument_list|)
operator|.
name|equals
argument_list|(
name|fileInfo
operator|.
name|get
argument_list|(
name|CHECKSUM
argument_list|)
argument_list|)
condition|)
block|{
name|nameVsFile
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|//checksums are same so the file need not be downloaded
block|}
block|}
return|return
name|nameVsFile
operator|.
name|isEmpty
argument_list|()
condition|?
name|Collections
operator|.
name|EMPTY_LIST
else|:
name|nameVsFile
operator|.
name|values
argument_list|()
return|;
block|}
comment|/**     * This simulates File.delete exception-wise, since this class has some strange behavior with it.    * The only difference is it returns null on success, throws SecurityException on SecurityException,     * otherwise returns Throwable preventing deletion (instead of false), for additional information.    */
DECL|method|delete
specifier|static
name|Throwable
name|delete
parameter_list|(
name|File
name|file
parameter_list|)
block|{
try|try
block|{
name|Files
operator|.
name|delete
argument_list|(
name|file
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|other
parameter_list|)
block|{
return|return
name|other
return|;
block|}
block|}
DECL|method|delTree
specifier|static
name|boolean
name|delTree
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
operator|.
name|rm
argument_list|(
name|dir
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to delete directory : "
operator|+
name|dir
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Stops the ongoing fetch    */
DECL|method|abortFetch
name|void
name|abortFetch
parameter_list|()
block|{
name|stop
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getReplicationStartTime
name|long
name|getReplicationStartTime
parameter_list|()
block|{
return|return
name|replicationStartTime
return|;
block|}
DECL|method|getReplicationTimeElapsed
name|long
name|getReplicationTimeElapsed
parameter_list|()
block|{
name|long
name|timeElapsed
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|getReplicationStartTime
argument_list|()
operator|>
literal|0
condition|)
name|timeElapsed
operator|=
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|convert
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|getReplicationStartTime
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
return|return
name|timeElapsed
return|;
block|}
DECL|method|getConfFilesToDownload
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getConfFilesToDownload
parameter_list|()
block|{
comment|//make a copy first because it can be null later
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|tmp
init|=
name|confFilesToDownload
decl_stmt|;
comment|//create a new instance. or else iterator may fail
return|return
name|tmp
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_LIST
else|:
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tmp
argument_list|)
return|;
block|}
DECL|method|getConfFilesDownloaded
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getConfFilesDownloaded
parameter_list|()
block|{
comment|//make a copy first because it can be null later
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|tmp
init|=
name|confFilesDownloaded
decl_stmt|;
comment|// NOTE: it's safe to make a copy of a SynchronizedCollection(ArrayList)
return|return
name|tmp
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_LIST
else|:
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tmp
argument_list|)
return|;
block|}
DECL|method|getFilesToDownload
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getFilesToDownload
parameter_list|()
block|{
comment|//make a copy first because it can be null later
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|tmp
init|=
name|filesToDownload
decl_stmt|;
return|return
name|tmp
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_LIST
else|:
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tmp
argument_list|)
return|;
block|}
DECL|method|getFilesDownloaded
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getFilesDownloaded
parameter_list|()
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|tmp
init|=
name|filesDownloaded
decl_stmt|;
return|return
name|tmp
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_LIST
else|:
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tmp
argument_list|)
return|;
block|}
comment|// TODO: currently does not reflect conf files
DECL|method|getCurrentFile
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getCurrentFile
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|tmp
init|=
name|currentFile
decl_stmt|;
name|DirectoryFileFetcher
name|tmpFileFetcher
init|=
name|dirFileFetcher
decl_stmt|;
if|if
condition|(
name|tmp
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|tmp
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmpFileFetcher
operator|!=
literal|null
condition|)
name|tmp
operator|.
name|put
argument_list|(
literal|"bytesDownloaded"
argument_list|,
name|tmpFileFetcher
operator|.
name|getBytesDownloaded
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tmp
return|;
block|}
DECL|class|ReplicationHandlerException
specifier|private
specifier|static
class|class
name|ReplicationHandlerException
extends|extends
name|InterruptedException
block|{
DECL|method|ReplicationHandlerException
specifier|public
name|ReplicationHandlerException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
DECL|interface|FileInterface
specifier|private
interface|interface
name|FileInterface
block|{
DECL|method|sync
specifier|public
name|void
name|sync
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|packetSize
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
comment|/**    * The class acts as a client for ReplicationHandler.FileStream. It understands the protocol of wt=filestream    *    * @see org.apache.solr.handler.ReplicationHandler.DirectoryFileStream    */
DECL|class|FileFetcher
specifier|private
class|class
name|FileFetcher
block|{
DECL|field|file
specifier|private
specifier|final
name|FileInterface
name|file
decl_stmt|;
DECL|field|includeChecksum
specifier|private
name|boolean
name|includeChecksum
init|=
literal|true
decl_stmt|;
DECL|field|fileName
specifier|private
name|String
name|fileName
decl_stmt|;
DECL|field|saveAs
specifier|private
name|String
name|saveAs
decl_stmt|;
DECL|field|isConf
specifier|private
name|boolean
name|isConf
decl_stmt|;
DECL|field|indexGen
specifier|private
name|Long
name|indexGen
decl_stmt|;
DECL|field|size
specifier|private
name|long
name|size
decl_stmt|;
DECL|field|bytesDownloaded
specifier|private
name|long
name|bytesDownloaded
init|=
literal|0
decl_stmt|;
DECL|field|buf
specifier|private
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|1024
index|]
decl_stmt|;
DECL|field|checksum
specifier|private
name|Checksum
name|checksum
decl_stmt|;
DECL|field|errorCount
specifier|private
name|int
name|errorCount
init|=
literal|0
decl_stmt|;
DECL|field|aborted
specifier|private
name|boolean
name|aborted
init|=
literal|false
decl_stmt|;
DECL|method|FileFetcher
name|FileFetcher
parameter_list|(
name|FileInterface
name|file
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fileDetails
parameter_list|,
name|String
name|saveAs
parameter_list|,
name|boolean
name|isConf
parameter_list|,
name|long
name|latestGen
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
operator|(
name|String
operator|)
name|fileDetails
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
operator|(
name|Long
operator|)
name|fileDetails
operator|.
name|get
argument_list|(
name|SIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|isConf
operator|=
name|isConf
expr_stmt|;
name|this
operator|.
name|saveAs
operator|=
name|saveAs
expr_stmt|;
name|indexGen
operator|=
name|latestGen
expr_stmt|;
if|if
condition|(
name|includeChecksum
condition|)
name|checksum
operator|=
operator|new
name|Adler32
argument_list|()
expr_stmt|;
block|}
DECL|method|getBytesDownloaded
specifier|public
name|long
name|getBytesDownloaded
parameter_list|()
block|{
return|return
name|bytesDownloaded
return|;
block|}
comment|/**      * The main method which downloads file      */
DECL|method|fetchFile
specifier|public
name|void
name|fetchFile
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|FastInputStream
name|is
init|=
name|getStream
argument_list|()
decl_stmt|;
name|int
name|result
decl_stmt|;
try|try
block|{
comment|//fetch packets one by one in a single request
name|result
operator|=
name|fetchPackets
argument_list|(
name|is
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
operator|||
name|result
operator|==
name|NO_CONTENT
condition|)
block|{
return|return;
block|}
comment|//if there is an error continue. But continue from the point where it got broken
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|cleanup
argument_list|()
expr_stmt|;
comment|//if cleanup succeeds . The file is downloaded fully. do an fsync
name|fsyncService
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|file
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fsyncException
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|fetchPackets
specifier|private
name|int
name|fetchPackets
parameter_list|(
name|FastInputStream
name|fis
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|intbytes
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|byte
index|[]
name|longbytes
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|stop
condition|)
block|{
name|stop
operator|=
literal|false
expr_stmt|;
name|aborted
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|ReplicationHandlerException
argument_list|(
literal|"User aborted replication"
argument_list|)
throw|;
block|}
name|long
name|checkSumServer
init|=
operator|-
literal|1
decl_stmt|;
name|fis
operator|.
name|readFully
argument_list|(
name|intbytes
argument_list|)
expr_stmt|;
comment|//read the size of the packet
name|int
name|packetSize
init|=
name|readInt
argument_list|(
name|intbytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|packetSize
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No content received for file: {}"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
return|return
name|NO_CONTENT
return|;
block|}
if|if
condition|(
name|buf
operator|.
name|length
operator|<
name|packetSize
condition|)
name|buf
operator|=
operator|new
name|byte
index|[
name|packetSize
index|]
expr_stmt|;
if|if
condition|(
name|checksum
operator|!=
literal|null
condition|)
block|{
comment|//read the checksum
name|fis
operator|.
name|readFully
argument_list|(
name|longbytes
argument_list|)
expr_stmt|;
name|checkSumServer
operator|=
name|readLong
argument_list|(
name|longbytes
argument_list|)
expr_stmt|;
block|}
comment|//then read the packet of bytes
name|fis
operator|.
name|readFully
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|packetSize
argument_list|)
expr_stmt|;
comment|//compare the checksum as sent from the master
if|if
condition|(
name|includeChecksum
condition|)
block|{
name|checksum
operator|.
name|reset
argument_list|()
expr_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|packetSize
argument_list|)
expr_stmt|;
name|long
name|checkSumClient
init|=
name|checksum
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkSumClient
operator|!=
name|checkSumServer
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Checksum not matched between client and server for file: {}"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
comment|//if checksum is wrong it is a problem return for retry
return|return
literal|1
return|;
block|}
block|}
comment|//if everything is fine, write down the packet to the file
name|file
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|packetSize
argument_list|)
expr_stmt|;
name|bytesDownloaded
operator|+=
name|packetSize
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Fetched and wrote {} bytes of file: {}"
argument_list|,
name|bytesDownloaded
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesDownloaded
operator|>=
name|size
condition|)
return|return
literal|0
return|;
comment|//errorCount is always set to zero after a successful packet
name|errorCount
operator|=
literal|0
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ReplicationHandlerException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error in fetching file: {} (downloaded {} of {} bytes)"
argument_list|,
name|fileName
argument_list|,
name|bytesDownloaded
argument_list|,
name|size
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//for any failure, increment the error count
name|errorCount
operator|++
expr_stmt|;
comment|//if it fails for the same packet for MAX_RETRIES fail and come out
if|if
condition|(
name|errorCount
operator|>
name|MAX_RETRIES
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Failed to fetch file: "
operator|+
name|fileName
operator|+
literal|" (downloaded "
operator|+
name|bytesDownloaded
operator|+
literal|" of "
operator|+
name|size
operator|+
literal|" bytes"
operator|+
literal|", error count: "
operator|+
name|errorCount
operator|+
literal|"> "
operator|+
name|MAX_RETRIES
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|ERR
return|;
block|}
block|}
comment|/**      * The webcontainer flushes the data only after it fills the buffer size. So, all data has to be read as readFully()      * other wise it fails. So read everything as bytes and then extract an integer out of it      */
DECL|method|readInt
specifier|private
name|int
name|readInt
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
name|b
index|[
literal|0
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|b
index|[
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|b
index|[
literal|2
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|b
index|[
literal|3
index|]
operator|&
literal|0xff
operator|)
operator|)
return|;
block|}
comment|/**      * Same as above but to read longs from a byte array      */
DECL|method|readLong
specifier|private
name|long
name|readLong
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
return|return
operator|(
operator|(
call|(
name|long
call|)
argument_list|(
name|b
index|[
literal|0
index|]
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|56
operator|)
operator||
operator|(
operator|(
call|(
name|long
call|)
argument_list|(
name|b
index|[
literal|1
index|]
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|48
operator|)
operator||
operator|(
operator|(
call|(
name|long
call|)
argument_list|(
name|b
index|[
literal|2
index|]
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|40
operator|)
operator||
operator|(
operator|(
call|(
name|long
call|)
argument_list|(
name|b
index|[
literal|3
index|]
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|32
operator|)
operator||
operator|(
operator|(
call|(
name|long
call|)
argument_list|(
name|b
index|[
literal|4
index|]
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|b
index|[
literal|5
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|b
index|[
literal|6
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
name|b
index|[
literal|7
index|]
operator|&
literal|0xff
operator|)
operator|)
return|;
block|}
comment|/**      * cleanup everything      */
DECL|method|cleanup
specifier|private
name|void
name|cleanup
parameter_list|()
block|{
try|try
block|{
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|/* no-op */
name|LOG
operator|.
name|error
argument_list|(
literal|"Error closing file: {}"
argument_list|,
name|this
operator|.
name|saveAs
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bytesDownloaded
operator|!=
name|size
condition|)
block|{
comment|//if the download is not complete then
comment|//delete the file being downloaded
try|try
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error deleting file: {}"
argument_list|,
name|this
operator|.
name|saveAs
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|//if the failure is due to a user abort it is returned normally else an exception is thrown
if|if
condition|(
operator|!
name|aborted
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unable to download "
operator|+
name|fileName
operator|+
literal|" completely. Downloaded "
operator|+
name|bytesDownloaded
operator|+
literal|"!="
operator|+
name|size
argument_list|)
throw|;
block|}
block|}
comment|/**      * Open a new stream using HttpClient      */
DECL|method|getStream
specifier|private
name|FastInputStream
name|getStream
parameter_list|()
throws|throws
name|IOException
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
comment|//    //the method is command=filecontent
name|params
operator|.
name|set
argument_list|(
name|COMMAND
argument_list|,
name|CMD_GET_FILE
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|GENERATION
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|indexGen
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/replication"
argument_list|)
expr_stmt|;
comment|//add the version to download. This is used to reserve the download
if|if
condition|(
name|isConf
condition|)
block|{
comment|//set cf instead of file for config file
name|params
operator|.
name|set
argument_list|(
name|CONF_FILE_SHORT
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|params
operator|.
name|set
argument_list|(
name|FILE
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useInternal
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|COMPRESSION
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
comment|//use checksum
if|if
condition|(
name|this
operator|.
name|includeChecksum
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|CHECKSUM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//wt=filestream this is a custom protocol
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|,
name|FILE_STREAM
argument_list|)
expr_stmt|;
comment|// This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that
comment|// the server starts from the offset
if|if
condition|(
name|bytesDownloaded
operator|>
literal|0
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|OFFSET
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|bytesDownloaded
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|NamedList
name|response
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
comment|// TODO use shardhandler
try|try
init|(
name|HttpSolrClient
name|client
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|masterUrl
argument_list|,
name|myHttpClient
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|client
operator|.
name|setSoTimeout
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|client
operator|.
name|setConnectionTimeout
argument_list|(
literal|15000
argument_list|)
expr_stmt|;
name|QueryRequest
name|req
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|response
operator|=
name|client
operator|.
name|request
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|is
operator|=
operator|(
name|InputStream
operator|)
name|response
operator|.
name|get
argument_list|(
literal|"stream"
argument_list|)
expr_stmt|;
if|if
condition|(
name|useInternal
condition|)
block|{
name|is
operator|=
operator|new
name|InflaterInputStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FastInputStream
argument_list|(
name|is
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//close stream on error
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not download file '"
operator|+
name|fileName
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|DirectoryFile
specifier|private
class|class
name|DirectoryFile
implements|implements
name|FileInterface
block|{
DECL|field|saveAs
specifier|private
specifier|final
name|String
name|saveAs
decl_stmt|;
DECL|field|copy2Dir
specifier|private
name|Directory
name|copy2Dir
decl_stmt|;
DECL|field|outStream
specifier|private
name|IndexOutput
name|outStream
decl_stmt|;
DECL|method|DirectoryFile
name|DirectoryFile
parameter_list|(
name|Directory
name|tmpIndexDir
parameter_list|,
name|String
name|saveAs
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|saveAs
operator|=
name|saveAs
expr_stmt|;
name|this
operator|.
name|copy2Dir
operator|=
name|tmpIndexDir
expr_stmt|;
name|outStream
operator|=
name|copy2Dir
operator|.
name|createOutput
argument_list|(
name|this
operator|.
name|saveAs
argument_list|,
name|DirectoryFactory
operator|.
name|IOCONTEXT_NO_CACHE
argument_list|)
expr_stmt|;
block|}
DECL|method|sync
specifier|public
name|void
name|sync
parameter_list|()
throws|throws
name|IOException
block|{
name|copy2Dir
operator|.
name|sync
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|saveAs
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|packetSize
parameter_list|)
throws|throws
name|IOException
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|packetSize
argument_list|)
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|()
throws|throws
name|Exception
block|{
name|copy2Dir
operator|.
name|deleteFile
argument_list|(
name|saveAs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DirectoryFileFetcher
specifier|private
class|class
name|DirectoryFileFetcher
extends|extends
name|FileFetcher
block|{
DECL|method|DirectoryFileFetcher
name|DirectoryFileFetcher
parameter_list|(
name|Directory
name|tmpIndexDir
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fileDetails
parameter_list|,
name|String
name|saveAs
parameter_list|,
name|boolean
name|isConf
parameter_list|,
name|long
name|latestGen
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|new
name|DirectoryFile
argument_list|(
name|tmpIndexDir
argument_list|,
name|saveAs
argument_list|)
argument_list|,
name|fileDetails
argument_list|,
name|saveAs
argument_list|,
name|isConf
argument_list|,
name|latestGen
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|LocalFsFile
specifier|private
class|class
name|LocalFsFile
implements|implements
name|FileInterface
block|{
DECL|field|copy2Dir
specifier|private
name|File
name|copy2Dir
decl_stmt|;
DECL|field|fileChannel
name|FileChannel
name|fileChannel
decl_stmt|;
DECL|field|fileOutputStream
specifier|private
name|FileOutputStream
name|fileOutputStream
decl_stmt|;
DECL|field|file
name|File
name|file
decl_stmt|;
DECL|method|LocalFsFile
name|LocalFsFile
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|saveAs
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|copy2Dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|file
operator|=
operator|new
name|File
argument_list|(
name|copy2Dir
argument_list|,
name|saveAs
argument_list|)
expr_stmt|;
name|File
name|parentDir
init|=
name|this
operator|.
name|file
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parentDir
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|parentDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Failed to create (sub)directory for file: "
operator|+
name|saveAs
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|fileOutputStream
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileChannel
operator|=
name|this
operator|.
name|fileOutputStream
operator|.
name|getChannel
argument_list|()
expr_stmt|;
block|}
DECL|method|sync
specifier|public
name|void
name|sync
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|sync
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|packetSize
parameter_list|)
throws|throws
name|IOException
block|{
name|fileChannel
operator|.
name|write
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|packetSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
comment|//close the FileOutputStream (which also closes the Channel)
name|fileOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|()
throws|throws
name|Exception
block|{
name|Files
operator|.
name|delete
argument_list|(
name|file
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|LocalFsFileFetcher
specifier|private
class|class
name|LocalFsFileFetcher
extends|extends
name|FileFetcher
block|{
DECL|method|LocalFsFileFetcher
name|LocalFsFileFetcher
parameter_list|(
name|File
name|dir
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fileDetails
parameter_list|,
name|String
name|saveAs
parameter_list|,
name|boolean
name|isConf
parameter_list|,
name|long
name|latestGen
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|new
name|LocalFsFile
argument_list|(
name|dir
argument_list|,
name|saveAs
argument_list|)
argument_list|,
name|fileDetails
argument_list|,
name|saveAs
argument_list|,
name|isConf
argument_list|,
name|latestGen
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getDetails
name|NamedList
name|getDetails
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|COMMAND
argument_list|,
name|CMD_DETAILS
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"slave"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/replication"
argument_list|)
expr_stmt|;
comment|// TODO use shardhandler
try|try
init|(
name|HttpSolrClient
name|client
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|masterUrl
argument_list|,
name|myHttpClient
argument_list|)
init|)
block|{
name|client
operator|.
name|setSoTimeout
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|client
operator|.
name|setConnectionTimeout
argument_list|(
literal|15000
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
return|return
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
DECL|method|destroy
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|abortFetch
argument_list|()
expr_stmt|;
block|}
DECL|method|getMasterUrl
name|String
name|getMasterUrl
parameter_list|()
block|{
return|return
name|masterUrl
return|;
block|}
DECL|field|MAX_RETRIES
specifier|private
specifier|static
specifier|final
name|int
name|MAX_RETRIES
init|=
literal|5
decl_stmt|;
DECL|field|NO_CONTENT
specifier|private
specifier|static
specifier|final
name|int
name|NO_CONTENT
init|=
literal|1
decl_stmt|;
DECL|field|ERR
specifier|private
specifier|static
specifier|final
name|int
name|ERR
init|=
literal|2
decl_stmt|;
DECL|field|REPLICATION_PROPERTIES
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_PROPERTIES
init|=
literal|"replication.properties"
decl_stmt|;
DECL|field|INDEX_REPLICATED_AT
specifier|static
specifier|final
name|String
name|INDEX_REPLICATED_AT
init|=
literal|"indexReplicatedAt"
decl_stmt|;
DECL|field|TIMES_INDEX_REPLICATED
specifier|static
specifier|final
name|String
name|TIMES_INDEX_REPLICATED
init|=
literal|"timesIndexReplicated"
decl_stmt|;
DECL|field|CONF_FILES_REPLICATED
specifier|static
specifier|final
name|String
name|CONF_FILES_REPLICATED
init|=
literal|"confFilesReplicated"
decl_stmt|;
DECL|field|CONF_FILES_REPLICATED_AT
specifier|static
specifier|final
name|String
name|CONF_FILES_REPLICATED_AT
init|=
literal|"confFilesReplicatedAt"
decl_stmt|;
DECL|field|TIMES_CONFIG_REPLICATED
specifier|static
specifier|final
name|String
name|TIMES_CONFIG_REPLICATED
init|=
literal|"timesConfigReplicated"
decl_stmt|;
DECL|field|LAST_CYCLE_BYTES_DOWNLOADED
specifier|static
specifier|final
name|String
name|LAST_CYCLE_BYTES_DOWNLOADED
init|=
literal|"lastCycleBytesDownloaded"
decl_stmt|;
DECL|field|TIMES_FAILED
specifier|static
specifier|final
name|String
name|TIMES_FAILED
init|=
literal|"timesFailed"
decl_stmt|;
DECL|field|REPLICATION_FAILED_AT
specifier|static
specifier|final
name|String
name|REPLICATION_FAILED_AT
init|=
literal|"replicationFailedAt"
decl_stmt|;
DECL|field|PREVIOUS_CYCLE_TIME_TAKEN
specifier|static
specifier|final
name|String
name|PREVIOUS_CYCLE_TIME_TAKEN
init|=
literal|"previousCycleTimeInSeconds"
decl_stmt|;
DECL|field|INDEX_REPLICATED_AT_LIST
specifier|static
specifier|final
name|String
name|INDEX_REPLICATED_AT_LIST
init|=
literal|"indexReplicatedAtList"
decl_stmt|;
DECL|field|REPLICATION_FAILED_AT_LIST
specifier|static
specifier|final
name|String
name|REPLICATION_FAILED_AT_LIST
init|=
literal|"replicationFailedAtList"
decl_stmt|;
block|}
end_class
end_unit
