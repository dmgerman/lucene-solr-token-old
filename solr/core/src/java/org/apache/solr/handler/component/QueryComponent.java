begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|GroupDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|SearchGroup
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|TopGroups
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ReaderUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|ResultContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|CommandHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|GroupingSpecification
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|distributed
operator|.
name|ShardRequestFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|distributed
operator|.
name|ShardResponseProcessor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|distributed
operator|.
name|command
operator|.
name|QueryCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|distributed
operator|.
name|command
operator|.
name|SearchGroupsFieldCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|distributed
operator|.
name|command
operator|.
name|TopGroupsFieldCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|distributed
operator|.
name|requestfactory
operator|.
name|SearchGroupsRequestFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|distributed
operator|.
name|requestfactory
operator|.
name|StoredFieldsShardRequestFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|distributed
operator|.
name|requestfactory
operator|.
name|TopGroupsShardRequestFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|distributed
operator|.
name|responseprocessor
operator|.
name|SearchGroupShardResponseProcessor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|distributed
operator|.
name|responseprocessor
operator|.
name|StoredFieldsShardResponseProcessor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|distributed
operator|.
name|responseprocessor
operator|.
name|TopGroupsShardResponseProcessor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|distributed
operator|.
name|shardresultserializer
operator|.
name|SearchGroupsResultTransformer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|distributed
operator|.
name|shardresultserializer
operator|.
name|TopGroupsResultTransformer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|endresulttransformer
operator|.
name|EndResultTransformer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|endresulttransformer
operator|.
name|GroupedEndResultTransformer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|endresulttransformer
operator|.
name|MainEndResultTransformer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|endresulttransformer
operator|.
name|SimpleEndResultTransformer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|SolrPluginUtils
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * TODO!  *   *  * @since solr 1.3  */
end_comment
begin_class
DECL|class|QueryComponent
specifier|public
class|class
name|QueryComponent
extends|extends
name|SearchComponent
block|{
DECL|field|COMPONENT_NAME
specifier|public
specifier|static
specifier|final
name|String
name|COMPONENT_NAME
init|=
literal|"query"
decl_stmt|;
annotation|@
name|Override
DECL|method|prepare
specifier|public
name|void
name|prepare
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrQueryRequest
name|req
init|=
name|rb
operator|.
name|req
decl_stmt|;
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|params
operator|.
name|getBool
argument_list|(
name|COMPONENT_NAME
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return;
block|}
name|SolrQueryResponse
name|rsp
init|=
name|rb
operator|.
name|rsp
decl_stmt|;
comment|// Set field flags
name|ReturnFields
name|returnFields
init|=
operator|new
name|ReturnFields
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|rsp
operator|.
name|setReturnFields
argument_list|(
name|returnFields
argument_list|)
expr_stmt|;
name|int
name|flags
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|returnFields
operator|.
name|wantsScore
argument_list|()
condition|)
block|{
name|flags
operator||=
name|SolrIndexSearcher
operator|.
name|GET_SCORES
expr_stmt|;
block|}
name|rb
operator|.
name|setFieldFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|String
name|defType
init|=
name|params
operator|.
name|get
argument_list|(
name|QueryParsing
operator|.
name|DEFTYPE
argument_list|,
name|QParserPlugin
operator|.
name|DEFAULT_QTYPE
argument_list|)
decl_stmt|;
comment|// get it from the response builder to give a different component a chance
comment|// to set it.
name|String
name|queryString
init|=
name|rb
operator|.
name|getQueryString
argument_list|()
decl_stmt|;
if|if
condition|(
name|queryString
operator|==
literal|null
condition|)
block|{
comment|// this is the normal way it's set.
name|queryString
operator|=
name|params
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|)
expr_stmt|;
name|rb
operator|.
name|setQueryString
argument_list|(
name|queryString
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|QParser
name|parser
init|=
name|QParser
operator|.
name|getParser
argument_list|(
name|rb
operator|.
name|getQueryString
argument_list|()
argument_list|,
name|defType
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|Query
name|q
init|=
name|parser
operator|.
name|getQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|q
operator|==
literal|null
condition|)
block|{
comment|// normalize a null query to a query that matches nothing
name|q
operator|=
operator|new
name|BooleanQuery
argument_list|()
expr_stmt|;
block|}
name|rb
operator|.
name|setQuery
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|rb
operator|.
name|setSortSpec
argument_list|(
name|parser
operator|.
name|getSort
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|rb
operator|.
name|setQparser
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|rb
operator|.
name|setScoreDoc
argument_list|(
name|parser
operator|.
name|getPaging
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|fqs
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getParams
argument_list|(
name|CommonParams
operator|.
name|FQ
argument_list|)
decl_stmt|;
if|if
condition|(
name|fqs
operator|!=
literal|null
operator|&&
name|fqs
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|List
argument_list|<
name|Query
argument_list|>
name|filters
init|=
name|rb
operator|.
name|getFilters
argument_list|()
decl_stmt|;
if|if
condition|(
name|filters
operator|==
literal|null
condition|)
block|{
name|filters
operator|=
operator|new
name|ArrayList
argument_list|<
name|Query
argument_list|>
argument_list|(
name|fqs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|fq
range|:
name|fqs
control|)
block|{
if|if
condition|(
name|fq
operator|!=
literal|null
operator|&&
name|fq
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|QParser
name|fqp
init|=
name|QParser
operator|.
name|getParser
argument_list|(
name|fq
argument_list|,
literal|null
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|fqp
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// only set the filters if they are not empty otherwise
comment|// fq=&someotherParam= will trigger all docs filter for every request
comment|// if filter cache is disabled
if|if
condition|(
operator|!
name|filters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rb
operator|.
name|setFilters
argument_list|(
name|filters
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|boolean
name|grouping
init|=
name|params
operator|.
name|getBool
argument_list|(
name|GroupParams
operator|.
name|GROUP
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|grouping
condition|)
block|{
return|return;
block|}
name|SolrIndexSearcher
operator|.
name|QueryCommand
name|cmd
init|=
name|rb
operator|.
name|getQueryCommand
argument_list|()
decl_stmt|;
name|SolrIndexSearcher
name|searcher
init|=
name|rb
operator|.
name|req
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
name|GroupingSpecification
name|groupingSpec
init|=
operator|new
name|GroupingSpecification
argument_list|()
decl_stmt|;
name|rb
operator|.
name|setGroupingSpec
argument_list|(
name|groupingSpec
argument_list|)
expr_stmt|;
comment|//TODO: move weighting of sort
name|Sort
name|groupSort
init|=
name|searcher
operator|.
name|weightSort
argument_list|(
name|cmd
operator|.
name|getSort
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupSort
operator|==
literal|null
condition|)
block|{
name|groupSort
operator|=
name|Sort
operator|.
name|RELEVANCE
expr_stmt|;
block|}
comment|// groupSort defaults to sort
name|String
name|groupSortStr
init|=
name|params
operator|.
name|get
argument_list|(
name|GroupParams
operator|.
name|GROUP_SORT
argument_list|)
decl_stmt|;
comment|//TODO: move weighting of sort
name|Sort
name|sortWithinGroup
init|=
name|groupSortStr
operator|==
literal|null
condition|?
name|groupSort
else|:
name|searcher
operator|.
name|weightSort
argument_list|(
name|QueryParsing
operator|.
name|parseSort
argument_list|(
name|groupSortStr
argument_list|,
name|req
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sortWithinGroup
operator|==
literal|null
condition|)
block|{
name|sortWithinGroup
operator|=
name|Sort
operator|.
name|RELEVANCE
expr_stmt|;
block|}
name|groupingSpec
operator|.
name|setSortWithinGroup
argument_list|(
name|sortWithinGroup
argument_list|)
expr_stmt|;
name|groupingSpec
operator|.
name|setGroupSort
argument_list|(
name|groupSort
argument_list|)
expr_stmt|;
name|String
name|formatStr
init|=
name|params
operator|.
name|get
argument_list|(
name|GroupParams
operator|.
name|GROUP_FORMAT
argument_list|,
name|Grouping
operator|.
name|Format
operator|.
name|grouped
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|Grouping
operator|.
name|Format
name|responseFormat
decl_stmt|;
try|try
block|{
name|responseFormat
operator|=
name|Grouping
operator|.
name|Format
operator|.
name|valueOf
argument_list|(
name|formatStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Illegal %s parameter"
argument_list|,
name|GroupParams
operator|.
name|GROUP_FORMAT
argument_list|)
argument_list|)
throw|;
block|}
name|groupingSpec
operator|.
name|setResponseFormat
argument_list|(
name|responseFormat
argument_list|)
expr_stmt|;
name|groupingSpec
operator|.
name|setFields
argument_list|(
name|params
operator|.
name|getParams
argument_list|(
name|GroupParams
operator|.
name|GROUP_FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|groupingSpec
operator|.
name|setQueries
argument_list|(
name|params
operator|.
name|getParams
argument_list|(
name|GroupParams
operator|.
name|GROUP_QUERY
argument_list|)
argument_list|)
expr_stmt|;
name|groupingSpec
operator|.
name|setFunctions
argument_list|(
name|params
operator|.
name|getParams
argument_list|(
name|GroupParams
operator|.
name|GROUP_FUNC
argument_list|)
argument_list|)
expr_stmt|;
name|groupingSpec
operator|.
name|setGroupOffset
argument_list|(
name|params
operator|.
name|getInt
argument_list|(
name|GroupParams
operator|.
name|GROUP_OFFSET
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|groupingSpec
operator|.
name|setGroupLimit
argument_list|(
name|params
operator|.
name|getInt
argument_list|(
name|GroupParams
operator|.
name|GROUP_LIMIT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|groupingSpec
operator|.
name|setOffset
argument_list|(
name|rb
operator|.
name|getSortSpec
argument_list|()
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|groupingSpec
operator|.
name|setLimit
argument_list|(
name|rb
operator|.
name|getSortSpec
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|groupingSpec
operator|.
name|setIncludeGroupCount
argument_list|(
name|params
operator|.
name|getBool
argument_list|(
name|GroupParams
operator|.
name|GROUP_TOTAL_COUNT
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|groupingSpec
operator|.
name|setMain
argument_list|(
name|params
operator|.
name|getBool
argument_list|(
name|GroupParams
operator|.
name|GROUP_MAIN
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|groupingSpec
operator|.
name|setNeedScore
argument_list|(
operator|(
name|cmd
operator|.
name|getFlags
argument_list|()
operator|&
name|SolrIndexSearcher
operator|.
name|GET_SCORES
operator|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|groupingSpec
operator|.
name|setTruncateGroups
argument_list|(
name|params
operator|.
name|getBool
argument_list|(
name|GroupParams
operator|.
name|GROUP_TRUNCATE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Actually run the query    */
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrQueryRequest
name|req
init|=
name|rb
operator|.
name|req
decl_stmt|;
name|SolrQueryResponse
name|rsp
init|=
name|rb
operator|.
name|rsp
decl_stmt|;
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|params
operator|.
name|getBool
argument_list|(
name|COMPONENT_NAME
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return;
block|}
name|SolrIndexSearcher
name|searcher
init|=
name|req
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
if|if
condition|(
name|rb
operator|.
name|getQueryCommand
argument_list|()
operator|.
name|getOffset
argument_list|()
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"'start' parameter cannot be negative"
argument_list|)
throw|;
block|}
comment|// -1 as flag if not set.
name|long
name|timeAllowed
init|=
operator|(
name|long
operator|)
name|params
operator|.
name|getInt
argument_list|(
name|CommonParams
operator|.
name|TIME_ALLOWED
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// Optional: This could also be implemented by the top-level searcher sending
comment|// a filter that lists the ids... that would be transparent to
comment|// the request handler, but would be more expensive (and would preserve score
comment|// too if desired).
name|String
name|ids
init|=
name|params
operator|.
name|get
argument_list|(
name|ShardParams
operator|.
name|IDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|!=
literal|null
condition|)
block|{
name|SchemaField
name|idField
init|=
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|idArr
init|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|ids
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
index|[]
name|luceneIds
init|=
operator|new
name|int
index|[
name|idArr
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|docs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|idArr
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|id
init|=
name|req
operator|.
name|getSearcher
argument_list|()
operator|.
name|getFirstMatch
argument_list|(
operator|new
name|Term
argument_list|(
name|idField
operator|.
name|getName
argument_list|()
argument_list|,
name|idField
operator|.
name|getType
argument_list|()
operator|.
name|toInternal
argument_list|(
name|idArr
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|>=
literal|0
condition|)
name|luceneIds
index|[
name|docs
operator|++
index|]
operator|=
name|id
expr_stmt|;
block|}
name|DocListAndSet
name|res
init|=
operator|new
name|DocListAndSet
argument_list|()
decl_stmt|;
name|res
operator|.
name|docList
operator|=
operator|new
name|DocSlice
argument_list|(
literal|0
argument_list|,
name|docs
argument_list|,
name|luceneIds
argument_list|,
literal|null
argument_list|,
name|docs
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|rb
operator|.
name|isNeedDocSet
argument_list|()
condition|)
block|{
comment|// TODO: create a cache for this!
name|List
argument_list|<
name|Query
argument_list|>
name|queries
init|=
operator|new
name|ArrayList
argument_list|<
name|Query
argument_list|>
argument_list|()
decl_stmt|;
name|queries
operator|.
name|add
argument_list|(
name|rb
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|filters
init|=
name|rb
operator|.
name|getFilters
argument_list|()
decl_stmt|;
if|if
condition|(
name|filters
operator|!=
literal|null
condition|)
name|queries
operator|.
name|addAll
argument_list|(
name|filters
argument_list|)
expr_stmt|;
name|res
operator|.
name|docSet
operator|=
name|searcher
operator|.
name|getDocSet
argument_list|(
name|queries
argument_list|)
expr_stmt|;
block|}
name|rb
operator|.
name|setResults
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|ResultContext
name|ctx
init|=
operator|new
name|ResultContext
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|docs
operator|=
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docList
expr_stmt|;
name|ctx
operator|.
name|query
operator|=
literal|null
expr_stmt|;
comment|// anything?
name|rsp
operator|.
name|add
argument_list|(
literal|"response"
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
return|return;
block|}
name|SolrIndexSearcher
operator|.
name|QueryCommand
name|cmd
init|=
name|rb
operator|.
name|getQueryCommand
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|setTimeAllowed
argument_list|(
name|timeAllowed
argument_list|)
expr_stmt|;
name|SolrIndexSearcher
operator|.
name|QueryResult
name|result
init|=
operator|new
name|SolrIndexSearcher
operator|.
name|QueryResult
argument_list|()
decl_stmt|;
comment|//
comment|// grouping / field collapsing
comment|//
name|GroupingSpecification
name|groupingSpec
init|=
name|rb
operator|.
name|getGroupingSpec
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupingSpec
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|boolean
name|needScores
init|=
operator|(
name|cmd
operator|.
name|getFlags
argument_list|()
operator|&
name|SolrIndexSearcher
operator|.
name|GET_SCORES
operator|)
operator|!=
literal|0
decl_stmt|;
if|if
condition|(
name|params
operator|.
name|getBool
argument_list|(
name|GroupParams
operator|.
name|GROUP_DISTRIBUTED_FIRST
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|CommandHandler
operator|.
name|Builder
name|topsGroupsActionBuilder
init|=
operator|new
name|CommandHandler
operator|.
name|Builder
argument_list|()
operator|.
name|setQueryCommand
argument_list|(
name|cmd
argument_list|)
operator|.
name|setNeedDocSet
argument_list|(
literal|false
argument_list|)
comment|// Order matters here
operator|.
name|setIncludeHitCount
argument_list|(
literal|true
argument_list|)
operator|.
name|setSearcher
argument_list|(
name|searcher
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|groupingSpec
operator|.
name|getFields
argument_list|()
control|)
block|{
name|topsGroupsActionBuilder
operator|.
name|addCommandField
argument_list|(
operator|new
name|SearchGroupsFieldCommand
operator|.
name|Builder
argument_list|()
operator|.
name|setField
argument_list|(
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|setGroupSort
argument_list|(
name|groupingSpec
operator|.
name|getGroupSort
argument_list|()
argument_list|)
operator|.
name|setTopNGroups
argument_list|(
name|cmd
operator|.
name|getOffset
argument_list|()
operator|+
name|cmd
operator|.
name|getLen
argument_list|()
argument_list|)
operator|.
name|setIncludeGroupCount
argument_list|(
name|groupingSpec
operator|.
name|isIncludeGroupCount
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CommandHandler
name|commandHandler
init|=
name|topsGroupsActionBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|commandHandler
operator|.
name|execute
argument_list|()
expr_stmt|;
name|SearchGroupsResultTransformer
name|serializer
init|=
operator|new
name|SearchGroupsResultTransformer
argument_list|(
name|searcher
argument_list|)
decl_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"firstPhase"
argument_list|,
name|commandHandler
operator|.
name|processResult
argument_list|(
name|result
argument_list|,
name|serializer
argument_list|)
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"totalHitCount"
argument_list|,
name|commandHandler
operator|.
name|getTotalHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|rb
operator|.
name|setResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|params
operator|.
name|getBool
argument_list|(
name|GroupParams
operator|.
name|GROUP_DISTRIBUTED_SECOND
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|CommandHandler
operator|.
name|Builder
name|secondPhaseBuilder
init|=
operator|new
name|CommandHandler
operator|.
name|Builder
argument_list|()
operator|.
name|setQueryCommand
argument_list|(
name|cmd
argument_list|)
operator|.
name|setTruncateGroups
argument_list|(
name|groupingSpec
operator|.
name|isTruncateGroups
argument_list|()
operator|&&
name|groupingSpec
operator|.
name|getFields
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
operator|.
name|setSearcher
argument_list|(
name|searcher
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|groupingSpec
operator|.
name|getFields
argument_list|()
control|)
block|{
name|String
index|[]
name|topGroupsParam
init|=
name|params
operator|.
name|getParams
argument_list|(
name|GroupParams
operator|.
name|GROUP_DISTRIBUTED_TOPGROUPS_PREFIX
operator|+
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|topGroupsParam
operator|==
literal|null
condition|)
block|{
name|topGroupsParam
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
name|List
argument_list|<
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|topGroups
init|=
operator|new
name|ArrayList
argument_list|<
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
argument_list|(
name|topGroupsParam
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|topGroup
range|:
name|topGroupsParam
control|)
block|{
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
name|searchGroup
init|=
operator|new
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|topGroup
operator|.
name|equals
argument_list|(
name|TopGroupsShardRequestFactory
operator|.
name|GROUP_NULL_VALUE
argument_list|)
condition|)
block|{
name|searchGroup
operator|.
name|groupValue
operator|=
operator|new
name|BytesRef
argument_list|(
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|readableToIndexed
argument_list|(
name|topGroup
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|topGroups
operator|.
name|add
argument_list|(
name|searchGroup
argument_list|)
expr_stmt|;
block|}
name|secondPhaseBuilder
operator|.
name|addCommandField
argument_list|(
operator|new
name|TopGroupsFieldCommand
operator|.
name|Builder
argument_list|()
operator|.
name|setField
argument_list|(
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|setGroupSort
argument_list|(
name|groupingSpec
operator|.
name|getGroupSort
argument_list|()
argument_list|)
operator|.
name|setSortWithinGroup
argument_list|(
name|groupingSpec
operator|.
name|getSortWithinGroup
argument_list|()
argument_list|)
operator|.
name|setFirstPhaseGroups
argument_list|(
name|topGroups
argument_list|)
operator|.
name|setMaxDocPerGroup
argument_list|(
name|groupingSpec
operator|.
name|getGroupOffset
argument_list|()
operator|+
name|groupingSpec
operator|.
name|getGroupLimit
argument_list|()
argument_list|)
operator|.
name|setNeedScores
argument_list|(
name|needScores
argument_list|)
operator|.
name|setNeedMaxScore
argument_list|(
name|needScores
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|query
range|:
name|groupingSpec
operator|.
name|getQueries
argument_list|()
control|)
block|{
name|secondPhaseBuilder
operator|.
name|addCommandField
argument_list|(
operator|new
name|QueryCommand
operator|.
name|Builder
argument_list|()
operator|.
name|setDocsToCollect
argument_list|(
name|groupingSpec
operator|.
name|getOffset
argument_list|()
operator|+
name|groupingSpec
operator|.
name|getLimit
argument_list|()
argument_list|)
operator|.
name|setSort
argument_list|(
name|groupingSpec
operator|.
name|getGroupSort
argument_list|()
argument_list|)
operator|.
name|setQuery
argument_list|(
name|query
argument_list|,
name|rb
operator|.
name|req
argument_list|)
operator|.
name|setDocSet
argument_list|(
name|searcher
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CommandHandler
name|commandHandler
init|=
name|secondPhaseBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|commandHandler
operator|.
name|execute
argument_list|()
expr_stmt|;
name|TopGroupsResultTransformer
name|serializer
init|=
operator|new
name|TopGroupsResultTransformer
argument_list|(
name|rb
argument_list|)
decl_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"secondPhase"
argument_list|,
name|commandHandler
operator|.
name|processResult
argument_list|(
name|result
argument_list|,
name|serializer
argument_list|)
argument_list|)
expr_stmt|;
name|rb
operator|.
name|setResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|maxDocsPercentageToCache
init|=
name|params
operator|.
name|getInt
argument_list|(
name|GroupParams
operator|.
name|GROUP_CACHE_PERCENTAGE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|boolean
name|cacheSecondPassSearch
init|=
name|maxDocsPercentageToCache
operator|>=
literal|1
operator|&&
name|maxDocsPercentageToCache
operator|<=
literal|100
decl_stmt|;
name|Grouping
operator|.
name|TotalCount
name|defaultTotalCount
init|=
name|groupingSpec
operator|.
name|isIncludeGroupCount
argument_list|()
condition|?
name|Grouping
operator|.
name|TotalCount
operator|.
name|grouped
else|:
name|Grouping
operator|.
name|TotalCount
operator|.
name|ungrouped
decl_stmt|;
name|int
name|limitDefault
init|=
name|cmd
operator|.
name|getLen
argument_list|()
decl_stmt|;
comment|// this is normally from "rows"
name|Grouping
name|grouping
init|=
operator|new
name|Grouping
argument_list|(
name|searcher
argument_list|,
name|result
argument_list|,
name|cmd
argument_list|,
name|cacheSecondPassSearch
argument_list|,
name|maxDocsPercentageToCache
argument_list|,
name|groupingSpec
operator|.
name|isMain
argument_list|()
argument_list|)
decl_stmt|;
name|grouping
operator|.
name|setSort
argument_list|(
name|groupingSpec
operator|.
name|getGroupSort
argument_list|()
argument_list|)
operator|.
name|setGroupSort
argument_list|(
name|groupingSpec
operator|.
name|getSortWithinGroup
argument_list|()
argument_list|)
operator|.
name|setDefaultFormat
argument_list|(
name|groupingSpec
operator|.
name|getResponseFormat
argument_list|()
argument_list|)
operator|.
name|setLimitDefault
argument_list|(
name|limitDefault
argument_list|)
operator|.
name|setDefaultTotalCount
argument_list|(
name|defaultTotalCount
argument_list|)
operator|.
name|setDocsPerGroupDefault
argument_list|(
name|groupingSpec
operator|.
name|getGroupLimit
argument_list|()
argument_list|)
operator|.
name|setGroupOffsetDefault
argument_list|(
name|groupingSpec
operator|.
name|getGroupOffset
argument_list|()
argument_list|)
operator|.
name|setGetGroupedDocSet
argument_list|(
name|groupingSpec
operator|.
name|isTruncateGroups
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupingSpec
operator|.
name|getFields
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|field
range|:
name|groupingSpec
operator|.
name|getFields
argument_list|()
control|)
block|{
name|grouping
operator|.
name|addFieldCommand
argument_list|(
name|field
argument_list|,
name|rb
operator|.
name|req
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|groupingSpec
operator|.
name|getFunctions
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|groupByStr
range|:
name|groupingSpec
operator|.
name|getFunctions
argument_list|()
control|)
block|{
name|grouping
operator|.
name|addFunctionCommand
argument_list|(
name|groupByStr
argument_list|,
name|rb
operator|.
name|req
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|groupingSpec
operator|.
name|getQueries
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|groupByStr
range|:
name|groupingSpec
operator|.
name|getQueries
argument_list|()
control|)
block|{
name|grouping
operator|.
name|addQueryCommand
argument_list|(
name|groupByStr
argument_list|,
name|rb
operator|.
name|req
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rb
operator|.
name|doHighlights
operator|||
name|rb
operator|.
name|isDebug
argument_list|()
operator|||
name|params
operator|.
name|getBool
argument_list|(
name|MoreLikeThisParams
operator|.
name|MLT
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// we need a single list of the returned docs
name|cmd
operator|.
name|setFlags
argument_list|(
name|SolrIndexSearcher
operator|.
name|GET_DOCLIST
argument_list|)
expr_stmt|;
block|}
name|grouping
operator|.
name|execute
argument_list|()
expr_stmt|;
if|if
condition|(
name|grouping
operator|.
name|isSignalCacheWarning
argument_list|()
condition|)
block|{
name|rsp
operator|.
name|add
argument_list|(
literal|"cacheWarning"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Cache limit of %d percent relative to maxdoc has exceeded. Please increase cache size or disable caching."
argument_list|,
name|maxDocsPercentageToCache
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rb
operator|.
name|setResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|grouping
operator|.
name|mainResult
operator|!=
literal|null
condition|)
block|{
name|ResultContext
name|ctx
init|=
operator|new
name|ResultContext
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|docs
operator|=
name|grouping
operator|.
name|mainResult
expr_stmt|;
name|ctx
operator|.
name|query
operator|=
literal|null
expr_stmt|;
comment|// TODO? add the query?
name|rsp
operator|.
name|add
argument_list|(
literal|"response"
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|getToLog
argument_list|()
operator|.
name|add
argument_list|(
literal|"hits"
argument_list|,
name|grouping
operator|.
name|mainResult
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|grouping
operator|.
name|getCommands
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Can never be empty since grouping.execute() checks for this.
name|rsp
operator|.
name|add
argument_list|(
literal|"grouped"
argument_list|,
name|result
operator|.
name|groupedResults
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|getToLog
argument_list|()
operator|.
name|add
argument_list|(
literal|"hits"
argument_list|,
name|grouping
operator|.
name|getCommands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMatches
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// normal search result
name|searcher
operator|.
name|search
argument_list|(
name|result
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
name|rb
operator|.
name|setResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|ResultContext
name|ctx
init|=
operator|new
name|ResultContext
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|docs
operator|=
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docList
expr_stmt|;
name|ctx
operator|.
name|query
operator|=
name|rb
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"response"
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|getToLog
argument_list|()
operator|.
name|add
argument_list|(
literal|"hits"
argument_list|,
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docList
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
name|doFieldSortValues
argument_list|(
name|rb
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
name|doPrefetch
argument_list|(
name|rb
argument_list|)
expr_stmt|;
block|}
DECL|method|doFieldSortValues
specifier|protected
name|void
name|doFieldSortValues
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|SolrIndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrQueryRequest
name|req
init|=
name|rb
operator|.
name|req
decl_stmt|;
name|SolrQueryResponse
name|rsp
init|=
name|rb
operator|.
name|rsp
decl_stmt|;
specifier|final
name|CharsRef
name|spare
init|=
operator|new
name|CharsRef
argument_list|()
decl_stmt|;
comment|// The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't
comment|// currently have an option to return sort field values.  Because of this, we
comment|// take the documents given and re-derive the sort values.
name|boolean
name|fsv
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|ResponseBuilder
operator|.
name|FIELD_SORT_VALUES
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsv
condition|)
block|{
name|Sort
name|sort
init|=
name|searcher
operator|.
name|weightSort
argument_list|(
name|rb
operator|.
name|getSortSpec
argument_list|()
operator|.
name|getSort
argument_list|()
argument_list|)
decl_stmt|;
name|SortField
index|[]
name|sortFields
init|=
name|sort
operator|==
literal|null
condition|?
operator|new
name|SortField
index|[]
block|{
name|SortField
operator|.
name|FIELD_SCORE
block|}
else|:
name|sort
operator|.
name|getSort
argument_list|()
decl_stmt|;
name|NamedList
argument_list|<
name|Object
index|[]
argument_list|>
name|sortVals
init|=
operator|new
name|NamedList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
comment|// order is important for the sort fields
name|Field
name|field
init|=
operator|new
name|StringField
argument_list|(
literal|"dummy"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
comment|// a dummy Field
name|IndexReaderContext
name|topReaderContext
init|=
name|searcher
operator|.
name|getTopReaderContext
argument_list|()
decl_stmt|;
name|AtomicReaderContext
index|[]
name|leaves
init|=
name|topReaderContext
operator|.
name|leaves
argument_list|()
decl_stmt|;
name|AtomicReaderContext
name|currentLeaf
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|leaves
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// if there is a single segment, use that subReader and avoid looking up each time
name|currentLeaf
operator|=
name|leaves
index|[
literal|0
index|]
expr_stmt|;
name|leaves
operator|=
literal|null
expr_stmt|;
block|}
name|DocList
name|docList
init|=
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docList
decl_stmt|;
comment|// sort ids from lowest to highest so we can access them in order
name|int
name|nDocs
init|=
name|docList
operator|.
name|size
argument_list|()
decl_stmt|;
name|long
index|[]
name|sortedIds
init|=
operator|new
name|long
index|[
name|nDocs
index|]
decl_stmt|;
name|DocIterator
name|it
init|=
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docList
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDocs
condition|;
name|i
operator|++
control|)
block|{
name|sortedIds
index|[
name|i
index|]
operator|=
operator|(
operator|(
operator|(
name|long
operator|)
name|it
operator|.
name|nextDoc
argument_list|()
operator|)
operator|<<
literal|32
operator|)
operator||
name|i
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|sortedIds
argument_list|)
expr_stmt|;
for|for
control|(
name|SortField
name|sortField
range|:
name|sortFields
control|)
block|{
name|SortField
operator|.
name|Type
name|type
init|=
name|sortField
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|SortField
operator|.
name|Type
operator|.
name|SCORE
operator|||
name|type
operator|==
name|SortField
operator|.
name|Type
operator|.
name|DOC
condition|)
continue|continue;
name|FieldComparator
name|comparator
init|=
literal|null
decl_stmt|;
name|String
name|fieldname
init|=
name|sortField
operator|.
name|getField
argument_list|()
decl_stmt|;
name|FieldType
name|ft
init|=
name|fieldname
operator|==
literal|null
condition|?
literal|null
else|:
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getFieldTypeNoEx
argument_list|(
name|fieldname
argument_list|)
decl_stmt|;
name|Object
index|[]
name|vals
init|=
operator|new
name|Object
index|[
name|nDocs
index|]
decl_stmt|;
name|int
name|lastIdx
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|idAndPos
range|:
name|sortedIds
control|)
block|{
name|int
name|doc
init|=
call|(
name|int
call|)
argument_list|(
name|idAndPos
operator|>>>
literal|32
argument_list|)
decl_stmt|;
name|int
name|position
init|=
operator|(
name|int
operator|)
name|idAndPos
decl_stmt|;
if|if
condition|(
name|leaves
operator|!=
literal|null
condition|)
block|{
name|idx
operator|=
name|ReaderUtil
operator|.
name|subIndex
argument_list|(
name|doc
argument_list|,
name|leaves
argument_list|)
expr_stmt|;
name|currentLeaf
operator|=
name|leaves
index|[
name|idx
index|]
expr_stmt|;
if|if
condition|(
name|idx
operator|!=
name|lastIdx
condition|)
block|{
comment|// we switched segments.  invalidate comparator.
name|comparator
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|comparator
operator|==
literal|null
condition|)
block|{
name|comparator
operator|=
name|sortField
operator|.
name|getComparator
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|comparator
operator|=
name|comparator
operator|.
name|setNextReader
argument_list|(
name|currentLeaf
argument_list|)
expr_stmt|;
block|}
name|doc
operator|-=
name|currentLeaf
operator|.
name|docBase
expr_stmt|;
comment|// adjust for what segment this is in
name|comparator
operator|.
name|copy
argument_list|(
literal|0
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|Object
name|val
init|=
name|comparator
operator|.
name|value
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Sortable float, double, int, long types all just use a string
comment|// comparator. For these, we need to put the type into a readable
comment|// format.  One reason for this is that XML can't represent all
comment|// string values (or even all unicode code points).
comment|// indexedToReadable() should be a no-op and should
comment|// thus be harmless anyway (for all current ways anyway)
if|if
condition|(
name|val
operator|instanceof
name|String
condition|)
block|{
name|field
operator|.
name|setStringValue
argument_list|(
operator|(
name|String
operator|)
name|val
argument_list|)
expr_stmt|;
name|val
operator|=
name|ft
operator|.
name|toObject
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
comment|// Must do the same conversion when sorting by a
comment|// String field in Lucene, which returns the terms
comment|// data as BytesRef:
if|if
condition|(
name|val
operator|instanceof
name|BytesRef
condition|)
block|{
name|UnicodeUtil
operator|.
name|UTF8toUTF16
argument_list|(
operator|(
name|BytesRef
operator|)
name|val
argument_list|,
name|spare
argument_list|)
expr_stmt|;
name|field
operator|.
name|setStringValue
argument_list|(
name|spare
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|val
operator|=
name|ft
operator|.
name|toObject
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
name|vals
index|[
name|position
index|]
operator|=
name|val
expr_stmt|;
block|}
name|sortVals
operator|.
name|add
argument_list|(
name|fieldname
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
name|rsp
operator|.
name|add
argument_list|(
literal|"sort_values"
argument_list|,
name|sortVals
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doPrefetch
specifier|protected
name|void
name|doPrefetch
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrQueryRequest
name|req
init|=
name|rb
operator|.
name|req
decl_stmt|;
name|SolrQueryResponse
name|rsp
init|=
name|rb
operator|.
name|rsp
decl_stmt|;
comment|//pre-fetch returned documents
if|if
condition|(
operator|!
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|ShardParams
operator|.
name|IS_SHARD
argument_list|,
literal|false
argument_list|)
operator|&&
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docList
operator|!=
literal|null
operator|&&
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docList
operator|.
name|size
argument_list|()
operator|<=
literal|50
condition|)
block|{
name|SolrPluginUtils
operator|.
name|optimizePreFetchDocs
argument_list|(
name|rb
argument_list|,
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docList
argument_list|,
name|rb
operator|.
name|getQuery
argument_list|()
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|distributedProcess
specifier|public
name|int
name|distributedProcess
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rb
operator|.
name|grouping
argument_list|()
condition|)
block|{
return|return
name|groupedDistributedProcess
argument_list|(
name|rb
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|regularDistributedProcess
argument_list|(
name|rb
argument_list|)
return|;
block|}
block|}
DECL|method|groupedDistributedProcess
specifier|private
name|int
name|groupedDistributedProcess
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
name|int
name|nextStage
init|=
name|ResponseBuilder
operator|.
name|STAGE_DONE
decl_stmt|;
name|ShardRequestFactory
name|shardRequestFactory
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rb
operator|.
name|stage
operator|<
name|ResponseBuilder
operator|.
name|STAGE_PARSE_QUERY
condition|)
block|{
name|nextStage
operator|=
name|ResponseBuilder
operator|.
name|STAGE_PARSE_QUERY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rb
operator|.
name|stage
operator|==
name|ResponseBuilder
operator|.
name|STAGE_PARSE_QUERY
condition|)
block|{
name|createDistributedIdf
argument_list|(
name|rb
argument_list|)
expr_stmt|;
name|nextStage
operator|=
name|ResponseBuilder
operator|.
name|STAGE_TOP_GROUPS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rb
operator|.
name|stage
operator|<
name|ResponseBuilder
operator|.
name|STAGE_TOP_GROUPS
condition|)
block|{
name|nextStage
operator|=
name|ResponseBuilder
operator|.
name|STAGE_TOP_GROUPS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rb
operator|.
name|stage
operator|==
name|ResponseBuilder
operator|.
name|STAGE_TOP_GROUPS
condition|)
block|{
name|shardRequestFactory
operator|=
operator|new
name|SearchGroupsRequestFactory
argument_list|()
expr_stmt|;
name|nextStage
operator|=
name|ResponseBuilder
operator|.
name|STAGE_EXECUTE_QUERY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rb
operator|.
name|stage
operator|<
name|ResponseBuilder
operator|.
name|STAGE_EXECUTE_QUERY
condition|)
block|{
name|nextStage
operator|=
name|ResponseBuilder
operator|.
name|STAGE_EXECUTE_QUERY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rb
operator|.
name|stage
operator|==
name|ResponseBuilder
operator|.
name|STAGE_EXECUTE_QUERY
condition|)
block|{
name|shardRequestFactory
operator|=
operator|new
name|TopGroupsShardRequestFactory
argument_list|()
expr_stmt|;
name|nextStage
operator|=
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rb
operator|.
name|stage
operator|<
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
condition|)
block|{
name|nextStage
operator|=
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rb
operator|.
name|stage
operator|==
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
condition|)
block|{
name|shardRequestFactory
operator|=
operator|new
name|StoredFieldsShardRequestFactory
argument_list|()
expr_stmt|;
name|nextStage
operator|=
name|ResponseBuilder
operator|.
name|STAGE_DONE
expr_stmt|;
block|}
if|if
condition|(
name|shardRequestFactory
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ShardRequest
name|shardRequest
range|:
name|shardRequestFactory
operator|.
name|constructRequest
argument_list|(
name|rb
argument_list|)
control|)
block|{
name|rb
operator|.
name|addRequest
argument_list|(
name|this
argument_list|,
name|shardRequest
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nextStage
return|;
block|}
DECL|method|regularDistributedProcess
specifier|private
name|int
name|regularDistributedProcess
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
if|if
condition|(
name|rb
operator|.
name|stage
operator|<
name|ResponseBuilder
operator|.
name|STAGE_PARSE_QUERY
condition|)
return|return
name|ResponseBuilder
operator|.
name|STAGE_PARSE_QUERY
return|;
if|if
condition|(
name|rb
operator|.
name|stage
operator|==
name|ResponseBuilder
operator|.
name|STAGE_PARSE_QUERY
condition|)
block|{
name|createDistributedIdf
argument_list|(
name|rb
argument_list|)
expr_stmt|;
return|return
name|ResponseBuilder
operator|.
name|STAGE_EXECUTE_QUERY
return|;
block|}
if|if
condition|(
name|rb
operator|.
name|stage
operator|<
name|ResponseBuilder
operator|.
name|STAGE_EXECUTE_QUERY
condition|)
return|return
name|ResponseBuilder
operator|.
name|STAGE_EXECUTE_QUERY
return|;
if|if
condition|(
name|rb
operator|.
name|stage
operator|==
name|ResponseBuilder
operator|.
name|STAGE_EXECUTE_QUERY
condition|)
block|{
name|createMainQuery
argument_list|(
name|rb
argument_list|)
expr_stmt|;
return|return
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
return|;
block|}
if|if
condition|(
name|rb
operator|.
name|stage
operator|<
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
condition|)
return|return
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
return|;
if|if
condition|(
name|rb
operator|.
name|stage
operator|==
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
condition|)
block|{
name|createRetrieveDocs
argument_list|(
name|rb
argument_list|)
expr_stmt|;
return|return
name|ResponseBuilder
operator|.
name|STAGE_DONE
return|;
block|}
return|return
name|ResponseBuilder
operator|.
name|STAGE_DONE
return|;
block|}
annotation|@
name|Override
DECL|method|handleResponses
specifier|public
name|void
name|handleResponses
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
if|if
condition|(
name|rb
operator|.
name|grouping
argument_list|()
condition|)
block|{
name|handleGroupedResponses
argument_list|(
name|rb
argument_list|,
name|sreq
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handleRegularResponses
argument_list|(
name|rb
argument_list|,
name|sreq
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleGroupedResponses
specifier|private
name|void
name|handleGroupedResponses
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
name|ShardResponseProcessor
name|responseProcessor
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_GET_TOP_GROUPS
operator|)
operator|!=
literal|0
condition|)
block|{
name|responseProcessor
operator|=
operator|new
name|SearchGroupShardResponseProcessor
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_GET_TOP_IDS
operator|)
operator|!=
literal|0
condition|)
block|{
name|responseProcessor
operator|=
operator|new
name|TopGroupsShardResponseProcessor
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_GET_FIELDS
operator|)
operator|!=
literal|0
condition|)
block|{
name|responseProcessor
operator|=
operator|new
name|StoredFieldsShardResponseProcessor
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|responseProcessor
operator|!=
literal|null
condition|)
block|{
name|responseProcessor
operator|.
name|process
argument_list|(
name|rb
argument_list|,
name|sreq
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleRegularResponses
specifier|private
name|void
name|handleRegularResponses
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_GET_TOP_IDS
operator|)
operator|!=
literal|0
condition|)
block|{
name|mergeIds
argument_list|(
name|rb
argument_list|,
name|sreq
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_GET_FIELDS
operator|)
operator|!=
literal|0
condition|)
block|{
name|returnFields
argument_list|(
name|rb
argument_list|,
name|sreq
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|finishStage
specifier|public
name|void
name|finishStage
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
if|if
condition|(
name|rb
operator|.
name|stage
operator|!=
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|rb
operator|.
name|grouping
argument_list|()
condition|)
block|{
name|groupedFinishStage
argument_list|(
name|rb
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|regularFinishStage
argument_list|(
name|rb
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|MAIN_END_RESULT_TRANSFORMER
specifier|private
specifier|static
specifier|final
name|EndResultTransformer
name|MAIN_END_RESULT_TRANSFORMER
init|=
operator|new
name|MainEndResultTransformer
argument_list|()
decl_stmt|;
DECL|field|SIMPLE_END_RESULT_TRANSFORMER
specifier|private
specifier|static
specifier|final
name|EndResultTransformer
name|SIMPLE_END_RESULT_TRANSFORMER
init|=
operator|new
name|SimpleEndResultTransformer
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|groupedFinishStage
specifier|private
name|void
name|groupedFinishStage
parameter_list|(
specifier|final
name|ResponseBuilder
name|rb
parameter_list|)
block|{
comment|// To have same response as non-distributed request.
name|GroupingSpecification
name|groupSpec
init|=
name|rb
operator|.
name|getGroupingSpec
argument_list|()
decl_stmt|;
if|if
condition|(
name|rb
operator|.
name|mergedTopGroups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|field
range|:
name|groupSpec
operator|.
name|getFields
argument_list|()
control|)
block|{
name|rb
operator|.
name|mergedTopGroups
operator|.
name|put
argument_list|(
name|field
argument_list|,
operator|new
name|TopGroups
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|GroupDocs
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rb
operator|.
name|resultIds
operator|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|ShardDoc
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|EndResultTransformer
operator|.
name|SolrDocumentSource
name|solrDocumentSource
init|=
operator|new
name|EndResultTransformer
operator|.
name|SolrDocumentSource
argument_list|()
block|{
specifier|public
name|SolrDocument
name|retrieve
parameter_list|(
name|ScoreDoc
name|doc
parameter_list|)
block|{
name|ShardDoc
name|solrDoc
init|=
operator|(
name|ShardDoc
operator|)
name|doc
decl_stmt|;
return|return
name|rb
operator|.
name|retrievedDocuments
operator|.
name|get
argument_list|(
name|solrDoc
operator|.
name|id
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|EndResultTransformer
name|endResultTransformer
decl_stmt|;
if|if
condition|(
name|groupSpec
operator|.
name|isMain
argument_list|()
condition|)
block|{
name|endResultTransformer
operator|=
name|MAIN_END_RESULT_TRANSFORMER
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Grouping
operator|.
name|Format
operator|.
name|grouped
operator|==
name|groupSpec
operator|.
name|getResponseFormat
argument_list|()
condition|)
block|{
name|endResultTransformer
operator|=
operator|new
name|GroupedEndResultTransformer
argument_list|(
name|rb
operator|.
name|req
operator|.
name|getSearcher
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Grouping
operator|.
name|Format
operator|.
name|simple
operator|==
name|groupSpec
operator|.
name|getResponseFormat
argument_list|()
operator|&&
operator|!
name|groupSpec
operator|.
name|isMain
argument_list|()
condition|)
block|{
name|endResultTransformer
operator|=
name|SIMPLE_END_RESULT_TRANSFORMER
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|combinedMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|combinedMap
operator|.
name|putAll
argument_list|(
name|rb
operator|.
name|mergedTopGroups
argument_list|)
expr_stmt|;
name|combinedMap
operator|.
name|putAll
argument_list|(
name|rb
operator|.
name|mergedQueryCommandResults
argument_list|)
expr_stmt|;
name|endResultTransformer
operator|.
name|transform
argument_list|(
name|combinedMap
argument_list|,
name|rb
argument_list|,
name|solrDocumentSource
argument_list|)
expr_stmt|;
block|}
DECL|method|regularFinishStage
specifier|private
name|void
name|regularFinishStage
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
comment|// We may not have been able to retrieve all the docs due to an
comment|// index change.  Remove any null documents.
for|for
control|(
name|Iterator
argument_list|<
name|SolrDocument
argument_list|>
name|iter
init|=
name|rb
operator|.
name|_responseDocs
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|iter
operator|.
name|next
argument_list|()
operator|==
literal|null
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|rb
operator|.
name|_responseDocs
operator|.
name|setNumFound
argument_list|(
name|rb
operator|.
name|_responseDocs
operator|.
name|getNumFound
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"response"
argument_list|,
name|rb
operator|.
name|_responseDocs
argument_list|)
expr_stmt|;
block|}
DECL|method|createDistributedIdf
specifier|private
name|void
name|createDistributedIdf
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
comment|// TODO
block|}
DECL|method|createMainQuery
specifier|private
name|void
name|createMainQuery
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|sreq
operator|.
name|purpose
operator|=
name|ShardRequest
operator|.
name|PURPOSE_GET_TOP_IDS
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: base on current params or original params?
comment|// don't pass through any shards param
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|ShardParams
operator|.
name|SHARDS
argument_list|)
expr_stmt|;
comment|// set the start (offset) to 0 for each shard request so we can properly merge
comment|// results from the start.
if|if
condition|(
name|rb
operator|.
name|shards_start
operator|>
operator|-
literal|1
condition|)
block|{
comment|// if the client set shards.start set this explicitly
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|START
argument_list|,
name|rb
operator|.
name|shards_start
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|START
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: should we even use the SortSpec?  That's obtained from the QParser, and
comment|// perhaps we shouldn't attempt to parse the query at this level?
comment|// Alternate Idea: instead of specifying all these things at the upper level,
comment|// we could just specify that this is a shard request.
if|if
condition|(
name|rb
operator|.
name|shards_rows
operator|>
operator|-
literal|1
condition|)
block|{
comment|// if the client set shards.rows set this explicity
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|ROWS
argument_list|,
name|rb
operator|.
name|shards_rows
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|ROWS
argument_list|,
name|rb
operator|.
name|getSortSpec
argument_list|()
operator|.
name|getOffset
argument_list|()
operator|+
name|rb
operator|.
name|getSortSpec
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// in this first phase, request only the unique key field
comment|// and any fields needed for merging.
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|ResponseBuilder
operator|.
name|FIELD_SORT_VALUES
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|rb
operator|.
name|getFieldFlags
argument_list|()
operator|&
name|SolrIndexSearcher
operator|.
name|GET_SCORES
operator|)
operator|!=
literal|0
operator|||
name|rb
operator|.
name|getSortSpec
argument_list|()
operator|.
name|includesScore
argument_list|()
condition|)
block|{
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|,
name|rb
operator|.
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|",score"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|,
name|rb
operator|.
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rb
operator|.
name|addRequest
argument_list|(
name|this
argument_list|,
name|sreq
argument_list|)
expr_stmt|;
block|}
DECL|method|mergeIds
specifier|private
name|void
name|mergeIds
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
name|SortSpec
name|ss
init|=
name|rb
operator|.
name|getSortSpec
argument_list|()
decl_stmt|;
name|Sort
name|sort
init|=
name|ss
operator|.
name|getSort
argument_list|()
decl_stmt|;
name|SortField
index|[]
name|sortFields
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sort
operator|!=
literal|null
condition|)
name|sortFields
operator|=
name|sort
operator|.
name|getSort
argument_list|()
expr_stmt|;
else|else
block|{
name|sortFields
operator|=
operator|new
name|SortField
index|[]
block|{
name|SortField
operator|.
name|FIELD_SCORE
block|}
expr_stmt|;
block|}
name|SchemaField
name|uniqueKeyField
init|=
name|rb
operator|.
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
decl_stmt|;
comment|// id to shard mapping, to eliminate any accidental dups
name|HashMap
argument_list|<
name|Object
argument_list|,
name|String
argument_list|>
name|uniqueDoc
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Merge the docs via a priority queue so we don't have to sort *all* of the
comment|// documents... we only need to order the top (rows+start)
name|ShardFieldSortedHitQueue
name|queue
decl_stmt|;
name|queue
operator|=
operator|new
name|ShardFieldSortedHitQueue
argument_list|(
name|sortFields
argument_list|,
name|ss
operator|.
name|getOffset
argument_list|()
operator|+
name|ss
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|shardInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|ShardParams
operator|.
name|SHARDS_INFO
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|shardInfo
operator|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|add
argument_list|(
name|ShardParams
operator|.
name|SHARDS_INFO
argument_list|,
name|shardInfo
argument_list|)
expr_stmt|;
block|}
name|long
name|numFound
init|=
literal|0
decl_stmt|;
name|Float
name|maxScore
init|=
literal|null
decl_stmt|;
name|boolean
name|partialResults
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ShardResponse
name|srsp
range|:
name|sreq
operator|.
name|responses
control|)
block|{
name|SolrDocumentList
name|docs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|shardInfo
operator|!=
literal|null
condition|)
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|nl
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|srsp
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Throwable
name|t
init|=
name|srsp
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|SolrServerException
condition|)
block|{
name|t
operator|=
operator|(
operator|(
name|SolrServerException
operator|)
name|t
operator|)
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
name|nl
operator|.
name|add
argument_list|(
literal|"error"
argument_list|,
name|t
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|StringWriter
name|trace
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|trace
argument_list|)
argument_list|)
expr_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"trace"
argument_list|,
name|trace
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docs
operator|=
operator|(
name|SolrDocumentList
operator|)
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
expr_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"numFound"
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"maxScore"
argument_list|,
name|docs
operator|.
name|getMaxScore
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|nl
operator|.
name|add
argument_list|(
literal|"time"
argument_list|,
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getElapsedTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|shardInfo
operator|.
name|add
argument_list|(
name|srsp
operator|.
name|getShard
argument_list|()
argument_list|,
name|nl
argument_list|)
expr_stmt|;
block|}
comment|// now that we've added the shard info, let's only proceed if we have no error.
if|if
condition|(
name|srsp
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|docs
operator|==
literal|null
condition|)
block|{
comment|// could have been initialized in the shards info block above
name|docs
operator|=
operator|(
name|SolrDocumentList
operator|)
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
expr_stmt|;
block|}
name|NamedList
argument_list|<
name|?
argument_list|>
name|responseHeader
init|=
operator|(
name|NamedList
argument_list|<
name|?
argument_list|>
operator|)
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"responseHeader"
argument_list|)
decl_stmt|;
if|if
condition|(
name|responseHeader
operator|!=
literal|null
operator|&&
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|responseHeader
operator|.
name|get
argument_list|(
literal|"partialResults"
argument_list|)
argument_list|)
condition|)
block|{
name|partialResults
operator|=
literal|true
expr_stmt|;
block|}
comment|// calculate global maxScore and numDocsFound
if|if
condition|(
name|docs
operator|.
name|getMaxScore
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|maxScore
operator|=
name|maxScore
operator|==
literal|null
condition|?
name|docs
operator|.
name|getMaxScore
argument_list|()
else|:
name|Math
operator|.
name|max
argument_list|(
name|maxScore
argument_list|,
name|docs
operator|.
name|getMaxScore
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|numFound
operator|+=
name|docs
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
name|NamedList
name|sortFieldValues
init|=
call|(
name|NamedList
call|)
argument_list|(
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"sort_values"
argument_list|)
argument_list|)
decl_stmt|;
comment|// go through every doc in this response, construct a ShardDoc, and
comment|// put it in the priority queue so it can be ordered.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SolrDocument
name|doc
init|=
name|docs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|id
init|=
name|doc
operator|.
name|getFieldValue
argument_list|(
name|uniqueKeyField
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|prevShard
init|=
name|uniqueDoc
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|srsp
operator|.
name|getShard
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevShard
operator|!=
literal|null
condition|)
block|{
comment|// duplicate detected
name|numFound
operator|--
expr_stmt|;
comment|// For now, just always use the first encountered since we can't currently
comment|// remove the previous one added to the priority queue.  If we switched
comment|// to the Java5 PriorityQueue, this would be easier.
continue|continue;
comment|// make which duplicate is used deterministic based on shard
comment|// if (prevShard.compareTo(srsp.shard)>= 0) {
comment|//  TODO: remove previous from priority queue
comment|//  continue;
comment|// }
block|}
name|ShardDoc
name|shardDoc
init|=
operator|new
name|ShardDoc
argument_list|()
decl_stmt|;
name|shardDoc
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|shardDoc
operator|.
name|shard
operator|=
name|srsp
operator|.
name|getShard
argument_list|()
expr_stmt|;
name|shardDoc
operator|.
name|orderInShard
operator|=
name|i
expr_stmt|;
name|Object
name|scoreObj
init|=
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"score"
argument_list|)
decl_stmt|;
if|if
condition|(
name|scoreObj
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|scoreObj
operator|instanceof
name|String
condition|)
block|{
name|shardDoc
operator|.
name|score
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
operator|(
name|String
operator|)
name|scoreObj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shardDoc
operator|.
name|score
operator|=
operator|(
name|Float
operator|)
name|scoreObj
expr_stmt|;
block|}
block|}
name|shardDoc
operator|.
name|sortFieldValues
operator|=
name|sortFieldValues
expr_stmt|;
name|queue
operator|.
name|insertWithOverflow
argument_list|(
name|shardDoc
argument_list|)
expr_stmt|;
block|}
comment|// end for-each-doc-in-response
block|}
comment|// end for-each-response
comment|// The queue now has 0 -> queuesize docs, where queuesize<= start + rows
comment|// So we want to pop the last documents off the queue to get
comment|// the docs offset -> queuesize
name|int
name|resultSize
init|=
name|queue
operator|.
name|size
argument_list|()
operator|-
name|ss
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|resultSize
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|resultSize
argument_list|)
expr_stmt|;
comment|// there may not be any docs in range
name|Map
argument_list|<
name|Object
argument_list|,
name|ShardDoc
argument_list|>
name|resultIds
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|ShardDoc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|resultSize
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|ShardDoc
name|shardDoc
init|=
name|queue
operator|.
name|pop
argument_list|()
decl_stmt|;
name|shardDoc
operator|.
name|positionInResponse
operator|=
name|i
expr_stmt|;
comment|// Need the toString() for correlation with other lists that must
comment|// be strings (like keys in highlighting, explain, etc)
name|resultIds
operator|.
name|put
argument_list|(
name|shardDoc
operator|.
name|id
operator|.
name|toString
argument_list|()
argument_list|,
name|shardDoc
argument_list|)
expr_stmt|;
block|}
name|SolrDocumentList
name|responseDocs
init|=
operator|new
name|SolrDocumentList
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxScore
operator|!=
literal|null
condition|)
name|responseDocs
operator|.
name|setMaxScore
argument_list|(
name|maxScore
argument_list|)
expr_stmt|;
name|responseDocs
operator|.
name|setNumFound
argument_list|(
name|numFound
argument_list|)
expr_stmt|;
name|responseDocs
operator|.
name|setStart
argument_list|(
name|ss
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
comment|// size appropriately
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resultSize
condition|;
name|i
operator|++
control|)
name|responseDocs
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// save these results in a private area so we can access them
comment|// again when retrieving stored fields.
comment|// TODO: use ResponseBuilder (w/ comments) or the request context?
name|rb
operator|.
name|resultIds
operator|=
name|resultIds
expr_stmt|;
name|rb
operator|.
name|_responseDocs
operator|=
name|responseDocs
expr_stmt|;
if|if
condition|(
name|partialResults
condition|)
block|{
name|rb
operator|.
name|rsp
operator|.
name|getResponseHeader
argument_list|()
operator|.
name|add
argument_list|(
literal|"partialResults"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createRetrieveDocs
specifier|private
name|void
name|createRetrieveDocs
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
comment|// TODO: in a system with nTiers> 2, we could be passed "ids" here
comment|// unless those requests always go to the final destination shard
comment|// for each shard, collect the documents for that shard.
name|HashMap
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|ShardDoc
argument_list|>
argument_list|>
name|shardMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|ShardDoc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardDoc
name|sdoc
range|:
name|rb
operator|.
name|resultIds
operator|.
name|values
argument_list|()
control|)
block|{
name|Collection
argument_list|<
name|ShardDoc
argument_list|>
name|shardDocs
init|=
name|shardMap
operator|.
name|get
argument_list|(
name|sdoc
operator|.
name|shard
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardDocs
operator|==
literal|null
condition|)
block|{
name|shardDocs
operator|=
operator|new
name|ArrayList
argument_list|<
name|ShardDoc
argument_list|>
argument_list|()
expr_stmt|;
name|shardMap
operator|.
name|put
argument_list|(
name|sdoc
operator|.
name|shard
argument_list|,
name|shardDocs
argument_list|)
expr_stmt|;
block|}
name|shardDocs
operator|.
name|add
argument_list|(
name|sdoc
argument_list|)
expr_stmt|;
block|}
name|SchemaField
name|uniqueField
init|=
name|rb
operator|.
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
decl_stmt|;
comment|// Now create a request for each shard to retrieve the stored fields
for|for
control|(
name|Collection
argument_list|<
name|ShardDoc
argument_list|>
name|shardDocs
range|:
name|shardMap
operator|.
name|values
argument_list|()
control|)
block|{
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|sreq
operator|.
name|purpose
operator|=
name|ShardRequest
operator|.
name|PURPOSE_GET_FIELDS
expr_stmt|;
name|sreq
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|shardDocs
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|shard
block|}
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
comment|// add original params
name|sreq
operator|.
name|params
operator|.
name|add
argument_list|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
comment|// no need for a sort, we already have order
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|CommonParams
operator|.
name|SORT
argument_list|)
expr_stmt|;
comment|// we already have the field sort values
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|ResponseBuilder
operator|.
name|FIELD_SORT_VALUES
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rb
operator|.
name|rsp
operator|.
name|getReturnFields
argument_list|()
operator|.
name|wantsField
argument_list|(
name|uniqueField
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|sreq
operator|.
name|params
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|,
name|uniqueField
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|shardDocs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ShardDoc
name|shardDoc
range|:
name|shardDocs
control|)
block|{
comment|// TODO: depending on the type, we may need more tha a simple toString()?
name|ids
operator|.
name|add
argument_list|(
name|shardDoc
operator|.
name|id
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sreq
operator|.
name|params
operator|.
name|add
argument_list|(
name|ShardParams
operator|.
name|IDS
argument_list|,
name|StrUtils
operator|.
name|join
argument_list|(
name|ids
argument_list|,
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|rb
operator|.
name|addRequest
argument_list|(
name|this
argument_list|,
name|sreq
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|returnFields
specifier|private
name|void
name|returnFields
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
comment|// Keep in mind that this could also be a shard in a multi-tiered system.
comment|// TODO: if a multi-tiered system, it seems like some requests
comment|// could/should bypass middlemen (like retrieving stored fields)
comment|// TODO: merge fsv to if requested
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_GET_FIELDS
operator|)
operator|!=
literal|0
condition|)
block|{
name|boolean
name|returnScores
init|=
operator|(
name|rb
operator|.
name|getFieldFlags
argument_list|()
operator|&
name|SolrIndexSearcher
operator|.
name|GET_SCORES
operator|)
operator|!=
literal|0
decl_stmt|;
assert|assert
operator|(
name|sreq
operator|.
name|responses
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|ShardResponse
name|srsp
init|=
name|sreq
operator|.
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|docs
init|=
operator|(
name|SolrDocumentList
operator|)
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|String
name|keyFieldName
init|=
name|rb
operator|.
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|boolean
name|removeKeyField
init|=
operator|!
name|rb
operator|.
name|rsp
operator|.
name|getReturnFields
argument_list|()
operator|.
name|wantsField
argument_list|(
name|keyFieldName
argument_list|)
decl_stmt|;
for|for
control|(
name|SolrDocument
name|doc
range|:
name|docs
control|)
block|{
name|Object
name|id
init|=
name|doc
operator|.
name|getFieldValue
argument_list|(
name|keyFieldName
argument_list|)
decl_stmt|;
name|ShardDoc
name|sdoc
init|=
name|rb
operator|.
name|resultIds
operator|.
name|get
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sdoc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|returnScores
operator|&&
name|sdoc
operator|.
name|score
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|setField
argument_list|(
literal|"score"
argument_list|,
name|sdoc
operator|.
name|score
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|removeKeyField
condition|)
block|{
name|doc
operator|.
name|removeFields
argument_list|(
name|keyFieldName
argument_list|)
expr_stmt|;
block|}
name|rb
operator|.
name|_responseDocs
operator|.
name|set
argument_list|(
name|sdoc
operator|.
name|positionInResponse
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/////////////////////////////////////////////
comment|///  SolrInfoMBean
comment|////////////////////////////////////////////
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"query"
return|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
literal|"$URL$"
return|;
block|}
annotation|@
name|Override
DECL|method|getDocs
specifier|public
name|URL
index|[]
name|getDocs
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class
end_unit
