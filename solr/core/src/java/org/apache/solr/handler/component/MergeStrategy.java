begin_unit
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements. See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License. You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * The MergeStrategy class defines custom merge logic for distributed searches.  **/
end_comment
begin_interface
DECL|interface|MergeStrategy
specifier|public
interface|interface
name|MergeStrategy
block|{
comment|/**   *  merge defines the merging behaving of results that are collected from the   *  shards during a distributed search.   *   **/
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
function_decl|;
comment|/**   * mergesIds must return true if the merge method merges document ids from the shards.   * If it merges other output from the shards it must return false.   * */
DECL|method|mergesIds
specifier|public
name|boolean
name|mergesIds
parameter_list|()
function_decl|;
comment|/**   * handlesMergeFields must return true if the MergeStrategy   * implements a custom handleMergeFields(ResponseBuilder rb, SolrIndexSearch searcher)   * */
DECL|method|handlesMergeFields
specifier|public
name|boolean
name|handlesMergeFields
parameter_list|()
function_decl|;
comment|/**   *  Implement handleMergeFields(ResponseBuilder rb, SolrIndexSearch searcher) if   *  your merge strategy needs more complex data then the sort fields provide.   * */
DECL|method|handleMergeFields
specifier|public
name|void
name|handleMergeFields
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|SolrIndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**   *  Defines the order that the mergeStrategies are applied. Lower costs are applied first.   * */
DECL|method|getCost
specifier|public
name|int
name|getCost
parameter_list|()
function_decl|;
DECL|field|MERGE_COMP
specifier|public
specifier|static
specifier|final
name|Comparator
name|MERGE_COMP
init|=
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|MergeStrategy
name|m1
init|=
operator|(
name|MergeStrategy
operator|)
name|o1
decl_stmt|;
name|MergeStrategy
name|m2
init|=
operator|(
name|MergeStrategy
operator|)
name|o2
decl_stmt|;
return|return
name|m1
operator|.
name|getCost
argument_list|()
operator|-
name|m2
operator|.
name|getCost
argument_list|()
return|;
block|}
block|}
decl_stmt|;
block|}
end_interface
end_unit
