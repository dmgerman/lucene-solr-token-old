begin_unit
begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|UpdateRequestProcessor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|xslt
operator|.
name|TransformerProvider
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStreamBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|XMLErrorLogger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLInputFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMResult
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * Extends the XMLLoader by applying an XSLT transform before the  * XMLLoader actually loads the XML  *  **/
end_comment
begin_class
DECL|class|XsltXMLLoader
class|class
name|XsltXMLLoader
extends|extends
name|XMLLoader
block|{
DECL|field|TRANSFORM_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|TRANSFORM_PARAM
init|=
literal|"tr"
decl_stmt|;
DECL|field|CONTEXT_TRANSFORMER_KEY
specifier|public
specifier|static
specifier|final
name|String
name|CONTEXT_TRANSFORMER_KEY
init|=
literal|"xsltupdater.transformer"
decl_stmt|;
DECL|field|xsltCacheLifetimeSeconds
specifier|private
specifier|final
name|Integer
name|xsltCacheLifetimeSeconds
decl_stmt|;
DECL|method|XsltXMLLoader
specifier|public
name|XsltXMLLoader
parameter_list|(
name|UpdateRequestProcessor
name|processor
parameter_list|,
name|XMLInputFactory
name|inputFactory
parameter_list|,
name|Integer
name|xsltCacheLifetimeSeconds
parameter_list|)
block|{
name|super
argument_list|(
name|processor
argument_list|,
name|inputFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|xsltCacheLifetimeSeconds
operator|=
name|xsltCacheLifetimeSeconds
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|load
specifier|public
name|void
name|load
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|ContentStream
name|stream
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|DOMResult
name|result
init|=
operator|new
name|DOMResult
argument_list|()
decl_stmt|;
specifier|final
name|Transformer
name|t
init|=
name|getTransformer
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
name|XMLStreamReader
name|parser
init|=
literal|null
decl_stmt|;
comment|// first step: read XML and build DOM using Transformer (this is no overhead, as XSL always produces
comment|// an internal result DOM tree, we just access it directly as input for StAX):
try|try
block|{
name|is
operator|=
name|stream
operator|.
name|getStream
argument_list|()
expr_stmt|;
specifier|final
name|String
name|charset
init|=
name|ContentStreamBase
operator|.
name|getCharsetFromContentType
argument_list|(
name|stream
operator|.
name|getContentType
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|InputSource
name|isrc
init|=
operator|new
name|InputSource
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|isrc
operator|.
name|setEncoding
argument_list|(
name|charset
argument_list|)
expr_stmt|;
specifier|final
name|SAXSource
name|source
init|=
operator|new
name|SAXSource
argument_list|(
name|isrc
argument_list|)
decl_stmt|;
name|t
operator|.
name|transform
argument_list|(
name|source
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|te
operator|.
name|getMessage
argument_list|()
argument_list|,
name|te
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
comment|// second step feed the intermediate DOM tree into StAX parser:
try|try
block|{
name|parser
operator|=
name|inputFactory
operator|.
name|createXMLStreamReader
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|result
operator|.
name|getNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|processUpdate
argument_list|(
name|req
argument_list|,
name|processor
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|parser
operator|!=
literal|null
condition|)
name|parser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Get Transformer from request context, or from TransformerProvider.    *  This allows either getContentType(...) or write(...) to instantiate the Transformer,    *  depending on which one is called first, then the other one reuses the same Transformer    */
DECL|method|getTransformer
specifier|protected
name|Transformer
name|getTransformer
parameter_list|(
name|SolrQueryRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|xslt
init|=
name|request
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|TRANSFORM_PARAM
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|xslt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"'"
operator|+
name|TRANSFORM_PARAM
operator|+
literal|"' request parameter is required to use the XSLTResponseWriter"
argument_list|)
throw|;
block|}
comment|// not the cleanest way to achieve this
name|SolrConfig
name|solrConfig
init|=
name|request
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
decl_stmt|;
comment|// no need to synchronize access to context, right?
comment|// Nothing else happens with it at the same time
specifier|final
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|ctx
init|=
name|request
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|Transformer
name|result
init|=
operator|(
name|Transformer
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|CONTEXT_TRANSFORMER_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|TransformerProvider
operator|.
name|instance
operator|.
name|getTransformer
argument_list|(
name|solrConfig
argument_list|,
name|xslt
argument_list|,
name|xsltCacheLifetimeSeconds
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setErrorListener
argument_list|(
name|XsltUpdateRequestHandler
operator|.
name|xmllog
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|CONTEXT_TRANSFORMER_KEY
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class
end_unit
