begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|ALIAS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|CHECKSUM
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|CMD_DETAILS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|CMD_GET_FILE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|CMD_GET_FILE_LIST
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|CMD_INDEX_VERSION
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|COMMAND
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|COMPRESSION
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|CONF_FILES
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|CONF_FILE_SHORT
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|EXTERNAL
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|FILE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|FILE_STREAM
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|GENERATION
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|INTERNAL
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|MASTER_URL
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|NAME
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|OFFSET
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|SIZE
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Adler32
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Checksum
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|InflaterInputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexCommit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpClientUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|FastInputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CachingDirectoryFactory
operator|.
name|CloseListener
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|DirectoryFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|IndexDeletionPolicyWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|NRTCachingDirectoryFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
operator|.
name|FileInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|CommitUpdateCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DefaultSolrThreadFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|PropertiesInputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|PropertiesOutputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  *<p/> Provides functionality of downloading changed index files as well as config files and a timer for scheduling fetches from the  * master.</p>  *  *  * @since solr 1.4  */
end_comment
begin_class
DECL|class|SnapPuller
specifier|public
class|class
name|SnapPuller
block|{
DECL|field|INDEX_PROPERTIES
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_PROPERTIES
init|=
literal|"index.properties"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SnapPuller
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|masterUrl
specifier|private
specifier|final
name|String
name|masterUrl
decl_stmt|;
DECL|field|replicationHandler
specifier|private
specifier|final
name|ReplicationHandler
name|replicationHandler
decl_stmt|;
DECL|field|pollInterval
specifier|private
specifier|final
name|Integer
name|pollInterval
decl_stmt|;
DECL|field|pollIntervalStr
specifier|private
name|String
name|pollIntervalStr
decl_stmt|;
DECL|field|executorService
specifier|private
name|ScheduledExecutorService
name|executorService
decl_stmt|;
DECL|field|executorStartTime
specifier|private
specifier|volatile
name|long
name|executorStartTime
decl_stmt|;
DECL|field|replicationStartTime
specifier|private
specifier|volatile
name|long
name|replicationStartTime
decl_stmt|;
DECL|field|solrCore
specifier|private
specifier|final
name|SolrCore
name|solrCore
decl_stmt|;
DECL|field|filesToDownload
specifier|private
specifier|volatile
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|filesToDownload
decl_stmt|;
DECL|field|confFilesToDownload
specifier|private
specifier|volatile
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|confFilesToDownload
decl_stmt|;
DECL|field|filesDownloaded
specifier|private
specifier|volatile
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|filesDownloaded
decl_stmt|;
DECL|field|confFilesDownloaded
specifier|private
specifier|volatile
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|confFilesDownloaded
decl_stmt|;
DECL|field|currentFile
specifier|private
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|currentFile
decl_stmt|;
DECL|field|dirFileFetcher
specifier|private
specifier|volatile
name|DirectoryFileFetcher
name|dirFileFetcher
decl_stmt|;
DECL|field|localFileFetcher
specifier|private
specifier|volatile
name|LocalFsFileFetcher
name|localFileFetcher
decl_stmt|;
DECL|field|fsyncService
specifier|private
specifier|volatile
name|ExecutorService
name|fsyncService
decl_stmt|;
DECL|field|stop
specifier|private
specifier|volatile
name|boolean
name|stop
init|=
literal|false
decl_stmt|;
DECL|field|useInternal
specifier|private
name|boolean
name|useInternal
init|=
literal|false
decl_stmt|;
DECL|field|useExternal
specifier|private
name|boolean
name|useExternal
init|=
literal|false
decl_stmt|;
comment|/**    * Disable the timer task for polling    */
DECL|field|pollDisabled
specifier|private
name|AtomicBoolean
name|pollDisabled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// HttpClient shared by all cores (used if timeout is not specified for a core)
DECL|field|client
specifier|private
specifier|static
name|HttpClient
name|client
decl_stmt|;
comment|// HttpClient for this instance if connectionTimeout or readTimeout has been specified
DECL|field|myHttpClient
specifier|private
specifier|final
name|HttpClient
name|myHttpClient
decl_stmt|;
DECL|method|createHttpClient
specifier|private
specifier|static
specifier|synchronized
name|HttpClient
name|createHttpClient
parameter_list|(
name|String
name|connTimeout
parameter_list|,
name|String
name|readTimeout
parameter_list|,
name|String
name|httpBasicAuthUser
parameter_list|,
name|String
name|httpBasicAuthPassword
parameter_list|,
name|boolean
name|useCompression
parameter_list|)
block|{
if|if
condition|(
name|connTimeout
operator|==
literal|null
operator|&&
name|readTimeout
operator|==
literal|null
operator|&&
name|client
operator|!=
literal|null
condition|)
return|return
name|client
return|;
specifier|final
name|ModifiableSolrParams
name|httpClientParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|httpClientParams
operator|.
name|set
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_CONNECTION_TIMEOUT
argument_list|,
name|connTimeout
operator|!=
literal|null
condition|?
name|connTimeout
else|:
literal|"5000"
argument_list|)
expr_stmt|;
name|httpClientParams
operator|.
name|set
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_SO_TIMEOUT
argument_list|,
name|readTimeout
operator|!=
literal|null
condition|?
name|readTimeout
else|:
literal|"20000"
argument_list|)
expr_stmt|;
name|httpClientParams
operator|.
name|set
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_BASIC_AUTH_USER
argument_list|,
name|httpBasicAuthUser
argument_list|)
expr_stmt|;
name|httpClientParams
operator|.
name|set
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_BASIC_AUTH_PASS
argument_list|,
name|httpBasicAuthPassword
argument_list|)
expr_stmt|;
name|httpClientParams
operator|.
name|set
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_ALLOW_COMPRESSION
argument_list|,
name|useCompression
argument_list|)
expr_stmt|;
comment|// Keeping a very high number so that if you have a large number of cores
comment|// no requests are kept waiting for an idle connection.
name|httpClientParams
operator|.
name|set
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_MAX_CONNECTIONS
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|httpClientParams
operator|.
name|set
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_MAX_CONNECTIONS_PER_HOST
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|HttpClient
name|httpClient
init|=
name|HttpClientUtil
operator|.
name|createClient
argument_list|(
name|httpClientParams
argument_list|)
decl_stmt|;
if|if
condition|(
name|client
operator|==
literal|null
operator|&&
name|connTimeout
operator|==
literal|null
operator|&&
name|readTimeout
operator|==
literal|null
condition|)
name|client
operator|=
name|httpClient
expr_stmt|;
return|return
name|httpClient
return|;
block|}
DECL|method|SnapPuller
specifier|public
name|SnapPuller
parameter_list|(
specifier|final
name|NamedList
name|initArgs
parameter_list|,
specifier|final
name|ReplicationHandler
name|handler
parameter_list|,
specifier|final
name|SolrCore
name|sc
parameter_list|)
block|{
name|solrCore
operator|=
name|sc
expr_stmt|;
specifier|final
name|SolrParams
name|params
init|=
name|SolrParams
operator|.
name|toSolrParams
argument_list|(
name|initArgs
argument_list|)
decl_stmt|;
name|String
name|masterUrl
init|=
operator|(
name|String
operator|)
name|initArgs
operator|.
name|get
argument_list|(
name|MASTER_URL
argument_list|)
decl_stmt|;
if|if
condition|(
name|masterUrl
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"'masterUrl' is required for a slave"
argument_list|)
throw|;
if|if
condition|(
name|masterUrl
operator|.
name|endsWith
argument_list|(
literal|"/replication"
argument_list|)
condition|)
block|{
name|masterUrl
operator|=
name|masterUrl
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|masterUrl
operator|.
name|length
argument_list|()
operator|-
literal|12
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"'masterUrl' must be specified without the /replication suffix"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|masterUrl
operator|=
name|masterUrl
expr_stmt|;
name|this
operator|.
name|replicationHandler
operator|=
name|handler
expr_stmt|;
name|pollIntervalStr
operator|=
operator|(
name|String
operator|)
name|initArgs
operator|.
name|get
argument_list|(
name|POLL_INTERVAL
argument_list|)
expr_stmt|;
name|pollInterval
operator|=
name|readInterval
argument_list|(
name|pollIntervalStr
argument_list|)
expr_stmt|;
name|String
name|compress
init|=
operator|(
name|String
operator|)
name|initArgs
operator|.
name|get
argument_list|(
name|COMPRESSION
argument_list|)
decl_stmt|;
name|useInternal
operator|=
name|INTERNAL
operator|.
name|equals
argument_list|(
name|compress
argument_list|)
expr_stmt|;
name|useExternal
operator|=
name|EXTERNAL
operator|.
name|equals
argument_list|(
name|compress
argument_list|)
expr_stmt|;
name|String
name|connTimeout
init|=
operator|(
name|String
operator|)
name|initArgs
operator|.
name|get
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_CONNECTION_TIMEOUT
argument_list|)
decl_stmt|;
name|String
name|readTimeout
init|=
operator|(
name|String
operator|)
name|initArgs
operator|.
name|get
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_SO_TIMEOUT
argument_list|)
decl_stmt|;
name|String
name|httpBasicAuthUser
init|=
operator|(
name|String
operator|)
name|initArgs
operator|.
name|get
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_BASIC_AUTH_USER
argument_list|)
decl_stmt|;
name|String
name|httpBasicAuthPassword
init|=
operator|(
name|String
operator|)
name|initArgs
operator|.
name|get
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_BASIC_AUTH_PASS
argument_list|)
decl_stmt|;
name|myHttpClient
operator|=
name|createHttpClient
argument_list|(
name|connTimeout
argument_list|,
name|readTimeout
argument_list|,
name|httpBasicAuthUser
argument_list|,
name|httpBasicAuthPassword
argument_list|,
name|useExternal
argument_list|)
expr_stmt|;
if|if
condition|(
name|pollInterval
operator|!=
literal|null
operator|&&
name|pollInterval
operator|>
literal|0
condition|)
block|{
name|startExecutorService
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|" No value set for 'pollInterval'. Timer Task not started."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|startExecutorService
specifier|private
name|void
name|startExecutorService
parameter_list|()
block|{
name|Runnable
name|task
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|pollDisabled
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Poll disabled"
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|executorStartTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|replicationHandler
operator|.
name|doFetch
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in fetching index"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|executorService
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
operator|new
name|DefaultSolrThreadFactory
argument_list|(
literal|"snapPuller"
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|initialDelay
init|=
name|pollInterval
operator|-
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|%
name|pollInterval
operator|)
decl_stmt|;
name|executorService
operator|.
name|scheduleAtFixedRate
argument_list|(
name|task
argument_list|,
name|initialDelay
argument_list|,
name|pollInterval
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Poll Scheduled at an interval of "
operator|+
name|pollInterval
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets the latest commit version and generation from the master    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getLatestVersion
name|NamedList
name|getLatestVersion
parameter_list|()
throws|throws
name|IOException
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|COMMAND
argument_list|,
name|CMD_INDEX_VERSION
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|,
literal|"javabin"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/replication"
argument_list|)
expr_stmt|;
name|QueryRequest
name|req
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|SolrServer
name|server
init|=
operator|new
name|HttpSolrServer
argument_list|(
name|masterUrl
argument_list|,
name|myHttpClient
argument_list|)
decl_stmt|;
comment|//XXX modify to use shardhandler
try|try
block|{
return|return
name|server
operator|.
name|request
argument_list|(
name|req
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Fetches the list of files in a given index commit point and updates internal list of files to download.    */
DECL|method|fetchFileList
specifier|private
name|void
name|fetchFileList
parameter_list|(
name|long
name|gen
parameter_list|)
throws|throws
name|IOException
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|COMMAND
argument_list|,
name|CMD_GET_FILE_LIST
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|GENERATION
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|gen
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|,
literal|"javabin"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/replication"
argument_list|)
expr_stmt|;
name|QueryRequest
name|req
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|SolrServer
name|server
init|=
operator|new
name|HttpSolrServer
argument_list|(
name|masterUrl
argument_list|,
name|myHttpClient
argument_list|)
decl_stmt|;
comment|//XXX modify to use shardhandler
try|try
block|{
name|NamedList
name|response
init|=
name|server
operator|.
name|request
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|files
init|=
operator|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|response
operator|.
name|get
argument_list|(
name|CMD_GET_FILE_LIST
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
name|filesToDownload
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
name|files
argument_list|)
expr_stmt|;
else|else
block|{
name|filesToDownload
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"No files to download for index generation: "
operator|+
name|gen
argument_list|)
expr_stmt|;
block|}
name|files
operator|=
operator|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|response
operator|.
name|get
argument_list|(
name|CONF_FILES
argument_list|)
expr_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
name|confFilesToDownload
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
name|files
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|field|successfulInstall
specifier|private
name|boolean
name|successfulInstall
init|=
literal|false
decl_stmt|;
comment|/**    * This command downloads all the necessary files from master to install a index commit point. Only changed files are    * downloaded. It also downloads the conf files (if they are modified).    *    * @param core the SolrCore    * @param forceReplication force a replication in all cases     * @return true on success, false if slave is already in sync    * @throws IOException if an exception occurs    */
DECL|method|fetchLatestIndex
name|boolean
name|fetchLatestIndex
parameter_list|(
specifier|final
name|SolrCore
name|core
parameter_list|,
name|boolean
name|forceReplication
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|successfulInstall
operator|=
literal|false
expr_stmt|;
name|replicationStartTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|Directory
name|tmpIndexDir
init|=
literal|null
decl_stmt|;
name|String
name|tmpIndex
init|=
literal|null
decl_stmt|;
name|Directory
name|indexDir
init|=
literal|null
decl_stmt|;
name|boolean
name|deleteTmpIdxDir
init|=
literal|true
decl_stmt|;
try|try
block|{
comment|//get the current 'replicateable' index version in the master
name|NamedList
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|getLatestVersion
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Master at: "
operator|+
name|masterUrl
operator|+
literal|" is not available. Index fetch failed. Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|long
name|latestVersion
init|=
operator|(
name|Long
operator|)
name|response
operator|.
name|get
argument_list|(
name|CMD_INDEX_VERSION
argument_list|)
decl_stmt|;
name|long
name|latestGeneration
init|=
operator|(
name|Long
operator|)
name|response
operator|.
name|get
argument_list|(
name|GENERATION
argument_list|)
decl_stmt|;
name|IndexCommit
name|commit
decl_stmt|;
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcherRefCounted
init|=
literal|null
decl_stmt|;
try|try
block|{
name|searcherRefCounted
operator|=
name|core
operator|.
name|getNewestSearcher
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|searcherRefCounted
operator|==
literal|null
condition|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
literal|"No open searcher found - fetch aborted"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|commit
operator|=
name|searcherRefCounted
operator|.
name|get
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|getIndexCommit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|searcherRefCounted
operator|!=
literal|null
condition|)
name|searcherRefCounted
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|latestVersion
operator|==
literal|0L
condition|)
block|{
if|if
condition|(
name|forceReplication
operator|&&
name|commit
operator|.
name|getGeneration
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// since we won't get the files for an empty index,
comment|// we just clear ours and commit
name|RefCounted
argument_list|<
name|IndexWriter
argument_list|>
name|iw
init|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|getIndexWriter
argument_list|(
name|core
argument_list|)
decl_stmt|;
try|try
block|{
name|iw
operator|.
name|get
argument_list|()
operator|.
name|deleteAll
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|iw
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|()
argument_list|)
decl_stmt|;
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|commit
argument_list|(
operator|new
name|CommitUpdateCommand
argument_list|(
name|req
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//there is nothing to be replicated
name|successfulInstall
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|forceReplication
operator|&&
name|IndexDeletionPolicyWrapper
operator|.
name|getCommitTimestamp
argument_list|(
name|commit
argument_list|)
operator|==
name|latestVersion
condition|)
block|{
comment|//master and slave are already in sync just return
name|LOG
operator|.
name|info
argument_list|(
literal|"Slave in sync with master."
argument_list|)
expr_stmt|;
name|successfulInstall
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Master's generation: "
operator|+
name|latestGeneration
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Slave's generation: "
operator|+
name|commit
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting replication process"
argument_list|)
expr_stmt|;
comment|// get the list of files first
name|fetchFileList
argument_list|(
name|latestGeneration
argument_list|)
expr_stmt|;
comment|// this can happen if the commit point is deleted before we fetch the file list.
if|if
condition|(
name|filesToDownload
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of files in latest index in master: "
operator|+
name|filesToDownload
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create the sync service
name|fsyncService
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|(
operator|new
name|DefaultSolrThreadFactory
argument_list|(
literal|"fsyncService"
argument_list|)
argument_list|)
expr_stmt|;
comment|// use a synchronized list because the list is read by other threads (to show details)
name|filesDownloaded
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// if the generateion of master is older than that of the slave , it means they are not compatible to be copied
comment|// then a new index direcory to be created and all the files need to be copied
name|boolean
name|isFullCopyNeeded
init|=
name|IndexDeletionPolicyWrapper
operator|.
name|getCommitTimestamp
argument_list|(
name|commit
argument_list|)
operator|>=
name|latestVersion
operator|||
name|forceReplication
decl_stmt|;
name|String
name|tmpIdxDirName
init|=
literal|"index."
operator|+
operator|new
name|SimpleDateFormat
argument_list|(
name|SnapShooter
operator|.
name|DATE_FMT
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
name|tmpIndex
operator|=
name|createTempindexDir
argument_list|(
name|core
argument_list|,
name|tmpIdxDirName
argument_list|)
expr_stmt|;
name|tmpIndexDir
operator|=
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|get
argument_list|(
name|tmpIndex
argument_list|,
name|core
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|indexConfig
operator|.
name|lockType
argument_list|)
expr_stmt|;
comment|// make sure it's the newest known index dir...
name|indexDir
operator|=
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|get
argument_list|(
name|core
operator|.
name|getNewIndexDir
argument_list|()
argument_list|,
name|core
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|indexConfig
operator|.
name|lockType
argument_list|)
expr_stmt|;
name|Directory
name|oldDirectory
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isIndexStale
argument_list|(
name|indexDir
argument_list|)
condition|)
block|{
name|isFullCopyNeeded
operator|=
literal|true
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting download to "
operator|+
name|tmpIndexDir
operator|+
literal|" fullCopy="
operator|+
name|isFullCopyNeeded
argument_list|)
expr_stmt|;
name|successfulInstall
operator|=
literal|false
expr_stmt|;
name|downloadIndexFiles
argument_list|(
name|isFullCopyNeeded
argument_list|,
name|tmpIndexDir
argument_list|,
name|latestGeneration
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total time taken for download : "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|replicationStartTime
operator|)
operator|/
literal|1000
operator|)
operator|+
literal|" secs"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|modifiedConfFiles
init|=
name|getModifiedConfFiles
argument_list|(
name|confFilesToDownload
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|modifiedConfFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|downloadConfFiles
argument_list|(
name|confFilesToDownload
argument_list|,
name|latestGeneration
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFullCopyNeeded
condition|)
block|{
name|successfulInstall
operator|=
name|modifyIndexProps
argument_list|(
name|tmpIdxDirName
argument_list|)
expr_stmt|;
name|deleteTmpIdxDir
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|successfulInstall
operator|=
name|moveIndexFiles
argument_list|(
name|tmpIndexDir
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|successfulInstall
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Configuration files are modified, core will be reloaded"
argument_list|)
expr_stmt|;
name|logReplicationTimeAndConfFiles
argument_list|(
name|modifiedConfFiles
argument_list|,
name|successfulInstall
argument_list|)
expr_stmt|;
comment|//write to a file time of replication and conf files.
name|reloadCore
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|terminateAndWaitFsyncService
argument_list|()
expr_stmt|;
if|if
condition|(
name|isFullCopyNeeded
condition|)
block|{
name|successfulInstall
operator|=
name|modifyIndexProps
argument_list|(
name|tmpIdxDirName
argument_list|)
expr_stmt|;
name|deleteTmpIdxDir
operator|=
literal|false
expr_stmt|;
name|RefCounted
argument_list|<
name|IndexWriter
argument_list|>
name|iw
init|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|getIndexWriter
argument_list|(
name|core
argument_list|)
decl_stmt|;
try|try
block|{
name|oldDirectory
operator|=
name|iw
operator|.
name|get
argument_list|()
operator|.
name|getDirectory
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|iw
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|successfulInstall
operator|=
name|moveIndexFiles
argument_list|(
name|tmpIndexDir
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|successfulInstall
condition|)
block|{
name|logReplicationTimeAndConfFiles
argument_list|(
name|modifiedConfFiles
argument_list|,
name|successfulInstall
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isFullCopyNeeded
condition|)
block|{
comment|// we have to do this before commit
specifier|final
name|Directory
name|freezeIndexDir
init|=
name|indexDir
decl_stmt|;
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|addCloseListener
argument_list|(
name|oldDirectory
argument_list|,
operator|new
name|CloseListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|preClose
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"removing old index files "
operator|+
name|freezeIndexDir
argument_list|)
expr_stmt|;
name|DirectoryFactory
operator|.
name|empty
argument_list|(
name|freezeIndexDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postClose
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"removing old index directory "
operator|+
name|freezeIndexDir
argument_list|)
expr_stmt|;
try|try
block|{
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|remove
argument_list|(
name|freezeIndexDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
literal|"Error removing directory "
operator|+
name|freezeIndexDir
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|successfulInstall
condition|)
block|{
if|if
condition|(
name|isFullCopyNeeded
condition|)
block|{
comment|// let the system know we are changing dir's and the old one
comment|// may be closed
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|doneWithDirectory
argument_list|(
name|oldDirectory
argument_list|)
expr_stmt|;
block|}
name|doCommit
argument_list|(
name|isFullCopyNeeded
argument_list|)
expr_stmt|;
block|}
name|replicationStartTime
operator|=
literal|0
expr_stmt|;
return|return
name|successfulInstall
return|;
block|}
catch|catch
parameter_list|(
name|ReplicationHandlerException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"User aborted Replication"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedException
argument_list|(
literal|"Index fetch interrupted"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Index fetch failed : "
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|deleteTmpIdxDir
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"removing temporary index download directory files "
operator|+
name|tmpIndexDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmpIndex
operator|!=
literal|null
operator|&&
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|exists
argument_list|(
name|tmpIndex
argument_list|)
condition|)
block|{
name|DirectoryFactory
operator|.
name|empty
argument_list|(
name|tmpIndexDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
operator|!
name|successfulInstall
condition|)
block|{
name|logReplicationTimeAndConfFiles
argument_list|(
literal|null
argument_list|,
name|successfulInstall
argument_list|)
expr_stmt|;
block|}
name|filesToDownload
operator|=
name|filesDownloaded
operator|=
name|confFilesDownloaded
operator|=
name|confFilesToDownload
operator|=
literal|null
expr_stmt|;
name|replicationStartTime
operator|=
literal|0
expr_stmt|;
name|dirFileFetcher
operator|=
literal|null
expr_stmt|;
name|localFileFetcher
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|fsyncService
operator|!=
literal|null
operator|&&
operator|!
name|fsyncService
operator|.
name|isShutdown
argument_list|()
condition|)
name|fsyncService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|fsyncService
operator|=
literal|null
expr_stmt|;
name|stop
operator|=
literal|false
expr_stmt|;
name|fsyncException
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|tmpIndexDir
operator|!=
literal|null
condition|)
block|{
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|release
argument_list|(
name|tmpIndexDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteTmpIdxDir
operator|&&
name|tmpIndexDir
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|remove
argument_list|(
name|tmpIndexDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
literal|"Error removing directory "
operator|+
name|tmpIndexDir
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|indexDir
operator|!=
literal|null
condition|)
block|{
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|release
argument_list|(
name|indexDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|field|fsyncException
specifier|private
specifier|volatile
name|Exception
name|fsyncException
decl_stmt|;
comment|/**    * terminate the fsync service and wait for all the tasks to complete. If it is already terminated    */
DECL|method|terminateAndWaitFsyncService
specifier|private
name|void
name|terminateAndWaitFsyncService
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fsyncService
operator|.
name|isTerminated
argument_list|()
condition|)
return|return;
name|fsyncService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// give a long wait say 1 hr
name|fsyncService
operator|.
name|awaitTermination
argument_list|(
literal|3600
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// if any fsync failed, throw that exception back
name|Exception
name|fsyncExceptionCopy
init|=
name|fsyncException
decl_stmt|;
if|if
condition|(
name|fsyncExceptionCopy
operator|!=
literal|null
condition|)
throw|throw
name|fsyncExceptionCopy
throw|;
block|}
comment|/**    * Helper method to record the last replication's details so that we can show them on the statistics page across    * restarts.    * @throws IOException on IO error    */
DECL|method|logReplicationTimeAndConfFiles
specifier|private
name|void
name|logReplicationTimeAndConfFiles
parameter_list|(
name|Collection
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|modifiedConfFiles
parameter_list|,
name|boolean
name|successfulInstall
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|confFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|modifiedConfFiles
operator|!=
literal|null
operator|&&
operator|!
name|modifiedConfFiles
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map1
range|:
name|modifiedConfFiles
control|)
name|confFiles
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|map1
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Properties
name|props
init|=
name|replicationHandler
operator|.
name|loadReplicationProperties
argument_list|()
decl_stmt|;
name|long
name|replicationTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|replicationTimeTaken
init|=
operator|(
name|replicationTime
operator|-
name|getReplicationStartTime
argument_list|()
operator|)
operator|/
literal|1000
decl_stmt|;
name|Directory
name|dir
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dir
operator|=
name|solrCore
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|get
argument_list|(
name|solrCore
operator|.
name|getDataDir
argument_list|()
argument_list|,
name|solrCore
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|indexConfig
operator|.
name|lockType
argument_list|)
expr_stmt|;
name|int
name|indexCount
init|=
literal|1
decl_stmt|,
name|confFilesCount
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|containsKey
argument_list|(
name|TIMES_INDEX_REPLICATED
argument_list|)
condition|)
block|{
name|indexCount
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|TIMES_INDEX_REPLICATED
argument_list|)
argument_list|)
operator|+
literal|1
expr_stmt|;
block|}
name|StringBuffer
name|sb
init|=
name|readToStringBuffer
argument_list|(
name|replicationTime
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
name|INDEX_REPLICATED_AT_LIST
argument_list|)
argument_list|)
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|INDEX_REPLICATED_AT_LIST
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|INDEX_REPLICATED_AT
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|replicationTime
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|PREVIOUS_CYCLE_TIME_TAKEN
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|replicationTimeTaken
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|TIMES_INDEX_REPLICATED
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|indexCount
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|modifiedConfFiles
operator|!=
literal|null
operator|&&
operator|!
name|modifiedConfFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|CONF_FILES_REPLICATED
argument_list|,
name|confFiles
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|CONF_FILES_REPLICATED_AT
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|replicationTime
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|props
operator|.
name|containsKey
argument_list|(
name|TIMES_CONFIG_REPLICATED
argument_list|)
condition|)
block|{
name|confFilesCount
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|TIMES_CONFIG_REPLICATED
argument_list|)
argument_list|)
operator|+
literal|1
expr_stmt|;
block|}
name|props
operator|.
name|setProperty
argument_list|(
name|TIMES_CONFIG_REPLICATED
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|confFilesCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|props
operator|.
name|setProperty
argument_list|(
name|LAST_CYCLE_BYTES_DOWNLOADED
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|getTotalBytesDownloaded
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|successfulInstall
condition|)
block|{
name|int
name|numFailures
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|containsKey
argument_list|(
name|TIMES_FAILED
argument_list|)
condition|)
block|{
name|numFailures
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|TIMES_FAILED
argument_list|)
argument_list|)
operator|+
literal|1
expr_stmt|;
block|}
name|props
operator|.
name|setProperty
argument_list|(
name|TIMES_FAILED
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|numFailures
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|REPLICATION_FAILED_AT
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|replicationTime
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|=
name|readToStringBuffer
argument_list|(
name|replicationTime
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
name|REPLICATION_FAILED_AT_LIST
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|REPLICATION_FAILED_AT_LIST
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|REPLICATION_PROPERTIES
argument_list|,
name|DirectoryFactory
operator|.
name|IOCONTEXT_NO_CACHE
argument_list|)
decl_stmt|;
name|OutputStream
name|outFile
init|=
operator|new
name|PropertiesOutputStream
argument_list|(
name|out
argument_list|)
decl_stmt|;
try|try
block|{
name|props
operator|.
name|store
argument_list|(
name|outFile
argument_list|,
literal|"Replication details"
argument_list|)
expr_stmt|;
name|dir
operator|.
name|sync
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|REPLICATION_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|outFile
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while updating statistics"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
name|solrCore
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|release
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getTotalBytesDownloaded
specifier|static
name|long
name|getTotalBytesDownloaded
parameter_list|(
name|SnapPuller
name|snappuller
parameter_list|)
block|{
name|long
name|bytesDownloaded
init|=
literal|0
decl_stmt|;
comment|//get size from list of files to download
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|file
range|:
name|snappuller
operator|.
name|getFilesDownloaded
argument_list|()
control|)
block|{
name|bytesDownloaded
operator|+=
operator|(
name|Long
operator|)
name|file
operator|.
name|get
argument_list|(
name|SIZE
argument_list|)
expr_stmt|;
block|}
comment|//get size from list of conf files to download
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|file
range|:
name|snappuller
operator|.
name|getConfFilesDownloaded
argument_list|()
control|)
block|{
name|bytesDownloaded
operator|+=
operator|(
name|Long
operator|)
name|file
operator|.
name|get
argument_list|(
name|SIZE
argument_list|)
expr_stmt|;
block|}
comment|//get size from current file being downloaded
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|currentFile
init|=
name|snappuller
operator|.
name|getCurrentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|currentFile
operator|.
name|containsKey
argument_list|(
literal|"bytesDownloaded"
argument_list|)
condition|)
block|{
name|bytesDownloaded
operator|+=
operator|(
name|Long
operator|)
name|currentFile
operator|.
name|get
argument_list|(
literal|"bytesDownloaded"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bytesDownloaded
return|;
block|}
DECL|method|readToStringBuffer
specifier|private
name|StringBuffer
name|readToStringBuffer
parameter_list|(
name|long
name|replicationTime
parameter_list|,
name|String
name|str
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
operator|!=
literal|null
operator|&&
name|str
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|String
index|[]
name|ss
init|=
name|str
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ss
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|.
name|add
argument_list|(
name|ss
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
name|replicationTime
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|size
argument_list|()
operator|||
name|i
operator|<
literal|9
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|l
operator|.
name|size
argument_list|()
operator|||
name|i
operator|==
literal|9
condition|)
break|break;
name|String
name|s
init|=
name|l
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
return|;
block|}
DECL|method|doCommit
specifier|private
name|void
name|doCommit
parameter_list|(
name|boolean
name|isFullCopyNeeded
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|solrCore
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|()
argument_list|)
decl_stmt|;
comment|// reboot the writer on the new index and get a new searcher
name|solrCore
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|newIndexWriter
argument_list|(
name|isFullCopyNeeded
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
comment|// first try to open an NRT searcher so that the new
comment|// IndexWriter is registered with the reader
name|Future
index|[]
name|waitSearcher
init|=
operator|new
name|Future
index|[
literal|1
index|]
decl_stmt|;
name|solrCore
operator|.
name|getSearcher
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|waitSearcher
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|waitSearcher
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|waitSearcher
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// update our commit point to the right dir
name|CommitUpdateCommand
name|cuc
init|=
operator|new
name|CommitUpdateCommand
argument_list|(
name|req
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|cuc
operator|.
name|waitSearcher
operator|=
literal|false
expr_stmt|;
name|cuc
operator|.
name|openSearcher
operator|=
literal|false
expr_stmt|;
name|solrCore
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|commit
argument_list|(
name|cuc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * All the files are copied to a temp dir first    */
DECL|method|createTempindexDir
specifier|private
name|String
name|createTempindexDir
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|String
name|tmpIdxDirName
parameter_list|)
block|{
name|File
name|tmpIdxDir
init|=
operator|new
name|File
argument_list|(
name|core
operator|.
name|getDataDir
argument_list|()
argument_list|,
name|tmpIdxDirName
argument_list|)
decl_stmt|;
return|return
name|tmpIdxDir
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|reloadCore
specifier|private
name|void
name|reloadCore
parameter_list|()
block|{
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|solrCore
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|reload
argument_list|(
name|solrCore
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not restart core "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|downloadConfFiles
specifier|private
name|void
name|downloadConfFiles
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|confFilesToDownload
parameter_list|,
name|long
name|latestGeneration
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting download of configuration files from master: "
operator|+
name|confFilesToDownload
argument_list|)
expr_stmt|;
name|confFilesDownloaded
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|tmpconfDir
init|=
operator|new
name|File
argument_list|(
name|solrCore
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|getConfigDir
argument_list|()
argument_list|,
literal|"conf."
operator|+
name|getDateAsStr
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|boolean
name|status
init|=
name|tmpconfDir
operator|.
name|mkdirs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|status
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Failed to create temporary config folder: "
operator|+
name|tmpconfDir
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|file
range|:
name|confFilesToDownload
control|)
block|{
name|String
name|saveAs
init|=
call|(
name|String
call|)
argument_list|(
name|file
operator|.
name|get
argument_list|(
name|ALIAS
argument_list|)
operator|==
literal|null
condition|?
name|file
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
else|:
name|file
operator|.
name|get
argument_list|(
name|ALIAS
argument_list|)
argument_list|)
decl_stmt|;
name|localFileFetcher
operator|=
operator|new
name|LocalFsFileFetcher
argument_list|(
name|tmpconfDir
argument_list|,
name|file
argument_list|,
name|saveAs
argument_list|,
literal|true
argument_list|,
name|latestGeneration
argument_list|)
expr_stmt|;
name|currentFile
operator|=
name|file
expr_stmt|;
name|localFileFetcher
operator|.
name|fetchFile
argument_list|()
expr_stmt|;
name|confFilesDownloaded
operator|.
name|add
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// this is called before copying the files to the original conf dir
comment|// so that if there is an exception avoid corrupting the original files.
name|terminateAndWaitFsyncService
argument_list|()
expr_stmt|;
name|copyTmpConfFiles2Conf
argument_list|(
name|tmpconfDir
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|delTree
argument_list|(
name|tmpconfDir
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Download the index files. If a new index is needed, download all the files.    *    * @param downloadCompleteIndex is it a fresh index copy    * @param tmpIndexDir               the directory to which files need to be downloadeed to    * @param latestGeneration         the version number    */
DECL|method|downloadIndexFiles
specifier|private
name|void
name|downloadIndexFiles
parameter_list|(
name|boolean
name|downloadCompleteIndex
parameter_list|,
name|Directory
name|tmpIndexDir
parameter_list|,
name|long
name|latestGeneration
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|indexDir
init|=
name|solrCore
operator|.
name|getIndexDir
argument_list|()
decl_stmt|;
comment|// it's okay to use null for lock factory since we know this dir will exist
name|Directory
name|dir
init|=
name|solrCore
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|get
argument_list|(
name|indexDir
argument_list|,
name|solrCore
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|indexConfig
operator|.
name|lockType
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|file
range|:
name|filesToDownload
control|)
block|{
if|if
condition|(
operator|!
name|dir
operator|.
name|fileExists
argument_list|(
operator|(
name|String
operator|)
name|file
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
argument_list|)
operator|||
name|downloadCompleteIndex
condition|)
block|{
name|dirFileFetcher
operator|=
operator|new
name|DirectoryFileFetcher
argument_list|(
name|tmpIndexDir
argument_list|,
name|file
argument_list|,
operator|(
name|String
operator|)
name|file
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
argument_list|,
literal|false
argument_list|,
name|latestGeneration
argument_list|)
expr_stmt|;
name|currentFile
operator|=
name|file
expr_stmt|;
name|dirFileFetcher
operator|.
name|fetchFile
argument_list|()
expr_stmt|;
name|filesDownloaded
operator|.
name|add
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping download for "
operator|+
name|file
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|solrCore
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|release
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * All the files which are common between master and slave must have same size else we assume they are    * not compatible (stale).    *    * @return true if the index stale and we need to download a fresh copy, false otherwise.    * @throws IOException  if low level io error    */
DECL|method|isIndexStale
specifier|private
name|boolean
name|isIndexStale
parameter_list|(
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|file
range|:
name|filesToDownload
control|)
block|{
if|if
condition|(
name|dir
operator|.
name|fileExists
argument_list|(
operator|(
name|String
operator|)
name|file
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
argument_list|)
operator|&&
name|dir
operator|.
name|fileLength
argument_list|(
operator|(
name|String
operator|)
name|file
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
argument_list|)
operator|!=
operator|(
name|Long
operator|)
name|file
operator|.
name|get
argument_list|(
name|SIZE
argument_list|)
condition|)
block|{
comment|// file exists and size is different, therefore we must assume
comment|// corrupted index
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Copy a file by the File#renameTo() method. If it fails, it is considered a failure    *<p/>    */
DECL|method|moveAFile
specifier|private
name|boolean
name|moveAFile
parameter_list|(
name|Directory
name|tmpIdxDir
parameter_list|,
name|Directory
name|indexDir
parameter_list|,
name|String
name|fname
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|copiedfiles
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|indexDir
operator|.
name|fileExists
argument_list|(
name|fname
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
literal|"could not check if a file exists"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
try|try
block|{
name|solrCore
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|move
argument_list|(
name|tmpIdxDir
argument_list|,
name|indexDir
argument_list|,
name|fname
argument_list|,
name|DirectoryFactory
operator|.
name|IOCONTEXT_NO_CACHE
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
literal|"Could not move file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
comment|/**    * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.    */
DECL|method|moveIndexFiles
specifier|private
name|boolean
name|moveIndexFiles
parameter_list|(
name|Directory
name|tmpIdxDir
parameter_list|,
name|Directory
name|indexDir
parameter_list|)
block|{
name|String
name|segmentsFile
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|movedfiles
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|f
range|:
name|filesDownloaded
control|)
block|{
name|String
name|fname
init|=
operator|(
name|String
operator|)
name|f
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
comment|// the segments file must be copied last
comment|// or else if there is a failure in between the
comment|// index will be corrupted
if|if
condition|(
name|fname
operator|.
name|startsWith
argument_list|(
literal|"segments_"
argument_list|)
condition|)
block|{
comment|//The segments file must be copied in the end
comment|//Otherwise , if the copy fails index ends up corrupted
name|segmentsFile
operator|=
name|fname
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|moveAFile
argument_list|(
name|tmpIdxDir
argument_list|,
name|indexDir
argument_list|,
name|fname
argument_list|,
name|movedfiles
argument_list|)
condition|)
return|return
literal|false
return|;
name|movedfiles
operator|.
name|add
argument_list|(
name|fname
argument_list|)
expr_stmt|;
block|}
comment|//copy the segments file last
if|if
condition|(
name|segmentsFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|moveAFile
argument_list|(
name|tmpIdxDir
argument_list|,
name|indexDir
argument_list|,
name|segmentsFile
argument_list|,
name|movedfiles
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained    */
DECL|method|copyTmpConfFiles2Conf
specifier|private
name|void
name|copyTmpConfFiles2Conf
parameter_list|(
name|File
name|tmpconfDir
parameter_list|)
block|{
name|File
name|confDir
init|=
operator|new
name|File
argument_list|(
name|solrCore
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|getConfigDir
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|tmpconfDir
operator|.
name|listFiles
argument_list|()
control|)
block|{
name|File
name|oldFile
init|=
operator|new
name|File
argument_list|(
name|confDir
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|File
name|backupFile
init|=
operator|new
name|File
argument_list|(
name|confDir
argument_list|,
name|oldFile
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|getDateAsStr
argument_list|(
operator|new
name|Date
argument_list|(
name|oldFile
operator|.
name|lastModified
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|status
init|=
name|oldFile
operator|.
name|renameTo
argument_list|(
name|backupFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|status
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unable to rename: "
operator|+
name|oldFile
operator|+
literal|" to: "
operator|+
name|backupFile
argument_list|)
throw|;
block|}
block|}
name|boolean
name|status
init|=
name|file
operator|.
name|renameTo
argument_list|(
name|oldFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
condition|)
block|{       }
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unable to rename: "
operator|+
name|file
operator|+
literal|" to: "
operator|+
name|oldFile
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getDateAsStr
specifier|private
name|String
name|getDateAsStr
parameter_list|(
name|Date
name|d
parameter_list|)
block|{
return|return
operator|new
name|SimpleDateFormat
argument_list|(
name|SnapShooter
operator|.
name|DATE_FMT
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|format
argument_list|(
name|d
argument_list|)
return|;
block|}
comment|/**    * If the index is stale by any chance, load index from a different dir in the data dir.    */
DECL|method|modifyIndexProps
specifier|private
name|boolean
name|modifyIndexProps
parameter_list|(
name|String
name|tmpIdxDirName
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"New index installed. Updating index properties... index="
operator|+
name|tmpIdxDirName
argument_list|)
expr_stmt|;
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Directory
name|dir
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dir
operator|=
name|solrCore
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|get
argument_list|(
name|solrCore
operator|.
name|getDataDir
argument_list|()
argument_list|,
name|solrCore
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|indexConfig
operator|.
name|lockType
argument_list|)
expr_stmt|;
if|if
condition|(
name|dir
operator|.
name|fileExists
argument_list|(
name|SnapPuller
operator|.
name|INDEX_PROPERTIES
argument_list|)
condition|)
block|{
specifier|final
name|IndexInput
name|input
init|=
name|dir
operator|.
name|openInput
argument_list|(
name|SnapPuller
operator|.
name|INDEX_PROPERTIES
argument_list|,
name|DirectoryFactory
operator|.
name|IOCONTEXT_NO_CACHE
argument_list|)
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|PropertiesInputStream
argument_list|(
name|input
argument_list|)
decl_stmt|;
try|try
block|{
name|p
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to load "
operator|+
name|SnapPuller
operator|.
name|INDEX_PROPERTIES
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|dir
operator|.
name|deleteFile
argument_list|(
name|SnapPuller
operator|.
name|INDEX_PROPERTIES
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// no problem
block|}
specifier|final
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|SnapPuller
operator|.
name|INDEX_PROPERTIES
argument_list|,
name|DirectoryFactory
operator|.
name|IOCONTEXT_NO_CACHE
argument_list|)
decl_stmt|;
name|p
operator|.
name|put
argument_list|(
literal|"index"
argument_list|,
name|tmpIdxDirName
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|os
operator|=
operator|new
name|PropertiesOutputStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|p
operator|.
name|store
argument_list|(
name|os
argument_list|,
name|SnapPuller
operator|.
name|INDEX_PROPERTIES
argument_list|)
expr_stmt|;
name|dir
operator|.
name|sync
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|INDEX_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unable to write "
operator|+
name|SnapPuller
operator|.
name|INDEX_PROPERTIES
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e1
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|solrCore
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|release
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|field|confFileInfoCache
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|confFileInfoCache
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.    *    * @param confFilesToDownload The list of files obtained from master    *    * @return a list of configuration files which have changed on the master and need to be downloaded.    */
DECL|method|getModifiedConfFiles
specifier|private
name|Collection
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getModifiedConfFiles
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|confFilesToDownload
parameter_list|)
block|{
if|if
condition|(
name|confFilesToDownload
operator|==
literal|null
operator|||
name|confFilesToDownload
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
comment|//build a map with alias/name as the key
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|nameVsFile
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|NamedList
name|names
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
range|:
name|confFilesToDownload
control|)
block|{
comment|//if alias is present that is the name the file may have in the slave
name|String
name|name
init|=
call|(
name|String
call|)
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|ALIAS
argument_list|)
operator|==
literal|null
condition|?
name|map
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
else|:
name|map
operator|.
name|get
argument_list|(
name|ALIAS
argument_list|)
argument_list|)
decl_stmt|;
name|nameVsFile
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|//get the details of the local conf files with the same alias/name
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|localFilesInfo
init|=
name|replicationHandler
operator|.
name|getConfFileInfoFromCache
argument_list|(
name|names
argument_list|,
name|confFileInfoCache
argument_list|)
decl_stmt|;
comment|//compare their size/checksum to see if
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fileInfo
range|:
name|localFilesInfo
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|fileInfo
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
name|nameVsFile
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
continue|continue;
comment|// the file is not even present locally (so must be downloaded)
if|if
condition|(
name|m
operator|.
name|get
argument_list|(
name|CHECKSUM
argument_list|)
operator|.
name|equals
argument_list|(
name|fileInfo
operator|.
name|get
argument_list|(
name|CHECKSUM
argument_list|)
argument_list|)
condition|)
block|{
name|nameVsFile
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|//checksums are same so the file need not be downloaded
block|}
block|}
return|return
name|nameVsFile
operator|.
name|isEmpty
argument_list|()
condition|?
name|Collections
operator|.
name|EMPTY_LIST
else|:
name|nameVsFile
operator|.
name|values
argument_list|()
return|;
block|}
DECL|method|delTree
specifier|static
name|boolean
name|delTree
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|boolean
name|isSuccess
init|=
literal|true
decl_stmt|;
name|File
name|contents
index|[]
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|contents
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|contents
control|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|boolean
name|success
init|=
name|delTree
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to delete directory : "
operator|+
name|file
argument_list|)
expr_stmt|;
name|isSuccess
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|boolean
name|success
init|=
name|file
operator|.
name|delete
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to delete file : "
operator|+
name|file
argument_list|)
expr_stmt|;
name|isSuccess
operator|=
literal|false
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
name|isSuccess
operator|&&
name|dir
operator|.
name|delete
argument_list|()
return|;
block|}
comment|/**    * Disable periodic polling    */
DECL|method|disablePoll
name|void
name|disablePoll
parameter_list|()
block|{
name|pollDisabled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"inside disable poll, value of pollDisabled = "
operator|+
name|pollDisabled
argument_list|)
expr_stmt|;
block|}
comment|/**    * Enable periodic polling    */
DECL|method|enablePoll
name|void
name|enablePoll
parameter_list|()
block|{
name|pollDisabled
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"inside enable poll, value of pollDisabled = "
operator|+
name|pollDisabled
argument_list|)
expr_stmt|;
block|}
comment|/**    * Stops the ongoing pull    */
DECL|method|abortPull
name|void
name|abortPull
parameter_list|()
block|{
name|stop
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getReplicationStartTime
name|long
name|getReplicationStartTime
parameter_list|()
block|{
return|return
name|replicationStartTime
return|;
block|}
DECL|method|getConfFilesToDownload
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getConfFilesToDownload
parameter_list|()
block|{
comment|//make a copy first because it can be null later
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|tmp
init|=
name|confFilesToDownload
decl_stmt|;
comment|//create a new instance. or else iterator may fail
return|return
name|tmp
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_LIST
else|:
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|(
name|tmp
argument_list|)
return|;
block|}
DECL|method|getConfFilesDownloaded
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getConfFilesDownloaded
parameter_list|()
block|{
comment|//make a copy first because it can be null later
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|tmp
init|=
name|confFilesDownloaded
decl_stmt|;
comment|// NOTE: it's safe to make a copy of a SynchronizedCollection(ArrayList)
return|return
name|tmp
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_LIST
else|:
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|(
name|tmp
argument_list|)
return|;
block|}
DECL|method|getFilesToDownload
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getFilesToDownload
parameter_list|()
block|{
comment|//make a copy first because it can be null later
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|tmp
init|=
name|filesToDownload
decl_stmt|;
return|return
name|tmp
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_LIST
else|:
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|(
name|tmp
argument_list|)
return|;
block|}
DECL|method|getFilesDownloaded
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getFilesDownloaded
parameter_list|()
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|tmp
init|=
name|filesDownloaded
decl_stmt|;
return|return
name|tmp
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_LIST
else|:
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|(
name|tmp
argument_list|)
return|;
block|}
comment|// TODO: currently does not reflect conf files
DECL|method|getCurrentFile
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getCurrentFile
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|tmp
init|=
name|currentFile
decl_stmt|;
name|DirectoryFileFetcher
name|tmpFileFetcher
init|=
name|dirFileFetcher
decl_stmt|;
if|if
condition|(
name|tmp
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|tmp
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmpFileFetcher
operator|!=
literal|null
condition|)
name|tmp
operator|.
name|put
argument_list|(
literal|"bytesDownloaded"
argument_list|,
name|tmpFileFetcher
operator|.
name|bytesDownloaded
argument_list|)
expr_stmt|;
return|return
name|tmp
return|;
block|}
DECL|method|isPollingDisabled
name|boolean
name|isPollingDisabled
parameter_list|()
block|{
return|return
name|pollDisabled
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getNextScheduledExecTime
name|Long
name|getNextScheduledExecTime
parameter_list|()
block|{
name|Long
name|nextTime
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|executorStartTime
operator|>
literal|0
condition|)
name|nextTime
operator|=
name|executorStartTime
operator|+
name|pollInterval
expr_stmt|;
return|return
name|nextTime
return|;
block|}
DECL|class|ReplicationHandlerException
specifier|private
specifier|static
class|class
name|ReplicationHandlerException
extends|extends
name|InterruptedException
block|{
DECL|method|ReplicationHandlerException
specifier|public
name|ReplicationHandlerException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * The class acts as a client for ReplicationHandler.FileStream. It understands the protocol of wt=filestream    *    * @see org.apache.solr.handler.ReplicationHandler.DirectoryFileStream    */
DECL|class|DirectoryFileFetcher
specifier|private
class|class
name|DirectoryFileFetcher
block|{
DECL|field|includeChecksum
name|boolean
name|includeChecksum
init|=
literal|true
decl_stmt|;
DECL|field|copy2Dir
name|Directory
name|copy2Dir
decl_stmt|;
DECL|field|fileName
name|String
name|fileName
decl_stmt|;
DECL|field|saveAs
name|String
name|saveAs
decl_stmt|;
DECL|field|size
name|long
name|size
decl_stmt|;
DECL|field|bytesDownloaded
name|long
name|bytesDownloaded
init|=
literal|0
decl_stmt|;
DECL|field|buf
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|1024
index|]
decl_stmt|;
DECL|field|checksum
name|Checksum
name|checksum
decl_stmt|;
DECL|field|errorCount
name|int
name|errorCount
init|=
literal|0
decl_stmt|;
DECL|field|isConf
specifier|private
name|boolean
name|isConf
decl_stmt|;
DECL|field|aborted
specifier|private
name|boolean
name|aborted
init|=
literal|false
decl_stmt|;
DECL|field|indexGen
specifier|private
name|Long
name|indexGen
decl_stmt|;
DECL|field|outStream
specifier|private
name|IndexOutput
name|outStream
decl_stmt|;
DECL|method|DirectoryFileFetcher
name|DirectoryFileFetcher
parameter_list|(
name|Directory
name|tmpIndexDir
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fileDetails
parameter_list|,
name|String
name|saveAs
parameter_list|,
name|boolean
name|isConf
parameter_list|,
name|long
name|latestGen
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|copy2Dir
operator|=
name|tmpIndexDir
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
operator|(
name|String
operator|)
name|fileDetails
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
operator|(
name|Long
operator|)
name|fileDetails
operator|.
name|get
argument_list|(
name|SIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|isConf
operator|=
name|isConf
expr_stmt|;
name|this
operator|.
name|saveAs
operator|=
name|saveAs
expr_stmt|;
name|indexGen
operator|=
name|latestGen
expr_stmt|;
name|outStream
operator|=
name|copy2Dir
operator|.
name|createOutput
argument_list|(
name|saveAs
argument_list|,
name|DirectoryFactory
operator|.
name|IOCONTEXT_NO_CACHE
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeChecksum
condition|)
name|checksum
operator|=
operator|new
name|Adler32
argument_list|()
expr_stmt|;
block|}
comment|/**      * The main method which downloads file      */
DECL|method|fetchFile
name|void
name|fetchFile
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|FastInputStream
name|is
init|=
name|getStream
argument_list|()
decl_stmt|;
name|int
name|result
decl_stmt|;
try|try
block|{
comment|//fetch packets one by one in a single request
name|result
operator|=
name|fetchPackets
argument_list|(
name|is
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
operator|||
name|result
operator|==
name|NO_CONTENT
condition|)
block|{
return|return;
block|}
comment|//if there is an error continue. But continue from the point where it got broken
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|cleanup
argument_list|()
expr_stmt|;
comment|//if cleanup suceeds . The file is downloaded fully. do an fsync
name|fsyncService
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|copy2Dir
operator|.
name|sync
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|saveAs
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fsyncException
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|fetchPackets
specifier|private
name|int
name|fetchPackets
parameter_list|(
name|FastInputStream
name|fis
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|intbytes
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|byte
index|[]
name|longbytes
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|stop
condition|)
block|{
name|stop
operator|=
literal|false
expr_stmt|;
name|aborted
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|ReplicationHandlerException
argument_list|(
literal|"User aborted replication"
argument_list|)
throw|;
block|}
name|long
name|checkSumServer
init|=
operator|-
literal|1
decl_stmt|;
name|fis
operator|.
name|readFully
argument_list|(
name|intbytes
argument_list|)
expr_stmt|;
comment|//read the size of the packet
name|int
name|packetSize
init|=
name|readInt
argument_list|(
name|intbytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|packetSize
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No content recieved for file: "
operator|+
name|currentFile
argument_list|)
expr_stmt|;
return|return
name|NO_CONTENT
return|;
block|}
if|if
condition|(
name|buf
operator|.
name|length
operator|<
name|packetSize
condition|)
name|buf
operator|=
operator|new
name|byte
index|[
name|packetSize
index|]
expr_stmt|;
if|if
condition|(
name|checksum
operator|!=
literal|null
condition|)
block|{
comment|//read the checksum
name|fis
operator|.
name|readFully
argument_list|(
name|longbytes
argument_list|)
expr_stmt|;
name|checkSumServer
operator|=
name|readLong
argument_list|(
name|longbytes
argument_list|)
expr_stmt|;
block|}
comment|//then read the packet of bytes
name|fis
operator|.
name|readFully
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|packetSize
argument_list|)
expr_stmt|;
comment|//compare the checksum as sent from the master
if|if
condition|(
name|includeChecksum
condition|)
block|{
name|checksum
operator|.
name|reset
argument_list|()
expr_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|packetSize
argument_list|)
expr_stmt|;
name|long
name|checkSumClient
init|=
name|checksum
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkSumClient
operator|!=
name|checkSumServer
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Checksum not matched between client and server for: "
operator|+
name|currentFile
argument_list|)
expr_stmt|;
comment|//if checksum is wrong it is a problem return for retry
return|return
literal|1
return|;
block|}
block|}
comment|//if everything is fine, write down the packet to the file
name|writeBytes
argument_list|(
name|packetSize
argument_list|)
expr_stmt|;
name|bytesDownloaded
operator|+=
name|packetSize
expr_stmt|;
if|if
condition|(
name|bytesDownloaded
operator|>=
name|size
condition|)
return|return
literal|0
return|;
comment|//errorcount is always set to zero after a successful packet
name|errorCount
operator|=
literal|0
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ReplicationHandlerException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error in fetching packets "
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//for any failure , increment the error count
name|errorCount
operator|++
expr_stmt|;
comment|//if it fails for the same pacaket for   MAX_RETRIES fail and come out
if|if
condition|(
name|errorCount
operator|>
name|MAX_RETRIES
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Fetch failed for file:"
operator|+
name|fileName
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|ERR
return|;
block|}
block|}
DECL|method|writeBytes
specifier|protected
name|void
name|writeBytes
parameter_list|(
name|int
name|packetSize
parameter_list|)
throws|throws
name|IOException
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|packetSize
argument_list|)
expr_stmt|;
block|}
comment|/**      * The webcontainer flushes the data only after it fills the buffer size. So, all data has to be read as readFully()      * other wise it fails. So read everything as bytes and then extract an integer out of it      */
DECL|method|readInt
specifier|private
name|int
name|readInt
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
name|b
index|[
literal|0
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|b
index|[
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|b
index|[
literal|2
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|b
index|[
literal|3
index|]
operator|&
literal|0xff
operator|)
operator|)
return|;
block|}
comment|/**      * Same as above but to read longs from a byte array      */
DECL|method|readLong
specifier|private
name|long
name|readLong
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
return|return
operator|(
operator|(
call|(
name|long
call|)
argument_list|(
name|b
index|[
literal|0
index|]
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|56
operator|)
operator||
operator|(
operator|(
call|(
name|long
call|)
argument_list|(
name|b
index|[
literal|1
index|]
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|48
operator|)
operator||
operator|(
operator|(
call|(
name|long
call|)
argument_list|(
name|b
index|[
literal|2
index|]
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|40
operator|)
operator||
operator|(
operator|(
call|(
name|long
call|)
argument_list|(
name|b
index|[
literal|3
index|]
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|32
operator|)
operator||
operator|(
operator|(
call|(
name|long
call|)
argument_list|(
name|b
index|[
literal|4
index|]
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|b
index|[
literal|5
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|b
index|[
literal|6
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
name|b
index|[
literal|7
index|]
operator|&
literal|0xff
operator|)
operator|)
return|;
block|}
comment|/**      * cleanup everything      */
DECL|method|cleanup
specifier|private
name|void
name|cleanup
parameter_list|()
block|{
try|try
block|{
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|/* noop */
name|LOG
operator|.
name|error
argument_list|(
literal|"Error closing the file stream: "
operator|+
name|this
operator|.
name|saveAs
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bytesDownloaded
operator|!=
name|size
condition|)
block|{
comment|//if the download is not complete then
comment|//delete the file being downloaded
try|try
block|{
name|copy2Dir
operator|.
name|deleteFile
argument_list|(
name|saveAs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error deleting file in cleanup"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//if the failure is due to a user abort it is returned nomally else an exception is thrown
if|if
condition|(
operator|!
name|aborted
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unable to download "
operator|+
name|fileName
operator|+
literal|" completely. Downloaded "
operator|+
name|bytesDownloaded
operator|+
literal|"!="
operator|+
name|size
argument_list|)
throw|;
block|}
block|}
comment|/**      * Open a new stream using HttpClient      */
DECL|method|getStream
name|FastInputStream
name|getStream
parameter_list|()
throws|throws
name|IOException
block|{
name|SolrServer
name|s
init|=
operator|new
name|HttpSolrServer
argument_list|(
name|masterUrl
argument_list|,
name|myHttpClient
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//XXX use shardhandler
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
comment|//    //the method is command=filecontent
name|params
operator|.
name|set
argument_list|(
name|COMMAND
argument_list|,
name|CMD_GET_FILE
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|GENERATION
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|indexGen
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/replication"
argument_list|)
expr_stmt|;
comment|//add the version to download. This is used to reserve the download
if|if
condition|(
name|isConf
condition|)
block|{
comment|//set cf instead of file for config file
name|params
operator|.
name|set
argument_list|(
name|CONF_FILE_SHORT
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|params
operator|.
name|set
argument_list|(
name|FILE
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useInternal
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|COMPRESSION
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
comment|//use checksum
if|if
condition|(
name|this
operator|.
name|includeChecksum
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|CHECKSUM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//wt=filestream this is a custom protocol
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|,
name|FILE_STREAM
argument_list|)
expr_stmt|;
comment|// This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that
comment|// the server starts from the offset
if|if
condition|(
name|bytesDownloaded
operator|>
literal|0
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|OFFSET
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|bytesDownloaded
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|NamedList
name|response
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|QueryRequest
name|req
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|response
operator|=
name|s
operator|.
name|request
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|is
operator|=
operator|(
name|InputStream
operator|)
name|response
operator|.
name|get
argument_list|(
literal|"stream"
argument_list|)
expr_stmt|;
if|if
condition|(
name|useInternal
condition|)
block|{
name|is
operator|=
operator|new
name|InflaterInputStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FastInputStream
argument_list|(
name|is
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//close stream on error
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not download file '"
operator|+
name|fileName
operator|+
literal|"'"
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * The class acts as a client for ReplicationHandler.FileStream. It understands the protocol of wt=filestream    *    * @see org.apache.solr.handler.ReplicationHandler.LocalFsFileStream    */
DECL|class|LocalFsFileFetcher
specifier|private
class|class
name|LocalFsFileFetcher
block|{
DECL|field|includeChecksum
name|boolean
name|includeChecksum
init|=
literal|true
decl_stmt|;
DECL|field|copy2Dir
specifier|private
name|File
name|copy2Dir
decl_stmt|;
DECL|field|fileName
name|String
name|fileName
decl_stmt|;
DECL|field|saveAs
name|String
name|saveAs
decl_stmt|;
DECL|field|size
name|long
name|size
decl_stmt|;
DECL|field|bytesDownloaded
name|long
name|bytesDownloaded
init|=
literal|0
decl_stmt|;
DECL|field|fileChannel
name|FileChannel
name|fileChannel
decl_stmt|;
DECL|field|fileOutputStream
specifier|private
name|FileOutputStream
name|fileOutputStream
decl_stmt|;
DECL|field|buf
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|1024
index|]
decl_stmt|;
DECL|field|checksum
name|Checksum
name|checksum
decl_stmt|;
DECL|field|file
name|File
name|file
decl_stmt|;
DECL|field|errorCount
name|int
name|errorCount
init|=
literal|0
decl_stmt|;
DECL|field|isConf
specifier|private
name|boolean
name|isConf
decl_stmt|;
DECL|field|aborted
specifier|private
name|boolean
name|aborted
init|=
literal|false
decl_stmt|;
DECL|field|indexGen
specifier|private
name|Long
name|indexGen
decl_stmt|;
comment|// TODO: could do more code sharing with DirectoryFileFetcher
DECL|method|LocalFsFileFetcher
name|LocalFsFileFetcher
parameter_list|(
name|File
name|dir
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fileDetails
parameter_list|,
name|String
name|saveAs
parameter_list|,
name|boolean
name|isConf
parameter_list|,
name|long
name|latestGen
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|copy2Dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
operator|(
name|String
operator|)
name|fileDetails
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
operator|(
name|Long
operator|)
name|fileDetails
operator|.
name|get
argument_list|(
name|SIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|isConf
operator|=
name|isConf
expr_stmt|;
name|this
operator|.
name|saveAs
operator|=
name|saveAs
expr_stmt|;
name|indexGen
operator|=
name|latestGen
expr_stmt|;
name|this
operator|.
name|file
operator|=
operator|new
name|File
argument_list|(
name|copy2Dir
argument_list|,
name|saveAs
argument_list|)
expr_stmt|;
name|File
name|parentDir
init|=
name|this
operator|.
name|file
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parentDir
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|parentDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Failed to create (sub)directory for file: "
operator|+
name|saveAs
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|fileOutputStream
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileChannel
operator|=
name|this
operator|.
name|fileOutputStream
operator|.
name|getChannel
argument_list|()
expr_stmt|;
if|if
condition|(
name|includeChecksum
condition|)
name|checksum
operator|=
operator|new
name|Adler32
argument_list|()
expr_stmt|;
block|}
comment|/**      * The main method which downloads file      */
DECL|method|fetchFile
name|void
name|fetchFile
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|FastInputStream
name|is
init|=
name|getStream
argument_list|()
decl_stmt|;
name|int
name|result
decl_stmt|;
try|try
block|{
comment|//fetch packets one by one in a single request
name|result
operator|=
name|fetchPackets
argument_list|(
name|is
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
operator|||
name|result
operator|==
name|NO_CONTENT
condition|)
block|{
return|return;
block|}
comment|//if there is an error continue. But continue from the point where it got broken
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|cleanup
argument_list|()
expr_stmt|;
comment|//if cleanup suceeds . The file is downloaded fully. do an fsync
name|fsyncService
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|FileUtils
operator|.
name|sync
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fsyncException
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|fetchPackets
specifier|private
name|int
name|fetchPackets
parameter_list|(
name|FastInputStream
name|fis
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|intbytes
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|byte
index|[]
name|longbytes
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|stop
condition|)
block|{
name|stop
operator|=
literal|false
expr_stmt|;
name|aborted
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|ReplicationHandlerException
argument_list|(
literal|"User aborted replication"
argument_list|)
throw|;
block|}
name|long
name|checkSumServer
init|=
operator|-
literal|1
decl_stmt|;
name|fis
operator|.
name|readFully
argument_list|(
name|intbytes
argument_list|)
expr_stmt|;
comment|//read the size of the packet
name|int
name|packetSize
init|=
name|readInt
argument_list|(
name|intbytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|packetSize
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No content recieved for file: "
operator|+
name|currentFile
argument_list|)
expr_stmt|;
return|return
name|NO_CONTENT
return|;
block|}
if|if
condition|(
name|buf
operator|.
name|length
operator|<
name|packetSize
condition|)
name|buf
operator|=
operator|new
name|byte
index|[
name|packetSize
index|]
expr_stmt|;
if|if
condition|(
name|checksum
operator|!=
literal|null
condition|)
block|{
comment|//read the checksum
name|fis
operator|.
name|readFully
argument_list|(
name|longbytes
argument_list|)
expr_stmt|;
name|checkSumServer
operator|=
name|readLong
argument_list|(
name|longbytes
argument_list|)
expr_stmt|;
block|}
comment|//then read the packet of bytes
name|fis
operator|.
name|readFully
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|packetSize
argument_list|)
expr_stmt|;
comment|//compare the checksum as sent from the master
if|if
condition|(
name|includeChecksum
condition|)
block|{
name|checksum
operator|.
name|reset
argument_list|()
expr_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|packetSize
argument_list|)
expr_stmt|;
name|long
name|checkSumClient
init|=
name|checksum
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkSumClient
operator|!=
name|checkSumServer
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Checksum not matched between client and server for: "
operator|+
name|currentFile
argument_list|)
expr_stmt|;
comment|//if checksum is wrong it is a problem return for retry
return|return
literal|1
return|;
block|}
block|}
comment|//if everything is fine, write down the packet to the file
name|fileChannel
operator|.
name|write
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|packetSize
argument_list|)
argument_list|)
expr_stmt|;
name|bytesDownloaded
operator|+=
name|packetSize
expr_stmt|;
if|if
condition|(
name|bytesDownloaded
operator|>=
name|size
condition|)
return|return
literal|0
return|;
comment|//errorcount is always set to zero after a successful packet
name|errorCount
operator|=
literal|0
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ReplicationHandlerException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error in fetching packets "
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//for any failure , increment the error count
name|errorCount
operator|++
expr_stmt|;
comment|//if it fails for the same pacaket for   MAX_RETRIES fail and come out
if|if
condition|(
name|errorCount
operator|>
name|MAX_RETRIES
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Fetch failed for file:"
operator|+
name|fileName
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|ERR
return|;
block|}
block|}
comment|/**      * The webcontainer flushes the data only after it fills the buffer size. So, all data has to be read as readFully()      * other wise it fails. So read everything as bytes and then extract an integer out of it      */
DECL|method|readInt
specifier|private
name|int
name|readInt
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
name|b
index|[
literal|0
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|b
index|[
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|b
index|[
literal|2
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|b
index|[
literal|3
index|]
operator|&
literal|0xff
operator|)
operator|)
return|;
block|}
comment|/**      * Same as above but to read longs from a byte array      */
DECL|method|readLong
specifier|private
name|long
name|readLong
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
return|return
operator|(
operator|(
call|(
name|long
call|)
argument_list|(
name|b
index|[
literal|0
index|]
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|56
operator|)
operator||
operator|(
operator|(
call|(
name|long
call|)
argument_list|(
name|b
index|[
literal|1
index|]
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|48
operator|)
operator||
operator|(
operator|(
call|(
name|long
call|)
argument_list|(
name|b
index|[
literal|2
index|]
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|40
operator|)
operator||
operator|(
operator|(
call|(
name|long
call|)
argument_list|(
name|b
index|[
literal|3
index|]
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|32
operator|)
operator||
operator|(
operator|(
call|(
name|long
call|)
argument_list|(
name|b
index|[
literal|4
index|]
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|b
index|[
literal|5
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|b
index|[
literal|6
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
name|b
index|[
literal|7
index|]
operator|&
literal|0xff
operator|)
operator|)
return|;
block|}
comment|/**      * cleanup everything      */
DECL|method|cleanup
specifier|private
name|void
name|cleanup
parameter_list|()
block|{
try|try
block|{
comment|//close the FileOutputStream (which also closes the Channel)
name|fileOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|/* noop */
name|LOG
operator|.
name|error
argument_list|(
literal|"Error closing the file stream: "
operator|+
name|this
operator|.
name|saveAs
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bytesDownloaded
operator|!=
name|size
condition|)
block|{
comment|//if the download is not complete then
comment|//delete the file being downloaded
try|try
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error deleting file in cleanup"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//if the failure is due to a user abort it is returned nomally else an exception is thrown
if|if
condition|(
operator|!
name|aborted
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unable to download "
operator|+
name|fileName
operator|+
literal|" completely. Downloaded "
operator|+
name|bytesDownloaded
operator|+
literal|"!="
operator|+
name|size
argument_list|)
throw|;
block|}
block|}
comment|/**      * Open a new stream using HttpClient      */
DECL|method|getStream
name|FastInputStream
name|getStream
parameter_list|()
throws|throws
name|IOException
block|{
name|SolrServer
name|s
init|=
operator|new
name|HttpSolrServer
argument_list|(
name|masterUrl
argument_list|,
name|myHttpClient
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//XXX use shardhandler
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
comment|//    //the method is command=filecontent
name|params
operator|.
name|set
argument_list|(
name|COMMAND
argument_list|,
name|CMD_GET_FILE
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|GENERATION
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|indexGen
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/replication"
argument_list|)
expr_stmt|;
comment|//add the version to download. This is used to reserve the download
if|if
condition|(
name|isConf
condition|)
block|{
comment|//set cf instead of file for config file
name|params
operator|.
name|set
argument_list|(
name|CONF_FILE_SHORT
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|params
operator|.
name|set
argument_list|(
name|FILE
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useInternal
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|COMPRESSION
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
comment|//use checksum
if|if
condition|(
name|this
operator|.
name|includeChecksum
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|CHECKSUM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//wt=filestream this is a custom protocol
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|,
name|FILE_STREAM
argument_list|)
expr_stmt|;
comment|// This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that
comment|// the server starts from the offset
if|if
condition|(
name|bytesDownloaded
operator|>
literal|0
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|OFFSET
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|bytesDownloaded
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|NamedList
name|response
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|QueryRequest
name|req
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|response
operator|=
name|s
operator|.
name|request
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|is
operator|=
operator|(
name|InputStream
operator|)
name|response
operator|.
name|get
argument_list|(
literal|"stream"
argument_list|)
expr_stmt|;
if|if
condition|(
name|useInternal
condition|)
block|{
name|is
operator|=
operator|new
name|InflaterInputStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FastInputStream
argument_list|(
name|is
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//close stream on error
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not download file '"
operator|+
name|fileName
operator|+
literal|"'"
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getDetails
name|NamedList
name|getDetails
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|COMMAND
argument_list|,
name|CMD_DETAILS
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"slave"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/replication"
argument_list|)
expr_stmt|;
name|SolrServer
name|server
init|=
operator|new
name|HttpSolrServer
argument_list|(
name|masterUrl
argument_list|,
name|myHttpClient
argument_list|)
decl_stmt|;
comment|//XXX use shardhandler
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
return|return
name|server
operator|.
name|request
argument_list|(
name|request
argument_list|)
return|;
block|}
DECL|method|readInterval
specifier|static
name|Integer
name|readInterval
parameter_list|(
name|String
name|interval
parameter_list|)
block|{
if|if
condition|(
name|interval
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|int
name|result
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|interval
operator|!=
literal|null
condition|)
block|{
name|Matcher
name|m
init|=
name|INTERVAL_PATTERN
operator|.
name|matcher
argument_list|(
name|interval
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|hr
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|min
init|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|sec
init|=
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|result
operator|=
literal|0
expr_stmt|;
try|try
block|{
if|if
condition|(
name|sec
operator|!=
literal|null
operator|&&
name|sec
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|result
operator|+=
name|Integer
operator|.
name|parseInt
argument_list|(
name|sec
argument_list|)
expr_stmt|;
if|if
condition|(
name|min
operator|!=
literal|null
operator|&&
name|min
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|result
operator|+=
operator|(
literal|60
operator|*
name|Integer
operator|.
name|parseInt
argument_list|(
name|min
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|hr
operator|!=
literal|null
operator|&&
name|hr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|result
operator|+=
operator|(
literal|60
operator|*
literal|60
operator|*
name|Integer
operator|.
name|parseInt
argument_list|(
name|hr
argument_list|)
operator|)
expr_stmt|;
name|result
operator|*=
literal|1000
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|INTERVAL_ERR_MSG
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|INTERVAL_ERR_MSG
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|destroy
specifier|public
name|void
name|destroy
parameter_list|()
block|{
if|if
condition|(
name|executorService
operator|!=
literal|null
condition|)
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|getMasterUrl
name|String
name|getMasterUrl
parameter_list|()
block|{
return|return
name|masterUrl
return|;
block|}
DECL|method|getPollInterval
name|String
name|getPollInterval
parameter_list|()
block|{
return|return
name|pollIntervalStr
return|;
block|}
DECL|field|MAX_RETRIES
specifier|private
specifier|static
specifier|final
name|int
name|MAX_RETRIES
init|=
literal|5
decl_stmt|;
DECL|field|NO_CONTENT
specifier|private
specifier|static
specifier|final
name|int
name|NO_CONTENT
init|=
literal|1
decl_stmt|;
DECL|field|ERR
specifier|private
specifier|static
specifier|final
name|int
name|ERR
init|=
literal|2
decl_stmt|;
DECL|field|REPLICATION_PROPERTIES
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_PROPERTIES
init|=
literal|"replication.properties"
decl_stmt|;
DECL|field|POLL_INTERVAL
specifier|public
specifier|static
specifier|final
name|String
name|POLL_INTERVAL
init|=
literal|"pollInterval"
decl_stmt|;
DECL|field|INTERVAL_ERR_MSG
specifier|public
specifier|static
specifier|final
name|String
name|INTERVAL_ERR_MSG
init|=
literal|"The "
operator|+
name|POLL_INTERVAL
operator|+
literal|" must be in this format 'HH:mm:ss'"
decl_stmt|;
DECL|field|INTERVAL_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|INTERVAL_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\d*?):(\\d*?):(\\d*)"
argument_list|)
decl_stmt|;
DECL|field|INDEX_REPLICATED_AT
specifier|static
specifier|final
name|String
name|INDEX_REPLICATED_AT
init|=
literal|"indexReplicatedAt"
decl_stmt|;
DECL|field|TIMES_INDEX_REPLICATED
specifier|static
specifier|final
name|String
name|TIMES_INDEX_REPLICATED
init|=
literal|"timesIndexReplicated"
decl_stmt|;
DECL|field|CONF_FILES_REPLICATED
specifier|static
specifier|final
name|String
name|CONF_FILES_REPLICATED
init|=
literal|"confFilesReplicated"
decl_stmt|;
DECL|field|CONF_FILES_REPLICATED_AT
specifier|static
specifier|final
name|String
name|CONF_FILES_REPLICATED_AT
init|=
literal|"confFilesReplicatedAt"
decl_stmt|;
DECL|field|TIMES_CONFIG_REPLICATED
specifier|static
specifier|final
name|String
name|TIMES_CONFIG_REPLICATED
init|=
literal|"timesConfigReplicated"
decl_stmt|;
DECL|field|LAST_CYCLE_BYTES_DOWNLOADED
specifier|static
specifier|final
name|String
name|LAST_CYCLE_BYTES_DOWNLOADED
init|=
literal|"lastCycleBytesDownloaded"
decl_stmt|;
DECL|field|TIMES_FAILED
specifier|static
specifier|final
name|String
name|TIMES_FAILED
init|=
literal|"timesFailed"
decl_stmt|;
DECL|field|REPLICATION_FAILED_AT
specifier|static
specifier|final
name|String
name|REPLICATION_FAILED_AT
init|=
literal|"replicationFailedAt"
decl_stmt|;
DECL|field|PREVIOUS_CYCLE_TIME_TAKEN
specifier|static
specifier|final
name|String
name|PREVIOUS_CYCLE_TIME_TAKEN
init|=
literal|"previousCycleTimeInSeconds"
decl_stmt|;
DECL|field|INDEX_REPLICATED_AT_LIST
specifier|static
specifier|final
name|String
name|INDEX_REPLICATED_AT_LIST
init|=
literal|"indexReplicatedAtList"
decl_stmt|;
DECL|field|REPLICATION_FAILED_AT_LIST
specifier|static
specifier|final
name|String
name|REPLICATION_FAILED_AT_LIST
init|=
literal|"replicationFailedAtList"
decl_stmt|;
block|}
end_class
end_unit
