begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.admin
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CommonsHttpSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|CloudDescriptor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ZkController
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|CloudState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
operator|.
name|CoreAdminAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|UpdateParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CloseHook
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreDescriptor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|DirectoryFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|RequestHandlerBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|MergeIndexesCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|UpdateRequestProcessor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|UpdateRequestProcessorChain
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|NumberUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  *  * @since solr 1.3  */
end_comment
begin_class
DECL|class|CoreAdminHandler
specifier|public
class|class
name|CoreAdminHandler
extends|extends
name|RequestHandlerBase
block|{
DECL|field|log
specifier|protected
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CoreAdminHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|coreContainer
specifier|protected
specifier|final
name|CoreContainer
name|coreContainer
decl_stmt|;
DECL|method|CoreAdminHandler
specifier|public
name|CoreAdminHandler
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
comment|// Unlike most request handlers, CoreContainer initialization
comment|// should happen in the constructor...
name|this
operator|.
name|coreContainer
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Overloaded ctor to inject CoreContainer into the handler.    *    * @param coreContainer Core Container of the solr webapp installed.    */
DECL|method|CoreAdminHandler
specifier|public
name|CoreAdminHandler
parameter_list|(
specifier|final
name|CoreContainer
name|coreContainer
parameter_list|)
block|{
name|this
operator|.
name|coreContainer
operator|=
name|coreContainer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|final
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"CoreAdminHandler should not be configured in solrconf.xml\n"
operator|+
literal|"it is a special Handler configured directly by the RequestDispatcher"
argument_list|)
throw|;
block|}
comment|/**    * The instance of CoreContainer this handler handles. This should be the CoreContainer instance that created this    * handler.    *    * @return a CoreContainer instance    */
DECL|method|getCoreContainer
specifier|public
name|CoreContainer
name|getCoreContainer
parameter_list|()
block|{
return|return
name|this
operator|.
name|coreContainer
return|;
block|}
annotation|@
name|Override
DECL|method|handleRequestBody
specifier|public
name|void
name|handleRequestBody
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Make sure the cores is enabled
name|CoreContainer
name|cores
init|=
name|getCoreContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|cores
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Core container instance missing"
argument_list|)
throw|;
block|}
name|boolean
name|doPersist
init|=
literal|false
decl_stmt|;
comment|// Pick the action
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|CoreAdminAction
name|action
init|=
name|CoreAdminAction
operator|.
name|STATUS
decl_stmt|;
name|String
name|a
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|action
operator|=
name|CoreAdminAction
operator|.
name|get
argument_list|(
name|a
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
name|doPersist
operator|=
name|this
operator|.
name|handleCustomAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|CREATE
case|:
block|{
name|doPersist
operator|=
name|this
operator|.
name|handleCreateAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RENAME
case|:
block|{
name|doPersist
operator|=
name|this
operator|.
name|handleRenameAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ALIAS
case|:
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"'ALIAS' is not supported "
operator|+
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|)
argument_list|)
throw|;
block|}
case|case
name|UNLOAD
case|:
block|{
name|doPersist
operator|=
name|this
operator|.
name|handleUnloadAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|STATUS
case|:
block|{
name|doPersist
operator|=
name|this
operator|.
name|handleStatusAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PERSIST
case|:
block|{
name|doPersist
operator|=
name|this
operator|.
name|handlePersistAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RELOAD
case|:
block|{
name|doPersist
operator|=
name|this
operator|.
name|handleReloadAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SWAP
case|:
block|{
name|doPersist
operator|=
name|this
operator|.
name|handleSwapAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MERGEINDEXES
case|:
block|{
name|doPersist
operator|=
name|this
operator|.
name|handleMergeAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PREPRECOVERY
case|:
block|{
name|this
operator|.
name|handleWaitForStateAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|REQUESTRECOVERY
case|:
block|{
name|this
operator|.
name|handleRequestRecoveryAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DISTRIBURL
case|:
block|{
name|this
operator|.
name|handleDistribUrlAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
name|doPersist
operator|=
name|this
operator|.
name|handleCustomAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LOAD
case|:
break|break;
block|}
block|}
comment|// Should we persist the changes?
if|if
condition|(
name|doPersist
condition|)
block|{
name|cores
operator|.
name|persist
argument_list|()
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"saved"
argument_list|,
name|cores
operator|.
name|getConfigFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rsp
operator|.
name|setHttpCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|handleMergeAction
specifier|protected
name|boolean
name|handleMergeAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|required
argument_list|()
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
name|SolrCore
name|core
init|=
name|coreContainer
operator|.
name|getCore
argument_list|(
name|cname
argument_list|)
decl_stmt|;
name|SolrQueryRequest
name|wrappedReq
init|=
literal|null
decl_stmt|;
name|SolrCore
index|[]
name|sourceCores
init|=
literal|null
decl_stmt|;
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
index|[]
name|searchers
init|=
literal|null
decl_stmt|;
comment|// stores readers created from indexDir param values
name|DirectoryReader
index|[]
name|readersToBeClosed
init|=
literal|null
decl_stmt|;
name|Directory
index|[]
name|dirsToBeReleased
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|String
index|[]
name|dirNames
init|=
name|params
operator|.
name|getParams
argument_list|(
name|CoreAdminParams
operator|.
name|INDEX_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirNames
operator|==
literal|null
operator|||
name|dirNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|String
index|[]
name|sources
init|=
name|params
operator|.
name|getParams
argument_list|(
literal|"srcCore"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sources
operator|==
literal|null
operator|||
name|sources
operator|.
name|length
operator|==
literal|0
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"At least one indexDir or srcCore must be specified"
argument_list|)
throw|;
name|sourceCores
operator|=
operator|new
name|SolrCore
index|[
name|sources
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sources
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|source
init|=
name|sources
index|[
name|i
index|]
decl_stmt|;
name|SolrCore
name|srcCore
init|=
name|coreContainer
operator|.
name|getCore
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcCore
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Core: "
operator|+
name|source
operator|+
literal|" does not exist"
argument_list|)
throw|;
name|sourceCores
index|[
name|i
index|]
operator|=
name|srcCore
expr_stmt|;
block|}
block|}
else|else
block|{
name|readersToBeClosed
operator|=
operator|new
name|DirectoryReader
index|[
name|dirNames
operator|.
name|length
index|]
expr_stmt|;
name|dirsToBeReleased
operator|=
operator|new
name|Directory
index|[
name|dirNames
operator|.
name|length
index|]
expr_stmt|;
name|DirectoryFactory
name|dirFactory
init|=
name|core
operator|.
name|getDirectoryFactory
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Directory
name|dir
init|=
name|dirFactory
operator|.
name|get
argument_list|(
name|dirNames
index|[
name|i
index|]
argument_list|,
name|core
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|mainIndexConfig
operator|.
name|lockType
argument_list|)
decl_stmt|;
name|dirsToBeReleased
index|[
name|i
index|]
operator|=
name|dir
expr_stmt|;
comment|// TODO: why doesn't this use the IR factory? what is going on here?
name|readersToBeClosed
index|[
name|i
index|]
operator|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
name|DirectoryReader
index|[]
name|readers
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|readersToBeClosed
operator|!=
literal|null
condition|)
block|{
name|readers
operator|=
name|readersToBeClosed
expr_stmt|;
block|}
else|else
block|{
name|readers
operator|=
operator|new
name|DirectoryReader
index|[
name|sourceCores
operator|.
name|length
index|]
expr_stmt|;
name|searchers
operator|=
operator|new
name|RefCounted
index|[
name|sourceCores
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceCores
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SolrCore
name|solrCore
init|=
name|sourceCores
index|[
name|i
index|]
decl_stmt|;
comment|// record the searchers so that we can decref
name|searchers
index|[
name|i
index|]
operator|=
name|solrCore
operator|.
name|getSearcher
argument_list|()
expr_stmt|;
name|readers
index|[
name|i
index|]
operator|=
name|searchers
index|[
name|i
index|]
operator|.
name|get
argument_list|()
operator|.
name|getIndexReader
argument_list|()
expr_stmt|;
block|}
block|}
name|UpdateRequestProcessorChain
name|processorChain
init|=
name|core
operator|.
name|getUpdateProcessingChain
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|UpdateParams
operator|.
name|UPDATE_CHAIN
argument_list|)
argument_list|)
decl_stmt|;
name|wrappedReq
operator|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateRequestProcessor
name|processor
init|=
name|processorChain
operator|.
name|createProcessor
argument_list|(
name|wrappedReq
argument_list|,
name|rsp
argument_list|)
decl_stmt|;
name|processor
operator|.
name|processMergeIndexes
argument_list|(
operator|new
name|MergeIndexesCommand
argument_list|(
name|readers
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|searchers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcher
range|:
name|searchers
control|)
block|{
if|if
condition|(
name|searcher
operator|!=
literal|null
condition|)
name|searcher
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sourceCores
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SolrCore
name|solrCore
range|:
name|sourceCores
control|)
block|{
if|if
condition|(
name|solrCore
operator|!=
literal|null
condition|)
name|solrCore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|readersToBeClosed
operator|!=
literal|null
condition|)
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|readersToBeClosed
argument_list|)
expr_stmt|;
if|if
condition|(
name|dirsToBeReleased
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Directory
name|dir
range|:
name|dirsToBeReleased
control|)
block|{
name|DirectoryFactory
name|dirFactory
init|=
name|core
operator|.
name|getDirectoryFactory
argument_list|()
decl_stmt|;
name|dirFactory
operator|.
name|release
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|wrappedReq
operator|!=
literal|null
condition|)
name|wrappedReq
operator|.
name|close
argument_list|()
expr_stmt|;
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|coreContainer
operator|.
name|isPersistent
argument_list|()
return|;
block|}
comment|/**    * Handle Custom Action.    *<p/>    * This method could be overridden by derived classes to handle custom actions.<br> By default - this method throws a    * solr exception. Derived classes are free to write their derivation if necessary.    */
DECL|method|handleCustomAction
specifier|protected
name|boolean
name|handleCustomAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unsupported operation: "
operator|+
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|)
argument_list|)
throw|;
block|}
comment|/**    * Handle 'CREATE' action.    *    * @param req    * @param rsp    *    * @return true if a modification has resulted that requires persistance     *         of the CoreContainer configuration.    *    * @throws SolrException in case of a configuration error.    */
DECL|method|handleCreateAction
specifier|protected
name|boolean
name|handleCreateAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|SolrException
block|{
try|try
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|String
name|instanceDir
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|INSTANCE_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|instanceDir
operator|==
literal|null
condition|)
block|{
comment|// instanceDir = coreContainer.getSolrHome() + "/" + name;
name|instanceDir
operator|=
name|name
expr_stmt|;
comment|// bare name is already relative to solr home
block|}
name|CoreDescriptor
name|dcore
init|=
operator|new
name|CoreDescriptor
argument_list|(
name|coreContainer
argument_list|,
name|name
argument_list|,
name|instanceDir
argument_list|)
decl_stmt|;
comment|//  fillup optional parameters
name|String
name|opts
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CONFIG
argument_list|)
decl_stmt|;
if|if
condition|(
name|opts
operator|!=
literal|null
condition|)
name|dcore
operator|.
name|setConfigName
argument_list|(
name|opts
argument_list|)
expr_stmt|;
name|opts
operator|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|SCHEMA
argument_list|)
expr_stmt|;
if|if
condition|(
name|opts
operator|!=
literal|null
condition|)
name|dcore
operator|.
name|setSchemaName
argument_list|(
name|opts
argument_list|)
expr_stmt|;
name|opts
operator|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|DATA_DIR
argument_list|)
expr_stmt|;
if|if
condition|(
name|opts
operator|!=
literal|null
condition|)
name|dcore
operator|.
name|setDataDir
argument_list|(
name|opts
argument_list|)
expr_stmt|;
name|CloudDescriptor
name|cd
init|=
name|dcore
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
name|cd
operator|!=
literal|null
condition|)
block|{
name|cd
operator|.
name|setParams
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
name|opts
operator|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|opts
operator|!=
literal|null
condition|)
name|cd
operator|.
name|setCollectionName
argument_list|(
name|opts
argument_list|)
expr_stmt|;
name|opts
operator|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|SHARD
argument_list|)
expr_stmt|;
if|if
condition|(
name|opts
operator|!=
literal|null
condition|)
name|cd
operator|.
name|setShardId
argument_list|(
name|opts
argument_list|)
expr_stmt|;
name|opts
operator|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|ROLES
argument_list|)
expr_stmt|;
if|if
condition|(
name|opts
operator|!=
literal|null
condition|)
name|cd
operator|.
name|setRoles
argument_list|(
name|opts
argument_list|)
expr_stmt|;
name|Integer
name|numShards
init|=
name|params
operator|.
name|getInt
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|numShards
operator|!=
literal|null
condition|)
name|cd
operator|.
name|setNumShards
argument_list|(
name|numShards
argument_list|)
expr_stmt|;
block|}
comment|// Process all property.name=value parameters and set them as name=value core properties
name|Properties
name|coreProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|parameterNamesIterator
init|=
name|params
operator|.
name|getParameterNamesIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|parameterNamesIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|parameterName
init|=
name|parameterNamesIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameterName
operator|.
name|startsWith
argument_list|(
name|CoreAdminParams
operator|.
name|PROPERTY_PREFIX
argument_list|)
condition|)
block|{
name|String
name|parameterValue
init|=
name|params
operator|.
name|get
argument_list|(
name|parameterName
argument_list|)
decl_stmt|;
name|String
name|propertyName
init|=
name|parameterName
operator|.
name|substring
argument_list|(
name|CoreAdminParams
operator|.
name|PROPERTY_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
comment|// skip prefix
name|coreProperties
operator|.
name|put
argument_list|(
name|propertyName
argument_list|,
name|parameterValue
argument_list|)
expr_stmt|;
block|}
block|}
name|dcore
operator|.
name|setCoreProperties
argument_list|(
name|coreProperties
argument_list|)
expr_stmt|;
name|SolrCore
name|core
init|=
name|coreContainer
operator|.
name|create
argument_list|(
name|dcore
argument_list|)
decl_stmt|;
name|coreContainer
operator|.
name|register
argument_list|(
name|name
argument_list|,
name|core
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"core"
argument_list|,
name|core
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|coreContainer
operator|.
name|isPersistent
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Error executing default implementation of CREATE"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Handle "RENAME" Action    *    * @param req    * @param rsp    *    * @return true if a modification has resulted that requires persistance     *         of the CoreContainer configuration.    *    * @throws SolrException    */
DECL|method|handleRenameAction
specifier|protected
name|boolean
name|handleRenameAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|SolrException
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|OTHER
argument_list|)
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
name|boolean
name|doPersist
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|cname
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
name|doPersist
return|;
name|doPersist
operator|=
name|coreContainer
operator|.
name|isPersistent
argument_list|()
expr_stmt|;
name|coreContainer
operator|.
name|rename
argument_list|(
name|cname
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|doPersist
return|;
block|}
comment|/**    * Handle "ALIAS" action    *    * @param req    * @param rsp    *    * @return true if a modification has resulted that requires persistance     *         of the CoreContainer configuration.    */
annotation|@
name|Deprecated
DECL|method|handleAliasAction
specifier|protected
name|boolean
name|handleAliasAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|OTHER
argument_list|)
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
name|boolean
name|doPersist
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|cname
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
name|doPersist
return|;
name|SolrCore
name|core
init|=
name|coreContainer
operator|.
name|getCore
argument_list|(
name|cname
argument_list|)
decl_stmt|;
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|doPersist
operator|=
name|coreContainer
operator|.
name|isPersistent
argument_list|()
expr_stmt|;
name|coreContainer
operator|.
name|register
argument_list|(
name|name
argument_list|,
name|core
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// no core.close() since each entry in the cores map should increase the ref
block|}
return|return
name|doPersist
return|;
block|}
comment|/**    * Handle "UNLOAD" Action    *    * @param req    * @param rsp    *    * @return true if a modification has resulted that requires persistance     *         of the CoreContainer configuration.    */
DECL|method|handleUnloadAction
specifier|protected
name|boolean
name|handleUnloadAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|SolrException
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
name|SolrCore
name|core
init|=
name|coreContainer
operator|.
name|remove
argument_list|(
name|cname
argument_list|)
decl_stmt|;
if|if
condition|(
name|core
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No such core exists '"
operator|+
name|cname
operator|+
literal|"'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|params
operator|.
name|getBool
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_INDEX
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|core
operator|.
name|addCloseHook
argument_list|(
operator|new
name|CloseHook
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|preClose
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|void
name|postClose
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|File
name|dataDir
init|=
operator|new
name|File
argument_list|(
name|core
operator|.
name|getIndexDir
argument_list|()
argument_list|)
decl_stmt|;
name|File
index|[]
name|files
init|=
name|dataDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|delete
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" could not be deleted on core unload"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|dataDir
operator|.
name|delete
argument_list|()
condition|)
name|log
operator|.
name|error
argument_list|(
name|dataDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" could not be deleted on core unload"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
name|dataDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" could not be deleted on core unload"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|coreContainer
operator|.
name|isPersistent
argument_list|()
return|;
block|}
comment|/**    * Handle "STATUS" action    *    * @param req    * @param rsp    *    * @return true if a modification has resulted that requires persistance     *         of the CoreContainer configuration.    */
DECL|method|handleStatusAction
specifier|protected
name|boolean
name|handleStatusAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|SolrException
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
name|boolean
name|doPersist
init|=
literal|false
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|status
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|cname
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|coreContainer
operator|.
name|getCoreNames
argument_list|()
control|)
block|{
name|status
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|getCoreStatus
argument_list|(
name|coreContainer
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|status
operator|.
name|add
argument_list|(
name|cname
argument_list|,
name|getCoreStatus
argument_list|(
name|coreContainer
argument_list|,
name|cname
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rsp
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|doPersist
operator|=
literal|false
expr_stmt|;
comment|// no state change
return|return
name|doPersist
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error handling 'status' action "
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Handler "PERSIST" action    *    * @param req    * @param rsp    *    * @return true if a modification has resulted that requires persistance     *         of the CoreContainer configuration.    *    * @throws SolrException    */
DECL|method|handlePersistAction
specifier|protected
name|boolean
name|handlePersistAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|SolrException
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|boolean
name|doPersist
init|=
literal|false
decl_stmt|;
name|String
name|fileName
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileName
operator|!=
literal|null
condition|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|coreContainer
operator|.
name|getConfigFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|coreContainer
operator|.
name|persistFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"saved"
argument_list|,
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|doPersist
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|coreContainer
operator|.
name|isPersistent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|FORBIDDEN
argument_list|,
literal|"Persistence is not enabled"
argument_list|)
throw|;
block|}
else|else
name|doPersist
operator|=
literal|true
expr_stmt|;
return|return
name|doPersist
return|;
block|}
comment|/**    * Handler "RELOAD" action    *    * @param req    * @param rsp    *    * @return true if a modification has resulted that requires persistance     *         of the CoreContainer configuration.    */
DECL|method|handleReloadAction
specifier|protected
name|boolean
name|handleReloadAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
try|try
block|{
name|coreContainer
operator|.
name|reload
argument_list|(
name|cname
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// no change on reload
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error handling 'reload' action"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Handle "SWAP" action    *    * @param req    * @param rsp    *    * @return true if a modification has resulted that requires persistance     *         of the CoreContainer configuration.    */
DECL|method|handleSwapAction
specifier|protected
name|boolean
name|handleSwapAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
specifier|final
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
specifier|final
name|SolrParams
name|required
init|=
name|params
operator|.
name|required
argument_list|()
decl_stmt|;
specifier|final
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
name|boolean
name|doPersist
init|=
name|params
operator|.
name|getBool
argument_list|(
name|CoreAdminParams
operator|.
name|PERSISTENT
argument_list|,
name|coreContainer
operator|.
name|isPersistent
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|other
init|=
name|required
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|OTHER
argument_list|)
decl_stmt|;
name|coreContainer
operator|.
name|swap
argument_list|(
name|cname
argument_list|,
name|other
argument_list|)
expr_stmt|;
return|return
name|doPersist
return|;
block|}
DECL|method|handleRequestRecoveryAction
specifier|protected
name|void
name|handleRequestRecoveryAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
if|if
condition|(
name|cname
operator|==
literal|null
condition|)
block|{
name|cname
operator|=
literal|""
expr_stmt|;
block|}
name|SolrCore
name|core
init|=
literal|null
decl_stmt|;
try|try
block|{
name|core
operator|=
name|coreContainer
operator|.
name|getCore
argument_list|(
name|cname
argument_list|)
expr_stmt|;
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|doRecovery
argument_list|(
name|coreContainer
argument_list|,
name|cname
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Cound not find core to call recovery:"
operator|+
name|cname
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// no recoveryStrat close for now
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|handleWaitForStateAction
specifier|protected
name|void
name|handleWaitForStateAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
if|if
condition|(
name|cname
operator|==
literal|null
condition|)
block|{
name|cname
operator|=
literal|""
expr_stmt|;
block|}
name|String
name|nodeName
init|=
name|params
operator|.
name|get
argument_list|(
literal|"nodeName"
argument_list|)
decl_stmt|;
name|String
name|coreNodeName
init|=
name|params
operator|.
name|get
argument_list|(
literal|"coreNodeName"
argument_list|)
decl_stmt|;
name|String
name|waitForState
init|=
name|params
operator|.
name|get
argument_list|(
literal|"state"
argument_list|)
decl_stmt|;
name|Boolean
name|checkLive
init|=
name|params
operator|.
name|getBool
argument_list|(
literal|"checkLive"
argument_list|)
decl_stmt|;
name|int
name|pauseFor
init|=
name|params
operator|.
name|getInt
argument_list|(
literal|"pauseFor"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
name|state
init|=
literal|null
decl_stmt|;
name|boolean
name|live
init|=
literal|false
decl_stmt|;
name|int
name|retry
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|SolrCore
name|core
init|=
literal|null
decl_stmt|;
try|try
block|{
name|core
operator|=
name|coreContainer
operator|.
name|getCore
argument_list|(
name|cname
argument_list|)
expr_stmt|;
if|if
condition|(
name|core
operator|==
literal|null
operator|&&
name|retry
operator|==
literal|30
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"core not found:"
operator|+
name|cname
argument_list|)
throw|;
block|}
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
comment|// wait until we are sure the recovering node is ready
comment|// to accept updates
name|CloudDescriptor
name|cloudDescriptor
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
name|CloudState
name|cloudState
init|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getCloudState
argument_list|()
decl_stmt|;
name|String
name|collection
init|=
name|cloudDescriptor
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|Slice
name|slice
init|=
name|cloudState
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|cloudDescriptor
operator|.
name|getShardId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|!=
literal|null
condition|)
block|{
name|ZkNodeProps
name|nodeProps
init|=
name|slice
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
name|coreNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeProps
operator|!=
literal|null
condition|)
block|{
name|state
operator|=
name|nodeProps
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
expr_stmt|;
name|live
operator|=
name|cloudState
operator|.
name|liveNodesContain
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeProps
operator|!=
literal|null
operator|&&
name|state
operator|.
name|equals
argument_list|(
name|waitForState
argument_list|)
condition|)
block|{
if|if
condition|(
name|checkLive
operator|==
literal|null
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|checkLive
operator|&&
name|live
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
operator|!
name|checkLive
operator|&&
operator|!
name|live
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|retry
operator|++
operator|==
literal|30
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"I was asked to wait on state "
operator|+
name|waitForState
operator|+
literal|" for "
operator|+
name|nodeName
operator|+
literal|" but I still do not see the request state. I see state: "
operator|+
name|state
operator|+
literal|" live:"
operator|+
name|live
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
comment|// small safety net for any updates that started with state that
comment|// kept it from sending the update to be buffered -
comment|// pause for a while to let any outstanding updates finish
comment|// System.out.println("I saw state:" + state + " sleep for " + pauseFor +
comment|// " live:" + live);
name|Thread
operator|.
name|sleep
argument_list|(
name|pauseFor
argument_list|)
expr_stmt|;
comment|// solrcloud_debug
comment|// try {;
comment|// LocalSolrQueryRequest r = new LocalSolrQueryRequest(core, new
comment|// ModifiableSolrParams());
comment|// CommitUpdateCommand commitCmd = new CommitUpdateCommand(r, false);
comment|// commitCmd.softCommit = true;
comment|// core.getUpdateHandler().commit(commitCmd);
comment|// RefCounted<SolrIndexSearcher> searchHolder =
comment|// core.getNewestSearcher(false);
comment|// SolrIndexSearcher searcher = searchHolder.get();
comment|// try {
comment|// System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName()
comment|// + " to replicate "
comment|// + searcher.search(new MatchAllDocsQuery(), 1).totalHits + " gen:" +
comment|// core.getDeletionPolicy().getLatestCommit().getGeneration() + " data:" +
comment|// core.getDataDir());
comment|// } finally {
comment|// searchHolder.decref();
comment|// }
comment|// } catch (Exception e) {
comment|//
comment|// }
block|}
DECL|method|handleDistribUrlAction
specifier|protected
name|void
name|handleDistribUrlAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|SolrServerException
block|{
comment|// TODO: finish this and tests
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|SolrParams
name|required
init|=
name|params
operator|.
name|required
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|required
operator|.
name|get
argument_list|(
literal|"path"
argument_list|)
decl_stmt|;
name|String
name|shard
init|=
name|params
operator|.
name|get
argument_list|(
literal|"shard"
argument_list|)
decl_stmt|;
name|String
name|collection
init|=
name|required
operator|.
name|get
argument_list|(
literal|"collection"
argument_list|)
decl_stmt|;
name|SolrCore
name|core
init|=
name|req
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|ZkController
name|zkController
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
decl_stmt|;
if|if
condition|(
name|shard
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|ZkCoreNodeProps
argument_list|>
name|replicas
init|=
name|zkController
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getReplicaProps
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|,
name|zkController
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|core
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ZkCoreNodeProps
name|node
range|:
name|replicas
control|)
block|{
name|CommonsHttpSolrServer
name|server
init|=
operator|new
name|CommonsHttpSolrServer
argument_list|(
name|node
operator|.
name|getCoreUrl
argument_list|()
operator|+
name|path
argument_list|)
decl_stmt|;
name|QueryRequest
name|qr
init|=
operator|new
name|QueryRequest
argument_list|()
decl_stmt|;
name|server
operator|.
name|request
argument_list|(
name|qr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getCoreStatus
specifier|protected
name|NamedList
argument_list|<
name|Object
argument_list|>
name|getCoreStatus
parameter_list|(
name|CoreContainer
name|cores
parameter_list|,
name|String
name|cname
parameter_list|)
throws|throws
name|IOException
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|info
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|SolrCore
name|core
init|=
name|cores
operator|.
name|getCore
argument_list|(
name|cname
argument_list|)
decl_stmt|;
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|info
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
name|core
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"instanceDir"
argument_list|,
name|normalizePath
argument_list|(
name|core
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|getInstanceDir
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"dataDir"
argument_list|,
name|normalizePath
argument_list|(
name|core
operator|.
name|getDataDir
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"startTime"
argument_list|,
operator|new
name|Date
argument_list|(
name|core
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"uptime"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|core
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcher
init|=
name|core
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
try|try
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|indexInfo
init|=
name|LukeRequestHandler
operator|.
name|getIndexInfo
argument_list|(
name|searcher
operator|.
name|get
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|size
init|=
name|getIndexSize
argument_list|(
name|core
argument_list|)
decl_stmt|;
name|indexInfo
operator|.
name|add
argument_list|(
literal|"sizeInBytes"
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|indexInfo
operator|.
name|add
argument_list|(
literal|"size"
argument_list|,
name|NumberUtils
operator|.
name|readableSize
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"index"
argument_list|,
name|indexInfo
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|searcher
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|info
return|;
block|}
DECL|method|getIndexSize
specifier|private
name|long
name|getIndexSize
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
return|return
name|FileUtils
operator|.
name|sizeOfDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|core
operator|.
name|getIndexDir
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|normalizePath
specifier|protected
specifier|static
name|String
name|normalizePath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|path
operator|=
name|path
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
DECL|method|params
specifier|public
specifier|static
name|ModifiableSolrParams
name|params
parameter_list|(
name|String
modifier|...
name|params
parameter_list|)
block|{
name|ModifiableSolrParams
name|msp
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|msp
operator|.
name|add
argument_list|(
name|params
index|[
name|i
index|]
argument_list|,
name|params
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|msp
return|;
block|}
comment|//////////////////////// SolrInfoMBeans methods //////////////////////
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Manage Multiple Solr Cores"
return|;
block|}
annotation|@
name|Override
DECL|method|getVersion
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
literal|"$Revision$"
return|;
block|}
annotation|@
name|Override
DECL|method|getSourceId
specifier|public
name|String
name|getSourceId
parameter_list|()
block|{
return|return
literal|"$Id$"
return|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
literal|"$URL$"
return|;
block|}
block|}
end_class
end_unit
