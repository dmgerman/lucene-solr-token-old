begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.admin
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
package|;
end_package
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|CloudDescriptor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|Overseer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|SyncStrategy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ZkController
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocRouter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
operator|.
name|CoreAdminAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|UpdateParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ExecutorUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreDescriptor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|DirectoryFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|DirectoryFactory
operator|.
name|DirContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|RequestHandlerBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|CommitUpdateCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|MergeIndexesCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|SplitIndexCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateLog
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|UpdateRequestProcessor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|UpdateRequestProcessorChain
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DefaultSolrThreadFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|NumberUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
operator|.
name|DOC_ROUTER
import|;
end_import
begin_comment
comment|/**  *  * @since solr 1.3  */
end_comment
begin_class
DECL|class|CoreAdminHandler
specifier|public
class|class
name|CoreAdminHandler
extends|extends
name|RequestHandlerBase
block|{
DECL|field|log
specifier|protected
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CoreAdminHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|coreContainer
specifier|protected
specifier|final
name|CoreContainer
name|coreContainer
decl_stmt|;
DECL|field|requestStatusMap
specifier|protected
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TaskObject
argument_list|>
argument_list|>
name|requestStatusMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TaskObject
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|parallelExecutor
specifier|protected
specifier|final
name|ExecutorService
name|parallelExecutor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|50
argument_list|,
operator|new
name|DefaultSolrThreadFactory
argument_list|(
literal|"parallelCoreAdminExecutor"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|MAX_TRACKED_REQUESTS
specifier|protected
specifier|static
name|int
name|MAX_TRACKED_REQUESTS
init|=
literal|100
decl_stmt|;
DECL|field|RUNNING
specifier|public
specifier|static
name|String
name|RUNNING
init|=
literal|"running"
decl_stmt|;
DECL|field|COMPLETED
specifier|public
specifier|static
name|String
name|COMPLETED
init|=
literal|"completed"
decl_stmt|;
DECL|field|FAILED
specifier|public
specifier|static
name|String
name|FAILED
init|=
literal|"failed"
decl_stmt|;
DECL|field|RESPONSE
specifier|public
specifier|static
name|String
name|RESPONSE
init|=
literal|"Response"
decl_stmt|;
DECL|field|RESPONSE_STATUS
specifier|public
specifier|static
name|String
name|RESPONSE_STATUS
init|=
literal|"STATUS"
decl_stmt|;
DECL|field|RESPONSE_MESSAGE
specifier|public
specifier|static
name|String
name|RESPONSE_MESSAGE
init|=
literal|"msg"
decl_stmt|;
static|static
block|{
name|requestStatusMap
operator|.
name|put
argument_list|(
name|RUNNING
argument_list|,
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|TaskObject
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|requestStatusMap
operator|.
name|put
argument_list|(
name|COMPLETED
argument_list|,
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|TaskObject
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|requestStatusMap
operator|.
name|put
argument_list|(
name|FAILED
argument_list|,
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|TaskObject
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|CoreAdminHandler
specifier|public
name|CoreAdminHandler
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
comment|// Unlike most request handlers, CoreContainer initialization
comment|// should happen in the constructor...
name|this
operator|.
name|coreContainer
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Overloaded ctor to inject CoreContainer into the handler.    *    * @param coreContainer Core Container of the solr webapp installed.    */
DECL|method|CoreAdminHandler
specifier|public
name|CoreAdminHandler
parameter_list|(
specifier|final
name|CoreContainer
name|coreContainer
parameter_list|)
block|{
name|this
operator|.
name|coreContainer
operator|=
name|coreContainer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|final
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"CoreAdminHandler should not be configured in solrconf.xml\n"
operator|+
literal|"it is a special Handler configured directly by the RequestDispatcher"
argument_list|)
throw|;
block|}
comment|/**    * The instance of CoreContainer this handler handles. This should be the CoreContainer instance that created this    * handler.    *    * @return a CoreContainer instance    */
DECL|method|getCoreContainer
specifier|public
name|CoreContainer
name|getCoreContainer
parameter_list|()
block|{
return|return
name|this
operator|.
name|coreContainer
return|;
block|}
annotation|@
name|Override
DECL|method|handleRequestBody
specifier|public
name|void
name|handleRequestBody
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Make sure the cores is enabled
name|CoreContainer
name|cores
init|=
name|getCoreContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|cores
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Core container instance missing"
argument_list|)
throw|;
block|}
comment|//boolean doPersist = false;
name|String
name|taskId
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"async"
argument_list|)
decl_stmt|;
name|TaskObject
name|taskObject
init|=
operator|new
name|TaskObject
argument_list|(
name|taskId
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskId
operator|!=
literal|null
condition|)
block|{
comment|// Put the tasks into the maps for tracking
if|if
condition|(
name|getMap
argument_list|(
name|RUNNING
argument_list|)
operator|.
name|containsKey
argument_list|(
name|taskId
argument_list|)
operator|||
name|getMap
argument_list|(
name|COMPLETED
argument_list|)
operator|.
name|containsKey
argument_list|(
name|taskId
argument_list|)
operator|||
name|getMap
argument_list|(
name|FAILED
argument_list|)
operator|.
name|containsKey
argument_list|(
name|taskId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Duplicate request with the same requestid found."
argument_list|)
throw|;
block|}
name|addTask
argument_list|(
name|RUNNING
argument_list|,
name|taskObject
argument_list|)
expr_stmt|;
block|}
comment|// Pick the action
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|CoreAdminAction
name|action
init|=
name|CoreAdminAction
operator|.
name|STATUS
decl_stmt|;
name|String
name|a
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|action
operator|=
name|CoreAdminAction
operator|.
name|get
argument_list|(
name|a
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|handleCustomAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|taskId
operator|==
literal|null
condition|)
block|{
name|handleRequestInternal
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ParallelCoreAdminHandlerThread
name|parallelHandlerThread
init|=
operator|new
name|ParallelCoreAdminHandlerThread
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|,
name|action
argument_list|,
name|taskObject
argument_list|)
decl_stmt|;
name|parallelExecutor
operator|.
name|execute
argument_list|(
name|parallelHandlerThread
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleRequestInternal
specifier|protected
name|void
name|handleRequestInternal
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CoreAdminAction
name|action
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|CREATE
case|:
block|{
name|this
operator|.
name|handleCreateAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RENAME
case|:
block|{
name|this
operator|.
name|handleRenameAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|UNLOAD
case|:
block|{
name|this
operator|.
name|handleUnloadAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|STATUS
case|:
block|{
name|this
operator|.
name|handleStatusAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PERSIST
case|:
block|{
name|this
operator|.
name|handlePersistAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RELOAD
case|:
block|{
name|this
operator|.
name|handleReloadAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SWAP
case|:
block|{
name|this
operator|.
name|handleSwapAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MERGEINDEXES
case|:
block|{
name|this
operator|.
name|handleMergeAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SPLIT
case|:
block|{
name|this
operator|.
name|handleSplitAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PREPRECOVERY
case|:
block|{
name|this
operator|.
name|handleWaitForStateAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|REQUESTRECOVERY
case|:
block|{
name|this
operator|.
name|handleRequestRecoveryAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|REQUESTSYNCSHARD
case|:
block|{
name|this
operator|.
name|handleRequestSyncAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// todo : Can this be done by the regular RecoveryStrategy route?
case|case
name|REQUESTAPPLYUPDATES
case|:
block|{
name|this
operator|.
name|handleRequestApplyUpdatesAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|REQUESTBUFFERUPDATES
case|:
block|{
name|this
operator|.
name|handleRequestBufferUpdatesAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|REQUESTSTATUS
case|:
block|{
name|this
operator|.
name|handleRequestActionStatus
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OVERSEEROP
case|:
block|{
name|ZkController
name|zkController
init|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
decl_stmt|;
if|if
condition|(
name|zkController
operator|!=
literal|null
condition|)
block|{
name|String
name|op
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"op"
argument_list|)
decl_stmt|;
name|String
name|electionNode
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"electionNode"
argument_list|)
decl_stmt|;
if|if
condition|(
name|electionNode
operator|!=
literal|null
condition|)
block|{
name|zkController
operator|.
name|rejoinOverseerElection
argument_list|(
name|electionNode
argument_list|,
literal|"rejoinAtHead"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"electionNode is required param"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
default|default:
block|{
name|this
operator|.
name|handleCustomAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LOAD
case|:
break|break;
case|case
name|REJOINLEADERELECTION
case|:
name|ZkController
name|zkController
init|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
decl_stmt|;
if|if
condition|(
name|zkController
operator|!=
literal|null
condition|)
block|{
name|zkController
operator|.
name|rejoinShardLeaderElection
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"zkController is null in CoreAdminHandler.handleRequestInternal:REJOINLEADERELCTIONS. No action taken."
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
name|rsp
operator|.
name|setHttpCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Handle the core admin SPLIT action.    */
DECL|method|handleSplitAction
specifier|protected
name|void
name|handleSplitAction
parameter_list|(
name|SolrQueryRequest
name|adminReq
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrParams
name|params
init|=
name|adminReq
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DocRouter
operator|.
name|Range
argument_list|>
name|ranges
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|pathsArr
init|=
name|params
operator|.
name|getParams
argument_list|(
literal|"path"
argument_list|)
decl_stmt|;
name|String
name|rangesStr
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|RANGES
argument_list|)
decl_stmt|;
comment|// ranges=a-b,c-d,e-f
if|if
condition|(
name|rangesStr
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|rangesArr
init|=
name|rangesStr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|rangesArr
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"There must be at least one range specified to split an index"
argument_list|)
throw|;
block|}
else|else
block|{
name|ranges
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rangesArr
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|r
range|:
name|rangesArr
control|)
block|{
try|try
block|{
name|ranges
operator|.
name|add
argument_list|(
name|DocRouter
operator|.
name|DEFAULT
operator|.
name|fromString
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Exception parsing hexadecimal hash range: "
operator|+
name|r
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
name|String
name|splitKey
init|=
name|params
operator|.
name|get
argument_list|(
literal|"split.key"
argument_list|)
decl_stmt|;
name|String
index|[]
name|newCoreNames
init|=
name|params
operator|.
name|getParams
argument_list|(
literal|"targetCore"
argument_list|)
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|pathsArr
operator|==
literal|null
operator|||
name|pathsArr
operator|.
name|length
operator|==
literal|0
operator|)
operator|&&
operator|(
name|newCoreNames
operator|==
literal|null
operator|||
name|newCoreNames
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Either path or targetCore param must be specified"
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Invoked split action for core: "
operator|+
name|cname
argument_list|)
expr_stmt|;
name|SolrCore
name|core
init|=
name|coreContainer
operator|.
name|getCore
argument_list|(
name|cname
argument_list|)
decl_stmt|;
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SolrCore
argument_list|>
name|newCores
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// TODO: allow use of rangesStr in the future
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
literal|null
decl_stmt|;
name|int
name|partitions
init|=
name|pathsArr
operator|!=
literal|null
condition|?
name|pathsArr
operator|.
name|length
else|:
name|newCoreNames
operator|.
name|length
decl_stmt|;
name|DocRouter
name|router
init|=
literal|null
decl_stmt|;
name|String
name|routeFieldName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|coreContainer
operator|.
name|isZooKeeperAware
argument_list|()
condition|)
block|{
name|ClusterState
name|clusterState
init|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|String
name|collectionName
init|=
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|DocCollection
name|collection
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|String
name|sliceName
init|=
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getShardId
argument_list|()
decl_stmt|;
name|Slice
name|slice
init|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collectionName
argument_list|,
name|sliceName
argument_list|)
decl_stmt|;
name|router
operator|=
name|collection
operator|.
name|getRouter
argument_list|()
operator|!=
literal|null
condition|?
name|collection
operator|.
name|getRouter
argument_list|()
else|:
name|DocRouter
operator|.
name|DEFAULT
expr_stmt|;
if|if
condition|(
name|ranges
operator|==
literal|null
condition|)
block|{
name|DocRouter
operator|.
name|Range
name|currentRange
init|=
name|slice
operator|.
name|getRange
argument_list|()
decl_stmt|;
name|ranges
operator|=
name|currentRange
operator|!=
literal|null
condition|?
name|router
operator|.
name|partitionRange
argument_list|(
name|partitions
argument_list|,
name|currentRange
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
name|Object
name|routerObj
init|=
name|collection
operator|.
name|get
argument_list|(
name|DOC_ROUTER
argument_list|)
decl_stmt|;
comment|// for back-compat with Solr 4.4
if|if
condition|(
name|routerObj
operator|!=
literal|null
operator|&&
name|routerObj
operator|instanceof
name|Map
condition|)
block|{
name|Map
name|routerProps
init|=
operator|(
name|Map
operator|)
name|routerObj
decl_stmt|;
name|routeFieldName
operator|=
operator|(
name|String
operator|)
name|routerProps
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pathsArr
operator|==
literal|null
condition|)
block|{
name|newCores
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|newCoreName
range|:
name|newCoreNames
control|)
block|{
name|SolrCore
name|newcore
init|=
name|coreContainer
operator|.
name|getCore
argument_list|(
name|newCoreName
argument_list|)
decl_stmt|;
if|if
condition|(
name|newcore
operator|!=
literal|null
condition|)
block|{
name|newCores
operator|.
name|add
argument_list|(
name|newcore
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Core with core name "
operator|+
name|newCoreName
operator|+
literal|" expected but doesn't exist."
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|paths
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|pathsArr
argument_list|)
expr_stmt|;
block|}
name|SplitIndexCommand
name|cmd
init|=
operator|new
name|SplitIndexCommand
argument_list|(
name|req
argument_list|,
name|paths
argument_list|,
name|newCores
argument_list|,
name|ranges
argument_list|,
name|router
argument_list|,
name|routeFieldName
argument_list|,
name|splitKey
argument_list|)
decl_stmt|;
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|split
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
comment|// After the split has completed, someone (here?) should start the process of replaying the buffered updates.
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"ERROR executing split:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|req
operator|!=
literal|null
condition|)
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|newCores
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SolrCore
name|newCore
range|:
name|newCores
control|)
block|{
name|newCore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|handleMergeAction
specifier|protected
name|void
name|handleMergeAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|required
argument_list|()
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
name|SolrCore
name|core
init|=
name|coreContainer
operator|.
name|getCore
argument_list|(
name|cname
argument_list|)
decl_stmt|;
name|SolrQueryRequest
name|wrappedReq
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|SolrCore
argument_list|>
name|sourceCores
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
argument_list|>
name|searchers
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// stores readers created from indexDir param values
name|List
argument_list|<
name|DirectoryReader
argument_list|>
name|readersToBeClosed
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Directory
argument_list|>
name|dirsToBeReleased
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|String
index|[]
name|dirNames
init|=
name|params
operator|.
name|getParams
argument_list|(
name|CoreAdminParams
operator|.
name|INDEX_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirNames
operator|==
literal|null
operator|||
name|dirNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|String
index|[]
name|sources
init|=
name|params
operator|.
name|getParams
argument_list|(
literal|"srcCore"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sources
operator|==
literal|null
operator|||
name|sources
operator|.
name|length
operator|==
literal|0
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"At least one indexDir or srcCore must be specified"
argument_list|)
throw|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sources
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|source
init|=
name|sources
index|[
name|i
index|]
decl_stmt|;
name|SolrCore
name|srcCore
init|=
name|coreContainer
operator|.
name|getCore
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcCore
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Core: "
operator|+
name|source
operator|+
literal|" does not exist"
argument_list|)
throw|;
name|sourceCores
operator|.
name|add
argument_list|(
name|srcCore
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|DirectoryFactory
name|dirFactory
init|=
name|core
operator|.
name|getDirectoryFactory
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Directory
name|dir
init|=
name|dirFactory
operator|.
name|get
argument_list|(
name|dirNames
index|[
name|i
index|]
argument_list|,
name|DirContext
operator|.
name|DEFAULT
argument_list|,
name|core
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|indexConfig
operator|.
name|lockType
argument_list|)
decl_stmt|;
name|dirsToBeReleased
operator|.
name|add
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// TODO: why doesn't this use the IR factory? what is going on here?
name|readersToBeClosed
operator|.
name|add
argument_list|(
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|DirectoryReader
argument_list|>
name|readers
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|readersToBeClosed
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|readers
operator|=
name|readersToBeClosed
expr_stmt|;
block|}
else|else
block|{
name|readers
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|SolrCore
name|solrCore
range|:
name|sourceCores
control|)
block|{
comment|// record the searchers so that we can decref
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcher
init|=
name|solrCore
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
name|searchers
operator|.
name|add
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
name|readers
operator|.
name|add
argument_list|(
name|searcher
operator|.
name|get
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|UpdateRequestProcessorChain
name|processorChain
init|=
name|core
operator|.
name|getUpdateProcessingChain
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|UpdateParams
operator|.
name|UPDATE_CHAIN
argument_list|)
argument_list|)
decl_stmt|;
name|wrappedReq
operator|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateRequestProcessor
name|processor
init|=
name|processorChain
operator|.
name|createProcessor
argument_list|(
name|wrappedReq
argument_list|,
name|rsp
argument_list|)
decl_stmt|;
name|processor
operator|.
name|processMergeIndexes
argument_list|(
operator|new
name|MergeIndexesCommand
argument_list|(
name|readers
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// log and rethrow so that if the finally fails we don't lose the original problem
name|log
operator|.
name|error
argument_list|(
literal|"ERROR executing merge:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
for|for
control|(
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcher
range|:
name|searchers
control|)
block|{
if|if
condition|(
name|searcher
operator|!=
literal|null
condition|)
name|searcher
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|SolrCore
name|solrCore
range|:
name|sourceCores
control|)
block|{
if|if
condition|(
name|solrCore
operator|!=
literal|null
condition|)
name|solrCore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|readersToBeClosed
argument_list|)
expr_stmt|;
for|for
control|(
name|Directory
name|dir
range|:
name|dirsToBeReleased
control|)
block|{
name|DirectoryFactory
name|dirFactory
init|=
name|core
operator|.
name|getDirectoryFactory
argument_list|()
decl_stmt|;
name|dirFactory
operator|.
name|release
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wrappedReq
operator|!=
literal|null
condition|)
name|wrappedReq
operator|.
name|close
argument_list|()
expr_stmt|;
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Handle Custom Action.    *<p>    * This method could be overridden by derived classes to handle custom actions.<br> By default - this method throws a    * solr exception. Derived classes are free to write their derivation if necessary.    */
DECL|method|handleCustomAction
specifier|protected
name|void
name|handleCustomAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unsupported operation: "
operator|+
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|)
argument_list|)
throw|;
block|}
DECL|field|paramToProp
specifier|public
specifier|static
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|paramToProp
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|CONFIG
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_CONFIG
argument_list|)
decl|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|SCHEMA
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_SCHEMA
argument_list|)
decl|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|DATA_DIR
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_DATADIR
argument_list|)
decl|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|ULOG_DIR
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_ULOGDIR
argument_list|)
decl|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|CONFIGSET
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_CONFIGSET
argument_list|)
decl|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|LOAD_ON_STARTUP
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_LOADONSTARTUP
argument_list|)
decl|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|TRANSIENT
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_TRANSIENT
argument_list|)
decl|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|SHARD
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_SHARD
argument_list|)
decl|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_COLLECTION
argument_list|)
decl|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|ROLES
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_ROLES
argument_list|)
decl|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|CORE_NODE_NAME
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_NODE_NAME
argument_list|)
decl|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
name|CloudDescriptor
operator|.
name|NUM_SHARDS
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
DECL|field|cloudParamToProp
specifier|public
specifier|static
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cloudParamToProp
decl_stmt|;
DECL|method|buildCoreDescriptor
specifier|protected
specifier|static
name|CoreDescriptor
name|buildCoreDescriptor
parameter_list|(
name|SolrParams
name|params
parameter_list|,
name|CoreContainer
name|container
parameter_list|)
block|{
name|String
name|name
init|=
name|checkNotEmpty
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|)
argument_list|,
literal|"Missing parameter ["
operator|+
name|CoreAdminParams
operator|.
name|NAME
operator|+
literal|"]"
argument_list|)
decl_stmt|;
name|Properties
name|coreProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|param
range|:
name|paramToProp
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|params
operator|.
name|get
argument_list|(
name|param
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|coreProps
operator|.
name|setProperty
argument_list|(
name|paramToProp
operator|.
name|get
argument_list|(
name|param
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|String
argument_list|>
name|paramsIt
init|=
name|params
operator|.
name|getParameterNamesIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|paramsIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|param
init|=
name|paramsIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|param
operator|.
name|startsWith
argument_list|(
name|CoreAdminParams
operator|.
name|PROPERTY_PREFIX
argument_list|)
condition|)
continue|continue;
name|String
name|propName
init|=
name|param
operator|.
name|substring
argument_list|(
name|CoreAdminParams
operator|.
name|PROPERTY_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|propValue
init|=
name|params
operator|.
name|get
argument_list|(
name|param
argument_list|)
decl_stmt|;
name|coreProps
operator|.
name|setProperty
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
name|String
name|instancedir
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|INSTANCE_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|instancedir
argument_list|)
operator|&&
name|coreProps
operator|.
name|getProperty
argument_list|(
name|CoreAdminParams
operator|.
name|INSTANCE_DIR
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|instancedir
operator|=
name|coreProps
operator|.
name|getProperty
argument_list|(
name|CoreAdminParams
operator|.
name|INSTANCE_DIR
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|instancedir
argument_list|)
condition|)
block|{
name|instancedir
operator|=
name|name
expr_stmt|;
comment|// will be resolved later against solr.home
comment|//instancedir = container.getSolrHome() + "/" + name;
block|}
return|return
operator|new
name|CoreDescriptor
argument_list|(
name|container
argument_list|,
name|name
argument_list|,
name|instancedir
argument_list|,
name|coreProps
argument_list|,
name|params
argument_list|)
return|;
block|}
DECL|method|checkNotEmpty
specifier|private
specifier|static
name|String
name|checkNotEmpty
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|value
argument_list|)
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|message
argument_list|)
throw|;
return|return
name|value
return|;
block|}
comment|/**    * Handle 'CREATE' action.    *    * @throws SolrException in case of a configuration error.    */
DECL|method|handleCreateAction
specifier|protected
name|void
name|handleCreateAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|SolrException
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"core create command {}"
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|CoreDescriptor
name|dcore
init|=
name|buildCoreDescriptor
argument_list|(
name|params
argument_list|,
name|coreContainer
argument_list|)
decl_stmt|;
if|if
condition|(
name|coreContainer
operator|.
name|getAllCoreNames
argument_list|()
operator|.
name|contains
argument_list|(
name|dcore
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Creating a core with existing name is not allowed"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Core with name '"
operator|+
name|dcore
operator|.
name|getName
argument_list|()
operator|+
literal|"' already exists."
argument_list|)
throw|;
block|}
comment|// TODO this should be moved into CoreContainer, really...
name|boolean
name|preExisitingZkEntry
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|Overseer
operator|.
name|isLegacy
argument_list|(
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterProps
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|dcore
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCoreNodeName
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"non legacy mode coreNodeName missing "
operator|+
name|params
argument_list|)
throw|;
block|}
block|}
name|preExisitingZkEntry
operator|=
name|checkIfCoreNodeNameAlreadyExists
argument_list|(
name|dcore
argument_list|)
expr_stmt|;
block|}
name|SolrCore
name|core
init|=
name|coreContainer
operator|.
name|create
argument_list|(
name|dcore
argument_list|)
decl_stmt|;
comment|// only write out the descriptor if the core is successfully created
name|coreContainer
operator|.
name|getCoresLocator
argument_list|()
operator|.
name|create
argument_list|(
name|coreContainer
argument_list|,
name|dcore
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"core"
argument_list|,
name|core
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|coreContainer
operator|.
name|isZooKeeperAware
argument_list|()
operator|&&
name|dcore
operator|!=
literal|null
operator|&&
operator|!
name|preExisitingZkEntry
condition|)
block|{
try|try
block|{
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|unregister
argument_list|(
name|dcore
operator|.
name|getName
argument_list|()
argument_list|,
name|dcore
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|Throwable
name|tc
init|=
name|ex
decl_stmt|;
name|Throwable
name|c
init|=
literal|null
decl_stmt|;
do|do
block|{
name|tc
operator|=
name|tc
operator|.
name|getCause
argument_list|()
expr_stmt|;
if|if
condition|(
name|tc
operator|!=
literal|null
condition|)
block|{
name|c
operator|=
name|tc
expr_stmt|;
block|}
block|}
do|while
condition|(
name|tc
operator|!=
literal|null
condition|)
do|;
name|String
name|rootMsg
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|rootMsg
operator|=
literal|" Caused by: "
operator|+
name|c
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Error CREATEing SolrCore '"
operator|+
name|dcore
operator|.
name|getName
argument_list|()
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
name|rootMsg
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|checkIfCoreNodeNameAlreadyExists
specifier|private
name|boolean
name|checkIfCoreNodeNameAlreadyExists
parameter_list|(
name|CoreDescriptor
name|dcore
parameter_list|)
block|{
name|ZkStateReader
name|zkStateReader
init|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|DocCollection
name|collection
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollectionOrNull
argument_list|(
name|dcore
operator|.
name|getCollectionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|Slice
argument_list|>
name|slices
init|=
name|collection
operator|.
name|getSlices
argument_list|()
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|slices
control|)
block|{
name|Collection
argument_list|<
name|Replica
argument_list|>
name|replicas
init|=
name|slice
operator|.
name|getReplicas
argument_list|()
decl_stmt|;
for|for
control|(
name|Replica
name|replica
range|:
name|replicas
control|)
block|{
if|if
condition|(
name|replica
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|dcore
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCoreNodeName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Handle "RENAME" Action    */
DECL|method|handleRenameAction
specifier|protected
name|void
name|handleRenameAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|SolrException
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|OTHER
argument_list|)
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
if|if
condition|(
name|cname
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return;
name|coreContainer
operator|.
name|rename
argument_list|(
name|cname
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**    * Handle "UNLOAD" Action    */
DECL|method|handleUnloadAction
specifier|protected
name|void
name|handleUnloadAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|SolrException
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
name|boolean
name|deleteIndexDir
init|=
name|params
operator|.
name|getBool
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_INDEX
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|deleteDataDir
init|=
name|params
operator|.
name|getBool
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_DATA_DIR
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|deleteInstanceDir
init|=
name|params
operator|.
name|getBool
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_INSTANCE_DIR
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|coreContainer
operator|.
name|unload
argument_list|(
name|cname
argument_list|,
name|deleteIndexDir
argument_list|,
name|deleteDataDir
argument_list|,
name|deleteInstanceDir
argument_list|)
expr_stmt|;
block|}
comment|/**    * Handle "STATUS" action    */
DECL|method|handleStatusAction
specifier|protected
name|void
name|handleStatusAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|SolrException
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
name|String
name|indexInfo
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|INDEX_INFO
argument_list|)
decl_stmt|;
name|boolean
name|isIndexInfoNeeded
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
literal|null
operator|==
name|indexInfo
condition|?
literal|"true"
else|:
name|indexInfo
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|status
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|failures
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CoreContainer
operator|.
name|CoreLoadFailure
argument_list|>
name|failure
range|:
name|coreContainer
operator|.
name|getCoreInitFailures
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|failures
operator|.
name|put
argument_list|(
name|failure
operator|.
name|getKey
argument_list|()
argument_list|,
name|failure
operator|.
name|getValue
argument_list|()
operator|.
name|exception
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|cname
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|coreContainer
operator|.
name|getAllCoreNames
argument_list|()
control|)
block|{
name|status
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|getCoreStatus
argument_list|(
name|coreContainer
argument_list|,
name|name
argument_list|,
name|isIndexInfoNeeded
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rsp
operator|.
name|add
argument_list|(
literal|"initFailures"
argument_list|,
name|failures
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|failures
operator|=
name|failures
operator|.
name|containsKey
argument_list|(
name|cname
argument_list|)
condition|?
name|Collections
operator|.
name|singletonMap
argument_list|(
name|cname
argument_list|,
name|failures
operator|.
name|get
argument_list|(
name|cname
argument_list|)
argument_list|)
else|:
name|Collections
operator|.
expr|<
name|String
operator|,
name|Exception
operator|>
name|emptyMap
argument_list|()
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"initFailures"
argument_list|,
name|failures
argument_list|)
expr_stmt|;
name|status
operator|.
name|add
argument_list|(
name|cname
argument_list|,
name|getCoreStatus
argument_list|(
name|coreContainer
argument_list|,
name|cname
argument_list|,
name|isIndexInfoNeeded
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rsp
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error handling 'status' action "
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Handler "PERSIST" action    */
DECL|method|handlePersistAction
specifier|protected
name|void
name|handlePersistAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|SolrException
block|{
name|rsp
operator|.
name|add
argument_list|(
literal|"message"
argument_list|,
literal|"The PERSIST action has been deprecated"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Handler "RELOAD" action    */
DECL|method|handleReloadAction
specifier|protected
name|void
name|handleReloadAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|coreContainer
operator|.
name|getCoreNames
argument_list|()
operator|.
name|contains
argument_list|(
name|cname
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Core with core name ["
operator|+
name|cname
operator|+
literal|"] does not exist."
argument_list|)
throw|;
block|}
try|try
block|{
name|coreContainer
operator|.
name|reload
argument_list|(
name|cname
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error handling 'reload' action"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Handle "REQUESTSTATUS" action    */
DECL|method|handleRequestActionStatus
specifier|protected
name|void
name|handleRequestActionStatus
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|requestId
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|REQUESTID
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Checking request status for : "
operator|+
name|requestId
argument_list|)
expr_stmt|;
if|if
condition|(
name|mapContainsTask
argument_list|(
name|RUNNING
argument_list|,
name|requestId
argument_list|)
condition|)
block|{
name|rsp
operator|.
name|add
argument_list|(
name|RESPONSE_STATUS
argument_list|,
name|RUNNING
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mapContainsTask
argument_list|(
name|COMPLETED
argument_list|,
name|requestId
argument_list|)
condition|)
block|{
name|rsp
operator|.
name|add
argument_list|(
name|RESPONSE_STATUS
argument_list|,
name|COMPLETED
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
name|RESPONSE
argument_list|,
name|getMap
argument_list|(
name|COMPLETED
argument_list|)
operator|.
name|get
argument_list|(
name|requestId
argument_list|)
operator|.
name|getRspObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mapContainsTask
argument_list|(
name|FAILED
argument_list|,
name|requestId
argument_list|)
condition|)
block|{
name|rsp
operator|.
name|add
argument_list|(
name|RESPONSE_STATUS
argument_list|,
name|FAILED
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
name|RESPONSE
argument_list|,
name|getMap
argument_list|(
name|FAILED
argument_list|)
operator|.
name|get
argument_list|(
name|requestId
argument_list|)
operator|.
name|getRspObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rsp
operator|.
name|add
argument_list|(
name|RESPONSE_STATUS
argument_list|,
literal|"notfound"
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
name|RESPONSE_MESSAGE
argument_list|,
literal|"No task found in running, completed or failed tasks"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Handle "SWAP" action    */
DECL|method|handleSwapAction
specifier|protected
name|void
name|handleSwapAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
specifier|final
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
specifier|final
name|SolrParams
name|required
init|=
name|params
operator|.
name|required
argument_list|()
decl_stmt|;
specifier|final
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
name|String
name|other
init|=
name|required
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|OTHER
argument_list|)
decl_stmt|;
name|coreContainer
operator|.
name|swap
argument_list|(
name|cname
argument_list|,
name|other
argument_list|)
expr_stmt|;
block|}
DECL|method|handleRequestRecoveryAction
specifier|protected
name|void
name|handleRequestRecoveryAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"It has been requested that we recover: core="
operator|+
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
if|if
condition|(
name|cname
operator|==
literal|null
condition|)
block|{
name|cname
operator|=
literal|""
expr_stmt|;
block|}
try|try
init|(
name|SolrCore
name|core
init|=
name|coreContainer
operator|.
name|getCore
argument_list|(
name|cname
argument_list|)
init|)
block|{
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|doRecovery
argument_list|(
name|coreContainer
argument_list|,
name|core
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Could not find core to call recovery:"
operator|+
name|cname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|handleRequestSyncAction
specifier|protected
name|void
name|handleRequestSyncAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"I have been requested to sync up my shard"
argument_list|)
expr_stmt|;
name|ZkController
name|zkController
init|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
decl_stmt|;
if|if
condition|(
name|zkController
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Only valid for SolrCloud"
argument_list|)
throw|;
block|}
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
if|if
condition|(
name|cname
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
operator|+
literal|" is required"
argument_list|)
throw|;
block|}
name|SyncStrategy
name|syncStrategy
init|=
literal|null
decl_stmt|;
try|try
init|(
name|SolrCore
name|core
init|=
name|coreContainer
operator|.
name|getCore
argument_list|(
name|cname
argument_list|)
init|)
block|{
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|syncStrategy
operator|=
operator|new
name|SyncStrategy
argument_list|(
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|zkController
operator|.
name|getBaseUrl
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|cname
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|zkController
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|syncStrategy
operator|.
name|sync
argument_list|(
name|zkController
argument_list|,
name|core
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// solrcloud_debug
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
try|try
block|{
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searchHolder
init|=
name|core
operator|.
name|getNewestSearcher
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|SolrIndexSearcher
name|searcher
init|=
name|searchHolder
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" synched "
operator|+
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|searchHolder
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|null
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Sync Failed"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Cound not find core to call sync:"
operator|+
name|cname
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// no recoveryStrat close for now
if|if
condition|(
name|syncStrategy
operator|!=
literal|null
condition|)
block|{
name|syncStrategy
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|handleWaitForStateAction
specifier|protected
name|void
name|handleWaitForStateAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|KeeperException
block|{
specifier|final
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
if|if
condition|(
name|cname
operator|==
literal|null
condition|)
block|{
name|cname
operator|=
literal|""
expr_stmt|;
block|}
name|String
name|nodeName
init|=
name|params
operator|.
name|get
argument_list|(
literal|"nodeName"
argument_list|)
decl_stmt|;
name|String
name|coreNodeName
init|=
name|params
operator|.
name|get
argument_list|(
literal|"coreNodeName"
argument_list|)
decl_stmt|;
name|String
name|waitForState
init|=
name|params
operator|.
name|get
argument_list|(
literal|"state"
argument_list|)
decl_stmt|;
name|Boolean
name|checkLive
init|=
name|params
operator|.
name|getBool
argument_list|(
literal|"checkLive"
argument_list|)
decl_stmt|;
name|Boolean
name|onlyIfLeader
init|=
name|params
operator|.
name|getBool
argument_list|(
literal|"onlyIfLeader"
argument_list|)
decl_stmt|;
name|Boolean
name|onlyIfLeaderActive
init|=
name|params
operator|.
name|getBool
argument_list|(
literal|"onlyIfLeaderActive"
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Going to wait for coreNodeName: "
operator|+
name|coreNodeName
operator|+
literal|", state: "
operator|+
name|waitForState
operator|+
literal|", checkLive: "
operator|+
name|checkLive
operator|+
literal|", onlyIfLeader: "
operator|+
name|onlyIfLeader
operator|+
literal|", onlyIfLeaderActive: "
operator|+
name|onlyIfLeaderActive
argument_list|)
expr_stmt|;
name|int
name|maxTries
init|=
literal|0
decl_stmt|;
name|String
name|state
init|=
literal|null
decl_stmt|;
name|boolean
name|live
init|=
literal|false
decl_stmt|;
name|int
name|retry
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
init|(
name|SolrCore
name|core
init|=
name|coreContainer
operator|.
name|getCore
argument_list|(
name|cname
argument_list|)
init|)
block|{
if|if
condition|(
name|core
operator|==
literal|null
operator|&&
name|retry
operator|==
literal|30
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"core not found:"
operator|+
name|cname
argument_list|)
throw|;
block|}
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|onlyIfLeader
operator|!=
literal|null
operator|&&
name|onlyIfLeader
condition|)
block|{
if|if
condition|(
operator|!
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|isLeader
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"We are not the leader"
argument_list|)
throw|;
block|}
block|}
comment|// wait until we are sure the recovering node is ready
comment|// to accept updates
name|CloudDescriptor
name|cloudDescriptor
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
name|retry
operator|%
literal|15
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|retry
operator|>
literal|0
operator|&&
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|log
operator|.
name|info
argument_list|(
literal|"After "
operator|+
name|retry
operator|+
literal|" seconds, core "
operator|+
name|cname
operator|+
literal|" ("
operator|+
name|cloudDescriptor
operator|.
name|getShardId
argument_list|()
operator|+
literal|" of "
operator|+
name|cloudDescriptor
operator|.
name|getCollectionName
argument_list|()
operator|+
literal|") still does not have state: "
operator|+
name|waitForState
operator|+
literal|"; forcing ClusterState update from ZooKeeper"
argument_list|)
expr_stmt|;
comment|// force a cluster state update
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|updateClusterState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxTries
operator|==
literal|0
condition|)
block|{
comment|// wait long enough for the leader conflict to work itself out plus a little extra
name|int
name|conflictWaitMs
init|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getLeaderConflictResolveWait
argument_list|()
decl_stmt|;
name|maxTries
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|conflictWaitMs
operator|/
literal|1000
argument_list|)
operator|+
literal|3
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Will wait a max of "
operator|+
name|maxTries
operator|+
literal|" seconds to see "
operator|+
name|cname
operator|+
literal|" ("
operator|+
name|cloudDescriptor
operator|.
name|getShardId
argument_list|()
operator|+
literal|" of "
operator|+
name|cloudDescriptor
operator|.
name|getCollectionName
argument_list|()
operator|+
literal|") have state: "
operator|+
name|waitForState
argument_list|)
expr_stmt|;
block|}
name|ClusterState
name|clusterState
init|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|String
name|collection
init|=
name|cloudDescriptor
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|Slice
name|slice
init|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|cloudDescriptor
operator|.
name|getShardId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|!=
literal|null
condition|)
block|{
name|ZkNodeProps
name|nodeProps
init|=
name|slice
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|get
argument_list|(
name|coreNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeProps
operator|!=
literal|null
condition|)
block|{
name|state
operator|=
name|nodeProps
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
expr_stmt|;
name|live
operator|=
name|clusterState
operator|.
name|liveNodesContain
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
name|String
name|localState
init|=
name|cloudDescriptor
operator|.
name|getLastPublished
argument_list|()
decl_stmt|;
comment|// TODO: This is funky but I've seen this in testing where the replica asks the
comment|// leader to be in recovery? Need to track down how that happens ... in the meantime,
comment|// this is a safeguard
name|boolean
name|leaderDoesNotNeedRecovery
init|=
operator|(
name|onlyIfLeader
operator|!=
literal|null
operator|&&
name|onlyIfLeader
operator|&&
name|core
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeProps
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
operator|&&
name|ZkStateReader
operator|.
name|RECOVERING
operator|.
name|equals
argument_list|(
name|waitForState
argument_list|)
operator|&&
name|ZkStateReader
operator|.
name|ACTIVE
operator|.
name|equals
argument_list|(
name|localState
argument_list|)
operator|&&
name|ZkStateReader
operator|.
name|ACTIVE
operator|.
name|equals
argument_list|(
name|state
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|leaderDoesNotNeedRecovery
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Leader "
operator|+
name|core
operator|.
name|getName
argument_list|()
operator|+
literal|" ignoring request to be in the recovering state because it is live and active."
argument_list|)
expr_stmt|;
block|}
name|boolean
name|onlyIfActiveCheckResult
init|=
name|onlyIfLeaderActive
operator|!=
literal|null
operator|&&
name|onlyIfLeaderActive
operator|&&
operator|(
name|localState
operator|==
literal|null
operator|||
operator|!
name|localState
operator|.
name|equals
argument_list|(
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
operator|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"In WaitForState("
operator|+
name|waitForState
operator|+
literal|"): collection="
operator|+
name|collection
operator|+
literal|", shard="
operator|+
name|slice
operator|.
name|getName
argument_list|()
operator|+
literal|", thisCore="
operator|+
name|core
operator|.
name|getName
argument_list|()
operator|+
literal|", leaderDoesNotNeedRecovery="
operator|+
name|leaderDoesNotNeedRecovery
operator|+
literal|", isLeader? "
operator|+
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|isLeader
argument_list|()
operator|+
literal|", live="
operator|+
name|live
operator|+
literal|", checkLive="
operator|+
name|checkLive
operator|+
literal|", currentState="
operator|+
name|state
operator|+
literal|", localState="
operator|+
name|localState
operator|+
literal|", nodeName="
operator|+
name|nodeName
operator|+
literal|", coreNodeName="
operator|+
name|coreNodeName
operator|+
literal|", onlyIfActiveCheckResult="
operator|+
name|onlyIfActiveCheckResult
operator|+
literal|", nodeProps: "
operator|+
name|nodeProps
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|onlyIfActiveCheckResult
operator|&&
name|nodeProps
operator|!=
literal|null
operator|&&
operator|(
name|state
operator|.
name|equals
argument_list|(
name|waitForState
argument_list|)
operator|||
name|leaderDoesNotNeedRecovery
operator|)
condition|)
block|{
if|if
condition|(
name|checkLive
operator|==
literal|null
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|checkLive
operator|&&
name|live
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
operator|!
name|checkLive
operator|&&
operator|!
name|live
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|retry
operator|++
operator|==
name|maxTries
condition|)
block|{
name|String
name|collection
init|=
literal|null
decl_stmt|;
name|String
name|leaderInfo
init|=
literal|null
decl_stmt|;
name|String
name|shardId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|CloudDescriptor
name|cloudDescriptor
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
name|collection
operator|=
name|cloudDescriptor
operator|.
name|getCollectionName
argument_list|()
expr_stmt|;
name|shardId
operator|=
name|cloudDescriptor
operator|.
name|getShardId
argument_list|()
expr_stmt|;
name|leaderInfo
operator|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getLeaderUrl
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
name|leaderInfo
operator|=
literal|"Not available due to: "
operator|+
name|exc
expr_stmt|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"I was asked to wait on state "
operator|+
name|waitForState
operator|+
literal|" for "
operator|+
name|shardId
operator|+
literal|" in "
operator|+
name|collection
operator|+
literal|" on "
operator|+
name|nodeName
operator|+
literal|" but I still do not see the requested state. I see state: "
operator|+
name|state
operator|+
literal|" live:"
operator|+
name|live
operator|+
literal|" leader from ZK: "
operator|+
name|leaderInfo
argument_list|)
throw|;
block|}
if|if
condition|(
name|coreContainer
operator|.
name|isShutDown
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Solr is shutting down"
argument_list|)
throw|;
block|}
comment|// solrcloud_debug
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
try|try
block|{
name|LocalSolrQueryRequest
name|r
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|()
argument_list|)
decl_stmt|;
name|CommitUpdateCommand
name|commitCmd
init|=
operator|new
name|CommitUpdateCommand
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|commitCmd
operator|.
name|softCommit
operator|=
literal|true
expr_stmt|;
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|commit
argument_list|(
name|commitCmd
argument_list|)
expr_stmt|;
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searchHolder
init|=
name|core
operator|.
name|getNewestSearcher
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|SolrIndexSearcher
name|searcher
init|=
name|searchHolder
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" to replicate "
operator|+
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
operator|+
literal|" gen:"
operator|+
name|core
operator|.
name|getDeletionPolicy
argument_list|()
operator|.
name|getLatestCommit
argument_list|()
operator|.
name|getGeneration
argument_list|()
operator|+
literal|" data:"
operator|+
name|core
operator|.
name|getDataDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|searchHolder
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|null
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Waited coreNodeName: "
operator|+
name|coreNodeName
operator|+
literal|", state: "
operator|+
name|waitForState
operator|+
literal|", checkLive: "
operator|+
name|checkLive
operator|+
literal|", onlyIfLeader: "
operator|+
name|onlyIfLeader
operator|+
literal|" for: "
operator|+
name|retry
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
block|}
DECL|method|handleRequestApplyUpdatesAction
specifier|private
name|void
name|handleRequestApplyUpdatesAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Applying buffered updates on core: "
operator|+
name|cname
argument_list|)
expr_stmt|;
try|try
init|(
name|SolrCore
name|core
init|=
name|coreContainer
operator|.
name|getCore
argument_list|(
name|cname
argument_list|)
init|)
block|{
if|if
condition|(
name|core
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Core ["
operator|+
name|cname
operator|+
literal|"] not found"
argument_list|)
throw|;
name|UpdateLog
name|updateLog
init|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|updateLog
operator|.
name|getState
argument_list|()
operator|!=
name|UpdateLog
operator|.
name|State
operator|.
name|BUFFERING
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Core "
operator|+
name|cname
operator|+
literal|" not in buffering state"
argument_list|)
throw|;
block|}
name|Future
argument_list|<
name|UpdateLog
operator|.
name|RecoveryInfo
argument_list|>
name|future
init|=
name|updateLog
operator|.
name|applyBufferedUpdates
argument_list|()
decl_stmt|;
if|if
condition|(
name|future
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No buffered updates available. core="
operator|+
name|cname
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"core"
argument_list|,
name|cname
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
literal|"EMPTY_BUFFER"
argument_list|)
expr_stmt|;
return|return;
block|}
name|UpdateLog
operator|.
name|RecoveryInfo
name|report
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|report
operator|.
name|failed
condition|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Replay failed"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Replay failed"
argument_list|)
throw|;
block|}
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|publish
argument_list|(
name|core
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"core"
argument_list|,
name|cname
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
literal|"BUFFER_APPLIED"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Recovery was interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|SolrException
condition|)
throw|throw
operator|(
name|SolrException
operator|)
name|e
throw|;
else|else
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not apply buffered updates"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|req
operator|!=
literal|null
condition|)
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|handleRequestBufferUpdatesAction
specifier|private
name|void
name|handleRequestBufferUpdatesAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Starting to buffer updates on core:"
operator|+
name|cname
argument_list|)
expr_stmt|;
try|try
init|(
name|SolrCore
name|core
init|=
name|coreContainer
operator|.
name|getCore
argument_list|(
name|cname
argument_list|)
init|)
block|{
if|if
condition|(
name|core
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Core ["
operator|+
name|cname
operator|+
literal|"] does not exist"
argument_list|)
throw|;
name|UpdateLog
name|updateLog
init|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|updateLog
operator|.
name|getState
argument_list|()
operator|!=
name|UpdateLog
operator|.
name|State
operator|.
name|ACTIVE
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Core "
operator|+
name|cname
operator|+
literal|" not in active state"
argument_list|)
throw|;
block|}
name|updateLog
operator|.
name|bufferUpdates
argument_list|()
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"core"
argument_list|,
name|cname
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
literal|"BUFFERING"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|SolrException
condition|)
throw|throw
operator|(
name|SolrException
operator|)
name|e
throw|;
else|else
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not start buffering updates"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|req
operator|!=
literal|null
condition|)
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns the core status for a particular core.    * @param cores - the enclosing core container    * @param cname - the core to return    * @param isIndexInfoNeeded - add what may be expensive index information. NOT returned if the core is not loaded    * @return - a named list of key/value pairs from the core.    * @throws IOException - LukeRequestHandler can throw an I/O exception    */
DECL|method|getCoreStatus
specifier|protected
name|NamedList
argument_list|<
name|Object
argument_list|>
name|getCoreStatus
parameter_list|(
name|CoreContainer
name|cores
parameter_list|,
name|String
name|cname
parameter_list|,
name|boolean
name|isIndexInfoNeeded
parameter_list|)
throws|throws
name|IOException
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|info
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cores
operator|.
name|isLoaded
argument_list|(
name|cname
argument_list|)
condition|)
block|{
comment|// Lazily-loaded core, fill in what we can.
comment|// It would be a real mistake to load the cores just to get the status
name|CoreDescriptor
name|desc
init|=
name|cores
operator|.
name|getUnloadedCoreDescriptor
argument_list|(
name|cname
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"instanceDir"
argument_list|,
name|desc
operator|.
name|getInstanceDir
argument_list|()
argument_list|)
expr_stmt|;
comment|// None of the following are guaranteed to be present in a not-yet-loaded core.
name|String
name|tmp
init|=
name|desc
operator|.
name|getDataDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|tmp
argument_list|)
condition|)
name|info
operator|.
name|add
argument_list|(
literal|"dataDir"
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|desc
operator|.
name|getConfigName
argument_list|()
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|tmp
argument_list|)
condition|)
name|info
operator|.
name|add
argument_list|(
literal|"config"
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|desc
operator|.
name|getSchemaName
argument_list|()
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|tmp
argument_list|)
condition|)
name|info
operator|.
name|add
argument_list|(
literal|"schema"
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"isLoaded"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
init|(
name|SolrCore
name|core
init|=
name|cores
operator|.
name|getCore
argument_list|(
name|cname
argument_list|)
init|)
block|{
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
name|core
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"instanceDir"
argument_list|,
name|normalizePath
argument_list|(
name|core
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|getInstanceDir
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"dataDir"
argument_list|,
name|normalizePath
argument_list|(
name|core
operator|.
name|getDataDir
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"config"
argument_list|,
name|core
operator|.
name|getConfigResource
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"schema"
argument_list|,
name|core
operator|.
name|getSchemaResource
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"startTime"
argument_list|,
operator|new
name|Date
argument_list|(
name|core
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"uptime"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|core
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isIndexInfoNeeded
condition|)
block|{
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcher
init|=
name|core
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
try|try
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|indexInfo
init|=
name|LukeRequestHandler
operator|.
name|getIndexInfo
argument_list|(
name|searcher
operator|.
name|get
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|size
init|=
name|getIndexSize
argument_list|(
name|core
argument_list|)
decl_stmt|;
name|indexInfo
operator|.
name|add
argument_list|(
literal|"sizeInBytes"
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|indexInfo
operator|.
name|add
argument_list|(
literal|"size"
argument_list|,
name|NumberUtils
operator|.
name|readableSize
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"index"
argument_list|,
name|indexInfo
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|searcher
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|info
return|;
block|}
DECL|method|getIndexSize
specifier|private
name|long
name|getIndexSize
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|Directory
name|dir
decl_stmt|;
name|long
name|size
init|=
literal|0
decl_stmt|;
try|try
block|{
name|dir
operator|=
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|get
argument_list|(
name|core
operator|.
name|getIndexDir
argument_list|()
argument_list|,
name|DirContext
operator|.
name|DEFAULT
argument_list|,
name|core
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|indexConfig
operator|.
name|lockType
argument_list|)
expr_stmt|;
try|try
block|{
name|size
operator|=
name|DirectoryFactory
operator|.
name|sizeOfDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|release
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"IO error while trying to get the size of the Directory"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
DECL|method|normalizePath
specifier|protected
specifier|static
name|String
name|normalizePath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|path
operator|=
name|path
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
DECL|method|params
specifier|public
specifier|static
name|ModifiableSolrParams
name|params
parameter_list|(
name|String
modifier|...
name|params
parameter_list|)
block|{
name|ModifiableSolrParams
name|msp
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|msp
operator|.
name|add
argument_list|(
name|params
index|[
name|i
index|]
argument_list|,
name|params
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|msp
return|;
block|}
comment|//////////////////////// SolrInfoMBeans methods //////////////////////
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Manage Multiple Solr Cores"
return|;
block|}
comment|/**    * Class to implement multi-threaded CoreAdminHandler behaviour.    * This accepts all of the context from handleRequestBody.    */
DECL|class|ParallelCoreAdminHandlerThread
specifier|protected
class|class
name|ParallelCoreAdminHandlerThread
implements|implements
name|Runnable
block|{
DECL|field|req
name|SolrQueryRequest
name|req
decl_stmt|;
DECL|field|rsp
name|SolrQueryResponse
name|rsp
decl_stmt|;
DECL|field|action
name|CoreAdminAction
name|action
decl_stmt|;
DECL|field|taskObject
name|TaskObject
name|taskObject
decl_stmt|;
DECL|method|ParallelCoreAdminHandlerThread
specifier|public
name|ParallelCoreAdminHandlerThread
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CoreAdminAction
name|action
parameter_list|,
name|TaskObject
name|taskObject
parameter_list|)
block|{
name|this
operator|.
name|req
operator|=
name|req
expr_stmt|;
name|this
operator|.
name|rsp
operator|=
name|rsp
expr_stmt|;
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
name|this
operator|.
name|taskObject
operator|=
name|taskObject
expr_stmt|;
block|}
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|handleRequestInternal
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|taskObject
operator|.
name|setRspObject
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
name|taskObject
operator|.
name|setRspObjectFromException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|removeTask
argument_list|(
literal|"running"
argument_list|,
name|taskObject
operator|.
name|taskId
argument_list|)
expr_stmt|;
if|if
condition|(
name|exceptionCaught
condition|)
block|{
name|addTask
argument_list|(
literal|"failed"
argument_list|,
name|taskObject
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
name|addTask
argument_list|(
literal|"completed"
argument_list|,
name|taskObject
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Helper class to manage the tasks to be tracked.    * This contains the taskId, request and the response (if available).    */
DECL|class|TaskObject
specifier|private
class|class
name|TaskObject
block|{
DECL|field|taskId
name|String
name|taskId
decl_stmt|;
DECL|field|rspInfo
name|String
name|rspInfo
decl_stmt|;
DECL|method|TaskObject
specifier|public
name|TaskObject
parameter_list|(
name|String
name|taskId
parameter_list|)
block|{
name|this
operator|.
name|taskId
operator|=
name|taskId
expr_stmt|;
block|}
DECL|method|getRspObject
specifier|public
name|String
name|getRspObject
parameter_list|()
block|{
return|return
name|rspInfo
return|;
block|}
DECL|method|setRspObject
specifier|public
name|void
name|setRspObject
parameter_list|(
name|SolrQueryResponse
name|rspObject
parameter_list|)
block|{
name|this
operator|.
name|rspInfo
operator|=
name|rspObject
operator|.
name|getToLogAsString
argument_list|(
literal|"TaskId: "
operator|+
name|this
operator|.
name|taskId
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
DECL|method|setRspObjectFromException
specifier|public
name|void
name|setRspObjectFromException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|this
operator|.
name|rspInfo
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to add a task to a tracking map.    */
DECL|method|addTask
specifier|protected
name|void
name|addTask
parameter_list|(
name|String
name|map
parameter_list|,
name|TaskObject
name|o
parameter_list|,
name|boolean
name|limit
parameter_list|)
block|{
synchronized|synchronized
init|(
name|getMap
argument_list|(
name|map
argument_list|)
init|)
block|{
if|if
condition|(
name|limit
operator|&&
name|getMap
argument_list|(
name|map
argument_list|)
operator|.
name|size
argument_list|()
operator|==
name|MAX_TRACKED_REQUESTS
condition|)
block|{
name|String
name|key
init|=
name|getMap
argument_list|(
name|map
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|getMap
argument_list|(
name|map
argument_list|)
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|addTask
argument_list|(
name|map
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addTask
specifier|protected
name|void
name|addTask
parameter_list|(
name|String
name|map
parameter_list|,
name|TaskObject
name|o
parameter_list|)
block|{
synchronized|synchronized
init|(
name|getMap
argument_list|(
name|map
argument_list|)
init|)
block|{
name|getMap
argument_list|(
name|map
argument_list|)
operator|.
name|put
argument_list|(
name|o
operator|.
name|taskId
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to remove a task from a tracking map.    */
DECL|method|removeTask
specifier|protected
name|void
name|removeTask
parameter_list|(
name|String
name|map
parameter_list|,
name|String
name|taskId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|getMap
argument_list|(
name|map
argument_list|)
init|)
block|{
name|getMap
argument_list|(
name|map
argument_list|)
operator|.
name|remove
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to check if a map contains a taskObject with the given taskId.    */
DECL|method|mapContainsTask
specifier|protected
name|boolean
name|mapContainsTask
parameter_list|(
name|String
name|map
parameter_list|,
name|String
name|taskId
parameter_list|)
block|{
return|return
name|getMap
argument_list|(
name|map
argument_list|)
operator|.
name|containsKey
argument_list|(
name|taskId
argument_list|)
return|;
block|}
comment|/**    * Helper method to get a TaskObject given a map and a taskId.    */
DECL|method|getTask
specifier|protected
name|TaskObject
name|getTask
parameter_list|(
name|String
name|map
parameter_list|,
name|String
name|taskId
parameter_list|)
block|{
return|return
name|getMap
argument_list|(
name|map
argument_list|)
operator|.
name|get
argument_list|(
name|taskId
argument_list|)
return|;
block|}
comment|/**    * Helper method to get a request status map given the name.    */
DECL|method|getMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|TaskObject
argument_list|>
name|getMap
parameter_list|(
name|String
name|map
parameter_list|)
block|{
return|return
name|requestStatusMap
operator|.
name|get
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**    * Method to ensure shutting down of the ThreadPool Executor.    */
DECL|method|shutdown
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|parallelExecutor
operator|!=
literal|null
operator|&&
operator|!
name|parallelExecutor
operator|.
name|isShutdown
argument_list|()
condition|)
name|ExecutorUtil
operator|.
name|shutdownAndAwaitTermination
argument_list|(
name|parallelExecutor
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
