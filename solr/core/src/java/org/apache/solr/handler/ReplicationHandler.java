begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Adler32
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Checksum
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|DeflaterOutputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexCommit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexDeletionPolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
operator|.
name|CHARSET_UTF_8
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|FastOutputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CloseHook
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|DirectoryFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|IndexDeletionPolicyWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrDeletionPolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrEventListener
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|DirectoryFactory
operator|.
name|DirContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|BinaryQueryResponseWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|SolrIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|NumberUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|PropertiesInputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|SolrCoreAware
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  *<p> A Handler which provides a REST API for replication and serves replication requests from Slaves.<p/></p>  *<p>When running on the master, it provides the following commands<ol><li>Get the current replicable index version  * (command=indexversion)</li><li>Get the list of files for a given index version  * (command=filelist&amp;indexversion=&lt;VERSION&gt;)</li><li>Get full or a part (chunk) of a given index or a config  * file (command=filecontent&amp;file=&lt;FILE_NAME&gt;) You can optionally specify an offset and length to get that  * chunk of the file. You can request a configuration file by using "cf" parameter instead of the "file" parameter.</li>  *<li>Get status/statistics (command=details)</li></ol></p><p>When running on the slave, it provides the following  * commands<ol><li>Perform a snap pull now (command=snappull)</li><li>Get status/statistics (command=details)</li>  *<li>Abort a snap pull (command=abort)</li><li>Enable/Disable polling the master for new versions (command=enablepoll  * or command=disablepoll)</li></ol></p>  *  *  * @since solr 1.4  */
end_comment
begin_class
DECL|class|ReplicationHandler
specifier|public
class|class
name|ReplicationHandler
extends|extends
name|RequestHandlerBase
implements|implements
name|SolrCoreAware
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReplicationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|core
name|SolrCore
name|core
decl_stmt|;
DECL|class|CommitVersionInfo
specifier|private
specifier|static
specifier|final
class|class
name|CommitVersionInfo
block|{
DECL|field|version
specifier|public
specifier|final
name|long
name|version
decl_stmt|;
DECL|field|generation
specifier|public
specifier|final
name|long
name|generation
decl_stmt|;
DECL|method|CommitVersionInfo
specifier|private
name|CommitVersionInfo
parameter_list|(
name|long
name|g
parameter_list|,
name|long
name|v
parameter_list|)
block|{
name|generation
operator|=
name|g
expr_stmt|;
name|version
operator|=
name|v
expr_stmt|;
block|}
comment|/**      * builds a CommitVersionInfo data for the specified IndexCommit.        * Will never be null, ut version and generation may be zero if       * there are problems extracting them from the commit data      */
DECL|method|build
specifier|public
specifier|static
name|CommitVersionInfo
name|build
parameter_list|(
name|IndexCommit
name|commit
parameter_list|)
block|{
name|long
name|generation
init|=
name|commit
operator|.
name|getGeneration
argument_list|()
decl_stmt|;
name|long
name|version
init|=
literal|0
decl_stmt|;
try|try
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|commitData
init|=
name|commit
operator|.
name|getUserData
argument_list|()
decl_stmt|;
name|String
name|commitTime
init|=
name|commitData
operator|.
name|get
argument_list|(
name|SolrIndexWriter
operator|.
name|COMMIT_TIME_MSEC_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|commitTime
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|version
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|commitTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Version in commitData was not formated correctly: "
operator|+
name|commitTime
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to get version from commitData, commit: "
operator|+
name|commit
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|CommitVersionInfo
argument_list|(
name|generation
argument_list|,
name|version
argument_list|)
return|;
block|}
block|}
DECL|field|snapPuller
specifier|private
name|SnapPuller
name|snapPuller
decl_stmt|;
DECL|field|snapPullLock
specifier|private
name|ReentrantLock
name|snapPullLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|includeConfFiles
specifier|private
name|String
name|includeConfFiles
decl_stmt|;
DECL|field|confFileNameAlias
specifier|private
name|NamedList
argument_list|<
name|String
argument_list|>
name|confFileNameAlias
init|=
operator|new
name|NamedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|isMaster
specifier|private
name|boolean
name|isMaster
init|=
literal|false
decl_stmt|;
DECL|field|isSlave
specifier|private
name|boolean
name|isSlave
init|=
literal|false
decl_stmt|;
DECL|field|replicateOnOptimize
specifier|private
name|boolean
name|replicateOnOptimize
init|=
literal|false
decl_stmt|;
DECL|field|replicateOnCommit
specifier|private
name|boolean
name|replicateOnCommit
init|=
literal|false
decl_stmt|;
DECL|field|replicateOnStart
specifier|private
name|boolean
name|replicateOnStart
init|=
literal|false
decl_stmt|;
DECL|field|numberBackupsToKeep
specifier|private
name|int
name|numberBackupsToKeep
init|=
literal|0
decl_stmt|;
comment|//zero: do not delete old backups
DECL|field|numTimesReplicated
specifier|private
name|int
name|numTimesReplicated
init|=
literal|0
decl_stmt|;
DECL|field|confFileInfoCache
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|confFileInfoCache
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|reserveCommitDuration
specifier|private
name|Integer
name|reserveCommitDuration
init|=
name|SnapPuller
operator|.
name|readInterval
argument_list|(
literal|"00:00:10"
argument_list|)
decl_stmt|;
DECL|field|indexCommitPoint
specifier|volatile
name|IndexCommit
name|indexCommitPoint
decl_stmt|;
DECL|field|snapShootDetails
specifier|volatile
name|NamedList
argument_list|<
name|Object
argument_list|>
name|snapShootDetails
decl_stmt|;
DECL|field|replicationEnabled
specifier|private
name|AtomicBoolean
name|replicationEnabled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|handleRequestBody
specifier|public
name|void
name|handleRequestBody
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|Exception
block|{
name|rsp
operator|.
name|setHttpCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|SolrParams
name|solrParams
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|command
init|=
name|solrParams
operator|.
name|get
argument_list|(
name|COMMAND
argument_list|)
decl_stmt|;
if|if
condition|(
name|command
operator|==
literal|null
condition|)
block|{
name|rsp
operator|.
name|add
argument_list|(
name|STATUS
argument_list|,
name|OK_STATUS
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"message"
argument_list|,
literal|"No command"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// This command does not give the current index version of the master
comment|// It gives the current 'replicateable' index version
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
name|CMD_INDEX_VERSION
argument_list|)
condition|)
block|{
name|IndexCommit
name|commitPoint
init|=
name|indexCommitPoint
decl_stmt|;
comment|// make a copy so it won't change
if|if
condition|(
name|commitPoint
operator|==
literal|null
condition|)
block|{
comment|// if this handler is 'lazy', we may not have tracked the last commit
comment|// because our commit listener is registered on inform
name|commitPoint
operator|=
name|core
operator|.
name|getDeletionPolicy
argument_list|()
operator|.
name|getLatestCommit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|commitPoint
operator|!=
literal|null
operator|&&
name|replicationEnabled
operator|.
name|get
argument_list|()
condition|)
block|{
comment|//
comment|// There is a race condition here.  The commit point may be changed / deleted by the time
comment|// we get around to reserving it.  This is a very small window though, and should not result
comment|// in a catastrophic failure, but will result in the client getting an empty file list for
comment|// the CMD_GET_FILE_LIST command.
comment|//
name|core
operator|.
name|getDeletionPolicy
argument_list|()
operator|.
name|setReserveDuration
argument_list|(
name|commitPoint
operator|.
name|getGeneration
argument_list|()
argument_list|,
name|reserveCommitDuration
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
name|CMD_INDEX_VERSION
argument_list|,
name|IndexDeletionPolicyWrapper
operator|.
name|getCommitTimestamp
argument_list|(
name|commitPoint
argument_list|)
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
name|GENERATION
argument_list|,
name|commitPoint
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// This happens when replication is not configured to happen after startup and no commit/optimize
comment|// has happened yet.
name|rsp
operator|.
name|add
argument_list|(
name|CMD_INDEX_VERSION
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
name|GENERATION
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
name|CMD_GET_FILE
argument_list|)
condition|)
block|{
name|getFileStream
argument_list|(
name|solrParams
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
name|CMD_GET_FILE_LIST
argument_list|)
condition|)
block|{
name|getFileList
argument_list|(
name|solrParams
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|equalsIgnoreCase
argument_list|(
name|CMD_BACKUP
argument_list|)
condition|)
block|{
name|doSnapShoot
argument_list|(
operator|new
name|ModifiableSolrParams
argument_list|(
name|solrParams
argument_list|)
argument_list|,
name|rsp
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
name|STATUS
argument_list|,
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|equalsIgnoreCase
argument_list|(
name|CMD_FETCH_INDEX
argument_list|)
condition|)
block|{
name|String
name|masterUrl
init|=
name|solrParams
operator|.
name|get
argument_list|(
name|MASTER_URL
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isSlave
operator|&&
name|masterUrl
operator|==
literal|null
condition|)
block|{
name|rsp
operator|.
name|add
argument_list|(
name|STATUS
argument_list|,
name|ERR_STATUS
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"message"
argument_list|,
literal|"No slave configured or no 'masterUrl' Specified"
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|SolrParams
name|paramsCopy
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|solrParams
argument_list|)
decl_stmt|;
name|Thread
name|puller
init|=
operator|new
name|Thread
argument_list|(
literal|"explicit-fetchindex-cmd"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|doFetch
argument_list|(
name|paramsCopy
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|puller
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|solrParams
operator|.
name|getBool
argument_list|(
name|WAIT
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|puller
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|rsp
operator|.
name|add
argument_list|(
name|STATUS
argument_list|,
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|equalsIgnoreCase
argument_list|(
name|CMD_DISABLE_POLL
argument_list|)
condition|)
block|{
if|if
condition|(
name|snapPuller
operator|!=
literal|null
condition|)
block|{
name|snapPuller
operator|.
name|disablePoll
argument_list|()
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
name|STATUS
argument_list|,
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rsp
operator|.
name|add
argument_list|(
name|STATUS
argument_list|,
name|ERR_STATUS
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"message"
argument_list|,
literal|"No slave configured"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|equalsIgnoreCase
argument_list|(
name|CMD_ENABLE_POLL
argument_list|)
condition|)
block|{
if|if
condition|(
name|snapPuller
operator|!=
literal|null
condition|)
block|{
name|snapPuller
operator|.
name|enablePoll
argument_list|()
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
name|STATUS
argument_list|,
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rsp
operator|.
name|add
argument_list|(
name|STATUS
argument_list|,
name|ERR_STATUS
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"message"
argument_list|,
literal|"No slave configured"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|equalsIgnoreCase
argument_list|(
name|CMD_ABORT_FETCH
argument_list|)
condition|)
block|{
name|SnapPuller
name|temp
init|=
name|tempSnapPuller
decl_stmt|;
if|if
condition|(
name|temp
operator|!=
literal|null
condition|)
block|{
name|temp
operator|.
name|abortPull
argument_list|()
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
name|STATUS
argument_list|,
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rsp
operator|.
name|add
argument_list|(
name|STATUS
argument_list|,
name|ERR_STATUS
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"message"
argument_list|,
literal|"No slave configured"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
name|CMD_SHOW_COMMITS
argument_list|)
condition|)
block|{
name|rsp
operator|.
name|add
argument_list|(
name|CMD_SHOW_COMMITS
argument_list|,
name|getCommits
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
name|CMD_DETAILS
argument_list|)
condition|)
block|{
name|rsp
operator|.
name|add
argument_list|(
name|CMD_DETAILS
argument_list|,
name|getReplicationDetails
argument_list|(
name|solrParams
operator|.
name|getBool
argument_list|(
literal|"slave"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RequestHandlerUtils
operator|.
name|addExperimentalFormatWarning
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CMD_ENABLE_REPL
operator|.
name|equalsIgnoreCase
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|replicationEnabled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
name|STATUS
argument_list|,
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CMD_DISABLE_REPL
operator|.
name|equalsIgnoreCase
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|replicationEnabled
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
name|STATUS
argument_list|,
name|OK_STATUS
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getCommits
specifier|private
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|getCommits
parameter_list|()
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|IndexCommit
argument_list|>
name|commits
init|=
name|core
operator|.
name|getDeletionPolicy
argument_list|()
operator|.
name|getCommits
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexCommit
name|c
range|:
name|commits
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|nl
init|=
operator|new
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"indexVersion"
argument_list|,
name|IndexDeletionPolicyWrapper
operator|.
name|getCommitTimestamp
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|nl
operator|.
name|add
argument_list|(
name|GENERATION
argument_list|,
name|c
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commitList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|c
operator|.
name|getFileNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|commitList
operator|.
name|addAll
argument_list|(
name|c
operator|.
name|getFileNames
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|commitList
argument_list|)
expr_stmt|;
name|nl
operator|.
name|add
argument_list|(
name|CMD_GET_FILE_LIST
argument_list|,
name|commitList
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|nl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while reading files for commit "
operator|+
name|c
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|l
return|;
block|}
DECL|method|getCheckSum
specifier|static
name|Long
name|getCheckSum
parameter_list|(
name|Checksum
name|checksum
parameter_list|,
name|File
name|f
parameter_list|)
block|{
name|FileInputStream
name|fis
init|=
literal|null
decl_stmt|;
name|checksum
operator|.
name|reset
argument_list|()
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|1024
index|]
decl_stmt|;
name|int
name|bytesRead
decl_stmt|;
try|try
block|{
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|bytesRead
operator|=
name|fis
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>=
literal|0
condition|)
name|checksum
operator|.
name|update
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
return|return
name|checksum
operator|.
name|getValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception in finding checksum of "
operator|+
name|f
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|fis
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|field|tempSnapPuller
specifier|private
specifier|volatile
name|SnapPuller
name|tempSnapPuller
decl_stmt|;
DECL|method|doFetch
specifier|public
name|boolean
name|doFetch
parameter_list|(
name|SolrParams
name|solrParams
parameter_list|,
name|boolean
name|forceReplication
parameter_list|)
block|{
name|String
name|masterUrl
init|=
name|solrParams
operator|==
literal|null
condition|?
literal|null
else|:
name|solrParams
operator|.
name|get
argument_list|(
name|MASTER_URL
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|snapPullLock
operator|.
name|tryLock
argument_list|()
condition|)
return|return
literal|false
return|;
try|try
block|{
name|tempSnapPuller
operator|=
name|snapPuller
expr_stmt|;
if|if
condition|(
name|masterUrl
operator|!=
literal|null
condition|)
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|nl
init|=
name|solrParams
operator|.
name|toNamedList
argument_list|()
decl_stmt|;
name|nl
operator|.
name|remove
argument_list|(
name|SnapPuller
operator|.
name|POLL_INTERVAL
argument_list|)
expr_stmt|;
name|tempSnapPuller
operator|=
operator|new
name|SnapPuller
argument_list|(
name|nl
argument_list|,
name|this
argument_list|,
name|core
argument_list|)
expr_stmt|;
block|}
return|return
name|tempSnapPuller
operator|.
name|fetchLatestIndex
argument_list|(
name|core
argument_list|,
name|forceReplication
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
literal|"SnapPull failed "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|snapPuller
operator|!=
literal|null
condition|)
block|{
name|tempSnapPuller
operator|=
name|snapPuller
expr_stmt|;
block|}
name|snapPullLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|isReplicating
name|boolean
name|isReplicating
parameter_list|()
block|{
return|return
name|snapPullLock
operator|.
name|isLocked
argument_list|()
return|;
block|}
DECL|method|doSnapShoot
specifier|private
name|void
name|doSnapShoot
parameter_list|(
name|SolrParams
name|params
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|)
block|{
try|try
block|{
name|int
name|numberToKeep
init|=
name|params
operator|.
name|getInt
argument_list|(
name|NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|numberToKeep
operator|>
literal|0
operator|&&
name|numberBackupsToKeep
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Cannot use "
operator|+
name|NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM
operator|+
literal|" if "
operator|+
name|NUMBER_BACKUPS_TO_KEEP_INIT_PARAM
operator|+
literal|" was specified in the configuration."
argument_list|)
throw|;
block|}
name|numberToKeep
operator|=
name|Math
operator|.
name|max
argument_list|(
name|numberToKeep
argument_list|,
name|numberBackupsToKeep
argument_list|)
expr_stmt|;
if|if
condition|(
name|numberToKeep
operator|<
literal|1
condition|)
block|{
name|numberToKeep
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
name|IndexDeletionPolicyWrapper
name|delPolicy
init|=
name|core
operator|.
name|getDeletionPolicy
argument_list|()
decl_stmt|;
name|IndexCommit
name|indexCommit
init|=
name|delPolicy
operator|.
name|getLatestCommit
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexCommit
operator|==
literal|null
condition|)
block|{
name|indexCommit
operator|=
name|req
operator|.
name|getSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|getIndexCommit
argument_list|()
expr_stmt|;
block|}
comment|// small race here before the commit point is saved
operator|new
name|SnapShooter
argument_list|(
name|core
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|"location"
argument_list|)
argument_list|)
operator|.
name|createSnapAsync
argument_list|(
name|indexCommit
argument_list|,
name|numberToKeep
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception during creating a snapshot"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This method adds an Object of FileStream to the response . The FileStream implements a custom protocol which is    * understood by SnapPuller.FileFetcher    *    * @see org.apache.solr.handler.SnapPuller.LocalFsFileFetcher    * @see org.apache.solr.handler.SnapPuller.DirectoryFileFetcher    */
DECL|method|getFileStream
specifier|private
name|void
name|getFileStream
parameter_list|(
name|SolrParams
name|solrParams
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
name|ModifiableSolrParams
name|rawParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|solrParams
argument_list|)
decl_stmt|;
name|rawParams
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|,
name|FILE_STREAM
argument_list|)
expr_stmt|;
name|String
name|cfileName
init|=
name|solrParams
operator|.
name|get
argument_list|(
name|CONF_FILE_SHORT
argument_list|)
decl_stmt|;
if|if
condition|(
name|cfileName
operator|!=
literal|null
condition|)
block|{
name|rsp
operator|.
name|add
argument_list|(
name|FILE_STREAM
argument_list|,
operator|new
name|LocalFsFileStream
argument_list|(
name|solrParams
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rsp
operator|.
name|add
argument_list|(
name|FILE_STREAM
argument_list|,
operator|new
name|DirectoryFileStream
argument_list|(
name|solrParams
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getFileList
specifier|private
name|void
name|getFileList
parameter_list|(
name|SolrParams
name|solrParams
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
name|String
name|v
init|=
name|solrParams
operator|.
name|get
argument_list|(
name|GENERATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|rsp
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
literal|"no index generation specified"
argument_list|)
expr_stmt|;
return|return;
block|}
name|long
name|gen
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|IndexCommit
name|commit
init|=
name|core
operator|.
name|getDeletionPolicy
argument_list|()
operator|.
name|getCommitPoint
argument_list|(
name|gen
argument_list|)
decl_stmt|;
comment|//System.out.println("ask for files for gen:" + commit.getGeneration() + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());
if|if
condition|(
name|commit
operator|==
literal|null
condition|)
block|{
name|rsp
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
literal|"invalid index generation"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// reserve the indexcommit for sometime
name|core
operator|.
name|getDeletionPolicy
argument_list|()
operator|.
name|setReserveDuration
argument_list|(
name|gen
argument_list|,
name|reserveCommitDuration
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Directory
name|dir
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// get all the files in the commit
comment|// use a set to workaround possible Lucene bug which returns same file
comment|// name multiple times
name|Collection
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|commit
operator|.
name|getFileNames
argument_list|()
argument_list|)
decl_stmt|;
name|dir
operator|=
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|get
argument_list|(
name|core
operator|.
name|getNewIndexDir
argument_list|()
argument_list|,
name|DirContext
operator|.
name|DEFAULT
argument_list|,
name|core
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|indexConfig
operator|.
name|lockType
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|String
name|fileName
range|:
name|files
control|)
block|{
if|if
condition|(
name|fileName
operator|.
name|endsWith
argument_list|(
literal|".lock"
argument_list|)
condition|)
continue|continue;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fileMeta
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|fileMeta
operator|.
name|put
argument_list|(
name|NAME
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|fileMeta
operator|.
name|put
argument_list|(
name|SIZE
argument_list|,
name|dir
operator|.
name|fileLength
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|fileMeta
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|release
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|rsp
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
literal|"unable to get file names for given index generation"
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get file names for indexCommit generation: "
operator|+
name|gen
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|rsp
operator|.
name|add
argument_list|(
name|CMD_GET_FILE_LIST
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|confFileNameAlias
operator|.
name|size
argument_list|()
operator|<
literal|1
operator|||
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|isZooKeeperAware
argument_list|()
condition|)
return|return;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding config files to list: "
operator|+
name|includeConfFiles
argument_list|)
expr_stmt|;
comment|//if configuration files need to be included get their details
name|rsp
operator|.
name|add
argument_list|(
name|CONF_FILES
argument_list|,
name|getConfFileInfoFromCache
argument_list|(
name|confFileNameAlias
argument_list|,
name|confFileInfoCache
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * For configuration files, checksum of the file is included because, unlike index files, they may have same content    * but different timestamps.    *<p/>    * The local conf files information is cached so that everytime it does not have to compute the checksum. The cache is    * refreshed only if the lastModified of the file changes    */
DECL|method|getConfFileInfoFromCache
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getConfFileInfoFromCache
parameter_list|(
name|NamedList
argument_list|<
name|String
argument_list|>
name|nameAndAlias
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|confFileInfoCache
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|confFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|confFileInfoCache
init|)
block|{
name|File
name|confDir
init|=
operator|new
name|File
argument_list|(
name|core
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|getConfigDir
argument_list|()
argument_list|)
decl_stmt|;
name|Checksum
name|checksum
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nameAndAlias
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|cf
init|=
name|nameAndAlias
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|confDir
argument_list|,
name|cf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
operator|||
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
continue|continue;
comment|//must not happen
name|FileInfo
name|info
init|=
name|confFileInfoCache
operator|.
name|get
argument_list|(
name|cf
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
operator|||
name|info
operator|.
name|lastmodified
operator|!=
name|f
operator|.
name|lastModified
argument_list|()
operator|||
name|info
operator|.
name|size
operator|!=
name|f
operator|.
name|length
argument_list|()
condition|)
block|{
if|if
condition|(
name|checksum
operator|==
literal|null
condition|)
name|checksum
operator|=
operator|new
name|Adler32
argument_list|()
expr_stmt|;
name|info
operator|=
operator|new
name|FileInfo
argument_list|(
name|f
operator|.
name|lastModified
argument_list|()
argument_list|,
name|cf
argument_list|,
name|f
operator|.
name|length
argument_list|()
argument_list|,
name|getCheckSum
argument_list|(
name|checksum
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|confFileInfoCache
operator|.
name|put
argument_list|(
name|cf
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
name|info
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|nameAndAlias
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
condition|)
name|m
operator|.
name|put
argument_list|(
name|ALIAS
argument_list|,
name|nameAndAlias
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|confFiles
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|confFiles
return|;
block|}
DECL|class|FileInfo
specifier|static
class|class
name|FileInfo
block|{
DECL|field|lastmodified
name|long
name|lastmodified
decl_stmt|;
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|size
name|long
name|size
decl_stmt|;
DECL|field|checksum
name|long
name|checksum
decl_stmt|;
DECL|method|FileInfo
specifier|public
name|FileInfo
parameter_list|(
name|long
name|lasmodified
parameter_list|,
name|String
name|name
parameter_list|,
name|long
name|size
parameter_list|,
name|long
name|checksum
parameter_list|)
block|{
name|this
operator|.
name|lastmodified
operator|=
name|lasmodified
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|checksum
operator|=
name|checksum
expr_stmt|;
block|}
DECL|method|getAsMap
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getAsMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|SIZE
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|CHECKSUM
argument_list|,
name|checksum
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
block|}
DECL|method|disablePoll
name|void
name|disablePoll
parameter_list|()
block|{
if|if
condition|(
name|isSlave
condition|)
name|snapPuller
operator|.
name|disablePoll
argument_list|()
expr_stmt|;
block|}
DECL|method|enablePoll
name|void
name|enablePoll
parameter_list|()
block|{
if|if
condition|(
name|isSlave
condition|)
name|snapPuller
operator|.
name|enablePoll
argument_list|()
expr_stmt|;
block|}
DECL|method|isPollingDisabled
name|boolean
name|isPollingDisabled
parameter_list|()
block|{
if|if
condition|(
name|snapPuller
operator|==
literal|null
condition|)
return|return
literal|true
return|;
return|return
name|snapPuller
operator|.
name|isPollingDisabled
argument_list|()
return|;
block|}
DECL|method|getTimesReplicatedSinceStartup
name|int
name|getTimesReplicatedSinceStartup
parameter_list|()
block|{
return|return
name|numTimesReplicated
return|;
block|}
DECL|method|setTimesReplicatedSinceStartup
name|void
name|setTimesReplicatedSinceStartup
parameter_list|()
block|{
name|numTimesReplicated
operator|++
expr_stmt|;
block|}
DECL|method|getIndexSize
name|long
name|getIndexSize
parameter_list|()
block|{
name|Directory
name|dir
decl_stmt|;
name|long
name|size
init|=
literal|0
decl_stmt|;
try|try
block|{
name|dir
operator|=
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|get
argument_list|(
name|core
operator|.
name|getIndexDir
argument_list|()
argument_list|,
name|DirContext
operator|.
name|DEFAULT
argument_list|,
name|core
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|indexConfig
operator|.
name|lockType
argument_list|)
expr_stmt|;
try|try
block|{
name|size
operator|=
name|DirectoryFactory
operator|.
name|sizeOfDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|release
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
literal|"IO error while trying to get the size of the Directory"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"ReplicationHandler provides replication of index and configuration files from Master to Slaves"
return|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
literal|"$URL$"
return|;
block|}
comment|/**     * returns the CommitVersionInfo for the current searcher, or null on error.    */
DECL|method|getIndexVersion
specifier|private
name|CommitVersionInfo
name|getIndexVersion
parameter_list|()
block|{
name|CommitVersionInfo
name|v
init|=
literal|null
decl_stmt|;
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcher
init|=
name|core
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
try|try
block|{
name|v
operator|=
name|CommitVersionInfo
operator|.
name|build
argument_list|(
name|searcher
operator|.
name|get
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|getIndexCommit
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to get index commit: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|searcher
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
return|return
name|v
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getStatistics
specifier|public
name|NamedList
name|getStatistics
parameter_list|()
block|{
name|NamedList
name|list
init|=
name|super
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|"indexSize"
argument_list|,
name|NumberUtils
operator|.
name|readableSize
argument_list|(
name|getIndexSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|CommitVersionInfo
name|vInfo
init|=
name|getIndexVersion
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"indexVersion"
argument_list|,
literal|null
operator|==
name|vInfo
condition|?
literal|0
else|:
name|vInfo
operator|.
name|version
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|GENERATION
argument_list|,
literal|null
operator|==
name|vInfo
condition|?
literal|0
else|:
name|vInfo
operator|.
name|generation
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"indexPath"
argument_list|,
name|core
operator|.
name|getIndexDir
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"isMaster"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|isMaster
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"isSlave"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|isSlave
argument_list|)
argument_list|)
expr_stmt|;
name|SnapPuller
name|snapPuller
init|=
name|tempSnapPuller
decl_stmt|;
if|if
condition|(
name|snapPuller
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|MASTER_URL
argument_list|,
name|snapPuller
operator|.
name|getMasterUrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|snapPuller
operator|.
name|getPollInterval
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|SnapPuller
operator|.
name|POLL_INTERVAL
argument_list|,
name|snapPuller
operator|.
name|getPollInterval
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
literal|"isPollingDisabled"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|isPollingDisabled
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"isReplicating"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|isReplicating
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|elapsed
init|=
name|getTimeElapsed
argument_list|(
name|snapPuller
argument_list|)
decl_stmt|;
name|long
name|val
init|=
name|SnapPuller
operator|.
name|getTotalBytesDownloaded
argument_list|(
name|snapPuller
argument_list|)
decl_stmt|;
if|if
condition|(
name|elapsed
operator|>
literal|0
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|"timeElapsed"
argument_list|,
name|elapsed
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"bytesDownloaded"
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"downloadSpeed"
argument_list|,
name|val
operator|/
name|elapsed
argument_list|)
expr_stmt|;
block|}
name|Properties
name|props
init|=
name|loadReplicationProperties
argument_list|()
decl_stmt|;
name|addVal
argument_list|(
name|list
argument_list|,
name|SnapPuller
operator|.
name|PREVIOUS_CYCLE_TIME_TAKEN
argument_list|,
name|props
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|addVal
argument_list|(
name|list
argument_list|,
name|SnapPuller
operator|.
name|INDEX_REPLICATED_AT
argument_list|,
name|props
argument_list|,
name|Date
operator|.
name|class
argument_list|)
expr_stmt|;
name|addVal
argument_list|(
name|list
argument_list|,
name|SnapPuller
operator|.
name|CONF_FILES_REPLICATED_AT
argument_list|,
name|props
argument_list|,
name|Date
operator|.
name|class
argument_list|)
expr_stmt|;
name|addVal
argument_list|(
name|list
argument_list|,
name|SnapPuller
operator|.
name|REPLICATION_FAILED_AT
argument_list|,
name|props
argument_list|,
name|Date
operator|.
name|class
argument_list|)
expr_stmt|;
name|addVal
argument_list|(
name|list
argument_list|,
name|SnapPuller
operator|.
name|TIMES_FAILED
argument_list|,
name|props
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|addVal
argument_list|(
name|list
argument_list|,
name|SnapPuller
operator|.
name|TIMES_INDEX_REPLICATED
argument_list|,
name|props
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|addVal
argument_list|(
name|list
argument_list|,
name|SnapPuller
operator|.
name|LAST_CYCLE_BYTES_DOWNLOADED
argument_list|,
name|props
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|addVal
argument_list|(
name|list
argument_list|,
name|SnapPuller
operator|.
name|TIMES_CONFIG_REPLICATED
argument_list|,
name|props
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|addVal
argument_list|(
name|list
argument_list|,
name|SnapPuller
operator|.
name|CONF_FILES_REPLICATED
argument_list|,
name|props
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isMaster
condition|)
block|{
if|if
condition|(
name|includeConfFiles
operator|!=
literal|null
condition|)
name|list
operator|.
name|add
argument_list|(
literal|"confFilesToReplicate"
argument_list|,
name|includeConfFiles
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|REPLICATE_AFTER
argument_list|,
name|getReplicateAfterStrings
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"replicationEnabled"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|replicationEnabled
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
comment|/**    * Used for showing statistics and progress information.    */
DECL|method|getReplicationDetails
specifier|private
name|NamedList
argument_list|<
name|Object
argument_list|>
name|getReplicationDetails
parameter_list|(
name|boolean
name|showSlaveDetails
parameter_list|)
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|details
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|master
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|slave
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|details
operator|.
name|add
argument_list|(
literal|"indexSize"
argument_list|,
name|NumberUtils
operator|.
name|readableSize
argument_list|(
name|getIndexSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|details
operator|.
name|add
argument_list|(
literal|"indexPath"
argument_list|,
name|core
operator|.
name|getIndexDir
argument_list|()
argument_list|)
expr_stmt|;
name|details
operator|.
name|add
argument_list|(
name|CMD_SHOW_COMMITS
argument_list|,
name|getCommits
argument_list|()
argument_list|)
expr_stmt|;
name|details
operator|.
name|add
argument_list|(
literal|"isMaster"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|isMaster
argument_list|)
argument_list|)
expr_stmt|;
name|details
operator|.
name|add
argument_list|(
literal|"isSlave"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|isSlave
argument_list|)
argument_list|)
expr_stmt|;
name|CommitVersionInfo
name|vInfo
init|=
name|getIndexVersion
argument_list|()
decl_stmt|;
name|details
operator|.
name|add
argument_list|(
literal|"indexVersion"
argument_list|,
literal|null
operator|==
name|vInfo
condition|?
literal|0
else|:
name|vInfo
operator|.
name|version
argument_list|)
expr_stmt|;
name|details
operator|.
name|add
argument_list|(
name|GENERATION
argument_list|,
literal|null
operator|==
name|vInfo
condition|?
literal|0
else|:
name|vInfo
operator|.
name|generation
argument_list|)
expr_stmt|;
name|IndexCommit
name|commit
init|=
name|indexCommitPoint
decl_stmt|;
comment|// make a copy so it won't change
if|if
condition|(
name|isMaster
condition|)
block|{
if|if
condition|(
name|includeConfFiles
operator|!=
literal|null
condition|)
name|master
operator|.
name|add
argument_list|(
name|CONF_FILES
argument_list|,
name|includeConfFiles
argument_list|)
expr_stmt|;
name|master
operator|.
name|add
argument_list|(
name|REPLICATE_AFTER
argument_list|,
name|getReplicateAfterStrings
argument_list|()
argument_list|)
expr_stmt|;
name|master
operator|.
name|add
argument_list|(
literal|"replicationEnabled"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|replicationEnabled
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isMaster
operator|&&
name|commit
operator|!=
literal|null
condition|)
block|{
name|CommitVersionInfo
name|repCommitInfo
init|=
name|CommitVersionInfo
operator|.
name|build
argument_list|(
name|commit
argument_list|)
decl_stmt|;
name|master
operator|.
name|add
argument_list|(
literal|"replicableVersion"
argument_list|,
name|repCommitInfo
operator|.
name|version
argument_list|)
expr_stmt|;
name|master
operator|.
name|add
argument_list|(
literal|"replicableGeneration"
argument_list|,
name|repCommitInfo
operator|.
name|generation
argument_list|)
expr_stmt|;
block|}
name|SnapPuller
name|snapPuller
init|=
name|tempSnapPuller
decl_stmt|;
if|if
condition|(
name|snapPuller
operator|!=
literal|null
condition|)
block|{
name|Properties
name|props
init|=
name|loadReplicationProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|showSlaveDetails
condition|)
block|{
try|try
block|{
name|NamedList
name|nl
init|=
name|snapPuller
operator|.
name|getDetails
argument_list|()
decl_stmt|;
name|slave
operator|.
name|add
argument_list|(
literal|"masterDetails"
argument_list|,
name|nl
operator|.
name|get
argument_list|(
name|CMD_DETAILS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while invoking 'details' method for replication on master "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|slave
operator|.
name|add
argument_list|(
name|ERR_STATUS
argument_list|,
literal|"invalid_master"
argument_list|)
expr_stmt|;
block|}
block|}
name|slave
operator|.
name|add
argument_list|(
name|MASTER_URL
argument_list|,
name|snapPuller
operator|.
name|getMasterUrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|snapPuller
operator|.
name|getPollInterval
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|slave
operator|.
name|add
argument_list|(
name|SnapPuller
operator|.
name|POLL_INTERVAL
argument_list|,
name|snapPuller
operator|.
name|getPollInterval
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|snapPuller
operator|.
name|getNextScheduledExecTime
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|isPollingDisabled
argument_list|()
condition|)
block|{
name|slave
operator|.
name|add
argument_list|(
name|NEXT_EXECUTION_AT
argument_list|,
operator|new
name|Date
argument_list|(
name|snapPuller
operator|.
name|getNextScheduledExecTime
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isPollingDisabled
argument_list|()
condition|)
block|{
name|slave
operator|.
name|add
argument_list|(
name|NEXT_EXECUTION_AT
argument_list|,
literal|"Polling disabled"
argument_list|)
expr_stmt|;
block|}
name|addVal
argument_list|(
name|slave
argument_list|,
name|SnapPuller
operator|.
name|INDEX_REPLICATED_AT
argument_list|,
name|props
argument_list|,
name|Date
operator|.
name|class
argument_list|)
expr_stmt|;
name|addVal
argument_list|(
name|slave
argument_list|,
name|SnapPuller
operator|.
name|INDEX_REPLICATED_AT_LIST
argument_list|,
name|props
argument_list|,
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|addVal
argument_list|(
name|slave
argument_list|,
name|SnapPuller
operator|.
name|REPLICATION_FAILED_AT_LIST
argument_list|,
name|props
argument_list|,
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|addVal
argument_list|(
name|slave
argument_list|,
name|SnapPuller
operator|.
name|TIMES_INDEX_REPLICATED
argument_list|,
name|props
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|addVal
argument_list|(
name|slave
argument_list|,
name|SnapPuller
operator|.
name|CONF_FILES_REPLICATED
argument_list|,
name|props
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|addVal
argument_list|(
name|slave
argument_list|,
name|SnapPuller
operator|.
name|TIMES_CONFIG_REPLICATED
argument_list|,
name|props
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|addVal
argument_list|(
name|slave
argument_list|,
name|SnapPuller
operator|.
name|CONF_FILES_REPLICATED_AT
argument_list|,
name|props
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|addVal
argument_list|(
name|slave
argument_list|,
name|SnapPuller
operator|.
name|LAST_CYCLE_BYTES_DOWNLOADED
argument_list|,
name|props
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|addVal
argument_list|(
name|slave
argument_list|,
name|SnapPuller
operator|.
name|TIMES_FAILED
argument_list|,
name|props
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|addVal
argument_list|(
name|slave
argument_list|,
name|SnapPuller
operator|.
name|REPLICATION_FAILED_AT
argument_list|,
name|props
argument_list|,
name|Date
operator|.
name|class
argument_list|)
expr_stmt|;
name|addVal
argument_list|(
name|slave
argument_list|,
name|SnapPuller
operator|.
name|PREVIOUS_CYCLE_TIME_TAKEN
argument_list|,
name|props
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|slave
operator|.
name|add
argument_list|(
literal|"currentDate"
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|slave
operator|.
name|add
argument_list|(
literal|"isPollingDisabled"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|isPollingDisabled
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|isReplicating
init|=
name|isReplicating
argument_list|()
decl_stmt|;
name|slave
operator|.
name|add
argument_list|(
literal|"isReplicating"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|isReplicating
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isReplicating
condition|)
block|{
try|try
block|{
name|long
name|bytesToDownload
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|filesToDownload
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|file
range|:
name|snapPuller
operator|.
name|getFilesToDownload
argument_list|()
control|)
block|{
name|filesToDownload
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|file
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|bytesToDownload
operator|+=
operator|(
name|Long
operator|)
name|file
operator|.
name|get
argument_list|(
name|SIZE
argument_list|)
expr_stmt|;
block|}
comment|//get list of conf files to download
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|file
range|:
name|snapPuller
operator|.
name|getConfFilesToDownload
argument_list|()
control|)
block|{
name|filesToDownload
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|file
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|bytesToDownload
operator|+=
operator|(
name|Long
operator|)
name|file
operator|.
name|get
argument_list|(
name|SIZE
argument_list|)
expr_stmt|;
block|}
name|slave
operator|.
name|add
argument_list|(
literal|"filesToDownload"
argument_list|,
name|filesToDownload
argument_list|)
expr_stmt|;
name|slave
operator|.
name|add
argument_list|(
literal|"numFilesToDownload"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|filesToDownload
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|slave
operator|.
name|add
argument_list|(
literal|"bytesToDownload"
argument_list|,
name|NumberUtils
operator|.
name|readableSize
argument_list|(
name|bytesToDownload
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|bytesDownloaded
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|filesDownloaded
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|file
range|:
name|snapPuller
operator|.
name|getFilesDownloaded
argument_list|()
control|)
block|{
name|filesDownloaded
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|file
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|bytesDownloaded
operator|+=
operator|(
name|Long
operator|)
name|file
operator|.
name|get
argument_list|(
name|SIZE
argument_list|)
expr_stmt|;
block|}
comment|//get list of conf files downloaded
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|file
range|:
name|snapPuller
operator|.
name|getConfFilesDownloaded
argument_list|()
control|)
block|{
name|filesDownloaded
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|file
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|bytesDownloaded
operator|+=
operator|(
name|Long
operator|)
name|file
operator|.
name|get
argument_list|(
name|SIZE
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|currentFile
init|=
name|snapPuller
operator|.
name|getCurrentFile
argument_list|()
decl_stmt|;
name|String
name|currFile
init|=
literal|null
decl_stmt|;
name|long
name|currFileSize
init|=
literal|0
decl_stmt|,
name|currFileSizeDownloaded
init|=
literal|0
decl_stmt|;
name|float
name|percentDownloaded
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|currentFile
operator|!=
literal|null
condition|)
block|{
name|currFile
operator|=
operator|(
name|String
operator|)
name|currentFile
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|currFileSize
operator|=
operator|(
name|Long
operator|)
name|currentFile
operator|.
name|get
argument_list|(
name|SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentFile
operator|.
name|containsKey
argument_list|(
literal|"bytesDownloaded"
argument_list|)
condition|)
block|{
name|currFileSizeDownloaded
operator|=
operator|(
name|Long
operator|)
name|currentFile
operator|.
name|get
argument_list|(
literal|"bytesDownloaded"
argument_list|)
expr_stmt|;
name|bytesDownloaded
operator|+=
name|currFileSizeDownloaded
expr_stmt|;
if|if
condition|(
name|currFileSize
operator|>
literal|0
condition|)
name|percentDownloaded
operator|=
operator|(
name|currFileSizeDownloaded
operator|*
literal|100
operator|)
operator|/
name|currFileSize
expr_stmt|;
block|}
block|}
name|slave
operator|.
name|add
argument_list|(
literal|"filesDownloaded"
argument_list|,
name|filesDownloaded
argument_list|)
expr_stmt|;
name|slave
operator|.
name|add
argument_list|(
literal|"numFilesDownloaded"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|filesDownloaded
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|estimatedTimeRemaining
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|snapPuller
operator|.
name|getReplicationStartTime
argument_list|()
operator|>
literal|0
condition|)
block|{
name|slave
operator|.
name|add
argument_list|(
literal|"replicationStartTime"
argument_list|,
operator|new
name|Date
argument_list|(
name|snapPuller
operator|.
name|getReplicationStartTime
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|elapsed
init|=
name|getTimeElapsed
argument_list|(
name|snapPuller
argument_list|)
decl_stmt|;
name|slave
operator|.
name|add
argument_list|(
literal|"timeElapsed"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|elapsed
argument_list|)
operator|+
literal|"s"
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesDownloaded
operator|>
literal|0
condition|)
name|estimatedTimeRemaining
operator|=
operator|(
operator|(
name|bytesToDownload
operator|-
name|bytesDownloaded
operator|)
operator|*
name|elapsed
operator|)
operator|/
name|bytesDownloaded
expr_stmt|;
name|float
name|totalPercent
init|=
literal|0
decl_stmt|;
name|long
name|downloadSpeed
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|bytesToDownload
operator|>
literal|0
condition|)
name|totalPercent
operator|=
operator|(
name|bytesDownloaded
operator|*
literal|100
operator|)
operator|/
name|bytesToDownload
expr_stmt|;
if|if
condition|(
name|elapsed
operator|>
literal|0
condition|)
name|downloadSpeed
operator|=
operator|(
name|bytesDownloaded
operator|/
name|elapsed
operator|)
expr_stmt|;
if|if
condition|(
name|currFile
operator|!=
literal|null
condition|)
name|slave
operator|.
name|add
argument_list|(
literal|"currentFile"
argument_list|,
name|currFile
argument_list|)
expr_stmt|;
name|slave
operator|.
name|add
argument_list|(
literal|"currentFileSize"
argument_list|,
name|NumberUtils
operator|.
name|readableSize
argument_list|(
name|currFileSize
argument_list|)
argument_list|)
expr_stmt|;
name|slave
operator|.
name|add
argument_list|(
literal|"currentFileSizeDownloaded"
argument_list|,
name|NumberUtils
operator|.
name|readableSize
argument_list|(
name|currFileSizeDownloaded
argument_list|)
argument_list|)
expr_stmt|;
name|slave
operator|.
name|add
argument_list|(
literal|"currentFileSizePercent"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|percentDownloaded
argument_list|)
argument_list|)
expr_stmt|;
name|slave
operator|.
name|add
argument_list|(
literal|"bytesDownloaded"
argument_list|,
name|NumberUtils
operator|.
name|readableSize
argument_list|(
name|bytesDownloaded
argument_list|)
argument_list|)
expr_stmt|;
name|slave
operator|.
name|add
argument_list|(
literal|"totalPercent"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|totalPercent
argument_list|)
argument_list|)
expr_stmt|;
name|slave
operator|.
name|add
argument_list|(
literal|"timeRemaining"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|estimatedTimeRemaining
argument_list|)
operator|+
literal|"s"
argument_list|)
expr_stmt|;
name|slave
operator|.
name|add
argument_list|(
literal|"downloadSpeed"
argument_list|,
name|NumberUtils
operator|.
name|readableSize
argument_list|(
name|downloadSpeed
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while writing replication details: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|isMaster
condition|)
name|details
operator|.
name|add
argument_list|(
literal|"master"
argument_list|,
name|master
argument_list|)
expr_stmt|;
if|if
condition|(
name|slave
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|details
operator|.
name|add
argument_list|(
literal|"slave"
argument_list|,
name|slave
argument_list|)
expr_stmt|;
name|NamedList
name|snapshotStats
init|=
name|snapShootDetails
decl_stmt|;
if|if
condition|(
name|snapshotStats
operator|!=
literal|null
condition|)
name|details
operator|.
name|add
argument_list|(
name|CMD_BACKUP
argument_list|,
name|snapshotStats
argument_list|)
expr_stmt|;
return|return
name|details
return|;
block|}
DECL|method|addVal
specifier|private
name|void
name|addVal
parameter_list|(
name|NamedList
argument_list|<
name|Object
argument_list|>
name|nl
parameter_list|,
name|String
name|key
parameter_list|,
name|Properties
name|props
parameter_list|,
name|Class
name|clzz
parameter_list|)
block|{
name|String
name|s
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|s
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return;
if|if
condition|(
name|clzz
operator|==
name|Date
operator|.
name|class
condition|)
block|{
try|try
block|{
name|Long
name|l
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|nl
operator|.
name|add
argument_list|(
name|key
argument_list|,
operator|new
name|Date
argument_list|(
name|l
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|/*no op*/
block|}
block|}
elseif|else
if|if
condition|(
name|clzz
operator|==
name|List
operator|.
name|class
condition|)
block|{
name|String
name|ss
index|[]
init|=
name|s
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ss
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|.
name|add
argument_list|(
operator|new
name|Date
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|ss
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|nl
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nl
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getReplicateAfterStrings
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getReplicateAfterStrings
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|replicateAfter
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|replicateOnCommit
condition|)
name|replicateAfter
operator|.
name|add
argument_list|(
literal|"commit"
argument_list|)
expr_stmt|;
if|if
condition|(
name|replicateOnOptimize
condition|)
name|replicateAfter
operator|.
name|add
argument_list|(
literal|"optimize"
argument_list|)
expr_stmt|;
if|if
condition|(
name|replicateOnStart
condition|)
name|replicateAfter
operator|.
name|add
argument_list|(
literal|"startup"
argument_list|)
expr_stmt|;
return|return
name|replicateAfter
return|;
block|}
DECL|method|getTimeElapsed
specifier|private
name|long
name|getTimeElapsed
parameter_list|(
name|SnapPuller
name|snapPuller
parameter_list|)
block|{
name|long
name|timeElapsed
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|snapPuller
operator|.
name|getReplicationStartTime
argument_list|()
operator|>
literal|0
condition|)
name|timeElapsed
operator|=
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|snapPuller
operator|.
name|getReplicationStartTime
argument_list|()
operator|)
operator|/
literal|1000
expr_stmt|;
return|return
name|timeElapsed
return|;
block|}
DECL|method|loadReplicationProperties
name|Properties
name|loadReplicationProperties
parameter_list|()
block|{
name|Directory
name|dir
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|dir
operator|=
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|get
argument_list|(
name|core
operator|.
name|getDataDir
argument_list|()
argument_list|,
name|DirContext
operator|.
name|META_DATA
argument_list|,
name|core
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|indexConfig
operator|.
name|lockType
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|fileExists
argument_list|(
name|SnapPuller
operator|.
name|REPLICATION_PROPERTIES
argument_list|)
condition|)
block|{
return|return
operator|new
name|Properties
argument_list|()
return|;
block|}
specifier|final
name|IndexInput
name|input
init|=
name|dir
operator|.
name|openInput
argument_list|(
name|SnapPuller
operator|.
name|REPLICATION_PROPERTIES
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|InputStream
name|is
init|=
operator|new
name|PropertiesInputStream
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|CHARSET_UTF_8
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
finally|finally
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|release
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|//  void refreshCommitpoint() {
comment|//    IndexCommit commitPoint = core.getDeletionPolicy().getLatestCommit();
comment|//    if(replicateOnCommit || (replicateOnOptimize&& commitPoint.getSegmentCount() == 1)) {
comment|//      indexCommitPoint = commitPoint;
comment|//    }
comment|//  }
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|this
operator|.
name|core
operator|=
name|core
expr_stmt|;
name|registerFileStreamResponseWriter
argument_list|()
expr_stmt|;
name|registerCloseHook
argument_list|()
expr_stmt|;
name|Object
name|nbtk
init|=
name|initArgs
operator|.
name|get
argument_list|(
name|NUMBER_BACKUPS_TO_KEEP_INIT_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|nbtk
operator|!=
literal|null
condition|)
block|{
name|numberBackupsToKeep
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|nbtk
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|numberBackupsToKeep
operator|=
literal|0
expr_stmt|;
block|}
name|NamedList
name|slave
init|=
operator|(
name|NamedList
operator|)
name|initArgs
operator|.
name|get
argument_list|(
literal|"slave"
argument_list|)
decl_stmt|;
name|boolean
name|enableSlave
init|=
name|isEnabled
argument_list|(
name|slave
argument_list|)
decl_stmt|;
if|if
condition|(
name|enableSlave
condition|)
block|{
name|tempSnapPuller
operator|=
name|snapPuller
operator|=
operator|new
name|SnapPuller
argument_list|(
name|slave
argument_list|,
name|this
argument_list|,
name|core
argument_list|)
expr_stmt|;
name|isSlave
operator|=
literal|true
expr_stmt|;
block|}
name|NamedList
name|master
init|=
operator|(
name|NamedList
operator|)
name|initArgs
operator|.
name|get
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|boolean
name|enableMaster
init|=
name|isEnabled
argument_list|(
name|master
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|enableSlave
operator|&&
operator|!
name|enableMaster
condition|)
block|{
name|enableMaster
operator|=
literal|true
expr_stmt|;
name|master
operator|=
operator|new
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|enableMaster
condition|)
block|{
name|includeConfFiles
operator|=
operator|(
name|String
operator|)
name|master
operator|.
name|get
argument_list|(
name|CONF_FILES
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeConfFiles
operator|!=
literal|null
operator|&&
name|includeConfFiles
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|includeConfFiles
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|String
index|[]
name|strs
init|=
name|file
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
comment|// if there is an alias add it or it is null
name|confFileNameAlias
operator|.
name|add
argument_list|(
name|strs
index|[
literal|0
index|]
argument_list|,
name|strs
operator|.
name|length
operator|>
literal|1
condition|?
name|strs
index|[
literal|1
index|]
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Replication enabled for following config files: "
operator|+
name|includeConfFiles
argument_list|)
expr_stmt|;
block|}
name|List
name|backup
init|=
name|master
operator|.
name|getAll
argument_list|(
literal|"backupAfter"
argument_list|)
decl_stmt|;
name|boolean
name|backupOnCommit
init|=
name|backup
operator|.
name|contains
argument_list|(
literal|"commit"
argument_list|)
decl_stmt|;
name|boolean
name|backupOnOptimize
init|=
operator|!
name|backupOnCommit
operator|&&
name|backup
operator|.
name|contains
argument_list|(
literal|"optimize"
argument_list|)
decl_stmt|;
name|List
name|replicateAfter
init|=
name|master
operator|.
name|getAll
argument_list|(
name|REPLICATE_AFTER
argument_list|)
decl_stmt|;
name|replicateOnCommit
operator|=
name|replicateAfter
operator|.
name|contains
argument_list|(
literal|"commit"
argument_list|)
expr_stmt|;
name|replicateOnOptimize
operator|=
operator|!
name|replicateOnCommit
operator|&&
name|replicateAfter
operator|.
name|contains
argument_list|(
literal|"optimize"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|replicateOnCommit
operator|&&
operator|!
name|replicateOnOptimize
condition|)
block|{
name|replicateOnCommit
operator|=
literal|true
expr_stmt|;
block|}
comment|// if we only want to replicate on optimize, we need the deletion policy to
comment|// save the last optimized commit point.
if|if
condition|(
name|replicateOnOptimize
condition|)
block|{
name|IndexDeletionPolicyWrapper
name|wrapper
init|=
name|core
operator|.
name|getDeletionPolicy
argument_list|()
decl_stmt|;
name|IndexDeletionPolicy
name|policy
init|=
name|wrapper
operator|==
literal|null
condition|?
literal|null
else|:
name|wrapper
operator|.
name|getWrappedDeletionPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|policy
operator|instanceof
name|SolrDeletionPolicy
condition|)
block|{
name|SolrDeletionPolicy
name|solrPolicy
init|=
operator|(
name|SolrDeletionPolicy
operator|)
name|policy
decl_stmt|;
if|if
condition|(
name|solrPolicy
operator|.
name|getMaxOptimizedCommitsToKeep
argument_list|()
operator|<
literal|1
condition|)
block|{
name|solrPolicy
operator|.
name|setMaxOptimizedCommitsToKeep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Replication can't call setMaxOptimizedCommitsToKeep on "
operator|+
name|policy
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|replicateOnOptimize
operator|||
name|backupOnOptimize
condition|)
block|{
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|registerOptimizeCallback
argument_list|(
name|getEventListener
argument_list|(
name|backupOnOptimize
argument_list|,
name|replicateOnOptimize
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|replicateOnCommit
operator|||
name|backupOnCommit
condition|)
block|{
name|replicateOnCommit
operator|=
literal|true
expr_stmt|;
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|registerCommitCallback
argument_list|(
name|getEventListener
argument_list|(
name|backupOnCommit
argument_list|,
name|replicateOnCommit
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|replicateAfter
operator|.
name|contains
argument_list|(
literal|"startup"
argument_list|)
condition|)
block|{
name|replicateOnStart
operator|=
literal|true
expr_stmt|;
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|s
init|=
name|core
operator|.
name|getNewestSearcher
argument_list|(
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|DirectoryReader
name|reader
init|=
name|s
operator|==
literal|null
condition|?
literal|null
else|:
name|s
operator|.
name|get
argument_list|()
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
operator|&&
name|reader
operator|.
name|getIndexCommit
argument_list|()
operator|!=
literal|null
operator|&&
name|reader
operator|.
name|getIndexCommit
argument_list|()
operator|.
name|getGeneration
argument_list|()
operator|!=
literal|1L
condition|)
block|{
try|try
block|{
if|if
condition|(
name|replicateOnOptimize
condition|)
block|{
name|Collection
argument_list|<
name|IndexCommit
argument_list|>
name|commits
init|=
name|DirectoryReader
operator|.
name|listCommits
argument_list|(
name|reader
operator|.
name|directory
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|IndexCommit
name|ic
range|:
name|commits
control|)
block|{
if|if
condition|(
name|ic
operator|.
name|getSegmentCount
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|indexCommitPoint
operator|==
literal|null
operator|||
name|indexCommitPoint
operator|.
name|getGeneration
argument_list|()
operator|<
name|ic
operator|.
name|getGeneration
argument_list|()
condition|)
name|indexCommitPoint
operator|=
name|ic
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|indexCommitPoint
operator|=
name|reader
operator|.
name|getIndexCommit
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// We don't need to save commit points for replication, the SolrDeletionPolicy
comment|// always saves the last commit point (and the last optimized commit point, if needed)
comment|/***               if(indexCommitPoint != null){                 core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getGeneration());               }               ***/
block|}
block|}
comment|// ensure the writer is init'd so that we have a list of commit points
name|RefCounted
argument_list|<
name|IndexWriter
argument_list|>
name|iw
init|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|getIndexWriter
argument_list|(
name|core
argument_list|)
decl_stmt|;
name|iw
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to get IndexCommit on startup"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
name|s
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|reserve
init|=
operator|(
name|String
operator|)
name|master
operator|.
name|get
argument_list|(
name|RESERVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|reserve
operator|!=
literal|null
operator|&&
operator|!
name|reserve
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|reserveCommitDuration
operator|=
name|SnapPuller
operator|.
name|readInterval
argument_list|(
name|reserve
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Commits will be reserved for  "
operator|+
name|reserveCommitDuration
argument_list|)
expr_stmt|;
name|isMaster
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// check master or slave is enabled
DECL|method|isEnabled
specifier|private
name|boolean
name|isEnabled
parameter_list|(
name|NamedList
name|params
parameter_list|)
block|{
if|if
condition|(
name|params
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|Object
name|enable
init|=
name|params
operator|.
name|get
argument_list|(
literal|"enable"
argument_list|)
decl_stmt|;
if|if
condition|(
name|enable
operator|==
literal|null
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|enable
operator|instanceof
name|String
condition|)
return|return
name|StrUtils
operator|.
name|parseBool
argument_list|(
operator|(
name|String
operator|)
name|enable
argument_list|)
return|;
return|return
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|enable
argument_list|)
return|;
block|}
comment|/**    * register a closehook    */
DECL|method|registerCloseHook
specifier|private
name|void
name|registerCloseHook
parameter_list|()
block|{
name|core
operator|.
name|addCloseHook
argument_list|(
operator|new
name|CloseHook
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|preClose
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
if|if
condition|(
name|snapPuller
operator|!=
literal|null
condition|)
block|{
name|snapPuller
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postClose
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files    * in a block-by-block manner within the same HTTP response.    */
DECL|method|registerFileStreamResponseWriter
specifier|private
name|void
name|registerFileStreamResponseWriter
parameter_list|()
block|{
name|core
operator|.
name|registerResponseWriter
argument_list|(
name|FILE_STREAM
argument_list|,
operator|new
name|BinaryQueryResponseWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|,
name|SolrQueryResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
name|DirectoryFileStream
name|stream
init|=
operator|(
name|DirectoryFileStream
operator|)
name|resp
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
name|FILE_STREAM
argument_list|)
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|,
name|SolrQueryResponse
name|response
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"This is a binary writer , Cannot write to a characterstream"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentType
parameter_list|(
name|SolrQueryRequest
name|request
parameter_list|,
name|SolrQueryResponse
name|response
parameter_list|)
block|{
return|return
literal|"application/octet-stream"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
comment|/*no op*/
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Register a listener for postcommit/optimize    *    * @param snapshoot do a snapshoot    * @param getCommit get a commitpoint also    *    * @return an instance of the eventlistener    */
DECL|method|getEventListener
specifier|private
name|SolrEventListener
name|getEventListener
parameter_list|(
specifier|final
name|boolean
name|snapshoot
parameter_list|,
specifier|final
name|boolean
name|getCommit
parameter_list|)
block|{
return|return
operator|new
name|SolrEventListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
comment|/*no op*/
block|}
comment|/**        * This refreshes the latest replicateable index commit and optionally can create Snapshots as well        */
annotation|@
name|Override
specifier|public
name|void
name|postCommit
parameter_list|()
block|{
name|IndexCommit
name|currentCommitPoint
init|=
name|core
operator|.
name|getDeletionPolicy
argument_list|()
operator|.
name|getLatestCommit
argument_list|()
decl_stmt|;
if|if
condition|(
name|getCommit
condition|)
block|{
comment|// IndexCommit oldCommitPoint = indexCommitPoint;
name|indexCommitPoint
operator|=
name|currentCommitPoint
expr_stmt|;
comment|// We don't need to save commit points for replication, the SolrDeletionPolicy
comment|// always saves the last commit point (and the last optimized commit point, if needed)
comment|/***           if (indexCommitPoint != null) {             core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getGeneration());           }           if(oldCommitPoint != null){             core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getGeneration());           }           ***/
block|}
if|if
condition|(
name|snapshoot
condition|)
block|{
try|try
block|{
name|int
name|numberToKeep
init|=
name|numberBackupsToKeep
decl_stmt|;
if|if
condition|(
name|numberToKeep
operator|<
literal|1
condition|)
block|{
name|numberToKeep
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
name|SnapShooter
name|snapShooter
init|=
operator|new
name|SnapShooter
argument_list|(
name|core
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|snapShooter
operator|.
name|createSnapAsync
argument_list|(
name|currentCommitPoint
argument_list|,
name|numberToKeep
argument_list|,
name|ReplicationHandler
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while snapshooting"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|newSearcher
parameter_list|(
name|SolrIndexSearcher
name|newSearcher
parameter_list|,
name|SolrIndexSearcher
name|currentSearcher
parameter_list|)
block|{
comment|/*no op*/
block|}
annotation|@
name|Override
specifier|public
name|void
name|postSoftCommit
parameter_list|()
block|{        }
block|}
return|;
block|}
DECL|class|DirectoryFileStream
specifier|private
class|class
name|DirectoryFileStream
block|{
DECL|field|params
specifier|protected
name|SolrParams
name|params
decl_stmt|;
DECL|field|fos
specifier|protected
name|FastOutputStream
name|fos
decl_stmt|;
DECL|field|indexGen
specifier|protected
name|Long
name|indexGen
decl_stmt|;
DECL|field|delPolicy
specifier|protected
name|IndexDeletionPolicyWrapper
name|delPolicy
decl_stmt|;
DECL|method|DirectoryFileStream
specifier|public
name|DirectoryFileStream
parameter_list|(
name|SolrParams
name|solrParams
parameter_list|)
block|{
name|params
operator|=
name|solrParams
expr_stmt|;
name|delPolicy
operator|=
name|core
operator|.
name|getDeletionPolicy
argument_list|()
expr_stmt|;
block|}
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileName
init|=
name|params
operator|.
name|get
argument_list|(
name|FILE
argument_list|)
decl_stmt|;
name|String
name|cfileName
init|=
name|params
operator|.
name|get
argument_list|(
name|CONF_FILE_SHORT
argument_list|)
decl_stmt|;
name|String
name|sOffset
init|=
name|params
operator|.
name|get
argument_list|(
name|OFFSET
argument_list|)
decl_stmt|;
name|String
name|sLen
init|=
name|params
operator|.
name|get
argument_list|(
name|LEN
argument_list|)
decl_stmt|;
name|String
name|compress
init|=
name|params
operator|.
name|get
argument_list|(
name|COMPRESSION
argument_list|)
decl_stmt|;
name|String
name|sChecksum
init|=
name|params
operator|.
name|get
argument_list|(
name|CHECKSUM
argument_list|)
decl_stmt|;
name|String
name|sGen
init|=
name|params
operator|.
name|get
argument_list|(
name|GENERATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|sGen
operator|!=
literal|null
condition|)
name|indexGen
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|sGen
argument_list|)
expr_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|compress
argument_list|)
condition|)
block|{
name|fos
operator|=
operator|new
name|FastOutputStream
argument_list|(
operator|new
name|DeflaterOutputStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fos
operator|=
operator|new
name|FastOutputStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|int
name|packetsWritten
init|=
literal|0
decl_stmt|;
name|IndexInput
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|long
name|offset
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|len
init|=
operator|-
literal|1
decl_stmt|;
comment|// check if checksum is requested
name|boolean
name|useChecksum
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|sChecksum
argument_list|)
decl_stmt|;
if|if
condition|(
name|sOffset
operator|!=
literal|null
condition|)
name|offset
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|sOffset
argument_list|)
expr_stmt|;
if|if
condition|(
name|sLen
operator|!=
literal|null
condition|)
name|len
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|sLen
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileName
operator|==
literal|null
operator|&&
name|cfileName
operator|==
literal|null
condition|)
block|{
comment|// no filename do nothing
name|writeNothing
argument_list|()
expr_stmt|;
block|}
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|sref
init|=
name|core
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
name|Directory
name|dir
decl_stmt|;
try|try
block|{
name|SolrIndexSearcher
name|searcher
init|=
name|sref
operator|.
name|get
argument_list|()
decl_stmt|;
name|dir
operator|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|directory
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|sref
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
name|in
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
expr_stmt|;
comment|// if offset is mentioned move the pointer to that point
if|if
condition|(
name|offset
operator|!=
operator|-
literal|1
condition|)
name|in
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
operator|(
name|len
operator|==
operator|-
literal|1
operator|||
name|len
operator|>
name|PACKET_SZ
operator|)
condition|?
name|PACKET_SZ
else|:
name|len
index|]
decl_stmt|;
name|Checksum
name|checksum
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|useChecksum
condition|)
name|checksum
operator|=
operator|new
name|Adler32
argument_list|()
expr_stmt|;
name|long
name|filelen
init|=
name|dir
operator|.
name|fileLength
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|offset
operator|=
name|offset
operator|==
operator|-
literal|1
condition|?
literal|0
else|:
name|offset
expr_stmt|;
name|int
name|read
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|buf
operator|.
name|length
argument_list|,
name|filelen
operator|-
name|offset
argument_list|)
decl_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|fos
operator|.
name|writeInt
argument_list|(
operator|(
name|int
operator|)
name|read
argument_list|)
expr_stmt|;
if|if
condition|(
name|useChecksum
condition|)
block|{
name|checksum
operator|.
name|reset
argument_list|()
expr_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|fos
operator|.
name|writeLong
argument_list|(
name|checksum
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fos
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|indexGen
operator|!=
literal|null
operator|&&
operator|(
name|packetsWritten
operator|%
literal|5
operator|==
literal|0
operator|)
condition|)
block|{
comment|// after every 5 packets reserve the commitpoint for some time
name|delPolicy
operator|.
name|setReserveDuration
argument_list|(
name|indexGen
argument_list|,
name|reserveCommitDuration
argument_list|)
expr_stmt|;
block|}
name|packetsWritten
operator|++
expr_stmt|;
if|if
condition|(
name|read
operator|!=
name|buf
operator|.
name|length
condition|)
block|{
name|writeNothing
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
block|}
name|offset
operator|+=
name|read
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while writing response for params: "
operator|+
name|params
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Used to write a marker for EOF      */
DECL|method|writeNothing
specifier|protected
name|void
name|writeNothing
parameter_list|()
throws|throws
name|IOException
block|{
name|fos
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|LocalFsFileStream
specifier|private
class|class
name|LocalFsFileStream
extends|extends
name|DirectoryFileStream
block|{
DECL|method|LocalFsFileStream
specifier|public
name|LocalFsFileStream
parameter_list|(
name|SolrParams
name|solrParams
parameter_list|)
block|{
name|super
argument_list|(
name|solrParams
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileName
init|=
name|params
operator|.
name|get
argument_list|(
name|FILE
argument_list|)
decl_stmt|;
name|String
name|cfileName
init|=
name|params
operator|.
name|get
argument_list|(
name|CONF_FILE_SHORT
argument_list|)
decl_stmt|;
name|String
name|sOffset
init|=
name|params
operator|.
name|get
argument_list|(
name|OFFSET
argument_list|)
decl_stmt|;
name|String
name|sLen
init|=
name|params
operator|.
name|get
argument_list|(
name|LEN
argument_list|)
decl_stmt|;
name|String
name|compress
init|=
name|params
operator|.
name|get
argument_list|(
name|COMPRESSION
argument_list|)
decl_stmt|;
name|String
name|sChecksum
init|=
name|params
operator|.
name|get
argument_list|(
name|CHECKSUM
argument_list|)
decl_stmt|;
name|String
name|sGen
init|=
name|params
operator|.
name|get
argument_list|(
name|GENERATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|sGen
operator|!=
literal|null
condition|)
name|indexGen
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|sGen
argument_list|)
expr_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|compress
argument_list|)
condition|)
block|{
name|fos
operator|=
operator|new
name|FastOutputStream
argument_list|(
operator|new
name|DeflaterOutputStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fos
operator|=
operator|new
name|FastOutputStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|FileInputStream
name|inputStream
init|=
literal|null
decl_stmt|;
name|int
name|packetsWritten
init|=
literal|0
decl_stmt|;
try|try
block|{
name|long
name|offset
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|len
init|=
operator|-
literal|1
decl_stmt|;
comment|//check if checksum is requested
name|boolean
name|useChecksum
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|sChecksum
argument_list|)
decl_stmt|;
if|if
condition|(
name|sOffset
operator|!=
literal|null
condition|)
name|offset
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|sOffset
argument_list|)
expr_stmt|;
if|if
condition|(
name|sLen
operator|!=
literal|null
condition|)
name|len
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|sLen
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileName
operator|==
literal|null
operator|&&
name|cfileName
operator|==
literal|null
condition|)
block|{
comment|//no filename do nothing
name|writeNothing
argument_list|()
expr_stmt|;
block|}
name|File
name|file
init|=
literal|null
decl_stmt|;
comment|//if if is a conf file read from config diectory
name|file
operator|=
operator|new
name|File
argument_list|(
name|core
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|getConfigDir
argument_list|()
argument_list|,
name|cfileName
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
operator|&&
name|file
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|inputStream
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|FileChannel
name|channel
init|=
name|inputStream
operator|.
name|getChannel
argument_list|()
decl_stmt|;
comment|//if offset is mentioned move the pointer to that point
if|if
condition|(
name|offset
operator|!=
operator|-
literal|1
condition|)
name|channel
operator|.
name|position
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
operator|(
name|len
operator|==
operator|-
literal|1
operator|||
name|len
operator|>
name|PACKET_SZ
operator|)
condition|?
name|PACKET_SZ
else|:
name|len
index|]
decl_stmt|;
name|Checksum
name|checksum
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|useChecksum
condition|)
name|checksum
operator|=
operator|new
name|Adler32
argument_list|()
expr_stmt|;
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buf
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|bb
operator|.
name|clear
argument_list|()
expr_stmt|;
name|long
name|bytesRead
init|=
name|channel
operator|.
name|read
argument_list|(
name|bb
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytesRead
operator|<=
literal|0
condition|)
block|{
name|writeNothing
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
block|}
name|fos
operator|.
name|writeInt
argument_list|(
operator|(
name|int
operator|)
name|bytesRead
argument_list|)
expr_stmt|;
if|if
condition|(
name|useChecksum
condition|)
block|{
name|checksum
operator|.
name|reset
argument_list|()
expr_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|bytesRead
argument_list|)
expr_stmt|;
name|fos
operator|.
name|writeLong
argument_list|(
name|checksum
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fos
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|bytesRead
argument_list|)
expr_stmt|;
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|indexGen
operator|!=
literal|null
operator|&&
operator|(
name|packetsWritten
operator|%
literal|5
operator|==
literal|0
operator|)
condition|)
block|{
comment|//after every 5 packets reserve the commitpoint for some time
name|delPolicy
operator|.
name|setReserveDuration
argument_list|(
name|indexGen
argument_list|,
name|reserveCommitDuration
argument_list|)
expr_stmt|;
block|}
name|packetsWritten
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
name|writeNothing
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while writing response for params: "
operator|+
name|params
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|MASTER_URL
specifier|public
specifier|static
specifier|final
name|String
name|MASTER_URL
init|=
literal|"masterUrl"
decl_stmt|;
DECL|field|STATUS
specifier|public
specifier|static
specifier|final
name|String
name|STATUS
init|=
literal|"status"
decl_stmt|;
DECL|field|COMMAND
specifier|public
specifier|static
specifier|final
name|String
name|COMMAND
init|=
literal|"command"
decl_stmt|;
DECL|field|CMD_DETAILS
specifier|public
specifier|static
specifier|final
name|String
name|CMD_DETAILS
init|=
literal|"details"
decl_stmt|;
DECL|field|CMD_BACKUP
specifier|public
specifier|static
specifier|final
name|String
name|CMD_BACKUP
init|=
literal|"backup"
decl_stmt|;
DECL|field|CMD_FETCH_INDEX
specifier|public
specifier|static
specifier|final
name|String
name|CMD_FETCH_INDEX
init|=
literal|"fetchindex"
decl_stmt|;
DECL|field|CMD_ABORT_FETCH
specifier|public
specifier|static
specifier|final
name|String
name|CMD_ABORT_FETCH
init|=
literal|"abortfetch"
decl_stmt|;
DECL|field|CMD_GET_FILE_LIST
specifier|public
specifier|static
specifier|final
name|String
name|CMD_GET_FILE_LIST
init|=
literal|"filelist"
decl_stmt|;
DECL|field|CMD_GET_FILE
specifier|public
specifier|static
specifier|final
name|String
name|CMD_GET_FILE
init|=
literal|"filecontent"
decl_stmt|;
DECL|field|CMD_DISABLE_POLL
specifier|public
specifier|static
specifier|final
name|String
name|CMD_DISABLE_POLL
init|=
literal|"disablepoll"
decl_stmt|;
DECL|field|CMD_DISABLE_REPL
specifier|public
specifier|static
specifier|final
name|String
name|CMD_DISABLE_REPL
init|=
literal|"disablereplication"
decl_stmt|;
DECL|field|CMD_ENABLE_REPL
specifier|public
specifier|static
specifier|final
name|String
name|CMD_ENABLE_REPL
init|=
literal|"enablereplication"
decl_stmt|;
DECL|field|CMD_ENABLE_POLL
specifier|public
specifier|static
specifier|final
name|String
name|CMD_ENABLE_POLL
init|=
literal|"enablepoll"
decl_stmt|;
DECL|field|CMD_INDEX_VERSION
specifier|public
specifier|static
specifier|final
name|String
name|CMD_INDEX_VERSION
init|=
literal|"indexversion"
decl_stmt|;
DECL|field|CMD_SHOW_COMMITS
specifier|public
specifier|static
specifier|final
name|String
name|CMD_SHOW_COMMITS
init|=
literal|"commits"
decl_stmt|;
DECL|field|GENERATION
specifier|public
specifier|static
specifier|final
name|String
name|GENERATION
init|=
literal|"generation"
decl_stmt|;
DECL|field|OFFSET
specifier|public
specifier|static
specifier|final
name|String
name|OFFSET
init|=
literal|"offset"
decl_stmt|;
DECL|field|LEN
specifier|public
specifier|static
specifier|final
name|String
name|LEN
init|=
literal|"len"
decl_stmt|;
DECL|field|FILE
specifier|public
specifier|static
specifier|final
name|String
name|FILE
init|=
literal|"file"
decl_stmt|;
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
DECL|field|SIZE
specifier|public
specifier|static
specifier|final
name|String
name|SIZE
init|=
literal|"size"
decl_stmt|;
DECL|field|CONF_FILE_SHORT
specifier|public
specifier|static
specifier|final
name|String
name|CONF_FILE_SHORT
init|=
literal|"cf"
decl_stmt|;
DECL|field|CHECKSUM
specifier|public
specifier|static
specifier|final
name|String
name|CHECKSUM
init|=
literal|"checksum"
decl_stmt|;
DECL|field|ALIAS
specifier|public
specifier|static
specifier|final
name|String
name|ALIAS
init|=
literal|"alias"
decl_stmt|;
DECL|field|CONF_CHECKSUM
specifier|public
specifier|static
specifier|final
name|String
name|CONF_CHECKSUM
init|=
literal|"confchecksum"
decl_stmt|;
DECL|field|CONF_FILES
specifier|public
specifier|static
specifier|final
name|String
name|CONF_FILES
init|=
literal|"confFiles"
decl_stmt|;
DECL|field|REPLICATE_AFTER
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATE_AFTER
init|=
literal|"replicateAfter"
decl_stmt|;
DECL|field|FILE_STREAM
specifier|public
specifier|static
specifier|final
name|String
name|FILE_STREAM
init|=
literal|"filestream"
decl_stmt|;
DECL|field|PACKET_SZ
specifier|public
specifier|static
specifier|final
name|int
name|PACKET_SZ
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|// 1MB
DECL|field|RESERVE
specifier|public
specifier|static
specifier|final
name|String
name|RESERVE
init|=
literal|"commitReserveDuration"
decl_stmt|;
DECL|field|COMPRESSION
specifier|public
specifier|static
specifier|final
name|String
name|COMPRESSION
init|=
literal|"compression"
decl_stmt|;
DECL|field|EXTERNAL
specifier|public
specifier|static
specifier|final
name|String
name|EXTERNAL
init|=
literal|"external"
decl_stmt|;
DECL|field|INTERNAL
specifier|public
specifier|static
specifier|final
name|String
name|INTERNAL
init|=
literal|"internal"
decl_stmt|;
DECL|field|ERR_STATUS
specifier|public
specifier|static
specifier|final
name|String
name|ERR_STATUS
init|=
literal|"ERROR"
decl_stmt|;
DECL|field|OK_STATUS
specifier|public
specifier|static
specifier|final
name|String
name|OK_STATUS
init|=
literal|"OK"
decl_stmt|;
DECL|field|NEXT_EXECUTION_AT
specifier|public
specifier|static
specifier|final
name|String
name|NEXT_EXECUTION_AT
init|=
literal|"nextExecutionAt"
decl_stmt|;
DECL|field|NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM
init|=
literal|"numberToKeep"
decl_stmt|;
DECL|field|NUMBER_BACKUPS_TO_KEEP_INIT_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|NUMBER_BACKUPS_TO_KEEP_INIT_PARAM
init|=
literal|"maxNumberOfBackups"
decl_stmt|;
comment|/**     * Boolean param for tests that can be specified when using     * {@link #CMD_FETCH_INDEX} to force the current request to block until     * the fetch is complete.<b>NOTE:</b> This param is not advised for     * non-test code, since the the durration of the fetch for non-trivial    * indexes will likeley cause the request to time out.    *    * @lucene.internal    */
DECL|field|WAIT
specifier|public
specifier|static
specifier|final
name|String
name|WAIT
init|=
literal|"wait"
decl_stmt|;
block|}
end_class
end_unit
