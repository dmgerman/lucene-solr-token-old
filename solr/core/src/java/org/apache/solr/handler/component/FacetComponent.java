begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ShardParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SimpleFacets
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QueryParsing
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SyntaxError
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|facet
operator|.
name|FacetDebugInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RTimer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * Computes facets -- aggregations with counts of terms or ranges over the whole search results.  *  * @since solr 1.3  */
end_comment
begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|class|FacetComponent
specifier|public
class|class
name|FacetComponent
extends|extends
name|SearchComponent
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|COMPONENT_NAME
specifier|public
specifier|static
specifier|final
name|String
name|COMPONENT_NAME
init|=
literal|"facet"
decl_stmt|;
DECL|field|FACET_QUERY_KEY
specifier|public
specifier|static
specifier|final
name|String
name|FACET_QUERY_KEY
init|=
literal|"facet_queries"
decl_stmt|;
DECL|field|FACET_FIELD_KEY
specifier|public
specifier|static
specifier|final
name|String
name|FACET_FIELD_KEY
init|=
literal|"facet_fields"
decl_stmt|;
DECL|field|FACET_RANGES_KEY
specifier|public
specifier|static
specifier|final
name|String
name|FACET_RANGES_KEY
init|=
literal|"facet_ranges"
decl_stmt|;
DECL|field|FACET_INTERVALS_KEY
specifier|public
specifier|static
specifier|final
name|String
name|FACET_INTERVALS_KEY
init|=
literal|"facet_intervals"
decl_stmt|;
DECL|field|PIVOT_KEY
specifier|private
specifier|static
specifier|final
name|String
name|PIVOT_KEY
init|=
literal|"facet_pivot"
decl_stmt|;
DECL|field|PIVOT_REFINE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PIVOT_REFINE_PREFIX
init|=
literal|"{!"
operator|+
name|PivotFacet
operator|.
name|REFINE_PARAM
operator|+
literal|"="
decl_stmt|;
annotation|@
name|Override
DECL|method|prepare
specifier|public
name|void
name|prepare
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|rb
operator|.
name|setNeedDocSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rb
operator|.
name|doFacets
operator|=
literal|true
expr_stmt|;
comment|// Deduplicate facet params
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|SolrParams
name|origParams
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|origParams
operator|.
name|getParameterNamesIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|paramName
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Deduplicate the list with LinkedHashSet, but _only_ for facet params.
if|if
condition|(
operator|!
name|paramName
operator|.
name|startsWith
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|)
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
name|paramName
argument_list|,
name|origParams
operator|.
name|getParams
argument_list|(
name|paramName
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|HashSet
argument_list|<
name|String
argument_list|>
name|deDupe
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|origParams
operator|.
name|getParams
argument_list|(
name|paramName
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|paramName
argument_list|,
name|deDupe
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|deDupe
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rb
operator|.
name|req
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
comment|// Initialize context
name|FacetContext
operator|.
name|initContext
argument_list|(
name|rb
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Encapsulates facet ranges and facet queries such that their parameters    * are parsed and cached for efficient re-use.    *<p>    * An instance of this class is initialized and kept in the request context via the static    * method {@link org.apache.solr.handler.component.FacetComponent.FacetContext#initContext(ResponseBuilder)} and    * can be retrieved via {@link org.apache.solr.handler.component.FacetComponent.FacetContext#getFacetContext(SolrQueryRequest)}    *<p>    * This class is used exclusively in a single-node context (i.e. non distributed requests or an individual shard    * request). Also see {@link org.apache.solr.handler.component.FacetComponent.FacetInfo} which is    * dedicated exclusively for merging responses from multiple shards and plays no role during computation of facet    * counts in a single node request.    *    *<b>This API is experimental and subject to change</b>    *    * @see org.apache.solr.handler.component.FacetComponent.FacetInfo    */
DECL|class|FacetContext
specifier|public
specifier|static
class|class
name|FacetContext
block|{
DECL|field|FACET_CONTEXT_KEY
specifier|private
specifier|static
specifier|final
name|String
name|FACET_CONTEXT_KEY
init|=
literal|"_facet.context"
decl_stmt|;
DECL|field|allRangeFacets
specifier|private
specifier|final
name|List
argument_list|<
name|RangeFacetRequest
argument_list|>
name|allRangeFacets
decl_stmt|;
comment|// init in constructor
DECL|field|allQueryFacets
specifier|private
specifier|final
name|List
argument_list|<
name|FacetBase
argument_list|>
name|allQueryFacets
decl_stmt|;
comment|// init in constructor
DECL|field|taggedRangeFacets
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RangeFacetRequest
argument_list|>
argument_list|>
name|taggedRangeFacets
decl_stmt|;
DECL|field|taggedQueryFacets
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|FacetBase
argument_list|>
argument_list|>
name|taggedQueryFacets
decl_stmt|;
comment|/**      * Initializes FacetContext using request parameters and saves it in the request      * context which can be retrieved via {@link #getFacetContext(SolrQueryRequest)}      *      * @param rb the ResponseBuilder object from which the request parameters are read      *           and to which the FacetContext object is saved.      */
DECL|method|initContext
specifier|public
specifier|static
name|void
name|initContext
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
comment|// Parse facet queries and ranges and put them in the request
comment|// context so that they can be hung under pivots if needed without re-parsing
name|List
argument_list|<
name|RangeFacetRequest
argument_list|>
name|facetRanges
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|FacetBase
argument_list|>
name|facetQueries
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|ranges
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getParams
argument_list|(
name|FacetParams
operator|.
name|FACET_RANGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|ranges
operator|!=
literal|null
condition|)
block|{
name|facetRanges
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ranges
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|range
range|:
name|ranges
control|)
block|{
name|RangeFacetRequest
name|rangeFacetRequest
init|=
operator|new
name|RangeFacetRequest
argument_list|(
name|rb
argument_list|,
name|range
argument_list|)
decl_stmt|;
name|facetRanges
operator|.
name|add
argument_list|(
name|rangeFacetRequest
argument_list|)
expr_stmt|;
block|}
block|}
name|String
index|[]
name|queries
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getParams
argument_list|(
name|FacetParams
operator|.
name|FACET_QUERY
argument_list|)
decl_stmt|;
if|if
condition|(
name|queries
operator|!=
literal|null
condition|)
block|{
name|facetQueries
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|query
range|:
name|queries
control|)
block|{
name|facetQueries
operator|.
name|add
argument_list|(
operator|new
name|FacetBase
argument_list|(
name|rb
argument_list|,
name|FacetParams
operator|.
name|FACET_QUERY
argument_list|,
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|rb
operator|.
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|put
argument_list|(
name|FACET_CONTEXT_KEY
argument_list|,
operator|new
name|FacetContext
argument_list|(
name|facetRanges
argument_list|,
name|facetQueries
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|FacetContext
specifier|private
name|FacetContext
parameter_list|(
name|List
argument_list|<
name|RangeFacetRequest
argument_list|>
name|allRangeFacets
parameter_list|,
name|List
argument_list|<
name|FacetBase
argument_list|>
name|allQueryFacets
parameter_list|)
block|{
comment|// avoid NPEs, set to empty list if parameters are null
name|this
operator|.
name|allRangeFacets
operator|=
name|allRangeFacets
operator|==
literal|null
condition|?
name|Collections
operator|.
name|emptyList
argument_list|()
else|:
name|allRangeFacets
expr_stmt|;
name|this
operator|.
name|allQueryFacets
operator|=
name|allQueryFacets
operator|==
literal|null
condition|?
name|Collections
operator|.
name|emptyList
argument_list|()
else|:
name|allQueryFacets
expr_stmt|;
name|taggedRangeFacets
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|RangeFacetRequest
name|rf
range|:
name|this
operator|.
name|allRangeFacets
control|)
block|{
for|for
control|(
name|String
name|tag
range|:
name|rf
operator|.
name|getTags
argument_list|()
control|)
block|{
name|List
argument_list|<
name|RangeFacetRequest
argument_list|>
name|list
init|=
name|taggedRangeFacets
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// typically just one object
name|taggedRangeFacets
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|rf
argument_list|)
expr_stmt|;
block|}
block|}
name|taggedQueryFacets
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|FacetBase
name|qf
range|:
name|this
operator|.
name|allQueryFacets
control|)
block|{
for|for
control|(
name|String
name|tag
range|:
name|qf
operator|.
name|getTags
argument_list|()
control|)
block|{
name|List
argument_list|<
name|FacetBase
argument_list|>
name|list
init|=
name|taggedQueryFacets
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|taggedQueryFacets
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|qf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Return the {@link org.apache.solr.handler.component.FacetComponent.FacetContext} instance      * cached in the request context.      *      * @param req the {@link SolrQueryRequest}      * @return the cached FacetContext instance      * @throws IllegalStateException if no cached FacetContext instance is found in the request context      */
DECL|method|getFacetContext
specifier|public
specifier|static
name|FacetContext
name|getFacetContext
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|)
throws|throws
name|IllegalStateException
block|{
name|FacetContext
name|result
init|=
operator|(
name|FacetContext
operator|)
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|get
argument_list|(
name|FACET_CONTEXT_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|result
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"FacetContext can't be accessed before it's initialized in request context"
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * @return a {@link List} of {@link RangeFacetRequest} objects each representing a facet.range to be      * computed. Returns an empty list if no facet.range were requested.      */
DECL|method|getAllRangeFacetRequests
specifier|public
name|List
argument_list|<
name|RangeFacetRequest
argument_list|>
name|getAllRangeFacetRequests
parameter_list|()
block|{
return|return
name|allRangeFacets
return|;
block|}
comment|/**      * @return a {@link List} of {@link org.apache.solr.handler.component.FacetComponent.FacetBase} objects      * each representing a facet.query to be computed. Returns an empty list of no facet.query were requested.      */
DECL|method|getAllQueryFacets
specifier|public
name|List
argument_list|<
name|FacetBase
argument_list|>
name|getAllQueryFacets
parameter_list|()
block|{
return|return
name|allQueryFacets
return|;
block|}
comment|/**      * @param tag a String tag usually specified via local param on a facet.pivot      * @return a list of {@link RangeFacetRequest} objects which have been tagged with the given tag.      * Returns an empty list if none found.      */
DECL|method|getRangeFacetRequestsForTag
specifier|public
name|List
argument_list|<
name|RangeFacetRequest
argument_list|>
name|getRangeFacetRequestsForTag
parameter_list|(
name|String
name|tag
parameter_list|)
block|{
name|List
argument_list|<
name|RangeFacetRequest
argument_list|>
name|list
init|=
name|taggedRangeFacets
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
return|return
name|list
operator|==
literal|null
condition|?
name|Collections
operator|.
name|emptyList
argument_list|()
else|:
name|list
return|;
block|}
comment|/**      * @param tag a String tag usually specified via local param on a facet.pivot      * @return a list of {@link org.apache.solr.handler.component.FacetComponent.FacetBase} objects which have been      * tagged with the given tag. Returns and empty List if none found.      */
DECL|method|getQueryFacetsForTag
specifier|public
name|List
argument_list|<
name|FacetBase
argument_list|>
name|getQueryFacetsForTag
parameter_list|(
name|String
name|tag
parameter_list|)
block|{
name|List
argument_list|<
name|FacetBase
argument_list|>
name|list
init|=
name|taggedQueryFacets
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
return|return
name|list
operator|==
literal|null
condition|?
name|Collections
operator|.
name|emptyList
argument_list|()
else|:
name|list
return|;
block|}
block|}
comment|/**    * Actually run the query    */
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rb
operator|.
name|doFacets
condition|)
block|{
name|SolrParams
name|params
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|SimpleFacets
name|f
init|=
operator|new
name|SimpleFacets
argument_list|(
name|rb
operator|.
name|req
argument_list|,
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docSet
argument_list|,
name|params
argument_list|,
name|rb
argument_list|)
decl_stmt|;
name|RTimer
name|timer
init|=
literal|null
decl_stmt|;
name|FacetDebugInfo
name|fdebug
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rb
operator|.
name|isDebug
argument_list|()
condition|)
block|{
name|fdebug
operator|=
operator|new
name|FacetDebugInfo
argument_list|()
expr_stmt|;
name|rb
operator|.
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"FacetDebugInfo-nonJson"
argument_list|,
name|fdebug
argument_list|)
expr_stmt|;
name|timer
operator|=
operator|new
name|RTimer
argument_list|()
expr_stmt|;
block|}
name|NamedList
argument_list|<
name|Object
argument_list|>
name|counts
init|=
name|FacetComponent
operator|.
name|getFacetCounts
argument_list|(
name|f
argument_list|,
name|fdebug
argument_list|)
decl_stmt|;
name|String
index|[]
name|pivots
init|=
name|params
operator|.
name|getParams
argument_list|(
name|FacetParams
operator|.
name|FACET_PIVOT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ArrayUtils
operator|.
name|isEmpty
argument_list|(
name|pivots
argument_list|)
condition|)
block|{
name|PivotFacetProcessor
name|pivotProcessor
init|=
operator|new
name|PivotFacetProcessor
argument_list|(
name|rb
operator|.
name|req
argument_list|,
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docSet
argument_list|,
name|params
argument_list|,
name|rb
argument_list|)
decl_stmt|;
name|SimpleOrderedMap
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|v
init|=
name|pivotProcessor
operator|.
name|process
argument_list|(
name|pivots
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
name|counts
operator|.
name|add
argument_list|(
name|PIVOT_KEY
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fdebug
operator|!=
literal|null
condition|)
block|{
name|long
name|timeElapsed
init|=
operator|(
name|long
operator|)
name|timer
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|fdebug
operator|.
name|setElapse
argument_list|(
name|timeElapsed
argument_list|)
expr_stmt|;
block|}
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"facet_counts"
argument_list|,
name|counts
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getFacetCounts
specifier|public
specifier|static
name|NamedList
argument_list|<
name|Object
argument_list|>
name|getFacetCounts
parameter_list|(
name|SimpleFacets
name|simpleFacets
parameter_list|)
block|{
return|return
name|getFacetCounts
argument_list|(
name|simpleFacets
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Looks at various Params to determining if any simple Facet Constraint count    * computations are desired.    *    * @see SimpleFacets#getFacetQueryCounts    * @see SimpleFacets#getFacetFieldCounts    * @see RangeFacetProcessor#getFacetRangeCounts    * @see RangeFacetProcessor#getFacetIntervalCounts    * @see FacetParams#FACET    * @return a NamedList of Facet Count info or null    */
DECL|method|getFacetCounts
specifier|public
specifier|static
name|NamedList
argument_list|<
name|Object
argument_list|>
name|getFacetCounts
parameter_list|(
name|SimpleFacets
name|simpleFacets
parameter_list|,
name|FacetDebugInfo
name|fdebug
parameter_list|)
block|{
comment|// if someone called this method, benefit of the doubt: assume true
if|if
condition|(
operator|!
name|simpleFacets
operator|.
name|getGlobalParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|true
argument_list|)
condition|)
return|return
literal|null
return|;
name|RangeFacetProcessor
name|rangeFacetProcessor
init|=
operator|new
name|RangeFacetProcessor
argument_list|(
name|simpleFacets
operator|.
name|getRequest
argument_list|()
argument_list|,
name|simpleFacets
operator|.
name|getDocsOrig
argument_list|()
argument_list|,
name|simpleFacets
operator|.
name|getGlobalParams
argument_list|()
argument_list|,
name|simpleFacets
operator|.
name|getResponseBuilder
argument_list|()
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|counts
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|counts
operator|.
name|add
argument_list|(
name|FACET_QUERY_KEY
argument_list|,
name|simpleFacets
operator|.
name|getFacetQueryCounts
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fdebug
operator|!=
literal|null
condition|)
block|{
name|FacetDebugInfo
name|fd
init|=
operator|new
name|FacetDebugInfo
argument_list|()
decl_stmt|;
name|fd
operator|.
name|putInfoItem
argument_list|(
literal|"action"
argument_list|,
literal|"field facet"
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setProcessor
argument_list|(
name|simpleFacets
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|fdebug
operator|.
name|addChild
argument_list|(
name|fd
argument_list|)
expr_stmt|;
name|simpleFacets
operator|.
name|setFacetDebugInfo
argument_list|(
name|fd
argument_list|)
expr_stmt|;
specifier|final
name|RTimer
name|timer
init|=
operator|new
name|RTimer
argument_list|()
decl_stmt|;
name|counts
operator|.
name|add
argument_list|(
name|FACET_FIELD_KEY
argument_list|,
name|simpleFacets
operator|.
name|getFacetFieldCounts
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|timeElapsed
init|=
operator|(
name|long
operator|)
name|timer
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|fd
operator|.
name|setElapse
argument_list|(
name|timeElapsed
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|counts
operator|.
name|add
argument_list|(
name|FACET_FIELD_KEY
argument_list|,
name|simpleFacets
operator|.
name|getFacetFieldCounts
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|counts
operator|.
name|add
argument_list|(
name|FACET_RANGES_KEY
argument_list|,
name|rangeFacetProcessor
operator|.
name|getFacetRangeCounts
argument_list|()
argument_list|)
expr_stmt|;
name|counts
operator|.
name|add
argument_list|(
name|FACET_INTERVALS_KEY
argument_list|,
name|simpleFacets
operator|.
name|getFacetIntervalCounts
argument_list|()
argument_list|)
expr_stmt|;
name|counts
operator|.
name|add
argument_list|(
name|SpatialHeatmapFacets
operator|.
name|RESPONSE_KEY
argument_list|,
name|simpleFacets
operator|.
name|getHeatmapCounts
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SyntaxError
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|counts
return|;
block|}
DECL|field|commandPrefix
specifier|private
specifier|static
specifier|final
name|String
name|commandPrefix
init|=
literal|"{!"
operator|+
name|CommonParams
operator|.
name|TERMS
operator|+
literal|"=$"
decl_stmt|;
annotation|@
name|Override
DECL|method|distributedProcess
specifier|public
name|int
name|distributedProcess
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|rb
operator|.
name|doFacets
condition|)
block|{
return|return
name|ResponseBuilder
operator|.
name|STAGE_DONE
return|;
block|}
if|if
condition|(
name|rb
operator|.
name|stage
operator|!=
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
condition|)
block|{
return|return
name|ResponseBuilder
operator|.
name|STAGE_DONE
return|;
block|}
comment|// Overlap facet refinement requests (those shards that we need a count
comment|// for particular facet values from), where possible, with
comment|// the requests to get fields (because we know that is the
comment|// only other required phase).
comment|// We do this in distributedProcess so we can look at all of the
comment|// requests in the outgoing queue at once.
for|for
control|(
name|int
name|shardNum
init|=
literal|0
init|;
name|shardNum
operator|<
name|rb
operator|.
name|shards
operator|.
name|length
condition|;
name|shardNum
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|distribFieldFacetRefinements
init|=
literal|null
decl_stmt|;
comment|// FieldFacetAdditions
for|for
control|(
name|DistribFieldFacet
name|dff
range|:
name|rb
operator|.
name|_facetInfo
operator|.
name|facets
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|dff
operator|.
name|needRefinements
condition|)
continue|continue;
name|List
argument_list|<
name|String
argument_list|>
name|refList
init|=
name|dff
operator|.
name|_toRefine
index|[
name|shardNum
index|]
decl_stmt|;
if|if
condition|(
name|refList
operator|==
literal|null
operator|||
name|refList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|String
name|key
init|=
name|dff
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// reuse the same key that was used for the
comment|// main facet
name|String
name|termsKey
init|=
name|key
operator|+
literal|"__terms"
decl_stmt|;
name|String
name|termsVal
init|=
name|StrUtils
operator|.
name|join
argument_list|(
name|refList
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|String
name|facetCommand
decl_stmt|;
comment|// add terms into the original facet.field command
comment|// do it via parameter reference to avoid another layer of encoding.
name|String
name|termsKeyEncoded
init|=
name|QueryParsing
operator|.
name|encodeLocalParamVal
argument_list|(
name|termsKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|dff
operator|.
name|localParams
operator|!=
literal|null
condition|)
block|{
name|facetCommand
operator|=
name|commandPrefix
operator|+
name|termsKeyEncoded
operator|+
literal|" "
operator|+
name|dff
operator|.
name|facetStr
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|facetCommand
operator|=
name|commandPrefix
operator|+
name|termsKeyEncoded
operator|+
literal|'}'
operator|+
name|dff
operator|.
name|field
expr_stmt|;
block|}
if|if
condition|(
name|distribFieldFacetRefinements
operator|==
literal|null
condition|)
block|{
name|distribFieldFacetRefinements
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|distribFieldFacetRefinements
operator|.
name|add
argument_list|(
name|facetCommand
argument_list|)
expr_stmt|;
name|distribFieldFacetRefinements
operator|.
name|add
argument_list|(
name|termsKey
argument_list|)
expr_stmt|;
name|distribFieldFacetRefinements
operator|.
name|add
argument_list|(
name|termsVal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|distribFieldFacetRefinements
operator|!=
literal|null
condition|)
block|{
name|String
name|shard
init|=
name|rb
operator|.
name|shards
index|[
name|shardNum
index|]
decl_stmt|;
name|ShardRequest
name|shardsRefineRequest
init|=
literal|null
decl_stmt|;
name|boolean
name|newRequest
init|=
literal|false
decl_stmt|;
comment|// try to find a request that is already going out to that shard.
comment|// If nshards becomes too great, we may want to move to hashing for
comment|// better scalability.
for|for
control|(
name|ShardRequest
name|sreq
range|:
name|rb
operator|.
name|outgoing
control|)
block|{
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_GET_FIELDS
operator|)
operator|!=
literal|0
operator|&&
name|sreq
operator|.
name|shards
operator|!=
literal|null
operator|&&
name|sreq
operator|.
name|shards
operator|.
name|length
operator|==
literal|1
operator|&&
name|sreq
operator|.
name|shards
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|shard
argument_list|)
condition|)
block|{
name|shardsRefineRequest
operator|=
name|sreq
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|shardsRefineRequest
operator|==
literal|null
condition|)
block|{
comment|// we didn't find any other suitable requests going out to that shard,
comment|// so create one ourselves.
name|newRequest
operator|=
literal|true
expr_stmt|;
name|shardsRefineRequest
operator|=
operator|new
name|ShardRequest
argument_list|()
expr_stmt|;
name|shardsRefineRequest
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|rb
operator|.
name|shards
index|[
name|shardNum
index|]
block|}
expr_stmt|;
name|shardsRefineRequest
operator|.
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
comment|// don't request any documents
name|shardsRefineRequest
operator|.
name|params
operator|.
name|remove
argument_list|(
name|CommonParams
operator|.
name|START
argument_list|)
expr_stmt|;
name|shardsRefineRequest
operator|.
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|ROWS
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
name|shardsRefineRequest
operator|.
name|purpose
operator||=
name|ShardRequest
operator|.
name|PURPOSE_REFINE_FACETS
expr_stmt|;
name|shardsRefineRequest
operator|.
name|params
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|removeMainFacetTypeParams
argument_list|(
name|shardsRefineRequest
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|distribFieldFacetRefinements
operator|.
name|size
argument_list|()
condition|;
control|)
block|{
name|String
name|facetCommand
init|=
name|distribFieldFacetRefinements
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|String
name|termsKey
init|=
name|distribFieldFacetRefinements
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|String
name|termsVal
init|=
name|distribFieldFacetRefinements
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|shardsRefineRequest
operator|.
name|params
operator|.
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_FIELD
argument_list|,
name|facetCommand
argument_list|)
expr_stmt|;
name|shardsRefineRequest
operator|.
name|params
operator|.
name|set
argument_list|(
name|termsKey
argument_list|,
name|termsVal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newRequest
condition|)
block|{
name|rb
operator|.
name|addRequest
argument_list|(
name|this
argument_list|,
name|shardsRefineRequest
argument_list|)
expr_stmt|;
block|}
block|}
comment|// PivotFacetAdditions
if|if
condition|(
name|doAnyPivotFacetRefinementRequestsExistForShard
argument_list|(
name|rb
operator|.
name|_facetInfo
argument_list|,
name|shardNum
argument_list|)
condition|)
block|{
name|enqueuePivotFacetShardRequests
argument_list|(
name|rb
argument_list|,
name|shardNum
argument_list|)
expr_stmt|;
block|}
block|}
comment|// for shardNum
return|return
name|ResponseBuilder
operator|.
name|STAGE_DONE
return|;
block|}
DECL|field|FACET_TYPE_PARAMS
specifier|public
specifier|static
name|String
index|[]
name|FACET_TYPE_PARAMS
init|=
block|{
name|FacetParams
operator|.
name|FACET_FIELD
block|,
name|FacetParams
operator|.
name|FACET_PIVOT
block|,
name|FacetParams
operator|.
name|FACET_QUERY
block|,
name|FacetParams
operator|.
name|FACET_DATE
block|,
name|FacetParams
operator|.
name|FACET_RANGE
block|,
name|FacetParams
operator|.
name|FACET_INTERVAL
block|,
name|FacetParams
operator|.
name|FACET_HEATMAP
block|}
decl_stmt|;
DECL|method|removeMainFacetTypeParams
specifier|private
name|void
name|removeMainFacetTypeParams
parameter_list|(
name|ShardRequest
name|shardsRefineRequest
parameter_list|)
block|{
for|for
control|(
name|String
name|param
range|:
name|FACET_TYPE_PARAMS
control|)
block|{
name|shardsRefineRequest
operator|.
name|params
operator|.
name|remove
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|enqueuePivotFacetShardRequests
specifier|private
name|void
name|enqueuePivotFacetShardRequests
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|int
name|shardNum
parameter_list|)
block|{
name|FacetInfo
name|fi
init|=
name|rb
operator|.
name|_facetInfo
decl_stmt|;
name|ShardRequest
name|shardsRefineRequestPivot
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|shardsRefineRequestPivot
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|rb
operator|.
name|shards
index|[
name|shardNum
index|]
block|}
expr_stmt|;
name|shardsRefineRequestPivot
operator|.
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
comment|// don't request any documents
name|shardsRefineRequestPivot
operator|.
name|params
operator|.
name|remove
argument_list|(
name|CommonParams
operator|.
name|START
argument_list|)
expr_stmt|;
name|shardsRefineRequestPivot
operator|.
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|ROWS
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|shardsRefineRequestPivot
operator|.
name|purpose
operator||=
name|ShardRequest
operator|.
name|PURPOSE_REFINE_PIVOT_FACETS
expr_stmt|;
name|shardsRefineRequestPivot
operator|.
name|params
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|removeMainFacetTypeParams
argument_list|(
name|shardsRefineRequestPivot
argument_list|)
expr_stmt|;
name|shardsRefineRequestPivot
operator|.
name|params
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET_PIVOT_MINCOUNT
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|shardsRefineRequestPivot
operator|.
name|params
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_OFFSET
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|pivotIndex
init|=
literal|0
init|;
name|pivotIndex
operator|<
name|fi
operator|.
name|pivotFacets
operator|.
name|size
argument_list|()
condition|;
name|pivotIndex
operator|++
control|)
block|{
name|String
name|pivotFacetKey
init|=
name|fi
operator|.
name|pivotFacets
operator|.
name|getName
argument_list|(
name|pivotIndex
argument_list|)
decl_stmt|;
name|PivotFacet
name|pivotFacet
init|=
name|fi
operator|.
name|pivotFacets
operator|.
name|getVal
argument_list|(
name|pivotIndex
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PivotFacetValue
argument_list|>
name|queuedRefinementsForShard
init|=
name|pivotFacet
operator|.
name|getQueuedRefinements
argument_list|(
name|shardNum
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|queuedRefinementsForShard
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|fieldsKey
init|=
name|PivotFacet
operator|.
name|REFINE_PARAM
operator|+
name|fi
operator|.
name|pivotRefinementCounter
decl_stmt|;
name|String
name|command
decl_stmt|;
if|if
condition|(
name|pivotFacet
operator|.
name|localParams
operator|!=
literal|null
condition|)
block|{
name|command
operator|=
name|PIVOT_REFINE_PREFIX
operator|+
name|fi
operator|.
name|pivotRefinementCounter
operator|+
literal|" "
operator|+
name|pivotFacet
operator|.
name|facetStr
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|command
operator|=
name|PIVOT_REFINE_PREFIX
operator|+
name|fi
operator|.
name|pivotRefinementCounter
operator|+
literal|"}"
operator|+
name|pivotFacet
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
name|shardsRefineRequestPivot
operator|.
name|params
operator|.
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_PIVOT
argument_list|,
name|command
argument_list|)
expr_stmt|;
for|for
control|(
name|PivotFacetValue
name|refinementValue
range|:
name|queuedRefinementsForShard
control|)
block|{
name|String
name|refinementStr
init|=
name|PivotFacetHelper
operator|.
name|encodeRefinementValuePath
argument_list|(
name|refinementValue
operator|.
name|getValuePath
argument_list|()
argument_list|)
decl_stmt|;
name|shardsRefineRequestPivot
operator|.
name|params
operator|.
name|add
argument_list|(
name|fieldsKey
argument_list|,
name|refinementStr
argument_list|)
expr_stmt|;
block|}
block|}
name|fi
operator|.
name|pivotRefinementCounter
operator|++
expr_stmt|;
block|}
name|rb
operator|.
name|addRequest
argument_list|(
name|this
argument_list|,
name|shardsRefineRequestPivot
argument_list|)
expr_stmt|;
block|}
DECL|method|modifyRequest
specifier|public
name|void
name|modifyRequest
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|SearchComponent
name|who
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rb
operator|.
name|doFacets
condition|)
return|return;
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_GET_TOP_IDS
operator|)
operator|!=
literal|0
condition|)
block|{
name|sreq
operator|.
name|purpose
operator||=
name|ShardRequest
operator|.
name|PURPOSE_GET_FACETS
expr_stmt|;
name|FacetInfo
name|fi
init|=
name|rb
operator|.
name|_facetInfo
decl_stmt|;
if|if
condition|(
name|fi
operator|==
literal|null
condition|)
block|{
name|rb
operator|.
name|_facetInfo
operator|=
name|fi
operator|=
operator|new
name|FacetInfo
argument_list|()
expr_stmt|;
name|fi
operator|.
name|parse
argument_list|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
name|modifyRequestForFieldFacets
argument_list|(
name|rb
argument_list|,
name|sreq
argument_list|,
name|fi
argument_list|)
expr_stmt|;
name|modifyRequestForRangeFacets
argument_list|(
name|sreq
argument_list|)
expr_stmt|;
name|modifyRequestForPivotFacets
argument_list|(
name|rb
argument_list|,
name|sreq
argument_list|,
name|fi
operator|.
name|pivotFacets
argument_list|)
expr_stmt|;
name|SpatialHeatmapFacets
operator|.
name|distribModifyRequest
argument_list|(
name|sreq
argument_list|,
name|fi
operator|.
name|heatmapFacets
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_MINCOUNT
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_OFFSET
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// turn off faceting on other requests
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
comment|// we could optionally remove faceting params
block|}
block|}
comment|// we must get all the range buckets back in order to have coherent lists at the end, see SOLR-6154
DECL|method|modifyRequestForRangeFacets
specifier|private
name|void
name|modifyRequestForRangeFacets
parameter_list|(
name|ShardRequest
name|sreq
parameter_list|)
block|{
comment|// Collect all the range fields.
specifier|final
name|String
index|[]
name|fields
init|=
name|sreq
operator|.
name|params
operator|.
name|getParams
argument_list|(
name|FacetParams
operator|.
name|FACET_RANGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
literal|"f."
operator|+
name|field
operator|+
literal|".facet.mincount"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|modifyRequestForFieldFacets
specifier|private
name|void
name|modifyRequestForFieldFacets
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|,
name|FacetInfo
name|fi
parameter_list|)
block|{
for|for
control|(
name|DistribFieldFacet
name|dff
range|:
name|fi
operator|.
name|facets
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|paramStart
init|=
literal|"f."
operator|+
name|dff
operator|.
name|field
operator|+
literal|'.'
decl_stmt|;
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|paramStart
operator|+
name|FacetParams
operator|.
name|FACET_MINCOUNT
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|paramStart
operator|+
name|FacetParams
operator|.
name|FACET_OFFSET
argument_list|)
expr_stmt|;
name|dff
operator|.
name|initialLimit
operator|=
name|dff
operator|.
name|limit
operator|<=
literal|0
condition|?
name|dff
operator|.
name|limit
else|:
name|dff
operator|.
name|offset
operator|+
name|dff
operator|.
name|limit
expr_stmt|;
if|if
condition|(
name|dff
operator|.
name|sort
operator|.
name|equals
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT_COUNT
argument_list|)
condition|)
block|{
if|if
condition|(
name|dff
operator|.
name|limit
operator|>
literal|0
condition|)
block|{
comment|// set the initial limit higher to increase accuracy
name|dff
operator|.
name|initialLimit
operator|=
name|doOverRequestMath
argument_list|(
name|dff
operator|.
name|initialLimit
argument_list|,
name|dff
operator|.
name|overrequestRatio
argument_list|,
name|dff
operator|.
name|overrequestCount
argument_list|)
expr_stmt|;
comment|// If option FACET_DISTRIB_MCO is turned on then we will use 1 as the initial
comment|// minCount (unless the user explicitly set it to something less than 1). If
comment|// option FACET_DISTRIB_MCO is turned off then we will use 0 as the initial
comment|// minCount regardless of what the user might have provided (prior to the
comment|// addition of the FACET_DISTRIB_MCO option the default logic was to use 0).
comment|// As described in issues SOLR-8559 and SOLR-8988 the use of 1 provides a
comment|// significant performance boost.
name|dff
operator|.
name|initialMincount
operator|=
name|dff
operator|.
name|mco
condition|?
name|Math
operator|.
name|min
argument_list|(
name|dff
operator|.
name|minCount
argument_list|,
literal|1
argument_list|)
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
comment|// if limit==-1, then no need to artificially lower mincount to 0 if
comment|// it's 1
name|dff
operator|.
name|initialMincount
operator|=
name|Math
operator|.
name|min
argument_list|(
name|dff
operator|.
name|minCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// we're sorting by index order.
comment|// if minCount==0, we should always be able to get accurate results w/o
comment|// over-requesting or refining
comment|// if minCount==1, we should be able to get accurate results w/o
comment|// over-requesting, but we'll need to refine
comment|// if minCount==n (>1), we can set the initialMincount to
comment|// minCount/nShards, rounded up.
comment|// For example, we know that if minCount=10 and we have 3 shards, then
comment|// at least one shard must have a count of 4 for the term
comment|// For the minCount>1 case, we can generate too short of a list (miss
comment|// terms at the end of the list) unless limit==-1
comment|// For example: each shard could produce a list of top 10, but some of
comment|// those could fail to make it into the combined list (i.e.
comment|// we needed to go beyond the top 10 to generate the top 10 combined).
comment|// Overrequesting can help a little here, but not as
comment|// much as when sorting by count.
if|if
condition|(
name|dff
operator|.
name|minCount
operator|<=
literal|1
condition|)
block|{
name|dff
operator|.
name|initialMincount
operator|=
name|dff
operator|.
name|minCount
expr_stmt|;
block|}
else|else
block|{
name|dff
operator|.
name|initialMincount
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|dff
operator|.
name|minCount
operator|/
name|rb
operator|.
name|slices
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Currently this is for testing only and allows overriding of the
comment|// facet.limit set to the shards
name|dff
operator|.
name|initialLimit
operator|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"facet.shard.limit"
argument_list|,
name|dff
operator|.
name|initialLimit
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|paramStart
operator|+
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
name|dff
operator|.
name|initialLimit
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|paramStart
operator|+
name|FacetParams
operator|.
name|FACET_MINCOUNT
argument_list|,
name|dff
operator|.
name|initialMincount
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|modifyRequestForPivotFacets
specifier|private
name|void
name|modifyRequestForPivotFacets
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|,
name|SimpleOrderedMap
argument_list|<
name|PivotFacet
argument_list|>
name|pivotFacets
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|PivotFacet
argument_list|>
name|pfwEntry
range|:
name|pivotFacets
control|)
block|{
name|PivotFacet
name|pivot
init|=
name|pfwEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|pivotField
range|:
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|pivot
operator|.
name|getKey
argument_list|()
argument_list|,
literal|','
argument_list|)
control|)
block|{
name|modifyRequestForIndividualPivotFacets
argument_list|(
name|rb
argument_list|,
name|sreq
argument_list|,
name|pivotField
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|modifyRequestForIndividualPivotFacets
specifier|private
name|void
name|modifyRequestForIndividualPivotFacets
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|,
name|String
name|fieldToOverRequest
parameter_list|)
block|{
specifier|final
name|SolrParams
name|originalParams
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
specifier|final
name|String
name|paramStart
init|=
literal|"f."
operator|+
name|fieldToOverRequest
operator|+
literal|"."
decl_stmt|;
specifier|final
name|int
name|requestedLimit
init|=
name|originalParams
operator|.
name|getFieldInt
argument_list|(
name|fieldToOverRequest
argument_list|,
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|paramStart
operator|+
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|)
expr_stmt|;
specifier|final
name|int
name|offset
init|=
name|originalParams
operator|.
name|getFieldInt
argument_list|(
name|fieldToOverRequest
argument_list|,
name|FacetParams
operator|.
name|FACET_OFFSET
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|paramStart
operator|+
name|FacetParams
operator|.
name|FACET_OFFSET
argument_list|)
expr_stmt|;
specifier|final
name|double
name|overRequestRatio
init|=
name|originalParams
operator|.
name|getFieldDouble
argument_list|(
name|fieldToOverRequest
argument_list|,
name|FacetParams
operator|.
name|FACET_OVERREQUEST_RATIO
argument_list|,
literal|1.5
argument_list|)
decl_stmt|;
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|paramStart
operator|+
name|FacetParams
operator|.
name|FACET_OVERREQUEST_RATIO
argument_list|)
expr_stmt|;
specifier|final
name|int
name|overRequestCount
init|=
name|originalParams
operator|.
name|getFieldInt
argument_list|(
name|fieldToOverRequest
argument_list|,
name|FacetParams
operator|.
name|FACET_OVERREQUEST_COUNT
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|paramStart
operator|+
name|FacetParams
operator|.
name|FACET_OVERREQUEST_COUNT
argument_list|)
expr_stmt|;
specifier|final
name|int
name|requestedMinCount
init|=
name|originalParams
operator|.
name|getFieldInt
argument_list|(
name|fieldToOverRequest
argument_list|,
name|FacetParams
operator|.
name|FACET_PIVOT_MINCOUNT
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|paramStart
operator|+
name|FacetParams
operator|.
name|FACET_PIVOT_MINCOUNT
argument_list|)
expr_stmt|;
specifier|final
name|String
name|defaultSort
init|=
operator|(
name|requestedLimit
operator|>
literal|0
operator|)
condition|?
name|FacetParams
operator|.
name|FACET_SORT_COUNT
else|:
name|FacetParams
operator|.
name|FACET_SORT_INDEX
decl_stmt|;
specifier|final
name|String
name|sort
init|=
name|originalParams
operator|.
name|getFieldParam
argument_list|(
name|fieldToOverRequest
argument_list|,
name|FacetParams
operator|.
name|FACET_SORT
argument_list|,
name|defaultSort
argument_list|)
decl_stmt|;
name|int
name|shardLimit
init|=
name|requestedLimit
operator|+
name|offset
decl_stmt|;
name|int
name|shardMinCount
init|=
name|requestedMinCount
decl_stmt|;
comment|// per-shard mincount& overrequest
if|if
condition|(
name|FacetParams
operator|.
name|FACET_SORT_INDEX
operator|.
name|equals
argument_list|(
name|sort
argument_list|)
operator|&&
literal|1
operator|<
name|requestedMinCount
operator|&&
literal|0
operator|<
name|requestedLimit
condition|)
block|{
comment|// We can divide the mincount by num shards rounded up, because unless
comment|// a single shard has at least that many it can't compete...
name|shardMinCount
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|requestedMinCount
operator|/
name|rb
operator|.
name|slices
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// ...but we still need to overrequest to reduce chances of missing something
name|shardLimit
operator|=
name|doOverRequestMath
argument_list|(
name|shardLimit
argument_list|,
name|overRequestRatio
argument_list|,
name|overRequestCount
argument_list|)
expr_stmt|;
comment|// (for mincount<= 1, no overrequest needed)
block|}
elseif|else
if|if
condition|(
name|FacetParams
operator|.
name|FACET_SORT_COUNT
operator|.
name|equals
argument_list|(
name|sort
argument_list|)
condition|)
block|{
if|if
condition|(
literal|0
operator|<
name|requestedLimit
condition|)
block|{
name|shardLimit
operator|=
name|doOverRequestMath
argument_list|(
name|shardLimit
argument_list|,
name|overRequestRatio
argument_list|,
name|overRequestCount
argument_list|)
expr_stmt|;
name|shardMinCount
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|shardMinCount
operator|=
name|Math
operator|.
name|min
argument_list|(
name|requestedMinCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|paramStart
operator|+
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
name|shardLimit
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|paramStart
operator|+
name|FacetParams
operator|.
name|FACET_PIVOT_MINCOUNT
argument_list|,
name|shardMinCount
argument_list|)
expr_stmt|;
block|}
DECL|method|doOverRequestMath
specifier|private
name|int
name|doOverRequestMath
parameter_list|(
name|int
name|limit
parameter_list|,
name|double
name|ratio
parameter_list|,
name|int
name|count
parameter_list|)
block|{
comment|// NOTE: normally, "1.0F< ratio"
comment|//
comment|// if the user chooses a ratio< 1, we allow it and don't "bottom out" at
comment|// the original limit until *after* we've also added the count.
name|int
name|adjustedLimit
init|=
call|(
name|int
call|)
argument_list|(
name|limit
operator|*
name|ratio
argument_list|)
operator|+
name|count
decl_stmt|;
return|return
name|Math
operator|.
name|max
argument_list|(
name|limit
argument_list|,
name|adjustedLimit
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|handleResponses
specifier|public
name|void
name|handleResponses
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rb
operator|.
name|doFacets
condition|)
return|return;
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_GET_FACETS
operator|)
operator|!=
literal|0
condition|)
block|{
name|countFacets
argument_list|(
name|rb
argument_list|,
name|sreq
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// at present PURPOSE_REFINE_FACETS and PURPOSE_REFINE_PIVOT_FACETS
comment|// don't co-exist in individual requests, but don't assume that
comment|// will always be the case
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_REFINE_FACETS
operator|)
operator|!=
literal|0
condition|)
block|{
name|refineFacets
argument_list|(
name|rb
argument_list|,
name|sreq
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_REFINE_PIVOT_FACETS
operator|)
operator|!=
literal|0
condition|)
block|{
name|refinePivotFacets
argument_list|(
name|rb
argument_list|,
name|sreq
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|countFacets
specifier|private
name|void
name|countFacets
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
name|FacetInfo
name|fi
init|=
name|rb
operator|.
name|_facetInfo
decl_stmt|;
for|for
control|(
name|ShardResponse
name|srsp
range|:
name|sreq
operator|.
name|responses
control|)
block|{
name|int
name|shardNum
init|=
name|rb
operator|.
name|getShardNum
argument_list|(
name|srsp
operator|.
name|getShard
argument_list|()
argument_list|)
decl_stmt|;
name|NamedList
name|facet_counts
init|=
literal|null
decl_stmt|;
try|try
block|{
name|facet_counts
operator|=
operator|(
name|NamedList
operator|)
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"facet_counts"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|ShardParams
operator|.
name|SHARDS_TOLERANT
argument_list|,
literal|false
argument_list|)
condition|)
block|{
continue|continue;
comment|// looks like a shard did not return anything
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unable to read facet info for shard: "
operator|+
name|srsp
operator|.
name|getShard
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
comment|// handle facet queries
name|NamedList
name|facet_queries
init|=
operator|(
name|NamedList
operator|)
name|facet_counts
operator|.
name|get
argument_list|(
literal|"facet_queries"
argument_list|)
decl_stmt|;
if|if
condition|(
name|facet_queries
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|facet_queries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|returnedKey
init|=
name|facet_queries
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|count
init|=
operator|(
operator|(
name|Number
operator|)
name|facet_queries
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|QueryFacet
name|qf
init|=
name|fi
operator|.
name|queryFacets
operator|.
name|get
argument_list|(
name|returnedKey
argument_list|)
decl_stmt|;
name|qf
operator|.
name|count
operator|+=
name|count
expr_stmt|;
block|}
block|}
comment|// step through each facet.field, adding results from this shard
name|NamedList
name|facet_fields
init|=
operator|(
name|NamedList
operator|)
name|facet_counts
operator|.
name|get
argument_list|(
literal|"facet_fields"
argument_list|)
decl_stmt|;
if|if
condition|(
name|facet_fields
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DistribFieldFacet
name|dff
range|:
name|fi
operator|.
name|facets
operator|.
name|values
argument_list|()
control|)
block|{
name|dff
operator|.
name|add
argument_list|(
name|shardNum
argument_list|,
operator|(
name|NamedList
operator|)
name|facet_fields
operator|.
name|get
argument_list|(
name|dff
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|dff
operator|.
name|initialLimit
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Distributed facet_ranges
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|SimpleOrderedMap
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|>
name|rangesFromShard
init|=
operator|(
name|SimpleOrderedMap
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|>
operator|)
name|facet_counts
operator|.
name|get
argument_list|(
literal|"facet_ranges"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rangesFromShard
operator|!=
literal|null
condition|)
block|{
name|RangeFacetRequest
operator|.
name|DistribRangeFacet
operator|.
name|mergeFacetRangesFromShardResponse
argument_list|(
name|fi
operator|.
name|rangeFacets
argument_list|,
name|rangesFromShard
argument_list|)
expr_stmt|;
block|}
comment|// Distributed facet_intervals
name|doDistribIntervals
argument_list|(
name|fi
argument_list|,
name|facet_counts
argument_list|)
expr_stmt|;
comment|// Distributed facet_pivots - this is just the per shard collection,
comment|// refinement reqs still needed (below) once we've considered every shard
name|doDistribPivots
argument_list|(
name|rb
argument_list|,
name|shardNum
argument_list|,
name|facet_counts
argument_list|)
expr_stmt|;
comment|// Distributed facet_heatmaps
name|SpatialHeatmapFacets
operator|.
name|distribHandleResponse
argument_list|(
name|fi
operator|.
name|heatmapFacets
argument_list|,
name|facet_counts
argument_list|)
expr_stmt|;
block|}
comment|// end for-each-response-in-shard-request...
comment|// refine each pivot based on the new shard data
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|PivotFacet
argument_list|>
name|pivotFacet
range|:
name|fi
operator|.
name|pivotFacets
control|)
block|{
name|pivotFacet
operator|.
name|getValue
argument_list|()
operator|.
name|queuePivotRefinementRequests
argument_list|()
expr_stmt|;
block|}
comment|//
comment|// This code currently assumes that there will be only a single
comment|// request ((with responses from all shards) sent out to get facets...
comment|// otherwise we would need to wait until all facet responses were received.
comment|//
for|for
control|(
name|DistribFieldFacet
name|dff
range|:
name|fi
operator|.
name|facets
operator|.
name|values
argument_list|()
control|)
block|{
comment|// no need to check these facets for refinement
if|if
condition|(
name|dff
operator|.
name|initialLimit
operator|<=
literal|0
operator|&&
name|dff
operator|.
name|initialMincount
operator|<=
literal|1
condition|)
continue|continue;
comment|// only other case where index-sort doesn't need refinement is if minCount==0
if|if
condition|(
name|dff
operator|.
name|minCount
operator|<=
literal|1
operator|&&
name|dff
operator|.
name|sort
operator|.
name|equals
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT_INDEX
argument_list|)
condition|)
continue|continue;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// generic array's are annoying
name|List
argument_list|<
name|String
argument_list|>
index|[]
name|tmp
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
index|[]
operator|)
operator|new
name|List
index|[
name|rb
operator|.
name|shards
operator|.
name|length
index|]
decl_stmt|;
name|dff
operator|.
name|_toRefine
operator|=
name|tmp
expr_stmt|;
name|ShardFacetCount
index|[]
name|counts
init|=
name|dff
operator|.
name|getCountSorted
argument_list|()
decl_stmt|;
name|int
name|ntop
init|=
name|Math
operator|.
name|min
argument_list|(
name|counts
operator|.
name|length
argument_list|,
name|dff
operator|.
name|limit
operator|>=
literal|0
condition|?
name|dff
operator|.
name|offset
operator|+
name|dff
operator|.
name|limit
else|:
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|long
name|smallestCount
init|=
name|counts
operator|.
name|length
operator|==
literal|0
condition|?
literal|0
else|:
name|counts
index|[
name|ntop
operator|-
literal|1
index|]
operator|.
name|count
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|counts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ShardFacetCount
name|sfc
init|=
name|counts
index|[
name|i
index|]
decl_stmt|;
name|boolean
name|needRefinement
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|ntop
condition|)
block|{
comment|// automatically flag the top values for refinement
comment|// this should always be true for facet.sort=index
name|needRefinement
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// this logic should only be invoked for facet.sort=index (for now)
comment|// calculate the maximum value that this term may have
comment|// and if it is>= smallestCount, then flag for refinement
name|long
name|maxCount
init|=
name|sfc
operator|.
name|count
decl_stmt|;
for|for
control|(
name|int
name|shardNum
init|=
literal|0
init|;
name|shardNum
operator|<
name|rb
operator|.
name|shards
operator|.
name|length
condition|;
name|shardNum
operator|++
control|)
block|{
name|FixedBitSet
name|fbs
init|=
name|dff
operator|.
name|counted
index|[
name|shardNum
index|]
decl_stmt|;
comment|// fbs can be null if a shard request failed
if|if
condition|(
name|fbs
operator|!=
literal|null
operator|&&
operator|(
name|sfc
operator|.
name|termNum
operator|>=
name|fbs
operator|.
name|length
argument_list|()
operator|||
operator|!
name|fbs
operator|.
name|get
argument_list|(
name|sfc
operator|.
name|termNum
argument_list|)
operator|)
condition|)
block|{
comment|// if missing from this shard, add the max it could be
name|maxCount
operator|+=
name|dff
operator|.
name|maxPossible
argument_list|(
name|shardNum
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|maxCount
operator|>=
name|smallestCount
condition|)
block|{
comment|// TODO: on a tie, we could check the term values
name|needRefinement
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|needRefinement
condition|)
block|{
comment|// add a query for each shard missing the term that needs refinement
for|for
control|(
name|int
name|shardNum
init|=
literal|0
init|;
name|shardNum
operator|<
name|rb
operator|.
name|shards
operator|.
name|length
condition|;
name|shardNum
operator|++
control|)
block|{
name|FixedBitSet
name|fbs
init|=
name|dff
operator|.
name|counted
index|[
name|shardNum
index|]
decl_stmt|;
comment|// fbs can be null if a shard request failed
if|if
condition|(
name|fbs
operator|!=
literal|null
operator|&&
operator|(
name|sfc
operator|.
name|termNum
operator|>=
name|fbs
operator|.
name|length
argument_list|()
operator|||
operator|!
name|fbs
operator|.
name|get
argument_list|(
name|sfc
operator|.
name|termNum
argument_list|)
operator|)
operator|&&
name|dff
operator|.
name|maxPossible
argument_list|(
name|shardNum
argument_list|)
operator|>
literal|0
condition|)
block|{
name|dff
operator|.
name|needRefinements
operator|=
literal|true
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lst
init|=
name|dff
operator|.
name|_toRefine
index|[
name|shardNum
index|]
decl_stmt|;
if|if
condition|(
name|lst
operator|==
literal|null
condition|)
block|{
name|lst
operator|=
name|dff
operator|.
name|_toRefine
index|[
name|shardNum
index|]
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|lst
operator|.
name|add
argument_list|(
name|sfc
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|removeFieldFacetsUnderLimits
argument_list|(
name|rb
argument_list|)
expr_stmt|;
name|removeRangeFacetsUnderLimits
argument_list|(
name|rb
argument_list|)
expr_stmt|;
name|removeQueryFacetsUnderLimits
argument_list|(
name|rb
argument_list|)
expr_stmt|;
block|}
DECL|method|removeQueryFacetsUnderLimits
specifier|private
name|void
name|removeQueryFacetsUnderLimits
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
if|if
condition|(
name|rb
operator|.
name|stage
operator|!=
name|ResponseBuilder
operator|.
name|STAGE_EXECUTE_QUERY
condition|)
block|{
return|return;
block|}
name|FacetInfo
name|fi
init|=
name|rb
operator|.
name|_facetInfo
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|QueryFacet
argument_list|>
name|query_facets
init|=
name|fi
operator|.
name|queryFacets
decl_stmt|;
if|if
condition|(
name|query_facets
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|QueryFacet
argument_list|>
name|newQueryFacets
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// The
name|int
name|minCount
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getInt
argument_list|(
name|FacetParams
operator|.
name|FACET_MINCOUNT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|boolean
name|replace
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|QueryFacet
argument_list|>
name|ent
range|:
name|query_facets
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|ent
operator|.
name|getValue
argument_list|()
operator|.
name|count
operator|>=
name|minCount
condition|)
block|{
name|newQueryFacets
operator|.
name|put
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Removing facetQuery/key: "
operator|+
name|ent
operator|.
name|getKey
argument_list|()
operator|+
literal|"/"
operator|+
name|ent
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" mincount="
operator|+
name|minCount
argument_list|)
expr_stmt|;
name|replace
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|replace
condition|)
block|{
name|fi
operator|.
name|queryFacets
operator|=
name|newQueryFacets
expr_stmt|;
block|}
block|}
DECL|method|removeRangeFacetsUnderLimits
specifier|private
name|void
name|removeRangeFacetsUnderLimits
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
if|if
condition|(
name|rb
operator|.
name|stage
operator|!=
name|ResponseBuilder
operator|.
name|STAGE_EXECUTE_QUERY
condition|)
block|{
return|return;
block|}
name|FacetInfo
name|fi
init|=
name|rb
operator|.
name|_facetInfo
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RangeFacetRequest
operator|.
name|DistribRangeFacet
argument_list|>
name|entry
range|:
name|fi
operator|.
name|rangeFacets
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|field
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|RangeFacetRequest
operator|.
name|DistribRangeFacet
name|rangeFacet
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|minCount
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getFieldInt
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_MINCOUNT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|minCount
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|rangeFacet
operator|.
name|removeRangeFacetsUnderLimits
argument_list|(
name|minCount
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeFieldFacetsUnderLimits
specifier|private
name|void
name|removeFieldFacetsUnderLimits
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
if|if
condition|(
name|rb
operator|.
name|stage
operator|!=
name|ResponseBuilder
operator|.
name|STAGE_DONE
condition|)
block|{
return|return;
block|}
name|FacetInfo
name|fi
init|=
name|rb
operator|.
name|_facetInfo
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|facets
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Do field facets
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|DistribFieldFacet
argument_list|>
name|ent
range|:
name|fi
operator|.
name|facets
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|field
init|=
name|ent
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|minCount
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getFieldInt
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_MINCOUNT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|minCount
operator|==
literal|0
condition|)
block|{
comment|// return them all
continue|continue;
block|}
name|ent
operator|.
name|getValue
argument_list|()
operator|.
name|respectMinCount
argument_list|(
name|minCount
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The implementation below uses the first encountered shard's
comment|// facet_intervals as the basis for subsequent shards' data to be merged.
DECL|method|doDistribIntervals
specifier|private
name|void
name|doDistribIntervals
parameter_list|(
name|FacetInfo
name|fi
parameter_list|,
name|NamedList
name|facet_counts
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|SimpleOrderedMap
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|facet_intervals
init|=
operator|(
name|SimpleOrderedMap
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Integer
argument_list|>
argument_list|>
operator|)
name|facet_counts
operator|.
name|get
argument_list|(
literal|"facet_intervals"
argument_list|)
decl_stmt|;
if|if
condition|(
name|facet_intervals
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SimpleOrderedMap
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|entry
range|:
name|facet_intervals
control|)
block|{
specifier|final
name|String
name|field
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|SimpleOrderedMap
argument_list|<
name|Integer
argument_list|>
name|existingCounts
init|=
name|fi
operator|.
name|intervalFacets
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingCounts
operator|==
literal|null
condition|)
block|{
comment|// first time we've seen this field, no merging
name|fi
operator|.
name|intervalFacets
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// not the first time, merge current field counts
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|newItr
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|exItr
init|=
name|existingCounts
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// all intervals should be returned by each shard, even if they have zero count,
comment|// and in the same order
while|while
condition|(
name|exItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|exItem
init|=
name|exItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|newItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Interval facet shard response missing key: "
operator|+
name|exItem
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|newItem
init|=
name|newItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|newItem
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|exItem
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Interval facet shard response has extra key: "
operator|+
name|newItem
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
name|exItem
operator|.
name|setValue
argument_list|(
name|exItem
operator|.
name|getValue
argument_list|()
operator|+
name|newItem
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Interval facet shard response has at least one extra key: "
operator|+
name|newItr
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
DECL|method|doDistribPivots
specifier|private
name|void
name|doDistribPivots
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|int
name|shardNum
parameter_list|,
name|NamedList
name|facet_counts
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|SimpleOrderedMap
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|facet_pivot
init|=
operator|(
name|SimpleOrderedMap
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
operator|)
name|facet_counts
operator|.
name|get
argument_list|(
name|PIVOT_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|facet_pivot
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|pivot
range|:
name|facet_pivot
control|)
block|{
specifier|final
name|String
name|pivotName
init|=
name|pivot
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|PivotFacet
name|facet
init|=
name|rb
operator|.
name|_facetInfo
operator|.
name|pivotFacets
operator|.
name|get
argument_list|(
name|pivotName
argument_list|)
decl_stmt|;
name|facet
operator|.
name|mergeResponseFromShard
argument_list|(
name|shardNum
argument_list|,
name|rb
argument_list|,
name|pivot
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|refineFacets
specifier|private
name|void
name|refineFacets
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
name|FacetInfo
name|fi
init|=
name|rb
operator|.
name|_facetInfo
decl_stmt|;
for|for
control|(
name|ShardResponse
name|srsp
range|:
name|sreq
operator|.
name|responses
control|)
block|{
comment|// int shardNum = rb.getShardNum(srsp.shard);
name|NamedList
name|facet_counts
init|=
operator|(
name|NamedList
operator|)
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"facet_counts"
argument_list|)
decl_stmt|;
name|NamedList
name|facet_fields
init|=
operator|(
name|NamedList
operator|)
name|facet_counts
operator|.
name|get
argument_list|(
literal|"facet_fields"
argument_list|)
decl_stmt|;
if|if
condition|(
name|facet_fields
operator|==
literal|null
condition|)
continue|continue;
comment|// this can happen when there's an exception
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|facet_fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|facet_fields
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DistribFieldFacet
name|dff
init|=
name|fi
operator|.
name|facets
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|dff
operator|==
literal|null
condition|)
continue|continue;
name|NamedList
name|shardCounts
init|=
operator|(
name|NamedList
operator|)
name|facet_fields
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|shardCounts
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|String
name|name
init|=
name|shardCounts
operator|.
name|getName
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|long
name|count
init|=
operator|(
operator|(
name|Number
operator|)
name|shardCounts
operator|.
name|getVal
argument_list|(
name|j
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|ShardFacetCount
name|sfc
init|=
name|dff
operator|.
name|counts
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|sfc
operator|==
literal|null
condition|)
block|{
comment|// we got back a term we didn't ask for?
name|log
operator|.
name|error
argument_list|(
literal|"Unexpected term returned for facet refining. key="
operator|+
name|key
operator|+
literal|" term='"
operator|+
name|name
operator|+
literal|"'"
operator|+
literal|"\n\trequest params="
operator|+
name|sreq
operator|.
name|params
operator|+
literal|"\n\ttoRefine="
operator|+
name|dff
operator|.
name|_toRefine
operator|+
literal|"\n\tresponse="
operator|+
name|shardCounts
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|sfc
operator|.
name|count
operator|+=
name|count
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|refinePivotFacets
specifier|private
name|void
name|refinePivotFacets
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
comment|// This is after the shard has returned the refinement request
name|FacetInfo
name|fi
init|=
name|rb
operator|.
name|_facetInfo
decl_stmt|;
for|for
control|(
name|ShardResponse
name|srsp
range|:
name|sreq
operator|.
name|responses
control|)
block|{
name|int
name|shardNumber
init|=
name|rb
operator|.
name|getShardNum
argument_list|(
name|srsp
operator|.
name|getShard
argument_list|()
argument_list|)
decl_stmt|;
name|NamedList
name|facetCounts
init|=
operator|(
name|NamedList
operator|)
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"facet_counts"
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|NamedList
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|pivotFacetResponsesFromShard
init|=
operator|(
name|NamedList
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
operator|)
name|facetCounts
operator|.
name|get
argument_list|(
name|PIVOT_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|pivotFacetResponsesFromShard
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"No pivot refinement response from shard: "
operator|+
name|srsp
operator|.
name|getShard
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|pivotFacetResponseFromShard
range|:
name|pivotFacetResponsesFromShard
control|)
block|{
name|PivotFacet
name|masterPivotFacet
init|=
name|fi
operator|.
name|pivotFacets
operator|.
name|get
argument_list|(
name|pivotFacetResponseFromShard
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|masterPivotFacet
operator|.
name|mergeResponseFromShard
argument_list|(
name|shardNumber
argument_list|,
name|rb
argument_list|,
name|pivotFacetResponseFromShard
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|masterPivotFacet
operator|.
name|removeAllRefinementsForShard
argument_list|(
name|shardNumber
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|allPivotFacetsAreFullyRefined
argument_list|(
name|fi
argument_list|)
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|PivotFacet
argument_list|>
name|pf
range|:
name|fi
operator|.
name|pivotFacets
control|)
block|{
name|pf
operator|.
name|getValue
argument_list|()
operator|.
name|queuePivotRefinementRequests
argument_list|()
expr_stmt|;
block|}
name|reQueuePivotFacetShardRequests
argument_list|(
name|rb
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|allPivotFacetsAreFullyRefined
specifier|private
name|boolean
name|allPivotFacetsAreFullyRefined
parameter_list|(
name|FacetInfo
name|fi
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|PivotFacet
argument_list|>
name|pf
range|:
name|fi
operator|.
name|pivotFacets
control|)
block|{
if|if
condition|(
name|pf
operator|.
name|getValue
argument_list|()
operator|.
name|isRefinementsRequired
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|doAnyPivotFacetRefinementRequestsExistForShard
specifier|private
name|boolean
name|doAnyPivotFacetRefinementRequestsExistForShard
parameter_list|(
name|FacetInfo
name|fi
parameter_list|,
name|int
name|shardNum
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fi
operator|.
name|pivotFacets
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PivotFacet
name|pf
init|=
name|fi
operator|.
name|pivotFacets
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pf
operator|.
name|getQueuedRefinements
argument_list|(
name|shardNum
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|reQueuePivotFacetShardRequests
specifier|private
name|void
name|reQueuePivotFacetShardRequests
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
for|for
control|(
name|int
name|shardNum
init|=
literal|0
init|;
name|shardNum
operator|<
name|rb
operator|.
name|shards
operator|.
name|length
condition|;
name|shardNum
operator|++
control|)
block|{
if|if
condition|(
name|doAnyPivotFacetRefinementRequestsExistForShard
argument_list|(
name|rb
operator|.
name|_facetInfo
argument_list|,
name|shardNum
argument_list|)
condition|)
block|{
name|enqueuePivotFacetShardRequests
argument_list|(
name|rb
argument_list|,
name|shardNum
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|finishStage
specifier|public
name|void
name|finishStage
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rb
operator|.
name|doFacets
operator|||
name|rb
operator|.
name|stage
operator|!=
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
condition|)
return|return;
comment|// wait until STAGE_GET_FIELDS
comment|// so that "result" is already stored in the response (for aesthetics)
name|FacetInfo
name|fi
init|=
name|rb
operator|.
name|_facetInfo
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|facet_counts
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
name|NamedList
argument_list|<
name|Number
argument_list|>
name|facet_queries
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
name|facet_counts
operator|.
name|add
argument_list|(
literal|"facet_queries"
argument_list|,
name|facet_queries
argument_list|)
expr_stmt|;
for|for
control|(
name|QueryFacet
name|qf
range|:
name|fi
operator|.
name|queryFacets
operator|.
name|values
argument_list|()
control|)
block|{
name|facet_queries
operator|.
name|add
argument_list|(
name|qf
operator|.
name|getKey
argument_list|()
argument_list|,
name|num
argument_list|(
name|qf
operator|.
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|NamedList
argument_list|<
name|Object
argument_list|>
name|facet_fields
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
name|facet_counts
operator|.
name|add
argument_list|(
literal|"facet_fields"
argument_list|,
name|facet_fields
argument_list|)
expr_stmt|;
for|for
control|(
name|DistribFieldFacet
name|dff
range|:
name|fi
operator|.
name|facets
operator|.
name|values
argument_list|()
control|)
block|{
comment|// order is important for facet values, so use NamedList
name|NamedList
argument_list|<
name|Object
argument_list|>
name|fieldCounts
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|facet_fields
operator|.
name|add
argument_list|(
name|dff
operator|.
name|getKey
argument_list|()
argument_list|,
name|fieldCounts
argument_list|)
expr_stmt|;
name|ShardFacetCount
index|[]
name|counts
decl_stmt|;
name|boolean
name|countSorted
init|=
name|dff
operator|.
name|sort
operator|.
name|equals
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT_COUNT
argument_list|)
decl_stmt|;
if|if
condition|(
name|countSorted
condition|)
block|{
name|counts
operator|=
name|dff
operator|.
name|countSorted
expr_stmt|;
if|if
condition|(
name|counts
operator|==
literal|null
operator|||
name|dff
operator|.
name|needRefinements
condition|)
block|{
name|counts
operator|=
name|dff
operator|.
name|getCountSorted
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|dff
operator|.
name|sort
operator|.
name|equals
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT_INDEX
argument_list|)
condition|)
block|{
name|counts
operator|=
name|dff
operator|.
name|getLexSorted
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: log error or throw exception?
name|counts
operator|=
name|dff
operator|.
name|getLexSorted
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|countSorted
condition|)
block|{
name|int
name|end
init|=
name|dff
operator|.
name|limit
operator|<
literal|0
condition|?
name|counts
operator|.
name|length
else|:
name|Math
operator|.
name|min
argument_list|(
name|dff
operator|.
name|offset
operator|+
name|dff
operator|.
name|limit
argument_list|,
name|counts
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|dff
operator|.
name|offset
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|counts
index|[
name|i
index|]
operator|.
name|count
operator|<
name|dff
operator|.
name|minCount
condition|)
block|{
break|break;
block|}
name|fieldCounts
operator|.
name|add
argument_list|(
name|counts
index|[
name|i
index|]
operator|.
name|name
argument_list|,
name|num
argument_list|(
name|counts
index|[
name|i
index|]
operator|.
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|off
init|=
name|dff
operator|.
name|offset
decl_stmt|;
name|int
name|lim
init|=
name|dff
operator|.
name|limit
operator|>=
literal|0
condition|?
name|dff
operator|.
name|limit
else|:
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
comment|// index order...
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|counts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|long
name|count
init|=
name|counts
index|[
name|i
index|]
operator|.
name|count
decl_stmt|;
if|if
condition|(
name|count
operator|<
name|dff
operator|.
name|minCount
condition|)
continue|continue;
if|if
condition|(
name|off
operator|>
literal|0
condition|)
block|{
name|off
operator|--
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|lim
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
name|lim
operator|--
expr_stmt|;
name|fieldCounts
operator|.
name|add
argument_list|(
name|counts
index|[
name|i
index|]
operator|.
name|name
argument_list|,
name|num
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dff
operator|.
name|missing
condition|)
block|{
name|fieldCounts
operator|.
name|add
argument_list|(
literal|null
argument_list|,
name|num
argument_list|(
name|dff
operator|.
name|missingCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|SimpleOrderedMap
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|>
name|rangeFacetOutput
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RangeFacetRequest
operator|.
name|DistribRangeFacet
argument_list|>
name|entry
range|:
name|fi
operator|.
name|rangeFacets
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RangeFacetRequest
operator|.
name|DistribRangeFacet
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|rangeFacetOutput
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|value
operator|.
name|rangeFacet
argument_list|)
expr_stmt|;
block|}
name|facet_counts
operator|.
name|add
argument_list|(
literal|"facet_ranges"
argument_list|,
name|rangeFacetOutput
argument_list|)
expr_stmt|;
name|facet_counts
operator|.
name|add
argument_list|(
literal|"facet_intervals"
argument_list|,
name|fi
operator|.
name|intervalFacets
argument_list|)
expr_stmt|;
name|facet_counts
operator|.
name|add
argument_list|(
name|SpatialHeatmapFacets
operator|.
name|RESPONSE_KEY
argument_list|,
name|SpatialHeatmapFacets
operator|.
name|distribFinish
argument_list|(
name|fi
operator|.
name|heatmapFacets
argument_list|,
name|rb
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fi
operator|.
name|pivotFacets
operator|!=
literal|null
operator|&&
name|fi
operator|.
name|pivotFacets
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|facet_counts
operator|.
name|add
argument_list|(
name|PIVOT_KEY
argument_list|,
name|createPivotFacetOutput
argument_list|(
name|rb
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"facet_counts"
argument_list|,
name|facet_counts
argument_list|)
expr_stmt|;
name|rb
operator|.
name|_facetInfo
operator|=
literal|null
expr_stmt|;
comment|// could be big, so release asap
block|}
DECL|method|createPivotFacetOutput
specifier|private
name|SimpleOrderedMap
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|createPivotFacetOutput
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
name|SimpleOrderedMap
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|combinedPivotFacets
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|PivotFacet
argument_list|>
name|entry
range|:
name|rb
operator|.
name|_facetInfo
operator|.
name|pivotFacets
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|PivotFacet
name|pivot
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|trimmedPivots
init|=
name|pivot
operator|.
name|getTrimmedPivotsAsListOfNamedLists
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|trimmedPivots
condition|)
block|{
name|trimmedPivots
operator|=
name|Collections
operator|.
expr|<
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|>
name|emptyList
argument_list|()
expr_stmt|;
block|}
name|combinedPivotFacets
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|trimmedPivots
argument_list|)
expr_stmt|;
block|}
return|return
name|combinedPivotFacets
return|;
block|}
comment|// use<int> tags for smaller facet counts (better back compatibility)
comment|/**    * @param val a primitive long value    * @return an {@link Integer} if the value of the argument is less than {@link Integer#MAX_VALUE}    * else a @{link java.lang.Long}    */
DECL|method|num
specifier|static
name|Number
name|num
parameter_list|(
name|long
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|<
name|Integer
operator|.
name|MAX_VALUE
condition|)
return|return
operator|(
name|int
operator|)
name|val
return|;
else|else
return|return
name|val
return|;
block|}
comment|/**    * @param val a {@link java.lang.Long} value    * @return an {@link Integer} if the value of the argument is less than {@link Integer#MAX_VALUE}    * else a @{link java.lang.Long}    */
DECL|method|num
specifier|static
name|Number
name|num
parameter_list|(
name|Long
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|.
name|longValue
argument_list|()
operator|<
name|Integer
operator|.
name|MAX_VALUE
condition|)
return|return
name|val
operator|.
name|intValue
argument_list|()
return|;
else|else
return|return
name|val
return|;
block|}
comment|/////////////////////////////////////////////
comment|///  SolrInfoMBean
comment|////////////////////////////////////////////
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Handle Faceting"
return|;
block|}
annotation|@
name|Override
DECL|method|getDocs
specifier|public
name|URL
index|[]
name|getDocs
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**    * This class is used exclusively for merging results from each shard    * in a distributed facet request. It plays no role in the computation    * of facet counts inside a single node.    *    * A related class {@link org.apache.solr.handler.component.FacetComponent.FacetContext}    * exists for assisting computation inside a single node.    *    *<b>This API is experimental and subject to change</b>    *    * @see org.apache.solr.handler.component.FacetComponent.FacetContext    */
DECL|class|FacetInfo
specifier|public
specifier|static
class|class
name|FacetInfo
block|{
comment|/**      * Incremented counter used to track the values being refined in a given request.      * This counter is used in conjunction with {@link PivotFacet#REFINE_PARAM} to identify      * which refinement values are associated with which pivots.      */
DECL|field|pivotRefinementCounter
name|int
name|pivotRefinementCounter
init|=
literal|0
decl_stmt|;
DECL|field|queryFacets
specifier|public
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|QueryFacet
argument_list|>
name|queryFacets
decl_stmt|;
DECL|field|facets
specifier|public
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|DistribFieldFacet
argument_list|>
name|facets
decl_stmt|;
DECL|field|dateFacets
specifier|public
name|SimpleOrderedMap
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|>
name|dateFacets
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|rangeFacets
specifier|public
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|RangeFacetRequest
operator|.
name|DistribRangeFacet
argument_list|>
name|rangeFacets
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|intervalFacets
specifier|public
name|SimpleOrderedMap
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|intervalFacets
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|pivotFacets
specifier|public
name|SimpleOrderedMap
argument_list|<
name|PivotFacet
argument_list|>
name|pivotFacets
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|heatmapFacets
specifier|public
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|SpatialHeatmapFacets
operator|.
name|HeatmapFacet
argument_list|>
name|heatmapFacets
decl_stmt|;
DECL|method|parse
name|void
name|parse
parameter_list|(
name|SolrParams
name|params
parameter_list|,
name|ResponseBuilder
name|rb
parameter_list|)
block|{
name|queryFacets
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|facets
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|String
index|[]
name|facetQs
init|=
name|params
operator|.
name|getParams
argument_list|(
name|FacetParams
operator|.
name|FACET_QUERY
argument_list|)
decl_stmt|;
if|if
condition|(
name|facetQs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|query
range|:
name|facetQs
control|)
block|{
name|QueryFacet
name|queryFacet
init|=
operator|new
name|QueryFacet
argument_list|(
name|rb
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|queryFacets
operator|.
name|put
argument_list|(
name|queryFacet
operator|.
name|getKey
argument_list|()
argument_list|,
name|queryFacet
argument_list|)
expr_stmt|;
block|}
block|}
name|String
index|[]
name|facetFs
init|=
name|params
operator|.
name|getParams
argument_list|(
name|FacetParams
operator|.
name|FACET_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
name|facetFs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|field
range|:
name|facetFs
control|)
block|{
name|DistribFieldFacet
name|ff
init|=
operator|new
name|DistribFieldFacet
argument_list|(
name|rb
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|facets
operator|.
name|put
argument_list|(
name|ff
operator|.
name|getKey
argument_list|()
argument_list|,
name|ff
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Develop Pivot Facet Information
name|String
index|[]
name|facetPFs
init|=
name|params
operator|.
name|getParams
argument_list|(
name|FacetParams
operator|.
name|FACET_PIVOT
argument_list|)
decl_stmt|;
if|if
condition|(
name|facetPFs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|fieldGroup
range|:
name|facetPFs
control|)
block|{
name|PivotFacet
name|pf
init|=
operator|new
name|PivotFacet
argument_list|(
name|rb
argument_list|,
name|fieldGroup
argument_list|)
decl_stmt|;
name|pivotFacets
operator|.
name|add
argument_list|(
name|pf
operator|.
name|getKey
argument_list|()
argument_list|,
name|pf
argument_list|)
expr_stmt|;
block|}
block|}
name|heatmapFacets
operator|=
name|SpatialHeatmapFacets
operator|.
name|distribParse
argument_list|(
name|params
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *<b>This API is experimental and subject to change</b>    */
DECL|class|FacetBase
specifier|public
specifier|static
class|class
name|FacetBase
block|{
DECL|field|facetType
name|String
name|facetType
decl_stmt|;
comment|// facet.field, facet.query, etc (make enum?)
DECL|field|facetStr
name|String
name|facetStr
decl_stmt|;
comment|// original parameter value of facetStr
DECL|field|facetOn
name|String
name|facetOn
decl_stmt|;
comment|// the field or query, absent localParams if appropriate
DECL|field|key
specifier|private
name|String
name|key
decl_stmt|;
comment|// label in the response for the result...
comment|// "foo" for {!key=foo}myfield
DECL|field|localParams
name|SolrParams
name|localParams
decl_stmt|;
comment|// any local params for the facet
DECL|field|tags
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|tags
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|excludeTags
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|excludeTags
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|threadCount
specifier|private
name|int
name|threadCount
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|FacetBase
specifier|public
name|FacetBase
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|String
name|facetType
parameter_list|,
name|String
name|facetStr
parameter_list|)
block|{
name|this
operator|.
name|facetType
operator|=
name|facetType
expr_stmt|;
name|this
operator|.
name|facetStr
operator|=
name|facetStr
expr_stmt|;
try|try
block|{
name|this
operator|.
name|localParams
operator|=
name|QueryParsing
operator|.
name|getLocalParams
argument_list|(
name|facetStr
argument_list|,
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SyntaxError
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|facetOn
operator|=
name|facetStr
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|facetStr
expr_stmt|;
if|if
condition|(
name|localParams
operator|!=
literal|null
condition|)
block|{
comment|// remove local params unless it's a query
if|if
condition|(
operator|!
name|facetType
operator|.
name|equals
argument_list|(
name|FacetParams
operator|.
name|FACET_QUERY
argument_list|)
condition|)
block|{
name|facetOn
operator|=
name|localParams
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|VALUE
argument_list|)
expr_stmt|;
name|key
operator|=
name|facetOn
expr_stmt|;
block|}
name|key
operator|=
name|localParams
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|OUTPUT_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|String
name|tagStr
init|=
name|localParams
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|TAG
argument_list|)
decl_stmt|;
name|this
operator|.
name|tags
operator|=
name|tagStr
operator|==
literal|null
condition|?
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
else|:
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|tagStr
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|String
name|threadStr
init|=
name|localParams
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|THREADS
argument_list|)
decl_stmt|;
name|this
operator|.
name|threadCount
operator|=
name|threadStr
operator|!=
literal|null
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|threadStr
argument_list|)
else|:
operator|-
literal|1
expr_stmt|;
name|String
name|excludeStr
init|=
name|localParams
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|EXCLUDE
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|excludeStr
argument_list|)
condition|)
block|{
name|this
operator|.
name|excludeTags
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|excludeTags
operator|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|excludeStr
argument_list|,
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** returns the key in the response that this facet will be under */
DECL|method|getKey
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|facetType
return|;
block|}
DECL|method|getTags
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTags
parameter_list|()
block|{
return|return
name|tags
return|;
block|}
DECL|method|getExcludeTags
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getExcludeTags
parameter_list|()
block|{
return|return
name|excludeTags
return|;
block|}
DECL|method|getThreadCount
specifier|public
name|int
name|getThreadCount
parameter_list|()
block|{
return|return
name|threadCount
return|;
block|}
block|}
comment|/**    *<b>This API is experimental and subject to change</b>    */
DECL|class|QueryFacet
specifier|public
specifier|static
class|class
name|QueryFacet
extends|extends
name|FacetBase
block|{
DECL|field|count
specifier|public
name|long
name|count
decl_stmt|;
DECL|method|QueryFacet
specifier|public
name|QueryFacet
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|String
name|facetStr
parameter_list|)
block|{
name|super
argument_list|(
name|rb
argument_list|,
name|FacetParams
operator|.
name|FACET_QUERY
argument_list|,
name|facetStr
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *<b>This API is experimental and subject to change</b>    */
DECL|class|FieldFacet
specifier|public
specifier|static
class|class
name|FieldFacet
extends|extends
name|FacetBase
block|{
DECL|field|field
specifier|public
name|String
name|field
decl_stmt|;
comment|// the field to facet on... "myfield" for
comment|// {!key=foo}myfield
DECL|field|ftype
specifier|public
name|FieldType
name|ftype
decl_stmt|;
DECL|field|offset
specifier|public
name|int
name|offset
decl_stmt|;
DECL|field|limit
specifier|public
name|int
name|limit
decl_stmt|;
DECL|field|minCount
specifier|public
name|int
name|minCount
decl_stmt|;
DECL|field|sort
specifier|public
name|String
name|sort
decl_stmt|;
DECL|field|missing
specifier|public
name|boolean
name|missing
decl_stmt|;
DECL|field|prefix
specifier|public
name|String
name|prefix
decl_stmt|;
DECL|field|missingCount
specifier|public
name|long
name|missingCount
decl_stmt|;
DECL|method|FieldFacet
specifier|public
name|FieldFacet
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|String
name|facetStr
parameter_list|)
block|{
name|super
argument_list|(
name|rb
argument_list|,
name|FacetParams
operator|.
name|FACET_FIELD
argument_list|,
name|facetStr
argument_list|)
expr_stmt|;
name|fillParams
argument_list|(
name|rb
argument_list|,
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
argument_list|,
name|facetOn
argument_list|)
expr_stmt|;
block|}
DECL|method|fillParams
specifier|protected
name|void
name|fillParams
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|ftype
operator|=
name|rb
operator|.
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getFieldTypeNoEx
argument_list|(
name|this
operator|.
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|params
operator|.
name|getFieldInt
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_OFFSET
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|params
operator|.
name|getFieldInt
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Integer
name|mincount
init|=
name|params
operator|.
name|getFieldInt
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_MINCOUNT
argument_list|)
decl_stmt|;
if|if
condition|(
name|mincount
operator|==
literal|null
condition|)
block|{
name|Boolean
name|zeros
init|=
name|params
operator|.
name|getFieldBool
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_ZEROS
argument_list|)
decl_stmt|;
comment|// mincount = (zeros!=null&& zeros) ? 0 : 1;
name|mincount
operator|=
operator|(
name|zeros
operator|!=
literal|null
operator|&&
operator|!
name|zeros
operator|)
condition|?
literal|1
else|:
literal|0
expr_stmt|;
comment|// current default is to include zeros.
block|}
name|this
operator|.
name|minCount
operator|=
name|mincount
expr_stmt|;
name|this
operator|.
name|missing
operator|=
name|params
operator|.
name|getFieldBool
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_MISSING
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// default to sorting by count if there is a limit.
name|this
operator|.
name|sort
operator|=
name|params
operator|.
name|getFieldParam
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_SORT
argument_list|,
operator|(
name|limit
operator|>
literal|0
condition|?
name|FacetParams
operator|.
name|FACET_SORT_COUNT
else|:
name|FacetParams
operator|.
name|FACET_SORT_INDEX
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|sort
operator|.
name|equals
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT_COUNT_LEGACY
argument_list|)
condition|)
block|{
name|this
operator|.
name|sort
operator|=
name|FacetParams
operator|.
name|FACET_SORT_COUNT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|sort
operator|.
name|equals
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT_INDEX_LEGACY
argument_list|)
condition|)
block|{
name|this
operator|.
name|sort
operator|=
name|FacetParams
operator|.
name|FACET_SORT_INDEX
expr_stmt|;
block|}
name|this
operator|.
name|prefix
operator|=
name|params
operator|.
name|getFieldParam
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_PREFIX
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *<b>This API is experimental and subject to change</b>    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|class|DistribFieldFacet
specifier|public
specifier|static
class|class
name|DistribFieldFacet
extends|extends
name|FieldFacet
block|{
DECL|field|_toRefine
specifier|public
name|List
argument_list|<
name|String
argument_list|>
index|[]
name|_toRefine
decl_stmt|;
comment|// a List<String> of refinements needed,
comment|// one for each shard.
comment|// SchemaField sf; // currently unneeded
comment|// the max possible count for a term appearing on no list
DECL|field|missingMaxPossible
specifier|public
name|long
name|missingMaxPossible
decl_stmt|;
comment|// the max possible count for a missing term for each shard (indexed by
comment|// shardNum)
DECL|field|missingMax
specifier|public
name|long
index|[]
name|missingMax
decl_stmt|;
comment|// a bitset for each shard, keeping track of which terms seen
DECL|field|counted
specifier|public
name|FixedBitSet
index|[]
name|counted
decl_stmt|;
DECL|field|counts
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|ShardFacetCount
argument_list|>
name|counts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|128
argument_list|)
decl_stmt|;
DECL|field|termNum
specifier|public
name|int
name|termNum
decl_stmt|;
DECL|field|initialLimit
specifier|public
name|int
name|initialLimit
decl_stmt|;
comment|// how many terms requested in first phase
DECL|field|initialMincount
specifier|public
name|int
name|initialMincount
decl_stmt|;
comment|// mincount param sent to each shard
DECL|field|mco
specifier|public
name|boolean
name|mco
decl_stmt|;
DECL|field|overrequestRatio
specifier|public
name|double
name|overrequestRatio
decl_stmt|;
DECL|field|overrequestCount
specifier|public
name|int
name|overrequestCount
decl_stmt|;
DECL|field|needRefinements
specifier|public
name|boolean
name|needRefinements
decl_stmt|;
DECL|field|countSorted
specifier|public
name|ShardFacetCount
index|[]
name|countSorted
decl_stmt|;
DECL|method|DistribFieldFacet
name|DistribFieldFacet
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|String
name|facetStr
parameter_list|)
block|{
name|super
argument_list|(
name|rb
argument_list|,
name|facetStr
argument_list|)
expr_stmt|;
comment|// sf = rb.req.getSchema().getField(field);
name|missingMax
operator|=
operator|new
name|long
index|[
name|rb
operator|.
name|shards
operator|.
name|length
index|]
expr_stmt|;
name|counted
operator|=
operator|new
name|FixedBitSet
index|[
name|rb
operator|.
name|shards
operator|.
name|length
index|]
expr_stmt|;
block|}
DECL|method|fillParams
specifier|protected
name|void
name|fillParams
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|super
operator|.
name|fillParams
argument_list|(
name|rb
argument_list|,
name|params
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|overrequestRatio
operator|=
name|params
operator|.
name|getFieldDouble
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_OVERREQUEST_RATIO
argument_list|,
literal|1.5
argument_list|)
expr_stmt|;
name|this
operator|.
name|overrequestCount
operator|=
name|params
operator|.
name|getFieldInt
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_OVERREQUEST_COUNT
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|mco
operator|=
name|params
operator|.
name|getFieldBool
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_DISTRIB_MCO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|add
name|void
name|add
parameter_list|(
name|int
name|shardNum
parameter_list|,
name|NamedList
name|shardCounts
parameter_list|,
name|int
name|numRequested
parameter_list|)
block|{
comment|// shardCounts could be null if there was an exception
name|int
name|sz
init|=
name|shardCounts
operator|==
literal|null
condition|?
literal|0
else|:
name|shardCounts
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numReceived
init|=
name|sz
decl_stmt|;
name|FixedBitSet
name|terms
init|=
operator|new
name|FixedBitSet
argument_list|(
name|termNum
operator|+
name|sz
argument_list|)
decl_stmt|;
name|long
name|last
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|shardCounts
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|count
init|=
operator|(
operator|(
name|Number
operator|)
name|shardCounts
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|missingCount
operator|+=
name|count
expr_stmt|;
name|numReceived
operator|--
expr_stmt|;
block|}
else|else
block|{
name|ShardFacetCount
name|sfc
init|=
name|counts
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|sfc
operator|==
literal|null
condition|)
block|{
name|sfc
operator|=
operator|new
name|ShardFacetCount
argument_list|()
expr_stmt|;
name|sfc
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|sfc
operator|.
name|indexed
operator|=
name|ftype
operator|==
literal|null
condition|?
name|sfc
operator|.
name|name
else|:
name|ftype
operator|.
name|toInternal
argument_list|(
name|sfc
operator|.
name|name
argument_list|)
expr_stmt|;
name|sfc
operator|.
name|termNum
operator|=
name|termNum
operator|++
expr_stmt|;
name|counts
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|sfc
argument_list|)
expr_stmt|;
block|}
name|sfc
operator|.
name|count
operator|+=
name|count
expr_stmt|;
name|terms
operator|.
name|set
argument_list|(
name|sfc
operator|.
name|termNum
argument_list|)
expr_stmt|;
name|last
operator|=
name|count
expr_stmt|;
block|}
block|}
comment|// the largest possible missing term is initialMincount if we received
comment|// less than the number requested.
if|if
condition|(
name|numRequested
operator|<
literal|0
operator|||
name|numRequested
operator|!=
literal|0
operator|&&
name|numReceived
operator|<
name|numRequested
condition|)
block|{
name|last
operator|=
name|initialMincount
expr_stmt|;
block|}
name|missingMaxPossible
operator|+=
name|last
expr_stmt|;
name|missingMax
index|[
name|shardNum
index|]
operator|=
name|last
expr_stmt|;
name|counted
index|[
name|shardNum
index|]
operator|=
name|terms
expr_stmt|;
block|}
DECL|method|getLexSorted
specifier|public
name|ShardFacetCount
index|[]
name|getLexSorted
parameter_list|()
block|{
name|ShardFacetCount
index|[]
name|arr
init|=
name|counts
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|ShardFacetCount
index|[
name|counts
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|arr
argument_list|,
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
name|o1
operator|.
name|indexed
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|indexed
argument_list|)
argument_list|)
expr_stmt|;
name|countSorted
operator|=
name|arr
expr_stmt|;
return|return
name|arr
return|;
block|}
DECL|method|getCountSorted
specifier|public
name|ShardFacetCount
index|[]
name|getCountSorted
parameter_list|()
block|{
name|ShardFacetCount
index|[]
name|arr
init|=
name|counts
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|ShardFacetCount
index|[
name|counts
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|arr
argument_list|,
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|o2
operator|.
name|count
operator|<
name|o1
operator|.
name|count
condition|)
return|return
operator|-
literal|1
return|;
elseif|else
if|if
condition|(
name|o1
operator|.
name|count
operator|<
name|o2
operator|.
name|count
condition|)
return|return
literal|1
return|;
return|return
name|o1
operator|.
name|indexed
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|indexed
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|countSorted
operator|=
name|arr
expr_stmt|;
return|return
name|arr
return|;
block|}
comment|// returns the max possible value this ShardFacetCount could have for this shard
comment|// (assumes the shard did not report a count for this value)
DECL|method|maxPossible
name|long
name|maxPossible
parameter_list|(
name|int
name|shardNum
parameter_list|)
block|{
return|return
name|missingMax
index|[
name|shardNum
index|]
return|;
comment|// TODO: could store the last term in the shard to tell if this term
comment|// comes before or after it. If it comes before, we could subtract 1
block|}
DECL|method|respectMinCount
specifier|public
name|void
name|respectMinCount
parameter_list|(
name|long
name|minCount
parameter_list|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|ShardFacetCount
argument_list|>
name|newOne
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|replace
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ShardFacetCount
argument_list|>
name|ent
range|:
name|counts
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|ent
operator|.
name|getValue
argument_list|()
operator|.
name|count
operator|>=
name|minCount
condition|)
block|{
name|newOne
operator|.
name|put
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Removing facet/key: "
operator|+
name|ent
operator|.
name|getKey
argument_list|()
operator|+
literal|"/"
operator|+
name|ent
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" mincount="
operator|+
name|minCount
argument_list|)
expr_stmt|;
name|replace
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|replace
condition|)
block|{
name|counts
operator|=
name|newOne
expr_stmt|;
block|}
block|}
block|}
comment|/**    *<b>This API is experimental and subject to change</b>    */
DECL|class|ShardFacetCount
specifier|public
specifier|static
class|class
name|ShardFacetCount
block|{
DECL|field|name
specifier|public
name|String
name|name
decl_stmt|;
comment|// the indexed form of the name... used for comparisons
DECL|field|indexed
specifier|public
name|String
name|indexed
decl_stmt|;
DECL|field|count
specifier|public
name|long
name|count
decl_stmt|;
DECL|field|termNum
specifier|public
name|int
name|termNum
decl_stmt|;
comment|// term number starting at 0 (used in bit arrays)
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{term="
operator|+
name|name
operator|+
literal|",termNum="
operator|+
name|termNum
operator|+
literal|",count="
operator|+
name|count
operator|+
literal|"}"
return|;
block|}
block|}
block|}
end_class
end_unit
