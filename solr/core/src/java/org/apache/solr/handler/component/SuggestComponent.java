begin_unit
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|Lookup
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|Lookup
operator|.
name|LookupResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountables
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ShardParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrEventListener
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|spelling
operator|.
name|suggest
operator|.
name|SolrSuggester
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|spelling
operator|.
name|suggest
operator|.
name|SuggesterOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|spelling
operator|.
name|suggest
operator|.
name|SuggesterParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|spelling
operator|.
name|suggest
operator|.
name|SuggesterResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|SolrCoreAware
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * SuggestComponent: interacts with multiple {@link SolrSuggester} to serve up suggestions  * Responsible for routing commands and queries to the appropriate {@link SolrSuggester}  * and for initializing them as specified by SolrConfig  */
end_comment
begin_class
DECL|class|SuggestComponent
specifier|public
class|class
name|SuggestComponent
extends|extends
name|SearchComponent
implements|implements
name|SolrCoreAware
implements|,
name|SuggesterParams
implements|,
name|Accountable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SuggestComponent
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Name used to identify whether the user query concerns this component */
DECL|field|COMPONENT_NAME
specifier|public
specifier|static
specifier|final
name|String
name|COMPONENT_NAME
init|=
literal|"suggest"
decl_stmt|;
comment|/** Name assigned to an unnamed suggester (at most one suggester) can be unnamed */
DECL|field|DEFAULT_DICT_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_DICT_NAME
init|=
name|SolrSuggester
operator|.
name|DEFAULT_DICT_NAME
decl_stmt|;
comment|/** SolrConfig label to identify  Config time settings */
DECL|field|CONFIG_PARAM_LABEL
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_PARAM_LABEL
init|=
literal|"suggester"
decl_stmt|;
comment|/** SolrConfig label to identify boolean value to build suggesters on commit */
DECL|field|BUILD_ON_COMMIT_LABEL
specifier|private
specifier|static
specifier|final
name|String
name|BUILD_ON_COMMIT_LABEL
init|=
literal|"buildOnCommit"
decl_stmt|;
comment|/** SolrConfig label to identify boolean value to build suggesters on optimize */
DECL|field|BUILD_ON_OPTIMIZE_LABEL
specifier|private
specifier|static
specifier|final
name|String
name|BUILD_ON_OPTIMIZE_LABEL
init|=
literal|"buildOnOptimize"
decl_stmt|;
comment|/** SolrConfig label to identify boolean value to build suggesters on optimize */
DECL|field|BUILD_ON_STARTUP_LABEL
specifier|private
specifier|static
specifier|final
name|String
name|BUILD_ON_STARTUP_LABEL
init|=
literal|"buildOnStartup"
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|field|initParams
specifier|protected
name|NamedList
name|initParams
decl_stmt|;
comment|/**    * Key is the dictionary name used in SolrConfig, value is the corresponding {@link SolrSuggester}    */
DECL|field|suggesters
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|SolrSuggester
argument_list|>
name|suggesters
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Container for various labels used in the responses generated by this component */
DECL|class|SuggesterResultLabels
specifier|private
specifier|static
class|class
name|SuggesterResultLabels
block|{
DECL|field|SUGGEST
specifier|static
specifier|final
name|String
name|SUGGEST
init|=
literal|"suggest"
decl_stmt|;
DECL|field|SUGGESTIONS
specifier|static
specifier|final
name|String
name|SUGGESTIONS
init|=
literal|"suggestions"
decl_stmt|;
DECL|field|SUGGESTION_NUM_FOUND
specifier|static
specifier|final
name|String
name|SUGGESTION_NUM_FOUND
init|=
literal|"numFound"
decl_stmt|;
DECL|field|SUGGESTION_TERM
specifier|static
specifier|final
name|String
name|SUGGESTION_TERM
init|=
literal|"term"
decl_stmt|;
DECL|field|SUGGESTION_WEIGHT
specifier|static
specifier|final
name|String
name|SUGGESTION_WEIGHT
init|=
literal|"weight"
decl_stmt|;
DECL|field|SUGGESTION_PAYLOAD
specifier|static
specifier|final
name|String
name|SUGGESTION_PAYLOAD
init|=
literal|"payload"
decl_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|this
operator|.
name|initParams
operator|=
name|args
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
if|if
condition|(
name|initParams
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing SuggestComponent"
argument_list|)
expr_stmt|;
name|boolean
name|hasDefault
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|initParams
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|initParams
operator|.
name|getName
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|CONFIG_PARAM_LABEL
argument_list|)
condition|)
block|{
name|NamedList
name|suggesterParams
init|=
operator|(
name|NamedList
operator|)
name|initParams
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SolrSuggester
name|suggester
init|=
operator|new
name|SolrSuggester
argument_list|()
decl_stmt|;
name|String
name|dictionary
init|=
name|suggester
operator|.
name|init
argument_list|(
name|suggesterParams
argument_list|,
name|core
argument_list|)
decl_stmt|;
if|if
condition|(
name|dictionary
operator|!=
literal|null
condition|)
block|{
name|boolean
name|isDefault
init|=
name|dictionary
operator|.
name|equals
argument_list|(
name|DEFAULT_DICT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDefault
operator|&&
operator|!
name|hasDefault
condition|)
block|{
name|hasDefault
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isDefault
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"More than one dictionary is missing name."
argument_list|)
throw|;
block|}
name|suggesters
operator|.
name|put
argument_list|(
name|dictionary
argument_list|,
name|suggester
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|hasDefault
condition|)
block|{
name|suggesters
operator|.
name|put
argument_list|(
name|DEFAULT_DICT_NAME
argument_list|,
name|suggester
argument_list|)
expr_stmt|;
name|hasDefault
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"More than one dictionary is missing name."
argument_list|)
throw|;
block|}
block|}
name|boolean
name|buildOnStartup
decl_stmt|;
name|Object
name|buildOnStartupObj
init|=
name|suggesterParams
operator|.
name|get
argument_list|(
name|BUILD_ON_STARTUP_LABEL
argument_list|)
decl_stmt|;
if|if
condition|(
name|buildOnStartupObj
operator|==
literal|null
condition|)
block|{
name|File
name|storeFile
init|=
name|suggester
operator|.
name|getStoreFile
argument_list|()
decl_stmt|;
name|buildOnStartup
operator|=
name|storeFile
operator|==
literal|null
operator|||
operator|!
name|storeFile
operator|.
name|exists
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|buildOnStartup
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
operator|(
name|String
operator|)
name|buildOnStartupObj
argument_list|)
expr_stmt|;
block|}
name|boolean
name|buildOnCommit
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
operator|(
name|String
operator|)
name|suggesterParams
operator|.
name|get
argument_list|(
name|BUILD_ON_COMMIT_LABEL
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|buildOnOptimize
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
operator|(
name|String
operator|)
name|suggesterParams
operator|.
name|get
argument_list|(
name|BUILD_ON_OPTIMIZE_LABEL
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|core
operator|.
name|isReloaded
argument_list|()
condition|)
block|{
comment|// Register first searcher event listeners for this Suggester unless it's a core reload
name|core
operator|.
name|registerFirstSearcherListener
argument_list|(
operator|new
name|SuggesterListener
argument_list|(
name|core
argument_list|,
name|suggester
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|buildOnStartup
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|buildOnCommit
operator|||
name|buildOnOptimize
operator|||
name|core
operator|.
name|isReloaded
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Registering newSearcher listener for suggester: "
operator|+
name|suggester
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|core
operator|.
name|registerNewSearcherListener
argument_list|(
operator|new
name|SuggesterListener
argument_list|(
name|core
argument_list|,
name|suggester
argument_list|,
name|buildOnCommit
argument_list|,
name|buildOnOptimize
argument_list|,
name|buildOnStartup
argument_list|,
name|core
operator|.
name|isReloaded
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/** Responsible for issuing build and rebload command to the specified {@link SolrSuggester} */
annotation|@
name|Override
DECL|method|prepare
specifier|public
name|void
name|prepare
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrParams
name|params
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SuggestComponent prepare with : "
operator|+
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|params
operator|.
name|getBool
argument_list|(
name|COMPONENT_NAME
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
name|boolean
name|buildAll
init|=
name|params
operator|.
name|getBool
argument_list|(
name|SUGGEST_BUILD_ALL
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|reloadAll
init|=
name|params
operator|.
name|getBool
argument_list|(
name|SUGGEST_RELOAD_ALL
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|SolrSuggester
argument_list|>
name|querysuggesters
decl_stmt|;
if|if
condition|(
name|buildAll
operator|||
name|reloadAll
condition|)
block|{
name|querysuggesters
operator|=
name|suggesters
operator|.
name|values
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|querysuggesters
operator|=
name|getSuggesters
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|getBool
argument_list|(
name|SUGGEST_BUILD
argument_list|,
literal|false
argument_list|)
operator|||
name|buildAll
condition|)
block|{
for|for
control|(
name|SolrSuggester
name|suggester
range|:
name|querysuggesters
control|)
block|{
name|suggester
operator|.
name|build
argument_list|(
name|rb
operator|.
name|req
operator|.
name|getCore
argument_list|()
argument_list|,
name|rb
operator|.
name|req
operator|.
name|getSearcher
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"command"
argument_list|,
operator|(
operator|!
name|buildAll
operator|)
condition|?
literal|"build"
else|:
literal|"buildAll"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|params
operator|.
name|getBool
argument_list|(
name|SUGGEST_RELOAD
argument_list|,
literal|false
argument_list|)
operator|||
name|reloadAll
condition|)
block|{
for|for
control|(
name|SolrSuggester
name|suggester
range|:
name|querysuggesters
control|)
block|{
name|suggester
operator|.
name|reload
argument_list|(
name|rb
operator|.
name|req
operator|.
name|getCore
argument_list|()
argument_list|,
name|rb
operator|.
name|req
operator|.
name|getSearcher
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"command"
argument_list|,
operator|(
operator|!
name|reloadAll
operator|)
condition|?
literal|"reload"
else|:
literal|"reloadAll"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Dispatch shard request in<code>STAGE_EXECUTE_QUERY</code> stage */
annotation|@
name|Override
DECL|method|distributedProcess
specifier|public
name|int
name|distributedProcess
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
name|SolrParams
name|params
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SuggestComponent distributedProcess with : "
operator|+
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|rb
operator|.
name|stage
operator|<
name|ResponseBuilder
operator|.
name|STAGE_EXECUTE_QUERY
condition|)
return|return
name|ResponseBuilder
operator|.
name|STAGE_EXECUTE_QUERY
return|;
if|if
condition|(
name|rb
operator|.
name|stage
operator|==
name|ResponseBuilder
operator|.
name|STAGE_EXECUTE_QUERY
condition|)
block|{
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|sreq
operator|.
name|purpose
operator|=
name|ShardRequest
operator|.
name|PURPOSE_GET_TOP_IDS
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|ShardParams
operator|.
name|SHARDS
argument_list|)
expr_stmt|;
name|rb
operator|.
name|addRequest
argument_list|(
name|this
argument_list|,
name|sreq
argument_list|)
expr_stmt|;
return|return
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
return|;
block|}
return|return
name|ResponseBuilder
operator|.
name|STAGE_DONE
return|;
block|}
comment|/**     * Responsible for using the specified suggester to get the suggestions     * for the query and write the results     * */
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrParams
name|params
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SuggestComponent process with : "
operator|+
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|params
operator|.
name|getBool
argument_list|(
name|COMPONENT_NAME
argument_list|,
literal|false
argument_list|)
operator|||
name|suggesters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|buildAll
init|=
name|params
operator|.
name|getBool
argument_list|(
name|SUGGEST_BUILD_ALL
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|reloadAll
init|=
name|params
operator|.
name|getBool
argument_list|(
name|SUGGEST_RELOAD_ALL
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|SolrSuggester
argument_list|>
name|querySuggesters
decl_stmt|;
try|try
block|{
name|querySuggesters
operator|=
name|getSuggesters
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
name|buildAll
operator|&&
operator|!
name|reloadAll
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
else|else
block|{
name|querySuggesters
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|query
init|=
name|params
operator|.
name|get
argument_list|(
name|SUGGEST_Q
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
name|query
operator|=
name|rb
operator|.
name|getQueryString
argument_list|()
expr_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
name|query
operator|=
name|params
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|int
name|count
init|=
name|params
operator|.
name|getInt
argument_list|(
name|SUGGEST_COUNT
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SuggesterOptions
name|options
init|=
operator|new
name|SuggesterOptions
argument_list|(
operator|new
name|CharsRef
argument_list|(
name|query
argument_list|)
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SimpleOrderedMap
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|namedListResults
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrSuggester
name|suggester
range|:
name|querySuggesters
control|)
block|{
name|SuggesterResult
name|suggesterResult
init|=
name|suggester
operator|.
name|getSuggestions
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|toNamedList
argument_list|(
name|suggesterResult
argument_list|,
name|namedListResults
argument_list|)
expr_stmt|;
block|}
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
name|SuggesterResultLabels
operator|.
name|SUGGEST
argument_list|,
name|namedListResults
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**     * Used in Distributed Search, merges the suggestion results from every shard    * */
annotation|@
name|Override
DECL|method|finishStage
specifier|public
name|void
name|finishStage
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
name|SolrParams
name|params
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SuggestComponent finishStage with : "
operator|+
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|params
operator|.
name|getBool
argument_list|(
name|COMPONENT_NAME
argument_list|,
literal|false
argument_list|)
operator|||
name|rb
operator|.
name|stage
operator|!=
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
condition|)
return|return;
name|int
name|count
init|=
name|params
operator|.
name|getInt
argument_list|(
name|SUGGEST_COUNT
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SuggesterResult
argument_list|>
name|suggesterResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Collect Shard responses
for|for
control|(
name|ShardRequest
name|sreq
range|:
name|rb
operator|.
name|finished
control|)
block|{
for|for
control|(
name|ShardResponse
name|srsp
range|:
name|sreq
operator|.
name|responses
control|)
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|resp
decl_stmt|;
if|if
condition|(
operator|(
name|resp
operator|=
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|SimpleOrderedMap
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|namedList
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|SimpleOrderedMap
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
operator|)
name|resp
operator|.
name|get
argument_list|(
name|SuggesterResultLabels
operator|.
name|SUGGEST
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|srsp
operator|.
name|getShard
argument_list|()
operator|+
literal|" : "
operator|+
name|namedList
argument_list|)
expr_stmt|;
name|suggesterResults
operator|.
name|add
argument_list|(
name|toSuggesterResult
argument_list|(
name|namedList
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Merge Shard responses
name|SuggesterResult
name|suggesterResult
init|=
name|merge
argument_list|(
name|suggesterResults
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SimpleOrderedMap
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|namedListResults
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|toNamedList
argument_list|(
name|suggesterResult
argument_list|,
name|namedListResults
argument_list|)
expr_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
name|SuggesterResultLabels
operator|.
name|SUGGEST
argument_list|,
name|namedListResults
argument_list|)
expr_stmt|;
block|}
comment|/**     * Given a list of {@link SuggesterResult} and<code>count</code>    * returns a {@link SuggesterResult} containing<code>count</code>    * number of {@link LookupResult}, sorted by their associated     * weights    * */
DECL|method|merge
specifier|private
specifier|static
name|SuggesterResult
name|merge
parameter_list|(
name|List
argument_list|<
name|SuggesterResult
argument_list|>
name|suggesterResults
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|SuggesterResult
name|result
init|=
operator|new
name|SuggesterResult
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allTokens
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|suggesterNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// collect all tokens
for|for
control|(
name|SuggesterResult
name|shardResult
range|:
name|suggesterResults
control|)
block|{
for|for
control|(
name|String
name|suggesterName
range|:
name|shardResult
operator|.
name|getSuggesterNames
argument_list|()
control|)
block|{
name|allTokens
operator|.
name|addAll
argument_list|(
name|shardResult
operator|.
name|getTokens
argument_list|(
name|suggesterName
argument_list|)
argument_list|)
expr_stmt|;
name|suggesterNames
operator|.
name|add
argument_list|(
name|suggesterName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Get Top N for every token in every shard (using weights)
for|for
control|(
name|String
name|suggesterName
range|:
name|suggesterNames
control|)
block|{
for|for
control|(
name|String
name|token
range|:
name|allTokens
control|)
block|{
name|Lookup
operator|.
name|LookupPriorityQueue
name|resultQueue
init|=
operator|new
name|Lookup
operator|.
name|LookupPriorityQueue
argument_list|(
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|SuggesterResult
name|shardResult
range|:
name|suggesterResults
control|)
block|{
name|List
argument_list|<
name|LookupResult
argument_list|>
name|suggests
init|=
name|shardResult
operator|.
name|getLookupResult
argument_list|(
name|suggesterName
argument_list|,
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|suggests
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|LookupResult
name|res
range|:
name|suggests
control|)
block|{
name|resultQueue
operator|.
name|insertWithOverflow
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|LookupResult
argument_list|>
name|sortedSuggests
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|sortedSuggests
argument_list|,
name|resultQueue
operator|.
name|getResults
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|suggesterName
argument_list|,
name|token
argument_list|,
name|sortedSuggests
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Suggester component"
return|;
block|}
annotation|@
name|Override
DECL|method|getStatistics
specifier|public
name|NamedList
name|getStatistics
parameter_list|()
block|{
name|NamedList
argument_list|<
name|String
argument_list|>
name|stats
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
name|stats
operator|.
name|add
argument_list|(
literal|"totalSizeInBytes"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|ramBytesUsed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SolrSuggester
argument_list|>
name|entry
range|:
name|suggesters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|SolrSuggester
name|suggester
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|stats
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|suggester
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|stats
return|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
name|long
name|sizeInBytes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SolrSuggester
name|suggester
range|:
name|suggesters
operator|.
name|values
argument_list|()
control|)
block|{
name|sizeInBytes
operator|+=
name|suggester
operator|.
name|ramBytesUsed
argument_list|()
expr_stmt|;
block|}
return|return
name|sizeInBytes
return|;
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
name|Collection
argument_list|<
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
return|return
name|Accountables
operator|.
name|namedAccountables
argument_list|(
literal|"field"
argument_list|,
name|suggesters
argument_list|)
return|;
block|}
DECL|method|getSuggesters
specifier|private
name|Set
argument_list|<
name|SolrSuggester
argument_list|>
name|getSuggesters
parameter_list|(
name|SolrParams
name|params
parameter_list|)
block|{
name|Set
argument_list|<
name|SolrSuggester
argument_list|>
name|solrSuggesters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|suggesterName
range|:
name|getSuggesterNames
argument_list|(
name|params
argument_list|)
control|)
block|{
name|SolrSuggester
name|curSuggester
init|=
name|suggesters
operator|.
name|get
argument_list|(
name|suggesterName
argument_list|)
decl_stmt|;
if|if
condition|(
name|curSuggester
operator|!=
literal|null
condition|)
block|{
name|solrSuggesters
operator|.
name|add
argument_list|(
name|curSuggester
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No suggester named "
operator|+
name|suggesterName
operator|+
literal|" was configured"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|solrSuggesters
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"'"
operator|+
name|SUGGEST_DICT
operator|+
literal|"' parameter not specified and no default suggester configured"
argument_list|)
throw|;
block|}
return|return
name|solrSuggesters
return|;
block|}
DECL|method|getSuggesterNames
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getSuggesterNames
parameter_list|(
name|SolrParams
name|params
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|suggesterNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|suggesterNamesFromParams
init|=
name|params
operator|.
name|getParams
argument_list|(
name|SUGGEST_DICT
argument_list|)
decl_stmt|;
if|if
condition|(
name|suggesterNamesFromParams
operator|==
literal|null
condition|)
block|{
name|suggesterNames
operator|.
name|add
argument_list|(
name|DEFAULT_DICT_NAME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|name
range|:
name|suggesterNamesFromParams
control|)
block|{
name|suggesterNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|suggesterNames
return|;
block|}
comment|/** Convert {@link SuggesterResult} to NamedList for constructing responses */
DECL|method|toNamedList
specifier|private
name|void
name|toNamedList
parameter_list|(
name|SuggesterResult
name|suggesterResult
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SimpleOrderedMap
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|resultObj
parameter_list|)
block|{
for|for
control|(
name|String
name|suggesterName
range|:
name|suggesterResult
operator|.
name|getSuggesterNames
argument_list|()
control|)
block|{
name|SimpleOrderedMap
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|token
range|:
name|suggesterResult
operator|.
name|getTokens
argument_list|(
name|suggesterName
argument_list|)
control|)
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|suggestionBody
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|lookupResults
init|=
name|suggesterResult
operator|.
name|getLookupResult
argument_list|(
name|suggesterName
argument_list|,
name|token
argument_list|)
decl_stmt|;
name|suggestionBody
operator|.
name|add
argument_list|(
name|SuggesterResultLabels
operator|.
name|SUGGESTION_NUM_FOUND
argument_list|,
name|lookupResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|>
name|suggestEntriesNamedList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|LookupResult
name|lookupResult
range|:
name|lookupResults
control|)
block|{
name|String
name|suggestionString
init|=
name|lookupResult
operator|.
name|key
operator|.
name|toString
argument_list|()
decl_stmt|;
name|long
name|weight
init|=
name|lookupResult
operator|.
name|value
decl_stmt|;
name|String
name|payload
init|=
operator|(
name|lookupResult
operator|.
name|payload
operator|!=
literal|null
operator|)
condition|?
name|lookupResult
operator|.
name|payload
operator|.
name|utf8ToString
argument_list|()
else|:
literal|""
decl_stmt|;
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|suggestEntryNamedList
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
name|suggestEntryNamedList
operator|.
name|add
argument_list|(
name|SuggesterResultLabels
operator|.
name|SUGGESTION_TERM
argument_list|,
name|suggestionString
argument_list|)
expr_stmt|;
name|suggestEntryNamedList
operator|.
name|add
argument_list|(
name|SuggesterResultLabels
operator|.
name|SUGGESTION_WEIGHT
argument_list|,
name|weight
argument_list|)
expr_stmt|;
name|suggestEntryNamedList
operator|.
name|add
argument_list|(
name|SuggesterResultLabels
operator|.
name|SUGGESTION_PAYLOAD
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|suggestEntriesNamedList
operator|.
name|add
argument_list|(
name|suggestEntryNamedList
argument_list|)
expr_stmt|;
block|}
name|suggestionBody
operator|.
name|add
argument_list|(
name|SuggesterResultLabels
operator|.
name|SUGGESTIONS
argument_list|,
name|suggestEntriesNamedList
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|token
argument_list|,
name|suggestionBody
argument_list|)
expr_stmt|;
block|}
name|resultObj
operator|.
name|put
argument_list|(
name|suggesterName
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Convert NamedList (suggester response) to {@link SuggesterResult} */
DECL|method|toSuggesterResult
specifier|private
name|SuggesterResult
name|toSuggesterResult
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|SimpleOrderedMap
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|suggestionsMap
parameter_list|)
block|{
name|SuggesterResult
name|result
init|=
operator|new
name|SuggesterResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|suggestionsMap
operator|==
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
comment|// for each token
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SimpleOrderedMap
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|entry
range|:
name|suggestionsMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|suggesterName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|suggestionsIter
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|suggestionsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|suggestions
init|=
name|suggestionsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|tokenString
init|=
name|suggestions
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|lookupResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|suggestion
init|=
name|suggestions
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// for each suggestion
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|suggestion
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|String
name|property
init|=
name|suggestion
operator|.
name|getName
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|equals
argument_list|(
name|SuggesterResultLabels
operator|.
name|SUGGESTIONS
argument_list|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|suggestionEntries
init|=
operator|(
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
operator|)
name|suggestion
operator|.
name|getVal
argument_list|(
name|j
argument_list|)
decl_stmt|;
for|for
control|(
name|NamedList
argument_list|<
name|Object
argument_list|>
name|suggestionEntry
range|:
name|suggestionEntries
control|)
block|{
name|String
name|term
init|=
operator|(
name|String
operator|)
name|suggestionEntry
operator|.
name|get
argument_list|(
name|SuggesterResultLabels
operator|.
name|SUGGESTION_TERM
argument_list|)
decl_stmt|;
name|Long
name|weight
init|=
operator|(
name|Long
operator|)
name|suggestionEntry
operator|.
name|get
argument_list|(
name|SuggesterResultLabels
operator|.
name|SUGGESTION_WEIGHT
argument_list|)
decl_stmt|;
name|String
name|payload
init|=
operator|(
name|String
operator|)
name|suggestionEntry
operator|.
name|get
argument_list|(
name|SuggesterResultLabels
operator|.
name|SUGGESTION_PAYLOAD
argument_list|)
decl_stmt|;
name|LookupResult
name|res
init|=
operator|new
name|LookupResult
argument_list|(
operator|new
name|CharsRef
argument_list|(
name|term
argument_list|)
argument_list|,
name|weight
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|payload
argument_list|)
argument_list|)
decl_stmt|;
name|lookupResults
operator|.
name|add
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|add
argument_list|(
name|suggesterName
argument_list|,
name|tokenString
argument_list|,
name|lookupResults
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/** Listener to build or reload the maintained {@link SolrSuggester} by this component */
DECL|class|SuggesterListener
specifier|private
specifier|static
class|class
name|SuggesterListener
implements|implements
name|SolrEventListener
block|{
DECL|field|core
specifier|private
specifier|final
name|SolrCore
name|core
decl_stmt|;
DECL|field|suggester
specifier|private
specifier|final
name|SolrSuggester
name|suggester
decl_stmt|;
DECL|field|buildOnCommit
specifier|private
specifier|final
name|boolean
name|buildOnCommit
decl_stmt|;
DECL|field|buildOnOptimize
specifier|private
specifier|final
name|boolean
name|buildOnOptimize
decl_stmt|;
DECL|field|buildOnStartup
specifier|private
specifier|final
name|boolean
name|buildOnStartup
decl_stmt|;
comment|// On core reload, immediately after the core is created a new searcher is opened, causing the suggester
comment|// to trigger a "buildOnCommit". The only event that we want to trigger in that situation is "buildOnStartup"
comment|// so if buildOnCommit is true and this is a core being reloaded, we will skip the first time this listener
comment|// is called
DECL|field|firstCall
specifier|private
specifier|final
name|AtomicBoolean
name|firstCall
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|field|isCoreReload
specifier|private
specifier|final
name|boolean
name|isCoreReload
decl_stmt|;
DECL|method|SuggesterListener
specifier|public
name|SuggesterListener
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|SolrSuggester
name|checker
parameter_list|,
name|boolean
name|buildOnCommit
parameter_list|,
name|boolean
name|buildOnOptimize
parameter_list|,
name|boolean
name|buildOnStartup
parameter_list|,
name|boolean
name|isCoreReload
parameter_list|)
block|{
name|this
operator|.
name|core
operator|=
name|core
expr_stmt|;
name|this
operator|.
name|suggester
operator|=
name|checker
expr_stmt|;
name|this
operator|.
name|buildOnCommit
operator|=
name|buildOnCommit
expr_stmt|;
name|this
operator|.
name|buildOnOptimize
operator|=
name|buildOnOptimize
expr_stmt|;
name|this
operator|.
name|buildOnStartup
operator|=
name|buildOnStartup
expr_stmt|;
name|this
operator|.
name|isCoreReload
operator|=
name|isCoreReload
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|newSearcher
specifier|public
name|void
name|newSearcher
parameter_list|(
name|SolrIndexSearcher
name|newSearcher
parameter_list|,
name|SolrIndexSearcher
name|currentSearcher
parameter_list|)
block|{
assert|assert
operator|!
operator|(
name|currentSearcher
operator|==
literal|null
operator|&&
name|isCoreReload
operator|)
operator|:
literal|"SuggesterListener should not be added as firstSearcherListener in case of a core reload"
assert|;
name|boolean
name|first
init|=
name|firstCall
operator|.
name|getAndSet
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentSearcher
operator|==
literal|null
operator|||
operator|(
name|isCoreReload
operator|&&
name|first
operator|)
condition|)
block|{
if|if
condition|(
name|buildOnStartup
condition|)
block|{
name|buildSuggesterIndex
argument_list|(
name|newSearcher
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// newSearcher event
if|if
condition|(
name|buildOnCommit
condition|)
block|{
name|buildSuggesterIndex
argument_list|(
name|newSearcher
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|buildOnOptimize
condition|)
block|{
if|if
condition|(
name|newSearcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|buildSuggesterIndex
argument_list|(
name|newSearcher
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Index is not optimized therefore skipping building suggester index for: "
operator|+
name|suggester
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|buildSuggesterIndex
specifier|private
name|void
name|buildSuggesterIndex
parameter_list|(
name|SolrIndexSearcher
name|newSearcher
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Building suggester index for: "
operator|+
name|suggester
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|suggester
operator|.
name|build
argument_list|(
name|core
argument_list|,
name|newSearcher
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception in building suggester index for: "
operator|+
name|suggester
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|postCommit
specifier|public
name|void
name|postCommit
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|postSoftCommit
specifier|public
name|void
name|postSoftCommit
parameter_list|()
block|{}
block|}
block|}
end_class
end_unit
