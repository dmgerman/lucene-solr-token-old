begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  *<p>  * Manage the leader state of the CDCR nodes.  *</p>  *<p>  * It takes care of notifying the {@link CdcrReplicatorManager} in case  * of a leader state change.  *</p>  */
end_comment
begin_class
DECL|class|CdcrLeaderStateManager
class|class
name|CdcrLeaderStateManager
extends|extends
name|CdcrStateManager
block|{
DECL|field|amILeader
specifier|private
name|boolean
name|amILeader
init|=
literal|false
decl_stmt|;
DECL|field|wrappedWatcher
specifier|private
name|LeaderStateWatcher
name|wrappedWatcher
decl_stmt|;
DECL|field|watcher
specifier|private
name|Watcher
name|watcher
decl_stmt|;
DECL|field|core
specifier|private
name|SolrCore
name|core
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|CdcrLeaderStateManager
name|CdcrLeaderStateManager
parameter_list|(
specifier|final
name|SolrCore
name|core
parameter_list|)
block|{
name|this
operator|.
name|core
operator|=
name|core
expr_stmt|;
comment|// Fetch leader state and register the watcher at startup
try|try
block|{
name|SolrZkClient
name|zkClient
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkClient
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|watcher
operator|=
name|this
operator|.
name|initWatcher
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
comment|// if the node does not exist, it means that the leader was not yet registered. This can happen
comment|// when the cluster is starting up. The core is not yet fully loaded, and the leader election process
comment|// is waiting for it.
if|if
condition|(
name|this
operator|.
name|isLeaderRegistered
argument_list|(
name|zkClient
argument_list|,
name|clusterState
argument_list|)
condition|)
block|{
name|this
operator|.
name|checkIfIAmLeader
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed fetching initial leader state and setting watch"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Checks if the leader is registered. If it is not registered, we are probably at the    * initialisation phase of the cluster. In this case, we must attach a watcher to    * be notified when the leader is registered.    */
DECL|method|isLeaderRegistered
specifier|private
name|boolean
name|isLeaderRegistered
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|ClusterState
name|clusterState
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
comment|// First check if the znode exists, and register the watcher at the same time
return|return
name|zkClient
operator|.
name|exists
argument_list|(
name|this
operator|.
name|getZnodePath
argument_list|()
argument_list|,
name|watcher
argument_list|,
literal|true
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**    * SolrZkClient does not guarantee that a watch object will only be triggered once for a given notification    * if we does not wrap the watcher - see SOLR-6621.    */
DECL|method|initWatcher
specifier|private
name|Watcher
name|initWatcher
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|)
block|{
name|wrappedWatcher
operator|=
operator|new
name|LeaderStateWatcher
argument_list|()
expr_stmt|;
return|return
name|zkClient
operator|.
name|wrapWatcher
argument_list|(
name|wrappedWatcher
argument_list|)
return|;
block|}
DECL|method|checkIfIAmLeader
specifier|private
name|void
name|checkIfIAmLeader
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|SolrZkClient
name|zkClient
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkClient
argument_list|()
decl_stmt|;
name|ZkNodeProps
name|props
init|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|zkClient
operator|.
name|getData
argument_list|(
name|CdcrLeaderStateManager
operator|.
name|this
operator|.
name|getZnodePath
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
name|CdcrLeaderStateManager
operator|.
name|this
operator|.
name|setAmILeader
argument_list|(
name|props
operator|.
name|get
argument_list|(
literal|"core"
argument_list|)
operator|.
name|equals
argument_list|(
name|core
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getZnodePath
specifier|private
name|String
name|getZnodePath
parameter_list|()
block|{
name|String
name|myShardId
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getShardId
argument_list|()
decl_stmt|;
name|String
name|myCollection
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
return|return
literal|"/collections/"
operator|+
name|myCollection
operator|+
literal|"/leaders/"
operator|+
name|myShardId
operator|+
literal|"/leader"
return|;
block|}
DECL|method|setAmILeader
name|void
name|setAmILeader
parameter_list|(
name|boolean
name|amILeader
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|amILeader
operator|!=
name|amILeader
condition|)
block|{
name|this
operator|.
name|amILeader
operator|=
name|amILeader
expr_stmt|;
name|this
operator|.
name|callback
argument_list|()
expr_stmt|;
comment|// notify the observers of a state change
block|}
block|}
DECL|method|amILeader
name|boolean
name|amILeader
parameter_list|()
block|{
return|return
name|amILeader
return|;
block|}
DECL|method|shutdown
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|wrappedWatcher
operator|!=
literal|null
condition|)
block|{
name|wrappedWatcher
operator|.
name|cancel
argument_list|()
expr_stmt|;
comment|// cancel the watcher to avoid spurious warn messages during shutdown
block|}
block|}
DECL|class|LeaderStateWatcher
specifier|private
class|class
name|LeaderStateWatcher
implements|implements
name|Watcher
block|{
DECL|field|isCancelled
specifier|private
name|boolean
name|isCancelled
init|=
literal|false
decl_stmt|;
comment|/**      * Cancel the watcher to avoid spurious warn messages during shutdown.      */
DECL|method|cancel
name|void
name|cancel
parameter_list|()
block|{
name|isCancelled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|isCancelled
condition|)
return|return;
comment|// if the watcher is cancelled, do nothing.
name|String
name|collectionName
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|String
name|shard
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getShardId
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"The leader state has changed: {} @ {}:{}"
argument_list|,
name|event
argument_list|,
name|collectionName
argument_list|,
name|shard
argument_list|)
expr_stmt|;
if|if
condition|(
name|Event
operator|.
name|EventType
operator|.
name|None
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Received new leader state @ {}:{}"
argument_list|,
name|collectionName
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|SolrZkClient
name|zkClient
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkClient
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
if|if
condition|(
name|CdcrLeaderStateManager
operator|.
name|this
operator|.
name|isLeaderRegistered
argument_list|(
name|zkClient
argument_list|,
name|clusterState
argument_list|)
condition|)
block|{
name|CdcrLeaderStateManager
operator|.
name|this
operator|.
name|checkIfIAmLeader
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed updating leader state and setting watch @ "
operator|+
name|collectionName
operator|+
literal|":"
operator|+
name|shard
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
