begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|EnumFieldValue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|StatsField
operator|.
name|Stat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|*
import|;
end_import
begin_import
import|import
name|com
operator|.
name|tdunning
operator|.
name|math
operator|.
name|stats
operator|.
name|AVLTreeDigest
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|HashFunction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|hll
operator|.
name|HLL
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|hll
operator|.
name|HLLType
import|;
end_import
begin_comment
comment|/**  * Factory class for creating instance of   * {@link org.apache.solr.handler.component.StatsValues}  */
end_comment
begin_class
DECL|class|StatsValuesFactory
specifier|public
class|class
name|StatsValuesFactory
block|{
comment|/**    * Creates an instance of StatsValues which supports values from the specified     * {@link StatsField}    *    * @param statsField    *          {@link StatsField} whose statistics will be created by the    *          resulting {@link StatsValues}    * @return Instance of {@link StatsValues} that will create statistics from    *         values from the specified {@link StatsField}    */
DECL|method|createStatsValues
specifier|public
specifier|static
name|StatsValues
name|createStatsValues
parameter_list|(
name|StatsField
name|statsField
parameter_list|)
block|{
specifier|final
name|SchemaField
name|sf
init|=
name|statsField
operator|.
name|getSchemaField
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|sf
condition|)
block|{
comment|// function stats
return|return
operator|new
name|NumericStatsValues
argument_list|(
name|statsField
argument_list|)
return|;
block|}
specifier|final
name|FieldType
name|fieldType
init|=
name|sf
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// TODO: allow FieldType to provide impl.
if|if
condition|(
name|TrieDateField
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|fieldType
argument_list|)
condition|)
block|{
return|return
operator|new
name|DateStatsValues
argument_list|(
name|statsField
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|TrieField
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|fieldType
argument_list|)
condition|)
block|{
return|return
operator|new
name|NumericStatsValues
argument_list|(
name|statsField
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|StrField
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|fieldType
argument_list|)
condition|)
block|{
return|return
operator|new
name|StringStatsValues
argument_list|(
name|statsField
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|EnumField
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|new
name|EnumStatsValues
argument_list|(
name|statsField
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Field type "
operator|+
name|fieldType
operator|+
literal|" is not currently supported"
argument_list|)
throw|;
block|}
block|}
block|}
end_class
begin_comment
comment|/**  * Abstract implementation of  * {@link org.apache.solr.handler.component.StatsValues} that provides the  * default behavior for most StatsValues implementations.  *  * There are very few requirements placed on what statistics concrete  * implementations should collect, with the only required statistics being the  * minimum and maximum values.  */
end_comment
begin_class
DECL|class|AbstractStatsValues
specifier|abstract
class|class
name|AbstractStatsValues
parameter_list|<
name|T
parameter_list|>
implements|implements
name|StatsValues
block|{
DECL|field|FACETS
specifier|private
specifier|static
specifier|final
name|String
name|FACETS
init|=
literal|"facets"
decl_stmt|;
comment|/** Tracks all data about tthe stats we need to collect */
DECL|field|statsField
specifier|final
specifier|protected
name|StatsField
name|statsField
decl_stmt|;
comment|/** may be null if we are collecting stats directly from a function ValueSource */
DECL|field|sf
specifier|final
specifier|protected
name|SchemaField
name|sf
decl_stmt|;
comment|/**    * may be null if we are collecting stats directly from a function ValueSource    */
DECL|field|ft
specifier|final
specifier|protected
name|FieldType
name|ft
decl_stmt|;
comment|// final booleans from StatsField to allow better inlining& JIT optimizing
DECL|field|computeCount
specifier|final
specifier|protected
name|boolean
name|computeCount
decl_stmt|;
DECL|field|computeMissing
specifier|final
specifier|protected
name|boolean
name|computeMissing
decl_stmt|;
DECL|field|computeCalcDistinct
specifier|final
specifier|protected
name|boolean
name|computeCalcDistinct
decl_stmt|;
comment|// needed for either countDistinct or distinctValues
DECL|field|computeMin
specifier|final
specifier|protected
name|boolean
name|computeMin
decl_stmt|;
DECL|field|computeMax
specifier|final
specifier|protected
name|boolean
name|computeMax
decl_stmt|;
DECL|field|computeMinOrMax
specifier|final
specifier|protected
name|boolean
name|computeMinOrMax
decl_stmt|;
DECL|field|computeCardinality
specifier|final
specifier|protected
name|boolean
name|computeCardinality
decl_stmt|;
comment|/**     * Either a function value source to collect from, or the ValueSource associated     * with a single valued field we are collecting from.  Will be null until/unless     * {@link #setNextReader} is called at least once    */
DECL|field|valueSource
specifier|private
name|ValueSource
name|valueSource
decl_stmt|;
comment|/**    * Context to use when retrieving FunctionValues, will be null until/unless    * {@link #setNextReader} is called at least once    */
DECL|field|vsContext
specifier|private
name|Map
name|vsContext
decl_stmt|;
comment|/**    * Values to collect, will be null until/unless {@link #setNextReader} is    * called at least once    */
DECL|field|values
specifier|protected
name|FunctionValues
name|values
decl_stmt|;
DECL|field|max
specifier|protected
name|T
name|max
decl_stmt|;
DECL|field|min
specifier|protected
name|T
name|min
decl_stmt|;
DECL|field|missing
specifier|protected
name|long
name|missing
decl_stmt|;
DECL|field|count
specifier|protected
name|long
name|count
decl_stmt|;
DECL|field|countDistinct
specifier|protected
name|long
name|countDistinct
decl_stmt|;
DECL|field|distinctValues
specifier|protected
specifier|final
name|Set
argument_list|<
name|T
argument_list|>
name|distinctValues
decl_stmt|;
comment|/**    * Hash function that must be used by implementations of {@link #hash}    */
DECL|field|hasher
specifier|protected
specifier|final
name|HashFunction
name|hasher
decl_stmt|;
comment|// if null, no HLL logic can be computed; not final because of "union" optimization (see below)
DECL|field|hll
specifier|private
name|HLL
name|hll
decl_stmt|;
comment|// facetField facetValue
DECL|field|facets
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|StatsValues
argument_list|>
argument_list|>
name|facets
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|AbstractStatsValues
specifier|protected
name|AbstractStatsValues
parameter_list|(
name|StatsField
name|statsField
parameter_list|)
block|{
name|this
operator|.
name|statsField
operator|=
name|statsField
expr_stmt|;
name|this
operator|.
name|computeCount
operator|=
name|statsField
operator|.
name|calculateStats
argument_list|(
name|Stat
operator|.
name|count
argument_list|)
expr_stmt|;
name|this
operator|.
name|computeMissing
operator|=
name|statsField
operator|.
name|calculateStats
argument_list|(
name|Stat
operator|.
name|missing
argument_list|)
expr_stmt|;
name|this
operator|.
name|computeCalcDistinct
operator|=
name|statsField
operator|.
name|calculateStats
argument_list|(
name|Stat
operator|.
name|countDistinct
argument_list|)
operator|||
name|statsField
operator|.
name|calculateStats
argument_list|(
name|Stat
operator|.
name|distinctValues
argument_list|)
expr_stmt|;
name|this
operator|.
name|computeMin
operator|=
name|statsField
operator|.
name|calculateStats
argument_list|(
name|Stat
operator|.
name|min
argument_list|)
expr_stmt|;
name|this
operator|.
name|computeMax
operator|=
name|statsField
operator|.
name|calculateStats
argument_list|(
name|Stat
operator|.
name|max
argument_list|)
expr_stmt|;
name|this
operator|.
name|computeMinOrMax
operator|=
name|computeMin
operator|||
name|computeMax
expr_stmt|;
name|this
operator|.
name|distinctValues
operator|=
name|computeCalcDistinct
condition|?
operator|new
name|TreeSet
argument_list|<>
argument_list|()
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|computeCardinality
operator|=
name|statsField
operator|.
name|calculateStats
argument_list|(
name|Stat
operator|.
name|cardinality
argument_list|)
expr_stmt|;
if|if
condition|(
name|computeCardinality
condition|)
block|{
name|hasher
operator|=
name|statsField
operator|.
name|getHllOptions
argument_list|()
operator|.
name|getHasher
argument_list|()
expr_stmt|;
name|hll
operator|=
name|statsField
operator|.
name|getHllOptions
argument_list|()
operator|.
name|newHLL
argument_list|()
expr_stmt|;
assert|assert
literal|null
operator|!=
name|hll
operator|:
literal|"Cardinality requires an HLL"
assert|;
block|}
else|else
block|{
name|hll
operator|=
literal|null
expr_stmt|;
name|hasher
operator|=
literal|null
expr_stmt|;
block|}
comment|// alternatively, we could refactor a common base class that doesn't know/care
comment|// about either SchemaField or ValueSource - but then there would be a lot of
comment|// duplicate code between "NumericSchemaFieldStatsValues" and
comment|// "NumericValueSourceStatsValues" which would have diff parent classes
comment|//
comment|// part of the complexity here being that the StatsValues API serves two
comment|// masters: collecting concrete Values from things like DocValuesStats and
comment|// the distributed aggregation logic, but also collecting docIds which it
comment|// then
comment|// uses to go out and pull concreate values from the ValueSource
comment|// (from a func, or single valued field)
if|if
condition|(
literal|null
operator|!=
name|statsField
operator|.
name|getSchemaField
argument_list|()
condition|)
block|{
assert|assert
literal|null
operator|==
name|statsField
operator|.
name|getValueSource
argument_list|()
assert|;
name|this
operator|.
name|sf
operator|=
name|statsField
operator|.
name|getSchemaField
argument_list|()
expr_stmt|;
name|this
operator|.
name|ft
operator|=
name|sf
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
assert|assert
literal|null
operator|!=
name|statsField
operator|.
name|getValueSource
argument_list|()
assert|;
assert|assert
literal|null
operator|==
name|statsField
operator|.
name|getSchemaField
argument_list|()
assert|;
name|this
operator|.
name|sf
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ft
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|accumulate
specifier|public
name|void
name|accumulate
parameter_list|(
name|NamedList
name|stv
parameter_list|)
block|{
if|if
condition|(
name|computeCount
condition|)
block|{
name|count
operator|+=
operator|(
name|Long
operator|)
name|stv
operator|.
name|get
argument_list|(
literal|"count"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|computeMissing
condition|)
block|{
name|missing
operator|+=
operator|(
name|Long
operator|)
name|stv
operator|.
name|get
argument_list|(
literal|"missing"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|computeCalcDistinct
condition|)
block|{
name|distinctValues
operator|.
name|addAll
argument_list|(
operator|(
name|Collection
argument_list|<
name|T
argument_list|>
operator|)
name|stv
operator|.
name|get
argument_list|(
literal|"distinctValues"
argument_list|)
argument_list|)
expr_stmt|;
name|countDistinct
operator|=
name|distinctValues
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|computeMinOrMax
condition|)
block|{
name|updateMinMax
argument_list|(
operator|(
name|T
operator|)
name|stv
operator|.
name|get
argument_list|(
literal|"min"
argument_list|)
argument_list|,
operator|(
name|T
operator|)
name|stv
operator|.
name|get
argument_list|(
literal|"max"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|computeCardinality
condition|)
block|{
name|byte
index|[]
name|data
init|=
operator|(
name|byte
index|[]
operator|)
name|stv
operator|.
name|get
argument_list|(
literal|"cardinality"
argument_list|)
decl_stmt|;
name|HLL
name|other
init|=
name|HLL
operator|.
name|fromBytes
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|hll
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|HLLType
operator|.
name|EMPTY
argument_list|)
condition|)
block|{
comment|// The HLL.union method goes out of it's way not to modify the "other" HLL.
comment|// Which means in the case of merging into an "EMPTY" HLL (garunteed to happen at
comment|// least once in every coordination of shard requests) it always clones all
comment|// of the internal storage -- but since we're going to throw "other" away after
comment|// the merge, this just means a short term doubling of RAM that we can skip.
name|hll
operator|=
name|other
expr_stmt|;
block|}
else|else
block|{
name|hll
operator|.
name|union
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
block|}
name|updateTypeSpecificStats
argument_list|(
name|stv
argument_list|)
expr_stmt|;
name|NamedList
name|f
init|=
operator|(
name|NamedList
operator|)
name|stv
operator|.
name|get
argument_list|(
name|FACETS
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|f
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|field
init|=
name|f
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NamedList
name|vals
init|=
operator|(
name|NamedList
operator|)
name|f
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|StatsValues
argument_list|>
name|addTo
init|=
name|facets
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|addTo
operator|==
literal|null
condition|)
block|{
name|addTo
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|facets
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|addTo
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|vals
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|String
name|val
init|=
name|vals
operator|.
name|getName
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|StatsValues
name|vvals
init|=
name|addTo
operator|.
name|get
argument_list|(
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|vvals
operator|==
literal|null
condition|)
block|{
name|vvals
operator|=
name|StatsValuesFactory
operator|.
name|createStatsValues
argument_list|(
name|statsField
argument_list|)
expr_stmt|;
name|addTo
operator|.
name|put
argument_list|(
name|val
argument_list|,
name|vvals
argument_list|)
expr_stmt|;
block|}
name|vvals
operator|.
name|accumulate
argument_list|(
operator|(
name|NamedList
operator|)
name|vals
operator|.
name|getVal
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|accumulate
specifier|public
name|void
name|accumulate
parameter_list|(
name|BytesRef
name|value
parameter_list|,
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|ft
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't collect& convert BytesRefs on stats that do't use a a FieldType: "
operator|+
name|statsField
argument_list|)
throw|;
block|}
name|T
name|typedValue
init|=
operator|(
name|T
operator|)
name|ft
operator|.
name|toObject
argument_list|(
name|sf
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|accumulate
argument_list|(
name|typedValue
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|accumulate
specifier|public
name|void
name|accumulate
parameter_list|(
name|T
name|value
parameter_list|,
name|int
name|count
parameter_list|)
block|{
assert|assert
literal|null
operator|!=
name|value
operator|:
literal|"Can't accumulate null"
assert|;
if|if
condition|(
name|computeCount
condition|)
block|{
name|this
operator|.
name|count
operator|+=
name|count
expr_stmt|;
block|}
if|if
condition|(
name|computeCalcDistinct
condition|)
block|{
name|distinctValues
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|countDistinct
operator|=
name|distinctValues
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|computeMinOrMax
condition|)
block|{
name|updateMinMax
argument_list|(
name|value
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|computeCardinality
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|hasher
condition|)
block|{
assert|assert
name|value
operator|instanceof
name|Number
operator|:
literal|"pre-hashed value support only works with numeric longs"
assert|;
name|hll
operator|.
name|addRaw
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hll
operator|.
name|addRaw
argument_list|(
name|hash
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|updateTypeSpecificStats
argument_list|(
name|value
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|missing
specifier|public
name|void
name|missing
parameter_list|()
block|{
if|if
condition|(
name|computeMissing
condition|)
block|{
name|missing
operator|++
expr_stmt|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|addMissing
specifier|public
name|void
name|addMissing
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|missing
operator|+=
name|count
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|addFacet
specifier|public
name|void
name|addFacet
parameter_list|(
name|String
name|facetName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|StatsValues
argument_list|>
name|facetValues
parameter_list|)
block|{
name|facets
operator|.
name|put
argument_list|(
name|facetName
argument_list|,
name|facetValues
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|getStatsValues
specifier|public
name|NamedList
argument_list|<
name|?
argument_list|>
name|getStatsValues
parameter_list|()
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|res
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|statsField
operator|.
name|includeInResponse
argument_list|(
name|Stat
operator|.
name|min
argument_list|)
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
literal|"min"
argument_list|,
name|min
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|statsField
operator|.
name|includeInResponse
argument_list|(
name|Stat
operator|.
name|max
argument_list|)
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
literal|"max"
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|statsField
operator|.
name|includeInResponse
argument_list|(
name|Stat
operator|.
name|count
argument_list|)
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
literal|"count"
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|statsField
operator|.
name|includeInResponse
argument_list|(
name|Stat
operator|.
name|missing
argument_list|)
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
literal|"missing"
argument_list|,
name|missing
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|statsField
operator|.
name|includeInResponse
argument_list|(
name|Stat
operator|.
name|distinctValues
argument_list|)
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
literal|"distinctValues"
argument_list|,
name|distinctValues
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|statsField
operator|.
name|includeInResponse
argument_list|(
name|Stat
operator|.
name|countDistinct
argument_list|)
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
literal|"countDistinct"
argument_list|,
name|countDistinct
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|statsField
operator|.
name|includeInResponse
argument_list|(
name|Stat
operator|.
name|cardinality
argument_list|)
condition|)
block|{
if|if
condition|(
name|statsField
operator|.
name|getIsShard
argument_list|()
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
literal|"cardinality"
argument_list|,
name|hll
operator|.
name|toBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|res
operator|.
name|add
argument_list|(
literal|"cardinality"
argument_list|,
name|hll
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|addTypeSpecificStats
argument_list|(
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|facets
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// add the facet stats
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|?
argument_list|>
argument_list|>
name|nl
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|StatsValues
argument_list|>
argument_list|>
name|entry
range|:
name|facets
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|?
argument_list|>
argument_list|>
name|nl2
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
name|nl
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|nl2
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|StatsValues
argument_list|>
name|e2
range|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|nl2
operator|.
name|add
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
argument_list|,
name|e2
operator|.
name|getValue
argument_list|()
operator|.
name|getStatsValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|res
operator|.
name|add
argument_list|(
name|FACETS
argument_list|,
name|nl
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|/**    * {@inheritDoc}    */
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|valueSource
operator|==
literal|null
condition|)
block|{
comment|// first time we've collected local values, get the right ValueSource
name|valueSource
operator|=
operator|(
literal|null
operator|==
name|ft
operator|)
condition|?
name|statsField
operator|.
name|getValueSource
argument_list|()
else|:
name|ft
operator|.
name|getValueSource
argument_list|(
name|sf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|vsContext
operator|=
name|ValueSource
operator|.
name|newContext
argument_list|(
name|statsField
operator|.
name|getSearcher
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|values
operator|=
name|valueSource
operator|.
name|getValues
argument_list|(
name|vsContext
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
comment|/**    * Hash function to be used for computing cardinality.    *    * This method will not be called in cases where the user has indicated the values     * are already hashed.  If this method is called, then {@link #hasher} will be non-null,     * and should be used to generate the appropriate hash value.    *    * @see Stat#cardinality    * @see #hasher    */
DECL|method|hash
specifier|protected
specifier|abstract
name|long
name|hash
parameter_list|(
name|T
name|value
parameter_list|)
function_decl|;
comment|/**    * Updates the minimum and maximum statistics based on the given values    *    * @param min    *          Value that the current minimum should be updated against    * @param max    *          Value that the current maximum should be updated against    */
DECL|method|updateMinMax
specifier|protected
specifier|abstract
name|void
name|updateMinMax
parameter_list|(
name|T
name|min
parameter_list|,
name|T
name|max
parameter_list|)
function_decl|;
comment|/**    * Updates the type specific statistics based on the given value    *    * @param value    *          Value the statistics should be updated against    * @param count    *          Number of times the value is being accumulated    */
DECL|method|updateTypeSpecificStats
specifier|protected
specifier|abstract
name|void
name|updateTypeSpecificStats
parameter_list|(
name|T
name|value
parameter_list|,
name|int
name|count
parameter_list|)
function_decl|;
comment|/**    * Updates the type specific statistics based on the values in the given list    *    * @param stv    *          List containing values the current statistics should be updated    *          against    */
DECL|method|updateTypeSpecificStats
specifier|protected
specifier|abstract
name|void
name|updateTypeSpecificStats
parameter_list|(
name|NamedList
name|stv
parameter_list|)
function_decl|;
comment|/**    * Add any type specific statistics to the given NamedList    *    * @param res    *          NamedList to add the type specific statistics too    */
DECL|method|addTypeSpecificStats
specifier|protected
specifier|abstract
name|void
name|addTypeSpecificStats
parameter_list|(
name|NamedList
argument_list|<
name|Object
argument_list|>
name|res
parameter_list|)
function_decl|;
block|}
end_class
begin_comment
comment|/**  * Implementation of StatsValues that supports Double values  */
end_comment
begin_class
DECL|class|NumericStatsValues
class|class
name|NumericStatsValues
extends|extends
name|AbstractStatsValues
argument_list|<
name|Number
argument_list|>
block|{
DECL|field|sum
name|double
name|sum
decl_stmt|;
DECL|field|sumOfSquares
name|double
name|sumOfSquares
decl_stmt|;
DECL|field|tdigest
name|AVLTreeDigest
name|tdigest
decl_stmt|;
DECL|field|minD
name|double
name|minD
decl_stmt|;
comment|// perf optimization, only valid if (null != this.min)
DECL|field|maxD
name|double
name|maxD
decl_stmt|;
comment|// perf optimization, only valid if (null != this.max)
DECL|field|computeSum
specifier|final
specifier|protected
name|boolean
name|computeSum
decl_stmt|;
DECL|field|computeSumOfSquares
specifier|final
specifier|protected
name|boolean
name|computeSumOfSquares
decl_stmt|;
DECL|field|computePercentiles
specifier|final
specifier|protected
name|boolean
name|computePercentiles
decl_stmt|;
DECL|method|NumericStatsValues
specifier|public
name|NumericStatsValues
parameter_list|(
name|StatsField
name|statsField
parameter_list|)
block|{
name|super
argument_list|(
name|statsField
argument_list|)
expr_stmt|;
name|this
operator|.
name|computeSum
operator|=
name|statsField
operator|.
name|calculateStats
argument_list|(
name|Stat
operator|.
name|sum
argument_list|)
expr_stmt|;
name|this
operator|.
name|computeSumOfSquares
operator|=
name|statsField
operator|.
name|calculateStats
argument_list|(
name|Stat
operator|.
name|sumOfSquares
argument_list|)
expr_stmt|;
name|this
operator|.
name|computePercentiles
operator|=
name|statsField
operator|.
name|calculateStats
argument_list|(
name|Stat
operator|.
name|percentiles
argument_list|)
expr_stmt|;
if|if
condition|(
name|computePercentiles
condition|)
block|{
name|tdigest
operator|=
operator|new
name|AVLTreeDigest
argument_list|(
name|statsField
operator|.
name|getTdigestCompression
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|hash
specifier|public
name|long
name|hash
parameter_list|(
name|Number
name|v
parameter_list|)
block|{
comment|// have to use a bit of reflection to ensure good hash values since
comment|// we don't have truely type specific stats
if|if
condition|(
name|v
operator|instanceof
name|Long
condition|)
block|{
return|return
name|hasher
operator|.
name|hashLong
argument_list|(
name|v
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|asLong
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|v
operator|instanceof
name|Integer
condition|)
block|{
return|return
name|hasher
operator|.
name|hashInt
argument_list|(
name|v
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|asLong
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|v
operator|instanceof
name|Double
condition|)
block|{
return|return
name|hasher
operator|.
name|hashLong
argument_list|(
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|v
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|asLong
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|v
operator|instanceof
name|Float
condition|)
block|{
return|return
name|hasher
operator|.
name|hashInt
argument_list|(
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
name|v
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|asLong
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|v
operator|instanceof
name|Byte
condition|)
block|{
return|return
name|hasher
operator|.
name|newHasher
argument_list|()
operator|.
name|putByte
argument_list|(
name|v
operator|.
name|byteValue
argument_list|()
argument_list|)
operator|.
name|hash
argument_list|()
operator|.
name|asLong
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|v
operator|instanceof
name|Short
condition|)
block|{
return|return
name|hasher
operator|.
name|newHasher
argument_list|()
operator|.
name|putShort
argument_list|(
name|v
operator|.
name|shortValue
argument_list|()
argument_list|)
operator|.
name|hash
argument_list|()
operator|.
name|asLong
argument_list|()
return|;
block|}
comment|// else...
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unsupported Numeric Type ("
operator|+
name|v
operator|.
name|getClass
argument_list|()
operator|+
literal|") for hashing: "
operator|+
name|statsField
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|accumulate
specifier|public
name|void
name|accumulate
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
if|if
condition|(
name|values
operator|.
name|exists
argument_list|(
name|docID
argument_list|)
condition|)
block|{
name|Number
name|value
init|=
operator|(
name|Number
operator|)
name|values
operator|.
name|objectVal
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|accumulate
argument_list|(
name|value
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|missing
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|updateTypeSpecificStats
specifier|public
name|void
name|updateTypeSpecificStats
parameter_list|(
name|NamedList
name|stv
parameter_list|)
block|{
if|if
condition|(
name|computeSum
condition|)
block|{
name|sum
operator|+=
operator|(
operator|(
name|Number
operator|)
name|stv
operator|.
name|get
argument_list|(
literal|"sum"
argument_list|)
operator|)
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|computeSumOfSquares
condition|)
block|{
name|sumOfSquares
operator|+=
operator|(
operator|(
name|Number
operator|)
name|stv
operator|.
name|get
argument_list|(
literal|"sumOfSquares"
argument_list|)
operator|)
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|computePercentiles
condition|)
block|{
name|byte
index|[]
name|data
init|=
operator|(
name|byte
index|[]
operator|)
name|stv
operator|.
name|get
argument_list|(
literal|"percentiles"
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|tdigest
operator|.
name|add
argument_list|(
name|AVLTreeDigest
operator|.
name|fromBytes
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|updateTypeSpecificStats
specifier|public
name|void
name|updateTypeSpecificStats
parameter_list|(
name|Number
name|v
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|double
name|value
init|=
name|v
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|computeSumOfSquares
condition|)
block|{
name|sumOfSquares
operator|+=
operator|(
name|value
operator|*
name|value
operator|*
name|count
operator|)
expr_stmt|;
comment|// for std deviation
block|}
if|if
condition|(
name|computeSum
condition|)
block|{
name|sum
operator|+=
name|value
operator|*
name|count
expr_stmt|;
block|}
if|if
condition|(
name|computePercentiles
condition|)
block|{
name|tdigest
operator|.
name|add
argument_list|(
name|value
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|updateMinMax
specifier|protected
name|void
name|updateMinMax
parameter_list|(
name|Number
name|min
parameter_list|,
name|Number
name|max
parameter_list|)
block|{
comment|// we always use the double values, because that way the response Object class is
comment|// consistent regardless of whether we only have 1 value or many that we min/max
comment|//
comment|// TODO: would be nice to have subclasses for each type of Number ... breaks backcompat
if|if
condition|(
name|computeMin
condition|)
block|{
comment|// nested if to encourage JIT to optimize aware final var?
if|if
condition|(
literal|null
operator|!=
name|min
condition|)
block|{
name|double
name|minD
init|=
name|min
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|this
operator|.
name|min
operator|||
name|minD
operator|<
name|this
operator|.
name|minD
condition|)
block|{
comment|// Double for result& cached primitive doulbe to minimize unboxing in future comparisons
name|this
operator|.
name|min
operator|=
name|this
operator|.
name|minD
operator|=
name|minD
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|computeMax
condition|)
block|{
comment|// nested if to encourage JIT to optimize aware final var?
if|if
condition|(
literal|null
operator|!=
name|max
condition|)
block|{
name|double
name|maxD
init|=
name|max
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|this
operator|.
name|max
operator|||
name|this
operator|.
name|maxD
operator|<
name|maxD
condition|)
block|{
comment|// Double for result& cached primitive doulbe to minimize unboxing in future comparisons
name|this
operator|.
name|max
operator|=
name|this
operator|.
name|maxD
operator|=
name|maxD
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Adds sum, sumOfSquares, mean, stddev, and percentiles to the given    * NamedList    *    * @param res    *          NamedList to add the type specific statistics too    */
annotation|@
name|Override
DECL|method|addTypeSpecificStats
specifier|protected
name|void
name|addTypeSpecificStats
parameter_list|(
name|NamedList
argument_list|<
name|Object
argument_list|>
name|res
parameter_list|)
block|{
if|if
condition|(
name|statsField
operator|.
name|includeInResponse
argument_list|(
name|Stat
operator|.
name|sum
argument_list|)
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
literal|"sum"
argument_list|,
name|sum
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|statsField
operator|.
name|includeInResponse
argument_list|(
name|Stat
operator|.
name|sumOfSquares
argument_list|)
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
literal|"sumOfSquares"
argument_list|,
name|sumOfSquares
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|statsField
operator|.
name|includeInResponse
argument_list|(
name|Stat
operator|.
name|mean
argument_list|)
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
literal|"mean"
argument_list|,
name|sum
operator|/
name|count
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|statsField
operator|.
name|includeInResponse
argument_list|(
name|Stat
operator|.
name|stddev
argument_list|)
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
literal|"stddev"
argument_list|,
name|getStandardDeviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|statsField
operator|.
name|includeInResponse
argument_list|(
name|Stat
operator|.
name|percentiles
argument_list|)
condition|)
block|{
if|if
condition|(
name|statsField
operator|.
name|getIsShard
argument_list|()
condition|)
block|{
comment|// as of current t-digest version, smallByteSize() internally does a full conversion in
comment|// order to determine what the size is (can't be precomputed?) .. so rather then
comment|// serialize to a ByteBuffer twice, allocate the max possible size buffer,
comment|// serialize once, and then copy only the byte[] subset that we need, and free up the buffer
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|tdigest
operator|.
name|byteSize
argument_list|()
argument_list|)
decl_stmt|;
comment|// upper bound
name|tdigest
operator|.
name|asSmallBytes
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
literal|"percentiles"
argument_list|,
name|Arrays
operator|.
name|copyOf
argument_list|(
name|buf
operator|.
name|array
argument_list|()
argument_list|,
name|buf
operator|.
name|position
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|percentileNameList
init|=
operator|new
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Double
name|percentile
range|:
name|statsField
operator|.
name|getPercentilesList
argument_list|()
control|)
block|{
comment|// Empty document set case
if|if
condition|(
name|tdigest
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|percentileNameList
operator|.
name|add
argument_list|(
name|percentile
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Double
name|cutoff
init|=
name|tdigest
operator|.
name|quantile
argument_list|(
name|percentile
operator|/
literal|100
argument_list|)
decl_stmt|;
name|percentileNameList
operator|.
name|add
argument_list|(
name|percentile
operator|.
name|toString
argument_list|()
argument_list|,
name|cutoff
argument_list|)
expr_stmt|;
block|}
block|}
name|res
operator|.
name|add
argument_list|(
literal|"percentiles"
argument_list|,
name|percentileNameList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Calculates the standard deviation statistic    *    * @return Standard deviation statistic    */
DECL|method|getStandardDeviation
specifier|private
name|double
name|getStandardDeviation
parameter_list|()
block|{
if|if
condition|(
name|count
operator|<=
literal|1.0D
condition|)
block|{
return|return
literal|0.0D
return|;
block|}
return|return
name|Math
operator|.
name|sqrt
argument_list|(
operator|(
operator|(
name|count
operator|*
name|sumOfSquares
operator|)
operator|-
operator|(
name|sum
operator|*
name|sum
operator|)
operator|)
operator|/
operator|(
name|count
operator|*
operator|(
name|count
operator|-
literal|1.0D
operator|)
operator|)
argument_list|)
return|;
block|}
block|}
end_class
begin_comment
comment|/**  * Implementation of StatsValues that supports EnumField values  */
end_comment
begin_class
DECL|class|EnumStatsValues
class|class
name|EnumStatsValues
extends|extends
name|AbstractStatsValues
argument_list|<
name|EnumFieldValue
argument_list|>
block|{
DECL|method|EnumStatsValues
specifier|public
name|EnumStatsValues
parameter_list|(
name|StatsField
name|statsField
parameter_list|)
block|{
name|super
argument_list|(
name|statsField
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hash
specifier|public
name|long
name|hash
parameter_list|(
name|EnumFieldValue
name|v
parameter_list|)
block|{
return|return
name|hasher
operator|.
name|hashInt
argument_list|(
name|v
operator|.
name|toInt
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|asLong
argument_list|()
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|accumulate
specifier|public
name|void
name|accumulate
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
if|if
condition|(
name|values
operator|.
name|exists
argument_list|(
name|docID
argument_list|)
condition|)
block|{
name|Integer
name|intValue
init|=
operator|(
name|Integer
operator|)
name|values
operator|.
name|objectVal
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|String
name|stringValue
init|=
name|values
operator|.
name|strVal
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|EnumFieldValue
name|enumFieldValue
init|=
operator|new
name|EnumFieldValue
argument_list|(
name|intValue
argument_list|,
name|stringValue
argument_list|)
decl_stmt|;
name|accumulate
argument_list|(
name|enumFieldValue
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|missing
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
DECL|method|updateMinMax
specifier|protected
name|void
name|updateMinMax
parameter_list|(
name|EnumFieldValue
name|min
parameter_list|,
name|EnumFieldValue
name|max
parameter_list|)
block|{
if|if
condition|(
name|computeMin
condition|)
block|{
comment|// nested if to encourage JIT to optimize aware final var?
if|if
condition|(
literal|null
operator|!=
name|min
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|this
operator|.
name|min
operator|||
operator|(
name|min
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|min
argument_list|)
operator|<
literal|0
operator|)
condition|)
block|{
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|computeMax
condition|)
block|{
comment|// nested if to encourage JIT to optimize aware final var?
if|if
condition|(
literal|null
operator|!=
name|max
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|this
operator|.
name|max
operator|||
operator|(
name|max
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|max
argument_list|)
operator|>
literal|0
operator|)
condition|)
block|{
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|updateTypeSpecificStats
specifier|protected
name|void
name|updateTypeSpecificStats
parameter_list|(
name|NamedList
name|stv
parameter_list|)
block|{
comment|// No type specific stats
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|updateTypeSpecificStats
specifier|protected
name|void
name|updateTypeSpecificStats
parameter_list|(
name|EnumFieldValue
name|value
parameter_list|,
name|int
name|count
parameter_list|)
block|{
comment|// No type specific stats
block|}
comment|/**    * Adds no type specific statistics    */
annotation|@
name|Override
DECL|method|addTypeSpecificStats
specifier|protected
name|void
name|addTypeSpecificStats
parameter_list|(
name|NamedList
argument_list|<
name|Object
argument_list|>
name|res
parameter_list|)
block|{
comment|// Add no statistics
block|}
block|}
end_class
begin_comment
comment|/**  * /** Implementation of StatsValues that supports Date values  */
end_comment
begin_class
DECL|class|DateStatsValues
class|class
name|DateStatsValues
extends|extends
name|AbstractStatsValues
argument_list|<
name|Date
argument_list|>
block|{
DECL|field|sum
specifier|private
name|long
name|sum
init|=
literal|0
decl_stmt|;
DECL|field|sumOfSquares
name|double
name|sumOfSquares
init|=
literal|0
decl_stmt|;
DECL|field|computeSum
specifier|final
specifier|protected
name|boolean
name|computeSum
decl_stmt|;
DECL|field|computeSumOfSquares
specifier|final
specifier|protected
name|boolean
name|computeSumOfSquares
decl_stmt|;
DECL|method|DateStatsValues
specifier|public
name|DateStatsValues
parameter_list|(
name|StatsField
name|statsField
parameter_list|)
block|{
name|super
argument_list|(
name|statsField
argument_list|)
expr_stmt|;
name|this
operator|.
name|computeSum
operator|=
name|statsField
operator|.
name|calculateStats
argument_list|(
name|Stat
operator|.
name|sum
argument_list|)
expr_stmt|;
name|this
operator|.
name|computeSumOfSquares
operator|=
name|statsField
operator|.
name|calculateStats
argument_list|(
name|Stat
operator|.
name|sumOfSquares
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hash
specifier|public
name|long
name|hash
parameter_list|(
name|Date
name|v
parameter_list|)
block|{
return|return
name|hasher
operator|.
name|hashLong
argument_list|(
name|v
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|asLong
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|accumulate
specifier|public
name|void
name|accumulate
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
if|if
condition|(
name|values
operator|.
name|exists
argument_list|(
name|docID
argument_list|)
condition|)
block|{
name|accumulate
argument_list|(
operator|(
name|Date
operator|)
name|values
operator|.
name|objectVal
argument_list|(
name|docID
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|missing
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|updateTypeSpecificStats
specifier|protected
name|void
name|updateTypeSpecificStats
parameter_list|(
name|NamedList
name|stv
parameter_list|)
block|{
if|if
condition|(
name|computeSum
condition|)
block|{
name|sum
operator|+=
operator|(
operator|(
name|Date
operator|)
name|stv
operator|.
name|get
argument_list|(
literal|"sum"
argument_list|)
operator|)
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|computeSumOfSquares
condition|)
block|{
name|sumOfSquares
operator|+=
operator|(
operator|(
name|Number
operator|)
name|stv
operator|.
name|get
argument_list|(
literal|"sumOfSquares"
argument_list|)
operator|)
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|updateTypeSpecificStats
specifier|public
name|void
name|updateTypeSpecificStats
parameter_list|(
name|Date
name|v
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|long
name|value
init|=
name|v
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|computeSumOfSquares
condition|)
block|{
name|sumOfSquares
operator|+=
operator|(
operator|(
name|double
operator|)
name|value
operator|*
name|value
operator|*
name|count
operator|)
expr_stmt|;
comment|// for std deviation
block|}
if|if
condition|(
name|computeSum
condition|)
block|{
name|sum
operator|+=
name|value
operator|*
name|count
expr_stmt|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|updateMinMax
specifier|protected
name|void
name|updateMinMax
parameter_list|(
name|Date
name|min
parameter_list|,
name|Date
name|max
parameter_list|)
block|{
if|if
condition|(
name|computeMin
condition|)
block|{
comment|// nested if to encourage JIT to optimize aware final var?
if|if
condition|(
literal|null
operator|!=
name|min
operator|&&
operator|(
name|this
operator|.
name|min
operator|==
literal|null
operator|||
name|this
operator|.
name|min
operator|.
name|after
argument_list|(
name|min
argument_list|)
operator|)
condition|)
block|{
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
block|}
block|}
if|if
condition|(
name|computeMax
condition|)
block|{
comment|// nested if to encourage JIT to optimize aware final var?
if|if
condition|(
literal|null
operator|!=
name|max
operator|&&
operator|(
name|this
operator|.
name|max
operator|==
literal|null
operator|||
name|this
operator|.
name|max
operator|.
name|before
argument_list|(
name|max
argument_list|)
operator|)
condition|)
block|{
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Adds sum and mean statistics to the given NamedList    *    * @param res    *          NamedList to add the type specific statistics too    */
annotation|@
name|Override
DECL|method|addTypeSpecificStats
specifier|protected
name|void
name|addTypeSpecificStats
parameter_list|(
name|NamedList
argument_list|<
name|Object
argument_list|>
name|res
parameter_list|)
block|{
if|if
condition|(
name|statsField
operator|.
name|includeInResponse
argument_list|(
name|Stat
operator|.
name|sum
argument_list|)
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
literal|"sum"
argument_list|,
operator|new
name|Date
argument_list|(
name|sum
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|statsField
operator|.
name|includeInResponse
argument_list|(
name|Stat
operator|.
name|mean
argument_list|)
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
literal|"mean"
argument_list|,
operator|(
name|count
operator|>
literal|0
operator|)
condition|?
operator|new
name|Date
argument_list|(
name|sum
operator|/
name|count
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|statsField
operator|.
name|includeInResponse
argument_list|(
name|Stat
operator|.
name|sumOfSquares
argument_list|)
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
literal|"sumOfSquares"
argument_list|,
name|sumOfSquares
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|statsField
operator|.
name|includeInResponse
argument_list|(
name|Stat
operator|.
name|stddev
argument_list|)
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
literal|"stddev"
argument_list|,
name|getStandardDeviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Calculates the standard deviation. For dates, this is really the MS    * deviation    *    * @return Standard deviation statistic    */
DECL|method|getStandardDeviation
specifier|private
name|double
name|getStandardDeviation
parameter_list|()
block|{
if|if
condition|(
name|count
operator|<=
literal|1
condition|)
block|{
return|return
literal|0.0D
return|;
block|}
return|return
name|Math
operator|.
name|sqrt
argument_list|(
operator|(
operator|(
name|count
operator|*
name|sumOfSquares
operator|)
operator|-
operator|(
name|sum
operator|*
operator|(
name|double
operator|)
name|sum
operator|)
operator|)
operator|/
operator|(
name|count
operator|*
operator|(
name|count
operator|-
literal|1.0D
operator|)
operator|)
argument_list|)
return|;
block|}
block|}
end_class
begin_comment
comment|/**  * Implementation of StatsValues that supports String values  */
end_comment
begin_class
DECL|class|StringStatsValues
class|class
name|StringStatsValues
extends|extends
name|AbstractStatsValues
argument_list|<
name|String
argument_list|>
block|{
DECL|method|StringStatsValues
specifier|public
name|StringStatsValues
parameter_list|(
name|StatsField
name|statsField
parameter_list|)
block|{
name|super
argument_list|(
name|statsField
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hash
specifier|public
name|long
name|hash
parameter_list|(
name|String
name|v
parameter_list|)
block|{
return|return
name|hasher
operator|.
name|hashString
argument_list|(
name|v
argument_list|)
operator|.
name|asLong
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|accumulate
specifier|public
name|void
name|accumulate
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
if|if
condition|(
name|values
operator|.
name|exists
argument_list|(
name|docID
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|values
operator|.
name|strVal
argument_list|(
name|docID
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|accumulate
argument_list|(
name|value
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|missing
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|missing
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|updateTypeSpecificStats
specifier|protected
name|void
name|updateTypeSpecificStats
parameter_list|(
name|NamedList
name|stv
parameter_list|)
block|{
comment|// No type specific stats
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|updateTypeSpecificStats
specifier|protected
name|void
name|updateTypeSpecificStats
parameter_list|(
name|String
name|value
parameter_list|,
name|int
name|count
parameter_list|)
block|{
comment|// No type specific stats
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|updateMinMax
specifier|protected
name|void
name|updateMinMax
parameter_list|(
name|String
name|min
parameter_list|,
name|String
name|max
parameter_list|)
block|{
if|if
condition|(
name|computeMin
condition|)
block|{
comment|// nested if to encourage JIT to optimize aware final var?
name|this
operator|.
name|min
operator|=
name|min
argument_list|(
name|this
operator|.
name|min
argument_list|,
name|min
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|computeMax
condition|)
block|{
comment|// nested if to encourage JIT to optimize aware final var?
name|this
operator|.
name|max
operator|=
name|max
argument_list|(
name|this
operator|.
name|max
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Adds no type specific statistics    */
annotation|@
name|Override
DECL|method|addTypeSpecificStats
specifier|protected
name|void
name|addTypeSpecificStats
parameter_list|(
name|NamedList
argument_list|<
name|Object
argument_list|>
name|res
parameter_list|)
block|{
comment|// Add no statistics
block|}
comment|/**    * Determines which of the given Strings is the maximum, as computed by    * {@link String#compareTo(String)}    *    * @param str1    *          String to compare against b    * @param str2    *          String compared against a    * @return str1 if it is considered greater by    *         {@link String#compareTo(String)}, str2 otherwise    */
DECL|method|max
specifier|private
specifier|static
name|String
name|max
parameter_list|(
name|String
name|str1
parameter_list|,
name|String
name|str2
parameter_list|)
block|{
if|if
condition|(
name|str1
operator|==
literal|null
condition|)
block|{
return|return
name|str2
return|;
block|}
elseif|else
if|if
condition|(
name|str2
operator|==
literal|null
condition|)
block|{
return|return
name|str1
return|;
block|}
return|return
operator|(
name|str1
operator|.
name|compareTo
argument_list|(
name|str2
argument_list|)
operator|>
literal|0
operator|)
condition|?
name|str1
else|:
name|str2
return|;
block|}
comment|/**    * Determines which of the given Strings is the minimum, as computed by    * {@link String#compareTo(String)}    *    * @param str1    *          String to compare against b    * @param str2    *          String compared against a    * @return str1 if it is considered less by {@link String#compareTo(String)},    *         str2 otherwise    */
DECL|method|min
specifier|private
specifier|static
name|String
name|min
parameter_list|(
name|String
name|str1
parameter_list|,
name|String
name|str2
parameter_list|)
block|{
if|if
condition|(
name|str1
operator|==
literal|null
condition|)
block|{
return|return
name|str2
return|;
block|}
elseif|else
if|if
condition|(
name|str2
operator|==
literal|null
condition|)
block|{
return|return
name|str1
return|;
block|}
return|return
operator|(
name|str1
operator|.
name|compareTo
argument_list|(
name|str2
argument_list|)
operator|<
literal|0
operator|)
condition|?
name|str1
else|:
name|str2
return|;
block|}
block|}
end_class
end_unit
