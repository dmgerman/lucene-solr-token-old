begin_unit
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|SuggestWord
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|SpellCheckResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|spelling
operator|.
name|SpellCheckCollation
import|;
end_import
begin_class
DECL|class|SpellCheckMergeData
specifier|public
class|class
name|SpellCheckMergeData
block|{
comment|//original token -> corresponding Suggestion object (keep track of start,end)
DECL|field|origVsSuggestion
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SpellCheckResponse
operator|.
name|Suggestion
argument_list|>
name|origVsSuggestion
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SpellCheckResponse
operator|.
name|Suggestion
argument_list|>
argument_list|()
decl_stmt|;
comment|// original token string -> summed up frequency
DECL|field|origVsFreq
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|origVsFreq
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|// original token string -> # of shards reporting it as misspelled
DECL|field|origVsShards
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|origVsShards
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|// original token string -> set of alternatives
comment|// must preserve order because collation algorithm can only work in-order
DECL|field|origVsSuggested
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|origVsSuggested
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// alternative string -> corresponding SuggestWord object
DECL|field|suggestedVsWord
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SuggestWord
argument_list|>
name|suggestedVsWord
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SuggestWord
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|collations
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SpellCheckCollation
argument_list|>
name|collations
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SpellCheckCollation
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|totalNumberShardResponses
specifier|public
name|int
name|totalNumberShardResponses
init|=
literal|0
decl_stmt|;
block|}
end_class
end_unit
