begin_unit
begin_package
DECL|package|org.apache.solr.handler.admin
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|Overseer
operator|.
name|QUEUE_OPERATION
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionProcessor
operator|.
name|ASYNC
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionProcessor
operator|.
name|COLL_CONF
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionProcessor
operator|.
name|CREATE_NODE_SET
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionProcessor
operator|.
name|SHARD_UNIQUE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionProcessor
operator|.
name|CREATE_NODE_SET_SHUFFLE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionProcessor
operator|.
name|NUM_SLICES
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionProcessor
operator|.
name|ONLY_ACTIVE_NODES
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionProcessor
operator|.
name|ONLY_IF_DOWN
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionProcessor
operator|.
name|REPLICATION_FACTOR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionProcessor
operator|.
name|REQUESTID
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionProcessor
operator|.
name|ROUTER
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionProcessor
operator|.
name|SHARDS_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
operator|.
name|makeMap
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|ACTIVE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|BASE_URL_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|COLLECTION_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|LEADER_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|PROPERTY_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|PROPERTY_VALUE_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|MAX_SHARDS_PER_NODE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|AUTO_ADD_REPLICAS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|REPLICA_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|MAX_AT_ONCE_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|MAX_WAIT_SECONDS_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|STATE_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|ADDROLE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|ADDREPLICAPROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|BALANCESHARDUNIQUE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CLUSTERPROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CREATE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CREATEALIAS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CREATESHARD
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|DELETE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|DELETEALIAS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|DELETEREPLICA
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|DELETEREPLICAPROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|DELETESHARD
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|MIGRATE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|OVERSEERSTATUS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|REBALANCELEADERS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|RELOAD
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|REMOVEROLE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|SPLITSHARD
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
operator|.
name|RequestSyncShard
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|DistributedQueue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|DistributedQueue
operator|.
name|QueueEvent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|Overseer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionProcessor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerSolrResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
operator|.
name|SliceMutator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ImplicitDocRouter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ShardParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|BlobHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|RequestHandlerBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import
begin_class
DECL|class|CollectionsHandler
specifier|public
class|class
name|CollectionsHandler
extends|extends
name|RequestHandlerBase
block|{
DECL|field|log
specifier|protected
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CollectionsHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|coreContainer
specifier|protected
specifier|final
name|CoreContainer
name|coreContainer
decl_stmt|;
DECL|method|CollectionsHandler
specifier|public
name|CollectionsHandler
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
comment|// Unlike most request handlers, CoreContainer initialization
comment|// should happen in the constructor...
name|this
operator|.
name|coreContainer
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Overloaded ctor to inject CoreContainer into the handler.    *    * @param coreContainer Core Container of the solr webapp installed.    */
DECL|method|CollectionsHandler
specifier|public
name|CollectionsHandler
parameter_list|(
specifier|final
name|CoreContainer
name|coreContainer
parameter_list|)
block|{
name|this
operator|.
name|coreContainer
operator|=
name|coreContainer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|final
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{    }
comment|/**    * The instance of CoreContainer this handler handles. This should be the CoreContainer instance that created this    * handler.    *    * @return a CoreContainer instance    */
DECL|method|getCoreContainer
specifier|public
name|CoreContainer
name|getCoreContainer
parameter_list|()
block|{
return|return
name|this
operator|.
name|coreContainer
return|;
block|}
annotation|@
name|Override
DECL|method|handleRequestBody
specifier|public
name|void
name|handleRequestBody
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Make sure the cores is enabled
name|CoreContainer
name|cores
init|=
name|getCoreContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|cores
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Core container instance missing"
argument_list|)
throw|;
block|}
comment|// Make sure that the core is ZKAware
if|if
condition|(
operator|!
name|cores
operator|.
name|isZooKeeperAware
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Solr instance is not running in SolrCloud mode."
argument_list|)
throw|;
block|}
comment|// Pick the action
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|CollectionAction
name|action
init|=
literal|null
decl_stmt|;
name|String
name|a
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|action
operator|=
name|CollectionAction
operator|.
name|get
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown action: "
operator|+
name|a
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|CREATE
case|:
block|{
name|this
operator|.
name|handleCreateAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DELETE
case|:
block|{
name|this
operator|.
name|handleDeleteAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RELOAD
case|:
block|{
name|this
operator|.
name|handleReloadAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SYNCSHARD
case|:
block|{
name|this
operator|.
name|handleSyncShardAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|CREATEALIAS
case|:
block|{
name|this
operator|.
name|handleCreateAliasAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DELETEALIAS
case|:
block|{
name|this
operator|.
name|handleDeleteAliasAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SPLITSHARD
case|:
block|{
name|this
operator|.
name|handleSplitShardAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DELETESHARD
case|:
block|{
name|this
operator|.
name|handleDeleteShardAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|CREATESHARD
case|:
block|{
name|this
operator|.
name|handleCreateShard
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DELETEREPLICA
case|:
block|{
name|this
operator|.
name|handleRemoveReplica
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MIGRATE
case|:
block|{
name|this
operator|.
name|handleMigrate
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ADDROLE
case|:
block|{
name|handleRole
argument_list|(
name|ADDROLE
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|REMOVEROLE
case|:
block|{
name|handleRole
argument_list|(
name|REMOVEROLE
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|CLUSTERPROP
case|:
block|{
name|this
operator|.
name|handleProp
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ADDREPLICA
case|:
block|{
name|this
operator|.
name|handleAddReplica
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|REQUESTSTATUS
case|:
block|{
name|this
operator|.
name|handleRequestStatus
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OVERSEERSTATUS
case|:
block|{
name|this
operator|.
name|handleOverseerStatus
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LIST
case|:
block|{
name|this
operator|.
name|handleListAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|CLUSTERSTATUS
case|:
block|{
name|this
operator|.
name|handleClusterStatus
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ADDREPLICAPROP
case|:
block|{
name|this
operator|.
name|handleAddReplicaProp
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DELETEREPLICAPROP
case|:
block|{
name|this
operator|.
name|handleDeleteReplicaProp
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|BALANCESHARDUNIQUE
case|:
block|{
name|this
operator|.
name|handleBalanceShardUnique
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
break|break;
block|}
comment|//      case REBALANCELEADERS: {
comment|//        this.handleBalanceLeaders(req, rsp);
comment|//        break;
comment|//      }
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown action: "
operator|+
name|action
argument_list|)
throw|;
block|}
block|}
name|rsp
operator|.
name|setHttpCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|handleBalanceLeaders
specifier|private
name|void
name|handleBalanceLeaders
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|check
argument_list|(
name|COLLECTION_PROP
argument_list|)
expr_stmt|;
name|String
name|collectionName
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|collectionName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"The "
operator|+
name|COLLECTION_PROP
operator|+
literal|" is required for the REASSIGNLEADERS command."
argument_list|)
argument_list|)
throw|;
block|}
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|updateClusterState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|DocCollection
name|dc
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Collection '"
operator|+
name|collectionName
operator|+
literal|"' does not exist, no action taken."
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|current
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|max
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getInt
argument_list|(
name|MAX_AT_ONCE_PROP
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
if|if
condition|(
name|max
operator|<=
literal|0
condition|)
name|max
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
name|int
name|maxWaitSecs
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getInt
argument_list|(
name|MAX_WAIT_SECONDS_PROP
argument_list|,
literal|60
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|results
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|SolrQueryResponse
name|rspIgnore
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
specifier|final
name|String
name|inactivePreferreds
init|=
literal|"inactivePreferreds"
decl_stmt|;
specifier|final
name|String
name|alreadyLeaders
init|=
literal|"alreadyLeaders"
decl_stmt|;
name|boolean
name|keepGoing
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|dc
operator|.
name|getSlices
argument_list|()
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
comment|// Tell the replica to become the leader if we're the preferred leader AND active AND not the leader already
if|if
condition|(
name|replica
operator|.
name|getBool
argument_list|(
name|SliceMutator
operator|.
name|PREFERRED_LEADER_PROP
argument_list|,
literal|false
argument_list|)
operator|==
literal|false
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
name|replica
operator|.
name|getStr
argument_list|(
name|STATE_PROP
argument_list|)
argument_list|,
name|ACTIVE
argument_list|)
operator|==
literal|false
condition|)
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|inactives
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|results
operator|.
name|get
argument_list|(
name|inactivePreferreds
argument_list|)
decl_stmt|;
if|if
condition|(
name|inactives
operator|==
literal|null
condition|)
block|{
name|inactives
operator|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|inactivePreferreds
argument_list|,
name|inactives
argument_list|)
expr_stmt|;
block|}
name|NamedList
argument_list|<
name|Object
argument_list|>
name|res
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|res
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
literal|"skipped"
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
literal|"msg"
argument_list|,
literal|"Node is a referredLeader, but it's inactive. Skipping"
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
literal|"nodeName"
argument_list|,
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|inactives
operator|.
name|add
argument_list|(
name|replica
operator|.
name|getName
argument_list|()
argument_list|,
name|res
argument_list|)
expr_stmt|;
break|break;
comment|// Don't try to assign if we're not active!
block|}
comment|// OK, we're the one, get in the queue to become the leader.
if|if
condition|(
name|replica
operator|.
name|getBool
argument_list|(
name|LEADER_PROP
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|noops
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|results
operator|.
name|get
argument_list|(
name|alreadyLeaders
argument_list|)
decl_stmt|;
if|if
condition|(
name|noops
operator|==
literal|null
condition|)
block|{
name|noops
operator|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|alreadyLeaders
argument_list|,
name|noops
argument_list|)
expr_stmt|;
block|}
name|NamedList
argument_list|<
name|Object
argument_list|>
name|res
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|res
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
literal|"success"
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
literal|"msg"
argument_list|,
literal|"Already leader"
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
literal|"nodeName"
argument_list|,
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|noops
operator|.
name|add
argument_list|(
name|replica
operator|.
name|getName
argument_list|()
argument_list|,
name|res
argument_list|)
expr_stmt|;
break|break;
comment|// already the leader, do nothing.
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|REBALANCELEADERS
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|SHARD_ID_PROP
argument_list|,
name|slice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|BASE_URL_PROP
argument_list|,
name|replica
operator|.
name|get
argument_list|(
name|BASE_URL_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|coreName
init|=
operator|(
name|String
operator|)
name|replica
operator|.
name|get
argument_list|(
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
comment|// Put it in the waiting list.
name|String
name|asyncId
init|=
name|REBALANCELEADERS
operator|.
name|toLower
argument_list|()
operator|+
literal|"_"
operator|+
name|coreName
decl_stmt|;
name|current
operator|.
name|put
argument_list|(
name|asyncId
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Collection: '%s', Shard: '%s', Core: '%s', BaseUrl: '%s'"
argument_list|,
name|collectionName
argument_list|,
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|coreName
argument_list|,
name|replica
operator|.
name|get
argument_list|(
name|BASE_URL_PROP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CORE_NAME_PROP
argument_list|,
name|coreName
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|ASYNC
argument_list|,
name|asyncId
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Queueing collection '"
operator|+
name|collectionName
operator|+
literal|"' slice '"
operator|+
name|slice
operator|.
name|getName
argument_list|()
operator|+
literal|"' replica '"
operator|+
name|coreName
operator|+
literal|"' to become leader."
argument_list|)
expr_stmt|;
name|handleResponse
argument_list|(
name|REBALANCELEADERS
operator|.
name|toLower
argument_list|()
argument_list|,
name|m
argument_list|,
name|rspIgnore
argument_list|)
expr_stmt|;
comment|// Want to construct my own response here.
break|break;
comment|// Done with this slice, skip the rest of the replicas.
block|}
if|if
condition|(
name|current
operator|.
name|size
argument_list|()
operator|==
name|max
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Queued "
operator|+
name|max
operator|+
literal|" leader reassgnments, waiting for some to complete."
argument_list|)
expr_stmt|;
name|keepGoing
operator|=
name|waitForLeaderChange
argument_list|(
name|current
argument_list|,
name|maxWaitSecs
argument_list|,
literal|false
argument_list|,
name|results
argument_list|)
expr_stmt|;
if|if
condition|(
name|keepGoing
operator|==
literal|false
condition|)
block|{
break|break;
comment|// If we've waited longer than specified, don't continue to wait!
block|}
block|}
block|}
if|if
condition|(
name|keepGoing
operator|==
literal|true
condition|)
block|{
name|keepGoing
operator|=
name|waitForLeaderChange
argument_list|(
name|current
argument_list|,
name|maxWaitSecs
argument_list|,
literal|true
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|keepGoing
operator|==
literal|true
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"All leader reassignments completed."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exceeded specified timeout of ."
operator|+
name|maxWaitSecs
operator|+
literal|"' all leaders may not have been reassigned"
argument_list|)
expr_stmt|;
block|}
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|addAll
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
comment|// currentAsyncIds - map of request IDs and reporting data (value)
comment|// maxWaitSecs - How long are we going to wait? Defaults to 30 seconds.
comment|// waitForAll - if true, do not return until all assignments have been made.
comment|// results - a place to stash results for reporting back to the user.
comment|//
DECL|method|waitForLeaderChange
specifier|private
name|boolean
name|waitForLeaderChange
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|currentAsyncIds
parameter_list|,
specifier|final
name|int
name|maxWaitSecs
parameter_list|,
name|Boolean
name|waitForAll
parameter_list|,
name|NamedList
argument_list|<
name|Object
argument_list|>
name|results
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|currentAsyncIds
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|true
return|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|maxWaitSecs
operator|*
literal|10
condition|;
operator|++
name|idx
control|)
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|iter
init|=
name|currentAsyncIds
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|foundChange
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|asyncId
init|=
name|pair
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getOverseerFailureMap
argument_list|()
operator|.
name|contains
argument_list|(
name|asyncId
argument_list|)
condition|)
block|{
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getOverseerFailureMap
argument_list|()
operator|.
name|remove
argument_list|(
name|asyncId
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|fails
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|results
operator|.
name|get
argument_list|(
literal|"failures"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fails
operator|==
literal|null
condition|)
block|{
name|fails
operator|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"failures"
argument_list|,
name|fails
argument_list|)
expr_stmt|;
block|}
name|NamedList
argument_list|<
name|Object
argument_list|>
name|res
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|res
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
literal|"failed"
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
literal|"msg"
argument_list|,
literal|"Failed to assign '"
operator|+
name|pair
operator|.
name|getValue
argument_list|()
operator|+
literal|"' to be leader"
argument_list|)
expr_stmt|;
name|fails
operator|.
name|add
argument_list|(
name|asyncId
operator|.
name|substring
argument_list|(
name|REBALANCELEADERS
operator|.
name|toLower
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|foundChange
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getOverseerCompletedMap
argument_list|()
operator|.
name|contains
argument_list|(
name|asyncId
argument_list|)
condition|)
block|{
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getOverseerCompletedMap
argument_list|()
operator|.
name|remove
argument_list|(
name|asyncId
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|successes
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|results
operator|.
name|get
argument_list|(
literal|"successes"
argument_list|)
decl_stmt|;
if|if
condition|(
name|successes
operator|==
literal|null
condition|)
block|{
name|successes
operator|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"successes"
argument_list|,
name|successes
argument_list|)
expr_stmt|;
block|}
name|NamedList
argument_list|<
name|Object
argument_list|>
name|res
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|res
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
literal|"success"
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
literal|"msg"
argument_list|,
literal|"Assigned '"
operator|+
name|pair
operator|.
name|getValue
argument_list|()
operator|+
literal|"' to be leader"
argument_list|)
expr_stmt|;
name|successes
operator|.
name|add
argument_list|(
name|asyncId
operator|.
name|substring
argument_list|(
name|REBALANCELEADERS
operator|.
name|toLower
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|foundChange
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// We're done if we're processing a few at a time or all requests are processed.
if|if
condition|(
operator|(
name|foundChange
operator|&&
name|waitForAll
operator|==
literal|false
operator|)
operator|||
name|currentAsyncIds
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|//TODO: Is there a better thing to do than sleep here?
block|}
return|return
literal|false
return|;
block|}
DECL|method|handleAddReplicaProp
specifier|private
name|void
name|handleAddReplicaProp
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|check
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|PROPERTY_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|REPLICA_PROP
argument_list|,
name|PROPERTY_VALUE_PROP
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|ADDREPLICAPROP
operator|.
name|toLower
argument_list|()
argument_list|)
decl_stmt|;
name|copyIfNotNull
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
argument_list|,
name|map
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|REPLICA_PROP
argument_list|,
name|PROPERTY_PROP
argument_list|,
name|SHARD_UNIQUE
argument_list|,
name|PROPERTY_VALUE_PROP
argument_list|)
expr_stmt|;
name|String
name|property
init|=
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
name|PROPERTY_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|startsWith
argument_list|(
name|OverseerCollectionProcessor
operator|.
name|COLL_PROP_PREFIX
argument_list|)
operator|==
literal|false
condition|)
block|{
name|property
operator|=
name|OverseerCollectionProcessor
operator|.
name|COLL_PROP_PREFIX
operator|+
name|property
expr_stmt|;
block|}
name|boolean
name|uniquePerSlice
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
name|SHARD_UNIQUE
argument_list|)
argument_list|)
decl_stmt|;
comment|// Check if we're trying to set a property with parameters that allow us to set the property on multiple replicas
comment|// in a slice on properties that are known to only be one-per-slice and error out if so.
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
name|SHARD_UNIQUE
argument_list|)
argument_list|)
operator|&&
name|SliceMutator
operator|.
name|SLICE_UNIQUE_BOOLEAN_PROPERTIES
operator|.
name|contains
argument_list|(
name|property
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
operator|&&
name|uniquePerSlice
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Overseer replica property command received for property "
operator|+
name|property
operator|+
literal|" with the "
operator|+
name|SHARD_UNIQUE
operator|+
literal|" parameter set to something other than 'true'. No action taken."
argument_list|)
throw|;
block|}
name|handleResponse
argument_list|(
name|ADDREPLICAPROP
operator|.
name|toLower
argument_list|()
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|map
argument_list|)
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
DECL|method|handleDeleteReplicaProp
specifier|private
name|void
name|handleDeleteReplicaProp
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|check
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|PROPERTY_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|REPLICA_PROP
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|DELETEREPLICAPROP
operator|.
name|toLower
argument_list|()
argument_list|)
decl_stmt|;
name|copyIfNotNull
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
argument_list|,
name|map
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|REPLICA_PROP
argument_list|,
name|PROPERTY_PROP
argument_list|)
expr_stmt|;
name|handleResponse
argument_list|(
name|DELETEREPLICAPROP
operator|.
name|toLower
argument_list|()
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|map
argument_list|)
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
DECL|method|handleBalanceShardUnique
specifier|private
name|void
name|handleBalanceShardUnique
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|check
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|PROPERTY_PROP
argument_list|)
expr_stmt|;
name|Boolean
name|shardUnique
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|SHARD_UNIQUE
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|prop
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|PROPERTY_PROP
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|startsWith
argument_list|(
name|prop
argument_list|,
name|OverseerCollectionProcessor
operator|.
name|COLL_PROP_PREFIX
argument_list|)
operator|==
literal|false
condition|)
block|{
name|prop
operator|=
name|OverseerCollectionProcessor
operator|.
name|COLL_PROP_PREFIX
operator|+
name|prop
expr_stmt|;
block|}
if|if
condition|(
name|shardUnique
operator|==
literal|false
operator|&&
name|SliceMutator
operator|.
name|SLICE_UNIQUE_BOOLEAN_PROPERTIES
operator|.
name|contains
argument_list|(
name|prop
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Balancing properties amongst replicas in a slice requires that"
operator|+
literal|" the property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'. "
operator|+
literal|" Property: "
operator|+
name|prop
operator|+
literal|" shardUnique: "
operator|+
name|Boolean
operator|.
name|toString
argument_list|(
name|shardUnique
argument_list|)
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|BALANCESHARDUNIQUE
operator|.
name|toLower
argument_list|()
argument_list|)
decl_stmt|;
name|copyIfNotNull
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
argument_list|,
name|map
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|PROPERTY_PROP
argument_list|,
name|ONLY_ACTIVE_NODES
argument_list|,
name|SHARD_UNIQUE
argument_list|)
expr_stmt|;
name|handleResponse
argument_list|(
name|BALANCESHARDUNIQUE
operator|.
name|toLower
argument_list|()
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|map
argument_list|)
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
DECL|method|handleOverseerStatus
specifier|private
name|void
name|handleOverseerStatus
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OVERSEERSTATUS
operator|.
name|toLower
argument_list|()
argument_list|)
decl_stmt|;
name|handleResponse
argument_list|(
name|OVERSEERSTATUS
operator|.
name|toLower
argument_list|()
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
DECL|method|handleProp
specifier|private
name|void
name|handleProp
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|check
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|OverseerCollectionProcessor
operator|.
name|KNOWN_CLUSTER_PROPS
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Not a known cluster property "
operator|+
name|name
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|CLUSTERPROP
operator|.
name|toLower
argument_list|()
argument_list|)
decl_stmt|;
name|copyIfNotNull
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
argument_list|,
name|props
argument_list|,
literal|"name"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|props
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|KNOWN_ROLES
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|KNOWN_ROLES
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"overseer"
argument_list|)
decl_stmt|;
DECL|method|handleRole
specifier|private
name|void
name|handleRole
parameter_list|(
name|CollectionAction
name|action
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|check
argument_list|(
literal|"role"
argument_list|,
literal|"node"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|action
operator|.
name|toLower
argument_list|()
argument_list|)
decl_stmt|;
name|copyIfNotNull
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
argument_list|,
name|map
argument_list|,
literal|"role"
argument_list|,
literal|"node"
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|map
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|KNOWN_ROLES
operator|.
name|contains
argument_list|(
name|m
operator|.
name|getStr
argument_list|(
literal|"role"
argument_list|)
argument_list|)
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown role. Supported roles are ,"
operator|+
name|KNOWN_ROLES
argument_list|)
throw|;
name|handleResponse
argument_list|(
name|action
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
name|m
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
DECL|field|DEFAULT_ZK_TIMEOUT
specifier|public
specifier|static
name|long
name|DEFAULT_ZK_TIMEOUT
init|=
literal|180
operator|*
literal|1000
decl_stmt|;
DECL|method|handleRequestStatus
specifier|private
name|void
name|handleRequestStatus
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"REQUESTSTATUS action invoked: "
operator|+
name|req
operator|.
name|getParamString
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|check
argument_list|(
name|REQUESTID
argument_list|)
expr_stmt|;
name|String
name|requestId
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|REQUESTID
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestId
operator|.
name|equals
argument_list|(
literal|"-1"
argument_list|)
condition|)
block|{
comment|// Special taskId (-1), clears up the request state maps.
if|if
condition|(
name|requestId
operator|.
name|equals
argument_list|(
literal|"-1"
argument_list|)
condition|)
block|{
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getOverseerCompletedMap
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getOverseerFailureMap
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|results
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getOverseerCompletedMap
argument_list|()
operator|.
name|contains
argument_list|(
name|requestId
argument_list|)
condition|)
block|{
name|SimpleOrderedMap
name|success
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|success
operator|.
name|add
argument_list|(
literal|"state"
argument_list|,
literal|"completed"
argument_list|)
expr_stmt|;
name|success
operator|.
name|add
argument_list|(
literal|"msg"
argument_list|,
literal|"found "
operator|+
name|requestId
operator|+
literal|" in completed tasks"
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getOverseerFailureMap
argument_list|()
operator|.
name|contains
argument_list|(
name|requestId
argument_list|)
condition|)
block|{
name|SimpleOrderedMap
name|success
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|success
operator|.
name|add
argument_list|(
literal|"state"
argument_list|,
literal|"failed"
argument_list|)
expr_stmt|;
name|success
operator|.
name|add
argument_list|(
literal|"msg"
argument_list|,
literal|"found "
operator|+
name|requestId
operator|+
literal|" in failed tasks"
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getOverseerRunningMap
argument_list|()
operator|.
name|contains
argument_list|(
name|requestId
argument_list|)
condition|)
block|{
name|SimpleOrderedMap
name|success
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|success
operator|.
name|add
argument_list|(
literal|"state"
argument_list|,
literal|"running"
argument_list|)
expr_stmt|;
name|success
operator|.
name|add
argument_list|(
literal|"msg"
argument_list|,
literal|"found "
operator|+
name|requestId
operator|+
literal|" in running tasks"
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|overseerCollectionQueueContains
argument_list|(
name|requestId
argument_list|)
condition|)
block|{
name|SimpleOrderedMap
name|success
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|success
operator|.
name|add
argument_list|(
literal|"state"
argument_list|,
literal|"submitted"
argument_list|)
expr_stmt|;
name|success
operator|.
name|add
argument_list|(
literal|"msg"
argument_list|,
literal|"found "
operator|+
name|requestId
operator|+
literal|" in submitted tasks"
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SimpleOrderedMap
name|failure
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|failure
operator|.
name|add
argument_list|(
literal|"state"
argument_list|,
literal|"notfound"
argument_list|)
expr_stmt|;
name|failure
operator|.
name|add
argument_list|(
literal|"msg"
argument_list|,
literal|"Did not find taskid ["
operator|+
name|requestId
operator|+
literal|"] in any tasks queue"
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
name|failure
argument_list|)
expr_stmt|;
block|}
name|SolrResponse
name|response
init|=
operator|new
name|OverseerSolrResponse
argument_list|(
name|results
argument_list|)
decl_stmt|;
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|addAll
argument_list|(
name|response
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|overseerCollectionQueueContains
specifier|private
name|boolean
name|overseerCollectionQueueContains
parameter_list|(
name|String
name|asyncId
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|DistributedQueue
name|collectionQueue
init|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getOverseerCollectionQueue
argument_list|()
decl_stmt|;
return|return
name|collectionQueue
operator|.
name|containsTaskWithRequestId
argument_list|(
name|asyncId
argument_list|)
return|;
block|}
DECL|method|handleResponse
specifier|private
name|void
name|handleResponse
parameter_list|(
name|String
name|operation
parameter_list|,
name|ZkNodeProps
name|m
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|handleResponse
argument_list|(
name|operation
argument_list|,
name|m
argument_list|,
name|rsp
argument_list|,
name|DEFAULT_ZK_TIMEOUT
argument_list|)
expr_stmt|;
block|}
DECL|method|handleResponse
specifier|private
name|void
name|handleResponse
parameter_list|(
name|String
name|operation
parameter_list|,
name|ZkNodeProps
name|m
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|long
name|time
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|containsKey
argument_list|(
name|ASYNC
argument_list|)
operator|&&
name|m
operator|.
name|get
argument_list|(
name|ASYNC
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|asyncId
init|=
name|m
operator|.
name|getStr
argument_list|(
name|ASYNC
argument_list|)
decl_stmt|;
if|if
condition|(
name|asyncId
operator|.
name|equals
argument_list|(
literal|"-1"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"requestid can not be -1. It is reserved for cleanup purposes."
argument_list|)
throw|;
block|}
name|NamedList
argument_list|<
name|String
argument_list|>
name|r
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getOverseerCompletedMap
argument_list|()
operator|.
name|contains
argument_list|(
name|asyncId
argument_list|)
operator|||
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getOverseerFailureMap
argument_list|()
operator|.
name|contains
argument_list|(
name|asyncId
argument_list|)
operator|||
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getOverseerRunningMap
argument_list|()
operator|.
name|contains
argument_list|(
name|asyncId
argument_list|)
operator|||
name|overseerCollectionQueueContains
argument_list|(
name|asyncId
argument_list|)
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
literal|"error"
argument_list|,
literal|"Task with the same requestid already exists."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getOverseerCollectionQueue
argument_list|()
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|add
argument_list|(
name|CoreAdminParams
operator|.
name|REQUESTID
argument_list|,
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
name|ASYNC
argument_list|)
argument_list|)
expr_stmt|;
name|SolrResponse
name|response
init|=
operator|new
name|OverseerSolrResponse
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|addAll
argument_list|(
name|response
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|QueueEvent
name|event
init|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getOverseerCollectionQueue
argument_list|()
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|,
name|timeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getBytes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SolrResponse
name|response
init|=
name|SolrResponse
operator|.
name|deserialize
argument_list|(
name|event
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|addAll
argument_list|(
name|response
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
name|SimpleOrderedMap
name|exp
init|=
operator|(
name|SimpleOrderedMap
operator|)
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
if|if
condition|(
name|exp
operator|!=
literal|null
condition|)
block|{
name|Integer
name|code
init|=
operator|(
name|Integer
operator|)
name|exp
operator|.
name|get
argument_list|(
literal|"rspCode"
argument_list|)
decl_stmt|;
name|rsp
operator|.
name|setException
argument_list|(
operator|new
name|SolrException
argument_list|(
name|code
operator|!=
literal|null
operator|&&
name|code
operator|!=
operator|-
literal|1
condition|?
name|ErrorCode
operator|.
name|getErrorCode
argument_list|(
name|code
argument_list|)
else|:
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
operator|(
name|String
operator|)
name|exp
operator|.
name|get
argument_list|(
literal|"msg"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|time
operator|>=
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|convert
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|operation
operator|+
literal|" the collection time out:"
operator|+
name|timeout
operator|/
literal|1000
operator|+
literal|"s"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getWatchedEvent
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|operation
operator|+
literal|" the collection error [Watcher fired on path: "
operator|+
name|event
operator|.
name|getWatchedEvent
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|" state: "
operator|+
name|event
operator|.
name|getWatchedEvent
argument_list|()
operator|.
name|getState
argument_list|()
operator|+
literal|" type "
operator|+
name|event
operator|.
name|getWatchedEvent
argument_list|()
operator|.
name|getType
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|operation
operator|+
literal|" the collection unkown case"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|handleReloadAction
specifier|private
name|void
name|handleReloadAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Reloading Collection : "
operator|+
name|req
operator|.
name|getParamString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|RELOAD
operator|.
name|toLower
argument_list|()
argument_list|,
literal|"name"
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|handleResponse
argument_list|(
name|RELOAD
operator|.
name|toLower
argument_list|()
argument_list|,
name|m
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
DECL|method|handleSyncShardAction
specifier|private
name|void
name|handleSyncShardAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|SolrServerException
throws|,
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Syncing shard : "
operator|+
name|req
operator|.
name|getParamString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|collection
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|get
argument_list|(
literal|"collection"
argument_list|)
decl_stmt|;
name|String
name|shard
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|get
argument_list|(
literal|"shard"
argument_list|)
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|ZkNodeProps
name|leaderProps
init|=
name|clusterState
operator|.
name|getLeader
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|)
decl_stmt|;
name|ZkCoreNodeProps
name|nodeProps
init|=
operator|new
name|ZkCoreNodeProps
argument_list|(
name|leaderProps
argument_list|)
decl_stmt|;
name|HttpSolrServer
name|server
init|=
operator|new
name|HttpSolrServer
argument_list|(
name|nodeProps
operator|.
name|getBaseUrl
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|server
operator|.
name|setConnectionTimeout
argument_list|(
literal|15000
argument_list|)
expr_stmt|;
name|server
operator|.
name|setSoTimeout
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|RequestSyncShard
name|reqSyncShard
init|=
operator|new
name|CoreAdminRequest
operator|.
name|RequestSyncShard
argument_list|()
decl_stmt|;
name|reqSyncShard
operator|.
name|setCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|reqSyncShard
operator|.
name|setShard
argument_list|(
name|shard
argument_list|)
expr_stmt|;
name|reqSyncShard
operator|.
name|setCoreName
argument_list|(
name|nodeProps
operator|.
name|getCoreName
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|request
argument_list|(
name|reqSyncShard
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|handleCreateAliasAction
specifier|private
name|void
name|handleCreateAliasAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Create alias action : "
operator|+
name|req
operator|.
name|getParamString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|collections
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|get
argument_list|(
literal|"collections"
argument_list|)
decl_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|CREATEALIAS
operator|.
name|toLower
argument_list|()
argument_list|,
literal|"name"
argument_list|,
name|name
argument_list|,
literal|"collections"
argument_list|,
name|collections
argument_list|)
decl_stmt|;
name|handleResponse
argument_list|(
name|CREATEALIAS
operator|.
name|toLower
argument_list|()
argument_list|,
name|m
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
DECL|method|handleDeleteAliasAction
specifier|private
name|void
name|handleDeleteAliasAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Delete alias action : "
operator|+
name|req
operator|.
name|getParamString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|DELETEALIAS
operator|.
name|toLower
argument_list|()
argument_list|,
literal|"name"
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|handleResponse
argument_list|(
name|DELETEALIAS
operator|.
name|toLower
argument_list|()
argument_list|,
name|m
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
DECL|method|handleDeleteAction
specifier|private
name|void
name|handleDeleteAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Deleting Collection : "
operator|+
name|req
operator|.
name|getParamString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|DELETE
operator|.
name|toLower
argument_list|()
argument_list|,
literal|"name"
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|handleResponse
argument_list|(
name|DELETE
operator|.
name|toLower
argument_list|()
argument_list|,
name|m
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
comment|// very simple currently, you can pass a template collection, and the new collection is created on
comment|// every node the template collection is on
comment|// there is a lot more to add - you should also be able to create with an explicit server list
comment|// we might also want to think about error handling (add the request to a zk queue and involve overseer?)
comment|// as well as specific replicas= options
DECL|method|handleCreateAction
specifier|private
name|void
name|handleCreateAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Creating Collection : "
operator|+
name|req
operator|.
name|getParamString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Collection name is required to create a new collection"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Collection name is required to create a new collection"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|CREATE
operator|.
name|toLower
argument_list|()
argument_list|,
literal|"fromApi"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|copyIfNotNull
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
argument_list|,
name|props
argument_list|,
literal|"name"
argument_list|,
name|REPLICATION_FACTOR
argument_list|,
name|COLL_CONF
argument_list|,
name|NUM_SLICES
argument_list|,
name|MAX_SHARDS_PER_NODE
argument_list|,
name|CREATE_NODE_SET
argument_list|,
name|CREATE_NODE_SET_SHUFFLE
argument_list|,
name|SHARDS_PROP
argument_list|,
name|ASYNC
argument_list|,
name|DocCollection
operator|.
name|STATE_FORMAT
argument_list|,
name|AUTO_ADD_REPLICAS
argument_list|,
literal|"router."
argument_list|)
expr_stmt|;
if|if
condition|(
name|SYSTEM_COLL
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|//We must always create asystem collection with only a single shard
name|props
operator|.
name|put
argument_list|(
name|NUM_SLICES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|props
operator|.
name|remove
argument_list|(
name|SHARDS_PROP
argument_list|)
expr_stmt|;
name|createSysConfigSet
argument_list|()
expr_stmt|;
block|}
name|copyPropertiesIfNotNull
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|handleResponse
argument_list|(
name|CREATE
operator|.
name|toLower
argument_list|()
argument_list|,
name|m
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
DECL|method|createSysConfigSet
specifier|private
name|void
name|createSysConfigSet
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|SolrZkClient
name|zk
init|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
decl_stmt|;
name|createNodeIfNotExists
argument_list|(
name|zk
argument_list|,
name|ZkStateReader
operator|.
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|SYSTEM_COLL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|createNodeIfNotExists
argument_list|(
name|zk
argument_list|,
name|ZkStateReader
operator|.
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|SYSTEM_COLL
operator|+
literal|"/schema.xml"
argument_list|,
name|BlobHandler
operator|.
name|SCHEMA
operator|.
name|replaceAll
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|createNodeIfNotExists
argument_list|(
name|zk
argument_list|,
name|ZkStateReader
operator|.
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|SYSTEM_COLL
operator|+
literal|"/solrconfig.xml"
argument_list|,
name|BlobHandler
operator|.
name|CONF
operator|.
name|replaceAll
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createNodeIfNotExists
specifier|public
specifier|static
name|void
name|createNodeIfNotExists
parameter_list|(
name|SolrZkClient
name|zk
parameter_list|,
name|String
name|path
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|zk
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|//create the config znode
try|try
block|{
name|zk
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NodeExistsException
name|e
parameter_list|)
block|{
comment|//no problem . race condition. carry on the good work
block|}
block|}
block|}
DECL|method|handleRemoveReplica
specifier|private
name|void
name|handleRemoveReplica
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Remove replica: "
operator|+
name|req
operator|.
name|getParamString
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|check
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|,
literal|"replica"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|QUEUE_OPERATION
argument_list|,
name|DELETEREPLICA
operator|.
name|toLower
argument_list|()
argument_list|)
decl_stmt|;
name|copyIfNotNull
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
argument_list|,
name|map
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|,
literal|"replica"
argument_list|,
name|ASYNC
argument_list|,
name|ONLY_IF_DOWN
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|handleResponse
argument_list|(
name|DELETEREPLICA
operator|.
name|toLower
argument_list|()
argument_list|,
name|m
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
DECL|method|handleCreateShard
specifier|private
name|void
name|handleCreateShard
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Create shard: "
operator|+
name|req
operator|.
name|getParamString
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|check
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|)
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ImplicitDocRouter
operator|.
name|NAME
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|clusterState
operator|.
name|getCollection
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|COLLECTION_PROP
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|ROUTER
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"shards can be added only to 'implicit' collections"
argument_list|)
throw|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|QUEUE_OPERATION
argument_list|,
name|CREATESHARD
operator|.
name|toLower
argument_list|()
argument_list|)
decl_stmt|;
name|copyIfNotNull
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
argument_list|,
name|map
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|ZkStateReader
operator|.
name|REPLICATION_FACTOR
argument_list|,
name|CREATE_NODE_SET
argument_list|,
name|ASYNC
argument_list|)
expr_stmt|;
name|copyPropertiesIfNotNull
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|handleResponse
argument_list|(
name|CREATESHARD
operator|.
name|toLower
argument_list|()
argument_list|,
name|m
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
DECL|method|copyIfNotNull
specifier|private
specifier|static
name|void
name|copyIfNotNull
parameter_list|(
name|SolrParams
name|params
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|prefixes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|keys
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
if|if
condition|(
name|key
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|prefixes
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|v
init|=
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
name|props
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|prefixes
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|params
operator|.
name|getParameterNamesIterator
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
literal|null
decl_stmt|;
for|for
control|(
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prefixes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|prefixes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|val
init|=
name|params
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
name|props
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|copyPropertiesIfNotNull
specifier|private
name|void
name|copyPropertiesIfNotNull
parameter_list|(
name|SolrParams
name|params
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
parameter_list|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|params
operator|.
name|getParameterNamesIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|param
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|param
operator|.
name|startsWith
argument_list|(
name|OverseerCollectionProcessor
operator|.
name|COLL_PROP_PREFIX
argument_list|)
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|param
argument_list|,
name|params
operator|.
name|get
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|handleDeleteShardAction
specifier|private
name|void
name|handleDeleteShardAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Deleting Shard : "
operator|+
name|req
operator|.
name|getParamString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
name|String
name|shard
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|DELETESHARD
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|handleResponse
argument_list|(
name|DELETESHARD
operator|.
name|toLower
argument_list|()
argument_list|,
name|m
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
DECL|method|handleSplitShardAction
specifier|private
name|void
name|handleSplitShardAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Splitting shard : "
operator|+
name|req
operator|.
name|getParamString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|get
argument_list|(
literal|"collection"
argument_list|)
decl_stmt|;
comment|// TODO : add support for multiple shards
name|String
name|shard
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"shard"
argument_list|)
decl_stmt|;
name|String
name|rangesStr
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|RANGES
argument_list|)
decl_stmt|;
name|String
name|splitKey
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"split.key"
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitKey
operator|==
literal|null
operator|&&
name|shard
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Missing required parameter: shard"
argument_list|)
throw|;
block|}
if|if
condition|(
name|splitKey
operator|!=
literal|null
operator|&&
name|shard
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Only one of 'shard' or 'split.key' should be specified"
argument_list|)
throw|;
block|}
if|if
condition|(
name|splitKey
operator|!=
literal|null
operator|&&
name|rangesStr
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Only one of 'ranges' or 'split.key' should be specified"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|SPLITSHARD
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"collection"
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|shard
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
name|shard
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|splitKey
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
literal|"split.key"
argument_list|,
name|splitKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rangesStr
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|RANGES
argument_list|,
name|rangesStr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|ASYNC
argument_list|)
operator|!=
literal|null
condition|)
name|props
operator|.
name|put
argument_list|(
name|ASYNC
argument_list|,
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|ASYNC
argument_list|)
argument_list|)
expr_stmt|;
name|copyPropertiesIfNotNull
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|handleResponse
argument_list|(
name|SPLITSHARD
operator|.
name|toLower
argument_list|()
argument_list|,
name|m
argument_list|,
name|rsp
argument_list|,
name|DEFAULT_ZK_TIMEOUT
operator|*
literal|5
argument_list|)
expr_stmt|;
block|}
DECL|method|handleMigrate
specifier|private
name|void
name|handleMigrate
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Migrate action invoked: "
operator|+
name|req
operator|.
name|getParamString
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|check
argument_list|(
literal|"collection"
argument_list|,
literal|"split.key"
argument_list|,
literal|"target.collection"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|MIGRATE
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|copyIfNotNull
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
argument_list|,
name|props
argument_list|,
literal|"collection"
argument_list|,
literal|"split.key"
argument_list|,
literal|"target.collection"
argument_list|,
literal|"forward.timeout"
argument_list|,
name|ASYNC
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|handleResponse
argument_list|(
name|MIGRATE
operator|.
name|toLower
argument_list|()
argument_list|,
name|m
argument_list|,
name|rsp
argument_list|,
name|DEFAULT_ZK_TIMEOUT
operator|*
literal|20
argument_list|)
expr_stmt|;
block|}
DECL|method|handleAddReplica
specifier|private
name|void
name|handleAddReplica
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Add replica action invoked: "
operator|+
name|req
operator|.
name|getParamString
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|CollectionAction
operator|.
name|ADDREPLICA
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|copyIfNotNull
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
argument_list|,
name|props
argument_list|,
name|COLLECTION_PROP
argument_list|,
literal|"node"
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|ShardParams
operator|.
name|_ROUTE_
argument_list|,
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|CoreAdminParams
operator|.
name|INSTANCE_DIR
argument_list|,
name|CoreAdminParams
operator|.
name|DATA_DIR
argument_list|,
name|ASYNC
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|handleResponse
argument_list|(
name|CollectionAction
operator|.
name|ADDREPLICA
operator|.
name|toString
argument_list|()
argument_list|,
name|m
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
comment|/**    * Handle cluster status request.    * Can return status per specific collection/shard or per all collections.    *    * @param req solr request    * @param rsp solr response    */
DECL|method|handleClusterStatus
specifier|private
name|void
name|handleClusterStatus
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|CollectionAction
operator|.
name|CLUSTERSTATUS
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|copyIfNotNull
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
argument_list|,
name|props
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|ShardParams
operator|.
name|_ROUTE_
argument_list|)
expr_stmt|;
name|handleResponse
argument_list|(
name|CollectionAction
operator|.
name|CLUSTERSTATUS
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
comment|/**    * Handled list collection request.    * Do list collection request to zk host    *    * @param req solr request    * @param rsp solr response    * @throws KeeperException      zk connection failed    * @throws InterruptedException connection interrupted    */
DECL|method|handleListAction
specifier|private
name|void
name|handleListAction
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|CollectionAction
operator|.
name|LIST
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
name|handleResponse
argument_list|(
name|CollectionAction
operator|.
name|LIST
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
DECL|method|params
specifier|public
specifier|static
name|ModifiableSolrParams
name|params
parameter_list|(
name|String
modifier|...
name|params
parameter_list|)
block|{
name|ModifiableSolrParams
name|msp
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|msp
operator|.
name|add
argument_list|(
name|params
index|[
name|i
index|]
argument_list|,
name|params
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|msp
return|;
block|}
comment|//////////////////////// SolrInfoMBeans methods //////////////////////
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Manage SolrCloud Collections"
return|;
block|}
DECL|field|SYSTEM_COLL
specifier|public
specifier|static
specifier|final
name|String
name|SYSTEM_COLL
init|=
literal|".system"
decl_stmt|;
block|}
end_class
end_unit
