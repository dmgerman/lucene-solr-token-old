begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.admin
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
operator|.
name|Builder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
operator|.
name|RequestSyncShard
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|RequestStatusState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|util
operator|.
name|SolrIdentifierValidator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|Overseer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerSolrResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerTaskQueue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerTaskQueue
operator|.
name|QueueEvent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ZkController
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
operator|.
name|SliceMutator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|rule
operator|.
name|ReplicaAssigner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|rule
operator|.
name|Rule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ImplicitDocRouter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
operator|.
name|State
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCmdExecutor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
operator|.
name|CoreAdminAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CloudConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|RequestHandlerBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|AuthorizationContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|PermissionNameProvider
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|RequestStatusState
operator|.
name|COMPLETED
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|RequestStatusState
operator|.
name|FAILED
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|RequestStatusState
operator|.
name|NOT_FOUND
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|RequestStatusState
operator|.
name|RUNNING
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|RequestStatusState
operator|.
name|SUBMITTED
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|Overseer
operator|.
name|QUEUE_OPERATION
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|COLL_CONF
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|COLL_PROP_PREFIX
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|CREATE_NODE_SET
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|CREATE_NODE_SET_SHUFFLE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|NUM_SLICES
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|ONLY_ACTIVE_NODES
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|ONLY_IF_DOWN
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|REQUESTID
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|SHARDS_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|SHARD_UNIQUE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
operator|.
name|DOC_ROUTER
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
operator|.
name|RULE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
operator|.
name|SNITCH
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
operator|.
name|STATE_FORMAT
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|AUTO_ADD_REPLICAS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|COLLECTION_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|MAX_SHARDS_PER_NODE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|PROPERTY_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|PROPERTY_VALUE_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|REPLICATION_FACTOR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|REPLICA_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|*
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonAdminParams
operator|.
name|ASYNC
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|NAME
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|VALUE_LONG
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
operator|.
name|DATA_DIR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
operator|.
name|DELETE_DATA_DIR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
operator|.
name|DELETE_INDEX
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
operator|.
name|DELETE_INSTANCE_DIR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
operator|.
name|INSTANCE_DIR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ShardParams
operator|.
name|_ROUTE_
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
operator|.
name|formatString
import|;
end_import
begin_class
DECL|class|CollectionsHandler
specifier|public
class|class
name|CollectionsHandler
extends|extends
name|RequestHandlerBase
implements|implements
name|PermissionNameProvider
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|coreContainer
specifier|protected
specifier|final
name|CoreContainer
name|coreContainer
decl_stmt|;
DECL|method|CollectionsHandler
specifier|public
name|CollectionsHandler
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
comment|// Unlike most request handlers, CoreContainer initialization
comment|// should happen in the constructor...
name|this
operator|.
name|coreContainer
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Overloaded ctor to inject CoreContainer into the handler.    *    * @param coreContainer Core Container of the solr webapp installed.    */
DECL|method|CollectionsHandler
specifier|public
name|CollectionsHandler
parameter_list|(
specifier|final
name|CoreContainer
name|coreContainer
parameter_list|)
block|{
name|this
operator|.
name|coreContainer
operator|=
name|coreContainer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPermissionName
specifier|public
name|PermissionNameProvider
operator|.
name|Name
name|getPermissionName
parameter_list|(
name|AuthorizationContext
name|ctx
parameter_list|)
block|{
name|String
name|action
init|=
name|ctx
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"action"
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|==
literal|null
condition|)
return|return
name|PermissionNameProvider
operator|.
name|Name
operator|.
name|COLL_READ_PERM
return|;
name|CollectionParams
operator|.
name|CollectionAction
name|collectionAction
init|=
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|get
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|collectionAction
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|collectionAction
operator|.
name|isWrite
condition|?
name|PermissionNameProvider
operator|.
name|Name
operator|.
name|COLL_EDIT_PERM
else|:
name|PermissionNameProvider
operator|.
name|Name
operator|.
name|COLL_READ_PERM
return|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|final
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{    }
comment|/**    * The instance of CoreContainer this handler handles. This should be the CoreContainer instance that created this    * handler.    *    * @return a CoreContainer instance    */
DECL|method|getCoreContainer
specifier|public
name|CoreContainer
name|getCoreContainer
parameter_list|()
block|{
return|return
name|this
operator|.
name|coreContainer
return|;
block|}
annotation|@
name|Override
DECL|method|handleRequestBody
specifier|public
name|void
name|handleRequestBody
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Make sure the cores is enabled
name|CoreContainer
name|cores
init|=
name|getCoreContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|cores
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Core container instance missing"
argument_list|)
throw|;
block|}
comment|// Make sure that the core is ZKAware
if|if
condition|(
operator|!
name|cores
operator|.
name|isZooKeeperAware
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Solr instance is not running in SolrCloud mode."
argument_list|)
throw|;
block|}
comment|// Pick the action
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|a
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|CollectionAction
name|action
init|=
name|CollectionAction
operator|.
name|get
argument_list|(
name|a
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown action: "
operator|+
name|a
argument_list|)
throw|;
block|}
name|CollectionOperation
name|operation
init|=
name|CollectionOperation
operator|.
name|get
argument_list|(
name|action
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Invoked Collection Action :{} with params {} and sendToOCPQueue={}"
argument_list|,
name|action
operator|.
name|toLower
argument_list|()
argument_list|,
name|req
operator|.
name|getParamString
argument_list|()
argument_list|,
name|operation
operator|.
name|sendToOCPQueue
argument_list|)
expr_stmt|;
name|SolrResponse
name|response
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|operation
operator|.
name|call
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|String
name|asyncId
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|ASYNC
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|asyncId
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|ASYNC
argument_list|,
name|asyncId
argument_list|)
expr_stmt|;
block|}
name|props
operator|.
name|put
argument_list|(
name|QUEUE_OPERATION
argument_list|,
name|operation
operator|.
name|action
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|zkProps
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
decl_stmt|;
if|if
condition|(
name|operation
operator|.
name|sendToOCPQueue
condition|)
block|{
name|response
operator|=
name|handleResponse
argument_list|(
name|operation
operator|.
name|action
operator|.
name|toLower
argument_list|()
argument_list|,
name|zkProps
argument_list|,
name|rsp
argument_list|,
name|operation
operator|.
name|timeOut
argument_list|)
expr_stmt|;
block|}
else|else
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|props
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|collectionName
init|=
name|zkProps
operator|.
name|getStr
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|.
name|equals
argument_list|(
name|CollectionAction
operator|.
name|CREATE
argument_list|)
operator|&&
name|asyncId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|rsp
operator|.
name|getException
argument_list|()
operator|==
literal|null
condition|)
block|{
name|waitForActiveCollection
argument_list|(
name|collectionName
argument_list|,
name|zkProps
argument_list|,
name|cores
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"action is a required param"
argument_list|)
throw|;
block|}
name|rsp
operator|.
name|setHttpCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|field|KNOWN_ROLES
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|KNOWN_ROLES
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"overseer"
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_COLLECTION_OP_TIMEOUT
specifier|public
specifier|static
name|long
name|DEFAULT_COLLECTION_OP_TIMEOUT
init|=
literal|180
operator|*
literal|1000
decl_stmt|;
DECL|method|handleResponse
name|void
name|handleResponse
parameter_list|(
name|String
name|operation
parameter_list|,
name|ZkNodeProps
name|m
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|handleResponse
argument_list|(
name|operation
argument_list|,
name|m
argument_list|,
name|rsp
argument_list|,
name|DEFAULT_COLLECTION_OP_TIMEOUT
argument_list|)
expr_stmt|;
block|}
DECL|method|handleResponse
specifier|private
name|SolrResponse
name|handleResponse
parameter_list|(
name|String
name|operation
parameter_list|,
name|ZkNodeProps
name|m
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|long
name|time
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|containsKey
argument_list|(
name|ASYNC
argument_list|)
operator|&&
name|m
operator|.
name|get
argument_list|(
name|ASYNC
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|asyncId
init|=
name|m
operator|.
name|getStr
argument_list|(
name|ASYNC
argument_list|)
decl_stmt|;
if|if
condition|(
name|asyncId
operator|.
name|equals
argument_list|(
literal|"-1"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"requestid can not be -1. It is reserved for cleanup purposes."
argument_list|)
throw|;
block|}
name|NamedList
argument_list|<
name|String
argument_list|>
name|r
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getOverseerCompletedMap
argument_list|()
operator|.
name|contains
argument_list|(
name|asyncId
argument_list|)
operator|||
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getOverseerFailureMap
argument_list|()
operator|.
name|contains
argument_list|(
name|asyncId
argument_list|)
operator|||
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getOverseerRunningMap
argument_list|()
operator|.
name|contains
argument_list|(
name|asyncId
argument_list|)
operator|||
name|overseerCollectionQueueContains
argument_list|(
name|asyncId
argument_list|)
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
literal|"error"
argument_list|,
literal|"Task with the same requestid already exists."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getOverseerCollectionQueue
argument_list|()
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|add
argument_list|(
name|CoreAdminParams
operator|.
name|REQUESTID
argument_list|,
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
name|ASYNC
argument_list|)
argument_list|)
expr_stmt|;
name|SolrResponse
name|response
init|=
operator|new
name|OverseerSolrResponse
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|addAll
argument_list|(
name|response
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|QueueEvent
name|event
init|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getOverseerCollectionQueue
argument_list|()
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|,
name|timeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getBytes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SolrResponse
name|response
init|=
name|SolrResponse
operator|.
name|deserialize
argument_list|(
name|event
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|addAll
argument_list|(
name|response
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
name|SimpleOrderedMap
name|exp
init|=
operator|(
name|SimpleOrderedMap
operator|)
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
if|if
condition|(
name|exp
operator|!=
literal|null
condition|)
block|{
name|Integer
name|code
init|=
operator|(
name|Integer
operator|)
name|exp
operator|.
name|get
argument_list|(
literal|"rspCode"
argument_list|)
decl_stmt|;
name|rsp
operator|.
name|setException
argument_list|(
operator|new
name|SolrException
argument_list|(
name|code
operator|!=
literal|null
operator|&&
name|code
operator|!=
operator|-
literal|1
condition|?
name|ErrorCode
operator|.
name|getErrorCode
argument_list|(
name|code
argument_list|)
else|:
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
operator|(
name|String
operator|)
name|exp
operator|.
name|get
argument_list|(
literal|"msg"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
else|else
block|{
if|if
condition|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|time
operator|>=
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|convert
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|operation
operator|+
literal|" the collection time out:"
operator|+
name|timeout
operator|/
literal|1000
operator|+
literal|"s"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getWatchedEvent
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|operation
operator|+
literal|" the collection error [Watcher fired on path: "
operator|+
name|event
operator|.
name|getWatchedEvent
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|" state: "
operator|+
name|event
operator|.
name|getWatchedEvent
argument_list|()
operator|.
name|getState
argument_list|()
operator|+
literal|" type "
operator|+
name|event
operator|.
name|getWatchedEvent
argument_list|()
operator|.
name|getType
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|operation
operator|+
literal|" the collection unknown case"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|overseerCollectionQueueContains
specifier|private
name|boolean
name|overseerCollectionQueueContains
parameter_list|(
name|String
name|asyncId
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|OverseerTaskQueue
name|collectionQueue
init|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getOverseerCollectionQueue
argument_list|()
decl_stmt|;
return|return
name|collectionQueue
operator|.
name|containsTaskWithRequestId
argument_list|(
name|ASYNC
argument_list|,
name|asyncId
argument_list|)
return|;
block|}
DECL|method|copyPropertiesWithPrefix
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|copyPropertiesWithPrefix
parameter_list|(
name|SolrParams
name|params
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|params
operator|.
name|getParameterNamesIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|param
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|param
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|param
argument_list|,
name|params
operator|.
name|get
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|props
return|;
block|}
DECL|method|params
specifier|public
specifier|static
name|ModifiableSolrParams
name|params
parameter_list|(
name|String
modifier|...
name|params
parameter_list|)
block|{
name|ModifiableSolrParams
name|msp
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|msp
operator|.
name|add
argument_list|(
name|params
index|[
name|i
index|]
argument_list|,
name|params
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|msp
return|;
block|}
comment|//////////////////////// SolrInfoMBeans methods //////////////////////
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Manage SolrCloud Collections"
return|;
block|}
DECL|field|SYSTEM_COLL
specifier|public
specifier|static
specifier|final
name|String
name|SYSTEM_COLL
init|=
literal|".system"
decl_stmt|;
DECL|enum|CollectionOperation
enum|enum
name|CollectionOperation
block|{
comment|/**      * very simple currently, you can pass a template collection, and the new collection is created on      * every node the template collection is on      * there is a lot more to add - you should also be able to create with an explicit server list      * we might also want to think about error handling (add the request to a zk queue and involve overseer?)      * as well as specific replicas= options      */
DECL|method|CREATE_OP
DECL|method|CREATE_OP
name|CREATE_OP
parameter_list|(
name|CREATE
parameter_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|h
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|getAll
argument_list|(
literal|null
argument_list|,
name|NAME
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"fromApi"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getAll
argument_list|(
name|props
argument_list|,
name|REPLICATION_FACTOR
argument_list|,
name|COLL_CONF
argument_list|,
name|NUM_SLICES
argument_list|,
name|MAX_SHARDS_PER_NODE
argument_list|,
name|CREATE_NODE_SET
argument_list|,
name|CREATE_NODE_SET_SHUFFLE
argument_list|,
name|SHARDS_PROP
argument_list|,
name|STATE_FORMAT
argument_list|,
name|AUTO_ADD_REPLICAS
argument_list|,
name|RULE
argument_list|,
name|SNITCH
argument_list|)
expr_stmt|;
if|if
condition|(
name|props
operator|.
name|get
argument_list|(
name|STATE_FORMAT
argument_list|)
operator|==
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|STATE_FORMAT
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
block|}
name|addMapObject
argument_list|(
name|props
argument_list|,
name|RULE
argument_list|)
expr_stmt|;
name|addMapObject
argument_list|(
name|props
argument_list|,
name|SNITCH
argument_list|)
expr_stmt|;
name|verifyRuleParams
argument_list|(
name|h
operator|.
name|coreContainer
argument_list|,
name|props
argument_list|)
expr_stmt|;
specifier|final
name|String
name|collectionName
init|=
name|SolrIdentifierValidator
operator|.
name|validateCollectionName
argument_list|(
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|shardsParam
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|SHARDS_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|shardsParam
argument_list|)
condition|)
block|{
name|verifyShardsParam
argument_list|(
name|shardsParam
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SYSTEM_COLL
operator|.
name|equals
argument_list|(
name|collectionName
argument_list|)
condition|)
block|{
comment|//We must always create a .system collection with only a single shard
name|props
operator|.
name|put
argument_list|(
name|NUM_SLICES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|props
operator|.
name|remove
argument_list|(
name|SHARDS_PROP
argument_list|)
expr_stmt|;
name|createSysConfigSet
argument_list|(
name|h
operator|.
name|coreContainer
argument_list|)
expr_stmt|;
block|}
name|copyPropertiesWithPrefix
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
argument_list|,
name|props
argument_list|,
name|COLL_PROP_PREFIX
argument_list|)
expr_stmt|;
return|return
name|copyPropertiesWithPrefix
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
argument_list|,
name|props
argument_list|,
literal|"router."
argument_list|)
return|;
block|}
specifier|private
name|void
name|createSysConfigSet
parameter_list|(
name|CoreContainer
name|coreContainer
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|SolrZkClient
name|zk
init|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
decl_stmt|;
name|ZkCmdExecutor
name|cmdExecutor
init|=
operator|new
name|ZkCmdExecutor
argument_list|(
name|zk
operator|.
name|getZkClientTimeout
argument_list|()
argument_list|)
decl_stmt|;
name|cmdExecutor
operator|.
name|ensureExists
argument_list|(
name|ZkStateReader
operator|.
name|CONFIGS_ZKNODE
argument_list|,
name|zk
argument_list|)
expr_stmt|;
name|cmdExecutor
operator|.
name|ensureExists
argument_list|(
name|ZkStateReader
operator|.
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|SYSTEM_COLL
argument_list|,
name|zk
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|path
init|=
name|ZkStateReader
operator|.
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|SYSTEM_COLL
operator|+
literal|"/schema.xml"
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"SystemCollectionSchema.xml"
argument_list|)
argument_list|)
decl_stmt|;
name|cmdExecutor
operator|.
name|ensureExists
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
name|zk
argument_list|)
expr_stmt|;
name|path
operator|=
name|ZkStateReader
operator|.
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|SYSTEM_COLL
operator|+
literal|"/solrconfig.xml"
expr_stmt|;
name|data
operator|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"SystemCollectionSolrConfig.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|cmdExecutor
operator|.
name|ensureExists
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
name|zk
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|,
DECL|method|DELETE_OP
DECL|method|DELETE_OP
name|DELETE_OP
parameter_list|(
name|DELETE
parameter_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|getAll
argument_list|(
literal|null
argument_list|,
name|NAME
argument_list|)
return|;
block|}
block|}
block|,
DECL|method|RELOAD_OP
DECL|method|RELOAD_OP
name|RELOAD_OP
parameter_list|(
name|RELOAD
parameter_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|getAll
argument_list|(
literal|null
argument_list|,
name|NAME
argument_list|)
return|;
block|}
block|}
block|,
DECL|method|SYNCSHARD_OP
DECL|method|SYNCSHARD_OP
name|SYNCSHARD_OP
parameter_list|(
name|SYNCSHARD
parameter_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|h
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|collection
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|get
argument_list|(
literal|"collection"
argument_list|)
decl_stmt|;
name|String
name|shard
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|get
argument_list|(
literal|"shard"
argument_list|)
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|h
operator|.
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|DocCollection
name|docCollection
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|ZkNodeProps
name|leaderProps
init|=
name|docCollection
operator|.
name|getLeader
argument_list|(
name|shard
argument_list|)
decl_stmt|;
name|ZkCoreNodeProps
name|nodeProps
init|=
operator|new
name|ZkCoreNodeProps
argument_list|(
name|leaderProps
argument_list|)
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|client
init|=
operator|new
name|Builder
argument_list|(
name|nodeProps
operator|.
name|getBaseUrl
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|client
operator|.
name|setConnectionTimeout
argument_list|(
literal|15000
argument_list|)
expr_stmt|;
name|client
operator|.
name|setSoTimeout
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|RequestSyncShard
name|reqSyncShard
init|=
operator|new
name|CoreAdminRequest
operator|.
name|RequestSyncShard
argument_list|()
decl_stmt|;
name|reqSyncShard
operator|.
name|setCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|reqSyncShard
operator|.
name|setShard
argument_list|(
name|shard
argument_list|)
expr_stmt|;
name|reqSyncShard
operator|.
name|setCoreName
argument_list|(
name|nodeProps
operator|.
name|getCoreName
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|request
argument_list|(
name|reqSyncShard
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
block|,
DECL|method|CREATEALIAS_OP
DECL|method|CREATEALIAS_OP
name|CREATEALIAS_OP
parameter_list|(
name|CREATEALIAS
parameter_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|aliasName
init|=
name|SolrIdentifierValidator
operator|.
name|validateAliasName
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|getAll
argument_list|(
literal|null
argument_list|,
name|NAME
argument_list|,
literal|"collections"
argument_list|)
return|;
block|}
block|}
block|,
DECL|method|DELETEALIAS_OP
DECL|method|DELETEALIAS_OP
name|DELETEALIAS_OP
parameter_list|(
name|DELETEALIAS
parameter_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|getAll
argument_list|(
literal|null
argument_list|,
name|NAME
argument_list|)
return|;
block|}
block|}
block|,
DECL|method|SPLITSHARD_OP
DECL|method|SPLITSHARD_OP
name|SPLITSHARD_OP
argument_list|(
name|SPLITSHARD
argument_list|,
name|DEFAULT_COLLECTION_OP_TIMEOUT
operator|*
literal|5
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|h
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|get
argument_list|(
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
comment|// TODO : add support for multiple shards
name|String
name|shard
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|String
name|rangesStr
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|RANGES
argument_list|)
decl_stmt|;
name|String
name|splitKey
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"split.key"
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitKey
operator|==
literal|null
operator|&&
name|shard
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"At least one of shard, or split.key should be specified."
argument_list|)
throw|;
block|}
if|if
condition|(
name|splitKey
operator|!=
literal|null
operator|&&
name|shard
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Only one of 'shard' or 'split.key' should be specified"
argument_list|)
throw|;
block|}
if|if
condition|(
name|splitKey
operator|!=
literal|null
operator|&&
name|rangesStr
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Only one of 'ranges' or 'split.key' should be specified"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getAll
argument_list|(
literal|null
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|,
literal|"split.key"
argument_list|,
name|CoreAdminParams
operator|.
name|RANGES
argument_list|)
decl_stmt|;
return|return
name|copyPropertiesWithPrefix
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
argument_list|,
name|map
argument_list|,
name|COLL_PROP_PREFIX
argument_list|)
return|;
block|}
block|}
block|,
DECL|method|DELETESHARD_OP
DECL|method|DELETESHARD_OP
name|DELETESHARD_OP
parameter_list|(
name|DELETESHARD
parameter_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|getAll
argument_list|(
literal|null
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getAll
argument_list|(
name|map
argument_list|,
name|DELETE_INDEX
argument_list|,
name|DELETE_DATA_DIR
argument_list|,
name|DELETE_INSTANCE_DIR
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
block|}
block|,
DECL|method|FORCELEADER_OP
DECL|method|FORCELEADER_OP
name|FORCELEADER_OP
parameter_list|(
name|FORCELEADER
parameter_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
name|forceLeaderElection
argument_list|(
name|req
argument_list|,
name|handler
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|,
DECL|method|CREATESHARD_OP
DECL|method|CREATESHARD_OP
name|CREATESHARD_OP
parameter_list|(
name|CREATESHARD
parameter_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|getAll
argument_list|(
literal|null
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|handler
operator|.
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
specifier|final
name|String
name|newShardName
init|=
name|SolrIdentifierValidator
operator|.
name|validateShardName
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|SHARD_ID_PROP
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ImplicitDocRouter
operator|.
name|NAME
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|clusterState
operator|.
name|getCollection
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|COLLECTION_PROP
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|DOC_ROUTER
argument_list|)
operator|)
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
argument_list|)
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"shards can be added only to 'implicit' collections"
argument_list|)
throw|;
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getAll
argument_list|(
name|map
argument_list|,
name|REPLICATION_FACTOR
argument_list|,
name|CREATE_NODE_SET
argument_list|)
expr_stmt|;
return|return
name|copyPropertiesWithPrefix
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
argument_list|,
name|map
argument_list|,
name|COLL_PROP_PREFIX
argument_list|)
return|;
block|}
block|}
block|,
DECL|method|DELETEREPLICA_OP
DECL|method|DELETEREPLICA_OP
name|DELETEREPLICA_OP
parameter_list|(
name|DELETEREPLICA
parameter_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|getAll
argument_list|(
literal|null
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|REPLICA_PROP
argument_list|)
decl_stmt|;
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getAll
argument_list|(
name|map
argument_list|,
name|DELETE_INDEX
argument_list|,
name|DELETE_DATA_DIR
argument_list|,
name|DELETE_INSTANCE_DIR
argument_list|)
expr_stmt|;
return|return
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getAll
argument_list|(
name|map
argument_list|,
name|ONLY_IF_DOWN
argument_list|)
return|;
block|}
block|}
block|,
DECL|method|MIGRATE_OP
DECL|method|MIGRATE_OP
name|MIGRATE_OP
parameter_list|(
name|MIGRATE
parameter_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|h
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|getAll
argument_list|(
literal|null
argument_list|,
name|COLLECTION_PROP
argument_list|,
literal|"split.key"
argument_list|,
literal|"target.collection"
argument_list|)
decl_stmt|;
return|return
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getAll
argument_list|(
name|map
argument_list|,
literal|"forward.timeout"
argument_list|)
return|;
block|}
block|}
block|,
DECL|method|ADDROLE_OP
DECL|method|ADDROLE_OP
name|ADDROLE_OP
parameter_list|(
name|ADDROLE
parameter_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|getAll
argument_list|(
literal|null
argument_list|,
literal|"role"
argument_list|,
literal|"node"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|KNOWN_ROLES
operator|.
name|contains
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"role"
argument_list|)
argument_list|)
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown role. Supported roles are ,"
operator|+
name|KNOWN_ROLES
argument_list|)
throw|;
return|return
name|map
return|;
block|}
block|}
block|,
DECL|method|REMOVEROLE_OP
DECL|method|REMOVEROLE_OP
name|REMOVEROLE_OP
parameter_list|(
name|REMOVEROLE
parameter_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|h
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|getAll
argument_list|(
literal|null
argument_list|,
literal|"role"
argument_list|,
literal|"node"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|KNOWN_ROLES
operator|.
name|contains
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"role"
argument_list|)
argument_list|)
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown role. Supported roles are ,"
operator|+
name|KNOWN_ROLES
argument_list|)
throw|;
return|return
name|map
return|;
block|}
block|}
block|,
DECL|method|CLUSTERPROP_OP
DECL|method|CLUSTERPROP_OP
name|CLUSTERPROP_OP
parameter_list|(
name|CLUSTERPROP
parameter_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|h
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
name|String
name|val
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|VALUE_LONG
argument_list|)
decl_stmt|;
name|h
operator|.
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|setClusterProperty
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|,
DECL|method|REQUESTSTATUS_OP
DECL|method|REQUESTSTATUS_OP
name|REQUESTSTATUS_OP
parameter_list|(
name|REQUESTSTATUS
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|h
parameter_list|)
throws|throws
name|Exception
block|{
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|check
argument_list|(
name|REQUESTID
argument_list|)
expr_stmt|;
specifier|final
name|CoreContainer
name|coreContainer
init|=
name|h
operator|.
name|coreContainer
decl_stmt|;
specifier|final
name|String
name|requestId
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|REQUESTID
argument_list|)
decl_stmt|;
specifier|final
name|ZkController
name|zkController
init|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
decl_stmt|;
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|results
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|zkController
operator|.
name|getOverseerCompletedMap
argument_list|()
operator|.
name|contains
argument_list|(
name|requestId
argument_list|)
condition|)
block|{
specifier|final
name|byte
index|[]
name|mapEntry
init|=
name|zkController
operator|.
name|getOverseerCompletedMap
argument_list|()
operator|.
name|get
argument_list|(
name|requestId
argument_list|)
decl_stmt|;
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|addAll
argument_list|(
name|SolrResponse
operator|.
name|deserialize
argument_list|(
name|mapEntry
argument_list|)
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
name|addStatusToResponse
argument_list|(
name|results
argument_list|,
name|COMPLETED
argument_list|,
literal|"found ["
operator|+
name|requestId
operator|+
literal|"] in completed tasks"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|zkController
operator|.
name|getOverseerFailureMap
argument_list|()
operator|.
name|contains
argument_list|(
name|requestId
argument_list|)
condition|)
block|{
specifier|final
name|byte
index|[]
name|mapEntry
init|=
name|zkController
operator|.
name|getOverseerFailureMap
argument_list|()
operator|.
name|get
argument_list|(
name|requestId
argument_list|)
decl_stmt|;
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|addAll
argument_list|(
name|SolrResponse
operator|.
name|deserialize
argument_list|(
name|mapEntry
argument_list|)
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
name|addStatusToResponse
argument_list|(
name|results
argument_list|,
name|FAILED
argument_list|,
literal|"found ["
operator|+
name|requestId
operator|+
literal|"] in failed tasks"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|zkController
operator|.
name|getOverseerRunningMap
argument_list|()
operator|.
name|contains
argument_list|(
name|requestId
argument_list|)
condition|)
block|{
name|addStatusToResponse
argument_list|(
name|results
argument_list|,
name|RUNNING
argument_list|,
literal|"found ["
operator|+
name|requestId
operator|+
literal|"] in running tasks"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|h
operator|.
name|overseerCollectionQueueContains
argument_list|(
name|requestId
argument_list|)
condition|)
block|{
name|addStatusToResponse
argument_list|(
name|results
argument_list|,
name|SUBMITTED
argument_list|,
literal|"found ["
operator|+
name|requestId
operator|+
literal|"] in submitted tasks"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addStatusToResponse
argument_list|(
name|results
argument_list|,
name|NOT_FOUND
argument_list|,
literal|"Did not find ["
operator|+
name|requestId
operator|+
literal|"] in any tasks queue"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SolrResponse
name|response
init|=
operator|new
name|OverseerSolrResponse
argument_list|(
name|results
argument_list|)
decl_stmt|;
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|addAll
argument_list|(
name|response
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|addStatusToResponse
parameter_list|(
name|NamedList
argument_list|<
name|Object
argument_list|>
name|results
parameter_list|,
name|RequestStatusState
name|state
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|SimpleOrderedMap
argument_list|<
name|String
argument_list|>
name|status
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
name|status
operator|.
name|add
argument_list|(
literal|"state"
argument_list|,
name|state
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|add
argument_list|(
literal|"msg"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|method|DELETESTATUS_OP
DECL|method|DELETESTATUS_OP
name|DELETESTATUS_OP
parameter_list|(
name|DELETESTATUS
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|h
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|CoreContainer
name|coreContainer
init|=
name|h
operator|.
name|coreContainer
decl_stmt|;
specifier|final
name|String
name|requestId
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|REQUESTID
argument_list|)
decl_stmt|;
specifier|final
name|ZkController
name|zkController
init|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
decl_stmt|;
name|Boolean
name|flush
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|CollectionAdminParams
operator|.
name|FLUSH
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestId
operator|==
literal|null
operator|&&
operator|!
name|flush
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Either requestid or flush parameter must be specified."
argument_list|)
throw|;
block|}
if|if
condition|(
name|requestId
operator|!=
literal|null
operator|&&
name|flush
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Both requestid and flush parameters can not be specified together."
argument_list|)
throw|;
block|}
if|if
condition|(
name|flush
condition|)
block|{
name|zkController
operator|.
name|getOverseerCompletedMap
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|zkController
operator|.
name|getOverseerFailureMap
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
literal|"successfully cleared stored collection api responses"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
comment|// Request to cleanup
if|if
condition|(
name|zkController
operator|.
name|getOverseerCompletedMap
argument_list|()
operator|.
name|remove
argument_list|(
name|requestId
argument_list|)
condition|)
block|{
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
literal|"successfully removed stored response for ["
operator|+
name|requestId
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|zkController
operator|.
name|getOverseerFailureMap
argument_list|()
operator|.
name|remove
argument_list|(
name|requestId
argument_list|)
condition|)
block|{
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
literal|"successfully removed stored response for ["
operator|+
name|requestId
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
literal|"["
operator|+
name|requestId
operator|+
literal|"] not found in stored responses"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
block|,
DECL|method|ADDREPLICA_OP
DECL|method|ADDREPLICA_OP
name|ADDREPLICA_OP
parameter_list|(
name|ADDREPLICA
parameter_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|h
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getAll
argument_list|(
literal|null
argument_list|,
name|COLLECTION_PROP
argument_list|,
literal|"node"
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|_ROUTE_
argument_list|,
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|INSTANCE_DIR
argument_list|,
name|DATA_DIR
argument_list|)
decl_stmt|;
return|return
name|copyPropertiesWithPrefix
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
argument_list|,
name|props
argument_list|,
name|COLL_PROP_PREFIX
argument_list|)
return|;
block|}
block|}
block|,
DECL|method|OVERSEERSTATUS_OP
DECL|method|OVERSEERSTATUS_OP
name|OVERSEERSTATUS_OP
parameter_list|(
name|OVERSEERSTATUS
parameter_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|h
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
return|;
block|}
block|}
block|,
comment|/**      * Handle list collection request.      * Do list collection request to zk host      */
DECL|method|LIST_OP
DECL|method|LIST_OP
name|LIST_OP
parameter_list|(
name|LIST
parameter_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|results
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|collections
init|=
name|handler
operator|.
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollections
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|collectionList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|collection
range|:
name|collections
control|)
block|{
name|collectionList
operator|.
name|add
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|add
argument_list|(
literal|"collections"
argument_list|,
name|collectionList
argument_list|)
expr_stmt|;
name|SolrResponse
name|response
init|=
operator|new
name|OverseerSolrResponse
argument_list|(
name|results
argument_list|)
decl_stmt|;
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|addAll
argument_list|(
name|response
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|,
comment|/**      * Handle cluster status request.      * Can return status per specific collection/shard or per all collections.      */
DECL|method|CLUSTERSTATUS_OP
DECL|method|CLUSTERSTATUS_OP
name|CLUSTERSTATUS_OP
parameter_list|(
name|CLUSTERSTATUS
parameter_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|handler
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|all
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getAll
argument_list|(
literal|null
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|_ROUTE_
argument_list|)
decl_stmt|;
operator|new
name|ClusterStatus
argument_list|(
name|handler
operator|.
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|all
argument_list|)
argument_list|)
operator|.
name|getClusterStatus
argument_list|(
name|rsp
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|,
DECL|method|ADDREPLICAPROP_OP
DECL|method|ADDREPLICAPROP_OP
name|ADDREPLICAPROP_OP
parameter_list|(
name|ADDREPLICAPROP
parameter_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|h
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|getAll
argument_list|(
literal|null
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|PROPERTY_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|REPLICA_PROP
argument_list|,
name|PROPERTY_VALUE_PROP
argument_list|)
decl_stmt|;
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getAll
argument_list|(
name|map
argument_list|,
name|SHARD_UNIQUE
argument_list|)
expr_stmt|;
name|String
name|property
init|=
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
name|PROPERTY_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|property
operator|.
name|startsWith
argument_list|(
name|COLL_PROP_PREFIX
argument_list|)
condition|)
block|{
name|property
operator|=
name|COLL_PROP_PREFIX
operator|+
name|property
expr_stmt|;
block|}
name|boolean
name|uniquePerSlice
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
name|SHARD_UNIQUE
argument_list|)
argument_list|)
decl_stmt|;
comment|// Check if we're trying to set a property with parameters that allow us to set the property on multiple replicas
comment|// in a slice on properties that are known to only be one-per-slice and error out if so.
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
name|SHARD_UNIQUE
argument_list|)
argument_list|)
operator|&&
name|SliceMutator
operator|.
name|SLICE_UNIQUE_BOOLEAN_PROPERTIES
operator|.
name|contains
argument_list|(
name|property
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
operator|&&
name|uniquePerSlice
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Overseer replica property command received for property "
operator|+
name|property
operator|+
literal|" with the "
operator|+
name|SHARD_UNIQUE
operator|+
literal|" parameter set to something other than 'true'. No action taken."
argument_list|)
throw|;
block|}
return|return
name|map
return|;
block|}
block|}
block|,
DECL|method|DELETEREPLICAPROP_OP
DECL|method|DELETEREPLICAPROP_OP
name|DELETEREPLICAPROP_OP
parameter_list|(
name|DELETEREPLICAPROP
parameter_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|h
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|getAll
argument_list|(
literal|null
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|PROPERTY_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|REPLICA_PROP
argument_list|)
decl_stmt|;
return|return
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getAll
argument_list|(
name|map
argument_list|,
name|PROPERTY_PROP
argument_list|)
return|;
block|}
block|}
block|,
DECL|method|BALANCESHARDUNIQUE_OP
DECL|method|BALANCESHARDUNIQUE_OP
name|BALANCESHARDUNIQUE_OP
parameter_list|(
name|BALANCESHARDUNIQUE
parameter_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|h
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|getAll
argument_list|(
literal|null
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|PROPERTY_PROP
argument_list|)
decl_stmt|;
name|Boolean
name|shardUnique
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|SHARD_UNIQUE
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|prop
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|PROPERTY_PROP
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|startsWith
argument_list|(
name|prop
argument_list|,
name|COLL_PROP_PREFIX
argument_list|)
condition|)
block|{
name|prop
operator|=
name|COLL_PROP_PREFIX
operator|+
name|prop
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|shardUnique
operator|&&
operator|!
name|SliceMutator
operator|.
name|SLICE_UNIQUE_BOOLEAN_PROPERTIES
operator|.
name|contains
argument_list|(
name|prop
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Balancing properties amongst replicas in a slice requires that"
operator|+
literal|" the property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'. "
operator|+
literal|" Property: "
operator|+
name|prop
operator|+
literal|" shardUnique: "
operator|+
name|Boolean
operator|.
name|toString
argument_list|(
name|shardUnique
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getAll
argument_list|(
name|map
argument_list|,
name|ONLY_ACTIVE_NODES
argument_list|,
name|SHARD_UNIQUE
argument_list|)
return|;
block|}
block|}
block|,
DECL|method|REBALANCELEADERS_OP
DECL|method|REBALANCELEADERS_OP
name|REBALANCELEADERS_OP
parameter_list|(
name|REBALANCELEADERS
parameter_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|h
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|RebalanceLeaders
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|,
name|h
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|,
DECL|method|MODIFYCOLLECTION_OP
DECL|method|MODIFYCOLLECTION_OP
name|MODIFYCOLLECTION_OP
argument_list|(
name|MODIFYCOLLECTION
argument_list|,
name|DEFAULT_COLLECTION_OP_TIMEOUT
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|h
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getAll
argument_list|(
literal|null
argument_list|,
name|MODIFIABLE_COLL_PROPS
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|formatString
argument_list|(
literal|"no supported values provided rule, snitch, masShardsPerNode, replicationFactor"
argument_list|)
argument_list|)
throw|;
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|getAll
argument_list|(
name|m
argument_list|,
name|COLLECTION_PROP
argument_list|)
expr_stmt|;
name|addMapObject
argument_list|(
name|m
argument_list|,
name|RULE
argument_list|)
expr_stmt|;
name|addMapObject
argument_list|(
name|m
argument_list|,
name|SNITCH
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|prop
range|:
name|MODIFIABLE_COLL_PROPS
control|)
name|DocCollection
operator|.
name|verifyProp
argument_list|(
name|m
argument_list|,
name|prop
argument_list|)
expr_stmt|;
name|verifyRuleParams
argument_list|(
name|h
operator|.
name|coreContainer
argument_list|,
name|m
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
block|}
block|,
DECL|method|MIGRATESTATEFORMAT_OP
DECL|method|MIGRATESTATEFORMAT_OP
name|MIGRATESTATEFORMAT_OP
parameter_list|(
name|MIGRATESTATEFORMAT
parameter_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|getAll
argument_list|(
literal|null
argument_list|,
name|COLLECTION_PROP
argument_list|)
return|;
block|}
block|}
block|;
DECL|field|action
name|CollectionAction
name|action
decl_stmt|;
DECL|field|timeOut
name|long
name|timeOut
decl_stmt|;
DECL|field|sendToOCPQueue
name|boolean
name|sendToOCPQueue
decl_stmt|;
DECL|method|CollectionOperation
name|CollectionOperation
parameter_list|(
name|CollectionAction
name|action
parameter_list|)
block|{
name|this
argument_list|(
name|action
argument_list|,
name|DEFAULT_COLLECTION_OP_TIMEOUT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|CollectionOperation
name|CollectionOperation
parameter_list|(
name|CollectionAction
name|action
parameter_list|,
name|long
name|timeOut
parameter_list|,
name|boolean
name|sendToOCPQueue
parameter_list|)
block|{
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
name|this
operator|.
name|timeOut
operator|=
name|timeOut
expr_stmt|;
name|this
operator|.
name|sendToOCPQueue
operator|=
name|sendToOCPQueue
expr_stmt|;
block|}
comment|/**      * All actions must implement this method. If a non null map is returned , the action name is added to      * the map and sent to overseer for processing. If it returns a null, the call returns immediately      */
DECL|method|call
specifier|abstract
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CollectionsHandler
name|h
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|method|get
specifier|public
specifier|static
name|CollectionOperation
name|get
parameter_list|(
name|CollectionAction
name|action
parameter_list|)
block|{
for|for
control|(
name|CollectionOperation
name|op
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|op
operator|.
name|action
operator|==
name|action
condition|)
return|return
name|op
return|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"No such action"
operator|+
name|action
argument_list|)
throw|;
block|}
block|}
DECL|method|forceLeaderElection
specifier|private
specifier|static
name|void
name|forceLeaderElection
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|CollectionsHandler
name|handler
parameter_list|)
block|{
name|ClusterState
name|clusterState
init|=
name|handler
operator|.
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|String
name|collectionName
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|get
argument_list|(
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
name|String
name|sliceId
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|required
argument_list|()
operator|.
name|get
argument_list|(
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Force leader invoked, state: {}"
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
name|DocCollection
name|collection
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|Slice
name|slice
init|=
name|collection
operator|.
name|getSlice
argument_list|(
name|sliceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No shard with name "
operator|+
name|sliceId
operator|+
literal|" exists for collection "
operator|+
name|collectionName
argument_list|)
throw|;
block|}
try|try
block|{
comment|// if an active replica is the leader, then all is fine already
name|Replica
name|leader
init|=
name|slice
operator|.
name|getLeader
argument_list|()
decl_stmt|;
if|if
condition|(
name|leader
operator|!=
literal|null
operator|&&
name|leader
operator|.
name|getState
argument_list|()
operator|==
name|State
operator|.
name|ACTIVE
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"The shard already has an active leader. Force leader is not applicable. State: "
operator|+
name|slice
argument_list|)
throw|;
block|}
comment|// Clear out any LIR state
name|String
name|lirPath
init|=
name|handler
operator|.
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getLeaderInitiatedRecoveryZnodePath
argument_list|(
name|collectionName
argument_list|,
name|sliceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|.
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkClient
argument_list|()
operator|.
name|exists
argument_list|(
name|lirPath
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|handler
operator|.
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkClient
argument_list|()
operator|.
name|printLayout
argument_list|(
name|lirPath
argument_list|,
literal|4
argument_list|,
name|sb
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Cleaning out LIR data, which was: {}"
argument_list|,
name|sb
argument_list|)
expr_stmt|;
name|handler
operator|.
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkClient
argument_list|()
operator|.
name|clean
argument_list|(
name|lirPath
argument_list|)
expr_stmt|;
block|}
comment|// Call all live replicas to prepare themselves for leadership, e.g. set last published
comment|// state to active.
for|for
control|(
name|Replica
name|rep
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
if|if
condition|(
name|clusterState
operator|.
name|getLiveNodes
argument_list|()
operator|.
name|contains
argument_list|(
name|rep
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
name|ShardHandler
name|shardHandler
init|=
name|handler
operator|.
name|coreContainer
operator|.
name|getShardHandlerFactory
argument_list|()
operator|.
name|getShardHandler
argument_list|()
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|FORCEPREPAREFORLEADERSHIP
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
name|rep
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|nodeName
init|=
name|rep
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|OverseerCollectionMessageHandler
operator|.
name|sendShardRequest
argument_list|(
name|nodeName
argument_list|,
name|params
argument_list|,
name|shardHandler
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|CommonParams
operator|.
name|CORES_HANDLER_PATH
argument_list|,
name|handler
operator|.
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|)
expr_stmt|;
comment|// synchronous request
block|}
block|}
comment|// Wait till we have an active leader
name|boolean
name|success
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|9
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|handler
operator|.
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getClusterState
argument_list|()
expr_stmt|;
name|collection
operator|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|slice
operator|=
name|collection
operator|.
name|getSlice
argument_list|(
name|sliceId
argument_list|)
expr_stmt|;
if|if
condition|(
name|slice
operator|.
name|getLeader
argument_list|()
operator|!=
literal|null
operator|&&
name|slice
operator|.
name|getLeader
argument_list|()
operator|.
name|getState
argument_list|()
operator|==
name|State
operator|.
name|ACTIVE
condition|)
block|{
name|success
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|log
operator|.
name|warn
argument_list|(
literal|"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}"
argument_list|,
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|slice
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|success
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Successfully issued FORCELEADER command for collection: {}, shard: {}"
argument_list|,
name|collectionName
argument_list|,
name|sliceId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}"
argument_list|,
name|collectionName
argument_list|,
name|sliceId
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error executing FORCELEADER operation for collection: "
operator|+
name|collectionName
operator|+
literal|" shard: "
operator|+
name|sliceId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|waitForActiveCollection
specifier|private
specifier|static
name|void
name|waitForActiveCollection
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|CoreContainer
name|cc
parameter_list|,
name|SolrResponse
name|response
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"exception"
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// the main called failed, don't wait
name|log
operator|.
name|info
argument_list|(
literal|"Not waiting for active collection due to exception: "
operator|+
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"exception"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// TODO: we should not wait for Replicas we know failed
block|}
name|String
name|replicaNotAlive
init|=
literal|null
decl_stmt|;
name|String
name|replicaState
init|=
literal|null
decl_stmt|;
name|String
name|nodeNotLive
init|=
literal|null
decl_stmt|;
name|CloudConfig
name|ccfg
init|=
name|cc
operator|.
name|getConfig
argument_list|()
operator|.
name|getCloudConfig
argument_list|()
decl_stmt|;
name|Integer
name|numRetries
init|=
name|ccfg
operator|.
name|getCreateCollectionWaitTimeTillActive
argument_list|()
decl_stmt|;
name|Boolean
name|checkLeaderOnly
init|=
name|ccfg
operator|.
name|isCreateCollectionCheckLeaderActive
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Wait for new collection to be active for at most "
operator|+
name|numRetries
operator|+
literal|" seconds. Check all shard "
operator|+
operator|(
name|checkLeaderOnly
condition|?
literal|"leaders"
else|:
literal|"replicas"
operator|)
argument_list|)
expr_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
name|cc
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRetries
condition|;
name|i
operator|++
control|)
block|{
name|ClusterState
name|clusterState
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Slice
argument_list|>
name|shards
init|=
name|clusterState
operator|.
name|getSlices
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|shards
operator|!=
literal|null
condition|)
block|{
name|replicaNotAlive
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Slice
name|shard
range|:
name|shards
control|)
block|{
name|Collection
argument_list|<
name|Replica
argument_list|>
name|replicas
decl_stmt|;
if|if
condition|(
operator|!
name|checkLeaderOnly
condition|)
name|replicas
operator|=
name|shard
operator|.
name|getReplicas
argument_list|()
expr_stmt|;
else|else
block|{
name|replicas
operator|=
operator|new
name|ArrayList
argument_list|<
name|Replica
argument_list|>
argument_list|()
expr_stmt|;
name|replicas
operator|.
name|add
argument_list|(
name|shard
operator|.
name|getLeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Replica
name|replica
range|:
name|replicas
control|)
block|{
name|String
name|state
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Checking replica status, collection={} replica={} state={}"
argument_list|,
name|collectionName
argument_list|,
name|replica
operator|.
name|getCoreUrl
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|clusterState
operator|.
name|liveNodesContain
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|||
operator|!
name|state
operator|.
name|equals
argument_list|(
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|replicaNotAlive
operator|=
name|replica
operator|.
name|getCoreUrl
argument_list|()
expr_stmt|;
name|nodeNotLive
operator|=
name|replica
operator|.
name|getNodeName
argument_list|()
expr_stmt|;
name|replicaState
operator|=
name|state
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|replicaNotAlive
operator|!=
literal|null
condition|)
break|break;
block|}
if|if
condition|(
name|replicaNotAlive
operator|==
literal|null
condition|)
return|return;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeNotLive
operator|!=
literal|null
operator|&&
name|replicaState
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Timed out waiting for new collection's replicas to become ACTIVE "
operator|+
operator|(
name|replicaState
operator|.
name|equals
argument_list|(
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
operator|.
name|toString
argument_list|()
argument_list|)
condition|?
literal|"node "
operator|+
name|nodeNotLive
operator|+
literal|" is not live"
else|:
literal|"replica "
operator|+
name|replicaNotAlive
operator|+
literal|" is in state of "
operator|+
name|replicaState
operator|.
name|toString
argument_list|()
operator|)
operator|+
literal|" with timeout="
operator|+
name|numRetries
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Timed out waiting for new collection's replicas to become ACTIVE with timeout="
operator|+
name|numRetries
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyRuleParams
specifier|public
specifier|static
name|void
name|verifyRuleParams
parameter_list|(
name|CoreContainer
name|cc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
parameter_list|)
block|{
name|List
name|l
init|=
operator|(
name|List
operator|)
name|m
operator|.
name|get
argument_list|(
name|RULE
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|l
control|)
block|{
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|o
decl_stmt|;
try|try
block|{
operator|new
name|Rule
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Error in rule "
operator|+
name|m
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
name|ReplicaAssigner
operator|.
name|verifySnitchConf
argument_list|(
name|cc
argument_list|,
operator|(
name|List
operator|)
name|m
operator|.
name|get
argument_list|(
name|SNITCH
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Converts a String of the form a:b,c:d to a Map    */
DECL|method|addMapObject
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|addMapObject
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|Object
name|v
init|=
name|props
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
return|return
name|props
return|;
name|List
argument_list|<
name|String
argument_list|>
name|val
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|instanceof
name|String
index|[]
condition|)
block|{
name|val
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|String
index|[]
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|val
operator|.
name|add
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|val
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ArrayList
argument_list|<
name|Map
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|rule
range|:
name|val
control|)
name|l
operator|.
name|add
argument_list|(
name|Rule
operator|.
name|parseRule
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
return|return
name|props
return|;
block|}
DECL|method|verifyShardsParam
specifier|private
specifier|static
name|void
name|verifyShardsParam
parameter_list|(
name|String
name|shardsParam
parameter_list|)
block|{
for|for
control|(
name|String
name|shard
range|:
name|shardsParam
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|SolrIdentifierValidator
operator|.
name|validateShardName
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|MODIFIABLE_COLL_PROPS
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|MODIFIABLE_COLL_PROPS
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|RULE
argument_list|,
name|SNITCH
argument_list|,
name|REPLICATION_FACTOR
argument_list|,
name|MAX_SHARDS_PER_NODE
argument_list|,
name|AUTO_ADD_REPLICAS
argument_list|)
decl_stmt|;
block|}
end_class
end_unit
