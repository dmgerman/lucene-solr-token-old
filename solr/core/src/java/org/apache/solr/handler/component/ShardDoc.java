begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_class
DECL|class|ShardDoc
specifier|public
class|class
name|ShardDoc
extends|extends
name|FieldDoc
block|{
DECL|field|shard
specifier|public
name|String
name|shard
decl_stmt|;
DECL|field|shardAddress
specifier|public
name|String
name|shardAddress
decl_stmt|;
comment|// TODO
DECL|field|orderInShard
specifier|public
name|int
name|orderInShard
decl_stmt|;
comment|// the position of this doc within the shard... this can be used
comment|// to short-circuit comparisons if the shard is equal, and can
comment|// also be used to break ties within the same shard.
DECL|field|id
specifier|public
name|Object
name|id
decl_stmt|;
comment|// this is currently the uniqueKeyField but
comment|// may be replaced with internal docid in a future release.
DECL|field|sortFieldValues
specifier|public
name|NamedList
name|sortFieldValues
decl_stmt|;
comment|// sort field values for *all* docs in a particular shard.
comment|// this doc's values are in position orderInShard
comment|// TODO: store the SolrDocument here?
comment|// Store the order in the merged list for lookup when getting stored fields?
comment|// (other components need this ordering to store data in order, like highlighting)
comment|// but we shouldn't expose uniqueKey (have a map by it) until the stored-field
comment|// retrieval stage.
DECL|field|positionInResponse
specifier|public
name|int
name|positionInResponse
decl_stmt|;
comment|// the ordinal position in the merged response arraylist
DECL|method|ShardDoc
specifier|public
name|ShardDoc
parameter_list|(
name|float
name|score
parameter_list|,
name|Object
index|[]
name|fields
parameter_list|,
name|Object
name|uniqueId
parameter_list|,
name|String
name|shard
parameter_list|)
block|{
name|super
argument_list|(
operator|-
literal|1
argument_list|,
name|score
argument_list|,
name|fields
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|uniqueId
expr_stmt|;
name|this
operator|.
name|shard
operator|=
name|shard
expr_stmt|;
block|}
DECL|method|ShardDoc
specifier|public
name|ShardDoc
parameter_list|()
block|{
name|super
argument_list|(
operator|-
literal|1
argument_list|,
name|Float
operator|.
name|NaN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ShardDoc
name|shardDoc
init|=
operator|(
name|ShardDoc
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|?
operator|!
name|id
operator|.
name|equals
argument_list|(
name|shardDoc
operator|.
name|id
argument_list|)
else|:
name|shardDoc
operator|.
name|id
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|id
operator|!=
literal|null
condition|?
name|id
operator|.
name|hashCode
argument_list|()
else|:
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"id="
operator|+
name|id
operator|+
literal|" ,score="
operator|+
name|score
operator|+
literal|" ,shard="
operator|+
name|shard
operator|+
literal|" ,orderInShard="
operator|+
name|orderInShard
operator|+
literal|" ,positionInResponse="
operator|+
name|positionInResponse
operator|+
literal|" ,sortFieldValues="
operator|+
name|sortFieldValues
return|;
block|}
block|}
end_class
end_unit
