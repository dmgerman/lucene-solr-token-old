begin_unit
begin_package
DECL|package|org.apache.solr.handler.loader
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|loader
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|RequestHandlerUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|UpdateRequestHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|AddUpdateCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|CommitUpdateCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|DeleteUpdateCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|RollbackUpdateCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|UpdateRequestProcessor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * @since solr 4.0  */
end_comment
begin_class
DECL|class|JsonLoader
specifier|public
class|class
name|JsonLoader
extends|extends
name|ContentStreamLoader
block|{
DECL|field|log
specifier|final
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JsonLoader
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|getDefaultWT
specifier|public
name|String
name|getDefaultWT
parameter_list|()
block|{
return|return
literal|"json"
return|;
block|}
annotation|@
name|Override
DECL|method|load
specifier|public
name|void
name|load
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|ContentStream
name|stream
parameter_list|,
name|UpdateRequestProcessor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|SingleThreadedJsonLoader
argument_list|(
name|req
argument_list|,
name|processor
argument_list|)
operator|.
name|load
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|,
name|stream
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
DECL|class|SingleThreadedJsonLoader
specifier|static
class|class
name|SingleThreadedJsonLoader
extends|extends
name|ContentStreamLoader
block|{
DECL|field|processor
specifier|protected
specifier|final
name|UpdateRequestProcessor
name|processor
decl_stmt|;
DECL|field|req
specifier|protected
specifier|final
name|SolrQueryRequest
name|req
decl_stmt|;
DECL|field|parser
specifier|protected
name|JSONParser
name|parser
decl_stmt|;
DECL|field|commitWithin
specifier|protected
specifier|final
name|int
name|commitWithin
decl_stmt|;
DECL|field|overwrite
specifier|protected
specifier|final
name|boolean
name|overwrite
decl_stmt|;
DECL|method|SingleThreadedJsonLoader
specifier|public
name|SingleThreadedJsonLoader
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|UpdateRequestProcessor
name|processor
parameter_list|)
block|{
name|this
operator|.
name|processor
operator|=
name|processor
expr_stmt|;
name|this
operator|.
name|req
operator|=
name|req
expr_stmt|;
name|commitWithin
operator|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getInt
argument_list|(
name|UpdateParams
operator|.
name|COMMIT_WITHIN
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|overwrite
operator|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|UpdateParams
operator|.
name|OVERWRITE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|load
specifier|public
name|void
name|load
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|ContentStream
name|stream
parameter_list|,
name|UpdateRequestProcessor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|stream
operator|.
name|getReader
argument_list|()
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|String
name|body
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"body"
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|StringReader
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
name|parser
operator|=
operator|new
name|JSONParser
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|this
operator|.
name|processUpdate
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"fallthrough"
argument_list|)
DECL|method|processUpdate
name|void
name|processUpdate
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|ev
init|=
name|parser
operator|.
name|nextEvent
argument_list|()
decl_stmt|;
while|while
condition|(
name|ev
operator|!=
name|JSONParser
operator|.
name|EOF
condition|)
block|{
switch|switch
condition|(
name|ev
condition|)
block|{
case|case
name|JSONParser
operator|.
name|ARRAY_START
case|:
name|handleAdds
argument_list|()
expr_stmt|;
break|break;
case|case
name|JSONParser
operator|.
name|STRING
case|:
if|if
condition|(
name|parser
operator|.
name|wasKey
argument_list|()
condition|)
block|{
name|String
name|v
init|=
name|parser
operator|.
name|getString
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|equals
argument_list|(
name|UpdateRequestHandler
operator|.
name|ADD
argument_list|)
condition|)
block|{
name|int
name|ev2
init|=
name|parser
operator|.
name|nextEvent
argument_list|()
decl_stmt|;
if|if
condition|(
name|ev2
operator|==
name|JSONParser
operator|.
name|OBJECT_START
condition|)
block|{
name|processor
operator|.
name|processAdd
argument_list|(
name|parseAdd
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ev2
operator|==
name|JSONParser
operator|.
name|ARRAY_START
condition|)
block|{
name|handleAdds
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertEvent
argument_list|(
name|ev2
argument_list|,
name|JSONParser
operator|.
name|OBJECT_START
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|v
operator|.
name|equals
argument_list|(
name|UpdateRequestHandler
operator|.
name|COMMIT
argument_list|)
condition|)
block|{
name|CommitUpdateCommand
name|cmd
init|=
operator|new
name|CommitUpdateCommand
argument_list|(
name|req
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|waitSearcher
operator|=
literal|true
expr_stmt|;
name|parseCommitOptions
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|processor
operator|.
name|processCommit
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v
operator|.
name|equals
argument_list|(
name|UpdateRequestHandler
operator|.
name|OPTIMIZE
argument_list|)
condition|)
block|{
name|CommitUpdateCommand
name|cmd
init|=
operator|new
name|CommitUpdateCommand
argument_list|(
name|req
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|waitSearcher
operator|=
literal|true
expr_stmt|;
name|parseCommitOptions
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|processor
operator|.
name|processCommit
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v
operator|.
name|equals
argument_list|(
name|UpdateRequestHandler
operator|.
name|DELETE
argument_list|)
condition|)
block|{
name|handleDeleteCommand
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v
operator|.
name|equals
argument_list|(
name|UpdateRequestHandler
operator|.
name|ROLLBACK
argument_list|)
condition|)
block|{
name|processor
operator|.
name|processRollback
argument_list|(
name|parseRollback
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown command: "
operator|+
name|v
operator|+
literal|" ["
operator|+
name|parser
operator|.
name|getPosition
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
break|break;
block|}
comment|// fall through
case|case
name|JSONParser
operator|.
name|LONG
case|:
case|case
name|JSONParser
operator|.
name|NUMBER
case|:
case|case
name|JSONParser
operator|.
name|BIGNUMBER
case|:
case|case
name|JSONParser
operator|.
name|BOOLEAN
case|:
case|case
name|JSONParser
operator|.
name|NULL
case|:
name|log
operator|.
name|info
argument_list|(
literal|"can't have a value here! "
operator|+
name|JSONParser
operator|.
name|getEventString
argument_list|(
name|ev
argument_list|)
operator|+
literal|" "
operator|+
name|parser
operator|.
name|getPosition
argument_list|()
argument_list|)
expr_stmt|;
case|case
name|JSONParser
operator|.
name|OBJECT_START
case|:
case|case
name|JSONParser
operator|.
name|OBJECT_END
case|:
case|case
name|JSONParser
operator|.
name|ARRAY_END
case|:
break|break;
default|default:
name|log
operator|.
name|info
argument_list|(
literal|"Noggit UNKNOWN_EVENT_ID:"
operator|+
name|ev
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// read the next event
name|ev
operator|=
name|parser
operator|.
name|nextEvent
argument_list|()
expr_stmt|;
block|}
block|}
comment|//
comment|// "delete":"id"
comment|// "delete":["id1","id2"]
comment|// "delete":{"id":"foo"}
comment|// "delete":{"query":"myquery"}
comment|//
DECL|method|handleDeleteCommand
name|void
name|handleDeleteCommand
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|ev
init|=
name|parser
operator|.
name|nextEvent
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|ev
condition|)
block|{
case|case
name|JSONParser
operator|.
name|ARRAY_START
case|:
name|handleDeleteArray
argument_list|(
name|ev
argument_list|)
expr_stmt|;
break|break;
case|case
name|JSONParser
operator|.
name|OBJECT_START
case|:
name|handleDeleteMap
argument_list|(
name|ev
argument_list|)
expr_stmt|;
break|break;
default|default:
name|handleSingleDelete
argument_list|(
name|ev
argument_list|)
expr_stmt|;
block|}
block|}
comment|// returns the string value for a primitive value, or null for the null value
DECL|method|getString
name|String
name|getString
parameter_list|(
name|int
name|ev
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|ev
condition|)
block|{
case|case
name|JSONParser
operator|.
name|STRING
case|:
return|return
name|parser
operator|.
name|getString
argument_list|()
return|;
case|case
name|JSONParser
operator|.
name|BIGNUMBER
case|:
case|case
name|JSONParser
operator|.
name|NUMBER
case|:
case|case
name|JSONParser
operator|.
name|LONG
case|:
return|return
name|parser
operator|.
name|getNumberChars
argument_list|()
operator|.
name|toString
argument_list|()
return|;
case|case
name|JSONParser
operator|.
name|BOOLEAN
case|:
return|return
name|Boolean
operator|.
name|toString
argument_list|(
name|parser
operator|.
name|getBoolean
argument_list|()
argument_list|)
return|;
case|case
name|JSONParser
operator|.
name|NULL
case|:
return|return
literal|null
return|;
default|default:
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Expected primitive JSON value but got: "
operator|+
name|JSONParser
operator|.
name|getEventString
argument_list|(
name|ev
argument_list|)
operator|+
literal|" at ["
operator|+
name|parser
operator|.
name|getPosition
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|handleSingleDelete
name|void
name|handleSingleDelete
parameter_list|(
name|int
name|ev
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ev
operator|==
name|JSONParser
operator|.
name|OBJECT_START
condition|)
block|{
name|handleDeleteMap
argument_list|(
name|ev
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DeleteUpdateCommand
name|cmd
init|=
operator|new
name|DeleteUpdateCommand
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|commitWithin
operator|=
name|commitWithin
expr_stmt|;
name|String
name|id
init|=
name|getString
argument_list|(
name|ev
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|processor
operator|.
name|processDelete
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleDeleteArray
name|void
name|handleDeleteArray
parameter_list|(
name|int
name|ev
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|ev
operator|==
name|JSONParser
operator|.
name|ARRAY_START
assert|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|ev
operator|=
name|parser
operator|.
name|nextEvent
argument_list|()
expr_stmt|;
if|if
condition|(
name|ev
operator|==
name|JSONParser
operator|.
name|ARRAY_END
condition|)
return|return;
name|handleSingleDelete
argument_list|(
name|ev
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleDeleteMap
name|void
name|handleDeleteMap
parameter_list|(
name|int
name|ev
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|ev
operator|==
name|JSONParser
operator|.
name|OBJECT_START
assert|;
name|DeleteUpdateCommand
name|cmd
init|=
operator|new
name|DeleteUpdateCommand
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|commitWithin
operator|=
name|commitWithin
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|ev
operator|=
name|parser
operator|.
name|nextEvent
argument_list|()
expr_stmt|;
if|if
condition|(
name|ev
operator|==
name|JSONParser
operator|.
name|STRING
condition|)
block|{
name|String
name|key
init|=
name|parser
operator|.
name|getString
argument_list|()
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|wasKey
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"id"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|cmd
operator|.
name|setId
argument_list|(
name|getString
argument_list|(
name|parser
operator|.
name|nextEvent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"query"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|cmd
operator|.
name|setQuery
argument_list|(
name|parser
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"commitWithin"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|cmd
operator|.
name|commitWithin
operator|=
operator|(
name|int
operator|)
name|parser
operator|.
name|getLong
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_version_"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|cmd
operator|.
name|setVersion
argument_list|(
name|parser
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown key: "
operator|+
name|key
operator|+
literal|" ["
operator|+
name|parser
operator|.
name|getPosition
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"invalid string: "
operator|+
name|key
operator|+
literal|" at ["
operator|+
name|parser
operator|.
name|getPosition
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ev
operator|==
name|JSONParser
operator|.
name|OBJECT_END
condition|)
block|{
if|if
condition|(
name|cmd
operator|.
name|getId
argument_list|()
operator|==
literal|null
operator|&&
name|cmd
operator|.
name|getQuery
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Missing id or query for delete ["
operator|+
name|parser
operator|.
name|getPosition
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|processor
operator|.
name|processDelete
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Got: "
operator|+
name|JSONParser
operator|.
name|getEventString
argument_list|(
name|ev
argument_list|)
operator|+
literal|" at ["
operator|+
name|parser
operator|.
name|getPosition
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|parseRollback
name|RollbackUpdateCommand
name|parseRollback
parameter_list|()
throws|throws
name|IOException
block|{
name|assertNextEvent
argument_list|(
name|JSONParser
operator|.
name|OBJECT_START
argument_list|)
expr_stmt|;
name|assertNextEvent
argument_list|(
name|JSONParser
operator|.
name|OBJECT_END
argument_list|)
expr_stmt|;
return|return
operator|new
name|RollbackUpdateCommand
argument_list|(
name|req
argument_list|)
return|;
block|}
DECL|method|parseCommitOptions
name|void
name|parseCommitOptions
parameter_list|(
name|CommitUpdateCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|assertNextEvent
argument_list|(
name|JSONParser
operator|.
name|OBJECT_START
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
name|parser
argument_list|)
decl_stmt|;
comment|// SolrParams currently expects string values...
name|SolrParams
name|p
init|=
operator|new
name|SolrParams
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|String
name|param
parameter_list|)
block|{
name|Object
name|o
init|=
name|map
operator|.
name|get
argument_list|(
name|param
argument_list|)
decl_stmt|;
return|return
name|o
operator|==
literal|null
condition|?
literal|null
else|:
name|o
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getParams
parameter_list|(
name|String
name|param
parameter_list|)
block|{
return|return
operator|new
name|String
index|[]
block|{
name|get
argument_list|(
name|param
argument_list|)
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getParameterNamesIterator
parameter_list|()
block|{
return|return
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|RequestHandlerUtils
operator|.
name|validateCommitParams
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|p
argument_list|,
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
comment|// default to the normal request params for commit options
name|RequestHandlerUtils
operator|.
name|updateCommit
argument_list|(
name|cmd
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
DECL|method|parseAdd
name|AddUpdateCommand
name|parseAdd
parameter_list|()
throws|throws
name|IOException
block|{
name|AddUpdateCommand
name|cmd
init|=
operator|new
name|AddUpdateCommand
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|commitWithin
operator|=
name|commitWithin
expr_stmt|;
name|cmd
operator|.
name|overwrite
operator|=
name|overwrite
expr_stmt|;
name|float
name|boost
init|=
literal|1.0f
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|ev
init|=
name|parser
operator|.
name|nextEvent
argument_list|()
decl_stmt|;
if|if
condition|(
name|ev
operator|==
name|JSONParser
operator|.
name|STRING
condition|)
block|{
if|if
condition|(
name|parser
operator|.
name|wasKey
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|parser
operator|.
name|getString
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"doc"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
if|if
condition|(
name|cmd
operator|.
name|solrDoc
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"multiple docs in same add command"
argument_list|)
throw|;
block|}
name|ev
operator|=
name|assertNextEvent
argument_list|(
name|JSONParser
operator|.
name|OBJECT_START
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|solrDoc
operator|=
name|parseDoc
argument_list|(
name|ev
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|UpdateRequestHandler
operator|.
name|OVERWRITE
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|cmd
operator|.
name|overwrite
operator|=
name|parser
operator|.
name|getBoolean
argument_list|()
expr_stmt|;
comment|// reads next boolean
block|}
elseif|else
if|if
condition|(
name|UpdateRequestHandler
operator|.
name|COMMIT_WITHIN
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|cmd
operator|.
name|commitWithin
operator|=
operator|(
name|int
operator|)
name|parser
operator|.
name|getLong
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"boost"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|boost
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|parser
operator|.
name|getNumberChars
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown key: "
operator|+
name|key
operator|+
literal|" ["
operator|+
name|parser
operator|.
name|getPosition
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Should be a key "
operator|+
literal|" at ["
operator|+
name|parser
operator|.
name|getPosition
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ev
operator|==
name|JSONParser
operator|.
name|OBJECT_END
condition|)
block|{
if|if
condition|(
name|cmd
operator|.
name|solrDoc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"missing solr document. "
operator|+
name|parser
operator|.
name|getPosition
argument_list|()
argument_list|)
throw|;
block|}
name|cmd
operator|.
name|solrDoc
operator|.
name|setDocumentBoost
argument_list|(
name|boost
argument_list|)
expr_stmt|;
return|return
name|cmd
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Got: "
operator|+
name|JSONParser
operator|.
name|getEventString
argument_list|(
name|ev
argument_list|)
operator|+
literal|" at ["
operator|+
name|parser
operator|.
name|getPosition
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|handleAdds
name|void
name|handleAdds
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|AddUpdateCommand
name|cmd
init|=
operator|new
name|AddUpdateCommand
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|commitWithin
operator|=
name|commitWithin
expr_stmt|;
name|cmd
operator|.
name|overwrite
operator|=
name|overwrite
expr_stmt|;
name|int
name|ev
init|=
name|parser
operator|.
name|nextEvent
argument_list|()
decl_stmt|;
if|if
condition|(
name|ev
operator|==
name|JSONParser
operator|.
name|ARRAY_END
condition|)
break|break;
name|assertEvent
argument_list|(
name|ev
argument_list|,
name|JSONParser
operator|.
name|OBJECT_START
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|solrDoc
operator|=
name|parseDoc
argument_list|(
name|ev
argument_list|)
expr_stmt|;
name|processor
operator|.
name|processAdd
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertNextEvent
name|int
name|assertNextEvent
parameter_list|(
name|int
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|got
init|=
name|parser
operator|.
name|nextEvent
argument_list|()
decl_stmt|;
name|assertEvent
argument_list|(
name|got
argument_list|,
name|expected
argument_list|)
expr_stmt|;
return|return
name|got
return|;
block|}
DECL|method|assertEvent
name|void
name|assertEvent
parameter_list|(
name|int
name|ev
parameter_list|,
name|int
name|expected
parameter_list|)
block|{
if|if
condition|(
name|ev
operator|!=
name|expected
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Expected: "
operator|+
name|JSONParser
operator|.
name|getEventString
argument_list|(
name|expected
argument_list|)
operator|+
literal|" but got "
operator|+
name|JSONParser
operator|.
name|getEventString
argument_list|(
name|ev
argument_list|)
operator|+
literal|" at ["
operator|+
name|parser
operator|.
name|getPosition
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|parseDoc
specifier|private
name|SolrInputDocument
name|parseDoc
parameter_list|(
name|int
name|ev
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|ev
operator|==
name|JSONParser
operator|.
name|OBJECT_START
assert|;
name|SolrInputDocument
name|sdoc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|SolrInputField
name|sif
init|=
name|parseField
argument_list|()
decl_stmt|;
if|if
condition|(
name|sif
operator|==
literal|null
condition|)
return|return
name|sdoc
return|;
name|SolrInputField
name|prev
init|=
name|sdoc
operator|.
name|put
argument_list|(
name|sif
operator|.
name|getName
argument_list|()
argument_list|,
name|sif
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
comment|// blech - repeated keys
name|sif
operator|.
name|addValue
argument_list|(
name|prev
operator|.
name|getValue
argument_list|()
argument_list|,
name|prev
operator|.
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseField
specifier|private
name|SolrInputField
name|parseField
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|ev
init|=
name|parser
operator|.
name|nextEvent
argument_list|()
decl_stmt|;
if|if
condition|(
name|ev
operator|==
name|JSONParser
operator|.
name|OBJECT_END
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|fieldName
init|=
name|parser
operator|.
name|getString
argument_list|()
decl_stmt|;
name|SolrInputField
name|sif
init|=
operator|new
name|SolrInputField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|parseFieldValue
argument_list|(
name|sif
argument_list|)
expr_stmt|;
return|return
name|sif
return|;
block|}
DECL|method|parseFieldValue
specifier|private
name|void
name|parseFieldValue
parameter_list|(
name|SolrInputField
name|sif
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ev
init|=
name|parser
operator|.
name|nextEvent
argument_list|()
decl_stmt|;
if|if
condition|(
name|ev
operator|==
name|JSONParser
operator|.
name|OBJECT_START
condition|)
block|{
name|parseExtendedFieldValue
argument_list|(
name|sif
argument_list|,
name|ev
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|val
init|=
name|parseNormalFieldValue
argument_list|(
name|ev
argument_list|)
decl_stmt|;
name|sif
operator|.
name|setValue
argument_list|(
name|val
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseExtendedFieldValue
specifier|private
name|void
name|parseExtendedFieldValue
parameter_list|(
name|SolrInputField
name|sif
parameter_list|,
name|int
name|ev
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|ev
operator|==
name|JSONParser
operator|.
name|OBJECT_START
assert|;
name|float
name|boost
init|=
literal|1.0f
decl_stmt|;
name|Object
name|normalFieldValue
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|extendedInfo
init|=
literal|null
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|ev
operator|=
name|parser
operator|.
name|nextEvent
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|ev
condition|)
block|{
case|case
name|JSONParser
operator|.
name|STRING
case|:
name|String
name|label
init|=
name|parser
operator|.
name|getString
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"boost"
operator|.
name|equals
argument_list|(
name|label
argument_list|)
condition|)
block|{
name|ev
operator|=
name|parser
operator|.
name|nextEvent
argument_list|()
expr_stmt|;
if|if
condition|(
name|ev
operator|!=
name|JSONParser
operator|.
name|NUMBER
operator|&&
name|ev
operator|!=
name|JSONParser
operator|.
name|LONG
operator|&&
name|ev
operator|!=
name|JSONParser
operator|.
name|BIGNUMBER
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"boost should have number! "
operator|+
name|JSONParser
operator|.
name|getEventString
argument_list|(
name|ev
argument_list|)
argument_list|)
throw|;
block|}
name|boost
operator|=
operator|(
name|float
operator|)
name|parser
operator|.
name|getDouble
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"value"
operator|.
name|equals
argument_list|(
name|label
argument_list|)
condition|)
block|{
name|normalFieldValue
operator|=
name|parseNormalFieldValue
argument_list|(
name|parser
operator|.
name|nextEvent
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If we encounter other unknown map keys, then use a map
if|if
condition|(
name|extendedInfo
operator|==
literal|null
condition|)
block|{
name|extendedInfo
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
comment|// for now, the only extended info will be field values
comment|// we could either store this as an Object or a SolrInputField
name|Object
name|val
init|=
name|parseNormalFieldValue
argument_list|(
name|parser
operator|.
name|nextEvent
argument_list|()
argument_list|)
decl_stmt|;
name|extendedInfo
operator|.
name|put
argument_list|(
name|label
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|JSONParser
operator|.
name|OBJECT_END
case|:
if|if
condition|(
name|extendedInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|normalFieldValue
operator|!=
literal|null
condition|)
block|{
name|extendedInfo
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
name|normalFieldValue
argument_list|)
expr_stmt|;
block|}
name|sif
operator|.
name|setValue
argument_list|(
name|extendedInfo
argument_list|,
name|boost
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sif
operator|.
name|setValue
argument_list|(
name|normalFieldValue
argument_list|,
name|boost
argument_list|)
expr_stmt|;
block|}
return|return;
default|default:
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Error parsing JSON extended field value. Unexpected "
operator|+
name|JSONParser
operator|.
name|getEventString
argument_list|(
name|ev
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|parseNormalFieldValue
specifier|private
name|Object
name|parseNormalFieldValue
parameter_list|(
name|int
name|ev
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ev
operator|==
name|JSONParser
operator|.
name|ARRAY_START
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|val
init|=
name|parseArrayFieldValue
argument_list|(
name|ev
argument_list|)
decl_stmt|;
return|return
name|val
return|;
block|}
else|else
block|{
name|Object
name|val
init|=
name|parseSingleFieldValue
argument_list|(
name|ev
argument_list|)
decl_stmt|;
return|return
name|val
return|;
block|}
block|}
DECL|method|parseSingleFieldValue
specifier|private
name|Object
name|parseSingleFieldValue
parameter_list|(
name|int
name|ev
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|ev
condition|)
block|{
case|case
name|JSONParser
operator|.
name|STRING
case|:
return|return
name|parser
operator|.
name|getString
argument_list|()
return|;
case|case
name|JSONParser
operator|.
name|LONG
case|:
return|return
name|parser
operator|.
name|getLong
argument_list|()
return|;
case|case
name|JSONParser
operator|.
name|NUMBER
case|:
return|return
name|parser
operator|.
name|getDouble
argument_list|()
return|;
case|case
name|JSONParser
operator|.
name|BIGNUMBER
case|:
return|return
operator|(
operator|new
name|ObjectBuilder
argument_list|(
name|parser
argument_list|)
operator|)
operator|.
name|getBigNumber
argument_list|()
return|;
case|case
name|JSONParser
operator|.
name|BOOLEAN
case|:
return|return
name|parser
operator|.
name|getBoolean
argument_list|()
return|;
case|case
name|JSONParser
operator|.
name|NULL
case|:
name|parser
operator|.
name|getNull
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
case|case
name|JSONParser
operator|.
name|ARRAY_START
case|:
return|return
name|parseArrayFieldValue
argument_list|(
name|ev
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Error parsing JSON field value. Unexpected "
operator|+
name|JSONParser
operator|.
name|getEventString
argument_list|(
name|ev
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|parseArrayFieldValue
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|parseArrayFieldValue
parameter_list|(
name|int
name|ev
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|ev
operator|==
name|JSONParser
operator|.
name|ARRAY_START
assert|;
name|ArrayList
name|lst
init|=
operator|new
name|ArrayList
argument_list|(
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|ev
operator|=
name|parser
operator|.
name|nextEvent
argument_list|()
expr_stmt|;
if|if
condition|(
name|ev
operator|==
name|JSONParser
operator|.
name|ARRAY_END
condition|)
block|{
return|return
name|lst
return|;
block|}
name|Object
name|val
init|=
name|parseSingleFieldValue
argument_list|(
name|ev
argument_list|)
decl_stmt|;
name|lst
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
