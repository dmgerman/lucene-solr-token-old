begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.admin
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ZkController
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|OnReconnect
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|MapSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|RequestHandlerBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|JSONResponseWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|RawResponseWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|SimplePostTool
operator|.
name|BAOS
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|ByteBufferInputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|CharArr
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|OMIT_HEADER
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|PATH
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|WT
import|;
end_import
begin_comment
comment|/**  * Zookeeper Info  *  * @since solr 4.0  */
end_comment
begin_class
DECL|class|ZookeeperInfoHandler
specifier|public
specifier|final
class|class
name|ZookeeperInfoHandler
extends|extends
name|RequestHandlerBase
block|{
DECL|field|cores
specifier|private
specifier|final
name|CoreContainer
name|cores
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
comment|// used for custom sorting collection names looking like prefix##
comment|// only go out to 7 digits (which safely fits in an int)
DECL|field|endsWithDigits
specifier|private
specifier|static
specifier|final
name|Pattern
name|endsWithDigits
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(\\D*)(\\d{1,7}?)$"
argument_list|)
decl_stmt|;
DECL|method|ZookeeperInfoHandler
specifier|public
name|ZookeeperInfoHandler
parameter_list|(
name|CoreContainer
name|cc
parameter_list|)
block|{
name|this
operator|.
name|cores
operator|=
name|cc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Fetch Zookeeper contents"
return|;
block|}
comment|/**    * Enumeration of ways to filter collections on the graph panel.    */
DECL|enum|FilterType
specifier|static
enum|enum
name|FilterType
block|{
DECL|enum constant|none
DECL|enum constant|name
DECL|enum constant|status
name|none
block|,
name|name
block|,
name|status
block|}
comment|/**    * Holds state of a single page of collections requested from the cloud panel.    */
DECL|class|PageOfCollections
specifier|static
specifier|final
class|class
name|PageOfCollections
block|{
DECL|field|selected
name|List
argument_list|<
name|String
argument_list|>
name|selected
decl_stmt|;
DECL|field|numFound
name|int
name|numFound
init|=
literal|0
decl_stmt|;
comment|// total number of matches (across all pages)
DECL|field|start
name|int
name|start
init|=
literal|0
decl_stmt|;
DECL|field|rows
name|int
name|rows
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|filterType
name|FilterType
name|filterType
decl_stmt|;
DECL|field|filter
name|String
name|filter
decl_stmt|;
DECL|method|PageOfCollections
name|PageOfCollections
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|rows
parameter_list|,
name|FilterType
name|filterType
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
name|this
operator|.
name|filterType
operator|=
name|filterType
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
DECL|method|selectPage
name|void
name|selectPage
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|collections
parameter_list|)
block|{
name|numFound
operator|=
name|collections
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// start with full set and then find the sublist for the desired selected
name|selected
operator|=
name|collections
expr_stmt|;
if|if
condition|(
name|rows
operator|>
literal|0
condition|)
block|{
comment|// paging desired
if|if
condition|(
name|start
operator|>
name|numFound
condition|)
name|start
operator|=
literal|0
expr_stmt|;
comment|// this might happen if they applied a new filter
name|int
name|lastIndex
init|=
name|Math
operator|.
name|min
argument_list|(
name|start
operator|+
name|rows
argument_list|,
name|numFound
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|>
literal|0
operator|||
name|lastIndex
operator|<
name|numFound
condition|)
name|selected
operator|=
name|collections
operator|.
name|subList
argument_list|(
name|start
argument_list|,
name|lastIndex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Filters a list of collections by name if applicable.      */
DECL|method|applyNameFilter
name|List
argument_list|<
name|String
argument_list|>
name|applyNameFilter
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|collections
parameter_list|)
block|{
if|if
condition|(
name|filterType
operator|!=
name|FilterType
operator|.
name|name
operator|||
name|filter
operator|==
literal|null
condition|)
return|return
name|collections
return|;
comment|// name filter doesn't apply
comment|// typically, a user will type a prefix and then *, e.g. tj*
comment|// when they really mean tj.*
name|String
name|regexFilter
init|=
operator|(
operator|!
name|filter
operator|.
name|endsWith
argument_list|(
literal|".*"
argument_list|)
operator|&&
name|filter
operator|.
name|endsWith
argument_list|(
literal|"*"
argument_list|)
operator|)
condition|?
name|filter
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|filter
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
literal|".*"
else|:
name|filter
decl_stmt|;
comment|// case-insensitive
if|if
condition|(
operator|!
name|regexFilter
operator|.
name|startsWith
argument_list|(
literal|"(?i)"
argument_list|)
condition|)
name|regexFilter
operator|=
literal|"(?i)"
operator|+
name|regexFilter
expr_stmt|;
name|Pattern
name|filterRegex
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regexFilter
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|filtered
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|next
range|:
name|collections
control|)
block|{
if|if
condition|(
name|matches
argument_list|(
name|filterRegex
argument_list|,
name|next
argument_list|)
condition|)
name|filtered
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
return|return
name|filtered
return|;
block|}
comment|/**      * Walk the collection state JSON object to see if it has any replicas that match      * the state the user is filtering by.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|matchesStatusFilter
specifier|final
name|boolean
name|matchesStatusFilter
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collectionState
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
parameter_list|)
block|{
if|if
condition|(
name|filterType
operator|!=
name|FilterType
operator|.
name|status
operator|||
name|filter
operator|==
literal|null
operator|||
name|filter
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|true
return|;
comment|// no status filter, so all match
name|boolean
name|isHealthy
init|=
literal|true
decl_stmt|;
comment|// means all replicas for all shards active
name|boolean
name|hasDownedShard
init|=
literal|false
decl_stmt|;
comment|// means one or more shards is down
name|boolean
name|replicaInRecovery
init|=
literal|false
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|shards
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|collectionState
operator|.
name|get
argument_list|(
literal|"shards"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|shardId
range|:
name|shards
operator|.
name|keySet
argument_list|()
control|)
block|{
name|boolean
name|hasActive
init|=
literal|false
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|shard
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|shards
operator|.
name|get
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|replicas
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|shard
operator|.
name|get
argument_list|(
literal|"replicas"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|replicaId
range|:
name|replicas
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|replicaState
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|replicas
operator|.
name|get
argument_list|(
name|replicaId
argument_list|)
decl_stmt|;
name|Replica
operator|.
name|State
name|coreState
init|=
name|Replica
operator|.
name|State
operator|.
name|getState
argument_list|(
operator|(
name|String
operator|)
name|replicaState
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|nodeName
init|=
operator|(
name|String
operator|)
name|replicaState
operator|.
name|get
argument_list|(
literal|"node_name"
argument_list|)
decl_stmt|;
comment|// state can lie to you if the node is offline, so need to reconcile with live_nodes too
if|if
condition|(
operator|!
name|liveNodes
operator|.
name|contains
argument_list|(
name|nodeName
argument_list|)
condition|)
name|coreState
operator|=
name|Replica
operator|.
name|State
operator|.
name|DOWN
expr_stmt|;
comment|// not on a live node, so must be down
if|if
condition|(
name|coreState
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
condition|)
block|{
name|hasActive
operator|=
literal|true
expr_stmt|;
comment|// assumed no replicas active and found one that is for this shard
block|}
else|else
block|{
if|if
condition|(
name|coreState
operator|==
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
condition|)
block|{
name|replicaInRecovery
operator|=
literal|true
expr_stmt|;
block|}
name|isHealthy
operator|=
literal|false
expr_stmt|;
comment|// assumed healthy and found one replica that is not
block|}
block|}
if|if
condition|(
operator|!
name|hasActive
condition|)
name|hasDownedShard
operator|=
literal|true
expr_stmt|;
comment|// this is bad
block|}
if|if
condition|(
literal|"healthy"
operator|.
name|equals
argument_list|(
name|filter
argument_list|)
condition|)
block|{
return|return
name|isHealthy
return|;
block|}
elseif|else
if|if
condition|(
literal|"degraded"
operator|.
name|equals
argument_list|(
name|filter
argument_list|)
condition|)
block|{
return|return
operator|!
name|hasDownedShard
operator|&&
operator|!
name|isHealthy
return|;
comment|// means no shards offline but not 100% healthy either
block|}
elseif|else
if|if
condition|(
literal|"downed_shard"
operator|.
name|equals
argument_list|(
name|filter
argument_list|)
condition|)
block|{
return|return
name|hasDownedShard
return|;
block|}
elseif|else
if|if
condition|(
name|Replica
operator|.
name|State
operator|.
name|getState
argument_list|(
name|filter
argument_list|)
operator|==
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
condition|)
block|{
return|return
operator|!
name|isHealthy
operator|&&
name|replicaInRecovery
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|matches
specifier|final
name|boolean
name|matches
parameter_list|(
specifier|final
name|Pattern
name|filter
parameter_list|,
specifier|final
name|String
name|collName
parameter_list|)
block|{
return|return
name|filter
operator|.
name|matcher
argument_list|(
name|collName
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
DECL|method|getPagingHeader
name|String
name|getPagingHeader
parameter_list|()
block|{
return|return
name|start
operator|+
literal|"|"
operator|+
name|rows
operator|+
literal|"|"
operator|+
name|numFound
operator|+
literal|"|"
operator|+
operator|(
name|filterType
operator|!=
literal|null
condition|?
name|filterType
operator|.
name|toString
argument_list|()
else|:
literal|""
operator|)
operator|+
literal|"|"
operator|+
operator|(
name|filter
operator|!=
literal|null
condition|?
name|filter
else|:
literal|""
operator|)
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getPagingHeader
argument_list|()
return|;
block|}
block|}
comment|/**    * Supports paged navigation of collections on the cloud panel. To avoid serving    * stale collection data, this object watches the /collections znode, which will    * change if a collection is added or removed.    */
DECL|class|PagedCollectionSupport
specifier|static
specifier|final
class|class
name|PagedCollectionSupport
implements|implements
name|Watcher
implements|,
name|Comparator
argument_list|<
name|String
argument_list|>
implements|,
name|OnReconnect
block|{
comment|// this is the full merged list of collections from ZooKeeper
DECL|field|cachedCollections
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|cachedCollections
decl_stmt|;
comment|/**      * If the list of collections changes, mark the cache as stale.      */
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
comment|// session events are not change events, and do not remove the watcher
if|if
condition|(
name|Event
operator|.
name|EventType
operator|.
name|None
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|cachedCollections
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Create a merged view of all collections (internal from /clusterstate.json and external from /collections/?/state.json      */
DECL|method|getCollections
specifier|private
specifier|synchronized
name|List
argument_list|<
name|String
argument_list|>
name|getCollections
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|cachedCollections
operator|==
literal|null
condition|)
block|{
comment|// cache is stale, rebuild the full list ...
name|cachedCollections
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fromZk
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
literal|"/collections"
argument_list|,
name|this
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromZk
operator|!=
literal|null
condition|)
name|cachedCollections
operator|.
name|addAll
argument_list|(
name|fromZk
argument_list|)
expr_stmt|;
comment|// sort the final merged set of collections
name|Collections
operator|.
name|sort
argument_list|(
name|cachedCollections
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|cachedCollections
return|;
block|}
comment|/**      * Gets the requested page of collections after applying filters and offsets.      */
DECL|method|fetchPage
specifier|public
name|PageOfCollections
name|fetchPage
parameter_list|(
name|PageOfCollections
name|page
parameter_list|,
name|SolrZkClient
name|zkClient
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|getCollections
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|page
operator|.
name|selected
operator|=
name|children
expr_stmt|;
comment|// start with the page being the full list
comment|// activate paging (if disabled) for large collection sets
if|if
condition|(
name|page
operator|.
name|start
operator|==
literal|0
operator|&&
name|page
operator|.
name|rows
operator|==
operator|-
literal|1
operator|&&
name|page
operator|.
name|filter
operator|==
literal|null
operator|&&
name|children
operator|.
name|size
argument_list|()
operator|>
literal|10
condition|)
block|{
name|page
operator|.
name|rows
operator|=
literal|20
expr_stmt|;
name|page
operator|.
name|start
operator|=
literal|0
expr_stmt|;
block|}
comment|// apply the name filter if supplied (we don't need to pull state
comment|// data from ZK to do name filtering
if|if
condition|(
name|page
operator|.
name|filterType
operator|==
name|FilterType
operator|.
name|name
operator|&&
name|page
operator|.
name|filter
operator|!=
literal|null
condition|)
name|children
operator|=
name|page
operator|.
name|applyNameFilter
argument_list|(
name|children
argument_list|)
expr_stmt|;
comment|// a little hacky ... we can't select the page when filtering by
comment|// status until reading all status objects from ZK
if|if
condition|(
name|page
operator|.
name|filterType
operator|!=
name|FilterType
operator|.
name|status
condition|)
name|page
operator|.
name|selectPage
argument_list|(
name|children
argument_list|)
expr_stmt|;
return|return
name|page
return|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|left
parameter_list|,
name|String
name|right
parameter_list|)
block|{
if|if
condition|(
name|left
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|left
operator|.
name|equals
argument_list|(
name|right
argument_list|)
condition|)
return|return
literal|0
return|;
comment|// sort lexically unless the two collection names start with the same base prefix
comment|// and end in a number (which is a common enough naming scheme to have direct
comment|// support for it)
name|Matcher
name|leftMatcher
init|=
name|endsWithDigits
operator|.
name|matcher
argument_list|(
name|left
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|Matcher
name|rightMatcher
init|=
name|endsWithDigits
operator|.
name|matcher
argument_list|(
name|right
argument_list|)
decl_stmt|;
if|if
condition|(
name|rightMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|leftGroup1
init|=
name|leftMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|rightGroup1
init|=
name|rightMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftGroup1
operator|.
name|equals
argument_list|(
name|rightGroup1
argument_list|)
condition|)
block|{
comment|// both start with the same prefix ... compare indexes
comment|// using longs here as we don't know how long the 2nd group is
name|int
name|leftGroup2
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|leftMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|rightGroup2
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|rightMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|leftGroup2
operator|>
name|rightGroup2
operator|)
condition|?
literal|1
else|:
operator|(
operator|(
name|leftGroup2
operator|==
name|rightGroup2
operator|)
condition|?
literal|0
else|:
operator|-
literal|1
operator|)
return|;
block|}
block|}
block|}
return|return
name|left
operator|.
name|compareTo
argument_list|(
name|right
argument_list|)
return|;
block|}
comment|/**      * Called after a ZooKeeper session expiration occurs      */
annotation|@
name|Override
DECL|method|command
specifier|public
name|void
name|command
parameter_list|()
block|{
comment|// we need to re-establish the watcher on the collections list after session expires
synchronized|synchronized
init|(
name|this
init|)
block|{
name|cachedCollections
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|field|pagingSupport
specifier|private
name|PagedCollectionSupport
name|pagingSupport
decl_stmt|;
annotation|@
name|Override
DECL|method|handleRequestBody
specifier|public
name|void
name|handleRequestBody
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|WT
argument_list|,
literal|"raw"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|OMIT_HEADER
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|req
operator|.
name|setParams
argument_list|(
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
operator|new
name|MapSolrParams
argument_list|(
name|map
argument_list|)
argument_list|,
name|params
argument_list|)
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|pagingSupport
operator|==
literal|null
condition|)
block|{
name|pagingSupport
operator|=
operator|new
name|PagedCollectionSupport
argument_list|()
expr_stmt|;
name|ZkController
name|zkController
init|=
name|cores
operator|.
name|getZkController
argument_list|()
decl_stmt|;
if|if
condition|(
name|zkController
operator|!=
literal|null
condition|)
block|{
comment|// get notified when the ZK session expires (so we can clear the cached collections and rebuild)
name|zkController
operator|.
name|addOnReconnectListener
argument_list|(
name|pagingSupport
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|path
init|=
name|params
operator|.
name|get
argument_list|(
name|PATH
argument_list|)
decl_stmt|;
name|String
name|addr
init|=
name|params
operator|.
name|get
argument_list|(
literal|"addr"
argument_list|)
decl_stmt|;
if|if
condition|(
name|addr
operator|!=
literal|null
operator|&&
name|addr
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|addr
operator|=
literal|null
expr_stmt|;
block|}
name|String
name|detailS
init|=
name|params
operator|.
name|get
argument_list|(
literal|"detail"
argument_list|)
decl_stmt|;
name|boolean
name|detail
init|=
name|detailS
operator|!=
literal|null
operator|&&
name|detailS
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
decl_stmt|;
name|String
name|dumpS
init|=
name|params
operator|.
name|get
argument_list|(
literal|"dump"
argument_list|)
decl_stmt|;
name|boolean
name|dump
init|=
name|dumpS
operator|!=
literal|null
operator|&&
name|dumpS
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
decl_stmt|;
name|int
name|start
init|=
name|params
operator|.
name|getInt
argument_list|(
literal|"start"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|rows
init|=
name|params
operator|.
name|getInt
argument_list|(
literal|"rows"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|filterType
init|=
name|params
operator|.
name|get
argument_list|(
literal|"filterType"
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterType
operator|!=
literal|null
condition|)
block|{
name|filterType
operator|=
name|filterType
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
expr_stmt|;
if|if
condition|(
name|filterType
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|filterType
operator|=
literal|null
expr_stmt|;
block|}
name|FilterType
name|type
init|=
operator|(
name|filterType
operator|!=
literal|null
operator|)
condition|?
name|FilterType
operator|.
name|valueOf
argument_list|(
name|filterType
argument_list|)
else|:
name|FilterType
operator|.
name|none
decl_stmt|;
name|String
name|filter
init|=
operator|(
name|type
operator|!=
name|FilterType
operator|.
name|none
operator|)
condition|?
name|params
operator|.
name|get
argument_list|(
literal|"filter"
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|filter
operator|=
name|filter
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|filter
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|filter
operator|=
literal|null
expr_stmt|;
block|}
name|ZKPrinter
name|printer
init|=
operator|new
name|ZKPrinter
argument_list|(
name|cores
operator|.
name|getZkController
argument_list|()
argument_list|,
name|addr
argument_list|)
decl_stmt|;
name|printer
operator|.
name|detail
operator|=
name|detail
expr_stmt|;
name|printer
operator|.
name|dump
operator|=
name|dump
expr_stmt|;
name|boolean
name|isGraphView
init|=
literal|"graph"
operator|.
name|equals
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"view"
argument_list|)
argument_list|)
decl_stmt|;
name|printer
operator|.
name|page
operator|=
operator|(
name|isGraphView
operator|&&
literal|"/clusterstate.json"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|)
condition|?
operator|new
name|PageOfCollections
argument_list|(
name|start
argument_list|,
name|rows
argument_list|,
name|type
argument_list|,
name|filter
argument_list|)
else|:
literal|null
expr_stmt|;
name|printer
operator|.
name|pagingSupport
operator|=
name|pagingSupport
expr_stmt|;
try|try
block|{
name|printer
operator|.
name|print
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|printer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|add
argument_list|(
name|RawResponseWriter
operator|.
name|CONTENT
argument_list|,
name|printer
argument_list|)
expr_stmt|;
block|}
comment|//--------------------------------------------------------------------------------------
comment|//
comment|//--------------------------------------------------------------------------------------
DECL|class|ZKPrinter
specifier|static
class|class
name|ZKPrinter
implements|implements
name|ContentStream
block|{
DECL|field|FULLPATH_DEFAULT
specifier|static
name|boolean
name|FULLPATH_DEFAULT
init|=
literal|false
decl_stmt|;
DECL|field|indent
name|boolean
name|indent
init|=
literal|true
decl_stmt|;
DECL|field|fullpath
name|boolean
name|fullpath
init|=
name|FULLPATH_DEFAULT
decl_stmt|;
DECL|field|detail
name|boolean
name|detail
init|=
literal|false
decl_stmt|;
DECL|field|dump
name|boolean
name|dump
init|=
literal|false
decl_stmt|;
DECL|field|addr
name|String
name|addr
decl_stmt|;
comment|// the address passed to us
DECL|field|keeperAddr
name|String
name|keeperAddr
decl_stmt|;
comment|// the address we're connected to
DECL|field|doClose
name|boolean
name|doClose
decl_stmt|;
comment|// close the client after done if we opened it
DECL|field|baos
specifier|final
name|BAOS
name|baos
init|=
operator|new
name|BAOS
argument_list|()
decl_stmt|;
DECL|field|out
specifier|final
name|Writer
name|out
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|baos
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
DECL|field|zkClient
name|SolrZkClient
name|zkClient
decl_stmt|;
DECL|field|level
name|int
name|level
decl_stmt|;
DECL|field|maxData
name|int
name|maxData
init|=
literal|95
decl_stmt|;
DECL|field|page
name|PageOfCollections
name|page
decl_stmt|;
DECL|field|pagingSupport
name|PagedCollectionSupport
name|pagingSupport
decl_stmt|;
DECL|field|zkController
name|ZkController
name|zkController
decl_stmt|;
DECL|method|ZKPrinter
specifier|public
name|ZKPrinter
parameter_list|(
name|ZkController
name|controller
parameter_list|,
name|String
name|addr
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|zkController
operator|=
name|controller
expr_stmt|;
name|this
operator|.
name|addr
operator|=
name|addr
expr_stmt|;
if|if
condition|(
name|addr
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|controller
operator|!=
literal|null
condition|)
block|{
comment|// this core is zk enabled
name|keeperAddr
operator|=
name|controller
operator|.
name|getZkServerAddress
argument_list|()
expr_stmt|;
name|zkClient
operator|=
name|controller
operator|.
name|getZkClient
argument_list|()
expr_stmt|;
if|if
condition|(
name|zkClient
operator|!=
literal|null
operator|&&
name|zkClient
operator|.
name|isConnected
argument_list|()
condition|)
block|{
return|return;
block|}
else|else
block|{
comment|// try a different client with this address
name|addr
operator|=
name|keeperAddr
expr_stmt|;
block|}
block|}
block|}
name|keeperAddr
operator|=
name|addr
expr_stmt|;
if|if
condition|(
name|addr
operator|==
literal|null
condition|)
block|{
name|writeError
argument_list|(
literal|404
argument_list|,
literal|"Zookeeper is not configured for this Solr Core. Please try connecting to an alternate zookeeper address."
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|addr
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|doClose
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|writeError
argument_list|(
literal|503
argument_list|,
literal|"Could not connect to zookeeper at '"
operator|+
name|addr
operator|+
literal|"'\""
argument_list|)
expr_stmt|;
name|zkClient
operator|=
literal|null
expr_stmt|;
return|return;
block|}
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|doClose
condition|)
block|{
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// main entry point
DECL|method|print
name|void
name|print
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|zkClient
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// normalize path
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|path
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
block|}
if|if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|&&
name|path
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|int
name|idx
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|parent
init|=
name|idx
operator|>=
literal|0
condition|?
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
else|:
name|path
decl_stmt|;
if|if
condition|(
name|parent
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|parent
operator|=
literal|"/"
expr_stmt|;
block|}
name|CharArr
name|chars
init|=
operator|new
name|CharArr
argument_list|()
decl_stmt|;
name|JSONWriter
name|json
init|=
operator|new
name|JSONWriter
argument_list|(
name|chars
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|json
operator|.
name|startObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|detail
condition|)
block|{
if|if
condition|(
operator|!
name|printZnode
argument_list|(
name|json
argument_list|,
name|path
argument_list|)
condition|)
block|{
return|return;
block|}
name|json
operator|.
name|writeValueSeparator
argument_list|()
expr_stmt|;
block|}
name|json
operator|.
name|writeString
argument_list|(
literal|"tree"
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeNameSeparator
argument_list|()
expr_stmt|;
name|json
operator|.
name|startArray
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|printTree
argument_list|(
name|json
argument_list|,
name|path
argument_list|)
condition|)
block|{
return|return;
comment|// there was an error
block|}
name|json
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|chars
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|writeError
name|void
name|writeError
parameter_list|(
name|int
name|code
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|getErrorCode
argument_list|(
name|code
argument_list|)
argument_list|,
name|msg
argument_list|)
throw|;
comment|/*response.setStatus(code);        CharArr chars = new CharArr();       JSONWriter w = new JSONWriter(chars, 2);       w.startObject();       w.indent();       w.writeString("status");       w.writeNameSeparator();       w.write(code);       w.writeValueSeparator();       w.indent();       w.writeString("error");       w.writeNameSeparator();       w.writeString(msg);       w.endObject();        out.write(chars.toString());*/
block|}
DECL|method|printTree
name|boolean
name|printTree
parameter_list|(
name|JSONWriter
name|json
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|label
init|=
name|path
decl_stmt|;
if|if
condition|(
operator|!
name|fullpath
condition|)
block|{
name|int
name|idx
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|label
operator|=
name|idx
operator|>
literal|0
condition|?
name|path
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
else|:
name|path
expr_stmt|;
block|}
name|json
operator|.
name|startObject
argument_list|()
expr_stmt|;
comment|//writeKeyValue(json, "data", label, true );
name|json
operator|.
name|writeString
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeNameSeparator
argument_list|()
expr_stmt|;
name|json
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|writeKeyValue
argument_list|(
name|json
argument_list|,
literal|"title"
argument_list|,
name|label
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeValueSeparator
argument_list|()
expr_stmt|;
name|json
operator|.
name|writeString
argument_list|(
literal|"attr"
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeNameSeparator
argument_list|()
expr_stmt|;
name|json
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|writeKeyValue
argument_list|(
name|json
argument_list|,
literal|"href"
argument_list|,
literal|"admin/zookeeper?detail=true&path="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|path
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Trickily, the call to zkClient.getData fills in the stat variable
name|byte
index|[]
name|data
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|stat
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|.
name|getEphemeralOwner
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|writeKeyValue
argument_list|(
name|json
argument_list|,
literal|"ephemeral"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeKeyValue
argument_list|(
name|json
argument_list|,
literal|"version"
argument_list|,
name|stat
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dump
condition|)
block|{
name|json
operator|.
name|writeValueSeparator
argument_list|()
expr_stmt|;
name|printZnode
argument_list|(
name|json
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// path doesn't exist (must have been removed)
name|writeKeyValue
argument_list|(
name|json
argument_list|,
literal|"warning"
argument_list|,
literal|"(path gone)"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|writeKeyValue
argument_list|(
name|json
argument_list|,
literal|"warning"
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Keeper Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|writeKeyValue
argument_list|(
name|json
argument_list|,
literal|"warning"
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"InterruptedException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stat
operator|.
name|getNumChildren
argument_list|()
operator|>
literal|0
condition|)
block|{
name|json
operator|.
name|writeValueSeparator
argument_list|()
expr_stmt|;
if|if
condition|(
name|indent
condition|)
block|{
name|json
operator|.
name|indent
argument_list|()
expr_stmt|;
block|}
name|json
operator|.
name|writeString
argument_list|(
literal|"children"
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeNameSeparator
argument_list|()
expr_stmt|;
name|json
operator|.
name|startArray
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|sort
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|json
operator|.
name|writeValueSeparator
argument_list|()
expr_stmt|;
block|}
name|String
name|childPath
init|=
name|path
operator|+
operator|(
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
literal|""
else|:
literal|"/"
operator|)
operator|+
name|child
decl_stmt|;
if|if
condition|(
operator|!
name|printTree
argument_list|(
name|json
argument_list|,
name|childPath
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|writeError
argument_list|(
literal|500
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|writeError
argument_list|(
literal|500
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// path doesn't exist (must have been removed)
name|json
operator|.
name|writeString
argument_list|(
literal|"(children gone)"
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|time
name|String
name|time
parameter_list|(
name|long
name|ms
parameter_list|)
block|{
return|return
operator|(
operator|new
name|Date
argument_list|(
name|ms
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
operator|+
literal|" ("
operator|+
name|ms
operator|+
literal|")"
return|;
block|}
DECL|method|writeKeyValue
specifier|public
name|void
name|writeKeyValue
parameter_list|(
name|JSONWriter
name|json
parameter_list|,
name|String
name|k
parameter_list|,
name|Object
name|v
parameter_list|,
name|boolean
name|isFirst
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isFirst
condition|)
block|{
name|json
operator|.
name|writeValueSeparator
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|indent
condition|)
block|{
name|json
operator|.
name|indent
argument_list|()
expr_stmt|;
block|}
name|json
operator|.
name|writeString
argument_list|(
name|k
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeNameSeparator
argument_list|()
expr_stmt|;
name|json
operator|.
name|write
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|printZnode
name|boolean
name|printZnode
parameter_list|(
name|JSONWriter
name|json
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|String
name|dataStr
init|=
literal|null
decl_stmt|;
name|String
name|dataStrErr
init|=
literal|null
decl_stmt|;
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
comment|// Trickily, the call to zkClient.getData fills in the stat variable
name|byte
index|[]
name|data
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|stat
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|data
condition|)
block|{
try|try
block|{
name|dataStr
operator|=
operator|(
operator|new
name|BytesRef
argument_list|(
name|data
argument_list|)
operator|)
operator|.
name|utf8ToString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|dataStrErr
operator|=
literal|"data is not parsable as a utf8 String: "
operator|+
name|e
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
comment|// support paging of the collections graph view (in case there are many collections)
if|if
condition|(
name|page
operator|!=
literal|null
condition|)
block|{
comment|// we've already pulled the data for /clusterstate.json from ZooKeeper above,
comment|// but it needs to be parsed into a map so we can lookup collection states before
comment|// trying to find them in the /collections/?/state.json znode
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|clusterstateJsonMap
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dataStr
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|clusterstateJsonMap
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|dataStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Failed to parse /clusterstate.json from ZooKeeper due to: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|clusterstateJsonMap
operator|=
name|Utils
operator|.
name|makeMap
argument_list|()
expr_stmt|;
block|}
comment|// fetch the requested page of collections and then retrieve the state for each
name|page
operator|=
name|pagingSupport
operator|.
name|fetchPage
argument_list|(
name|page
argument_list|,
name|zkClient
argument_list|)
expr_stmt|;
comment|// keep track of how many collections match the filter
name|boolean
name|applyStatusFilter
init|=
operator|(
name|page
operator|.
name|filterType
operator|==
name|FilterType
operator|.
name|status
operator|&&
name|page
operator|.
name|filter
operator|!=
literal|null
operator|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|matchesStatusFilter
init|=
name|applyStatusFilter
condition|?
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
else|:
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
name|applyStatusFilter
condition|?
name|zkController
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
else|:
literal|null
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collectionStates
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|pagingSupport
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|collection
range|:
name|page
operator|.
name|selected
control|)
block|{
name|Object
name|collectionState
init|=
name|clusterstateJsonMap
operator|.
name|get
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|collectionState
operator|!=
literal|null
condition|)
block|{
comment|// collection state was in /clusterstate.json
if|if
condition|(
name|applyStatusFilter
condition|)
block|{
comment|// verify this collection matches the status filter
if|if
condition|(
name|page
operator|.
name|matchesStatusFilter
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|collectionState
argument_list|,
name|liveNodes
argument_list|)
condition|)
block|{
name|matchesStatusFilter
operator|.
name|add
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|collectionStates
operator|.
name|put
argument_list|(
name|collection
argument_list|,
name|collectionState
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|collectionStates
operator|.
name|put
argument_list|(
name|collection
argument_list|,
name|collectionState
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// looks like an external collection ...
name|String
name|collStatePath
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"/collections/%s/state.json"
argument_list|,
name|collection
argument_list|)
decl_stmt|;
name|String
name|childDataStr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|childData
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|collStatePath
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|childData
operator|!=
literal|null
condition|)
name|childDataStr
operator|=
operator|(
operator|new
name|BytesRef
argument_list|(
name|childData
argument_list|)
operator|)
operator|.
name|utf8ToString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|nne
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"State for collection "
operator|+
name|collection
operator|+
literal|" not found in /clusterstate.json or /collections/"
operator|+
name|collection
operator|+
literal|"/state.json!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|childErr
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to get "
operator|+
name|collStatePath
operator|+
literal|" due to: "
operator|+
name|childErr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|childDataStr
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|extColl
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|childDataStr
argument_list|)
decl_stmt|;
name|collectionState
operator|=
name|extColl
operator|.
name|get
argument_list|(
name|collection
argument_list|)
expr_stmt|;
if|if
condition|(
name|applyStatusFilter
condition|)
block|{
comment|// verify this collection matches the filtered state
if|if
condition|(
name|page
operator|.
name|matchesStatusFilter
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|collectionState
argument_list|,
name|liveNodes
argument_list|)
condition|)
block|{
name|matchesStatusFilter
operator|.
name|add
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|collectionStates
operator|.
name|put
argument_list|(
name|collection
argument_list|,
name|collectionState
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|collectionStates
operator|.
name|put
argument_list|(
name|collection
argument_list|,
name|collectionState
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|applyStatusFilter
condition|)
block|{
comment|// update the paged navigation info after applying the status filter
name|page
operator|.
name|selectPage
argument_list|(
name|matchesStatusFilter
argument_list|)
expr_stmt|;
comment|// rebuild the Map of state data
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|pagingSupport
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|next
range|:
name|page
operator|.
name|selected
control|)
name|map
operator|.
name|put
argument_list|(
name|next
argument_list|,
name|collectionStates
operator|.
name|get
argument_list|(
name|next
argument_list|)
argument_list|)
expr_stmt|;
name|collectionStates
operator|=
name|map
expr_stmt|;
block|}
if|if
condition|(
name|collectionStates
operator|!=
literal|null
condition|)
block|{
name|CharArr
name|out
init|=
operator|new
name|CharArr
argument_list|()
decl_stmt|;
operator|new
name|JSONWriter
argument_list|(
name|out
argument_list|,
literal|2
argument_list|)
operator|.
name|write
argument_list|(
name|collectionStates
argument_list|)
expr_stmt|;
name|dataStr
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
name|json
operator|.
name|writeString
argument_list|(
literal|"znode"
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeNameSeparator
argument_list|()
expr_stmt|;
name|json
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|writeKeyValue
argument_list|(
name|json
argument_list|,
name|PATH
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeValueSeparator
argument_list|()
expr_stmt|;
name|json
operator|.
name|writeString
argument_list|(
literal|"prop"
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeNameSeparator
argument_list|()
expr_stmt|;
name|json
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|writeKeyValue
argument_list|(
name|json
argument_list|,
literal|"version"
argument_list|,
name|stat
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writeKeyValue
argument_list|(
name|json
argument_list|,
literal|"aversion"
argument_list|,
name|stat
operator|.
name|getAversion
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeKeyValue
argument_list|(
name|json
argument_list|,
literal|"children_count"
argument_list|,
name|stat
operator|.
name|getNumChildren
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeKeyValue
argument_list|(
name|json
argument_list|,
literal|"ctime"
argument_list|,
name|time
argument_list|(
name|stat
operator|.
name|getCtime
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeKeyValue
argument_list|(
name|json
argument_list|,
literal|"cversion"
argument_list|,
name|stat
operator|.
name|getCversion
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeKeyValue
argument_list|(
name|json
argument_list|,
literal|"czxid"
argument_list|,
name|stat
operator|.
name|getCzxid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeKeyValue
argument_list|(
name|json
argument_list|,
literal|"ephemeralOwner"
argument_list|,
name|stat
operator|.
name|getEphemeralOwner
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeKeyValue
argument_list|(
name|json
argument_list|,
literal|"mtime"
argument_list|,
name|time
argument_list|(
name|stat
operator|.
name|getMtime
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeKeyValue
argument_list|(
name|json
argument_list|,
literal|"mzxid"
argument_list|,
name|stat
operator|.
name|getMzxid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeKeyValue
argument_list|(
name|json
argument_list|,
literal|"pzxid"
argument_list|,
name|stat
operator|.
name|getPzxid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeKeyValue
argument_list|(
name|json
argument_list|,
literal|"dataLength"
argument_list|,
name|stat
operator|.
name|getDataLength
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|dataStrErr
condition|)
block|{
name|writeKeyValue
argument_list|(
name|json
argument_list|,
literal|"dataNote"
argument_list|,
name|dataStrErr
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|dataStr
condition|)
block|{
name|writeKeyValue
argument_list|(
name|json
argument_list|,
literal|"data"
argument_list|,
name|dataStr
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|page
operator|!=
literal|null
condition|)
block|{
name|writeKeyValue
argument_list|(
name|json
argument_list|,
literal|"paging"
argument_list|,
name|page
operator|.
name|getPagingHeader
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|writeError
argument_list|(
literal|500
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|writeError
argument_list|(
literal|500
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/* @Override     public void write(OutputStream os) throws IOException {       ByteBuffer bytes = baos.getByteBuffer();       os.write(bytes.array(),0,bytes.limit());     } */
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getSourceInfo
specifier|public
name|String
name|getSourceInfo
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getContentType
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|JSONResponseWriter
operator|.
name|CONTENT_TYPE_JSON_UTF8
return|;
block|}
annotation|@
name|Override
DECL|method|getSize
specifier|public
name|Long
name|getSize
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getStream
specifier|public
name|InputStream
name|getStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ByteBufferInputStream
argument_list|(
name|baos
operator|.
name|getByteBuffer
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getReader
specifier|public
name|Reader
name|getReader
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class
end_unit
