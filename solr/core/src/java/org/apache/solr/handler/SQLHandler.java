begin_unit
begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|presto
operator|.
name|sql
operator|.
name|ExpressionFormatter
import|;
end_import
begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|presto
operator|.
name|sql
operator|.
name|tree
operator|.
name|*
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|ComparatorOrder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|StreamComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|MultiComp
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|CloudSolrStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|ParallelStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|RankStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|RollupStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|TupleStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|SolrCoreAware
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|*
import|;
end_import
begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|presto
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParser
import|;
end_import
begin_class
DECL|class|SQLHandler
specifier|public
class|class
name|SQLHandler
extends|extends
name|RequestHandlerBase
implements|implements
name|SolrCoreAware
block|{
DECL|field|tableMappings
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|TableSpec
argument_list|>
name|tableMappings
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
DECL|field|defaultZkhost
specifier|private
name|String
name|defaultZkhost
init|=
literal|null
decl_stmt|;
DECL|field|defaultWorkerCollection
specifier|private
name|String
name|defaultWorkerCollection
init|=
literal|null
decl_stmt|;
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|CoreContainer
name|coreContainer
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|coreContainer
operator|.
name|isZooKeeperAware
argument_list|()
condition|)
block|{
name|defaultZkhost
operator|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkServerAddress
argument_list|()
expr_stmt|;
name|defaultWorkerCollection
operator|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
expr_stmt|;
block|}
name|NamedList
argument_list|<
name|String
argument_list|>
name|tableConf
init|=
operator|(
name|NamedList
argument_list|<
name|String
argument_list|>
operator|)
name|initArgs
operator|.
name|get
argument_list|(
literal|"tables"
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|tableConf
control|)
block|{
name|String
name|tableName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"@"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|String
index|[]
name|parts
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|split
argument_list|(
literal|"@"
argument_list|)
decl_stmt|;
name|tableMappings
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
operator|new
name|TableSpec
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|collection
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|tableMappings
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
operator|new
name|TableSpec
argument_list|(
name|collection
argument_list|,
name|defaultZkhost
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|handleRequestBody
specifier|public
name|void
name|handleRequestBody
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|sql
init|=
name|params
operator|.
name|get
argument_list|(
literal|"sql"
argument_list|)
decl_stmt|;
name|int
name|numWorkers
init|=
name|params
operator|.
name|getInt
argument_list|(
literal|"numWorkers"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|workerCollection
init|=
name|params
operator|.
name|get
argument_list|(
literal|"workerCollection"
argument_list|,
name|defaultWorkerCollection
argument_list|)
decl_stmt|;
name|String
name|workerZkhost
init|=
name|params
operator|.
name|get
argument_list|(
literal|"workerZkhost"
argument_list|,
name|defaultZkhost
argument_list|)
decl_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|TupleStream
name|tupleStream
init|=
name|SQLTupleStreamParser
operator|.
name|parse
argument_list|(
name|sql
argument_list|,
name|tableMappings
argument_list|,
name|numWorkers
argument_list|,
name|workerCollection
argument_list|,
name|workerZkhost
argument_list|)
decl_stmt|;
name|context
operator|.
name|numWorkers
operator|=
name|numWorkers
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|StreamHandler
operator|.
name|clientCache
argument_list|)
expr_stmt|;
name|tupleStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"tuples"
argument_list|,
name|tupleStream
argument_list|)
expr_stmt|;
block|}
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"SQLHandler"
return|;
block|}
DECL|method|getSource
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|class|SQLTupleStreamParser
specifier|public
specifier|static
class|class
name|SQLTupleStreamParser
block|{
DECL|method|parse
specifier|public
specifier|static
name|TupleStream
name|parse
parameter_list|(
name|String
name|sql
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TableSpec
argument_list|>
name|tableMap
parameter_list|,
name|int
name|numWorkers
parameter_list|,
name|String
name|workerCollection
parameter_list|,
name|String
name|workerZkhost
parameter_list|)
throws|throws
name|IOException
block|{
name|SqlParser
name|parser
init|=
operator|new
name|SqlParser
argument_list|()
decl_stmt|;
name|Statement
name|statement
init|=
name|parser
operator|.
name|createStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|SQLVisitor
name|sqlVistor
init|=
operator|new
name|SQLVisitor
argument_list|(
operator|new
name|StringBuilder
argument_list|()
argument_list|)
decl_stmt|;
name|sqlVistor
operator|.
name|process
argument_list|(
name|statement
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|TupleStream
name|sqlStream
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sqlVistor
operator|.
name|groupByQuery
condition|)
block|{
name|sqlStream
operator|=
name|doGroupBy
argument_list|(
name|sqlVistor
argument_list|,
name|tableMap
argument_list|,
name|numWorkers
argument_list|,
name|workerCollection
argument_list|,
name|workerZkhost
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sqlStream
operator|=
name|doSelect
argument_list|(
name|sqlVistor
argument_list|,
name|tableMap
argument_list|,
name|numWorkers
argument_list|,
name|workerCollection
argument_list|,
name|workerZkhost
argument_list|)
expr_stmt|;
block|}
return|return
name|sqlStream
return|;
block|}
block|}
DECL|method|doGroupBy
specifier|private
specifier|static
name|TupleStream
name|doGroupBy
parameter_list|(
name|SQLVisitor
name|sqlVisitor
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TableSpec
argument_list|>
name|tableMap
parameter_list|,
name|int
name|numWorkers
parameter_list|,
name|String
name|workerCollection
parameter_list|,
name|String
name|workerZkHost
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|fieldSet
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|Bucket
index|[]
name|buckets
init|=
name|getBuckets
argument_list|(
name|sqlVisitor
operator|.
name|groupBy
argument_list|,
name|fieldSet
argument_list|)
decl_stmt|;
name|Metric
index|[]
name|metrics
init|=
name|getMetrics
argument_list|(
name|sqlVisitor
operator|.
name|fields
argument_list|,
name|fieldSet
argument_list|)
decl_stmt|;
name|String
name|fl
init|=
name|fields
argument_list|(
name|fieldSet
argument_list|)
decl_stmt|;
name|String
name|sortDirection
init|=
name|getSortDirection
argument_list|(
name|sqlVisitor
operator|.
name|sorts
argument_list|)
decl_stmt|;
name|String
name|sort
init|=
name|bucketSort
argument_list|(
name|buckets
argument_list|,
name|sortDirection
argument_list|)
decl_stmt|;
name|TableSpec
name|tableSpec
init|=
name|tableMap
operator|.
name|get
argument_list|(
name|sqlVisitor
operator|.
name|table
argument_list|)
decl_stmt|;
name|String
name|zkHost
init|=
name|tableSpec
operator|.
name|zkHost
decl_stmt|;
name|String
name|collection
init|=
name|tableSpec
operator|.
name|collection
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|,
name|fl
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
name|sqlVisitor
operator|.
name|query
argument_list|)
expr_stmt|;
comment|//Always use the /export handler for Group By Queries because it requires exporting full result sets.
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/export"
argument_list|)
expr_stmt|;
if|if
condition|(
name|numWorkers
operator|>
literal|1
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
literal|"partitionKeys"
argument_list|,
name|getPartitionKeys
argument_list|(
name|buckets
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|put
argument_list|(
literal|"sort"
argument_list|,
name|sort
argument_list|)
expr_stmt|;
name|TupleStream
name|tupleStream
init|=
literal|null
decl_stmt|;
name|CloudSolrStream
name|cstream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|collection
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|tupleStream
operator|=
operator|new
name|RollupStream
argument_list|(
name|cstream
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
if|if
condition|(
name|numWorkers
operator|>
literal|1
condition|)
block|{
comment|// Do the rollups in parallel
comment|// Maintain the sort of the Tuples coming from the workers.
name|Comparator
argument_list|<
name|Tuple
argument_list|>
name|comp
init|=
name|bucketSortComp
argument_list|(
name|buckets
argument_list|,
name|sortDirection
argument_list|)
decl_stmt|;
name|tupleStream
operator|=
operator|new
name|ParallelStream
argument_list|(
name|workerZkHost
argument_list|,
name|workerCollection
argument_list|,
name|tupleStream
argument_list|,
name|numWorkers
argument_list|,
name|comp
argument_list|)
expr_stmt|;
block|}
comment|//TODO: This should be done on the workers, but it won't serialize because it relies on Presto classes.
comment|// Once we make this a Expressionable the problem will be solved.
if|if
condition|(
name|sqlVisitor
operator|.
name|havingExpression
operator|!=
literal|null
condition|)
block|{
name|tupleStream
operator|=
operator|new
name|HavingStream
argument_list|(
name|tupleStream
argument_list|,
name|sqlVisitor
operator|.
name|havingExpression
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sqlVisitor
operator|.
name|sorts
operator|!=
literal|null
operator|&&
name|sqlVisitor
operator|.
name|sorts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|sortsEqual
argument_list|(
name|buckets
argument_list|,
name|sortDirection
argument_list|,
name|sqlVisitor
operator|.
name|sorts
argument_list|)
condition|)
block|{
name|int
name|limit
init|=
name|sqlVisitor
operator|.
name|limit
operator|==
operator|-
literal|1
condition|?
literal|100
else|:
name|sqlVisitor
operator|.
name|limit
decl_stmt|;
name|Comparator
argument_list|<
name|Tuple
argument_list|>
name|comp
init|=
name|getComp
argument_list|(
name|sqlVisitor
operator|.
name|sorts
argument_list|)
decl_stmt|;
comment|//Rank the Tuples
comment|//If parallel stream is used ALL the Rolled up tuples from the workers will be ranked
comment|//Providing a true Top or Bottom.
name|tupleStream
operator|=
operator|new
name|RankStream
argument_list|(
name|tupleStream
argument_list|,
name|limit
argument_list|,
name|comp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Sort is the same as the same as the underlying stream
comment|// Only need to limit the result, not Rank the result
if|if
condition|(
name|sqlVisitor
operator|.
name|limit
operator|>
operator|-
literal|1
condition|)
block|{
name|tupleStream
operator|=
operator|new
name|LimitStream
argument_list|(
name|tupleStream
argument_list|,
name|sqlVisitor
operator|.
name|limit
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|tupleStream
return|;
block|}
DECL|method|doSelect
specifier|private
specifier|static
name|TupleStream
name|doSelect
parameter_list|(
name|SQLVisitor
name|sqlVisitor
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TableSpec
argument_list|>
name|tableMap
parameter_list|,
name|int
name|numWorkers
parameter_list|,
name|String
name|workerCollection
parameter_list|,
name|String
name|workerZkHost
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|sqlVisitor
operator|.
name|fields
decl_stmt|;
name|StringBuilder
name|flbuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|comma
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|comma
condition|)
block|{
name|flbuf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|comma
operator|=
literal|true
expr_stmt|;
name|flbuf
operator|.
name|append
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
name|String
name|fl
init|=
name|flbuf
operator|.
name|toString
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SortItem
argument_list|>
name|sorts
init|=
name|sqlVisitor
operator|.
name|sorts
decl_stmt|;
name|StringBuilder
name|siBuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|comma
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|SortItem
name|sortItem
range|:
name|sorts
control|)
block|{
if|if
condition|(
name|comma
condition|)
block|{
name|siBuf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|siBuf
operator|.
name|append
argument_list|(
name|stripQuotes
argument_list|(
name|sortItem
operator|.
name|getSortKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|ascDesc
argument_list|(
name|sortItem
operator|.
name|getOrdering
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TableSpec
name|tableSpec
init|=
name|tableMap
operator|.
name|get
argument_list|(
name|sqlVisitor
operator|.
name|table
argument_list|)
decl_stmt|;
name|String
name|zkHost
init|=
name|tableSpec
operator|.
name|zkHost
decl_stmt|;
name|String
name|collection
init|=
name|tableSpec
operator|.
name|collection
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"fl"
argument_list|,
name|fl
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"q"
argument_list|,
name|sqlVisitor
operator|.
name|query
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"sort"
argument_list|,
name|siBuf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sqlVisitor
operator|.
name|limit
operator|>
operator|-
literal|1
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
literal|"rows"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|sqlVisitor
operator|.
name|limit
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|LimitStream
argument_list|(
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|collection
argument_list|,
name|params
argument_list|)
argument_list|,
name|sqlVisitor
operator|.
name|limit
argument_list|)
return|;
block|}
else|else
block|{
comment|//Only use the export handler when no limit is specified.
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/export"
argument_list|)
expr_stmt|;
return|return
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|collection
argument_list|,
name|params
argument_list|)
return|;
block|}
block|}
DECL|method|sortsEqual
specifier|private
specifier|static
name|boolean
name|sortsEqual
parameter_list|(
name|Bucket
index|[]
name|buckets
parameter_list|,
name|String
name|direction
parameter_list|,
name|List
argument_list|<
name|SortItem
argument_list|>
name|sortItems
parameter_list|)
block|{
if|if
condition|(
name|buckets
operator|.
name|length
operator|!=
name|sortItems
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Bucket
name|bucket
init|=
name|buckets
index|[
name|i
index|]
decl_stmt|;
name|SortItem
name|sortItem
init|=
name|sortItems
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bucket
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|stripQuotes
argument_list|(
name|sortItem
operator|.
name|getSortKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|sortItem
operator|.
name|getOrdering
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|direction
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|bucketSort
specifier|private
specifier|static
name|String
name|bucketSort
parameter_list|(
name|Bucket
index|[]
name|buckets
parameter_list|,
name|String
name|dir
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|comma
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Bucket
name|bucket
range|:
name|buckets
control|)
block|{
if|if
condition|(
name|comma
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|bucket
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|comma
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getPartitionKeys
specifier|private
specifier|static
name|String
name|getPartitionKeys
parameter_list|(
name|Bucket
index|[]
name|buckets
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|comma
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Bucket
name|bucket
range|:
name|buckets
control|)
block|{
if|if
condition|(
name|comma
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|bucket
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|comma
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getSortDirection
specifier|public
specifier|static
name|String
name|getSortDirection
parameter_list|(
name|List
argument_list|<
name|SortItem
argument_list|>
name|sorts
parameter_list|)
block|{
if|if
condition|(
name|sorts
operator|!=
literal|null
operator|&&
name|sorts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|SortItem
name|item
range|:
name|sorts
control|)
block|{
return|return
name|ascDesc
argument_list|(
name|stripQuotes
argument_list|(
name|item
operator|.
name|getOrdering
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
literal|"asc"
return|;
block|}
DECL|method|bucketSortComp
specifier|private
specifier|static
name|Comparator
argument_list|<
name|Tuple
argument_list|>
name|bucketSortComp
parameter_list|(
name|Bucket
index|[]
name|buckets
parameter_list|,
name|String
name|dir
parameter_list|)
block|{
name|Comparator
argument_list|<
name|Tuple
argument_list|>
index|[]
name|comps
init|=
operator|new
name|Comparator
index|[
name|buckets
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ComparatorOrder
name|comparatorOrder
init|=
name|ascDescComp
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|String
name|sortKey
init|=
name|buckets
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
decl_stmt|;
name|comps
index|[
name|i
index|]
operator|=
operator|new
name|StreamComparator
argument_list|(
name|stripQuotes
argument_list|(
name|sortKey
argument_list|)
argument_list|,
name|comparatorOrder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|comps
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|comps
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
operator|new
name|MultiComp
argument_list|(
name|comps
argument_list|)
return|;
block|}
block|}
DECL|method|getComp
specifier|private
specifier|static
name|Comparator
argument_list|<
name|Tuple
argument_list|>
name|getComp
parameter_list|(
name|List
argument_list|<
name|SortItem
argument_list|>
name|sortItems
parameter_list|)
block|{
name|Comparator
argument_list|<
name|Tuple
argument_list|>
index|[]
name|comps
init|=
operator|new
name|Comparator
index|[
name|sortItems
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortItems
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SortItem
name|sortItem
init|=
name|sortItems
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|ordering
init|=
name|sortItem
operator|.
name|getOrdering
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ComparatorOrder
name|comparatorOrder
init|=
name|ascDescComp
argument_list|(
name|ordering
argument_list|)
decl_stmt|;
name|String
name|sortKey
init|=
name|sortItem
operator|.
name|getSortKey
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|comps
index|[
name|i
index|]
operator|=
operator|new
name|StreamComparator
argument_list|(
name|stripQuotes
argument_list|(
name|sortKey
argument_list|)
argument_list|,
name|comparatorOrder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|comps
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|comps
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
operator|new
name|MultiComp
argument_list|(
name|comps
argument_list|)
return|;
block|}
block|}
DECL|method|fields
specifier|private
specifier|static
name|String
name|fields
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|fieldSet
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|comma
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fieldSet
control|)
block|{
if|if
condition|(
name|comma
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|comma
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getMetrics
specifier|private
specifier|static
name|Metric
index|[]
name|getMetrics
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|fieldSet
parameter_list|)
block|{
name|List
argument_list|<
name|Metric
argument_list|>
name|metrics
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|.
name|contains
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
name|field
operator|=
name|field
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|field
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|String
index|[]
name|parts
init|=
name|field
operator|.
name|split
argument_list|(
literal|"\\("
argument_list|)
decl_stmt|;
name|String
name|function
init|=
name|parts
index|[
literal|0
index|]
decl_stmt|;
name|String
name|column
init|=
name|parts
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|function
operator|.
name|equals
argument_list|(
literal|"min"
argument_list|)
condition|)
block|{
name|metrics
operator|.
name|add
argument_list|(
operator|new
name|MinMetric
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
name|fieldSet
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|.
name|equals
argument_list|(
literal|"max"
argument_list|)
condition|)
block|{
name|metrics
operator|.
name|add
argument_list|(
operator|new
name|MaxMetric
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
name|fieldSet
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|.
name|equals
argument_list|(
literal|"sum"
argument_list|)
condition|)
block|{
name|metrics
operator|.
name|add
argument_list|(
operator|new
name|SumMetric
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
name|fieldSet
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|.
name|equals
argument_list|(
literal|"avg"
argument_list|)
condition|)
block|{
name|metrics
operator|.
name|add
argument_list|(
operator|new
name|MeanMetric
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
name|fieldSet
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|.
name|equals
argument_list|(
literal|"count"
argument_list|)
condition|)
block|{
name|metrics
operator|.
name|add
argument_list|(
operator|new
name|CountMetric
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|metrics
operator|.
name|toArray
argument_list|(
operator|new
name|Metric
index|[
name|metrics
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|getBuckets
specifier|private
specifier|static
name|Bucket
index|[]
name|getBuckets
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|fieldSet
parameter_list|)
block|{
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|String
name|f
init|=
name|stripQuotes
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|buckets
operator|.
name|add
argument_list|(
operator|new
name|Bucket
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|fieldSet
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
return|return
name|buckets
operator|.
name|toArray
argument_list|(
operator|new
name|Bucket
index|[
name|buckets
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|ascDesc
specifier|private
specifier|static
name|String
name|ascDesc
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"desc"
argument_list|)
condition|)
block|{
return|return
literal|"desc"
return|;
block|}
else|else
block|{
return|return
literal|"asc"
return|;
block|}
block|}
DECL|method|ascDescComp
specifier|private
specifier|static
name|ComparatorOrder
name|ascDescComp
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"desc"
argument_list|)
condition|)
block|{
return|return
name|ComparatorOrder
operator|.
name|DESCENDING
return|;
block|}
else|else
block|{
return|return
name|ComparatorOrder
operator|.
name|ASCENDING
return|;
block|}
block|}
DECL|method|stripQuotes
specifier|private
specifier|static
name|String
name|stripQuotes
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|'"'
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|stripSingleQuotes
specifier|private
specifier|static
name|String
name|stripSingleQuotes
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|'\''
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|TableSpec
specifier|private
class|class
name|TableSpec
block|{
DECL|field|collection
specifier|private
name|String
name|collection
decl_stmt|;
DECL|field|zkHost
specifier|private
name|String
name|zkHost
decl_stmt|;
DECL|method|TableSpec
specifier|public
name|TableSpec
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|zkHost
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
name|this
operator|.
name|zkHost
operator|=
name|zkHost
expr_stmt|;
block|}
block|}
DECL|class|ExpressionVisitor
specifier|private
specifier|static
class|class
name|ExpressionVisitor
extends|extends
name|AstVisitor
argument_list|<
name|Void
argument_list|,
name|StringBuilder
argument_list|>
block|{
DECL|method|visitLogicalBinaryExpression
specifier|protected
name|Void
name|visitLogicalBinaryExpression
parameter_list|(
name|LogicalBinaryExpression
name|node
parameter_list|,
name|StringBuilder
name|buf
parameter_list|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|node
operator|.
name|getLeft
argument_list|()
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|node
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|node
operator|.
name|getRight
argument_list|()
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|visitNotExpression
specifier|protected
name|Void
name|visitNotExpression
parameter_list|(
name|NotExpression
name|node
parameter_list|,
name|StringBuilder
name|buf
parameter_list|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|node
operator|.
name|getValue
argument_list|()
argument_list|,
name|buf
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|visitComparisonExpression
specifier|protected
name|Void
name|visitComparisonExpression
parameter_list|(
name|ComparisonExpression
name|node
parameter_list|,
name|StringBuilder
name|buf
parameter_list|)
block|{
name|String
name|field
init|=
name|node
operator|.
name|getLeft
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|node
operator|.
name|getRight
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
operator|.
name|append
argument_list|(
name|stripQuotes
argument_list|(
name|field
argument_list|)
operator|+
literal|":"
operator|+
name|stripSingleQuotes
argument_list|(
name|value
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|class|SQLVisitor
specifier|static
class|class
name|SQLVisitor
extends|extends
name|AstVisitor
argument_list|<
name|Void
argument_list|,
name|Integer
argument_list|>
block|{
DECL|field|builder
specifier|private
specifier|final
name|StringBuilder
name|builder
decl_stmt|;
DECL|field|table
specifier|public
name|String
name|table
decl_stmt|;
DECL|field|fields
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|field|groupBy
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|groupBy
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|field|sorts
specifier|public
name|List
argument_list|<
name|SortItem
argument_list|>
name|sorts
decl_stmt|;
DECL|field|query
specifier|public
name|String
name|query
init|=
literal|"*:*"
decl_stmt|;
comment|//If no query is specified pull all the records
DECL|field|limit
specifier|public
name|int
name|limit
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|groupByQuery
specifier|public
name|boolean
name|groupByQuery
decl_stmt|;
DECL|field|havingExpression
specifier|public
name|Expression
name|havingExpression
decl_stmt|;
DECL|method|SQLVisitor
specifier|public
name|SQLVisitor
parameter_list|(
name|StringBuilder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
block|}
DECL|method|visitNode
specifier|protected
name|Void
name|visitNode
parameter_list|(
name|Node
name|node
parameter_list|,
name|Integer
name|indent
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"not yet implemented: "
operator|+
name|node
argument_list|)
throw|;
block|}
DECL|method|visitUnnest
specifier|protected
name|Void
name|visitUnnest
parameter_list|(
name|Unnest
name|node
parameter_list|,
name|Integer
name|indent
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|visitQuery
specifier|protected
name|Void
name|visitQuery
parameter_list|(
name|Query
name|node
parameter_list|,
name|Integer
name|indent
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getWith
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|With
name|confidence
init|=
operator|(
name|With
operator|)
name|node
operator|.
name|getWith
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|this
operator|.
name|append
argument_list|(
name|indent
operator|.
name|intValue
argument_list|()
argument_list|,
literal|"WITH"
argument_list|)
expr_stmt|;
if|if
condition|(
name|confidence
operator|.
name|isRecursive
argument_list|()
condition|)
block|{         }
name|Iterator
name|queries
init|=
name|confidence
operator|.
name|getQueries
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|queries
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|WithQuery
name|query
init|=
operator|(
name|WithQuery
operator|)
name|queries
operator|.
name|next
argument_list|()
decl_stmt|;
name|this
operator|.
name|process
argument_list|(
operator|new
name|TableSubquery
argument_list|(
name|query
operator|.
name|getQuery
argument_list|()
argument_list|)
argument_list|,
name|indent
argument_list|)
expr_stmt|;
if|if
condition|(
name|queries
operator|.
name|hasNext
argument_list|()
condition|)
block|{           }
block|}
block|}
name|this
operator|.
name|processRelation
argument_list|(
name|node
operator|.
name|getQueryBody
argument_list|()
argument_list|,
name|indent
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|getOrderBy
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|sorts
operator|=
name|node
operator|.
name|getOrderBy
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|getLimit
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{       }
if|if
condition|(
name|node
operator|.
name|getApproximate
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{        }
return|return
literal|null
return|;
block|}
DECL|method|visitQuerySpecification
specifier|protected
name|Void
name|visitQuerySpecification
parameter_list|(
name|QuerySpecification
name|node
parameter_list|,
name|Integer
name|indent
parameter_list|)
block|{
name|this
operator|.
name|process
argument_list|(
name|node
operator|.
name|getSelect
argument_list|()
argument_list|,
name|indent
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|getFrom
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|this
operator|.
name|process
argument_list|(
operator|(
name|Node
operator|)
name|node
operator|.
name|getFrom
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|indent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|getWhere
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|Expression
name|ex
init|=
name|node
operator|.
name|getWhere
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|ExpressionVisitor
name|expressionVisitor
init|=
operator|new
name|ExpressionVisitor
argument_list|()
decl_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|expressionVisitor
operator|.
name|process
argument_list|(
name|ex
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|buf
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|node
operator|.
name|getGroupBy
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|groupByQuery
operator|=
literal|true
expr_stmt|;
name|List
argument_list|<
name|Expression
argument_list|>
name|groups
init|=
name|node
operator|.
name|getGroupBy
argument_list|()
decl_stmt|;
for|for
control|(
name|Expression
name|group
range|:
name|groups
control|)
block|{
name|groupBy
operator|.
name|add
argument_list|(
name|stripQuotes
argument_list|(
name|group
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|node
operator|.
name|getHaving
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|this
operator|.
name|havingExpression
operator|=
name|node
operator|.
name|getHaving
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|node
operator|.
name|getOrderBy
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|sorts
operator|=
name|node
operator|.
name|getOrderBy
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|getLimit
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|this
operator|.
name|limit
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|stripQuotes
argument_list|(
name|node
operator|.
name|getLimit
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|visitComparisonExpression
specifier|protected
name|Void
name|visitComparisonExpression
parameter_list|(
name|ComparisonExpression
name|node
parameter_list|,
name|Integer
name|index
parameter_list|)
block|{
name|String
name|field
init|=
name|node
operator|.
name|getLeft
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|node
operator|.
name|getRight
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|query
operator|=
name|stripQuotes
argument_list|(
name|field
argument_list|)
operator|+
literal|":"
operator|+
name|stripQuotes
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|visitSelect
specifier|protected
name|Void
name|visitSelect
parameter_list|(
name|Select
name|node
parameter_list|,
name|Integer
name|indent
parameter_list|)
block|{
name|this
operator|.
name|append
argument_list|(
name|indent
operator|.
name|intValue
argument_list|()
argument_list|,
literal|"SELECT"
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|isDistinct
argument_list|()
condition|)
block|{        }
if|if
condition|(
name|node
operator|.
name|getSelectItems
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|var4
init|=
name|node
operator|.
name|getSelectItems
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|var4
operator|.
name|hasNext
argument_list|()
condition|;
name|first
operator|=
literal|false
control|)
block|{
name|SelectItem
name|item
init|=
operator|(
name|SelectItem
operator|)
name|var4
operator|.
name|next
argument_list|()
decl_stmt|;
name|this
operator|.
name|process
argument_list|(
name|item
argument_list|,
name|indent
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|process
argument_list|(
operator|(
name|Node
operator|)
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|node
operator|.
name|getSelectItems
argument_list|()
argument_list|)
argument_list|,
name|indent
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|visitSingleColumn
specifier|protected
name|Void
name|visitSingleColumn
parameter_list|(
name|SingleColumn
name|node
parameter_list|,
name|Integer
name|indent
parameter_list|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|stripQuotes
argument_list|(
name|ExpressionFormatter
operator|.
name|formatExpression
argument_list|(
name|node
operator|.
name|getExpression
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|getAlias
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{       }
return|return
literal|null
return|;
block|}
DECL|method|visitAllColumns
specifier|protected
name|Void
name|visitAllColumns
parameter_list|(
name|AllColumns
name|node
parameter_list|,
name|Integer
name|context
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|visitTable
specifier|protected
name|Void
name|visitTable
parameter_list|(
name|Table
name|node
parameter_list|,
name|Integer
name|indent
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|node
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|visitAliasedRelation
specifier|protected
name|Void
name|visitAliasedRelation
parameter_list|(
name|AliasedRelation
name|node
parameter_list|,
name|Integer
name|indent
parameter_list|)
block|{
name|this
operator|.
name|process
argument_list|(
name|node
operator|.
name|getRelation
argument_list|()
argument_list|,
name|indent
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|visitValues
specifier|protected
name|Void
name|visitValues
parameter_list|(
name|Values
name|node
parameter_list|,
name|Integer
name|indent
parameter_list|)
block|{
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|var4
init|=
name|node
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|var4
operator|.
name|hasNext
argument_list|()
condition|;
name|first
operator|=
literal|false
control|)
block|{
name|Expression
name|row
init|=
operator|(
name|Expression
operator|)
name|var4
operator|.
name|next
argument_list|()
decl_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|processRelation
specifier|private
name|void
name|processRelation
parameter_list|(
name|Relation
name|relation
parameter_list|,
name|Integer
name|indent
parameter_list|)
block|{
if|if
condition|(
name|relation
operator|instanceof
name|Table
condition|)
block|{       }
else|else
block|{
name|this
operator|.
name|process
argument_list|(
name|relation
argument_list|,
name|indent
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|append
specifier|private
name|StringBuilder
name|append
parameter_list|(
name|int
name|indent
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|this
operator|.
name|builder
operator|.
name|append
argument_list|(
name|indentString
argument_list|(
name|indent
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|indentString
specifier|private
specifier|static
name|String
name|indentString
parameter_list|(
name|int
name|indent
parameter_list|)
block|{
return|return
name|Strings
operator|.
name|repeat
argument_list|(
literal|"   "
argument_list|,
name|indent
argument_list|)
return|;
block|}
block|}
DECL|class|LimitStream
specifier|private
specifier|static
class|class
name|LimitStream
extends|extends
name|TupleStream
block|{
DECL|field|stream
specifier|private
name|TupleStream
name|stream
decl_stmt|;
DECL|field|limit
specifier|private
name|int
name|limit
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
decl_stmt|;
DECL|method|LimitStream
specifier|public
name|LimitStream
parameter_list|(
name|TupleStream
name|stream
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|this
operator|.
name|stream
operator|=
name|stream
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
block|}
DECL|method|open
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|stream
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|children
specifier|public
name|List
argument_list|<
name|TupleStream
argument_list|>
name|children
parameter_list|()
block|{
name|List
argument_list|<
name|TupleStream
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|stream
argument_list|)
expr_stmt|;
return|return
name|children
return|;
block|}
DECL|method|setStreamContext
specifier|public
name|void
name|setStreamContext
parameter_list|(
name|StreamContext
name|context
parameter_list|)
block|{
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|read
specifier|public
name|Tuple
name|read
parameter_list|()
throws|throws
name|IOException
block|{
operator|++
name|count
expr_stmt|;
if|if
condition|(
name|count
operator|>
name|limit
condition|)
block|{
name|Map
name|fields
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
literal|"EOF"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
operator|new
name|Tuple
argument_list|(
name|fields
argument_list|)
return|;
block|}
name|Tuple
name|tuple
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
return|return
name|tuple
return|;
block|}
block|}
DECL|class|HavingStream
specifier|public
specifier|static
class|class
name|HavingStream
extends|extends
name|TupleStream
block|{
DECL|field|stream
specifier|private
name|TupleStream
name|stream
decl_stmt|;
DECL|field|havingVisitor
specifier|private
name|HavingVisitor
name|havingVisitor
decl_stmt|;
DECL|field|havingExpression
specifier|private
name|Expression
name|havingExpression
decl_stmt|;
DECL|method|HavingStream
specifier|public
name|HavingStream
parameter_list|(
name|TupleStream
name|stream
parameter_list|,
name|Expression
name|havingExpression
parameter_list|)
block|{
name|this
operator|.
name|stream
operator|=
name|stream
expr_stmt|;
name|this
operator|.
name|havingVisitor
operator|=
operator|new
name|HavingVisitor
argument_list|()
expr_stmt|;
name|this
operator|.
name|havingExpression
operator|=
name|havingExpression
expr_stmt|;
block|}
DECL|method|open
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|stream
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|children
specifier|public
name|List
argument_list|<
name|TupleStream
argument_list|>
name|children
parameter_list|()
block|{
name|List
argument_list|<
name|TupleStream
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|stream
argument_list|)
expr_stmt|;
return|return
name|children
return|;
block|}
DECL|method|setStreamContext
specifier|public
name|void
name|setStreamContext
parameter_list|(
name|StreamContext
name|context
parameter_list|)
block|{
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|read
specifier|public
name|Tuple
name|read
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Tuple
name|tuple
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|tuple
operator|.
name|EOF
condition|)
block|{
return|return
name|tuple
return|;
block|}
if|if
condition|(
name|havingVisitor
operator|.
name|process
argument_list|(
name|havingExpression
argument_list|,
name|tuple
argument_list|)
condition|)
block|{
return|return
name|tuple
return|;
block|}
block|}
block|}
block|}
DECL|class|HavingVisitor
specifier|private
specifier|static
class|class
name|HavingVisitor
extends|extends
name|AstVisitor
argument_list|<
name|Boolean
argument_list|,
name|Tuple
argument_list|>
block|{
DECL|method|visitLogicalBinaryExpression
specifier|protected
name|Boolean
name|visitLogicalBinaryExpression
parameter_list|(
name|LogicalBinaryExpression
name|node
parameter_list|,
name|Tuple
name|tuple
parameter_list|)
block|{
name|Boolean
name|b
init|=
name|process
argument_list|(
name|node
operator|.
name|getLeft
argument_list|()
argument_list|,
name|tuple
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getType
argument_list|()
operator|==
name|LogicalBinaryExpression
operator|.
name|Type
operator|.
name|AND
condition|)
block|{
if|if
condition|(
operator|!
name|b
condition|)
block|{
comment|//Short circuit
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|process
argument_list|(
name|node
operator|.
name|getRight
argument_list|()
argument_list|,
name|tuple
argument_list|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|b
condition|)
block|{
comment|//Short circuit
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|process
argument_list|(
name|node
operator|.
name|getRight
argument_list|()
argument_list|,
name|tuple
argument_list|)
return|;
block|}
block|}
block|}
DECL|method|visitComparisonExpression
specifier|protected
name|Boolean
name|visitComparisonExpression
parameter_list|(
name|ComparisonExpression
name|node
parameter_list|,
name|Tuple
name|tuple
parameter_list|)
block|{
name|String
name|field
init|=
name|stripQuotes
argument_list|(
name|node
operator|.
name|getLeft
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|d
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|node
operator|.
name|getRight
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|td
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|ComparisonExpression
operator|.
name|Type
name|t
init|=
name|node
operator|.
name|getType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|LESS_THAN
case|:
return|return
name|td
operator|<
name|d
return|;
case|case
name|LESS_THAN_OR_EQUAL
case|:
return|return
name|td
operator|<=
name|d
return|;
case|case
name|NOT_EQUAL
case|:
return|return
name|td
operator|!=
name|d
return|;
case|case
name|EQUAL
case|:
return|return
name|td
operator|==
name|d
return|;
case|case
name|GREATER_THAN
case|:
return|return
name|td
operator|<=
name|d
return|;
case|case
name|GREATER_THAN_OR_EQUAL
case|:
return|return
name|td
operator|<=
name|d
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
end_class
end_unit
