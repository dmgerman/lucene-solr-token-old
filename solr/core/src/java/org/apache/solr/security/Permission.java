begin_unit
begin_package
DECL|package|org.apache.solr.security
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import
begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import
begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|NAME
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|Permission
class|class
name|Permission
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|path
DECL|field|role
DECL|field|collections
DECL|field|method
name|Set
argument_list|<
name|String
argument_list|>
name|path
decl_stmt|,
name|role
decl_stmt|,
name|collections
decl_stmt|,
name|method
decl_stmt|;
DECL|field|params
name|Map
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|String
index|[]
argument_list|,
name|Boolean
argument_list|>
argument_list|>
name|params
decl_stmt|;
DECL|field|wellknownName
name|PermissionNameProvider
operator|.
name|Name
name|wellknownName
decl_stmt|;
DECL|field|originalConfig
name|Map
name|originalConfig
decl_stmt|;
DECL|method|Permission
specifier|private
name|Permission
parameter_list|()
block|{   }
DECL|method|load
specifier|static
name|Permission
name|load
parameter_list|(
name|Map
name|m
parameter_list|)
block|{
name|Permission
name|p
init|=
operator|new
name|Permission
argument_list|()
decl_stmt|;
name|p
operator|.
name|originalConfig
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|String
name|name
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|containsKey
argument_list|(
literal|"role"
argument_list|)
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"role not specified"
argument_list|)
throw|;
name|p
operator|.
name|role
operator|=
name|readValueAsSet
argument_list|(
name|m
argument_list|,
literal|"role"
argument_list|)
expr_stmt|;
if|if
condition|(
name|PermissionNameProvider
operator|.
name|Name
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|wellknownName
operator|=
name|PermissionNameProvider
operator|.
name|Name
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|disAllowed
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|knownKeys
argument_list|)
decl_stmt|;
name|disAllowed
operator|.
name|remove
argument_list|(
literal|"role"
argument_list|)
expr_stmt|;
comment|//these are the only
name|disAllowed
operator|.
name|remove
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
comment|//allowed keys for well-known permissions
name|disAllowed
operator|.
name|remove
argument_list|(
literal|"collection"
argument_list|)
expr_stmt|;
comment|//allowed keys for well-known permissions
name|disAllowed
operator|.
name|remove
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|disAllowed
control|)
block|{
if|if
condition|(
name|m
operator|.
name|containsKey
argument_list|(
name|s
argument_list|)
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|s
operator|+
literal|" is not a valid key for the permission : "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
name|p
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|p
operator|.
name|path
operator|=
name|readSetSmart
argument_list|(
name|name
argument_list|,
name|m
argument_list|,
literal|"path"
argument_list|)
expr_stmt|;
name|p
operator|.
name|collections
operator|=
name|readSetSmart
argument_list|(
name|name
argument_list|,
name|m
argument_list|,
literal|"collection"
argument_list|)
expr_stmt|;
name|p
operator|.
name|method
operator|=
name|readSetSmart
argument_list|(
name|name
argument_list|,
name|m
argument_list|,
literal|"method"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|paramRules
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"params"
argument_list|)
decl_stmt|;
if|if
condition|(
name|paramRules
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|params
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|paramRules
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
name|p
operator|.
name|params
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
parameter_list|(
name|String
index|[]
name|val
parameter_list|)
lambda|->
name|val
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|patternStrs
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|instanceof
name|List
condition|?
operator|(
name|List
operator|)
name|e
operator|.
name|getValue
argument_list|()
else|:
name|singletonList
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|List
name|patterns
init|=
name|patternStrs
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|it
lambda|->
name|it
operator|.
name|startsWith
argument_list|(
literal|"REGEX:"
argument_list|)
condition|?
name|Pattern
operator|.
name|compile
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|it
operator|.
name|substring
argument_list|(
literal|"REGEX:"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
else|:
name|it
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|.
name|params
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|val
lambda|->
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|Object
name|pattern
range|:
name|patterns
control|)
block|{
for|for
control|(
name|String
name|s
range|:
name|val
control|)
block|{
if|if
condition|(
name|pattern
operator|instanceof
name|String
condition|)
block|{
if|if
condition|(
name|pattern
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|pattern
operator|instanceof
name|Pattern
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|Pattern
operator|)
name|pattern
operator|)
operator|.
name|matcher
argument_list|(
name|s
argument_list|)
operator|.
name|find
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|p
return|;
block|}
comment|/**    * This checks for the defaults available other rules for the keys    */
DECL|method|readSetSmart
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|readSetSmart
parameter_list|(
name|String
name|permissionName
parameter_list|,
name|Map
name|m
parameter_list|,
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|PermissionNameProvider
operator|.
name|values
operator|.
name|containsKey
argument_list|(
name|permissionName
argument_list|)
operator|&&
operator|!
name|m
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
operator|&&
literal|"collection"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|PermissionNameProvider
operator|.
name|Name
operator|.
name|get
argument_list|(
name|permissionName
argument_list|)
operator|.
name|collName
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|readValueAsSet
argument_list|(
name|m
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"method"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
if|if
condition|(
name|set
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|set
control|)
if|if
condition|(
operator|!
name|HTTP_METHODS
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
return|return
literal|null
return|;
block|}
return|return
name|set
return|;
block|}
return|return
name|set
operator|==
literal|null
condition|?
name|singleton
argument_list|(
literal|null
argument_list|)
else|:
name|set
return|;
block|}
comment|/**    * read a key value as a set. if the value is a single string ,    * return a singleton set    *    * @param m   the map from which to lookup    * @param key the key with which to do lookup    */
DECL|method|readValueAsSet
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|readValueAsSet
parameter_list|(
name|Map
name|m
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|m
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
if|if
condition|(
literal|"collection"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|//for collection collection: null means a core admin/ collection admin request
comment|// otherwise it means a request where collection name is ignored
return|return
name|m
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|?
name|singleton
argument_list|(
literal|null
argument_list|)
else|:
name|singleton
argument_list|(
literal|"*"
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
if|if
condition|(
name|val
operator|instanceof
name|Collection
condition|)
block|{
name|Collection
name|list
init|=
operator|(
name|Collection
operator|)
name|val
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|list
control|)
name|result
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|String
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Bad value for : "
operator|+
name|key
argument_list|)
throw|;
block|}
return|return
name|result
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|result
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Utils
operator|.
name|toJSONString
argument_list|(
name|originalConfig
argument_list|)
return|;
block|}
DECL|field|knownKeys
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|knownKeys
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"collection"
argument_list|,
literal|"role"
argument_list|,
literal|"params"
argument_list|,
literal|"path"
argument_list|,
literal|"method"
argument_list|,
name|NAME
argument_list|,
literal|"index"
argument_list|)
decl_stmt|;
DECL|field|HTTP_METHODS
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|HTTP_METHODS
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"GET"
argument_list|,
literal|"POST"
argument_list|,
literal|"DELETE"
argument_list|,
literal|"PUT"
argument_list|,
literal|"HEAD"
argument_list|)
decl_stmt|;
block|}
end_class
end_unit
