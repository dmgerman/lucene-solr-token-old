begin_unit
begin_package
DECL|package|org.apache.solr.security
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|CommandOperation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|SecurityConfHandler
operator|.
name|getListValue
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|SecurityConfHandler
operator|.
name|getMapValue
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|NAME
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
operator|.
name|getDeepCopy
import|;
end_import
begin_class
DECL|class|RuleBasedAuthorizationPlugin
specifier|public
class|class
name|RuleBasedAuthorizationPlugin
implements|implements
name|AuthorizationPlugin
implements|,
name|ConfigEditablePlugin
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|usersVsRoles
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|usersVsRoles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|mapping
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|WildCardSupportMap
argument_list|>
name|mapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|permissions
specifier|private
specifier|final
name|List
argument_list|<
name|Permission
argument_list|>
name|permissions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|class|WildCardSupportMap
specifier|private
specifier|static
class|class
name|WildCardSupportMap
extends|extends
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Permission
argument_list|>
argument_list|>
block|{
DECL|field|wildcardPrefixes
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|wildcardPrefixes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|put
specifier|public
name|List
argument_list|<
name|Permission
argument_list|>
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|Permission
argument_list|>
name|value
parameter_list|)
block|{
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
name|key
operator|.
name|endsWith
argument_list|(
literal|"/*"
argument_list|)
condition|)
block|{
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|key
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|wildcardPrefixes
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|List
argument_list|<
name|Permission
argument_list|>
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|List
argument_list|<
name|Permission
argument_list|>
name|result
init|=
name|super
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
operator|||
name|result
operator|!=
literal|null
condition|)
return|return
name|result
return|;
if|if
condition|(
operator|!
name|wildcardPrefixes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|wildcardPrefixes
control|)
block|{
if|if
condition|(
name|key
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Permission
argument_list|>
name|l
init|=
name|super
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|result
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<>
argument_list|()
else|:
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|authorize
specifier|public
name|AuthorizationResponse
name|authorize
parameter_list|(
name|AuthorizationContext
name|context
parameter_list|)
block|{
name|List
argument_list|<
name|AuthorizationContext
operator|.
name|CollectionRequest
argument_list|>
name|collectionRequests
init|=
name|context
operator|.
name|getCollectionRequests
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getRequestType
argument_list|()
operator|==
name|AuthorizationContext
operator|.
name|RequestType
operator|.
name|ADMIN
condition|)
block|{
name|MatchStatus
name|flag
init|=
name|checkCollPerm
argument_list|(
name|mapping
operator|.
name|get
argument_list|(
literal|""
argument_list|)
argument_list|,
name|context
argument_list|)
decl_stmt|;
return|return
name|flag
operator|.
name|rsp
return|;
block|}
for|for
control|(
name|AuthorizationContext
operator|.
name|CollectionRequest
name|collreq
range|:
name|collectionRequests
control|)
block|{
comment|//check permissions for each collection
name|MatchStatus
name|flag
init|=
name|checkCollPerm
argument_list|(
name|mapping
operator|.
name|get
argument_list|(
name|collreq
operator|.
name|collectionName
argument_list|)
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|flag
operator|!=
name|MatchStatus
operator|.
name|NO_PERMISSIONS_FOUND
condition|)
return|return
name|flag
operator|.
name|rsp
return|;
block|}
comment|//check global permissions.
name|MatchStatus
name|flag
init|=
name|checkCollPerm
argument_list|(
name|mapping
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|,
name|context
argument_list|)
decl_stmt|;
return|return
name|flag
operator|.
name|rsp
return|;
block|}
DECL|method|checkCollPerm
specifier|private
name|MatchStatus
name|checkCollPerm
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Permission
argument_list|>
argument_list|>
name|pathVsPerms
parameter_list|,
name|AuthorizationContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|pathVsPerms
operator|==
literal|null
condition|)
return|return
name|MatchStatus
operator|.
name|NO_PERMISSIONS_FOUND
return|;
name|String
name|path
init|=
name|context
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|MatchStatus
name|flag
init|=
name|checkPathPerm
argument_list|(
name|pathVsPerms
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|flag
operator|!=
name|MatchStatus
operator|.
name|NO_PERMISSIONS_FOUND
condition|)
return|return
name|flag
return|;
return|return
name|checkPathPerm
argument_list|(
name|pathVsPerms
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|method|checkPathPerm
specifier|private
name|MatchStatus
name|checkPathPerm
parameter_list|(
name|List
argument_list|<
name|Permission
argument_list|>
name|permissions
parameter_list|,
name|AuthorizationContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|permissions
operator|==
literal|null
operator|||
name|permissions
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|MatchStatus
operator|.
name|NO_PERMISSIONS_FOUND
return|;
name|Principal
name|principal
init|=
name|context
operator|.
name|getUserPrincipal
argument_list|()
decl_stmt|;
name|loopPermissions
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|permissions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Permission
name|permission
init|=
name|permissions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|permission
operator|.
name|method
operator|!=
literal|null
operator|&&
operator|!
name|permission
operator|.
name|method
operator|.
name|contains
argument_list|(
name|context
operator|.
name|getHttpMethod
argument_list|()
argument_list|)
condition|)
block|{
comment|//this permissions HTTP method does not match this rule. try other rules
continue|continue;
block|}
if|if
condition|(
name|permission
operator|.
name|predicate
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|permission
operator|.
name|predicate
operator|.
name|test
argument_list|(
name|context
argument_list|)
condition|)
continue|continue ;
block|}
if|if
condition|(
name|permission
operator|.
name|params
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|permission
operator|.
name|params
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|paramVal
init|=
name|context
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|val
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|List
condition|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|List
operator|)
name|val
operator|)
operator|.
name|contains
argument_list|(
name|paramVal
argument_list|)
condition|)
continue|continue
name|loopPermissions
continue|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|val
argument_list|,
name|paramVal
argument_list|)
condition|)
continue|continue
name|loopPermissions
continue|;
block|}
block|}
if|if
condition|(
name|permission
operator|.
name|role
operator|==
literal|null
condition|)
block|{
comment|//no role is assigned permission.That means everybody is allowed to access
return|return
name|MatchStatus
operator|.
name|PERMITTED
return|;
block|}
if|if
condition|(
name|principal
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"request has come without principal. failed permission {} "
argument_list|,
name|permission
argument_list|)
expr_stmt|;
comment|//this resource needs a principal but the request has come without
comment|//any credential.
return|return
name|MatchStatus
operator|.
name|USER_REQUIRED
return|;
block|}
for|for
control|(
name|String
name|role
range|:
name|permission
operator|.
name|role
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|userRoles
init|=
name|usersVsRoles
operator|.
name|get
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|userRoles
operator|!=
literal|null
operator|&&
name|userRoles
operator|.
name|contains
argument_list|(
name|role
argument_list|)
condition|)
return|return
name|MatchStatus
operator|.
name|PERMITTED
return|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"This resource is configured to have a permission {}, The principal {} does not have the right role "
argument_list|,
name|permission
argument_list|,
name|principal
argument_list|)
expr_stmt|;
return|return
name|MatchStatus
operator|.
name|FORBIDDEN
return|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"No permissions configured for the resource {} . So allowed to access"
argument_list|,
name|context
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|MatchStatus
operator|.
name|NO_PERMISSIONS_FOUND
return|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|initInfo
parameter_list|)
block|{
name|mapping
operator|.
name|put
argument_list|(
literal|null
argument_list|,
operator|new
name|WildCardSupportMap
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|getMapValue
argument_list|(
name|initInfo
argument_list|,
literal|"user-role"
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
operator|.
name|Entry
name|e
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|o
decl_stmt|;
name|String
name|roleName
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|usersVsRoles
operator|.
name|put
argument_list|(
name|roleName
argument_list|,
name|readValueAsSet
argument_list|(
name|map
argument_list|,
name|roleName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Map
argument_list|>
name|perms
init|=
name|getListValue
argument_list|(
name|initInfo
argument_list|,
literal|"permissions"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
name|o
range|:
name|perms
control|)
block|{
name|Permission
name|p
decl_stmt|;
try|try
block|{
name|p
operator|=
name|Permission
operator|.
name|load
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exp
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid permission "
argument_list|,
name|exp
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|permissions
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|add2Mapping
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
comment|//this is to do optimized lookup of permissions for a given collection/path
DECL|method|add2Mapping
specifier|private
name|void
name|add2Mapping
parameter_list|(
name|Permission
name|permission
parameter_list|)
block|{
for|for
control|(
name|String
name|c
range|:
name|permission
operator|.
name|collections
control|)
block|{
name|WildCardSupportMap
name|m
init|=
name|mapping
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
name|mapping
operator|.
name|put
argument_list|(
name|c
argument_list|,
name|m
operator|=
operator|new
name|WildCardSupportMap
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
name|permission
operator|.
name|path
control|)
block|{
name|List
argument_list|<
name|Permission
argument_list|>
name|perms
init|=
name|m
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|perms
operator|==
literal|null
condition|)
name|m
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|perms
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|perms
operator|.
name|add
argument_list|(
name|permission
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * read a key value as a set. if the value is a single string ,    * return a singleton set    *    * @param m   the map from which to lookup    * @param key the key with which to do lookup    */
DECL|method|readValueAsSet
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|readValueAsSet
parameter_list|(
name|Map
name|m
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|m
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
if|if
condition|(
literal|"collection"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|//for collection collection: null means a core admin/ collection admin request
comment|// otherwise it means a request where collection name is ignored
return|return
name|m
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|?
name|singleton
argument_list|(
literal|""
argument_list|)
else|:
name|singleton
argument_list|(
literal|null
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
if|if
condition|(
name|val
operator|instanceof
name|Collection
condition|)
block|{
name|Collection
name|list
init|=
operator|(
name|Collection
operator|)
name|val
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|list
control|)
name|result
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|String
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Bad value for : "
operator|+
name|key
argument_list|)
throw|;
block|}
return|return
name|result
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|result
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{ }
DECL|class|Permission
specifier|static
class|class
name|Permission
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|path
DECL|field|role
DECL|field|collections
DECL|field|method
name|Set
argument_list|<
name|String
argument_list|>
name|path
decl_stmt|,
name|role
decl_stmt|,
name|collections
decl_stmt|,
name|method
decl_stmt|;
DECL|field|params
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
decl_stmt|;
DECL|field|predicate
name|Predicate
argument_list|<
name|AuthorizationContext
argument_list|>
name|predicate
decl_stmt|;
DECL|method|Permission
specifier|private
name|Permission
parameter_list|()
block|{     }
DECL|method|load
specifier|static
name|Permission
name|load
parameter_list|(
name|Map
name|m
parameter_list|)
block|{
name|Permission
name|p
init|=
operator|new
name|Permission
argument_list|()
decl_stmt|;
name|String
name|name
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|containsKey
argument_list|(
literal|"role"
argument_list|)
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"role not specified"
argument_list|)
throw|;
name|p
operator|.
name|role
operator|=
name|readValueAsSet
argument_list|(
name|m
argument_list|,
literal|"role"
argument_list|)
expr_stmt|;
if|if
condition|(
name|well_known_permissions
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|disAllowed
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|knownKeys
argument_list|)
decl_stmt|;
name|disAllowed
operator|.
name|remove
argument_list|(
literal|"role"
argument_list|)
expr_stmt|;
comment|//these are the only
name|disAllowed
operator|.
name|remove
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
comment|//allowed keys for well-known permissions
for|for
control|(
name|String
name|s
range|:
name|disAllowed
control|)
block|{
if|if
condition|(
name|m
operator|.
name|containsKey
argument_list|(
name|s
argument_list|)
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|s
operator|+
literal|" is not a valid key for the permission : "
operator|+
name|name
argument_list|)
throw|;
block|}
name|p
operator|.
name|predicate
operator|=
call|(
name|Predicate
argument_list|<
name|AuthorizationContext
argument_list|>
call|)
argument_list|(
operator|(
name|Map
operator|)
name|well_known_permissions
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|Predicate
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|=
name|well_known_permissions
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|p
operator|.
name|path
operator|=
name|readSetSmart
argument_list|(
name|name
argument_list|,
name|m
argument_list|,
literal|"path"
argument_list|)
expr_stmt|;
name|p
operator|.
name|collections
operator|=
name|readSetSmart
argument_list|(
name|name
argument_list|,
name|m
argument_list|,
literal|"collection"
argument_list|)
expr_stmt|;
name|p
operator|.
name|method
operator|=
name|readSetSmart
argument_list|(
name|name
argument_list|,
name|m
argument_list|,
literal|"method"
argument_list|)
expr_stmt|;
name|p
operator|.
name|params
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"params"
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
DECL|field|knownKeys
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|knownKeys
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"collection"
argument_list|,
literal|"role"
argument_list|,
literal|"params"
argument_list|,
literal|"path"
argument_list|,
literal|"method"
argument_list|,
name|NAME
argument_list|)
decl_stmt|;
block|}
DECL|enum|MatchStatus
enum|enum
name|MatchStatus
block|{
DECL|enum constant|USER_REQUIRED
name|USER_REQUIRED
parameter_list|(
name|AuthorizationResponse
operator|.
name|PROMPT
parameter_list|)
operator|,
constructor|NO_PERMISSIONS_FOUND(AuthorizationResponse.OK
DECL|enum constant|NO_PERMISSIONS_FOUND
block|)
enum|,
DECL|enum constant|PERMITTED
name|PERMITTED
parameter_list|(
name|AuthorizationResponse
operator|.
name|OK
parameter_list|)
operator|,
constructor|FORBIDDEN(AuthorizationResponse.FORBIDDEN
DECL|enum constant|FORBIDDEN
block|)
class|;
end_class
begin_decl_stmt
DECL|field|rsp
specifier|final
name|AuthorizationResponse
name|rsp
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|method|MatchStatus
name|MatchStatus
argument_list|(
name|AuthorizationResponse
name|rsp
argument_list|)
block|{
name|this
operator|.
name|rsp
operator|=
name|rsp
block|;     }
end_expr_stmt
begin_comment
unit|}
comment|/**    * This checks for the defaults available other rules for the keys    */
end_comment
begin_function
unit|private
DECL|method|readSetSmart
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|readSetSmart
parameter_list|(
name|String
name|permissionName
parameter_list|,
name|Map
name|m
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|readValueAsSet
argument_list|(
name|m
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|==
literal|null
operator|&&
name|well_known_permissions
operator|.
name|containsKey
argument_list|(
name|permissionName
argument_list|)
condition|)
block|{
name|set
operator|=
name|readValueAsSet
argument_list|(
operator|(
name|Map
operator|)
name|well_known_permissions
operator|.
name|get
argument_list|(
name|permissionName
argument_list|)
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"method"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
if|if
condition|(
name|set
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|set
control|)
if|if
condition|(
operator|!
name|HTTP_METHODS
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
return|return
literal|null
return|;
block|}
return|return
name|set
return|;
block|}
return|return
name|set
operator|==
literal|null
condition|?
name|singleton
argument_list|(
literal|null
argument_list|)
else|:
name|set
return|;
block|}
end_function
begin_function
annotation|@
name|Override
DECL|method|edit
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|edit
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|latestConf
parameter_list|,
name|List
argument_list|<
name|CommandOperation
argument_list|>
name|commands
parameter_list|)
block|{
for|for
control|(
name|CommandOperation
name|op
range|:
name|commands
control|)
block|{
name|OPERATION
name|operation
init|=
literal|null
decl_stmt|;
for|for
control|(
name|OPERATION
name|o
range|:
name|OPERATION
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|o
operator|.
name|name
operator|.
name|equals
argument_list|(
name|op
operator|.
name|name
argument_list|)
condition|)
block|{
name|operation
operator|=
name|o
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|operation
operator|==
literal|null
condition|)
block|{
name|op
operator|.
name|unknownOperation
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|latestConf
operator|=
name|operation
operator|.
name|edit
argument_list|(
name|latestConf
argument_list|,
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|latestConf
operator|==
literal|null
condition|)
return|return
literal|null
return|;
block|}
return|return
name|latestConf
return|;
block|}
end_function
begin_enum
DECL|enum|OPERATION
enum|enum
name|OPERATION
block|{
DECL|enum constant|SET_USER_ROLE
name|SET_USER_ROLE
argument_list|(
literal|"set-user-role"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|edit
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|latestConf
parameter_list|,
name|CommandOperation
name|op
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|roleMap
init|=
name|getMapValue
argument_list|(
name|latestConf
argument_list|,
literal|"user-role"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|op
operator|.
name|getDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|hasError
argument_list|()
condition|)
return|return
literal|null
return|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
name|roleMap
operator|.
name|remove
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
operator|||
name|e
operator|.
name|getValue
argument_list|()
operator|instanceof
name|List
condition|)
block|{
name|roleMap
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|op
operator|.
name|addError
argument_list|(
literal|"Unexpected value "
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|return
name|latestConf
return|;
block|}
block|}
block|,
DECL|enum constant|SET_PERMISSION
name|SET_PERMISSION
argument_list|(
literal|"set-permission"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|edit
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|latestConf
parameter_list|,
name|CommandOperation
name|op
parameter_list|)
block|{
name|String
name|name
init|=
name|op
operator|.
name|getStr
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|dataMap
init|=
name|op
operator|.
name|getDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|hasError
argument_list|()
condition|)
return|return
literal|null
return|;
name|dataMap
operator|=
name|getDeepCopy
argument_list|(
name|dataMap
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|String
name|before
init|=
operator|(
name|String
operator|)
name|dataMap
operator|.
name|remove
argument_list|(
literal|"before"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|dataMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Permission
operator|.
name|knownKeys
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
name|op
operator|.
name|addError
argument_list|(
literal|"Unknown key, "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Permission
operator|.
name|load
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|op
operator|.
name|addError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Map
argument_list|>
name|permissions
init|=
name|getListValue
argument_list|(
name|latestConf
argument_list|,
literal|"permissions"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|permissionsCopy
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|added
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
name|e
range|:
name|permissions
control|)
block|{
name|Object
name|n
init|=
name|e
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|equals
argument_list|(
name|before
argument_list|)
operator|||
name|n
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|added
operator|=
literal|true
expr_stmt|;
name|permissionsCopy
operator|.
name|add
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|n
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
name|permissionsCopy
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|added
operator|&&
name|before
operator|!=
literal|null
condition|)
block|{
name|op
operator|.
name|addError
argument_list|(
literal|"Invalid 'before' :"
operator|+
name|before
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|added
condition|)
name|permissionsCopy
operator|.
name|add
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
name|latestConf
operator|.
name|put
argument_list|(
literal|"permissions"
argument_list|,
name|permissionsCopy
argument_list|)
expr_stmt|;
return|return
name|latestConf
return|;
block|}
block|}
block|,
DECL|enum constant|UPDATE_PERMISSION
name|UPDATE_PERMISSION
argument_list|(
literal|"update-permission"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|edit
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|latestConf
parameter_list|,
name|CommandOperation
name|op
parameter_list|)
block|{
name|String
name|name
init|=
name|op
operator|.
name|getStr
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|hasError
argument_list|()
condition|)
return|return
literal|null
return|;
for|for
control|(
name|Map
name|permission
range|:
operator|(
name|List
argument_list|<
name|Map
argument_list|>
operator|)
name|getListValue
argument_list|(
name|latestConf
argument_list|,
literal|"permissions"
argument_list|)
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|permission
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
argument_list|)
condition|)
block|{
name|LinkedHashMap
name|copy
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|permission
argument_list|)
decl_stmt|;
name|copy
operator|.
name|putAll
argument_list|(
name|op
operator|.
name|getDataMap
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|.
name|setCommandData
argument_list|(
name|copy
argument_list|)
expr_stmt|;
return|return
name|SET_PERMISSION
operator|.
name|edit
argument_list|(
name|latestConf
argument_list|,
name|op
argument_list|)
return|;
block|}
block|}
name|op
operator|.
name|addError
argument_list|(
literal|"No such permission "
operator|+
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|,
DECL|enum constant|DELETE_PERMISSION
name|DELETE_PERMISSION
argument_list|(
literal|"delete-permission"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|edit
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|latestConf
parameter_list|,
name|CommandOperation
name|op
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|op
operator|.
name|getStrs
argument_list|(
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|==
literal|null
operator|||
name|names
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|op
operator|.
name|addError
argument_list|(
literal|"Invalid command"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|names
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|copy
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|p
init|=
name|getListValue
argument_list|(
name|latestConf
argument_list|,
literal|"permissions"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
name|map
range|:
name|p
control|)
block|{
name|Object
name|n
init|=
name|map
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|contains
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|names
operator|.
name|remove
argument_list|(
name|n
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|copy
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|names
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|op
operator|.
name|addError
argument_list|(
literal|"Unknown permission name(s) "
operator|+
name|names
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|latestConf
operator|.
name|put
argument_list|(
literal|"permissions"
argument_list|,
name|copy
argument_list|)
expr_stmt|;
return|return
name|latestConf
return|;
block|}
block|}
block|;
DECL|method|edit
specifier|public
specifier|abstract
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|edit
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|latestConf
parameter_list|,
name|CommandOperation
name|op
parameter_list|)
function_decl|;
DECL|field|name
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|OPERATION
name|OPERATION
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|s
expr_stmt|;
block|}
DECL|method|get
specifier|public
specifier|static
name|OPERATION
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|OPERATION
name|o
range|:
name|values
argument_list|()
control|)
if|if
condition|(
name|o
operator|.
name|name
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
name|o
return|;
return|return
literal|null
return|;
block|}
block|}
end_enum
begin_decl_stmt
DECL|field|HTTP_METHODS
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|HTTP_METHODS
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"GET"
argument_list|,
literal|"POST"
argument_list|,
literal|"DELETE"
argument_list|,
literal|"PUT"
argument_list|,
literal|"HEAD"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|field|well_known_permissions
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|well_known_permissions
init|=
operator|(
name|Map
operator|)
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"    { "
operator|+
literal|"    security-edit :{"
operator|+
literal|"      path:['/admin/authentication','/admin/authorization'],"
operator|+
literal|"      collection:null,"
operator|+
literal|"      method:POST },"
operator|+
literal|"    security-read :{"
operator|+
literal|"      path:['/admin/authentication','/admin/authorization'],"
operator|+
literal|"      collection:null,"
operator|+
literal|"      method:GET},"
operator|+
literal|"    schema-edit :{"
operator|+
literal|"      method:POST,"
operator|+
literal|"      path:'/schema/*'},"
operator|+
literal|"    collection-admin-edit :{"
operator|+
literal|"  collection:null,"
operator|+
literal|"      path:'/admin/collections'},"
operator|+
literal|"    collection-admin-read :{"
operator|+
literal|"      collection:null,"
operator|+
literal|"      path:'/admin/collections'},"
operator|+
literal|"    schema-read :{"
operator|+
literal|"      method:GET,"
operator|+
literal|"      path:'/schema/*'},"
operator|+
literal|"    config-read :{"
operator|+
literal|"      method:GET,"
operator|+
literal|"      path:'/config/*'},"
operator|+
literal|"    update :{"
operator|+
literal|"      path:'/update/*'},"
operator|+
literal|"    read :{"
operator|+
literal|"      path:['/select', '/get']},"
operator|+
literal|"    config-edit:{"
operator|+
literal|"      method:POST,"
operator|+
literal|"      path:'/config/*'}}"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_static
static|static
block|{
operator|(
operator|(
name|Map
operator|)
name|well_known_permissions
operator|.
name|get
argument_list|(
literal|"collection-admin-edit"
argument_list|)
operator|)
operator|.
name|put
argument_list|(
name|Predicate
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|getPredicate
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Map
operator|)
name|well_known_permissions
operator|.
name|get
argument_list|(
literal|"collection-admin-read"
argument_list|)
operator|)
operator|.
name|put
argument_list|(
name|Predicate
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|getPredicate
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_static
begin_function
DECL|method|getPredicate
specifier|private
specifier|static
name|Predicate
argument_list|<
name|AuthorizationContext
argument_list|>
name|getPredicate
parameter_list|(
specifier|final
name|boolean
name|isEdit
parameter_list|)
block|{
return|return
operator|new
name|Predicate
argument_list|<
name|AuthorizationContext
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|test
parameter_list|(
name|AuthorizationContext
name|context
parameter_list|)
block|{
name|String
name|action
init|=
name|context
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"action"
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|CollectionParams
operator|.
name|CollectionAction
name|collectionAction
init|=
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|get
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|collectionAction
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|isEdit
condition|?
name|collectionAction
operator|.
name|isWrite
else|:
operator|!
name|collectionAction
operator|.
name|isWrite
return|;
block|}
block|}
return|;
block|}
end_function
begin_function
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Utils
operator|.
name|toJSONString
argument_list|(
name|well_known_permissions
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
unit|}
end_unit
