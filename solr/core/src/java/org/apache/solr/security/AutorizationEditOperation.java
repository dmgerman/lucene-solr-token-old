begin_unit
begin_package
DECL|package|org.apache.solr.security
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|CommandOperation
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|NAME
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
operator|.
name|getDeepCopy
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|SecurityConfHandler
operator|.
name|getListValue
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|SecurityConfHandler
operator|.
name|getMapValue
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_enum
DECL|enum|AutorizationEditOperation
enum|enum
name|AutorizationEditOperation
block|{
DECL|enum constant|SET_USER_ROLE
name|SET_USER_ROLE
argument_list|(
literal|"set-user-role"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|edit
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|latestConf
parameter_list|,
name|CommandOperation
name|op
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|roleMap
init|=
name|getMapValue
argument_list|(
name|latestConf
argument_list|,
literal|"user-role"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|op
operator|.
name|getDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|hasError
argument_list|()
condition|)
return|return
literal|null
return|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
name|roleMap
operator|.
name|remove
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
operator|||
name|e
operator|.
name|getValue
argument_list|()
operator|instanceof
name|List
condition|)
block|{
name|roleMap
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|op
operator|.
name|addError
argument_list|(
literal|"Unexpected value "
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|return
name|latestConf
return|;
block|}
block|}
block|,
DECL|enum constant|SET_PERMISSION
name|SET_PERMISSION
argument_list|(
literal|"set-permission"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|edit
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|latestConf
parameter_list|,
name|CommandOperation
name|op
parameter_list|)
block|{
name|Integer
name|index
init|=
name|op
operator|.
name|getInt
argument_list|(
literal|"index"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Integer
name|beforeIdx
init|=
name|op
operator|.
name|getInt
argument_list|(
literal|"before"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|dataMap
init|=
name|op
operator|.
name|getDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|hasError
argument_list|()
condition|)
return|return
literal|null
return|;
name|dataMap
operator|=
name|getDeepCopy
argument_list|(
name|dataMap
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|remove
argument_list|(
literal|"before"
argument_list|)
expr_stmt|;
if|if
condition|(
name|beforeIdx
operator|!=
literal|null
operator|&&
name|index
operator|!=
literal|null
condition|)
block|{
name|op
operator|.
name|addError
argument_list|(
literal|"Cannot use 'index' and 'before together "
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
for|for
control|(
name|String
name|key
range|:
name|dataMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Permission
operator|.
name|knownKeys
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
name|op
operator|.
name|addError
argument_list|(
literal|"Unknown key, "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Permission
operator|.
name|load
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|op
operator|.
name|addError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|op
operator|.
name|hasError
argument_list|()
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|Map
argument_list|>
name|permissions
init|=
name|getListValue
argument_list|(
name|latestConf
argument_list|,
literal|"permissions"
argument_list|)
decl_stmt|;
name|setIndex
argument_list|(
name|permissions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|permissionsCopy
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|beforeSatisfied
init|=
name|beforeIdx
operator|==
literal|null
decl_stmt|;
name|boolean
name|indexSatisfied
init|=
name|index
operator|==
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|permissions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Map
name|perm
init|=
name|permissions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Integer
name|thisIdx
init|=
operator|(
name|int
operator|)
name|perm
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
decl_stmt|;
if|if
condition|(
name|thisIdx
operator|.
name|equals
argument_list|(
name|beforeIdx
argument_list|)
condition|)
block|{
name|beforeSatisfied
operator|=
literal|true
expr_stmt|;
name|permissionsCopy
operator|.
name|add
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
name|permissionsCopy
operator|.
name|add
argument_list|(
name|perm
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|thisIdx
operator|.
name|equals
argument_list|(
name|index
argument_list|)
condition|)
block|{
comment|//overwriting an existing one
name|indexSatisfied
operator|=
literal|true
expr_stmt|;
name|permissionsCopy
operator|.
name|add
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|permissionsCopy
operator|.
name|add
argument_list|(
name|perm
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|beforeSatisfied
condition|)
block|{
name|op
operator|.
name|addError
argument_list|(
literal|"Invalid 'before' :"
operator|+
name|beforeIdx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|indexSatisfied
condition|)
block|{
name|op
operator|.
name|addError
argument_list|(
literal|"Invalid 'index' :"
operator|+
name|index
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|permissionsCopy
operator|.
name|contains
argument_list|(
name|dataMap
argument_list|)
condition|)
name|permissionsCopy
operator|.
name|add
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
name|latestConf
operator|.
name|put
argument_list|(
literal|"permissions"
argument_list|,
name|permissionsCopy
argument_list|)
expr_stmt|;
name|setIndex
argument_list|(
name|permissionsCopy
argument_list|)
expr_stmt|;
return|return
name|latestConf
return|;
block|}
block|}
block|,
DECL|enum constant|UPDATE_PERMISSION
name|UPDATE_PERMISSION
argument_list|(
literal|"update-permission"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|edit
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|latestConf
parameter_list|,
name|CommandOperation
name|op
parameter_list|)
block|{
name|Integer
name|index
init|=
name|op
operator|.
name|getInt
argument_list|(
literal|"index"
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|hasError
argument_list|()
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|Map
argument_list|>
name|permissions
init|=
operator|(
name|List
argument_list|<
name|Map
argument_list|>
operator|)
name|getListValue
argument_list|(
name|latestConf
argument_list|,
literal|"permissions"
argument_list|)
decl_stmt|;
name|setIndex
argument_list|(
name|permissions
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
name|permission
range|:
name|permissions
control|)
block|{
if|if
condition|(
name|index
operator|.
name|equals
argument_list|(
name|permission
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
argument_list|)
condition|)
block|{
name|LinkedHashMap
name|copy
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|permission
argument_list|)
decl_stmt|;
name|copy
operator|.
name|putAll
argument_list|(
name|op
operator|.
name|getDataMap
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|.
name|setCommandData
argument_list|(
name|copy
argument_list|)
expr_stmt|;
return|return
name|SET_PERMISSION
operator|.
name|edit
argument_list|(
name|latestConf
argument_list|,
name|op
argument_list|)
return|;
block|}
block|}
name|op
operator|.
name|addError
argument_list|(
literal|"No such permission "
operator|+
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|,
DECL|enum constant|DELETE_PERMISSION
name|DELETE_PERMISSION
argument_list|(
literal|"delete-permission"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|edit
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|latestConf
parameter_list|,
name|CommandOperation
name|op
parameter_list|)
block|{
name|Integer
name|id
init|=
name|op
operator|.
name|getInt
argument_list|(
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|hasError
argument_list|()
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|Map
argument_list|>
name|p
init|=
name|getListValue
argument_list|(
name|latestConf
argument_list|,
literal|"permissions"
argument_list|)
decl_stmt|;
name|setIndex
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|c
init|=
name|p
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|map
lambda|->
operator|!
name|id
operator|.
name|equals
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|size
argument_list|()
operator|==
name|p
operator|.
name|size
argument_list|()
condition|)
block|{
name|op
operator|.
name|addError
argument_list|(
literal|"No such index :"
operator|+
name|id
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|latestConf
operator|.
name|put
argument_list|(
literal|"permissions"
argument_list|,
name|c
argument_list|)
expr_stmt|;
return|return
name|latestConf
return|;
block|}
block|}
block|;
DECL|method|edit
specifier|public
specifier|abstract
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|edit
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|latestConf
parameter_list|,
name|CommandOperation
name|op
parameter_list|)
function_decl|;
DECL|field|name
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|getOperationName
specifier|public
name|String
name|getOperationName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|AutorizationEditOperation
name|AutorizationEditOperation
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|s
expr_stmt|;
block|}
DECL|method|get
specifier|public
specifier|static
name|AutorizationEditOperation
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|AutorizationEditOperation
name|o
range|:
name|values
argument_list|()
control|)
if|if
condition|(
name|o
operator|.
name|name
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
name|o
return|;
return|return
literal|null
return|;
block|}
DECL|method|setIndex
specifier|static
name|void
name|setIndex
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|>
name|permissionsCopy
parameter_list|)
block|{
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|permissionsCopy
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|map
lambda|->
name|map
operator|.
name|put
argument_list|(
literal|"index"
argument_list|,
name|counter
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_enum
end_unit
