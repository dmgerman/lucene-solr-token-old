begin_unit
begin_package
DECL|package|org.apache.solr.security
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|CommandOperation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|SecurityConfHandler
operator|.
name|getMapValue
import|;
end_import
begin_class
DECL|class|Sha256AuthenticationProvider
specifier|public
class|class
name|Sha256AuthenticationProvider
implements|implements
name|ConfigEditablePlugin
implements|,
name|BasicAuthPlugin
operator|.
name|AuthenticationProvider
block|{
DECL|field|credentials
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|credentials
decl_stmt|;
DECL|field|realm
specifier|private
name|String
name|realm
decl_stmt|;
DECL|field|promptHeader
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|promptHeader
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|putUser
specifier|static
name|void
name|putUser
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|pwd
parameter_list|,
name|Map
name|credentials
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|pwd
operator|==
literal|null
condition|)
return|return;
specifier|final
name|Random
name|r
init|=
operator|new
name|SecureRandom
argument_list|()
decl_stmt|;
name|byte
index|[]
name|salt
init|=
operator|new
name|byte
index|[
literal|32
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|salt
argument_list|)
expr_stmt|;
name|String
name|saltBase64
init|=
name|Base64
operator|.
name|encodeBase64String
argument_list|(
name|salt
argument_list|)
decl_stmt|;
name|String
name|val
init|=
name|sha256
argument_list|(
name|pwd
argument_list|,
name|saltBase64
argument_list|)
operator|+
literal|" "
operator|+
name|saltBase64
decl_stmt|;
name|credentials
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|pluginConfig
parameter_list|)
block|{
if|if
condition|(
name|pluginConfig
operator|.
name|get
argument_list|(
literal|"realm"
argument_list|)
operator|!=
literal|null
condition|)
name|this
operator|.
name|realm
operator|=
operator|(
name|String
operator|)
name|pluginConfig
operator|.
name|get
argument_list|(
literal|"realm"
argument_list|)
expr_stmt|;
else|else
name|this
operator|.
name|realm
operator|=
literal|"solr"
expr_stmt|;
name|promptHeader
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"WWW-Authenticate"
argument_list|,
literal|"Basic realm=\""
operator|+
name|realm
operator|+
literal|"\""
argument_list|)
argument_list|)
expr_stmt|;
name|credentials
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|users
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|pluginConfig
operator|.
name|get
argument_list|(
literal|"credentials"
argument_list|)
decl_stmt|;
if|if
condition|(
name|users
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No users configured yet"
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|users
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|v
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"user has no password "
operator|+
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|credentials
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|authenticate
specifier|public
name|boolean
name|authenticate
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|String
name|cred
init|=
name|credentials
operator|.
name|get
argument_list|(
name|username
argument_list|)
decl_stmt|;
if|if
condition|(
name|cred
operator|==
literal|null
operator|||
name|cred
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|cred
operator|=
name|cred
operator|.
name|trim
argument_list|()
expr_stmt|;
name|String
name|salt
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cred
operator|.
name|contains
argument_list|(
literal|" "
argument_list|)
condition|)
block|{
name|String
index|[]
name|ss
init|=
name|cred
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|length
operator|>
literal|1
operator|&&
operator|!
name|ss
index|[
literal|1
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|salt
operator|=
name|ss
index|[
literal|1
index|]
expr_stmt|;
name|cred
operator|=
name|ss
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
return|return
name|cred
operator|.
name|equals
argument_list|(
name|sha256
argument_list|(
name|password
argument_list|,
name|salt
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getPromptHeaders
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPromptHeaders
parameter_list|()
block|{
return|return
name|promptHeader
return|;
block|}
DECL|method|sha256
specifier|public
specifier|static
name|String
name|sha256
parameter_list|(
name|String
name|password
parameter_list|,
name|String
name|saltKey
parameter_list|)
block|{
name|MessageDigest
name|digest
decl_stmt|;
try|try
block|{
name|digest
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA-256"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|//should not happen
block|}
if|if
condition|(
name|saltKey
operator|!=
literal|null
condition|)
block|{
name|digest
operator|.
name|reset
argument_list|()
expr_stmt|;
name|digest
operator|.
name|update
argument_list|(
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|saltKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|btPass
init|=
name|digest
operator|.
name|digest
argument_list|(
name|password
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|digest
operator|.
name|reset
argument_list|()
expr_stmt|;
name|btPass
operator|=
name|digest
operator|.
name|digest
argument_list|(
name|btPass
argument_list|)
expr_stmt|;
return|return
name|Base64
operator|.
name|encodeBase64String
argument_list|(
name|btPass
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|edit
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|edit
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|latestConf
parameter_list|,
name|List
argument_list|<
name|CommandOperation
argument_list|>
name|commands
parameter_list|)
block|{
for|for
control|(
name|CommandOperation
name|cmd
range|:
name|commands
control|)
block|{
if|if
condition|(
operator|!
name|supported_ops
operator|.
name|contains
argument_list|(
name|cmd
operator|.
name|name
argument_list|)
condition|)
block|{
name|cmd
operator|.
name|unknownOperation
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasError
argument_list|()
condition|)
return|return
literal|null
return|;
if|if
condition|(
literal|"delete-user"
operator|.
name|equals
argument_list|(
name|cmd
operator|.
name|name
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|cmd
operator|.
name|getStrs
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|latestConf
operator|.
name|get
argument_list|(
literal|"credentials"
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
operator|||
operator|!
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|containsAll
argument_list|(
name|names
argument_list|)
condition|)
block|{
name|cmd
operator|.
name|addError
argument_list|(
literal|"No such user(s) "
operator|+
name|names
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
for|for
control|(
name|String
name|name
range|:
name|names
control|)
name|map
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|latestConf
return|;
block|}
if|if
condition|(
literal|"set-user"
operator|.
name|equals
argument_list|(
name|cmd
operator|.
name|name
argument_list|)
condition|)
block|{
name|Map
name|map
init|=
name|getMapValue
argument_list|(
name|latestConf
argument_list|,
literal|"credentials"
argument_list|)
decl_stmt|;
name|Map
name|kv
init|=
name|cmd
operator|.
name|getDataMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|kv
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
operator|.
name|Entry
name|e
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|==
literal|null
operator|||
name|e
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
name|cmd
operator|.
name|addError
argument_list|(
literal|"name and password must be non-null"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|putUser
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|latestConf
return|;
block|}
DECL|field|supported_ops
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|supported_ops
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"set-user"
argument_list|,
literal|"delete-user"
argument_list|)
decl_stmt|;
block|}
end_class
end_unit
