begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.security
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
package|;
end_package
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestHandler
import|;
end_import
begin_comment
comment|/**  * Request context for Solr to be used by Authorization plugin.  */
end_comment
begin_class
DECL|class|AuthorizationContext
specifier|public
specifier|abstract
class|class
name|AuthorizationContext
block|{
DECL|class|CollectionRequest
specifier|public
specifier|static
class|class
name|CollectionRequest
block|{
DECL|field|collectionName
specifier|final
specifier|public
name|String
name|collectionName
decl_stmt|;
DECL|method|CollectionRequest
specifier|public
name|CollectionRequest
parameter_list|(
name|String
name|collectionName
parameter_list|)
block|{
name|this
operator|.
name|collectionName
operator|=
name|collectionName
expr_stmt|;
block|}
block|}
DECL|method|getParams
specifier|public
specifier|abstract
name|SolrParams
name|getParams
parameter_list|()
function_decl|;
DECL|method|getUserPrincipal
specifier|public
specifier|abstract
name|Principal
name|getUserPrincipal
parameter_list|()
function_decl|;
DECL|method|getHttpHeader
specifier|public
specifier|abstract
name|String
name|getHttpHeader
parameter_list|(
name|String
name|header
parameter_list|)
function_decl|;
DECL|method|getHeaderNames
specifier|public
specifier|abstract
name|Enumeration
name|getHeaderNames
parameter_list|()
function_decl|;
DECL|method|getRemoteAddr
specifier|public
specifier|abstract
name|String
name|getRemoteAddr
parameter_list|()
function_decl|;
DECL|method|getRemoteHost
specifier|public
specifier|abstract
name|String
name|getRemoteHost
parameter_list|()
function_decl|;
DECL|method|getCollectionRequests
specifier|public
specifier|abstract
name|List
argument_list|<
name|CollectionRequest
argument_list|>
name|getCollectionRequests
parameter_list|()
function_decl|;
DECL|method|getRequestType
specifier|public
specifier|abstract
name|RequestType
name|getRequestType
parameter_list|()
function_decl|;
DECL|method|getResource
specifier|public
specifier|abstract
name|String
name|getResource
parameter_list|()
function_decl|;
DECL|method|getHttpMethod
specifier|public
specifier|abstract
name|String
name|getHttpMethod
parameter_list|()
function_decl|;
DECL|enum|RequestType
DECL|enum constant|READ
DECL|enum constant|WRITE
DECL|enum constant|ADMIN
DECL|enum constant|UNKNOWN
specifier|public
enum|enum
name|RequestType
block|{
name|READ
block|,
name|WRITE
block|,
name|ADMIN
block|,
name|UNKNOWN
block|}
DECL|method|getHandler
specifier|public
specifier|abstract
name|Object
name|getHandler
parameter_list|()
function_decl|;
block|}
end_class
end_unit
