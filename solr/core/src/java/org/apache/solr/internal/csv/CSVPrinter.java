begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.internal.csv
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|internal
operator|.
name|csv
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_comment
comment|/**  * Print values as a comma separated list.  */
end_comment
begin_class
DECL|class|CSVPrinter
specifier|public
class|class
name|CSVPrinter
block|{
comment|/** The place that the values get written. */
DECL|field|out
specifier|protected
specifier|final
name|Writer
name|out
decl_stmt|;
DECL|field|strategy
specifier|protected
specifier|final
name|CSVStrategy
name|strategy
decl_stmt|;
comment|/** True if we just began a new line. */
DECL|field|newLine
specifier|protected
name|boolean
name|newLine
init|=
literal|true
decl_stmt|;
DECL|field|buf
specifier|protected
name|char
index|[]
name|buf
init|=
operator|new
name|char
index|[
literal|0
index|]
decl_stmt|;
comment|// temporary buffer
comment|/**    * Create a printer that will print values to the given    * stream following the CSVStrategy.    *    * Currently, only a pure encapsulation strategy or a pure escaping strategy    * is supported.  Hybrid strategies (encapsulation and escaping with a different character) are not supported.    *    * @param out stream to which to print.    * @param strategy describes the CSV variation.    */
DECL|method|CSVPrinter
specifier|public
name|CSVPrinter
parameter_list|(
name|Writer
name|out
parameter_list|,
name|CSVStrategy
name|strategy
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|this
operator|.
name|strategy
operator|=
name|strategy
operator|==
literal|null
condition|?
name|CSVStrategy
operator|.
name|DEFAULT_STRATEGY
else|:
name|strategy
expr_stmt|;
block|}
comment|// ======================================================
comment|//  printing implementation
comment|// ======================================================
comment|/**    * Output a blank line    */
DECL|method|println
specifier|public
name|void
name|println
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|strategy
operator|.
name|getPrinterNewline
argument_list|()
argument_list|)
expr_stmt|;
name|newLine
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**    * Print a single line of comma separated values.    * The values will be quoted if needed.  Quotes and    * newLine characters will be escaped.    *    * @param values values to be outputted.    */
DECL|method|println
specifier|public
name|void
name|println
parameter_list|(
name|String
index|[]
name|values
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|print
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|println
argument_list|()
expr_stmt|;
block|}
comment|/**    * Put a comment among the comma separated values.    * Comments will always begin on a new line and occupy a    * least one full line. The character specified to star    * comments and a space will be inserted at the beginning of    * each new line in the comment.    *    * @param comment the comment to output    */
DECL|method|printlnComment
specifier|public
name|void
name|printlnComment
parameter_list|(
name|String
name|comment
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|strategy
operator|.
name|isCommentingDisabled
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|newLine
condition|)
block|{
name|println
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|this
operator|.
name|strategy
operator|.
name|getCommentStart
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|comment
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|comment
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'\r'
case|:
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|comment
operator|.
name|length
argument_list|()
operator|&&
name|comment
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
comment|// break intentionally excluded.
case|case
literal|'\n'
case|:
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|this
operator|.
name|strategy
operator|.
name|getCommentStart
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
break|break;
default|default :
name|out
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|println
argument_list|()
expr_stmt|;
block|}
DECL|method|print
specifier|public
name|void
name|print
parameter_list|(
name|char
index|[]
name|value
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|,
name|boolean
name|checkForEscape
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|checkForEscape
condition|)
block|{
name|printSep
argument_list|()
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|value
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|strategy
operator|.
name|getEncapsulator
argument_list|()
operator|!=
name|CSVStrategy
operator|.
name|ENCAPSULATOR_DISABLED
condition|)
block|{
name|printAndEncapsulate
argument_list|(
name|value
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|strategy
operator|.
name|getEscape
argument_list|()
operator|!=
name|CSVStrategy
operator|.
name|ESCAPE_DISABLED
condition|)
block|{
name|printAndEscape
argument_list|(
name|value
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printSep
argument_list|()
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|value
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printSep
name|void
name|printSep
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|newLine
condition|)
block|{
name|newLine
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
name|this
operator|.
name|strategy
operator|.
name|getDelimiter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printAndEscape
name|void
name|printAndEscape
parameter_list|(
name|char
index|[]
name|value
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|start
init|=
name|offset
decl_stmt|;
name|int
name|pos
init|=
name|offset
decl_stmt|;
name|int
name|end
init|=
name|offset
operator|+
name|len
decl_stmt|;
name|printSep
argument_list|()
expr_stmt|;
name|char
name|delim
init|=
name|this
operator|.
name|strategy
operator|.
name|getDelimiter
argument_list|()
decl_stmt|;
name|char
name|escape
init|=
name|this
operator|.
name|strategy
operator|.
name|getEscape
argument_list|()
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|end
condition|)
block|{
name|char
name|c
init|=
name|value
index|[
name|pos
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\r'
operator|||
name|c
operator|==
literal|'\n'
operator|||
name|c
operator|==
name|delim
operator|||
name|c
operator|==
name|escape
condition|)
block|{
comment|// write out segment up until this char
name|int
name|l
init|=
name|pos
operator|-
name|start
decl_stmt|;
if|if
condition|(
name|l
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|value
argument_list|,
name|start
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|==
literal|'\n'
condition|)
name|c
operator|=
literal|'n'
expr_stmt|;
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\r'
condition|)
name|c
operator|=
literal|'r'
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|escape
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|start
operator|=
name|pos
operator|+
literal|1
expr_stmt|;
comment|// start on the current char after this one
block|}
name|pos
operator|++
expr_stmt|;
block|}
comment|// write last segment
name|int
name|l
init|=
name|pos
operator|-
name|start
decl_stmt|;
if|if
condition|(
name|l
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|value
argument_list|,
name|start
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printAndEncapsulate
name|void
name|printAndEncapsulate
parameter_list|(
name|char
index|[]
name|value
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|first
init|=
name|newLine
decl_stmt|;
comment|// is this the first value on this line?
name|boolean
name|quote
init|=
literal|false
decl_stmt|;
name|int
name|start
init|=
name|offset
decl_stmt|;
name|int
name|pos
init|=
name|offset
decl_stmt|;
name|int
name|end
init|=
name|offset
operator|+
name|len
decl_stmt|;
name|printSep
argument_list|()
expr_stmt|;
name|char
name|delim
init|=
name|this
operator|.
name|strategy
operator|.
name|getDelimiter
argument_list|()
decl_stmt|;
name|char
name|encapsulator
init|=
name|this
operator|.
name|strategy
operator|.
name|getEncapsulator
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|<=
literal|0
condition|)
block|{
comment|// always quote an empty token that is the first
comment|// on the line, as it may be the only thing on the
comment|// line. If it were not quoted in that case,
comment|// an empty line has no tokens.
if|if
condition|(
name|first
condition|)
block|{
name|quote
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|char
name|c
init|=
name|value
index|[
name|pos
index|]
decl_stmt|;
comment|// Hmmm, where did this rule come from?
if|if
condition|(
name|first
operator|&&
operator|(
name|c
operator|<
literal|'0'
operator|||
operator|(
name|c
operator|>
literal|'9'
operator|&&
name|c
operator|<
literal|'A'
operator|)
operator|||
operator|(
name|c
operator|>
literal|'Z'
operator|&&
name|c
operator|<
literal|'a'
operator|)
operator|||
operator|(
name|c
operator|>
literal|'z'
operator|)
operator|)
condition|)
block|{
name|quote
operator|=
literal|true
expr_stmt|;
comment|// } else if (c == ' ' || c == '\f' || c == '\t') {
block|}
elseif|else
if|if
condition|(
name|c
operator|<=
literal|'#'
condition|)
block|{
comment|// Some other chars at the start of a value caused the parser to fail, so for now
comment|// encapsulate if we start in anything less than '#'.  We are being conservative
comment|// by including the default comment char too.
name|quote
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
name|pos
operator|<
name|end
condition|)
block|{
name|c
operator|=
name|value
index|[
name|pos
index|]
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\n'
operator|||
name|c
operator|==
literal|'\r'
operator|||
name|c
operator|==
name|encapsulator
operator|||
name|c
operator|==
name|delim
condition|)
block|{
name|quote
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|pos
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|quote
condition|)
block|{
name|pos
operator|=
name|end
operator|-
literal|1
expr_stmt|;
name|c
operator|=
name|value
index|[
name|pos
index|]
expr_stmt|;
comment|// if (c == ' ' || c == '\f' || c == '\t') {
comment|// Some other chars at the end caused the parser to fail, so for now
comment|// encapsulate if we end in anything less than ' '
if|if
condition|(
name|c
operator|<=
literal|' '
condition|)
block|{
name|quote
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|quote
condition|)
block|{
comment|// no encapsulation needed - write out the original value
name|out
operator|.
name|write
argument_list|(
name|value
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// we hit something that needed encapsulation
name|out
operator|.
name|write
argument_list|(
name|encapsulator
argument_list|)
expr_stmt|;
comment|// Pick up where we left off: pos should be positioned on the first character that caused
comment|// the need for encapsulation.
while|while
condition|(
name|pos
operator|<
name|end
condition|)
block|{
name|char
name|c
init|=
name|value
index|[
name|pos
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|==
name|encapsulator
condition|)
block|{
comment|// write out the chunk up until this point
comment|// add 1 to the length to write out the encapsulator also
name|out
operator|.
name|write
argument_list|(
name|value
argument_list|,
name|start
argument_list|,
name|pos
operator|-
name|start
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// put the next starting position on the encapsulator so we will
comment|// write it out again with the next string (effectively doubling it)
name|start
operator|=
name|pos
expr_stmt|;
block|}
name|pos
operator|++
expr_stmt|;
block|}
comment|// write the last segment
name|out
operator|.
name|write
argument_list|(
name|value
argument_list|,
name|start
argument_list|,
name|pos
operator|-
name|start
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|encapsulator
argument_list|)
expr_stmt|;
block|}
comment|/**    * Print the string as the next value on the line. The value    * will be escaped or encapsulated as needed if checkForEscape==true    *    * @param value value to be outputted.    */
DECL|method|print
specifier|public
name|void
name|print
parameter_list|(
name|String
name|value
parameter_list|,
name|boolean
name|checkForEscape
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|checkForEscape
condition|)
block|{
comment|// write directly from string
name|printSep
argument_list|()
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|buf
operator|.
name|length
operator|<
name|value
operator|.
name|length
argument_list|()
condition|)
block|{
name|buf
operator|=
operator|new
name|char
index|[
name|value
operator|.
name|length
argument_list|()
index|]
expr_stmt|;
block|}
name|value
operator|.
name|getChars
argument_list|(
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|print
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|,
name|checkForEscape
argument_list|)
expr_stmt|;
block|}
comment|/**    * Print the string as the next value on the line. The value    * will be escaped or encapsulated as needed.    *    * @param value value to be outputted.    */
DECL|method|print
specifier|public
name|void
name|print
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|print
argument_list|(
name|value
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
