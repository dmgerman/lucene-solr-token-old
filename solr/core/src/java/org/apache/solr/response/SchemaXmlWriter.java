begin_unit
begin_package
DECL|package|org.apache.solr.response
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|XML
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SimilarityFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|ReturnFields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|NAME
import|;
end_import
begin_comment
comment|/**  * @lucene.internal  */
end_comment
begin_class
DECL|class|SchemaXmlWriter
specifier|public
class|class
name|SchemaXmlWriter
extends|extends
name|TextResponseWriter
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|XML_DECLARATION
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|XML_DECLARATION
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
DECL|field|MANAGED_SCHEMA_DO_NOT_EDIT_WARNING
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|MANAGED_SCHEMA_DO_NOT_EDIT_WARNING
init|=
literal|"<!-- Solr managed schema - automatically generated - DO NOT EDIT -->"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
DECL|field|emitManagedSchemaDoNotEditWarning
specifier|private
name|boolean
name|emitManagedSchemaDoNotEditWarning
init|=
literal|false
decl_stmt|;
DECL|method|setEmitManagedSchemaDoNotEditWarning
specifier|public
name|void
name|setEmitManagedSchemaDoNotEditWarning
parameter_list|(
name|boolean
name|emitManagedSchemaDoNotEditWarning
parameter_list|)
block|{
name|this
operator|.
name|emitManagedSchemaDoNotEditWarning
operator|=
name|emitManagedSchemaDoNotEditWarning
expr_stmt|;
block|}
DECL|method|writeResponse
specifier|public
specifier|static
name|void
name|writeResponse
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|IOException
block|{
name|SchemaXmlWriter
name|schemaXmlWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|schemaXmlWriter
operator|=
operator|new
name|SchemaXmlWriter
argument_list|(
name|writer
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|schemaXmlWriter
operator|.
name|writeResponse
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|schemaXmlWriter
condition|)
block|{
name|schemaXmlWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|SchemaXmlWriter
specifier|public
name|SchemaXmlWriter
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
name|super
argument_list|(
name|writer
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
DECL|method|writeResponse
specifier|public
name|void
name|writeResponse
parameter_list|()
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
name|XML_DECLARATION
argument_list|)
expr_stmt|;
if|if
condition|(
name|emitManagedSchemaDoNotEditWarning
condition|)
block|{
if|if
condition|(
name|doIndent
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
name|MANAGED_SCHEMA_DO_NOT_EDIT_WARNING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|schemaProperties
init|=
operator|(
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
operator|)
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
name|IndexSchema
operator|.
name|SCHEMA
argument_list|)
decl_stmt|;
name|openStartTag
argument_list|(
name|IndexSchema
operator|.
name|SCHEMA
argument_list|)
expr_stmt|;
name|writeAttr
argument_list|(
name|IndexSchema
operator|.
name|NAME
argument_list|,
name|schemaProperties
operator|.
name|get
argument_list|(
name|IndexSchema
operator|.
name|NAME
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|writeAttr
argument_list|(
name|IndexSchema
operator|.
name|VERSION
argument_list|,
name|schemaProperties
operator|.
name|get
argument_list|(
name|IndexSchema
operator|.
name|VERSION
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|closeStartTag
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|schemaPropNum
init|=
literal|0
init|;
name|schemaPropNum
operator|<
name|schemaProperties
operator|.
name|size
argument_list|()
condition|;
operator|++
name|schemaPropNum
control|)
block|{
name|String
name|schemaPropName
init|=
name|schemaProperties
operator|.
name|getName
argument_list|(
name|schemaPropNum
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaPropName
operator|.
name|equals
argument_list|(
name|IndexSchema
operator|.
name|NAME
argument_list|)
operator|||
name|schemaPropName
operator|.
name|equals
argument_list|(
name|IndexSchema
operator|.
name|VERSION
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|schemaPropName
operator|.
name|equals
argument_list|(
name|IndexSchema
operator|.
name|UNIQUE_KEY
argument_list|)
condition|)
block|{
name|openStartTag
argument_list|(
name|IndexSchema
operator|.
name|UNIQUE_KEY
argument_list|)
expr_stmt|;
name|closeStartTag
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|schemaProperties
operator|.
name|getVal
argument_list|(
name|schemaPropNum
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|endTag
argument_list|(
name|IndexSchema
operator|.
name|UNIQUE_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|schemaPropName
operator|.
name|equals
argument_list|(
name|IndexSchema
operator|.
name|DEFAULT_SEARCH_FIELD
argument_list|)
condition|)
block|{
name|openStartTag
argument_list|(
name|IndexSchema
operator|.
name|DEFAULT_SEARCH_FIELD
argument_list|)
expr_stmt|;
name|closeStartTag
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|schemaProperties
operator|.
name|getVal
argument_list|(
name|schemaPropNum
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|endTag
argument_list|(
name|IndexSchema
operator|.
name|DEFAULT_SEARCH_FIELD
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|schemaPropName
operator|.
name|equals
argument_list|(
name|IndexSchema
operator|.
name|SOLR_QUERY_PARSER
argument_list|)
condition|)
block|{
name|openStartTag
argument_list|(
name|IndexSchema
operator|.
name|SOLR_QUERY_PARSER
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|solrQueryParserProperties
init|=
operator|(
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
operator|)
name|schemaProperties
operator|.
name|getVal
argument_list|(
name|schemaPropNum
argument_list|)
decl_stmt|;
name|writeAttr
argument_list|(
name|IndexSchema
operator|.
name|DEFAULT_OPERATOR
argument_list|,
name|solrQueryParserProperties
operator|.
name|get
argument_list|(
name|IndexSchema
operator|.
name|DEFAULT_OPERATOR
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|closeStartTag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|schemaPropName
operator|.
name|equals
argument_list|(
name|IndexSchema
operator|.
name|SIMILARITY
argument_list|)
condition|)
block|{
name|writeSimilarity
argument_list|(
operator|(
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
operator|)
name|schemaProperties
operator|.
name|getVal
argument_list|(
name|schemaPropNum
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|schemaPropName
operator|.
name|equals
argument_list|(
name|IndexSchema
operator|.
name|FIELD_TYPES
argument_list|)
condition|)
block|{
name|writeFieldTypes
argument_list|(
operator|(
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|>
operator|)
name|schemaProperties
operator|.
name|getVal
argument_list|(
name|schemaPropNum
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|schemaPropName
operator|.
name|equals
argument_list|(
name|IndexSchema
operator|.
name|FIELDS
argument_list|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|>
name|fieldPropertiesList
init|=
operator|(
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|>
operator|)
name|schemaProperties
operator|.
name|getVal
argument_list|(
name|schemaPropNum
argument_list|)
decl_stmt|;
for|for
control|(
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|fieldProperties
range|:
name|fieldPropertiesList
control|)
block|{
name|openStartTag
argument_list|(
name|IndexSchema
operator|.
name|FIELD
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|fieldPropNum
init|=
literal|0
init|;
name|fieldPropNum
operator|<
name|fieldProperties
operator|.
name|size
argument_list|()
condition|;
operator|++
name|fieldPropNum
control|)
block|{
name|writeAttr
argument_list|(
name|fieldProperties
operator|.
name|getName
argument_list|(
name|fieldPropNum
argument_list|)
argument_list|,
name|fieldProperties
operator|.
name|getVal
argument_list|(
name|fieldPropNum
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|closeStartTag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|schemaPropName
operator|.
name|equals
argument_list|(
name|IndexSchema
operator|.
name|DYNAMIC_FIELDS
argument_list|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|>
name|dynamicFieldPropertiesList
init|=
operator|(
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|>
operator|)
name|schemaProperties
operator|.
name|getVal
argument_list|(
name|schemaPropNum
argument_list|)
decl_stmt|;
for|for
control|(
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|dynamicFieldProperties
range|:
name|dynamicFieldPropertiesList
control|)
block|{
name|openStartTag
argument_list|(
name|IndexSchema
operator|.
name|DYNAMIC_FIELD
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|dynamicFieldPropNum
init|=
literal|0
init|;
name|dynamicFieldPropNum
operator|<
name|dynamicFieldProperties
operator|.
name|size
argument_list|()
condition|;
operator|++
name|dynamicFieldPropNum
control|)
block|{
name|writeAttr
argument_list|(
name|dynamicFieldProperties
operator|.
name|getName
argument_list|(
name|dynamicFieldPropNum
argument_list|)
argument_list|,
name|dynamicFieldProperties
operator|.
name|getVal
argument_list|(
name|dynamicFieldPropNum
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|closeStartTag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|schemaPropName
operator|.
name|equals
argument_list|(
name|IndexSchema
operator|.
name|COPY_FIELDS
argument_list|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|>
name|copyFieldPropertiesList
init|=
operator|(
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|>
operator|)
name|schemaProperties
operator|.
name|getVal
argument_list|(
name|schemaPropNum
argument_list|)
decl_stmt|;
for|for
control|(
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|copyFieldProperties
range|:
name|copyFieldPropertiesList
control|)
block|{
name|openStartTag
argument_list|(
name|IndexSchema
operator|.
name|COPY_FIELD
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|copyFieldPropNum
init|=
literal|0
init|;
name|copyFieldPropNum
operator|<
name|copyFieldProperties
operator|.
name|size
argument_list|()
condition|;
operator|++
name|copyFieldPropNum
control|)
block|{
name|writeAttr
argument_list|(
name|copyFieldProperties
operator|.
name|getName
argument_list|(
name|copyFieldPropNum
argument_list|)
argument_list|,
name|copyFieldProperties
operator|.
name|getVal
argument_list|(
name|copyFieldPropNum
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|closeStartTag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unknown schema component '"
operator|+
name|schemaPropName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
name|decLevel
argument_list|()
expr_stmt|;
name|endTag
argument_list|(
name|IndexSchema
operator|.
name|SCHEMA
argument_list|)
expr_stmt|;
block|}
DECL|method|writeFieldTypes
specifier|private
name|void
name|writeFieldTypes
parameter_list|(
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|>
name|fieldTypePropertiesList
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|fieldTypeProperties
range|:
name|fieldTypePropertiesList
control|)
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|analyzerProperties
init|=
literal|null
decl_stmt|;
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|indexAnalyzerProperties
init|=
literal|null
decl_stmt|;
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|queryAnalyzerProperties
init|=
literal|null
decl_stmt|;
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|multiTermAnalyzerProperties
init|=
literal|null
decl_stmt|;
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|perFieldSimilarityProperties
init|=
literal|null
decl_stmt|;
name|openStartTag
argument_list|(
name|IndexSchema
operator|.
name|FIELD_TYPE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|fieldTypePropNum
init|=
literal|0
init|;
name|fieldTypePropNum
operator|<
name|fieldTypeProperties
operator|.
name|size
argument_list|()
condition|;
operator|++
name|fieldTypePropNum
control|)
block|{
name|String
name|fieldTypePropName
init|=
name|fieldTypeProperties
operator|.
name|getName
argument_list|(
name|fieldTypePropNum
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldTypePropName
operator|.
name|equals
argument_list|(
name|FieldType
operator|.
name|ANALYZER
argument_list|)
condition|)
block|{
name|analyzerProperties
operator|=
operator|(
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
operator|)
name|fieldTypeProperties
operator|.
name|getVal
argument_list|(
name|fieldTypePropNum
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldTypePropName
operator|.
name|equals
argument_list|(
name|FieldType
operator|.
name|INDEX_ANALYZER
argument_list|)
condition|)
block|{
name|indexAnalyzerProperties
operator|=
operator|(
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
operator|)
name|fieldTypeProperties
operator|.
name|getVal
argument_list|(
name|fieldTypePropNum
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldTypePropName
operator|.
name|equals
argument_list|(
name|FieldType
operator|.
name|QUERY_ANALYZER
argument_list|)
condition|)
block|{
name|queryAnalyzerProperties
operator|=
operator|(
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
operator|)
name|fieldTypeProperties
operator|.
name|getVal
argument_list|(
name|fieldTypePropNum
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldTypePropName
operator|.
name|equals
argument_list|(
name|FieldType
operator|.
name|MULTI_TERM_ANALYZER
argument_list|)
condition|)
block|{
name|multiTermAnalyzerProperties
operator|=
operator|(
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
operator|)
name|fieldTypeProperties
operator|.
name|getVal
argument_list|(
name|fieldTypePropNum
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldTypePropName
operator|.
name|equals
argument_list|(
name|FieldType
operator|.
name|SIMILARITY
argument_list|)
condition|)
block|{
name|perFieldSimilarityProperties
operator|=
operator|(
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
operator|)
name|fieldTypeProperties
operator|.
name|getVal
argument_list|(
name|fieldTypePropNum
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeAttr
argument_list|(
name|fieldTypePropName
argument_list|,
name|fieldTypeProperties
operator|.
name|getVal
argument_list|(
name|fieldTypePropNum
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|isEmptyTag
init|=
literal|null
operator|==
name|analyzerProperties
operator|&&
literal|null
operator|==
name|indexAnalyzerProperties
operator|&&
literal|null
operator|==
name|queryAnalyzerProperties
operator|&&
literal|null
operator|==
name|multiTermAnalyzerProperties
operator|&&
literal|null
operator|==
name|perFieldSimilarityProperties
decl_stmt|;
if|if
condition|(
name|isEmptyTag
condition|)
block|{
name|closeStartTag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|closeStartTag
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|analyzerProperties
condition|)
name|writeAnalyzer
argument_list|(
name|analyzerProperties
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|indexAnalyzerProperties
condition|)
name|writeAnalyzer
argument_list|(
name|indexAnalyzerProperties
argument_list|,
name|FieldType
operator|.
name|INDEX
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|queryAnalyzerProperties
condition|)
name|writeAnalyzer
argument_list|(
name|queryAnalyzerProperties
argument_list|,
name|FieldType
operator|.
name|QUERY
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|multiTermAnalyzerProperties
condition|)
name|writeAnalyzer
argument_list|(
name|multiTermAnalyzerProperties
argument_list|,
name|FieldType
operator|.
name|MULTI_TERM
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|perFieldSimilarityProperties
condition|)
name|writeSimilarity
argument_list|(
name|perFieldSimilarityProperties
argument_list|)
expr_stmt|;
name|decLevel
argument_list|()
expr_stmt|;
name|endTag
argument_list|(
name|IndexSchema
operator|.
name|FIELD_TYPE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|writeSimilarity
specifier|private
name|void
name|writeSimilarity
parameter_list|(
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|similarityProperties
parameter_list|)
throws|throws
name|IOException
block|{
name|openStartTag
argument_list|(
name|IndexSchema
operator|.
name|SIMILARITY
argument_list|)
expr_stmt|;
name|writeAttr
argument_list|(
name|SimilarityFactory
operator|.
name|CLASS_NAME
argument_list|,
name|similarityProperties
operator|.
name|get
argument_list|(
name|SimilarityFactory
operator|.
name|CLASS_NAME
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|similarityProperties
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|closeStartTag
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
name|writeNamedList
argument_list|(
literal|null
argument_list|,
name|similarityProperties
argument_list|)
expr_stmt|;
name|decLevel
argument_list|()
expr_stmt|;
name|endTag
argument_list|(
name|IndexSchema
operator|.
name|SIMILARITY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|closeStartTag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeAnalyzer
specifier|private
name|void
name|writeAnalyzer
parameter_list|(
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|analyzerProperties
parameter_list|,
name|String
name|analyzerType
parameter_list|)
throws|throws
name|IOException
block|{
name|openStartTag
argument_list|(
name|FieldType
operator|.
name|ANALYZER
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|analyzerType
condition|)
block|{
name|writeAttr
argument_list|(
name|FieldType
operator|.
name|TYPE
argument_list|,
name|analyzerType
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|>
name|charFilterPropertiesList
init|=
literal|null
decl_stmt|;
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|tokenizerProperties
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|>
name|filterPropertiesList
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|analyzerProperties
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|String
name|name
init|=
name|analyzerProperties
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|FieldType
operator|.
name|CHAR_FILTERS
argument_list|)
condition|)
block|{
name|charFilterPropertiesList
operator|=
operator|(
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|>
operator|)
name|analyzerProperties
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|FieldType
operator|.
name|TOKENIZER
argument_list|)
condition|)
block|{
name|tokenizerProperties
operator|=
operator|(
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
operator|)
name|analyzerProperties
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|FieldType
operator|.
name|FILTERS
argument_list|)
condition|)
block|{
name|filterPropertiesList
operator|=
operator|(
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|>
operator|)
name|analyzerProperties
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|FieldType
operator|.
name|CLASS_NAME
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
literal|"solr.TokenizerChain"
operator|.
name|equals
argument_list|(
name|analyzerProperties
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|writeAttr
argument_list|(
name|name
argument_list|,
name|analyzerProperties
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|isEmptyTag
init|=
literal|null
operator|==
name|charFilterPropertiesList
operator|&&
literal|null
operator|==
name|tokenizerProperties
operator|&&
literal|null
operator|==
name|filterPropertiesList
decl_stmt|;
if|if
condition|(
name|isEmptyTag
condition|)
block|{
name|closeStartTag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|closeStartTag
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|charFilterPropertiesList
condition|)
block|{
for|for
control|(
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|charFilterProperties
range|:
name|charFilterPropertiesList
control|)
block|{
name|openStartTag
argument_list|(
name|FieldType
operator|.
name|CHAR_FILTER
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|charFilterProperties
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|writeAttr
argument_list|(
name|charFilterProperties
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|,
name|charFilterProperties
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|closeStartTag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|tokenizerProperties
condition|)
block|{
name|openStartTag
argument_list|(
name|FieldType
operator|.
name|TOKENIZER
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tokenizerProperties
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|writeAttr
argument_list|(
name|tokenizerProperties
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|,
name|tokenizerProperties
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|closeStartTag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|filterPropertiesList
condition|)
block|{
for|for
control|(
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|filterProperties
range|:
name|filterPropertiesList
control|)
block|{
name|openStartTag
argument_list|(
name|FieldType
operator|.
name|FILTER
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filterProperties
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|writeAttr
argument_list|(
name|filterProperties
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|,
name|filterProperties
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|closeStartTag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|decLevel
argument_list|()
expr_stmt|;
name|endTag
argument_list|(
name|FieldType
operator|.
name|ANALYZER
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|openStartTag
name|void
name|openStartTag
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doIndent
condition|)
name|indent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
DECL|method|closeStartTag
name|void
name|closeStartTag
parameter_list|(
name|boolean
name|isEmptyTag
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isEmptyTag
condition|)
name|writer
operator|.
name|write
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
DECL|method|endTag
name|void
name|endTag
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|endTag
argument_list|(
name|tag
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|endTag
name|void
name|endTag
parameter_list|(
name|String
name|tag
parameter_list|,
name|boolean
name|indentThisTag
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doIndent
operator|&&
name|indentThisTag
condition|)
name|indent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
comment|/** Writes the XML attribute name/val. A null val means that the attribute is missing. */
DECL|method|writeAttr
specifier|private
name|void
name|writeAttr
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writeAttr
argument_list|(
name|name
argument_list|,
name|val
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|writeAttr
specifier|public
name|void
name|writeAttr
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|boolean
name|escape
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"=\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|escape
condition|)
block|{
name|XML
operator|.
name|escapeAttributeValue
argument_list|(
name|val
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeNamedList
specifier|public
name|void
name|writeNamedList
parameter_list|(
name|String
name|name
parameter_list|,
name|NamedList
name|val
parameter_list|)
throws|throws
name|IOException
block|{
comment|// name is ignored - this method is only used for SimilarityFactory
name|int
name|sz
init|=
name|val
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|String
name|valName
init|=
name|val
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|valName
operator|.
name|equals
argument_list|(
name|SimilarityFactory
operator|.
name|CLASS_NAME
argument_list|)
condition|)
block|{
name|writeVal
argument_list|(
name|valName
argument_list|,
name|val
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|startTag
name|void
name|startTag
parameter_list|(
name|String
name|tag
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|closeTag
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doIndent
condition|)
name|indent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|tag
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|writeAttr
argument_list|(
name|NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|closeTag
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|closeTag
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|writeMap
specifier|public
name|void
name|writeMap
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
name|map
parameter_list|,
name|boolean
name|excludeOuter
parameter_list|,
name|boolean
name|isFirstVal
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|excludeOuter
condition|)
block|{
name|startTag
argument_list|(
literal|"lst"
argument_list|,
name|name
argument_list|,
name|sz
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
operator|(
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|>
operator|)
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|k
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|v
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// if (sz<indentThreshold) indent();
name|writeVal
argument_list|(
literal|null
operator|==
name|k
condition|?
literal|null
else|:
name|k
operator|.
name|toString
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|excludeOuter
condition|)
block|{
name|decLevel
argument_list|()
expr_stmt|;
if|if
condition|(
name|sz
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|doIndent
condition|)
name|indent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</lst>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|writeArray
specifier|public
name|void
name|writeArray
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
index|[]
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writeArray
argument_list|(
name|name
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|val
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeArray
specifier|public
name|void
name|writeArray
parameter_list|(
name|String
name|name
parameter_list|,
name|Iterator
name|iter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|startTag
argument_list|(
literal|"arr"
argument_list|,
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|writeVal
argument_list|(
literal|null
argument_list|,
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|decLevel
argument_list|()
expr_stmt|;
if|if
condition|(
name|doIndent
condition|)
name|indent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</arr>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startTag
argument_list|(
literal|"arr"
argument_list|,
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// Primitive types
comment|//
annotation|@
name|Override
DECL|method|writeNull
specifier|public
name|void
name|writeNull
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"null"
argument_list|,
name|name
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeStr
specifier|public
name|void
name|writeStr
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|boolean
name|escape
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"str"
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
name|escape
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeInt
specifier|public
name|void
name|writeInt
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"int"
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeLong
specifier|public
name|void
name|writeLong
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"long"
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeBool
specifier|public
name|void
name|writeBool
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"bool"
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeFloat
specifier|public
name|void
name|writeFloat
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"float"
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeFloat
specifier|public
name|void
name|writeFloat
parameter_list|(
name|String
name|name
parameter_list|,
name|float
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writeFloat
argument_list|(
name|name
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeDouble
specifier|public
name|void
name|writeDouble
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"double"
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeDouble
specifier|public
name|void
name|writeDouble
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writeDouble
argument_list|(
name|name
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeDate
specifier|public
name|void
name|writeDate
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"date"
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// OPT - specific writeInt, writeFloat, methods might be faster since
comment|// there would be less write calls (write("<int name=\"" + name + ... +</int>)
comment|//
DECL|method|writePrim
specifier|private
name|void
name|writePrim
parameter_list|(
name|String
name|tag
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|boolean
name|escape
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|contentLen
init|=
name|val
operator|==
literal|null
condition|?
literal|0
else|:
name|val
operator|.
name|length
argument_list|()
decl_stmt|;
name|startTag
argument_list|(
name|tag
argument_list|,
name|name
argument_list|,
name|contentLen
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|contentLen
operator|==
literal|0
condition|)
return|return;
if|if
condition|(
name|escape
condition|)
block|{
name|XML
operator|.
name|escapeCharData
argument_list|(
name|val
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
name|val
argument_list|,
literal|0
argument_list|,
name|contentLen
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeStartDocumentList
specifier|public
name|void
name|writeStartDocumentList
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|start
parameter_list|,
name|int
name|size
parameter_list|,
name|long
name|numFound
parameter_list|,
name|Float
name|maxScore
parameter_list|)
throws|throws
name|IOException
block|{
comment|// no-op
block|}
annotation|@
name|Override
DECL|method|writeSolrDocument
specifier|public
name|void
name|writeSolrDocument
parameter_list|(
name|String
name|name
parameter_list|,
name|SolrDocument
name|doc
parameter_list|,
name|ReturnFields
name|returnFields
parameter_list|,
name|int
name|idx
parameter_list|)
throws|throws
name|IOException
block|{
comment|// no-op
block|}
annotation|@
name|Override
DECL|method|writeEndDocumentList
specifier|public
name|void
name|writeEndDocumentList
parameter_list|()
throws|throws
name|IOException
block|{
comment|// no-op
block|}
block|}
end_class
end_unit
