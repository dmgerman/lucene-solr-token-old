begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.response.transform
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|transform
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|SpatialStrategy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|composite
operator|.
name|CompositeSpatialStrategy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|serialized
operator|.
name|SerializedDVStrategy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|JSONResponseWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|QueryResponseWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|AbstractSpatialFieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SyntaxError
import|;
end_import
begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|spatial4j
operator|.
name|io
operator|.
name|GeoJSONWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|spatial4j
operator|.
name|io
operator|.
name|ShapeWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|spatial4j
operator|.
name|io
operator|.
name|SupportedFormats
import|;
end_import
begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|spatial4j
operator|.
name|shape
operator|.
name|Shape
import|;
end_import
begin_comment
comment|/**  * This DocumentTransformer will write a {@link Shape} to the SolrDocument using  * the requested format.  Supported formats include:  *<ul>  *<li>GeoJSON</li>  *<li>WKT</li>  *<li>Polyshape</li>  *</ul>  * For more information see:<a href="https://github.com/locationtech/spatial4j/blob/master/FORMATS.md">spatial4j/FORMATS.md</a>  *   * The shape is either read from a stored field, or a ValueSource.  *   * This transformer is useful when:  *<ul>  *<li>You want to return a format different than the stored encoding (WKT vs GeoJSON)</li>  *<li>The {@link Shape} is stored in a {@link ValueSource}, not a stored field</li>  *<li>the value is not stored in a format the output understands (ie, raw GeoJSON)</li>  *</ul>  *   */
end_comment
begin_class
DECL|class|GeoTransformerFactory
specifier|public
class|class
name|GeoTransformerFactory
extends|extends
name|TransformerFactory
block|{
annotation|@
name|Override
DECL|method|create
specifier|public
name|DocTransformer
name|create
parameter_list|(
name|String
name|display
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|)
block|{
name|String
name|fname
init|=
name|params
operator|.
name|get
argument_list|(
literal|"f"
argument_list|,
name|display
argument_list|)
decl_stmt|;
if|if
condition|(
name|fname
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
operator|&&
name|fname
operator|.
name|endsWith
argument_list|(
literal|"]"
argument_list|)
condition|)
block|{
name|fname
operator|=
name|display
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|display
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|SchemaField
name|sf
init|=
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getFieldOrNull
argument_list|(
name|fname
argument_list|)
decl_stmt|;
if|if
condition|(
name|sf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" using unknown field: "
operator|+
name|fname
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|sf
operator|.
name|getType
argument_list|()
operator|instanceof
name|AbstractSpatialFieldType
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"GeoTransformer requested non-spatial field: "
operator|+
name|fname
operator|+
literal|" ("
operator|+
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
specifier|final
name|GeoFieldUpdater
name|updater
init|=
operator|new
name|GeoFieldUpdater
argument_list|()
decl_stmt|;
name|updater
operator|.
name|field
operator|=
name|fname
expr_stmt|;
name|updater
operator|.
name|display
operator|=
name|display
expr_stmt|;
name|updater
operator|.
name|display_error
operator|=
name|display
operator|+
literal|"_error"
expr_stmt|;
name|ValueSource
name|shapes
init|=
literal|null
decl_stmt|;
name|AbstractSpatialFieldType
argument_list|<
name|?
argument_list|>
name|sdv
init|=
operator|(
name|AbstractSpatialFieldType
argument_list|<
name|?
argument_list|>
operator|)
name|sf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|SpatialStrategy
name|strategy
init|=
name|sdv
operator|.
name|getStrategy
argument_list|(
name|fname
argument_list|)
decl_stmt|;
if|if
condition|(
name|strategy
operator|instanceof
name|CompositeSpatialStrategy
condition|)
block|{
name|shapes
operator|=
operator|(
operator|(
name|CompositeSpatialStrategy
operator|)
name|strategy
operator|)
operator|.
name|getGeometryStrategy
argument_list|()
operator|.
name|makeShapeValueSource
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|strategy
operator|instanceof
name|SerializedDVStrategy
condition|)
block|{
name|shapes
operator|=
operator|(
operator|(
name|SerializedDVStrategy
operator|)
name|strategy
operator|)
operator|.
name|makeShapeValueSource
argument_list|()
expr_stmt|;
block|}
name|String
name|writerName
init|=
name|params
operator|.
name|get
argument_list|(
literal|"w"
argument_list|,
literal|"GeoJSON"
argument_list|)
decl_stmt|;
name|updater
operator|.
name|formats
operator|=
name|strategy
operator|.
name|getSpatialContext
argument_list|()
operator|.
name|getFormats
argument_list|()
expr_stmt|;
name|updater
operator|.
name|writer
operator|=
name|updater
operator|.
name|formats
operator|.
name|getWriter
argument_list|(
name|writerName
argument_list|)
expr_stmt|;
if|if
condition|(
name|updater
operator|.
name|writer
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|str
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|str
operator|.
name|append
argument_list|(
literal|"Unknown Spatial Writer: "
argument_list|)
operator|.
name|append
argument_list|(
name|writerName
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
literal|" ["
argument_list|)
expr_stmt|;
for|for
control|(
name|ShapeWriter
name|w
range|:
name|updater
operator|.
name|formats
operator|.
name|getWriters
argument_list|()
control|)
block|{
name|str
operator|.
name|append
argument_list|(
name|w
operator|.
name|getFormatName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|str
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|str
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|QueryResponseWriter
name|qw
init|=
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getQueryResponseWriter
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|updater
operator|.
name|isJSON
operator|=
operator|(
name|qw
operator|.
name|getClass
argument_list|()
operator|==
name|JSONResponseWriter
operator|.
name|class
operator|)
operator|&&
operator|(
name|updater
operator|.
name|writer
operator|instanceof
name|GeoJSONWriter
operator|)
expr_stmt|;
comment|// Using ValueSource
if|if
condition|(
name|shapes
operator|!=
literal|null
condition|)
block|{
comment|// we don't really need the qparser... just so we can reuse valueSource
name|QParser
name|parser
init|=
operator|new
name|QParser
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|params
argument_list|,
name|req
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Query
name|parse
parameter_list|()
throws|throws
name|SyntaxError
block|{
return|return
operator|new
name|MatchAllDocsQuery
argument_list|()
return|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|ValueSourceAugmenter
argument_list|(
name|display
argument_list|,
name|parser
argument_list|,
name|shapes
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|setValue
parameter_list|(
name|SolrDocument
name|doc
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
name|updater
operator|.
name|setValue
argument_list|(
name|doc
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
comment|// Using the raw stored values
return|return
operator|new
name|DocTransformer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|transform
parameter_list|(
name|SolrDocument
name|doc
parameter_list|,
name|int
name|docid
parameter_list|,
name|float
name|score
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|val
init|=
name|doc
operator|.
name|remove
argument_list|(
name|updater
operator|.
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|updater
operator|.
name|setValue
argument_list|(
name|doc
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|updater
operator|.
name|display
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getExtraRequestFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
name|updater
operator|.
name|field
block|}
return|;
block|}
block|}
return|;
block|}
block|}
end_class
begin_class
DECL|class|GeoFieldUpdater
class|class
name|GeoFieldUpdater
block|{
DECL|field|field
name|String
name|field
decl_stmt|;
DECL|field|display
name|String
name|display
decl_stmt|;
DECL|field|display_error
name|String
name|display_error
decl_stmt|;
DECL|field|isJSON
name|boolean
name|isJSON
decl_stmt|;
DECL|field|writer
name|ShapeWriter
name|writer
decl_stmt|;
DECL|field|formats
name|SupportedFormats
name|formats
decl_stmt|;
DECL|method|addShape
name|void
name|addShape
parameter_list|(
name|SolrDocument
name|doc
parameter_list|,
name|Shape
name|shape
parameter_list|)
block|{
if|if
condition|(
name|isJSON
condition|)
block|{
name|doc
operator|.
name|addField
argument_list|(
name|display
argument_list|,
operator|new
name|WriteableGeoJSON
argument_list|(
name|shape
argument_list|,
name|writer
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|addField
argument_list|(
name|display
argument_list|,
name|writer
operator|.
name|toString
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setValue
name|void
name|setValue
parameter_list|(
name|SolrDocument
name|doc
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
name|doc
operator|.
name|remove
argument_list|(
name|display
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|val
operator|instanceof
name|Iterable
condition|)
block|{
name|Iterator
name|iter
init|=
operator|(
operator|(
name|Iterable
operator|)
name|val
operator|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|addValue
argument_list|(
name|doc
argument_list|,
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|addValue
argument_list|(
name|doc
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addValue
name|void
name|addValue
parameter_list|(
name|SolrDocument
name|doc
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|val
operator|instanceof
name|Shape
condition|)
block|{
name|addShape
argument_list|(
name|doc
argument_list|,
operator|(
name|Shape
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
comment|// Don't explode on 'InvalidShpae'
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Exception
condition|)
block|{
name|doc
operator|.
name|setField
argument_list|(
name|display_error
argument_list|,
operator|(
operator|(
name|Exception
operator|)
name|val
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Use the stored value
if|if
condition|(
name|val
operator|instanceof
name|IndexableField
condition|)
block|{
name|val
operator|=
operator|(
operator|(
name|IndexableField
operator|)
name|val
operator|)
operator|.
name|stringValue
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|addShape
argument_list|(
name|doc
argument_list|,
name|formats
operator|.
name|read
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|doc
operator|.
name|setField
argument_list|(
name|display_error
argument_list|,
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
