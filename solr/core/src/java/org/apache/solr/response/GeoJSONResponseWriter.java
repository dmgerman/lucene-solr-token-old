begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.response
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|transform
operator|.
name|GeoTransformerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|transform
operator|.
name|WriteableGeoJSON
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|AbstractSpatialFieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|ReturnFields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|spatial4j
operator|.
name|context
operator|.
name|SpatialContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|spatial4j
operator|.
name|io
operator|.
name|ShapeWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|spatial4j
operator|.
name|io
operator|.
name|SupportedFormats
import|;
end_import
begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|spatial4j
operator|.
name|shape
operator|.
name|Shape
import|;
end_import
begin_comment
comment|/**  * Extend the standard JSONResponseWriter to support GeoJSON.  This writes  * a {@link SolrDocumentList} with a 'FeatureCollection', following the  * specification in<a href="http://geojson.org/">geojson.org</a>  */
end_comment
begin_class
DECL|class|GeoJSONResponseWriter
specifier|public
class|class
name|GeoJSONResponseWriter
extends|extends
name|JSONResponseWriter
block|{
DECL|field|FIELD
specifier|public
specifier|static
specifier|final
name|String
name|FIELD
init|=
literal|"geojson.field"
decl_stmt|;
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|geofield
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|FIELD
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|geofield
operator|==
literal|null
operator|||
name|geofield
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"GeoJSON.  Missing parameter: '"
operator|+
name|FIELD
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|SchemaField
name|sf
init|=
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getFieldOrNull
argument_list|(
name|geofield
argument_list|)
decl_stmt|;
if|if
condition|(
name|sf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"GeoJSON.  Unknown field: '"
operator|+
name|FIELD
operator|+
literal|"'="
operator|+
name|geofield
argument_list|)
throw|;
block|}
name|SupportedFormats
name|formats
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sf
operator|.
name|getType
argument_list|()
operator|instanceof
name|AbstractSpatialFieldType
condition|)
block|{
name|SpatialContext
name|ctx
init|=
operator|(
operator|(
name|AbstractSpatialFieldType
operator|)
name|sf
operator|.
name|getType
argument_list|()
operator|)
operator|.
name|getSpatialContext
argument_list|()
decl_stmt|;
name|formats
operator|=
name|ctx
operator|.
name|getFormats
argument_list|()
expr_stmt|;
block|}
name|JSONWriter
name|w
init|=
operator|new
name|GeoJSONWriter
argument_list|(
name|writer
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|,
name|geofield
argument_list|,
name|formats
argument_list|)
decl_stmt|;
try|try
block|{
name|w
operator|.
name|writeResponse
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
begin_class
DECL|class|GeoJSONWriter
class|class
name|GeoJSONWriter
extends|extends
name|JSONWriter
block|{
DECL|field|formats
specifier|final
name|SupportedFormats
name|formats
decl_stmt|;
DECL|field|geowriter
specifier|final
name|ShapeWriter
name|geowriter
decl_stmt|;
DECL|field|geofield
specifier|final
name|String
name|geofield
decl_stmt|;
DECL|method|GeoJSONWriter
specifier|public
name|GeoJSONWriter
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|String
name|geofield
parameter_list|,
name|SupportedFormats
name|formats
parameter_list|)
block|{
name|super
argument_list|(
name|writer
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|this
operator|.
name|geofield
operator|=
name|geofield
expr_stmt|;
name|this
operator|.
name|formats
operator|=
name|formats
expr_stmt|;
if|if
condition|(
name|formats
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|geowriter
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|geowriter
operator|=
name|formats
operator|.
name|getGeoJsonWriter
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeResponse
specifier|public
name|void
name|writeResponse
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|CommonParams
operator|.
name|OMIT_HEADER
argument_list|,
literal|false
argument_list|)
condition|)
block|{
if|if
condition|(
name|wrapperFunction
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|wrapperFunction
operator|+
literal|"("
argument_list|)
expr_stmt|;
block|}
name|rsp
operator|.
name|removeResponseHeader
argument_list|()
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|vals
init|=
name|rsp
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|Object
name|response
init|=
name|vals
operator|.
name|remove
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
if|if
condition|(
name|vals
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|writeVal
argument_list|(
literal|null
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"GeoJSON with "
operator|+
name|CommonParams
operator|.
name|OMIT_HEADER
operator|+
literal|" can not return more than a result set"
argument_list|)
throw|;
block|}
if|if
condition|(
name|wrapperFunction
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
comment|// ending with a newline looks much better from the command line
block|}
else|else
block|{
name|super
operator|.
name|writeResponse
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeSolrDocument
specifier|public
name|void
name|writeSolrDocument
parameter_list|(
name|String
name|name
parameter_list|,
name|SolrDocument
name|doc
parameter_list|,
name|ReturnFields
name|returnFields
parameter_list|,
name|int
name|idx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|writeArraySeparator
argument_list|()
expr_stmt|;
block|}
name|indent
argument_list|()
expr_stmt|;
name|writeMapOpener
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
name|writeKey
argument_list|(
literal|"type"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeVal
argument_list|(
literal|null
argument_list|,
literal|"Feature"
argument_list|)
expr_stmt|;
name|Object
name|val
init|=
name|doc
operator|.
name|getFieldValue
argument_list|(
name|geofield
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|writeFeatureGeometry
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|fname
range|:
name|doc
operator|.
name|getFieldNames
argument_list|()
control|)
block|{
if|if
condition|(
name|fname
operator|.
name|equals
argument_list|(
name|geofield
argument_list|)
operator|||
operator|(
operator|(
name|returnFields
operator|!=
literal|null
operator|&&
operator|!
name|returnFields
operator|.
name|wantsField
argument_list|(
name|fname
argument_list|)
operator|)
operator|)
condition|)
block|{
continue|continue;
block|}
name|writeMapSeparator
argument_list|()
expr_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|indent
argument_list|()
expr_stmt|;
name|writeKey
argument_list|(
literal|"properties"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeMapOpener
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|indent
argument_list|()
expr_stmt|;
name|writeKey
argument_list|(
name|fname
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|val
operator|=
name|doc
operator|.
name|getFieldValue
argument_list|(
name|fname
argument_list|)
expr_stmt|;
comment|// SolrDocument will now have multiValued fields represented as a Collection,
comment|// even if only a single value is returned for this document.
if|if
condition|(
name|val
operator|instanceof
name|List
condition|)
block|{
comment|// shortcut this common case instead of going through writeVal again
name|writeArray
argument_list|(
name|name
argument_list|,
operator|(
operator|(
name|Iterable
operator|)
name|val
operator|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeVal
argument_list|(
name|fname
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
comment|// GeoJSON does not really support nested FeatureCollections
if|if
condition|(
name|doc
operator|.
name|hasChildDocuments
argument_list|()
condition|)
block|{
if|if
condition|(
name|first
operator|==
literal|false
condition|)
block|{
name|writeMapSeparator
argument_list|()
expr_stmt|;
name|indent
argument_list|()
expr_stmt|;
block|}
name|writeKey
argument_list|(
literal|"_childDocuments_"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writeArrayOpener
argument_list|(
name|doc
operator|.
name|getChildDocumentCount
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SolrDocument
argument_list|>
name|childDocs
init|=
name|doc
operator|.
name|getChildDocuments
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childDocs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|writeSolrDocument
argument_list|(
literal|null
argument_list|,
name|childDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|null
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|writeArrayCloser
argument_list|()
expr_stmt|;
block|}
comment|// check that we added any properties
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|decLevel
argument_list|()
expr_stmt|;
name|writeMapCloser
argument_list|()
expr_stmt|;
block|}
name|decLevel
argument_list|()
expr_stmt|;
name|writeMapCloser
argument_list|()
expr_stmt|;
block|}
DECL|method|writeFeatureGeometry
specifier|protected
name|void
name|writeFeatureGeometry
parameter_list|(
name|Object
name|geo
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Support multi-valued geometries
if|if
condition|(
name|geo
operator|instanceof
name|Iterable
condition|)
block|{
name|Iterator
name|iter
init|=
operator|(
operator|(
name|Iterable
operator|)
name|geo
operator|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return;
comment|// empty list
block|}
else|else
block|{
name|geo
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// More than value
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|writeMapSeparator
argument_list|()
expr_stmt|;
name|indent
argument_list|()
expr_stmt|;
name|writeKey
argument_list|(
literal|"geometry"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
comment|// TODO: in the future, we can be smart and try to make this the appropriate MULTI* value
comment|// if all the values are the same
comment|// { "type": "GeometryCollection",
comment|//    "geometries": [
name|writeMapOpener
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|writeKey
argument_list|(
literal|"type"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeStr
argument_list|(
literal|null
argument_list|,
literal|"GeometryCollection"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeMapSeparator
argument_list|()
expr_stmt|;
name|writeKey
argument_list|(
literal|"geometries"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeArrayOpener
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// no trivial way to determine array size
name|incLevel
argument_list|()
expr_stmt|;
comment|// The first one
name|indent
argument_list|()
expr_stmt|;
name|writeGeo
argument_list|(
name|geo
argument_list|)
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// Each element in the array
name|writeArraySeparator
argument_list|()
expr_stmt|;
name|indent
argument_list|()
expr_stmt|;
name|writeGeo
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|decLevel
argument_list|()
expr_stmt|;
name|writeArrayCloser
argument_list|()
expr_stmt|;
name|writeMapCloser
argument_list|()
expr_stmt|;
name|decLevel
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
comment|// Single Value
if|if
condition|(
name|geo
operator|!=
literal|null
condition|)
block|{
name|writeMapSeparator
argument_list|()
expr_stmt|;
name|indent
argument_list|()
expr_stmt|;
name|writeKey
argument_list|(
literal|"geometry"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeGeo
argument_list|(
name|geo
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeGeo
specifier|protected
name|void
name|writeGeo
parameter_list|(
name|Object
name|geo
parameter_list|)
throws|throws
name|IOException
block|{
name|Shape
name|shape
init|=
literal|null
decl_stmt|;
name|String
name|str
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|geo
operator|instanceof
name|Shape
condition|)
block|{
name|shape
operator|=
operator|(
name|Shape
operator|)
name|geo
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|geo
operator|instanceof
name|IndexableField
condition|)
block|{
name|str
operator|=
operator|(
operator|(
name|IndexableField
operator|)
name|geo
operator|)
operator|.
name|stringValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|geo
operator|instanceof
name|WriteableGeoJSON
condition|)
block|{
name|shape
operator|=
operator|(
operator|(
name|WriteableGeoJSON
operator|)
name|geo
operator|)
operator|.
name|shape
expr_stmt|;
block|}
else|else
block|{
name|str
operator|=
name|geo
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|str
operator|!=
literal|null
condition|)
block|{
comment|// Assume it is well formed JSON
if|if
condition|(
name|str
operator|.
name|startsWith
argument_list|(
literal|"{"
argument_list|)
operator|&&
name|str
operator|.
name|endsWith
argument_list|(
literal|"}"
argument_list|)
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|str
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|formats
operator|==
literal|null
condition|)
block|{
comment|// The check is here and not in the constructor because we do not know if the
comment|// *stored* values for the field look like JSON until we actually try to read them
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"GeoJSON unable to write field: '&"
operator|+
name|GeoJSONResponseWriter
operator|.
name|FIELD
operator|+
literal|"="
operator|+
name|geofield
operator|+
literal|"' ("
operator|+
name|str
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|shape
operator|=
name|formats
operator|.
name|read
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|geowriter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"GeoJSON unable to write field: '&"
operator|+
name|GeoJSONResponseWriter
operator|.
name|FIELD
operator|+
literal|"="
operator|+
name|geofield
operator|+
literal|"'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|shape
operator|!=
literal|null
condition|)
block|{
name|geowriter
operator|.
name|write
argument_list|(
name|writer
argument_list|,
name|shape
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeStartDocumentList
specifier|public
name|void
name|writeStartDocumentList
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|start
parameter_list|,
name|int
name|size
parameter_list|,
name|long
name|numFound
parameter_list|,
name|Float
name|maxScore
parameter_list|)
throws|throws
name|IOException
block|{
name|writeMapOpener
argument_list|(
operator|(
name|maxScore
operator|==
literal|null
operator|)
condition|?
literal|3
else|:
literal|4
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
name|writeKey
argument_list|(
literal|"type"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeStr
argument_list|(
literal|null
argument_list|,
literal|"FeatureCollection"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeMapSeparator
argument_list|()
expr_stmt|;
name|writeKey
argument_list|(
literal|"numFound"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeLong
argument_list|(
literal|null
argument_list|,
name|numFound
argument_list|)
expr_stmt|;
name|writeMapSeparator
argument_list|()
expr_stmt|;
name|writeKey
argument_list|(
literal|"start"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeLong
argument_list|(
literal|null
argument_list|,
name|start
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxScore
operator|!=
literal|null
condition|)
block|{
name|writeMapSeparator
argument_list|()
expr_stmt|;
name|writeKey
argument_list|(
literal|"maxScore"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeFloat
argument_list|(
literal|null
argument_list|,
name|maxScore
argument_list|)
expr_stmt|;
block|}
name|writeMapSeparator
argument_list|()
expr_stmt|;
comment|// if can we get bbox of all results, we should write it here
comment|// indent();
name|writeKey
argument_list|(
literal|"features"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeArrayOpener
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeEndDocumentList
specifier|public
name|void
name|writeEndDocumentList
parameter_list|()
throws|throws
name|IOException
block|{
name|decLevel
argument_list|()
expr_stmt|;
name|writeArrayCloser
argument_list|()
expr_stmt|;
name|decLevel
argument_list|()
expr_stmt|;
name|indent
argument_list|()
expr_stmt|;
name|writeMapCloser
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
