begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.response
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|ReturnFields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrReturnFields
import|;
end_import
begin_comment
comment|/**  *  */
end_comment
begin_class
DECL|class|JSONResponseWriter
specifier|public
class|class
name|JSONResponseWriter
implements|implements
name|QueryResponseWriter
block|{
DECL|field|CONTENT_TYPE_JSON_UTF8
specifier|static
name|String
name|CONTENT_TYPE_JSON_UTF8
init|=
literal|"application/json; charset=UTF-8"
decl_stmt|;
DECL|field|contentType
specifier|private
name|String
name|contentType
init|=
name|CONTENT_TYPE_JSON_UTF8
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|namedList
parameter_list|)
block|{
name|String
name|contentType
init|=
operator|(
name|String
operator|)
name|namedList
operator|.
name|get
argument_list|(
literal|"content-type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|contentType
operator|=
name|contentType
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|IOException
block|{
name|JSONWriter
name|w
init|=
operator|new
name|JSONWriter
argument_list|(
name|writer
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|)
decl_stmt|;
try|try
block|{
name|w
operator|.
name|writeResponse
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContentType
specifier|public
name|String
name|getContentType
parameter_list|(
name|SolrQueryRequest
name|request
parameter_list|,
name|SolrQueryResponse
name|response
parameter_list|)
block|{
return|return
name|contentType
return|;
block|}
block|}
end_class
begin_class
DECL|class|JSONWriter
class|class
name|JSONWriter
extends|extends
name|TextResponseWriter
block|{
DECL|field|namedListStyle
specifier|private
name|String
name|namedListStyle
decl_stmt|;
DECL|field|wrapperFunction
specifier|private
name|String
name|wrapperFunction
decl_stmt|;
DECL|field|JSON_NL_STYLE
specifier|private
specifier|static
specifier|final
name|String
name|JSON_NL_STYLE
init|=
literal|"json.nl"
decl_stmt|;
DECL|field|JSON_NL_MAP
specifier|private
specifier|static
specifier|final
name|String
name|JSON_NL_MAP
init|=
literal|"map"
decl_stmt|;
DECL|field|JSON_NL_FLAT
specifier|private
specifier|static
specifier|final
name|String
name|JSON_NL_FLAT
init|=
literal|"flat"
decl_stmt|;
DECL|field|JSON_NL_ARROFARR
specifier|private
specifier|static
specifier|final
name|String
name|JSON_NL_ARROFARR
init|=
literal|"arrarr"
decl_stmt|;
DECL|field|JSON_NL_ARROFMAP
specifier|private
specifier|static
specifier|final
name|String
name|JSON_NL_ARROFMAP
init|=
literal|"arrmap"
decl_stmt|;
DECL|field|JSON_WRAPPER_FUNCTION
specifier|private
specifier|static
specifier|final
name|String
name|JSON_WRAPPER_FUNCTION
init|=
literal|"json.wrf"
decl_stmt|;
DECL|method|JSONWriter
specifier|public
name|JSONWriter
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
name|super
argument_list|(
name|writer
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|namedListStyle
operator|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|JSON_NL_STYLE
argument_list|,
name|JSON_NL_FLAT
argument_list|)
operator|.
name|intern
argument_list|()
expr_stmt|;
name|wrapperFunction
operator|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|JSON_WRAPPER_FUNCTION
argument_list|)
expr_stmt|;
block|}
DECL|method|writeResponse
specifier|public
name|void
name|writeResponse
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|wrapperFunction
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|wrapperFunction
operator|+
literal|"("
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|omitHeader
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|CommonParams
operator|.
name|OMIT_HEADER
argument_list|)
decl_stmt|;
if|if
condition|(
name|omitHeader
operator|!=
literal|null
operator|&&
name|omitHeader
condition|)
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|remove
argument_list|(
literal|"responseHeader"
argument_list|)
expr_stmt|;
name|writeNamedList
argument_list|(
literal|null
argument_list|,
name|rsp
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|wrapperFunction
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
comment|// ending with a newline looks much better from the command line
block|}
DECL|method|writeKey
specifier|protected
name|void
name|writeKey
parameter_list|(
name|String
name|fname
parameter_list|,
name|boolean
name|needsEscaping
parameter_list|)
throws|throws
name|IOException
block|{
name|writeStr
argument_list|(
literal|null
argument_list|,
name|fname
argument_list|,
name|needsEscaping
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
block|}
comment|/** Represents a NamedList directly as a JSON Object (essentially a Map)    * Map null to "" and name mangle any repeated keys to avoid repeats in the    * output.    */
DECL|method|writeNamedListAsMapMangled
specifier|protected
name|void
name|writeNamedListAsMapMangled
parameter_list|(
name|String
name|name
parameter_list|,
name|NamedList
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|val
operator|.
name|size
argument_list|()
decl_stmt|;
name|writeMapOpener
argument_list|(
name|sz
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
comment|// In JSON objects (maps) we can't have null keys or duplicates...
comment|// map null to "" and append a qualifier to duplicates.
comment|//
comment|// a=123,a=456 will be mapped to {a=1,a__1=456}
comment|// Disad: this is ambiguous since a real key could be called a__1
comment|//
comment|// Another possible mapping could aggregate multiple keys to an array:
comment|// a=123,a=456 maps to a=[123,456]
comment|// Disad: this is ambiguous with a real single value that happens to be an array
comment|//
comment|// Both of these mappings have ambiguities.
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|repeats
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|val
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
name|key
operator|=
literal|""
expr_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
name|repeats
operator|.
name|put
argument_list|(
name|key
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeMapSeparator
argument_list|()
expr_stmt|;
name|Integer
name|repeatCount
init|=
name|repeats
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|repeatCount
operator|==
literal|null
condition|)
block|{
name|repeats
operator|.
name|put
argument_list|(
name|key
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|newKey
init|=
name|key
decl_stmt|;
name|int
name|newCount
init|=
name|repeatCount
decl_stmt|;
do|do
block|{
comment|// avoid generated key clashing with a real key
name|newKey
operator|=
name|key
operator|+
literal|' '
operator|+
operator|(
operator|++
name|newCount
operator|)
expr_stmt|;
name|repeatCount
operator|=
name|repeats
operator|.
name|get
argument_list|(
name|newKey
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|repeatCount
operator|!=
literal|null
condition|)
do|;
name|repeats
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|newCount
argument_list|)
expr_stmt|;
name|key
operator|=
name|newKey
expr_stmt|;
block|}
block|}
name|indent
argument_list|()
expr_stmt|;
name|writeKey
argument_list|(
name|key
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writeVal
argument_list|(
name|key
argument_list|,
name|val
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|decLevel
argument_list|()
expr_stmt|;
name|writeMapCloser
argument_list|()
expr_stmt|;
block|}
comment|/** Represents a NamedList directly as a JSON Object (essentially a Map)    * repeating any keys if they are repeated in the NamedList.  null is mapped    * to "".    */
DECL|method|writeNamedListAsMapWithDups
specifier|protected
name|void
name|writeNamedListAsMapWithDups
parameter_list|(
name|String
name|name
parameter_list|,
name|NamedList
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|val
operator|.
name|size
argument_list|()
decl_stmt|;
name|writeMapOpener
argument_list|(
name|sz
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|writeMapSeparator
argument_list|()
expr_stmt|;
block|}
name|String
name|key
init|=
name|val
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
name|key
operator|=
literal|""
expr_stmt|;
name|indent
argument_list|()
expr_stmt|;
name|writeKey
argument_list|(
name|key
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writeVal
argument_list|(
name|key
argument_list|,
name|val
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|decLevel
argument_list|()
expr_stmt|;
name|writeMapCloser
argument_list|()
expr_stmt|;
block|}
comment|// Represents a NamedList directly as an array of JSON objects...
comment|// NamedList("a"=1,"b"=2,null=3) => [{"a":1},{"b":2},3]
DECL|method|writeNamedListAsArrMap
specifier|protected
name|void
name|writeNamedListAsArrMap
parameter_list|(
name|String
name|name
parameter_list|,
name|NamedList
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|val
operator|.
name|size
argument_list|()
decl_stmt|;
name|indent
argument_list|()
expr_stmt|;
name|writeArrayOpener
argument_list|(
name|sz
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|val
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|writeArraySeparator
argument_list|()
expr_stmt|;
block|}
name|indent
argument_list|()
expr_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|writeVal
argument_list|(
literal|null
argument_list|,
name|val
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeMapOpener
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|writeKey
argument_list|(
name|key
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writeVal
argument_list|(
name|key
argument_list|,
name|val
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|writeMapCloser
argument_list|()
expr_stmt|;
block|}
block|}
name|decLevel
argument_list|()
expr_stmt|;
name|writeArrayCloser
argument_list|()
expr_stmt|;
block|}
comment|// Represents a NamedList directly as an array of JSON objects...
comment|// NamedList("a"=1,"b"=2,null=3) => [["a",1],["b",2],[null,3]]
DECL|method|writeNamedListAsArrArr
specifier|protected
name|void
name|writeNamedListAsArrArr
parameter_list|(
name|String
name|name
parameter_list|,
name|NamedList
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|val
operator|.
name|size
argument_list|()
decl_stmt|;
name|indent
argument_list|()
expr_stmt|;
name|writeArrayOpener
argument_list|(
name|sz
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|val
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|writeArraySeparator
argument_list|()
expr_stmt|;
block|}
name|indent
argument_list|()
expr_stmt|;
comment|/*** if key is null, just write value???       if (key==null) {         writeVal(null,val.getVal(i));       } else {      ***/
name|writeArrayOpener
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|writeNull
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeStr
argument_list|(
literal|null
argument_list|,
name|key
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|writeArraySeparator
argument_list|()
expr_stmt|;
name|writeVal
argument_list|(
name|key
argument_list|,
name|val
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|decLevel
argument_list|()
expr_stmt|;
name|writeArrayCloser
argument_list|()
expr_stmt|;
block|}
name|decLevel
argument_list|()
expr_stmt|;
name|writeArrayCloser
argument_list|()
expr_stmt|;
block|}
comment|// Represents a NamedList directly as an array with keys/values
comment|// interleaved.
comment|// NamedList("a"=1,"b"=2,null=3) => ["a",1,"b",2,null,3]
DECL|method|writeNamedListAsFlat
specifier|protected
name|void
name|writeNamedListAsFlat
parameter_list|(
name|String
name|name
parameter_list|,
name|NamedList
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|val
operator|.
name|size
argument_list|()
decl_stmt|;
name|writeArrayOpener
argument_list|(
name|sz
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|writeArraySeparator
argument_list|()
expr_stmt|;
block|}
name|String
name|key
init|=
name|val
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|indent
argument_list|()
expr_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|writeNull
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeStr
argument_list|(
literal|null
argument_list|,
name|key
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|writeArraySeparator
argument_list|()
expr_stmt|;
name|writeVal
argument_list|(
name|key
argument_list|,
name|val
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|decLevel
argument_list|()
expr_stmt|;
name|writeArrayCloser
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeNamedList
specifier|public
name|void
name|writeNamedList
parameter_list|(
name|String
name|name
parameter_list|,
name|NamedList
name|val
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|val
operator|instanceof
name|SimpleOrderedMap
condition|)
block|{
name|writeNamedListAsMapWithDups
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|namedListStyle
operator|==
name|JSON_NL_FLAT
condition|)
block|{
name|writeNamedListAsFlat
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|namedListStyle
operator|==
name|JSON_NL_MAP
condition|)
block|{
name|writeNamedListAsMapWithDups
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|namedListStyle
operator|==
name|JSON_NL_ARROFARR
condition|)
block|{
name|writeNamedListAsArrArr
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|namedListStyle
operator|==
name|JSON_NL_ARROFMAP
condition|)
block|{
name|writeNamedListAsArrMap
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MultiValueField
specifier|protected
specifier|static
class|class
name|MultiValueField
block|{
DECL|field|sfield
specifier|final
name|SchemaField
name|sfield
decl_stmt|;
DECL|field|fields
specifier|final
name|ArrayList
argument_list|<
name|IndexableField
argument_list|>
name|fields
decl_stmt|;
DECL|method|MultiValueField
name|MultiValueField
parameter_list|(
name|SchemaField
name|sfield
parameter_list|,
name|IndexableField
name|firstVal
parameter_list|)
block|{
name|this
operator|.
name|sfield
operator|=
name|sfield
expr_stmt|;
name|this
operator|.
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|this
operator|.
name|fields
operator|.
name|add
argument_list|(
name|firstVal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeSolrDocument
specifier|public
name|void
name|writeSolrDocument
parameter_list|(
name|String
name|name
parameter_list|,
name|SolrDocument
name|doc
parameter_list|,
name|ReturnFields
name|returnFields
parameter_list|,
name|int
name|idx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|writeArraySeparator
argument_list|()
expr_stmt|;
block|}
name|indent
argument_list|()
expr_stmt|;
name|writeMapOpener
argument_list|(
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|fname
range|:
name|doc
operator|.
name|getFieldNames
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|returnFields
operator|.
name|wantsField
argument_list|(
name|fname
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|writeMapSeparator
argument_list|()
expr_stmt|;
block|}
name|indent
argument_list|()
expr_stmt|;
name|writeKey
argument_list|(
name|fname
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Object
name|val
init|=
name|doc
operator|.
name|getFieldValue
argument_list|(
name|fname
argument_list|)
decl_stmt|;
comment|// SolrDocument will now have multiValued fields represented as a Collection,
comment|// even if only a single value is returned for this document.
if|if
condition|(
name|val
operator|instanceof
name|List
condition|)
block|{
comment|// shortcut this common case instead of going through writeVal again
name|writeArray
argument_list|(
name|name
argument_list|,
operator|(
operator|(
name|Iterable
operator|)
name|val
operator|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeVal
argument_list|(
name|fname
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|doc
operator|.
name|hasChildDocuments
argument_list|()
condition|)
block|{
if|if
condition|(
name|first
operator|==
literal|false
condition|)
block|{
name|writeMapSeparator
argument_list|()
expr_stmt|;
name|indent
argument_list|()
expr_stmt|;
block|}
name|writeKey
argument_list|(
literal|"_childDocuments_"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writeArrayOpener
argument_list|(
name|doc
operator|.
name|getChildDocumentCount
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SolrDocument
argument_list|>
name|childDocs
init|=
name|doc
operator|.
name|getChildDocuments
argument_list|()
decl_stmt|;
name|ReturnFields
name|rf
init|=
operator|new
name|SolrReturnFields
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childDocs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|writeSolrDocument
argument_list|(
literal|null
argument_list|,
name|childDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|rf
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|writeArrayCloser
argument_list|()
expr_stmt|;
block|}
name|decLevel
argument_list|()
expr_stmt|;
name|writeMapCloser
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeStartDocumentList
specifier|public
name|void
name|writeStartDocumentList
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|start
parameter_list|,
name|int
name|size
parameter_list|,
name|long
name|numFound
parameter_list|,
name|Float
name|maxScore
parameter_list|)
throws|throws
name|IOException
block|{
name|writeMapOpener
argument_list|(
operator|(
name|maxScore
operator|==
literal|null
operator|)
condition|?
literal|3
else|:
literal|4
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
name|writeKey
argument_list|(
literal|"numFound"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeLong
argument_list|(
literal|null
argument_list|,
name|numFound
argument_list|)
expr_stmt|;
name|writeMapSeparator
argument_list|()
expr_stmt|;
name|writeKey
argument_list|(
literal|"start"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeLong
argument_list|(
literal|null
argument_list|,
name|start
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxScore
operator|!=
literal|null
condition|)
block|{
name|writeMapSeparator
argument_list|()
expr_stmt|;
name|writeKey
argument_list|(
literal|"maxScore"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeFloat
argument_list|(
literal|null
argument_list|,
name|maxScore
argument_list|)
expr_stmt|;
block|}
name|writeMapSeparator
argument_list|()
expr_stmt|;
comment|// indent();
name|writeKey
argument_list|(
literal|"docs"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeArrayOpener
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeEndDocumentList
specifier|public
name|void
name|writeEndDocumentList
parameter_list|()
throws|throws
name|IOException
block|{
name|decLevel
argument_list|()
expr_stmt|;
name|writeArrayCloser
argument_list|()
expr_stmt|;
name|decLevel
argument_list|()
expr_stmt|;
name|indent
argument_list|()
expr_stmt|;
name|writeMapCloser
argument_list|()
expr_stmt|;
block|}
comment|//
comment|// Data structure tokens
comment|// NOTE: a positive size paramater indicates the number of elements
comment|//       contained in an array or map, a negative value indicates
comment|//       that the size could not be reliably determined.
comment|//
DECL|method|writeMapOpener
specifier|public
name|void
name|writeMapOpener
parameter_list|(
name|int
name|size
parameter_list|)
throws|throws
name|IOException
throws|,
name|IllegalArgumentException
block|{
name|writer
operator|.
name|write
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
block|}
DECL|method|writeMapSeparator
specifier|public
name|void
name|writeMapSeparator
parameter_list|()
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
DECL|method|writeMapCloser
specifier|public
name|void
name|writeMapCloser
parameter_list|()
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
DECL|method|writeArrayOpener
specifier|public
name|void
name|writeArrayOpener
parameter_list|(
name|int
name|size
parameter_list|)
throws|throws
name|IOException
throws|,
name|IllegalArgumentException
block|{
name|writer
operator|.
name|write
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
block|}
DECL|method|writeArraySeparator
specifier|public
name|void
name|writeArraySeparator
parameter_list|()
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
DECL|method|writeArrayCloser
specifier|public
name|void
name|writeArrayCloser
parameter_list|()
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeStr
specifier|public
name|void
name|writeStr
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|boolean
name|needsEscaping
parameter_list|)
throws|throws
name|IOException
block|{
comment|// it might be more efficient to use a stringbuilder or write substrings
comment|// if writing chars to the stream is slow.
if|if
condition|(
name|needsEscaping
condition|)
block|{
comment|/* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt       All Unicode characters may be placed within       the quotation marks except for the characters which must be       escaped: quotation mark, reverse solidus, and the control       characters (U+0000 through U+001F).      */
name|writer
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|val
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|val
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|ch
operator|>
literal|'#'
operator|&&
name|ch
operator|!=
literal|'\\'
operator|&&
name|ch
operator|<
literal|'\u2028'
operator|)
operator|||
name|ch
operator|==
literal|' '
condition|)
block|{
comment|// fast path
name|writer
operator|.
name|write
argument_list|(
name|ch
argument_list|)
expr_stmt|;
continue|continue;
block|}
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|'"'
case|:
case|case
literal|'\\'
case|:
name|writer
operator|.
name|write
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|ch
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\r'
case|:
name|writer
operator|.
name|write
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'r'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\n'
case|:
name|writer
operator|.
name|write
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'n'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\t'
case|:
name|writer
operator|.
name|write
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'t'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\b'
case|:
name|writer
operator|.
name|write
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'b'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\f'
case|:
name|writer
operator|.
name|write
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'f'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\u2028'
case|:
comment|// fallthrough
case|case
literal|'\u2029'
case|:
name|unicodeEscape
argument_list|(
name|writer
argument_list|,
name|ch
argument_list|)
expr_stmt|;
break|break;
comment|// case '/':
default|default:
block|{
if|if
condition|(
name|ch
operator|<=
literal|0x1F
condition|)
block|{
name|unicodeEscape
argument_list|(
name|writer
argument_list|,
name|ch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|writer
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeMap
specifier|public
name|void
name|writeMap
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
name|val
parameter_list|,
name|boolean
name|excludeOuter
parameter_list|,
name|boolean
name|isFirstVal
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|excludeOuter
condition|)
block|{
name|writeMapOpener
argument_list|(
name|val
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
name|isFirstVal
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|doIndent
init|=
name|excludeOuter
operator|||
name|val
operator|.
name|size
argument_list|()
operator|>
literal|1
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
operator|(
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|>
operator|)
name|val
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|e
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|k
init|=
name|e
operator|==
literal|null
condition|?
literal|""
else|:
name|e
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Object
name|v
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|isFirstVal
condition|)
block|{
name|isFirstVal
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|writeMapSeparator
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|doIndent
condition|)
name|indent
argument_list|()
expr_stmt|;
name|writeKey
argument_list|(
name|k
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writeVal
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|excludeOuter
condition|)
block|{
name|decLevel
argument_list|()
expr_stmt|;
name|writeMapCloser
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeArray
specifier|public
name|void
name|writeArray
parameter_list|(
name|String
name|name
parameter_list|,
name|Iterator
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writeArrayOpener
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// no trivial way to determine array size
name|incLevel
argument_list|()
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|val
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|indent
argument_list|()
expr_stmt|;
name|writeVal
argument_list|(
literal|null
argument_list|,
name|val
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|writeArraySeparator
argument_list|()
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|decLevel
argument_list|()
expr_stmt|;
name|writeArrayCloser
argument_list|()
expr_stmt|;
block|}
comment|//
comment|// Primitive types
comment|//
annotation|@
name|Override
DECL|method|writeNull
specifier|public
name|void
name|writeNull
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeInt
specifier|public
name|void
name|writeInt
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeLong
specifier|public
name|void
name|writeLong
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeBool
specifier|public
name|void
name|writeBool
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeFloat
specifier|public
name|void
name|writeFloat
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeDouble
specifier|public
name|void
name|writeDouble
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeDate
specifier|public
name|void
name|writeDate
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writeStr
argument_list|(
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|field|hexdigits
specifier|private
specifier|static
name|char
index|[]
name|hexdigits
init|=
block|{
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|}
decl_stmt|;
DECL|method|unicodeEscape
specifier|protected
specifier|static
name|void
name|unicodeEscape
parameter_list|(
name|Appendable
name|out
parameter_list|,
name|int
name|ch
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|'u'
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|hexdigits
index|[
operator|(
name|ch
operator|>>>
literal|12
operator|)
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|hexdigits
index|[
operator|(
name|ch
operator|>>>
literal|8
operator|)
operator|&
literal|0xf
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|hexdigits
index|[
operator|(
name|ch
operator|>>>
literal|4
operator|)
operator|&
literal|0xf
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|hexdigits
index|[
operator|(
name|ch
operator|)
operator|&
literal|0xf
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class
begin_class
DECL|class|NaNFloatWriter
specifier|abstract
class|class
name|NaNFloatWriter
extends|extends
name|JSONWriter
block|{
DECL|method|getNaN
specifier|abstract
specifier|protected
name|String
name|getNaN
parameter_list|()
function_decl|;
DECL|method|getInf
specifier|abstract
specifier|protected
name|String
name|getInf
parameter_list|()
function_decl|;
DECL|method|NaNFloatWriter
specifier|public
name|NaNFloatWriter
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
name|super
argument_list|(
name|writer
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeFloat
specifier|public
name|void
name|writeFloat
parameter_list|(
name|String
name|name
parameter_list|,
name|float
name|val
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Float
operator|.
name|isNaN
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|getNaN
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Float
operator|.
name|isInfinite
argument_list|(
name|val
argument_list|)
condition|)
block|{
if|if
condition|(
name|val
operator|<
literal|0.0f
condition|)
name|writer
operator|.
name|write
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|getInf
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeFloat
argument_list|(
name|name
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeDouble
specifier|public
name|void
name|writeDouble
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|val
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|getNaN
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Double
operator|.
name|isInfinite
argument_list|(
name|val
argument_list|)
condition|)
block|{
if|if
condition|(
name|val
operator|<
literal|0.0
condition|)
name|writer
operator|.
name|write
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|getInf
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeDouble
argument_list|(
name|name
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
