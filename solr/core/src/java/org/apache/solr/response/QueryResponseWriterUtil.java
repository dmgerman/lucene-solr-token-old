begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.response
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStreamBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|FastWriter
import|;
end_import
begin_comment
comment|/**  * Static utility methods relating to {@link QueryResponseWriter}s  */
end_comment
begin_class
DECL|class|QueryResponseWriterUtil
specifier|public
specifier|final
class|class
name|QueryResponseWriterUtil
block|{
DECL|method|QueryResponseWriterUtil
specifier|private
name|QueryResponseWriterUtil
parameter_list|()
block|{
comment|/* static helpers only */
block|}
comment|/**    * Writes the response writer's result to the given output stream.    * This method inspects the specified writer to determine if it is a     * {@link BinaryQueryResponseWriter} or not to delegate to the approprate method.    * @see BinaryQueryResponseWriter#write(OutputStream,SolrQueryRequest,SolrQueryResponse)    * @see BinaryQueryResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse)    */
DECL|method|writeQueryResponse
specifier|public
specifier|static
name|void
name|writeQueryResponse
parameter_list|(
name|OutputStream
name|outputStream
parameter_list|,
name|QueryResponseWriter
name|responseWriter
parameter_list|,
name|SolrQueryRequest
name|solrRequest
parameter_list|,
name|SolrQueryResponse
name|solrResponse
parameter_list|,
name|String
name|contentType
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|responseWriter
operator|instanceof
name|BinaryQueryResponseWriter
condition|)
block|{
name|BinaryQueryResponseWriter
name|binWriter
init|=
operator|(
name|BinaryQueryResponseWriter
operator|)
name|responseWriter
decl_stmt|;
name|binWriter
operator|.
name|write
argument_list|(
name|outputStream
argument_list|,
name|solrRequest
argument_list|,
name|solrResponse
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Writer
name|writer
init|=
name|buildWriter
argument_list|(
name|outputStream
argument_list|,
name|ContentStreamBase
operator|.
name|getCharsetFromContentType
argument_list|(
name|contentType
argument_list|)
argument_list|)
decl_stmt|;
name|responseWriter
operator|.
name|write
argument_list|(
name|writer
argument_list|,
name|solrRequest
argument_list|,
name|solrResponse
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|buildWriter
specifier|private
specifier|static
name|Writer
name|buildWriter
parameter_list|(
name|OutputStream
name|outputStream
parameter_list|,
name|String
name|charset
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|Writer
name|writer
init|=
operator|(
name|charset
operator|==
literal|null
operator|)
condition|?
operator|new
name|OutputStreamWriter
argument_list|(
name|outputStream
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
else|:
operator|new
name|OutputStreamWriter
argument_list|(
name|outputStream
argument_list|,
name|charset
argument_list|)
decl_stmt|;
return|return
operator|new
name|FastWriter
argument_list|(
name|writer
argument_list|)
return|;
block|}
block|}
end_class
end_unit
