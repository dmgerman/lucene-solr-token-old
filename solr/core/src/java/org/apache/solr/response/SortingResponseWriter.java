begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.response
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieFloatField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieDoubleField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieIntField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieLongField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|StrField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SortSpec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SyntaxError
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_class
DECL|class|SortingResponseWriter
specifier|public
class|class
name|SortingResponseWriter
implements|implements
name|QueryResponseWriter
block|{
DECL|field|logger
specifier|private
specifier|final
specifier|static
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SortingResponseWriter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
comment|/* NOOP */
block|}
DECL|method|getContentType
specifier|public
name|String
name|getContentType
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|res
parameter_list|)
block|{
return|return
literal|"application/json"
return|;
block|}
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
name|Exception
name|e1
init|=
name|res
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|e1
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|e1
operator|instanceof
name|IgnoreException
operator|)
condition|)
block|{
name|e1
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|writer
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|SolrRequestInfo
name|info
init|=
name|SolrRequestInfo
operator|.
name|getRequestInfo
argument_list|()
decl_stmt|;
name|SortSpec
name|sortSpec
init|=
name|info
operator|.
name|getResponseBuilder
argument_list|()
operator|.
name|getSortSpec
argument_list|()
decl_stmt|;
if|if
condition|(
name|sortSpec
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
operator|new
name|SyntaxError
argument_list|(
literal|"No sort criteria was provided."
argument_list|)
argument_list|)
throw|;
block|}
name|SolrIndexSearcher
name|searcher
init|=
name|req
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
name|Sort
name|sort
init|=
name|searcher
operator|.
name|weightSort
argument_list|(
name|sortSpec
operator|.
name|getSort
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sort
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
operator|new
name|SyntaxError
argument_list|(
literal|"No sort criteria was provided."
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|sort
operator|.
name|needsScores
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
operator|new
name|SyntaxError
argument_list|(
literal|"Scoring is not currently supported with xsort."
argument_list|)
argument_list|)
throw|;
block|}
name|FixedBitSet
index|[]
name|sets
init|=
operator|(
name|FixedBitSet
index|[]
operator|)
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|get
argument_list|(
literal|"export"
argument_list|)
decl_stmt|;
name|Integer
name|th
init|=
operator|(
name|Integer
operator|)
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|get
argument_list|(
literal|"totalHits"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sets
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
operator|new
name|SyntaxError
argument_list|(
literal|"xport RankQuery is required for xsort: rq={!xport}"
argument_list|)
argument_list|)
throw|;
block|}
name|int
name|totalHits
init|=
name|th
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|fl
init|=
name|params
operator|.
name|get
argument_list|(
literal|"fl"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
operator|new
name|SyntaxError
argument_list|(
literal|"export field list (fl) must be specified."
argument_list|)
argument_list|)
throw|;
block|}
name|String
index|[]
name|fields
init|=
name|fl
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fl
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"score"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
operator|new
name|SyntaxError
argument_list|(
literal|"Scoring is not currently supported with xsort."
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|FieldWriter
index|[]
name|fieldWriters
init|=
name|getFieldWriters
argument_list|(
name|fields
argument_list|,
name|req
operator|.
name|getSearcher
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"{\"numFound\":"
operator|+
name|totalHits
operator|+
literal|", \"docs\":["
argument_list|)
expr_stmt|;
comment|//Write the data.
name|List
argument_list|<
name|AtomicReaderContext
argument_list|>
name|leaves
init|=
name|req
operator|.
name|getSearcher
argument_list|()
operator|.
name|getTopReaderContext
argument_list|()
operator|.
name|leaves
argument_list|()
decl_stmt|;
name|SortDoc
name|sortDoc
init|=
name|getSortDoc
argument_list|(
name|req
operator|.
name|getSearcher
argument_list|()
argument_list|,
name|sort
operator|.
name|getSort
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|queueSize
init|=
literal|30000
decl_stmt|;
name|SortQueue
name|queue
init|=
operator|new
name|SortQueue
argument_list|(
name|queueSize
argument_list|,
name|sortDoc
argument_list|)
decl_stmt|;
name|SortDoc
index|[]
name|outDocs
init|=
operator|new
name|SortDoc
index|[
name|queueSize
index|]
decl_stmt|;
name|long
name|total
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|count
operator|<
name|totalHits
condition|)
block|{
comment|//long begin = System.nanoTime();
name|boolean
name|commaNeeded
init|=
literal|false
decl_stmt|;
name|queue
operator|.
name|reset
argument_list|()
expr_stmt|;
name|SortDoc
name|top
init|=
name|queue
operator|.
name|top
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leaves
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sortDoc
operator|.
name|setNextReader
argument_list|(
name|leaves
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|DocIdSetIterator
name|it
init|=
name|sets
index|[
name|i
index|]
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|docId
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|docId
operator|=
name|it
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|sortDoc
operator|.
name|setValues
argument_list|(
name|docId
argument_list|)
expr_stmt|;
if|if
condition|(
name|top
operator|.
name|lessThan
argument_list|(
name|sortDoc
argument_list|)
condition|)
block|{
name|top
operator|.
name|setValues
argument_list|(
name|sortDoc
argument_list|)
expr_stmt|;
name|top
operator|=
name|queue
operator|.
name|updateTop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|int
name|outDocsIndex
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queueSize
condition|;
name|i
operator|++
control|)
block|{
name|SortDoc
name|s
init|=
name|queue
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|docId
operator|>
operator|-
literal|1
condition|)
block|{
name|outDocs
index|[
operator|++
name|outDocsIndex
index|]
operator|=
name|s
expr_stmt|;
block|}
block|}
comment|//long end = System.nanoTime();
name|count
operator|+=
operator|(
name|outDocsIndex
operator|+
literal|1
operator|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
name|outDocsIndex
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|SortDoc
name|s
init|=
name|outDocs
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|commaNeeded
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|writeDoc
argument_list|(
name|s
argument_list|,
name|leaves
argument_list|,
name|fieldWriters
argument_list|,
name|sets
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
name|commaNeeded
operator|=
literal|true
expr_stmt|;
name|s
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|Throwable
name|ex
init|=
name|e
decl_stmt|;
while|while
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
name|String
name|m
init|=
name|ex
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
operator|&&
name|m
operator|.
name|contains
argument_list|(
literal|"Broken pipe"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IgnoreException
argument_list|()
throw|;
block|}
name|ex
operator|=
name|ex
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
operator|(
name|IOException
operator|)
name|e
operator|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|//System.out.println("Sort Time 2:"+Long.toString(total/1000000));
name|writer
operator|.
name|write
argument_list|(
literal|"]}"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|class|IgnoreException
specifier|public
specifier|static
class|class
name|IgnoreException
extends|extends
name|IOException
block|{
DECL|method|printStackTrace
specifier|public
name|void
name|printStackTrace
parameter_list|(
name|PrintWriter
name|pw
parameter_list|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|"Early Client Disconnect"
argument_list|)
expr_stmt|;
block|}
DECL|method|getMessage
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
literal|"Early Client Disconnect"
return|;
block|}
block|}
DECL|method|writeDoc
specifier|protected
name|void
name|writeDoc
parameter_list|(
name|SortDoc
name|sortDoc
parameter_list|,
name|List
argument_list|<
name|AtomicReaderContext
argument_list|>
name|leaves
parameter_list|,
name|FieldWriter
index|[]
name|fieldWriters
parameter_list|,
name|FixedBitSet
index|[]
name|sets
parameter_list|,
name|Writer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ord
init|=
name|sortDoc
operator|.
name|ord
decl_stmt|;
name|FixedBitSet
name|set
init|=
name|sets
index|[
name|ord
index|]
decl_stmt|;
name|set
operator|.
name|clear
argument_list|(
name|sortDoc
operator|.
name|docId
argument_list|)
expr_stmt|;
name|AtomicReaderContext
name|context
init|=
name|leaves
operator|.
name|get
argument_list|(
name|ord
argument_list|)
decl_stmt|;
name|boolean
name|needsComma
init|=
literal|false
decl_stmt|;
for|for
control|(
name|FieldWriter
name|fieldWriter
range|:
name|fieldWriters
control|)
block|{
if|if
condition|(
name|needsComma
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|fieldWriter
operator|.
name|write
argument_list|(
name|sortDoc
operator|.
name|docId
argument_list|,
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|needsComma
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|getFieldWriters
specifier|protected
name|FieldWriter
index|[]
name|getFieldWriters
parameter_list|(
name|String
index|[]
name|fields
parameter_list|,
name|SolrIndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexSchema
name|schema
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|FieldWriter
index|[]
name|writers
init|=
operator|new
name|FieldWriter
index|[
name|fields
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|field
init|=
name|fields
index|[
name|i
index|]
decl_stmt|;
name|SchemaField
name|schemaField
init|=
name|schema
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|schemaField
operator|.
name|hasDocValues
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|field
operator|+
literal|" must have DocValues to use this feature."
argument_list|)
throw|;
block|}
name|boolean
name|multiValued
init|=
name|schemaField
operator|.
name|multiValued
argument_list|()
decl_stmt|;
name|FieldType
name|fieldType
init|=
name|schemaField
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldType
operator|instanceof
name|TrieIntField
condition|)
block|{
if|if
condition|(
name|multiValued
condition|)
block|{
name|writers
index|[
name|i
index|]
operator|=
operator|new
name|MultiFieldWriter
argument_list|(
name|field
argument_list|,
name|fieldType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writers
index|[
name|i
index|]
operator|=
operator|new
name|IntFieldWriter
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fieldType
operator|instanceof
name|TrieLongField
condition|)
block|{
if|if
condition|(
name|multiValued
condition|)
block|{
name|writers
index|[
name|i
index|]
operator|=
operator|new
name|MultiFieldWriter
argument_list|(
name|field
argument_list|,
name|fieldType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writers
index|[
name|i
index|]
operator|=
operator|new
name|LongFieldWriter
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fieldType
operator|instanceof
name|TrieFloatField
condition|)
block|{
if|if
condition|(
name|multiValued
condition|)
block|{
name|writers
index|[
name|i
index|]
operator|=
operator|new
name|MultiFieldWriter
argument_list|(
name|field
argument_list|,
name|fieldType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writers
index|[
name|i
index|]
operator|=
operator|new
name|FloatFieldWriter
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fieldType
operator|instanceof
name|TrieDoubleField
condition|)
block|{
if|if
condition|(
name|multiValued
condition|)
block|{
name|writers
index|[
name|i
index|]
operator|=
operator|new
name|MultiFieldWriter
argument_list|(
name|field
argument_list|,
name|fieldType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writers
index|[
name|i
index|]
operator|=
operator|new
name|DoubleFieldWriter
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fieldType
operator|instanceof
name|StrField
condition|)
block|{
if|if
condition|(
name|multiValued
condition|)
block|{
name|writers
index|[
name|i
index|]
operator|=
operator|new
name|MultiFieldWriter
argument_list|(
name|field
argument_list|,
name|fieldType
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writers
index|[
name|i
index|]
operator|=
operator|new
name|StringFieldWriter
argument_list|(
name|field
argument_list|,
name|fieldType
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Export fields must either be one of the following types: int,float,long,double,string"
argument_list|)
throw|;
block|}
block|}
return|return
name|writers
return|;
block|}
DECL|method|getSortDoc
specifier|private
name|SortDoc
name|getSortDoc
parameter_list|(
name|SolrIndexSearcher
name|searcher
parameter_list|,
name|SortField
index|[]
name|sortFields
parameter_list|)
throws|throws
name|IOException
block|{
name|SortValue
index|[]
name|sortValues
init|=
operator|new
name|SortValue
index|[
name|sortFields
operator|.
name|length
index|]
decl_stmt|;
name|IndexSchema
name|schema
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortFields
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|SortField
name|sf
init|=
name|sortFields
index|[
name|i
index|]
decl_stmt|;
name|String
name|field
init|=
name|sf
operator|.
name|getField
argument_list|()
decl_stmt|;
name|boolean
name|reverse
init|=
name|sf
operator|.
name|getReverse
argument_list|()
decl_stmt|;
name|SchemaField
name|schemaField
init|=
name|schema
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|FieldType
name|ft
init|=
name|schemaField
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|schemaField
operator|.
name|hasDocValues
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|field
operator|+
literal|" must have DocValues to use this feature."
argument_list|)
throw|;
block|}
if|if
condition|(
name|ft
operator|instanceof
name|TrieIntField
condition|)
block|{
if|if
condition|(
name|reverse
condition|)
block|{
name|sortValues
index|[
name|i
index|]
operator|=
operator|new
name|IntValue
argument_list|(
name|field
argument_list|,
operator|new
name|IntDesc
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sortValues
index|[
name|i
index|]
operator|=
operator|new
name|IntValue
argument_list|(
name|field
argument_list|,
operator|new
name|IntAsc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ft
operator|instanceof
name|TrieFloatField
condition|)
block|{
if|if
condition|(
name|reverse
condition|)
block|{
name|sortValues
index|[
name|i
index|]
operator|=
operator|new
name|FloatValue
argument_list|(
name|field
argument_list|,
operator|new
name|FloatDesc
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sortValues
index|[
name|i
index|]
operator|=
operator|new
name|FloatValue
argument_list|(
name|field
argument_list|,
operator|new
name|FloatAsc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ft
operator|instanceof
name|TrieDoubleField
condition|)
block|{
if|if
condition|(
name|reverse
condition|)
block|{
name|sortValues
index|[
name|i
index|]
operator|=
operator|new
name|DoubleValue
argument_list|(
name|field
argument_list|,
operator|new
name|DoubleDesc
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sortValues
index|[
name|i
index|]
operator|=
operator|new
name|DoubleValue
argument_list|(
name|field
argument_list|,
operator|new
name|DoubleAsc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ft
operator|instanceof
name|TrieLongField
condition|)
block|{
if|if
condition|(
name|reverse
condition|)
block|{
name|sortValues
index|[
name|i
index|]
operator|=
operator|new
name|LongValue
argument_list|(
name|field
argument_list|,
operator|new
name|LongDesc
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sortValues
index|[
name|i
index|]
operator|=
operator|new
name|LongValue
argument_list|(
name|field
argument_list|,
operator|new
name|LongAsc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ft
operator|instanceof
name|StrField
condition|)
block|{
name|AtomicReader
name|reader
init|=
name|searcher
operator|.
name|getAtomicReader
argument_list|()
decl_stmt|;
name|SortedDocValues
name|vals
init|=
name|reader
operator|.
name|getSortedDocValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|reverse
condition|)
block|{
name|sortValues
index|[
name|i
index|]
operator|=
operator|new
name|StringValue
argument_list|(
name|vals
argument_list|,
name|field
argument_list|,
operator|new
name|IntDesc
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sortValues
index|[
name|i
index|]
operator|=
operator|new
name|StringValue
argument_list|(
name|vals
argument_list|,
name|field
argument_list|,
operator|new
name|IntAsc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Sort fields must be one of the following types: int,float,long,double,string"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|sortValues
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
operator|new
name|SingleValueSortDoc
argument_list|(
name|sortValues
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|sortValues
operator|.
name|length
operator|==
literal|2
condition|)
block|{
return|return
operator|new
name|DoubleValueSortDoc
argument_list|(
name|sortValues
index|[
literal|0
index|]
argument_list|,
name|sortValues
index|[
literal|1
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|sortValues
operator|.
name|length
operator|==
literal|3
condition|)
block|{
return|return
operator|new
name|TripleValueSortDoc
argument_list|(
name|sortValues
index|[
literal|0
index|]
argument_list|,
name|sortValues
index|[
literal|1
index|]
argument_list|,
name|sortValues
index|[
literal|2
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|sortValues
operator|.
name|length
operator|==
literal|4
condition|)
block|{
return|return
operator|new
name|QuadValueSortDoc
argument_list|(
name|sortValues
index|[
literal|0
index|]
argument_list|,
name|sortValues
index|[
literal|1
index|]
argument_list|,
name|sortValues
index|[
literal|2
index|]
argument_list|,
name|sortValues
index|[
literal|3
index|]
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"A max of 4 sorts can be specified"
argument_list|)
throw|;
block|}
block|}
DECL|class|SortQueue
class|class
name|SortQueue
extends|extends
name|PriorityQueue
argument_list|<
name|SortDoc
argument_list|>
block|{
DECL|field|proto
specifier|private
name|SortDoc
name|proto
decl_stmt|;
DECL|field|cache
specifier|private
name|Object
index|[]
name|cache
decl_stmt|;
DECL|method|SortQueue
specifier|public
name|SortQueue
parameter_list|(
name|int
name|len
parameter_list|,
name|SortDoc
name|proto
parameter_list|)
block|{
name|super
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|this
operator|.
name|proto
operator|=
name|proto
expr_stmt|;
block|}
DECL|method|lessThan
specifier|protected
name|boolean
name|lessThan
parameter_list|(
name|SortDoc
name|t1
parameter_list|,
name|SortDoc
name|t2
parameter_list|)
block|{
return|return
name|t1
operator|.
name|lessThan
argument_list|(
name|t2
argument_list|)
return|;
block|}
DECL|method|populate
specifier|private
name|void
name|populate
parameter_list|()
block|{
name|Object
index|[]
name|heap
init|=
name|getHeapArray
argument_list|()
decl_stmt|;
name|cache
operator|=
operator|new
name|SortDoc
index|[
name|heap
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|heap
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cache
index|[
name|i
index|]
operator|=
name|heap
index|[
name|i
index|]
operator|=
name|proto
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
name|size
operator|=
name|maxSize
expr_stmt|;
block|}
DECL|method|reset
specifier|private
name|void
name|reset
parameter_list|()
block|{
name|Object
index|[]
name|heap
init|=
name|getHeapArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|cache
argument_list|,
literal|1
argument_list|,
name|heap
argument_list|,
literal|1
argument_list|,
name|heap
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
name|size
operator|=
name|maxSize
expr_stmt|;
block|}
else|else
block|{
name|populate
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|SortDoc
class|class
name|SortDoc
block|{
DECL|field|docId
specifier|protected
name|int
name|docId
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|ord
specifier|protected
name|int
name|ord
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|docBase
specifier|protected
name|int
name|docBase
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|sortValues
specifier|private
name|SortValue
index|[]
name|sortValues
decl_stmt|;
DECL|method|SortDoc
specifier|public
name|SortDoc
parameter_list|()
block|{      }
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|ord
operator|=
name|context
operator|.
name|ord
expr_stmt|;
for|for
control|(
name|SortValue
name|value
range|:
name|sortValues
control|)
block|{
name|value
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|docId
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|setValues
specifier|public
name|void
name|setValues
parameter_list|(
name|int
name|docId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|docId
operator|=
name|docId
expr_stmt|;
for|for
control|(
name|SortValue
name|sortValue
range|:
name|sortValues
control|)
block|{
name|sortValue
operator|.
name|setCurrentValue
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setValues
specifier|public
name|void
name|setValues
parameter_list|(
name|SortDoc
name|sortDoc
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|docId
operator|=
name|sortDoc
operator|.
name|docId
expr_stmt|;
name|this
operator|.
name|ord
operator|=
name|sortDoc
operator|.
name|ord
expr_stmt|;
name|SortValue
index|[]
name|vals
init|=
name|sortDoc
operator|.
name|sortValues
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sortValues
index|[
name|i
index|]
operator|.
name|setCurrentValue
argument_list|(
name|vals
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|SortDoc
specifier|public
name|SortDoc
parameter_list|(
name|SortValue
index|[]
name|sortValues
parameter_list|)
block|{
name|this
operator|.
name|sortValues
operator|=
name|sortValues
expr_stmt|;
block|}
DECL|method|copy
specifier|public
name|SortDoc
name|copy
parameter_list|()
block|{
name|SortValue
index|[]
name|svs
init|=
operator|new
name|SortValue
index|[
name|sortValues
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|svs
index|[
name|i
index|]
operator|=
name|sortValues
index|[
name|i
index|]
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|SortDoc
argument_list|(
name|svs
argument_list|)
return|;
block|}
DECL|method|lessThan
specifier|public
name|boolean
name|lessThan
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|docId
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
name|SortDoc
name|sd
init|=
operator|(
name|SortDoc
operator|)
name|o
decl_stmt|;
name|SortValue
index|[]
name|sortValues1
init|=
name|sd
operator|.
name|sortValues
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|comp
init|=
name|sortValues
index|[
name|i
index|]
operator|.
name|compareTo
argument_list|(
name|sortValues1
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|comp
operator|<
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|comp
operator|>
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
name|docId
operator|+
name|docBase
operator|<
name|sd
operator|.
name|docId
operator|+
name|sd
operator|.
name|docBase
return|;
block|}
block|}
DECL|class|SingleValueSortDoc
class|class
name|SingleValueSortDoc
extends|extends
name|SortDoc
block|{
DECL|field|value1
specifier|protected
name|SortValue
name|value1
decl_stmt|;
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|ord
operator|=
name|context
operator|.
name|ord
expr_stmt|;
name|value1
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|docId
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|value1
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|setValues
specifier|public
name|void
name|setValues
parameter_list|(
name|int
name|docId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|docId
operator|=
name|docId
expr_stmt|;
name|value1
operator|.
name|setCurrentValue
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
DECL|method|setValues
specifier|public
name|void
name|setValues
parameter_list|(
name|SortDoc
name|sortDoc
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|docId
operator|=
name|sortDoc
operator|.
name|docId
expr_stmt|;
name|this
operator|.
name|ord
operator|=
name|sortDoc
operator|.
name|ord
expr_stmt|;
name|value1
operator|.
name|setCurrentValue
argument_list|(
operator|(
operator|(
name|SingleValueSortDoc
operator|)
name|sortDoc
operator|)
operator|.
name|value1
argument_list|)
expr_stmt|;
block|}
DECL|method|SingleValueSortDoc
specifier|public
name|SingleValueSortDoc
parameter_list|(
name|SortValue
name|value1
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|value1
operator|=
name|value1
expr_stmt|;
block|}
DECL|method|copy
specifier|public
name|SortDoc
name|copy
parameter_list|()
block|{
return|return
operator|new
name|SingleValueSortDoc
argument_list|(
name|value1
operator|.
name|copy
argument_list|()
argument_list|)
return|;
block|}
DECL|method|lessThan
specifier|public
name|boolean
name|lessThan
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|SingleValueSortDoc
name|sd
init|=
operator|(
name|SingleValueSortDoc
operator|)
name|o
decl_stmt|;
name|int
name|comp
init|=
name|value1
operator|.
name|compareTo
argument_list|(
name|sd
operator|.
name|value1
argument_list|)
decl_stmt|;
if|if
condition|(
name|comp
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|comp
operator|==
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|docId
operator|+
name|docBase
operator|>
name|sd
operator|.
name|docId
operator|+
name|sd
operator|.
name|docBase
return|;
block|}
block|}
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|SingleValueSortDoc
name|sd
init|=
operator|(
name|SingleValueSortDoc
operator|)
name|o
decl_stmt|;
return|return
name|value1
operator|.
name|compareTo
argument_list|(
name|sd
operator|.
name|value1
argument_list|)
return|;
block|}
block|}
DECL|class|DoubleValueSortDoc
class|class
name|DoubleValueSortDoc
extends|extends
name|SingleValueSortDoc
block|{
DECL|field|value2
specifier|protected
name|SortValue
name|value2
decl_stmt|;
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|ord
operator|=
name|context
operator|.
name|ord
expr_stmt|;
name|value1
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|value2
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|docId
operator|=
operator|-
literal|1
expr_stmt|;
name|value1
operator|.
name|reset
argument_list|()
expr_stmt|;
name|value2
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|setValues
specifier|public
name|void
name|setValues
parameter_list|(
name|int
name|docId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|docId
operator|=
name|docId
expr_stmt|;
name|value1
operator|.
name|setCurrentValue
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|value2
operator|.
name|setCurrentValue
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
DECL|method|setValues
specifier|public
name|void
name|setValues
parameter_list|(
name|SortDoc
name|sortDoc
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|docId
operator|=
name|sortDoc
operator|.
name|docId
expr_stmt|;
name|this
operator|.
name|ord
operator|=
name|sortDoc
operator|.
name|ord
expr_stmt|;
name|value1
operator|.
name|setCurrentValue
argument_list|(
operator|(
operator|(
name|DoubleValueSortDoc
operator|)
name|sortDoc
operator|)
operator|.
name|value1
argument_list|)
expr_stmt|;
name|value2
operator|.
name|setCurrentValue
argument_list|(
operator|(
operator|(
name|DoubleValueSortDoc
operator|)
name|sortDoc
operator|)
operator|.
name|value2
argument_list|)
expr_stmt|;
block|}
DECL|method|DoubleValueSortDoc
specifier|public
name|DoubleValueSortDoc
parameter_list|(
name|SortValue
name|value1
parameter_list|,
name|SortValue
name|value2
parameter_list|)
block|{
name|super
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|this
operator|.
name|value2
operator|=
name|value2
expr_stmt|;
block|}
DECL|method|copy
specifier|public
name|SortDoc
name|copy
parameter_list|()
block|{
return|return
operator|new
name|DoubleValueSortDoc
argument_list|(
name|value1
operator|.
name|copy
argument_list|()
argument_list|,
name|value2
operator|.
name|copy
argument_list|()
argument_list|)
return|;
block|}
DECL|method|lessThan
specifier|public
name|boolean
name|lessThan
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|DoubleValueSortDoc
name|sd
init|=
operator|(
name|DoubleValueSortDoc
operator|)
name|o
decl_stmt|;
name|int
name|comp
init|=
name|value1
operator|.
name|compareTo
argument_list|(
name|sd
operator|.
name|value1
argument_list|)
decl_stmt|;
if|if
condition|(
name|comp
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|comp
operator|==
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|comp
operator|=
name|value2
operator|.
name|compareTo
argument_list|(
name|sd
operator|.
name|value2
argument_list|)
expr_stmt|;
if|if
condition|(
name|comp
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|comp
operator|==
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|docId
operator|+
name|docBase
operator|>
name|sd
operator|.
name|docId
operator|+
name|sd
operator|.
name|docBase
return|;
block|}
block|}
block|}
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|DoubleValueSortDoc
name|sd
init|=
operator|(
name|DoubleValueSortDoc
operator|)
name|o
decl_stmt|;
name|int
name|comp
init|=
name|value1
operator|.
name|compareTo
argument_list|(
name|sd
operator|.
name|value1
argument_list|)
decl_stmt|;
if|if
condition|(
name|comp
operator|==
literal|0
condition|)
block|{
return|return
name|value2
operator|.
name|compareTo
argument_list|(
name|sd
operator|.
name|value2
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|comp
return|;
block|}
block|}
block|}
DECL|class|TripleValueSortDoc
class|class
name|TripleValueSortDoc
extends|extends
name|DoubleValueSortDoc
block|{
DECL|field|value3
specifier|protected
name|SortValue
name|value3
decl_stmt|;
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|ord
operator|=
name|context
operator|.
name|ord
expr_stmt|;
name|value1
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|value2
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|value3
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|docId
operator|=
operator|-
literal|1
expr_stmt|;
name|value1
operator|.
name|reset
argument_list|()
expr_stmt|;
name|value2
operator|.
name|reset
argument_list|()
expr_stmt|;
name|value3
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|setValues
specifier|public
name|void
name|setValues
parameter_list|(
name|int
name|docId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|docId
operator|=
name|docId
expr_stmt|;
name|value1
operator|.
name|setCurrentValue
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|value2
operator|.
name|setCurrentValue
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|value3
operator|.
name|setCurrentValue
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
DECL|method|setValues
specifier|public
name|void
name|setValues
parameter_list|(
name|SortDoc
name|sortDoc
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|docId
operator|=
name|sortDoc
operator|.
name|docId
expr_stmt|;
name|this
operator|.
name|ord
operator|=
name|sortDoc
operator|.
name|ord
expr_stmt|;
name|value1
operator|.
name|setCurrentValue
argument_list|(
operator|(
operator|(
name|TripleValueSortDoc
operator|)
name|sortDoc
operator|)
operator|.
name|value1
argument_list|)
expr_stmt|;
name|value2
operator|.
name|setCurrentValue
argument_list|(
operator|(
operator|(
name|TripleValueSortDoc
operator|)
name|sortDoc
operator|)
operator|.
name|value2
argument_list|)
expr_stmt|;
name|value3
operator|.
name|setCurrentValue
argument_list|(
operator|(
operator|(
name|TripleValueSortDoc
operator|)
name|sortDoc
operator|)
operator|.
name|value3
argument_list|)
expr_stmt|;
block|}
DECL|method|TripleValueSortDoc
specifier|public
name|TripleValueSortDoc
parameter_list|(
name|SortValue
name|value1
parameter_list|,
name|SortValue
name|value2
parameter_list|,
name|SortValue
name|value3
parameter_list|)
block|{
name|super
argument_list|(
name|value1
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|this
operator|.
name|value3
operator|=
name|value3
expr_stmt|;
block|}
DECL|method|copy
specifier|public
name|SortDoc
name|copy
parameter_list|()
block|{
return|return
operator|new
name|TripleValueSortDoc
argument_list|(
name|value1
operator|.
name|copy
argument_list|()
argument_list|,
name|value2
operator|.
name|copy
argument_list|()
argument_list|,
name|value3
operator|.
name|copy
argument_list|()
argument_list|)
return|;
block|}
DECL|method|lessThan
specifier|public
name|boolean
name|lessThan
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|TripleValueSortDoc
name|sd
init|=
operator|(
name|TripleValueSortDoc
operator|)
name|o
decl_stmt|;
name|int
name|comp
init|=
name|value1
operator|.
name|compareTo
argument_list|(
name|sd
operator|.
name|value1
argument_list|)
decl_stmt|;
if|if
condition|(
name|comp
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|comp
operator|==
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|comp
operator|=
name|value2
operator|.
name|compareTo
argument_list|(
name|sd
operator|.
name|value2
argument_list|)
expr_stmt|;
if|if
condition|(
name|comp
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|comp
operator|==
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|comp
operator|=
name|value3
operator|.
name|compareTo
argument_list|(
name|sd
operator|.
name|value3
argument_list|)
expr_stmt|;
if|if
condition|(
name|comp
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|comp
operator|==
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|docId
operator|+
name|docBase
operator|>
name|sd
operator|.
name|docId
operator|+
name|sd
operator|.
name|docBase
return|;
block|}
block|}
block|}
block|}
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|TripleValueSortDoc
name|sd
init|=
operator|(
name|TripleValueSortDoc
operator|)
name|o
decl_stmt|;
name|int
name|comp
init|=
name|value1
operator|.
name|compareTo
argument_list|(
name|sd
operator|.
name|value1
argument_list|)
decl_stmt|;
if|if
condition|(
name|comp
operator|==
literal|0
condition|)
block|{
name|comp
operator|=
name|value2
operator|.
name|compareTo
argument_list|(
name|sd
operator|.
name|value2
argument_list|)
expr_stmt|;
if|if
condition|(
name|comp
operator|==
literal|0
condition|)
block|{
return|return
name|value3
operator|.
name|compareTo
argument_list|(
name|sd
operator|.
name|value3
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|comp
return|;
block|}
block|}
else|else
block|{
return|return
name|comp
return|;
block|}
block|}
block|}
DECL|class|QuadValueSortDoc
class|class
name|QuadValueSortDoc
extends|extends
name|TripleValueSortDoc
block|{
DECL|field|value4
specifier|protected
name|SortValue
name|value4
decl_stmt|;
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|ord
operator|=
name|context
operator|.
name|ord
expr_stmt|;
name|value1
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|value2
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|value3
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|value4
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|docId
operator|=
operator|-
literal|1
expr_stmt|;
name|value1
operator|.
name|reset
argument_list|()
expr_stmt|;
name|value2
operator|.
name|reset
argument_list|()
expr_stmt|;
name|value3
operator|.
name|reset
argument_list|()
expr_stmt|;
name|value4
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|setValues
specifier|public
name|void
name|setValues
parameter_list|(
name|int
name|docId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|docId
operator|=
name|docId
expr_stmt|;
name|value1
operator|.
name|setCurrentValue
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|value2
operator|.
name|setCurrentValue
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|value3
operator|.
name|setCurrentValue
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|value4
operator|.
name|setCurrentValue
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
DECL|method|setValues
specifier|public
name|void
name|setValues
parameter_list|(
name|SortDoc
name|sortDoc
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|docId
operator|=
name|sortDoc
operator|.
name|docId
expr_stmt|;
name|this
operator|.
name|ord
operator|=
name|sortDoc
operator|.
name|ord
expr_stmt|;
name|value1
operator|.
name|setCurrentValue
argument_list|(
operator|(
operator|(
name|QuadValueSortDoc
operator|)
name|sortDoc
operator|)
operator|.
name|value1
argument_list|)
expr_stmt|;
name|value2
operator|.
name|setCurrentValue
argument_list|(
operator|(
operator|(
name|QuadValueSortDoc
operator|)
name|sortDoc
operator|)
operator|.
name|value2
argument_list|)
expr_stmt|;
name|value3
operator|.
name|setCurrentValue
argument_list|(
operator|(
operator|(
name|QuadValueSortDoc
operator|)
name|sortDoc
operator|)
operator|.
name|value3
argument_list|)
expr_stmt|;
name|value4
operator|.
name|setCurrentValue
argument_list|(
operator|(
operator|(
name|QuadValueSortDoc
operator|)
name|sortDoc
operator|)
operator|.
name|value4
argument_list|)
expr_stmt|;
block|}
DECL|method|QuadValueSortDoc
specifier|public
name|QuadValueSortDoc
parameter_list|(
name|SortValue
name|value1
parameter_list|,
name|SortValue
name|value2
parameter_list|,
name|SortValue
name|value3
parameter_list|,
name|SortValue
name|value4
parameter_list|)
block|{
name|super
argument_list|(
name|value1
argument_list|,
name|value2
argument_list|,
name|value3
argument_list|)
expr_stmt|;
name|this
operator|.
name|value4
operator|=
name|value4
expr_stmt|;
block|}
DECL|method|copy
specifier|public
name|SortDoc
name|copy
parameter_list|()
block|{
return|return
operator|new
name|QuadValueSortDoc
argument_list|(
name|value1
operator|.
name|copy
argument_list|()
argument_list|,
name|value2
operator|.
name|copy
argument_list|()
argument_list|,
name|value3
operator|.
name|copy
argument_list|()
argument_list|,
name|value4
operator|.
name|copy
argument_list|()
argument_list|)
return|;
block|}
DECL|method|lessThan
specifier|public
name|boolean
name|lessThan
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|QuadValueSortDoc
name|sd
init|=
operator|(
name|QuadValueSortDoc
operator|)
name|o
decl_stmt|;
name|int
name|comp
init|=
name|value1
operator|.
name|compareTo
argument_list|(
name|sd
operator|.
name|value1
argument_list|)
decl_stmt|;
if|if
condition|(
name|comp
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|comp
operator|==
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|comp
operator|=
name|value2
operator|.
name|compareTo
argument_list|(
name|sd
operator|.
name|value2
argument_list|)
expr_stmt|;
if|if
condition|(
name|comp
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|comp
operator|==
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|comp
operator|=
name|value3
operator|.
name|compareTo
argument_list|(
name|sd
operator|.
name|value3
argument_list|)
expr_stmt|;
if|if
condition|(
name|comp
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|comp
operator|==
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|comp
operator|=
name|value4
operator|.
name|compareTo
argument_list|(
name|sd
operator|.
name|value4
argument_list|)
expr_stmt|;
if|if
condition|(
name|comp
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|comp
operator|==
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|docId
operator|+
name|docBase
operator|>
name|sd
operator|.
name|docId
operator|+
name|sd
operator|.
name|docBase
return|;
block|}
block|}
block|}
block|}
block|}
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|QuadValueSortDoc
name|sd
init|=
operator|(
name|QuadValueSortDoc
operator|)
name|o
decl_stmt|;
name|int
name|comp
init|=
name|value1
operator|.
name|compareTo
argument_list|(
name|sd
operator|.
name|value1
argument_list|)
decl_stmt|;
if|if
condition|(
name|comp
operator|==
literal|0
condition|)
block|{
name|comp
operator|=
name|value2
operator|.
name|compareTo
argument_list|(
name|sd
operator|.
name|value2
argument_list|)
expr_stmt|;
if|if
condition|(
name|comp
operator|==
literal|0
condition|)
block|{
name|comp
operator|=
name|value3
operator|.
name|compareTo
argument_list|(
name|sd
operator|.
name|value3
argument_list|)
expr_stmt|;
if|if
condition|(
name|comp
operator|==
literal|0
condition|)
block|{
return|return
name|value4
operator|.
name|compareTo
argument_list|(
name|sd
operator|.
name|value4
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|comp
return|;
block|}
block|}
else|else
block|{
return|return
name|comp
return|;
block|}
block|}
else|else
block|{
return|return
name|comp
return|;
block|}
block|}
block|}
DECL|interface|SortValue
specifier|public
interface|interface
name|SortValue
extends|extends
name|Comparable
argument_list|<
name|SortValue
argument_list|>
block|{
DECL|method|setCurrentValue
specifier|public
name|void
name|setCurrentValue
parameter_list|(
name|int
name|docId
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|setCurrentValue
specifier|public
name|void
name|setCurrentValue
parameter_list|(
name|SortValue
name|value
parameter_list|)
function_decl|;
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
function_decl|;
DECL|method|copy
specifier|public
name|SortValue
name|copy
parameter_list|()
function_decl|;
block|}
DECL|class|IntValue
class|class
name|IntValue
implements|implements
name|SortValue
block|{
DECL|field|vals
specifier|protected
name|NumericDocValues
name|vals
decl_stmt|;
DECL|field|field
specifier|protected
name|String
name|field
decl_stmt|;
DECL|field|currentValue
specifier|protected
name|int
name|currentValue
decl_stmt|;
DECL|field|comp
specifier|protected
name|IntComp
name|comp
decl_stmt|;
DECL|method|copy
specifier|public
name|IntValue
name|copy
parameter_list|()
block|{
return|return
operator|new
name|IntValue
argument_list|(
name|field
argument_list|,
name|comp
argument_list|)
return|;
block|}
DECL|method|IntValue
specifier|public
name|IntValue
parameter_list|(
name|String
name|field
parameter_list|,
name|IntComp
name|comp
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|comp
operator|=
name|comp
expr_stmt|;
name|this
operator|.
name|currentValue
operator|=
name|comp
operator|.
name|resetValue
argument_list|()
expr_stmt|;
block|}
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|vals
operator|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getNumericDocValues
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
DECL|method|setCurrentValue
specifier|public
name|void
name|setCurrentValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|currentValue
operator|=
operator|(
name|int
operator|)
name|vals
operator|.
name|get
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|SortValue
name|o
parameter_list|)
block|{
name|IntValue
name|iv
init|=
operator|(
name|IntValue
operator|)
name|o
decl_stmt|;
return|return
name|comp
operator|.
name|compare
argument_list|(
name|currentValue
argument_list|,
name|iv
operator|.
name|currentValue
argument_list|)
return|;
block|}
DECL|method|setCurrentValue
specifier|public
name|void
name|setCurrentValue
parameter_list|(
name|SortValue
name|value
parameter_list|)
block|{
name|currentValue
operator|=
operator|(
operator|(
name|IntValue
operator|)
name|value
operator|)
operator|.
name|currentValue
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|currentValue
operator|=
name|comp
operator|.
name|resetValue
argument_list|()
expr_stmt|;
block|}
block|}
DECL|interface|IntComp
specifier|public
interface|interface
name|IntComp
block|{
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
function_decl|;
DECL|method|resetValue
specifier|public
name|int
name|resetValue
parameter_list|()
function_decl|;
block|}
DECL|class|IntDesc
class|class
name|IntDesc
implements|implements
name|IntComp
block|{
DECL|method|resetValue
specifier|public
name|int
name|resetValue
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|MIN_VALUE
return|;
block|}
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|<
name|b
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|a
operator|>
name|b
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
DECL|class|IntAsc
class|class
name|IntAsc
implements|implements
name|IntComp
block|{
DECL|method|resetValue
specifier|public
name|int
name|resetValue
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|<
name|b
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|a
operator|>
name|b
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
DECL|class|LongValue
class|class
name|LongValue
implements|implements
name|SortValue
block|{
DECL|field|vals
specifier|protected
name|NumericDocValues
name|vals
decl_stmt|;
DECL|field|field
specifier|protected
name|String
name|field
decl_stmt|;
DECL|field|currentValue
specifier|protected
name|long
name|currentValue
decl_stmt|;
DECL|field|comp
specifier|protected
name|LongComp
name|comp
decl_stmt|;
DECL|method|LongValue
specifier|public
name|LongValue
parameter_list|(
name|String
name|field
parameter_list|,
name|LongComp
name|comp
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|comp
operator|=
name|comp
expr_stmt|;
name|this
operator|.
name|currentValue
operator|=
name|comp
operator|.
name|resetValue
argument_list|()
expr_stmt|;
block|}
DECL|method|copy
specifier|public
name|LongValue
name|copy
parameter_list|()
block|{
return|return
operator|new
name|LongValue
argument_list|(
name|field
argument_list|,
name|comp
argument_list|)
return|;
block|}
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|vals
operator|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getNumericDocValues
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
DECL|method|setCurrentValue
specifier|public
name|void
name|setCurrentValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|currentValue
operator|=
name|vals
operator|.
name|get
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
DECL|method|setCurrentValue
specifier|public
name|void
name|setCurrentValue
parameter_list|(
name|SortValue
name|sv
parameter_list|)
block|{
name|LongValue
name|lv
init|=
operator|(
name|LongValue
operator|)
name|sv
decl_stmt|;
name|this
operator|.
name|currentValue
operator|=
name|lv
operator|.
name|currentValue
expr_stmt|;
block|}
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|SortValue
name|o
parameter_list|)
block|{
name|LongValue
name|l
init|=
operator|(
name|LongValue
operator|)
name|o
decl_stmt|;
return|return
name|comp
operator|.
name|compare
argument_list|(
name|currentValue
argument_list|,
name|l
operator|.
name|currentValue
argument_list|)
return|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|currentValue
operator|=
name|comp
operator|.
name|resetValue
argument_list|()
expr_stmt|;
block|}
block|}
DECL|interface|LongComp
interface|interface
name|LongComp
block|{
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|)
function_decl|;
DECL|method|resetValue
specifier|public
name|long
name|resetValue
parameter_list|()
function_decl|;
block|}
DECL|class|LongDesc
class|class
name|LongDesc
implements|implements
name|LongComp
block|{
DECL|method|resetValue
specifier|public
name|long
name|resetValue
parameter_list|()
block|{
return|return
name|Long
operator|.
name|MIN_VALUE
return|;
block|}
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|<
name|b
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|a
operator|>
name|b
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
DECL|class|LongAsc
class|class
name|LongAsc
implements|implements
name|LongComp
block|{
DECL|method|resetValue
specifier|public
name|long
name|resetValue
parameter_list|()
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|<
name|b
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|a
operator|>
name|b
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
DECL|class|FloatValue
class|class
name|FloatValue
implements|implements
name|SortValue
block|{
DECL|field|vals
specifier|protected
name|NumericDocValues
name|vals
decl_stmt|;
DECL|field|field
specifier|protected
name|String
name|field
decl_stmt|;
DECL|field|currentValue
specifier|protected
name|float
name|currentValue
decl_stmt|;
DECL|field|comp
specifier|protected
name|FloatComp
name|comp
decl_stmt|;
DECL|method|FloatValue
specifier|public
name|FloatValue
parameter_list|(
name|String
name|field
parameter_list|,
name|FloatComp
name|comp
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|comp
operator|=
name|comp
expr_stmt|;
name|this
operator|.
name|currentValue
operator|=
name|comp
operator|.
name|resetValue
argument_list|()
expr_stmt|;
block|}
DECL|method|copy
specifier|public
name|FloatValue
name|copy
parameter_list|()
block|{
return|return
operator|new
name|FloatValue
argument_list|(
name|field
argument_list|,
name|comp
argument_list|)
return|;
block|}
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|vals
operator|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getNumericDocValues
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
DECL|method|setCurrentValue
specifier|public
name|void
name|setCurrentValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|currentValue
operator|=
name|Float
operator|.
name|intBitsToFloat
argument_list|(
operator|(
name|int
operator|)
name|vals
operator|.
name|get
argument_list|(
name|docId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setCurrentValue
specifier|public
name|void
name|setCurrentValue
parameter_list|(
name|SortValue
name|sv
parameter_list|)
block|{
name|FloatValue
name|fv
init|=
operator|(
name|FloatValue
operator|)
name|sv
decl_stmt|;
name|this
operator|.
name|currentValue
operator|=
name|fv
operator|.
name|currentValue
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|currentValue
operator|=
name|comp
operator|.
name|resetValue
argument_list|()
expr_stmt|;
block|}
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|SortValue
name|o
parameter_list|)
block|{
name|FloatValue
name|fv
init|=
operator|(
name|FloatValue
operator|)
name|o
decl_stmt|;
return|return
name|comp
operator|.
name|compare
argument_list|(
name|currentValue
argument_list|,
name|fv
operator|.
name|currentValue
argument_list|)
return|;
block|}
block|}
DECL|interface|FloatComp
interface|interface
name|FloatComp
block|{
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|float
name|a
parameter_list|,
name|float
name|b
parameter_list|)
function_decl|;
DECL|method|resetValue
specifier|public
name|float
name|resetValue
parameter_list|()
function_decl|;
block|}
DECL|class|FloatDesc
specifier|public
class|class
name|FloatDesc
implements|implements
name|FloatComp
block|{
DECL|method|resetValue
specifier|public
name|float
name|resetValue
parameter_list|()
block|{
return|return
operator|-
name|Float
operator|.
name|MAX_VALUE
return|;
block|}
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|float
name|a
parameter_list|,
name|float
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|<
name|b
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|a
operator|>
name|b
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
DECL|class|FloatAsc
specifier|public
class|class
name|FloatAsc
implements|implements
name|FloatComp
block|{
DECL|method|resetValue
specifier|public
name|float
name|resetValue
parameter_list|()
block|{
return|return
name|Float
operator|.
name|MAX_VALUE
return|;
block|}
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|float
name|a
parameter_list|,
name|float
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|<
name|b
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|a
operator|>
name|b
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
DECL|class|DoubleValue
class|class
name|DoubleValue
implements|implements
name|SortValue
block|{
DECL|field|vals
specifier|protected
name|NumericDocValues
name|vals
decl_stmt|;
DECL|field|field
specifier|protected
name|String
name|field
decl_stmt|;
DECL|field|currentValue
specifier|protected
name|double
name|currentValue
decl_stmt|;
DECL|field|comp
specifier|protected
name|DoubleComp
name|comp
decl_stmt|;
DECL|method|DoubleValue
specifier|public
name|DoubleValue
parameter_list|(
name|String
name|field
parameter_list|,
name|DoubleComp
name|comp
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|comp
operator|=
name|comp
expr_stmt|;
name|this
operator|.
name|currentValue
operator|=
name|comp
operator|.
name|resetValue
argument_list|()
expr_stmt|;
block|}
DECL|method|copy
specifier|public
name|DoubleValue
name|copy
parameter_list|()
block|{
return|return
operator|new
name|DoubleValue
argument_list|(
name|field
argument_list|,
name|comp
argument_list|)
return|;
block|}
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|vals
operator|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getNumericDocValues
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
DECL|method|setCurrentValue
specifier|public
name|void
name|setCurrentValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|currentValue
operator|=
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|vals
operator|.
name|get
argument_list|(
name|docId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setCurrentValue
specifier|public
name|void
name|setCurrentValue
parameter_list|(
name|SortValue
name|sv
parameter_list|)
block|{
name|DoubleValue
name|dv
init|=
operator|(
name|DoubleValue
operator|)
name|sv
decl_stmt|;
name|this
operator|.
name|currentValue
operator|=
name|dv
operator|.
name|currentValue
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|currentValue
operator|=
name|comp
operator|.
name|resetValue
argument_list|()
expr_stmt|;
block|}
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|SortValue
name|o
parameter_list|)
block|{
name|DoubleValue
name|dv
init|=
operator|(
name|DoubleValue
operator|)
name|o
decl_stmt|;
return|return
name|comp
operator|.
name|compare
argument_list|(
name|currentValue
argument_list|,
name|dv
operator|.
name|currentValue
argument_list|)
return|;
block|}
block|}
DECL|interface|DoubleComp
interface|interface
name|DoubleComp
block|{
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|double
name|a
parameter_list|,
name|double
name|b
parameter_list|)
function_decl|;
DECL|method|resetValue
specifier|public
name|double
name|resetValue
parameter_list|()
function_decl|;
block|}
DECL|class|DoubleDesc
specifier|public
class|class
name|DoubleDesc
implements|implements
name|DoubleComp
block|{
DECL|method|resetValue
specifier|public
name|double
name|resetValue
parameter_list|()
block|{
return|return
operator|-
name|Double
operator|.
name|MAX_VALUE
return|;
block|}
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|double
name|a
parameter_list|,
name|double
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|<
name|b
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|a
operator|>
name|b
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
DECL|class|DoubleAsc
specifier|public
class|class
name|DoubleAsc
implements|implements
name|DoubleComp
block|{
DECL|method|resetValue
specifier|public
name|double
name|resetValue
parameter_list|()
block|{
return|return
name|Double
operator|.
name|MAX_VALUE
return|;
block|}
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|double
name|a
parameter_list|,
name|double
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|<
name|b
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|a
operator|>
name|b
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
DECL|class|StringValue
class|class
name|StringValue
implements|implements
name|SortValue
block|{
DECL|field|vals
specifier|protected
name|SortedDocValues
name|vals
decl_stmt|;
DECL|field|segmentVals
specifier|protected
name|SortedDocValues
name|segmentVals
index|[]
decl_stmt|;
DECL|field|ordinalMap
specifier|protected
name|MultiDocValues
operator|.
name|OrdinalMap
name|ordinalMap
decl_stmt|;
DECL|field|globalOrds
specifier|protected
name|LongValues
name|globalOrds
decl_stmt|;
DECL|field|currentVals
specifier|protected
name|SortedDocValues
name|currentVals
decl_stmt|;
DECL|field|field
specifier|protected
name|String
name|field
decl_stmt|;
DECL|field|segment
specifier|protected
name|int
name|segment
decl_stmt|;
DECL|field|currentOrd
specifier|protected
name|int
name|currentOrd
decl_stmt|;
DECL|field|comp
specifier|protected
name|IntComp
name|comp
decl_stmt|;
DECL|method|StringValue
specifier|public
name|StringValue
parameter_list|(
name|SortedDocValues
name|vals
parameter_list|,
name|String
name|field
parameter_list|,
name|IntComp
name|comp
parameter_list|)
block|{
name|this
operator|.
name|vals
operator|=
name|vals
expr_stmt|;
name|this
operator|.
name|segmentVals
operator|=
operator|(
operator|(
name|MultiDocValues
operator|.
name|MultiSortedDocValues
operator|)
name|vals
operator|)
operator|.
name|values
expr_stmt|;
name|this
operator|.
name|ordinalMap
operator|=
operator|(
operator|(
name|MultiDocValues
operator|.
name|MultiSortedDocValues
operator|)
name|vals
operator|)
operator|.
name|mapping
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|comp
operator|=
name|comp
expr_stmt|;
name|this
operator|.
name|currentOrd
operator|=
name|comp
operator|.
name|resetValue
argument_list|()
expr_stmt|;
block|}
DECL|method|copy
specifier|public
name|StringValue
name|copy
parameter_list|()
block|{
return|return
operator|new
name|StringValue
argument_list|(
name|vals
argument_list|,
name|field
argument_list|,
name|comp
argument_list|)
return|;
block|}
DECL|method|setCurrentValue
specifier|public
name|void
name|setCurrentValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|int
name|ord
init|=
name|currentVals
operator|.
name|getOrd
argument_list|(
name|docId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|<
literal|0
condition|)
block|{
name|currentOrd
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|currentOrd
operator|=
operator|(
name|int
operator|)
name|globalOrds
operator|.
name|get
argument_list|(
name|ord
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setCurrentValue
specifier|public
name|void
name|setCurrentValue
parameter_list|(
name|SortValue
name|sv
parameter_list|)
block|{
name|StringValue
name|v
init|=
operator|(
name|StringValue
operator|)
name|sv
decl_stmt|;
name|this
operator|.
name|currentOrd
operator|=
name|v
operator|.
name|currentOrd
expr_stmt|;
block|}
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
block|{
name|segment
operator|=
name|context
operator|.
name|ord
expr_stmt|;
name|globalOrds
operator|=
name|ordinalMap
operator|.
name|getGlobalOrds
argument_list|(
name|segment
argument_list|)
expr_stmt|;
name|currentVals
operator|=
name|segmentVals
index|[
name|segment
index|]
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|currentOrd
operator|=
name|comp
operator|.
name|resetValue
argument_list|()
expr_stmt|;
block|}
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|SortValue
name|o
parameter_list|)
block|{
name|StringValue
name|sv
init|=
operator|(
name|StringValue
operator|)
name|o
decl_stmt|;
return|return
name|comp
operator|.
name|compare
argument_list|(
name|currentOrd
argument_list|,
name|sv
operator|.
name|currentOrd
argument_list|)
return|;
block|}
block|}
DECL|class|FieldWriter
specifier|protected
specifier|abstract
class|class
name|FieldWriter
block|{
DECL|method|write
specifier|public
specifier|abstract
name|void
name|write
parameter_list|(
name|int
name|docId
parameter_list|,
name|AtomicReader
name|reader
parameter_list|,
name|Writer
name|out
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|class|IntFieldWriter
class|class
name|IntFieldWriter
extends|extends
name|FieldWriter
block|{
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|method|IntFieldWriter
specifier|public
name|IntFieldWriter
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|int
name|docId
parameter_list|,
name|AtomicReader
name|reader
parameter_list|,
name|Writer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|NumericDocValues
name|vals
init|=
name|reader
operator|.
name|getNumericDocValues
argument_list|(
name|this
operator|.
name|field
argument_list|)
decl_stmt|;
name|int
name|val
init|=
operator|(
name|int
operator|)
name|vals
operator|.
name|get
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|this
operator|.
name|field
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MultiFieldWriter
class|class
name|MultiFieldWriter
extends|extends
name|FieldWriter
block|{
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|field|fieldType
specifier|private
name|FieldType
name|fieldType
decl_stmt|;
DECL|field|numeric
specifier|private
name|boolean
name|numeric
decl_stmt|;
DECL|field|cref
specifier|private
name|CharsRefBuilder
name|cref
init|=
operator|new
name|CharsRefBuilder
argument_list|()
decl_stmt|;
DECL|method|MultiFieldWriter
specifier|public
name|MultiFieldWriter
parameter_list|(
name|String
name|field
parameter_list|,
name|FieldType
name|fieldType
parameter_list|,
name|boolean
name|numeric
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|fieldType
operator|=
name|fieldType
expr_stmt|;
name|this
operator|.
name|numeric
operator|=
name|numeric
expr_stmt|;
block|}
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|int
name|docId
parameter_list|,
name|AtomicReader
name|reader
parameter_list|,
name|Writer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedSetDocValues
name|vals
init|=
name|reader
operator|.
name|getSortedSetDocValues
argument_list|(
name|this
operator|.
name|field
argument_list|)
decl_stmt|;
name|vals
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|this
operator|.
name|field
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|int
name|v
init|=
literal|0
decl_stmt|;
name|long
name|ord
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|ord
operator|=
name|vals
operator|.
name|nextOrd
argument_list|()
operator|)
operator|!=
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
condition|)
block|{
name|BytesRef
name|ref
init|=
name|vals
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
decl_stmt|;
name|fieldType
operator|.
name|indexedToReadable
argument_list|(
name|ref
argument_list|,
name|cref
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|numeric
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|cref
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|numeric
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
operator|++
name|v
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|LongFieldWriter
class|class
name|LongFieldWriter
extends|extends
name|FieldWriter
block|{
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|method|LongFieldWriter
specifier|public
name|LongFieldWriter
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|int
name|docId
parameter_list|,
name|AtomicReader
name|reader
parameter_list|,
name|Writer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|NumericDocValues
name|vals
init|=
name|reader
operator|.
name|getNumericDocValues
argument_list|(
name|this
operator|.
name|field
argument_list|)
decl_stmt|;
name|long
name|val
init|=
name|vals
operator|.
name|get
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|this
operator|.
name|field
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FloatFieldWriter
class|class
name|FloatFieldWriter
extends|extends
name|FieldWriter
block|{
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|method|FloatFieldWriter
specifier|public
name|FloatFieldWriter
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|int
name|docId
parameter_list|,
name|AtomicReader
name|reader
parameter_list|,
name|Writer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|NumericDocValues
name|vals
init|=
name|reader
operator|.
name|getNumericDocValues
argument_list|(
name|this
operator|.
name|field
argument_list|)
decl_stmt|;
name|int
name|val
init|=
operator|(
name|int
operator|)
name|vals
operator|.
name|get
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|this
operator|.
name|field
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|Float
operator|.
name|toString
argument_list|(
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|val
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DoubleFieldWriter
class|class
name|DoubleFieldWriter
extends|extends
name|FieldWriter
block|{
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|method|DoubleFieldWriter
specifier|public
name|DoubleFieldWriter
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|int
name|docId
parameter_list|,
name|AtomicReader
name|reader
parameter_list|,
name|Writer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|NumericDocValues
name|vals
init|=
name|reader
operator|.
name|getNumericDocValues
argument_list|(
name|this
operator|.
name|field
argument_list|)
decl_stmt|;
name|long
name|val
init|=
name|vals
operator|.
name|get
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|this
operator|.
name|field
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|Double
operator|.
name|toString
argument_list|(
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|val
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|StringFieldWriter
class|class
name|StringFieldWriter
extends|extends
name|FieldWriter
block|{
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|field|fieldType
specifier|private
name|FieldType
name|fieldType
decl_stmt|;
DECL|field|cref
specifier|private
name|CharsRefBuilder
name|cref
init|=
operator|new
name|CharsRefBuilder
argument_list|()
decl_stmt|;
DECL|method|StringFieldWriter
specifier|public
name|StringFieldWriter
parameter_list|(
name|String
name|field
parameter_list|,
name|FieldType
name|fieldType
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|fieldType
operator|=
name|fieldType
expr_stmt|;
block|}
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|int
name|docId
parameter_list|,
name|AtomicReader
name|reader
parameter_list|,
name|Writer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedDocValues
name|vals
init|=
name|reader
operator|.
name|getSortedDocValues
argument_list|(
name|this
operator|.
name|field
argument_list|)
decl_stmt|;
name|BytesRef
name|ref
init|=
name|vals
operator|.
name|get
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|fieldType
operator|.
name|indexedToReadable
argument_list|(
name|ref
argument_list|,
name|cref
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|this
operator|.
name|field
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|cref
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|PriorityQueue
specifier|public
specifier|abstract
class|class
name|PriorityQueue
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|size
specifier|protected
name|int
name|size
init|=
literal|0
decl_stmt|;
DECL|field|maxSize
specifier|protected
specifier|final
name|int
name|maxSize
decl_stmt|;
DECL|field|heap
specifier|private
specifier|final
name|T
index|[]
name|heap
decl_stmt|;
DECL|method|PriorityQueue
specifier|public
name|PriorityQueue
parameter_list|(
name|int
name|maxSize
parameter_list|)
block|{
name|this
argument_list|(
name|maxSize
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|PriorityQueue
specifier|public
name|PriorityQueue
parameter_list|(
name|int
name|maxSize
parameter_list|,
name|boolean
name|prepopulate
parameter_list|)
block|{
specifier|final
name|int
name|heapSize
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|maxSize
condition|)
block|{
comment|// We allocate 1 extra to avoid if statement in top()
name|heapSize
operator|=
literal|2
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|maxSize
operator|>
name|ArrayUtil
operator|.
name|MAX_ARRAY_LENGTH
condition|)
block|{
comment|// Don't wrap heapSize to -1, in this case, which
comment|// causes a confusing NegativeArraySizeException.
comment|// Note that very likely this will simply then hit
comment|// an OOME, but at least that's more indicative to
comment|// caller that this values is too big.  We don't +1
comment|// in this case, but it's very unlikely in practice
comment|// one will actually insert this many objects into
comment|// the PQ:
comment|// Throw exception to prevent confusing OOME:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxSize must be<= "
operator|+
name|ArrayUtil
operator|.
name|MAX_ARRAY_LENGTH
operator|+
literal|"; got: "
operator|+
name|maxSize
argument_list|)
throw|;
block|}
else|else
block|{
comment|// NOTE: we add +1 because all access to heap is
comment|// 1-based not 0-based.  heap[0] is unused.
name|heapSize
operator|=
name|maxSize
operator|+
literal|1
expr_stmt|;
block|}
block|}
comment|// T is unbounded type, so this unchecked cast works always:
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|T
index|[]
name|h
init|=
operator|(
name|T
index|[]
operator|)
operator|new
name|Object
index|[
name|heapSize
index|]
decl_stmt|;
name|this
operator|.
name|heap
operator|=
name|h
expr_stmt|;
name|this
operator|.
name|maxSize
operator|=
name|maxSize
expr_stmt|;
if|if
condition|(
name|prepopulate
condition|)
block|{
comment|// If sentinel objects are supported, populate the queue with them
name|T
name|sentinel
init|=
name|getSentinelObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|sentinel
operator|!=
literal|null
condition|)
block|{
name|heap
index|[
literal|1
index|]
operator|=
name|sentinel
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|heap
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|heap
index|[
name|i
index|]
operator|=
name|getSentinelObject
argument_list|()
expr_stmt|;
block|}
name|size
operator|=
name|maxSize
expr_stmt|;
block|}
block|}
block|}
comment|/** Determines the ordering of objects in this priority queue.  Subclasses      *  must define this one method.      *  @return<code>true</code> iff parameter<tt>a</tt> is less than parameter<tt>b</tt>.      */
DECL|method|lessThan
specifier|protected
specifier|abstract
name|boolean
name|lessThan
parameter_list|(
name|T
name|a
parameter_list|,
name|T
name|b
parameter_list|)
function_decl|;
DECL|method|getSentinelObject
specifier|protected
name|T
name|getSentinelObject
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Adds an Object to a PriorityQueue in log(size) time. If one tries to add      * more objects than maxSize from initialize an      *      * @return the new 'top' element in the queue.      */
DECL|method|add
specifier|public
specifier|final
name|T
name|add
parameter_list|(
name|T
name|element
parameter_list|)
block|{
name|size
operator|++
expr_stmt|;
name|heap
index|[
name|size
index|]
operator|=
name|element
expr_stmt|;
name|upHeap
argument_list|()
expr_stmt|;
return|return
name|heap
index|[
literal|1
index|]
return|;
block|}
comment|/**      * Adds an Object to a PriorityQueue in log(size) time.      * It returns the object (if any) that was      * dropped off the heap because it was full. This can be      * the given parameter (in case it is smaller than the      * full heap's minimum, and couldn't be added), or another      * object that was previously the smallest value in the      * heap and now has been replaced by a larger one, or null      * if the queue wasn't yet full with maxSize elements.      */
DECL|method|insertWithOverflow
specifier|public
name|T
name|insertWithOverflow
parameter_list|(
name|T
name|element
parameter_list|)
block|{
if|if
condition|(
name|size
operator|<
name|maxSize
condition|)
block|{
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|size
operator|>
literal|0
operator|&&
operator|!
name|lessThan
argument_list|(
name|element
argument_list|,
name|heap
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
name|T
name|ret
init|=
name|heap
index|[
literal|1
index|]
decl_stmt|;
name|heap
index|[
literal|1
index|]
operator|=
name|element
expr_stmt|;
name|updateTop
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
else|else
block|{
return|return
name|element
return|;
block|}
block|}
comment|/** Returns the least element of the PriorityQueue in constant time. */
DECL|method|top
specifier|public
specifier|final
name|T
name|top
parameter_list|()
block|{
comment|// We don't need to check size here: if maxSize is 0,
comment|// then heap is length 2 array with both entries null.
comment|// If size is 0 then heap[1] is already null.
return|return
name|heap
index|[
literal|1
index|]
return|;
block|}
comment|/** Removes and returns the least element of the PriorityQueue in log(size)      time. */
DECL|method|pop
specifier|public
specifier|final
name|T
name|pop
parameter_list|()
block|{
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|T
name|result
init|=
name|heap
index|[
literal|1
index|]
decl_stmt|;
comment|// save first value
name|heap
index|[
literal|1
index|]
operator|=
name|heap
index|[
name|size
index|]
expr_stmt|;
comment|// move last to first
name|heap
index|[
name|size
index|]
operator|=
literal|null
expr_stmt|;
comment|// permit GC of objects
name|size
operator|--
expr_stmt|;
name|downHeap
argument_list|()
expr_stmt|;
comment|// adjust heap
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Should be called when the Object at top changes values. Still log(n) worst      * case, but it's at least twice as fast to      *      *<pre class="prettyprint">      * pq.top().change();      * pq.updateTop();      *</pre>      *      * instead of      *      *<pre class="prettyprint">      * o = pq.pop();      * o.change();      * pq.push(o);      *</pre>      *      * @return the new 'top' element.      */
DECL|method|updateTop
specifier|public
specifier|final
name|T
name|updateTop
parameter_list|()
block|{
name|downHeap
argument_list|()
expr_stmt|;
return|return
name|heap
index|[
literal|1
index|]
return|;
block|}
comment|/** Returns the number of elements currently stored in the PriorityQueue. */
DECL|method|size
specifier|public
specifier|final
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
comment|/** Removes all entries from the PriorityQueue. */
DECL|method|clear
specifier|public
specifier|final
name|void
name|clear
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|size
condition|;
name|i
operator|++
control|)
block|{
name|heap
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|size
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|upHeap
specifier|private
specifier|final
name|void
name|upHeap
parameter_list|()
block|{
name|int
name|i
init|=
name|size
decl_stmt|;
name|T
name|node
init|=
name|heap
index|[
name|i
index|]
decl_stmt|;
comment|// save bottom node
name|int
name|j
init|=
name|i
operator|>>>
literal|1
decl_stmt|;
while|while
condition|(
name|j
operator|>
literal|0
operator|&&
name|lessThan
argument_list|(
name|node
argument_list|,
name|heap
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|heap
index|[
name|i
index|]
operator|=
name|heap
index|[
name|j
index|]
expr_stmt|;
comment|// shift parents down
name|i
operator|=
name|j
expr_stmt|;
name|j
operator|=
name|j
operator|>>>
literal|1
expr_stmt|;
block|}
name|heap
index|[
name|i
index|]
operator|=
name|node
expr_stmt|;
comment|// install saved node
block|}
DECL|method|downHeap
specifier|private
specifier|final
name|void
name|downHeap
parameter_list|()
block|{
name|int
name|i
init|=
literal|1
decl_stmt|;
name|T
name|node
init|=
name|heap
index|[
name|i
index|]
decl_stmt|;
comment|// save top node
name|int
name|j
init|=
name|i
operator|<<
literal|1
decl_stmt|;
comment|// find smaller child
name|int
name|k
init|=
name|j
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|k
operator|<=
name|size
operator|&&
name|lessThan
argument_list|(
name|heap
index|[
name|k
index|]
argument_list|,
name|heap
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|j
operator|=
name|k
expr_stmt|;
block|}
while|while
condition|(
name|j
operator|<=
name|size
operator|&&
name|lessThan
argument_list|(
name|heap
index|[
name|j
index|]
argument_list|,
name|node
argument_list|)
condition|)
block|{
name|heap
index|[
name|i
index|]
operator|=
name|heap
index|[
name|j
index|]
expr_stmt|;
comment|// shift up child
name|i
operator|=
name|j
expr_stmt|;
name|j
operator|=
name|i
operator|<<
literal|1
expr_stmt|;
name|k
operator|=
name|j
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|k
operator|<=
name|size
operator|&&
name|lessThan
argument_list|(
name|heap
index|[
name|k
index|]
argument_list|,
name|heap
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|j
operator|=
name|k
expr_stmt|;
block|}
block|}
name|heap
index|[
name|i
index|]
operator|=
name|node
expr_stmt|;
comment|// install saved node
block|}
comment|/** This method returns the internal heap array as Object[].      * @lucene.internal      */
DECL|method|getHeapArray
specifier|public
specifier|final
name|Object
index|[]
name|getHeapArray
parameter_list|()
block|{
return|return
operator|(
name|Object
index|[]
operator|)
name|heap
return|;
block|}
block|}
block|}
end_class
end_unit
