begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene50
operator|.
name|Lucene50StoredFieldsFormat
operator|.
name|Mode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene60
operator|.
name|Lucene60Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|SolrCoreAware
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * Per-field CodecFactory implementation, extends Lucene's   * and returns postings format implementations according to the   * schema configuration.  *<br>  * Also, a string argument with name<code>compressionMode</code> can be  * provided to chose between the different compression options for  * stored fields  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|SchemaCodecFactory
specifier|public
class|class
name|SchemaCodecFactory
extends|extends
name|CodecFactory
implements|implements
name|SolrCoreAware
block|{
comment|/**    * Key to use in init arguments to set the compression mode in the codec.    */
DECL|field|COMPRESSION_MODE
specifier|public
specifier|static
specifier|final
name|String
name|COMPRESSION_MODE
init|=
literal|"compressionMode"
decl_stmt|;
DECL|field|SOLR_DEFAULT_COMPRESSION_MODE
specifier|public
specifier|static
specifier|final
name|Mode
name|SOLR_DEFAULT_COMPRESSION_MODE
init|=
name|Mode
operator|.
name|BEST_SPEED
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|codec
specifier|private
name|Codec
name|codec
decl_stmt|;
DECL|field|core
specifier|private
specifier|volatile
name|SolrCore
name|core
decl_stmt|;
comment|// TODO: we need to change how solr does this?
comment|// rather than a string like "Direct" you need to be able to pass parameters
comment|// and everything to a field in the schema, e.g. we should provide factories for
comment|// the Lucene's core formats (Memory, Direct, ...) and such.
comment|//
comment|// So I think a FieldType should return PostingsFormat, not a String.
comment|// how it constructs this from the XML... i don't care.
annotation|@
name|Override
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|this
operator|.
name|core
operator|=
name|core
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
assert|assert
name|codec
operator|==
literal|null
assert|;
name|String
name|compressionModeStr
init|=
operator|(
name|String
operator|)
name|args
operator|.
name|get
argument_list|(
name|COMPRESSION_MODE
argument_list|)
decl_stmt|;
name|Mode
name|compressionMode
decl_stmt|;
if|if
condition|(
name|compressionModeStr
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|compressionMode
operator|=
name|Mode
operator|.
name|valueOf
argument_list|(
name|compressionModeStr
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Invalid compressionMode: '"
operator|+
name|compressionModeStr
operator|+
literal|"'. Value must be one of "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|Mode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Using compressionMode: "
operator|+
name|compressionMode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compressionMode
operator|=
name|SOLR_DEFAULT_COMPRESSION_MODE
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Using default compressionMode: "
operator|+
name|compressionMode
argument_list|)
expr_stmt|;
block|}
name|codec
operator|=
operator|new
name|Lucene60Codec
argument_list|(
name|compressionMode
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|PostingsFormat
name|getPostingsFormatForField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
specifier|final
name|SchemaField
name|schemaField
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getFieldOrNull
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaField
operator|!=
literal|null
condition|)
block|{
name|String
name|postingsFormatName
init|=
name|schemaField
operator|.
name|getType
argument_list|()
operator|.
name|getPostingsFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|postingsFormatName
operator|!=
literal|null
condition|)
block|{
return|return
name|PostingsFormat
operator|.
name|forName
argument_list|(
name|postingsFormatName
argument_list|)
return|;
block|}
block|}
return|return
name|super
operator|.
name|getPostingsFormatForField
argument_list|(
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocValuesFormat
name|getDocValuesFormatForField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
specifier|final
name|SchemaField
name|schemaField
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getFieldOrNull
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaField
operator|!=
literal|null
condition|)
block|{
name|String
name|docValuesFormatName
init|=
name|schemaField
operator|.
name|getType
argument_list|()
operator|.
name|getDocValuesFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|docValuesFormatName
operator|!=
literal|null
condition|)
block|{
return|return
name|DocValuesFormat
operator|.
name|forName
argument_list|(
name|docValuesFormatName
argument_list|)
return|;
block|}
block|}
return|return
name|super
operator|.
name|getDocValuesFormatForField
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCodec
specifier|public
name|Codec
name|getCodec
parameter_list|()
block|{
assert|assert
name|core
operator|!=
literal|null
operator|:
literal|"inform must be called first"
assert|;
return|return
name|codec
return|;
block|}
block|}
end_class
end_unit
