begin_unit
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|PropertiesUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|SolrCoreDiscoverer
specifier|public
class|class
name|SolrCoreDiscoverer
block|{
DECL|field|log
specifier|protected
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrCoreDiscoverer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CORE_PROP_FILE
specifier|public
specifier|final
specifier|static
name|String
name|CORE_PROP_FILE
init|=
literal|"core.properties"
decl_stmt|;
DECL|method|discover
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|CoreDescriptor
argument_list|>
name|discover
parameter_list|(
name|CoreContainer
name|container
parameter_list|,
name|File
name|root
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|CoreDescriptor
argument_list|>
name|coreDescriptorMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CoreDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|walkFromHere
argument_list|(
name|root
argument_list|,
name|container
argument_list|,
name|coreDescriptorMap
argument_list|)
expr_stmt|;
return|return
name|coreDescriptorMap
return|;
block|}
comment|// Basic recursive tree walking, looking for "core.properties" files. Once one is found, we'll stop going any
comment|// deeper in the tree.
comment|//
DECL|method|walkFromHere
specifier|private
name|void
name|walkFromHere
parameter_list|(
name|File
name|file
parameter_list|,
name|CoreContainer
name|container
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|CoreDescriptor
argument_list|>
name|coreDescriptorMap
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Looking for cores in "
operator|+
name|file
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
return|return;
for|for
control|(
name|File
name|childFile
range|:
name|file
operator|.
name|listFiles
argument_list|()
control|)
block|{
comment|// This is a little tricky, we are asking if core.properties exists in a child directory of the directory passed
comment|// in. In other words we're looking for core.properties in the grandchild directories of the parameter passed
comment|// in. That allows us to gracefully stop recursing deep but continue looking wide.
name|File
name|propFile
init|=
operator|new
name|File
argument_list|(
name|childFile
argument_list|,
name|CORE_PROP_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|propFile
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// Stop looking after processing this file!
name|addCore
argument_list|(
name|container
argument_list|,
name|childFile
argument_list|,
name|propFile
argument_list|,
name|coreDescriptorMap
argument_list|)
expr_stmt|;
continue|continue;
comment|// Go on to the sibling directory, don't descend any deeper.
block|}
if|if
condition|(
name|childFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|walkFromHere
argument_list|(
name|childFile
argument_list|,
name|container
argument_list|,
name|coreDescriptorMap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addCore
specifier|private
name|void
name|addCore
parameter_list|(
name|CoreContainer
name|container
parameter_list|,
name|File
name|childFile
parameter_list|,
name|File
name|propFile
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|CoreDescriptor
argument_list|>
name|coreDescriptorMap
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Discovered properties file {}, adding to cores"
argument_list|,
name|propFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|Properties
name|propsOrig
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|propFile
argument_list|)
decl_stmt|;
try|try
block|{
name|propsOrig
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|prop
range|:
name|propsOrig
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|props
operator|.
name|put
argument_list|(
name|prop
argument_list|,
name|PropertiesUtil
operator|.
name|substituteProperty
argument_list|(
name|propsOrig
operator|.
name|getProperty
argument_list|(
name|prop
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Too much of the code depends on this value being here, but it is NOT supported in discovery mode, so
comment|// ignore it if present in the core.properties file.
name|props
operator|.
name|setProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_INSTDIR
argument_list|,
name|childFile
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|props
operator|.
name|getProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_NAME
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// Should default to this directory
name|props
operator|.
name|setProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_NAME
argument_list|,
name|childFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CoreDescriptor
name|desc
init|=
operator|new
name|CoreDescriptor
argument_list|(
name|container
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|CoreDescriptor
name|check
init|=
name|coreDescriptorMap
operator|.
name|get
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|check
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Core "
operator|+
name|desc
operator|.
name|getName
argument_list|()
operator|+
literal|" defined more than once, once in "
operator|+
name|desc
operator|.
name|getInstanceDir
argument_list|()
operator|+
literal|" and once in "
operator|+
name|check
operator|.
name|getInstanceDir
argument_list|()
argument_list|)
throw|;
block|}
name|coreDescriptorMap
operator|.
name|put
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
