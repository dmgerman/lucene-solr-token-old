begin_unit
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DOMUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|PropertiesUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import
begin_class
DECL|class|ConfigSolr
specifier|public
specifier|abstract
class|class
name|ConfigSolr
block|{
DECL|field|log
specifier|protected
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConfigSolr
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CORE_PROP_FILE
specifier|public
specifier|final
specifier|static
name|String
name|CORE_PROP_FILE
init|=
literal|"core.properties"
decl_stmt|;
DECL|field|SOLR_XML_FILE
specifier|public
specifier|final
specifier|static
name|String
name|SOLR_XML_FILE
init|=
literal|"solr.xml"
decl_stmt|;
comment|// Ugly for now, but we'll at least be able to centralize all of the differences between 4x and 5x.
DECL|enum|CfgProp
specifier|public
specifier|static
enum|enum
name|CfgProp
block|{
DECL|enum constant|SOLR_ADMINHANDLER
name|SOLR_ADMINHANDLER
block|,
DECL|enum constant|SOLR_CORELOADTHREADS
name|SOLR_CORELOADTHREADS
block|,
DECL|enum constant|SOLR_COREROOTDIRECTORY
name|SOLR_COREROOTDIRECTORY
block|,
DECL|enum constant|SOLR_DISTRIBUPDATECONNTIMEOUT
name|SOLR_DISTRIBUPDATECONNTIMEOUT
block|,
DECL|enum constant|SOLR_DISTRIBUPDATESOTIMEOUT
name|SOLR_DISTRIBUPDATESOTIMEOUT
block|,
DECL|enum constant|SOLR_HOST
name|SOLR_HOST
block|,
DECL|enum constant|SOLR_HOSTCONTEXT
name|SOLR_HOSTCONTEXT
block|,
DECL|enum constant|SOLR_HOSTPORT
name|SOLR_HOSTPORT
block|,
DECL|enum constant|SOLR_LEADERVOTEWAIT
name|SOLR_LEADERVOTEWAIT
block|,
DECL|enum constant|SOLR_LOGGING_CLASS
name|SOLR_LOGGING_CLASS
block|,
DECL|enum constant|SOLR_LOGGING_ENABLED
name|SOLR_LOGGING_ENABLED
block|,
DECL|enum constant|SOLR_LOGGING_WATCHER_SIZE
name|SOLR_LOGGING_WATCHER_SIZE
block|,
DECL|enum constant|SOLR_LOGGING_WATCHER_THRESHOLD
name|SOLR_LOGGING_WATCHER_THRESHOLD
block|,
DECL|enum constant|SOLR_MANAGEMENTPATH
name|SOLR_MANAGEMENTPATH
block|,
DECL|enum constant|SOLR_SHAREDLIB
name|SOLR_SHAREDLIB
block|,
DECL|enum constant|SOLR_SHARDHANDLERFACTORY_CLASS
name|SOLR_SHARDHANDLERFACTORY_CLASS
block|,
DECL|enum constant|SOLR_SHARDHANDLERFACTORY_CONNTIMEOUT
name|SOLR_SHARDHANDLERFACTORY_CONNTIMEOUT
block|,
DECL|enum constant|SOLR_SHARDHANDLERFACTORY_NAME
name|SOLR_SHARDHANDLERFACTORY_NAME
block|,
DECL|enum constant|SOLR_SHARDHANDLERFACTORY_SOCKETTIMEOUT
name|SOLR_SHARDHANDLERFACTORY_SOCKETTIMEOUT
block|,
DECL|enum constant|SOLR_SHARESCHEMA
name|SOLR_SHARESCHEMA
block|,
DECL|enum constant|SOLR_TRANSIENTCACHESIZE
name|SOLR_TRANSIENTCACHESIZE
block|,
DECL|enum constant|SOLR_ZKCLIENTTIMEOUT
name|SOLR_ZKCLIENTTIMEOUT
block|,
DECL|enum constant|SOLR_ZKHOST
name|SOLR_ZKHOST
block|,
comment|//TODO: Remove all of these elements for 5.0
DECL|enum constant|SOLR_PERSISTENT
name|SOLR_PERSISTENT
block|,
DECL|enum constant|SOLR_CORES_DEFAULT_CORE_NAME
name|SOLR_CORES_DEFAULT_CORE_NAME
block|,
DECL|enum constant|SOLR_ADMINPATH
name|SOLR_ADMINPATH
block|}
DECL|field|config
specifier|protected
name|Config
name|config
decl_stmt|;
DECL|field|propMap
specifier|protected
name|Map
argument_list|<
name|CfgProp
argument_list|,
name|String
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<
name|CfgProp
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|badConfigCores
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|badConfigCores
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|ConfigSolr
specifier|public
name|ConfigSolr
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
DECL|method|getConfig
specifier|public
name|Config
name|getConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
comment|// If the core is not to be loaded (say two cores defined with the same name or with the same data dir), return
comment|// the reason. If it's OK to load the core, return null.
DECL|method|getBadConfigCoreMessage
specifier|public
name|String
name|getBadConfigCoreMessage
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|badConfigCores
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|getInt
specifier|public
name|int
name|getInt
parameter_list|(
name|CfgProp
name|prop
parameter_list|,
name|int
name|def
parameter_list|)
block|{
name|String
name|val
init|=
name|propMap
operator|.
name|get
argument_list|(
name|prop
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
name|val
operator|=
name|PropertiesUtil
operator|.
name|substituteProperty
argument_list|(
name|val
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
operator|(
name|val
operator|==
literal|null
operator|)
condition|?
name|def
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
argument_list|)
return|;
block|}
DECL|method|getBool
specifier|public
name|boolean
name|getBool
parameter_list|(
name|CfgProp
name|prop
parameter_list|,
name|boolean
name|defValue
parameter_list|)
block|{
name|String
name|val
init|=
name|propMap
operator|.
name|get
argument_list|(
name|prop
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
name|val
operator|=
name|PropertiesUtil
operator|.
name|substituteProperty
argument_list|(
name|val
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
operator|(
name|val
operator|==
literal|null
operator|)
condition|?
name|defValue
else|:
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|val
argument_list|)
return|;
block|}
DECL|method|get
specifier|public
name|String
name|get
parameter_list|(
name|CfgProp
name|prop
parameter_list|,
name|String
name|def
parameter_list|)
block|{
name|String
name|val
init|=
name|propMap
operator|.
name|get
argument_list|(
name|prop
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
name|val
operator|=
name|PropertiesUtil
operator|.
name|substituteProperty
argument_list|(
name|val
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
operator|(
name|val
operator|==
literal|null
operator|)
condition|?
name|def
else|:
name|val
return|;
block|}
comment|// For saving the original property, ${} syntax and all.
DECL|method|getOrigProp
specifier|public
name|String
name|getOrigProp
parameter_list|(
name|CfgProp
name|prop
parameter_list|,
name|String
name|def
parameter_list|)
block|{
name|String
name|val
init|=
name|propMap
operator|.
name|get
argument_list|(
name|prop
argument_list|)
decl_stmt|;
return|return
operator|(
name|val
operator|==
literal|null
operator|)
condition|?
name|def
else|:
name|val
return|;
block|}
DECL|method|getSolrProperties
specifier|public
name|Properties
name|getSolrProperties
parameter_list|(
name|String
name|path
parameter_list|)
block|{
try|try
block|{
return|return
name|readProperties
argument_list|(
operator|(
operator|(
name|NodeList
operator|)
name|config
operator|.
name|evaluate
argument_list|(
name|path
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
operator|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|readProperties
specifier|protected
name|Properties
name|readProperties
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|XPathExpressionException
block|{
name|XPath
name|xpath
init|=
name|config
operator|.
name|getXPath
argument_list|()
decl_stmt|;
name|NodeList
name|props
init|=
operator|(
name|NodeList
operator|)
name|xpath
operator|.
name|evaluate
argument_list|(
literal|"property"
argument_list|,
name|node
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|props
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|prop
init|=
name|props
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|prop
argument_list|,
literal|"name"
argument_list|)
argument_list|,
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|prop
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
DECL|method|substituteProperties
specifier|public
specifier|abstract
name|void
name|substituteProperties
parameter_list|()
function_decl|;
DECL|method|getCoreNameFromOrig
specifier|public
specifier|abstract
name|String
name|getCoreNameFromOrig
parameter_list|(
name|String
name|origCoreName
parameter_list|,
name|SolrResourceLoader
name|loader
parameter_list|,
name|String
name|coreName
parameter_list|)
function_decl|;
DECL|method|getAllCoreNames
specifier|public
specifier|abstract
name|List
argument_list|<
name|String
argument_list|>
name|getAllCoreNames
parameter_list|()
function_decl|;
DECL|method|getProperty
specifier|public
specifier|abstract
name|String
name|getProperty
parameter_list|(
name|String
name|coreName
parameter_list|,
name|String
name|property
parameter_list|,
name|String
name|defaultVal
parameter_list|)
function_decl|;
DECL|method|readCoreProperties
specifier|public
specifier|abstract
name|Properties
name|readCoreProperties
parameter_list|(
name|String
name|coreName
parameter_list|)
function_decl|;
DECL|method|readCoreAttributes
specifier|public
specifier|abstract
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|readCoreAttributes
parameter_list|(
name|String
name|coreName
parameter_list|)
function_decl|;
block|}
end_class
begin_comment
comment|// It's mightily convenient to have all of the original path names and property
end_comment
begin_comment
comment|// values when persisting cores, so
end_comment
begin_comment
comment|// this little convenience class is just for that.
end_comment
begin_comment
comment|// Also, let's keep track of anything we added here, especially the instance dir
end_comment
begin_comment
comment|// for persistence purposes. We don't
end_comment
begin_comment
comment|// want, for instance, to persist instanceDir if it was not specified
end_comment
begin_comment
comment|// originally.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// I suspect that for persistence purposes, we may want to expand this idea to
end_comment
begin_comment
comment|// record, say, ${blah}
end_comment
begin_class
DECL|class|CoreDescriptorPlus
class|class
name|CoreDescriptorPlus
block|{
DECL|field|coreDescriptor
specifier|private
name|CoreDescriptor
name|coreDescriptor
decl_stmt|;
DECL|field|filePath
specifier|private
name|String
name|filePath
decl_stmt|;
DECL|field|propsOrig
specifier|private
name|Properties
name|propsOrig
decl_stmt|;
comment|// TODO: 5.0. Remove this since it's only really
comment|// used for persisting.
DECL|method|CoreDescriptorPlus
name|CoreDescriptorPlus
parameter_list|(
name|String
name|filePath
parameter_list|,
name|CoreDescriptor
name|descriptor
parameter_list|,
name|Properties
name|propsOrig
parameter_list|)
block|{
name|coreDescriptor
operator|=
name|descriptor
expr_stmt|;
name|this
operator|.
name|filePath
operator|=
name|filePath
expr_stmt|;
name|this
operator|.
name|propsOrig
operator|=
name|propsOrig
expr_stmt|;
block|}
DECL|method|getCoreDescriptor
name|CoreDescriptor
name|getCoreDescriptor
parameter_list|()
block|{
return|return
name|coreDescriptor
return|;
block|}
DECL|method|getFilePath
name|String
name|getFilePath
parameter_list|()
block|{
return|return
name|filePath
return|;
block|}
DECL|method|getPropsOrig
name|Properties
name|getPropsOrig
parameter_list|()
block|{
return|return
name|propsOrig
return|;
block|}
block|}
end_class
end_unit
