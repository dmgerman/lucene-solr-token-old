begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|CharFilterFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|ResourceLoaderAware
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenFilterFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenizerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|WordlistLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|ResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CoreAdminHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandlerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|InitialContext
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NoInitialContextException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|SearchComponent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|QueryResponseWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|UpdateRequestProcessorFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|SolrCoreAware
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QParserPlugin
import|;
end_import
begin_comment
comment|/**  * @since solr 1.3  */
end_comment
begin_class
DECL|class|SolrResourceLoader
specifier|public
class|class
name|SolrResourceLoader
implements|implements
name|ResourceLoader
block|{
DECL|field|log
specifier|public
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrResourceLoader
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|project
specifier|static
specifier|final
name|String
name|project
init|=
literal|"solr"
decl_stmt|;
DECL|field|base
specifier|static
specifier|final
name|String
name|base
init|=
literal|"org.apache"
operator|+
literal|"."
operator|+
name|project
decl_stmt|;
DECL|field|packages
specifier|static
specifier|final
name|String
index|[]
name|packages
init|=
block|{
literal|""
block|,
literal|"analysis."
block|,
literal|"schema."
block|,
literal|"handler."
block|,
literal|"search."
block|,
literal|"update."
block|,
literal|"core."
block|,
literal|"response."
block|,
literal|"request."
block|,
literal|"update.processor."
block|,
literal|"util."
block|,
literal|"spelling."
block|,
literal|"handler.component."
block|,
literal|"handler.dataimport."
block|}
decl_stmt|;
DECL|field|classLoader
specifier|protected
name|URLClassLoader
name|classLoader
decl_stmt|;
DECL|field|instanceDir
specifier|private
specifier|final
name|String
name|instanceDir
decl_stmt|;
DECL|field|dataDir
specifier|private
name|String
name|dataDir
decl_stmt|;
DECL|field|waitingForCore
specifier|private
specifier|final
name|List
argument_list|<
name|SolrCoreAware
argument_list|>
name|waitingForCore
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|SolrCoreAware
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|infoMBeans
specifier|private
specifier|final
name|List
argument_list|<
name|SolrInfoMBean
argument_list|>
name|infoMBeans
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|SolrInfoMBean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|waitingForResources
specifier|private
specifier|final
name|List
argument_list|<
name|ResourceLoaderAware
argument_list|>
name|waitingForResources
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceLoaderAware
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|UTF_8
specifier|private
specifier|static
specifier|final
name|Charset
name|UTF_8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
comment|//TODO: Solr5. Remove this completely when you obsolete putting<core> tags in solr.xml (See Solr-4196)
DECL|field|coreProperties
specifier|private
specifier|final
name|Properties
name|coreProperties
decl_stmt|;
DECL|field|live
specifier|private
specifier|volatile
name|boolean
name|live
decl_stmt|;
comment|/**    *<p>    * This loader will delegate to the context classloader when possible,    * otherwise it will attempt to resolve resources using any jar files    * found in the "lib/" directory in the specified instance directory.    *</p>    *    * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.    * @see #locateSolrHome    */
DECL|method|SolrResourceLoader
specifier|public
name|SolrResourceLoader
parameter_list|(
name|String
name|instanceDir
parameter_list|,
name|ClassLoader
name|parent
parameter_list|,
name|Properties
name|coreProperties
parameter_list|)
block|{
if|if
condition|(
name|instanceDir
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|instanceDir
operator|=
name|SolrResourceLoader
operator|.
name|locateSolrHome
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"new SolrResourceLoader for deduced Solr Home: '{}'"
argument_list|,
name|this
operator|.
name|instanceDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|instanceDir
operator|=
name|normalizeDir
argument_list|(
name|instanceDir
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"new SolrResourceLoader for directory: '{}'"
argument_list|,
name|this
operator|.
name|instanceDir
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|classLoader
operator|=
name|createClassLoader
argument_list|(
literal|null
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|addToClassLoader
argument_list|(
literal|"./lib/"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|reloadLuceneSPI
argument_list|()
expr_stmt|;
name|this
operator|.
name|coreProperties
operator|=
name|coreProperties
expr_stmt|;
block|}
comment|/**    *<p>    * This loader will delegate to the context classloader when possible,    * otherwise it will attempt to resolve resources using any jar files    * found in the "lib/" directory in the specified instance directory.    * If the instance directory is not specified (=null), SolrResourceLoader#locateInstanceDir will provide one.    *<p>    */
DECL|method|SolrResourceLoader
specifier|public
name|SolrResourceLoader
parameter_list|(
name|String
name|instanceDir
parameter_list|,
name|ClassLoader
name|parent
parameter_list|)
block|{
name|this
argument_list|(
name|instanceDir
argument_list|,
name|parent
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds every file/dir found in the baseDir which passes the specified Filter    * to the ClassLoader used by this ResourceLoader.  This method<b>MUST</b>    * only be called prior to using this ResourceLoader to get any resources, otherwise    * it's behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}    * before using this ResourceLoader.    *    * @param baseDir base directory whose children (either jars or directories of    *                classes) will be in the classpath, will be resolved relative    *                the instance dir.    * @param filter The filter files must satisfy, if null all files will be accepted.    */
DECL|method|addToClassLoader
name|void
name|addToClassLoader
parameter_list|(
specifier|final
name|String
name|baseDir
parameter_list|,
specifier|final
name|FileFilter
name|filter
parameter_list|)
block|{
name|File
name|base
init|=
name|FileUtils
operator|.
name|resolvePath
argument_list|(
operator|new
name|File
argument_list|(
name|getInstanceDir
argument_list|()
argument_list|)
argument_list|,
name|baseDir
argument_list|)
decl_stmt|;
name|this
operator|.
name|classLoader
operator|=
name|replaceClassLoader
argument_list|(
name|classLoader
argument_list|,
name|base
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds the specific file/dir specified to the ClassLoader used by this    * ResourceLoader.  This method<b>MUST</b>    * only be called prior to using this ResourceLoader to get any resources, otherwise    * it's behavior will be non-deterministic. You also have to {link #reloadLuceneSPI()}    * before using this ResourceLoader.    *    * @param path A jar file (or directory of classes) to be added to the classpath,    *             will be resolved relative the instance dir.    */
DECL|method|addToClassLoader
name|void
name|addToClassLoader
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
specifier|final
name|File
name|file
init|=
name|FileUtils
operator|.
name|resolvePath
argument_list|(
operator|new
name|File
argument_list|(
name|getInstanceDir
argument_list|()
argument_list|)
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|this
operator|.
name|classLoader
operator|=
name|replaceClassLoader
argument_list|(
name|classLoader
argument_list|,
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|,
operator|new
name|FileFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|pathname
parameter_list|)
block|{
return|return
name|pathname
operator|.
name|equals
argument_list|(
name|file
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't find (or read) file to add to classloader: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Reloads all Lucene SPI implementations using the new classloader.    * This method must be called after {@link #addToClassLoader(String)}    * and {@link #addToClassLoader(String,FileFilter)} before using    * this ResourceLoader.    */
DECL|method|reloadLuceneSPI
name|void
name|reloadLuceneSPI
parameter_list|()
block|{
comment|// Codecs:
name|PostingsFormat
operator|.
name|reloadPostingsFormats
argument_list|(
name|this
operator|.
name|classLoader
argument_list|)
expr_stmt|;
name|DocValuesFormat
operator|.
name|reloadDocValuesFormats
argument_list|(
name|this
operator|.
name|classLoader
argument_list|)
expr_stmt|;
name|Codec
operator|.
name|reloadCodecs
argument_list|(
name|this
operator|.
name|classLoader
argument_list|)
expr_stmt|;
comment|// Analysis:
name|CharFilterFactory
operator|.
name|reloadCharFilters
argument_list|(
name|this
operator|.
name|classLoader
argument_list|)
expr_stmt|;
name|TokenFilterFactory
operator|.
name|reloadTokenFilters
argument_list|(
name|this
operator|.
name|classLoader
argument_list|)
expr_stmt|;
name|TokenizerFactory
operator|.
name|reloadTokenizers
argument_list|(
name|this
operator|.
name|classLoader
argument_list|)
expr_stmt|;
block|}
DECL|method|replaceClassLoader
specifier|private
specifier|static
name|URLClassLoader
name|replaceClassLoader
parameter_list|(
specifier|final
name|URLClassLoader
name|oldLoader
parameter_list|,
specifier|final
name|File
name|base
parameter_list|,
specifier|final
name|FileFilter
name|filter
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|base
operator|&&
name|base
operator|.
name|canRead
argument_list|()
operator|&&
name|base
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|base
operator|.
name|listFiles
argument_list|(
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|files
operator|||
literal|0
operator|==
name|files
operator|.
name|length
condition|)
return|return
name|oldLoader
return|;
name|URL
index|[]
name|oldElements
init|=
name|oldLoader
operator|.
name|getURLs
argument_list|()
decl_stmt|;
name|URL
index|[]
name|elements
init|=
operator|new
name|URL
index|[
name|oldElements
operator|.
name|length
operator|+
name|files
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|oldElements
argument_list|,
literal|0
argument_list|,
name|elements
argument_list|,
literal|0
argument_list|,
name|oldElements
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|files
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
try|try
block|{
name|URL
name|element
init|=
name|files
index|[
name|j
index|]
operator|.
name|toURI
argument_list|()
operator|.
name|normalize
argument_list|()
operator|.
name|toURL
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Adding '"
operator|+
name|element
operator|.
name|toString
argument_list|()
operator|+
literal|"' to classloader"
argument_list|)
expr_stmt|;
name|elements
index|[
name|oldElements
operator|.
name|length
operator|+
name|j
index|]
operator|=
name|element
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Can't add element to classloader: "
operator|+
name|files
index|[
name|j
index|]
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|URLClassLoader
operator|.
name|newInstance
argument_list|(
name|elements
argument_list|,
name|oldLoader
operator|.
name|getParent
argument_list|()
argument_list|)
return|;
block|}
comment|// are we still here?
return|return
name|oldLoader
return|;
block|}
comment|/**    * Convenience method for getting a new ClassLoader using all files found    * in the specified lib directory.    */
DECL|method|createClassLoader
specifier|static
name|URLClassLoader
name|createClassLoader
parameter_list|(
specifier|final
name|File
name|libDir
parameter_list|,
name|ClassLoader
name|parent
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|parent
condition|)
block|{
name|parent
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
expr_stmt|;
block|}
return|return
name|replaceClassLoader
argument_list|(
name|URLClassLoader
operator|.
name|newInstance
argument_list|(
operator|new
name|URL
index|[
literal|0
index|]
argument_list|,
name|parent
argument_list|)
argument_list|,
name|libDir
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|SolrResourceLoader
specifier|public
name|SolrResourceLoader
parameter_list|(
name|String
name|instanceDir
parameter_list|)
block|{
name|this
argument_list|(
name|instanceDir
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Ensures a directory name always ends with a '/'. */
DECL|method|normalizeDir
specifier|public
specifier|static
name|String
name|normalizeDir
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
operator|(
name|path
operator|!=
literal|null
operator|&&
operator|(
operator|!
operator|(
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|||
name|path
operator|.
name|endsWith
argument_list|(
literal|"\\"
argument_list|)
operator|)
operator|)
operator|)
condition|?
name|path
operator|+
name|File
operator|.
name|separator
else|:
name|path
return|;
block|}
DECL|method|listConfigDir
specifier|public
name|String
index|[]
name|listConfigDir
parameter_list|()
block|{
name|File
name|configdir
init|=
operator|new
name|File
argument_list|(
name|getConfigDir
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|configdir
operator|.
name|exists
argument_list|()
operator|&&
name|configdir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|configdir
operator|.
name|list
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
block|}
DECL|method|getConfigDir
specifier|public
name|String
name|getConfigDir
parameter_list|()
block|{
return|return
name|instanceDir
operator|+
literal|"conf/"
return|;
block|}
DECL|method|getDataDir
specifier|public
name|String
name|getDataDir
parameter_list|()
block|{
return|return
name|dataDir
return|;
block|}
DECL|method|getCoreProperties
specifier|public
name|Properties
name|getCoreProperties
parameter_list|()
block|{
return|return
name|coreProperties
return|;
block|}
comment|/**    * EXPERT    *<p/>    * The underlying class loader.  Most applications will not need to use this.    * @return The {@link ClassLoader}    */
DECL|method|getClassLoader
specifier|public
name|ClassLoader
name|getClassLoader
parameter_list|()
block|{
return|return
name|classLoader
return|;
block|}
comment|/** Opens a schema resource by its name.    * Override this method to customize loading schema resources.    *@return the stream for the named schema    */
DECL|method|openSchema
specifier|public
name|InputStream
name|openSchema
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|openResource
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/** Opens a config resource by its name.    * Override this method to customize loading config resources.    *@return the stream for the named configuration    */
DECL|method|openConfig
specifier|public
name|InputStream
name|openConfig
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|openResource
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/** Opens any resource by its name.    * By default, this will look in multiple locations to load the resource:    * $configDir/$resource (if resource is not absolute)    * $CWD/$resource    * otherwise, it will look for it in any jar accessible through the class loader.    * Override this method to customize loading resources.    *@return the stream for the named resource    */
annotation|@
name|Override
DECL|method|openResource
specifier|public
name|InputStream
name|openResource
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|f0
init|=
operator|new
name|File
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|File
name|f
init|=
name|f0
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
comment|// try $CWD/$configDir/$resource
name|f
operator|=
operator|new
name|File
argument_list|(
name|getConfigDir
argument_list|()
operator|+
name|resource
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|.
name|isFile
argument_list|()
operator|&&
name|f
operator|.
name|canRead
argument_list|()
condition|)
block|{
return|return
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|f
operator|!=
name|f0
condition|)
block|{
comment|// no success with $CWD/$configDir/$resource
if|if
condition|(
name|f0
operator|.
name|isFile
argument_list|()
operator|&&
name|f0
operator|.
name|canRead
argument_list|()
condition|)
return|return
operator|new
name|FileInputStream
argument_list|(
name|f0
argument_list|)
return|;
block|}
comment|// delegate to the class loader (looking into $INSTANCE_DIR/lib jars)
name|is
operator|=
name|classLoader
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
expr_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
name|is
operator|=
name|classLoader
operator|.
name|getResourceAsStream
argument_list|(
name|getConfigDir
argument_list|()
operator|+
name|resource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error opening "
operator|+
name|resource
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't find resource '"
operator|+
name|resource
operator|+
literal|"' in classpath or '"
operator|+
name|getConfigDir
argument_list|()
operator|+
literal|"', cwd="
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|is
return|;
block|}
comment|/**    * Accesses a resource by name and returns the (non comment) lines    * containing data.    *    *<p>    * A comment line is any line that starts with the character "#"    *</p>    *    * @return a list of non-blank non-comment lines with whitespace trimmed    * from front and back.    * @throws IOException If there is a low-level I/O error.    */
DECL|method|getLines
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLines
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getLines
argument_list|(
name|resource
argument_list|,
name|UTF_8
argument_list|)
return|;
block|}
comment|/**    * Accesses a resource by name and returns the (non comment) lines containing    * data using the given character encoding.    *    *<p>    * A comment line is any line that starts with the character "#"    *</p>    *    * @param resource the file to be read    * @return a list of non-blank non-comment lines with whitespace trimmed    * @throws IOException If there is a low-level I/O error.    */
DECL|method|getLines
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLines
parameter_list|(
name|String
name|resource
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getLines
argument_list|(
name|resource
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
name|encoding
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getLines
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLines
parameter_list|(
name|String
name|resource
parameter_list|,
name|Charset
name|charset
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|WordlistLoader
operator|.
name|getLines
argument_list|(
name|openResource
argument_list|(
name|resource
argument_list|)
argument_list|,
name|charset
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error loading resource (wrong encoding?): "
operator|+
name|resource
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/*    * A static map of short class name to fully qualified class name     */
DECL|field|classNameCache
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|classNameCache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Using this pattern, legacy analysis components from previous Solr versions are identified and delegated to SPI loader:
DECL|field|legacyAnalysisPattern
specifier|private
specifier|static
specifier|final
name|Pattern
name|legacyAnalysisPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"((\\Q"
operator|+
name|base
operator|+
literal|".analysis.\\E)|(\\Q"
operator|+
name|project
operator|+
literal|".\\E))([\\p{L}_$][\\p{L}\\p{N}_$]+?)(TokenFilter|Filter|Tokenizer|CharFilter)Factory"
argument_list|)
decl_stmt|;
comment|/**    * This method loads a class either with it's FQN or a short-name (solr.class-simplename or class-simplename).    * It tries to load the class with the name that is given first and if it fails, it tries all the known    * solr packages. This method caches the FQN of a short-name in a static map in-order to make subsequent lookups    * for the same class faster. The caching is done only if the class is loaded by the webapp classloader and it    * is loaded using a shortname.    *    * @param cname The name or the short name of the class.    * @param subpackages the packages to be tried if the cnams starts with solr.    * @return the loaded class. An exception is thrown if it fails    */
DECL|method|findClass
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|findClass
parameter_list|(
name|String
name|cname
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|expectedType
parameter_list|,
name|String
modifier|...
name|subpackages
parameter_list|)
block|{
if|if
condition|(
name|subpackages
operator|==
literal|null
operator|||
name|subpackages
operator|.
name|length
operator|==
literal|0
operator|||
name|subpackages
operator|==
name|packages
condition|)
block|{
name|subpackages
operator|=
name|packages
expr_stmt|;
name|String
name|c
init|=
name|classNameCache
operator|.
name|get
argument_list|(
name|cname
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|c
argument_list|,
literal|true
argument_list|,
name|classLoader
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|expectedType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|//this is unlikely
name|log
operator|.
name|error
argument_list|(
literal|"Unable to load cached class-name :  "
operator|+
name|c
operator|+
literal|" for shortname : "
operator|+
name|cname
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|clazz
init|=
literal|null
decl_stmt|;
comment|// first try legacy analysis patterns, now replaced by Lucene's Analysis package:
specifier|final
name|Matcher
name|m
init|=
name|legacyAnalysisPattern
operator|.
name|matcher
argument_list|(
name|cname
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
specifier|final
name|String
name|name
init|=
name|m
operator|.
name|group
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Trying to load class from analysis SPI using name='{}'"
argument_list|,
name|name
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|CharFilterFactory
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|expectedType
argument_list|)
condition|)
block|{
return|return
name|clazz
operator|=
name|CharFilterFactory
operator|.
name|lookupClass
argument_list|(
name|name
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|expectedType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|TokenizerFactory
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|expectedType
argument_list|)
condition|)
block|{
return|return
name|clazz
operator|=
name|TokenizerFactory
operator|.
name|lookupClass
argument_list|(
name|name
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|expectedType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|TokenFilterFactory
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|expectedType
argument_list|)
condition|)
block|{
return|return
name|clazz
operator|=
name|TokenFilterFactory
operator|.
name|lookupClass
argument_list|(
name|name
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|expectedType
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"'{}' looks like an analysis factory, but caller requested different class type: {}"
argument_list|,
name|cname
argument_list|,
name|expectedType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// ok, we fall back to legacy loading
block|}
block|}
comment|// first try cname == full name
try|try
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|cname
argument_list|,
literal|true
argument_list|,
name|classLoader
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|expectedType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|String
name|newName
init|=
name|cname
decl_stmt|;
if|if
condition|(
name|newName
operator|.
name|startsWith
argument_list|(
name|project
argument_list|)
condition|)
block|{
name|newName
operator|=
name|cname
operator|.
name|substring
argument_list|(
name|project
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|subpackage
range|:
name|subpackages
control|)
block|{
try|try
block|{
name|String
name|name
init|=
name|base
operator|+
literal|'.'
operator|+
name|subpackage
operator|+
name|newName
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Trying class name "
operator|+
name|name
argument_list|)
expr_stmt|;
return|return
name|clazz
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|classLoader
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|expectedType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e1
parameter_list|)
block|{
comment|// ignore... assume first exception is best.
block|}
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error loading class '"
operator|+
name|cname
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|//cache the shortname vs FQN if it is loaded by the webapp classloader  and it is loaded
comment|// using a shortname
if|if
condition|(
name|clazz
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|getClassLoader
argument_list|()
operator|==
name|SolrResourceLoader
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|&&
operator|!
name|cname
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|(
name|subpackages
operator|.
name|length
operator|==
literal|0
operator|||
name|subpackages
operator|==
name|packages
operator|)
condition|)
block|{
comment|//store in the cache
name|classNameCache
operator|.
name|put
argument_list|(
name|cname
argument_list|,
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|empty
specifier|static
specifier|final
name|String
name|empty
index|[]
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
annotation|@
name|Override
DECL|method|newInstance
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|newInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|expectedType
parameter_list|)
block|{
return|return
name|newInstance
argument_list|(
name|name
argument_list|,
name|expectedType
argument_list|,
name|empty
argument_list|)
return|;
block|}
DECL|method|newInstance
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|newInstance
parameter_list|(
name|String
name|cname
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|expectedType
parameter_list|,
name|String
modifier|...
name|subpackages
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|clazz
init|=
name|findClass
argument_list|(
name|cname
argument_list|,
name|expectedType
argument_list|,
name|subpackages
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Can not find class: "
operator|+
name|cname
operator|+
literal|" in "
operator|+
name|classLoader
argument_list|)
throw|;
block|}
name|T
name|obj
init|=
literal|null
decl_stmt|;
try|try
block|{
name|obj
operator|=
name|clazz
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error instantiating class: '"
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|live
condition|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|SolrCoreAware
condition|)
block|{
name|assertAwareCompatibility
argument_list|(
name|SolrCoreAware
operator|.
name|class
argument_list|,
name|obj
argument_list|)
expr_stmt|;
name|waitingForCore
operator|.
name|add
argument_list|(
operator|(
name|SolrCoreAware
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|ResourceLoaderAware
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|obj
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Class [{}] uses org.apache.solr.util.plugin.ResourceLoaderAware "
operator|+
literal|"which is deprecated. Change to org.apache.lucene.analysis.util.ResourceLoaderAware."
argument_list|,
name|cname
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|ResourceLoaderAware
condition|)
block|{
name|assertAwareCompatibility
argument_list|(
name|ResourceLoaderAware
operator|.
name|class
argument_list|,
name|obj
argument_list|)
expr_stmt|;
name|waitingForResources
operator|.
name|add
argument_list|(
operator|(
name|ResourceLoaderAware
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|SolrInfoMBean
condition|)
block|{
comment|//TODO: Assert here?
name|infoMBeans
operator|.
name|add
argument_list|(
operator|(
name|SolrInfoMBean
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|obj
return|;
block|}
DECL|method|newAdminHandlerInstance
specifier|public
name|CoreAdminHandler
name|newAdminHandlerInstance
parameter_list|(
specifier|final
name|CoreContainer
name|coreContainer
parameter_list|,
name|String
name|cname
parameter_list|,
name|String
modifier|...
name|subpackages
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|CoreAdminHandler
argument_list|>
name|clazz
init|=
name|findClass
argument_list|(
name|cname
argument_list|,
name|CoreAdminHandler
operator|.
name|class
argument_list|,
name|subpackages
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Can not find class: "
operator|+
name|cname
operator|+
literal|" in "
operator|+
name|classLoader
argument_list|)
throw|;
block|}
name|CoreAdminHandler
name|obj
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|CoreAdminHandler
argument_list|>
name|ctor
init|=
name|clazz
operator|.
name|getConstructor
argument_list|(
name|CoreContainer
operator|.
name|class
argument_list|)
decl_stmt|;
name|obj
operator|=
name|ctor
operator|.
name|newInstance
argument_list|(
name|coreContainer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error instantiating class: '"
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|live
condition|)
block|{
comment|//TODO: Does SolrCoreAware make sense here since in a multi-core context
comment|// which core are we talking about ?
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|ResourceLoaderAware
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|obj
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Class [{}] uses org.apache.solr.util.plugin.ResourceLoaderAware "
operator|+
literal|"which is deprecated. Change to org.apache.lucene.analysis.util.ResourceLoaderAware."
argument_list|,
name|cname
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|ResourceLoaderAware
condition|)
block|{
name|assertAwareCompatibility
argument_list|(
name|ResourceLoaderAware
operator|.
name|class
argument_list|,
name|obj
argument_list|)
expr_stmt|;
name|waitingForResources
operator|.
name|add
argument_list|(
operator|(
name|ResourceLoaderAware
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|obj
return|;
block|}
DECL|method|newInstance
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|newInstance
parameter_list|(
name|String
name|cName
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|expectedType
parameter_list|,
name|String
index|[]
name|subPackages
parameter_list|,
name|Class
index|[]
name|params
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|clazz
init|=
name|findClass
argument_list|(
name|cName
argument_list|,
name|expectedType
argument_list|,
name|subPackages
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Can not find class: "
operator|+
name|cName
operator|+
literal|" in "
operator|+
name|classLoader
argument_list|)
throw|;
block|}
name|T
name|obj
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|constructor
init|=
name|clazz
operator|.
name|getConstructor
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|obj
operator|=
name|constructor
operator|.
name|newInstance
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error instantiating class: '"
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|live
condition|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|SolrCoreAware
condition|)
block|{
name|assertAwareCompatibility
argument_list|(
name|SolrCoreAware
operator|.
name|class
argument_list|,
name|obj
argument_list|)
expr_stmt|;
name|waitingForCore
operator|.
name|add
argument_list|(
operator|(
name|SolrCoreAware
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|ResourceLoaderAware
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|obj
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Class [{}] uses org.apache.solr.util.plugin.ResourceLoaderAware "
operator|+
literal|"which is deprecated. Change to org.apache.lucene.analysis.util.ResourceLoaderAware."
argument_list|,
name|cName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|ResourceLoaderAware
condition|)
block|{
name|assertAwareCompatibility
argument_list|(
name|ResourceLoaderAware
operator|.
name|class
argument_list|,
name|obj
argument_list|)
expr_stmt|;
name|waitingForResources
operator|.
name|add
argument_list|(
operator|(
name|ResourceLoaderAware
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|SolrInfoMBean
condition|)
block|{
comment|//TODO: Assert here?
name|infoMBeans
operator|.
name|add
argument_list|(
operator|(
name|SolrInfoMBean
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|obj
return|;
block|}
comment|/**    * Tell all {@link SolrCoreAware} instances about the SolrCore    */
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|this
operator|.
name|dataDir
operator|=
name|core
operator|.
name|getDataDir
argument_list|()
expr_stmt|;
comment|// make a copy to avoid potential deadlock of a callback calling newInstance and trying to
comment|// add something to waitingForCore.
name|SolrCoreAware
index|[]
name|arr
decl_stmt|;
while|while
condition|(
name|waitingForCore
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
synchronized|synchronized
init|(
name|waitingForCore
init|)
block|{
name|arr
operator|=
name|waitingForCore
operator|.
name|toArray
argument_list|(
operator|new
name|SolrCoreAware
index|[
name|waitingForCore
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|waitingForCore
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|SolrCoreAware
name|aware
range|:
name|arr
control|)
block|{
name|aware
operator|.
name|inform
argument_list|(
name|core
argument_list|)
expr_stmt|;
block|}
block|}
comment|// this is the last method to be called in SolrCore before the latch is released.
name|live
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Tell all {@link ResourceLoaderAware} instances about the loader    */
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|ResourceLoader
name|loader
parameter_list|)
throws|throws
name|IOException
block|{
comment|// make a copy to avoid potential deadlock of a callback adding to the list
name|ResourceLoaderAware
index|[]
name|arr
decl_stmt|;
while|while
condition|(
name|waitingForResources
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
synchronized|synchronized
init|(
name|waitingForResources
init|)
block|{
name|arr
operator|=
name|waitingForResources
operator|.
name|toArray
argument_list|(
operator|new
name|ResourceLoaderAware
index|[
name|waitingForResources
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|waitingForResources
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|ResourceLoaderAware
name|aware
range|:
name|arr
control|)
block|{
name|aware
operator|.
name|inform
argument_list|(
name|loader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Register any {@link org.apache.solr.core.SolrInfoMBean}s    * @param infoRegistry The Info Registry    */
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|SolrInfoMBean
argument_list|>
name|infoRegistry
parameter_list|)
block|{
comment|// this can currently happen concurrently with requests starting and lazy components
comment|// loading.  Make sure infoMBeans doesn't change.
name|SolrInfoMBean
index|[]
name|arr
decl_stmt|;
synchronized|synchronized
init|(
name|infoMBeans
init|)
block|{
name|arr
operator|=
name|infoMBeans
operator|.
name|toArray
argument_list|(
operator|new
name|SolrInfoMBean
index|[
name|infoMBeans
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|waitingForResources
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|SolrInfoMBean
name|bean
range|:
name|arr
control|)
block|{
try|try
block|{
name|infoRegistry
operator|.
name|put
argument_list|(
name|bean
operator|.
name|getName
argument_list|()
argument_list|,
name|bean
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"could not register MBean '"
operator|+
name|bean
operator|.
name|getName
argument_list|()
operator|+
literal|"'."
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Determines the solrhome from the environment.    * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);    * if both fail, defaults to solr/    * @return the instance directory name    */
comment|/**    * Finds the solrhome based on looking up the value in one of three places:    *<ol>    *<li>JNDI: via java:comp/env/solr/home</li>    *<li>The system property solr.solr.home</li>    *<li>Look in the current working directory for a solr/ directory</li>     *</ol>    *    * The return value is normalized.  Normalization essentially means it ends in a trailing slash.    * @return A normalized solrhome    * @see #normalizeDir(String)    */
DECL|method|locateSolrHome
specifier|public
specifier|static
name|String
name|locateSolrHome
parameter_list|()
block|{
name|String
name|home
init|=
literal|null
decl_stmt|;
comment|// Try JNDI
try|try
block|{
name|Context
name|c
init|=
operator|new
name|InitialContext
argument_list|()
decl_stmt|;
name|home
operator|=
operator|(
name|String
operator|)
name|c
operator|.
name|lookup
argument_list|(
literal|"java:comp/env/"
operator|+
name|project
operator|+
literal|"/home"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Using JNDI solr.home: "
operator|+
name|home
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoInitialContextException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"JNDI not configured for "
operator|+
name|project
operator|+
literal|" (NoInitialContextEx)"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No /"
operator|+
name|project
operator|+
literal|"/home in JNDI"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Odd RuntimeException while testing for JNDI: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Now try system property
if|if
condition|(
name|home
operator|==
literal|null
condition|)
block|{
name|String
name|prop
init|=
name|project
operator|+
literal|".solr.home"
decl_stmt|;
name|home
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|prop
argument_list|)
expr_stmt|;
if|if
condition|(
name|home
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"using system property "
operator|+
name|prop
operator|+
literal|": "
operator|+
name|home
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if all else fails, try
if|if
condition|(
name|home
operator|==
literal|null
condition|)
block|{
name|home
operator|=
name|project
operator|+
literal|'/'
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|project
operator|+
literal|" home defaulted to '"
operator|+
name|home
operator|+
literal|"' (could not find system property or JNDI)"
argument_list|)
expr_stmt|;
block|}
return|return
name|normalizeDir
argument_list|(
name|home
argument_list|)
return|;
block|}
DECL|method|getInstanceDir
specifier|public
name|String
name|getInstanceDir
parameter_list|()
block|{
return|return
name|instanceDir
return|;
block|}
comment|/**    * Keep a list of classes that are allowed to implement each 'Aware' interface    */
DECL|field|awareCompatibility
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|,
name|Class
index|[]
argument_list|>
name|awareCompatibility
decl_stmt|;
static|static
block|{
name|awareCompatibility
operator|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|,
name|Class
index|[]
argument_list|>
argument_list|()
expr_stmt|;
name|awareCompatibility
operator|.
name|put
argument_list|(
name|SolrCoreAware
operator|.
name|class
argument_list|,
operator|new
name|Class
index|[]
block|{
name|SolrRequestHandler
operator|.
name|class
block|,
name|QueryResponseWriter
operator|.
name|class
block|,
name|SearchComponent
operator|.
name|class
block|,
name|UpdateRequestProcessorFactory
operator|.
name|class
block|,
name|ShardHandlerFactory
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
name|awareCompatibility
operator|.
name|put
argument_list|(
name|ResourceLoaderAware
operator|.
name|class
argument_list|,
operator|new
name|Class
index|[]
block|{
name|CharFilterFactory
operator|.
name|class
block|,
name|TokenFilterFactory
operator|.
name|class
block|,
name|TokenizerFactory
operator|.
name|class
block|,
name|QParserPlugin
operator|.
name|class
block|,
name|FieldType
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Utility function to throw an exception if the class is invalid    */
DECL|method|assertAwareCompatibility
name|void
name|assertAwareCompatibility
parameter_list|(
name|Class
name|aware
parameter_list|,
name|Object
name|obj
parameter_list|)
block|{
name|Class
index|[]
name|valid
init|=
name|awareCompatibility
operator|.
name|get
argument_list|(
name|aware
argument_list|)
decl_stmt|;
if|if
condition|(
name|valid
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unknown Aware interface: "
operator|+
name|aware
argument_list|)
throw|;
block|}
for|for
control|(
name|Class
name|v
range|:
name|valid
control|)
block|{
if|if
condition|(
name|v
operator|.
name|isInstance
argument_list|(
name|obj
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Invalid 'Aware' object: "
argument_list|)
operator|.
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" -- "
argument_list|)
operator|.
name|append
argument_list|(
name|aware
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" must be an instance of: "
argument_list|)
expr_stmt|;
for|for
control|(
name|Class
name|v
range|:
name|valid
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|v
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"] "
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_class
end_unit
