begin_unit
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|CodeSource
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|ProtectionDomain
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|ResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_class
DECL|class|MemClassLoader
specifier|public
class|class
name|MemClassLoader
extends|extends
name|ClassLoader
implements|implements
name|AutoCloseable
implements|,
name|ResourceLoader
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|allJarsLoaded
specifier|private
name|boolean
name|allJarsLoaded
init|=
literal|false
decl_stmt|;
DECL|field|parentLoader
specifier|private
specifier|final
name|SolrResourceLoader
name|parentLoader
decl_stmt|;
DECL|field|libs
specifier|private
name|List
argument_list|<
name|PluginBag
operator|.
name|RuntimeLib
argument_list|>
name|libs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|classCache
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|classCache
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|MemClassLoader
specifier|public
name|MemClassLoader
parameter_list|(
name|List
argument_list|<
name|PluginBag
operator|.
name|RuntimeLib
argument_list|>
name|libs
parameter_list|,
name|SolrResourceLoader
name|resourceLoader
parameter_list|)
block|{
name|this
operator|.
name|parentLoader
operator|=
name|resourceLoader
expr_stmt|;
name|this
operator|.
name|libs
operator|=
name|libs
expr_stmt|;
block|}
DECL|method|loadJars
specifier|public
specifier|synchronized
name|void
name|loadJars
parameter_list|()
block|{
if|if
condition|(
name|allJarsLoaded
condition|)
return|return;
for|for
control|(
name|PluginBag
operator|.
name|RuntimeLib
name|lib
range|:
name|libs
control|)
block|{
try|try
block|{
name|lib
operator|.
name|loadJar
argument_list|()
expr_stmt|;
name|lib
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
if|if
condition|(
name|exception
operator|instanceof
name|SolrException
condition|)
throw|throw
operator|(
name|SolrException
operator|)
name|exception
throw|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Atleast one runtimeLib could not be loaded"
argument_list|,
name|exception
argument_list|)
throw|;
block|}
block|}
name|allJarsLoaded
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|findClass
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|findClass
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
if|if
condition|(
operator|!
name|allJarsLoaded
condition|)
name|loadJars
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|parentLoader
operator|.
name|findClass
argument_list|(
name|name
argument_list|,
name|Object
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|loadFromRuntimeLibs
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
DECL|method|loadFromRuntimeLibs
specifier|private
specifier|synchronized
name|Class
argument_list|<
name|?
argument_list|>
name|loadFromRuntimeLibs
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|Class
name|result
init|=
name|classCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
return|return
name|result
return|;
name|AtomicReference
argument_list|<
name|String
argument_list|>
name|jarName
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|ByteBuffer
name|buf
init|=
literal|null
decl_stmt|;
try|try
block|{
name|buf
operator|=
name|getByteBuffer
argument_list|(
name|name
argument_list|,
name|jarName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
literal|"class could not be loaded "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|buf
operator|==
literal|null
condition|)
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
literal|"Class not found :"
operator|+
name|name
argument_list|)
throw|;
name|ProtectionDomain
name|defaultDomain
init|=
literal|null
decl_stmt|;
comment|//using the default protection domain, with no permissions
try|try
block|{
name|defaultDomain
operator|=
operator|new
name|ProtectionDomain
argument_list|(
operator|new
name|CodeSource
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://localhost/.system/blob/"
operator|+
name|jarName
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
operator|(
name|Certificate
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|mue
parameter_list|)
block|{
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
literal|"Unexpected exception "
argument_list|,
name|mue
argument_list|)
throw|;
comment|//should not happen
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Defining_class {} from runtime jar {} "
argument_list|,
name|name
argument_list|,
name|jarName
argument_list|)
expr_stmt|;
name|result
operator|=
name|defineClass
argument_list|(
name|name
argument_list|,
name|buf
operator|.
name|array
argument_list|()
argument_list|,
name|buf
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|buf
operator|.
name|limit
argument_list|()
argument_list|,
name|defaultDomain
argument_list|)
expr_stmt|;
name|classCache
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getByteBuffer
specifier|private
name|ByteBuffer
name|getByteBuffer
parameter_list|(
name|String
name|name
parameter_list|,
name|AtomicReference
argument_list|<
name|String
argument_list|>
name|jarName
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|allJarsLoaded
condition|)
block|{
name|loadJars
argument_list|()
expr_stmt|;
block|}
name|String
name|path
init|=
name|name
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|concat
argument_list|(
literal|".class"
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buf
init|=
literal|null
decl_stmt|;
for|for
control|(
name|PluginBag
operator|.
name|RuntimeLib
name|lib
range|:
name|libs
control|)
block|{
try|try
block|{
name|buf
operator|=
name|lib
operator|.
name|getFileContent
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|buf
operator|!=
literal|null
condition|)
block|{
name|jarName
operator|.
name|set
argument_list|(
name|lib
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|exp
parameter_list|)
block|{
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
literal|"Unable to load class :"
operator|+
name|name
argument_list|,
name|exp
argument_list|)
throw|;
block|}
block|}
return|return
name|buf
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|PluginBag
operator|.
name|RuntimeLib
name|lib
range|:
name|libs
control|)
block|{
try|try
block|{
name|lib
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{       }
block|}
block|}
annotation|@
name|Override
DECL|method|openResource
specifier|public
name|InputStream
name|openResource
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
name|AtomicReference
argument_list|<
name|String
argument_list|>
name|jarName
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|ByteBuffer
name|buf
init|=
name|getByteBuffer
argument_list|(
name|resource
argument_list|,
name|jarName
argument_list|)
decl_stmt|;
if|if
condition|(
name|buf
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Resource could not be found "
operator|+
name|resource
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Resource could not be found "
operator|+
name|resource
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|findClass
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|findClass
parameter_list|(
name|String
name|cname
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|expectedType
parameter_list|)
block|{
if|if
condition|(
operator|!
name|allJarsLoaded
condition|)
name|loadJars
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|findClass
argument_list|(
name|cname
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|expectedType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|SolrException
condition|)
block|{
throw|throw
operator|(
name|SolrException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"error loading class "
operator|+
name|cname
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|newInstance
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|newInstance
parameter_list|(
name|String
name|cname
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|expectedType
parameter_list|)
block|{
try|try
block|{
return|return
name|findClass
argument_list|(
name|cname
argument_list|,
name|expectedType
argument_list|)
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"error instantiating class :"
operator|+
name|cname
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class
end_unit
