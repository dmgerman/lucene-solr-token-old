begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|BasicPermission
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|CodeSource
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permissions
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|ProtectionDomain
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureClassLoader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|RequestHandlerBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|PluginInfoInitialized
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|SolrCoreAware
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  */
end_comment
begin_class
DECL|class|RequestHandlers
specifier|public
specifier|final
class|class
name|RequestHandlers
block|{
DECL|field|log
specifier|public
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RequestHandlers
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|core
specifier|protected
specifier|final
name|SolrCore
name|core
decl_stmt|;
comment|// Use a synchronized map - since the handlers can be changed at runtime,
comment|// the map implementation should be thread safe
DECL|field|handlers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SolrRequestHandler
argument_list|>
name|handlers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|immutableHandlers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SolrRequestHandler
argument_list|>
name|immutableHandlers
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|handlers
argument_list|)
decl_stmt|;
DECL|field|disableExternalLib
specifier|public
specifier|static
specifier|final
name|boolean
name|disableExternalLib
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"disable.external.lib"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * Trim the trailing '/' if it's there, and convert null to empty string.    *     * we want:    *  /update/csv   and    *  /update/csv/    * to map to the same handler     *     */
DECL|method|normalize
specifier|public
specifier|static
name|String
name|normalize
parameter_list|(
name|String
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|p
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|&&
name|p
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
return|return
name|p
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
return|return
name|p
return|;
block|}
DECL|method|RequestHandlers
specifier|public
name|RequestHandlers
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|this
operator|.
name|core
operator|=
name|core
expr_stmt|;
block|}
comment|/**    * @return the RequestHandler registered at the given name     */
DECL|method|get
specifier|public
name|SolrRequestHandler
name|get
parameter_list|(
name|String
name|handlerName
parameter_list|)
block|{
return|return
name|handlers
operator|.
name|get
argument_list|(
name|normalize
argument_list|(
name|handlerName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @return a Map of all registered handlers of the specified type.    */
DECL|method|getAll
specifier|public
parameter_list|<
name|T
extends|extends
name|SolrRequestHandler
parameter_list|>
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|getAll
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|7
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SolrRequestHandler
argument_list|>
name|e
range|:
name|handlers
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
name|result
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|clazz
operator|.
name|cast
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Handlers must be initialized before calling this function.  As soon as this is    * called, the handler can immediately accept requests.    *     * This call is thread safe.    *     * @return the previous handler at the given path or null    */
DECL|method|register
specifier|public
name|SolrRequestHandler
name|register
parameter_list|(
name|String
name|handlerName
parameter_list|,
name|SolrRequestHandler
name|handler
parameter_list|)
block|{
name|String
name|norm
init|=
name|normalize
argument_list|(
name|handlerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
return|return
name|handlers
operator|.
name|remove
argument_list|(
name|norm
argument_list|)
return|;
block|}
name|SolrRequestHandler
name|old
init|=
name|handlers
operator|.
name|put
argument_list|(
name|norm
argument_list|,
name|handler
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|!=
name|norm
operator|.
name|length
argument_list|()
operator|&&
name|handler
operator|instanceof
name|SolrInfoMBean
condition|)
block|{
name|core
operator|.
name|getInfoRegistry
argument_list|()
operator|.
name|put
argument_list|(
name|handlerName
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
return|return
name|old
return|;
block|}
comment|/**    * Returns an unmodifiable Map containing the registered handlers    */
DECL|method|getRequestHandlers
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SolrRequestHandler
argument_list|>
name|getRequestHandlers
parameter_list|()
block|{
return|return
name|immutableHandlers
return|;
block|}
comment|/**    * Read solrconfig.xml and register the appropriate handlers    *     * This function should<b>only</b> be called from the SolrCore constructor.  It is    * not intended as a public API.    *     * While the normal runtime registration contract is that handlers MUST be initialized    * before they are registered, this function does not do that exactly.    *    * This function registers all handlers first and then calls init() for each one.    *    * This is OK because this function is only called at startup and there is no chance that    * a handler could be asked to handle a request before it is initialized.    *     * The advantage to this approach is that handlers can know what path they are registered    * to and what other handlers are available at startup.    *     * Handlers will be registered and initialized in the order they appear in solrconfig.xml    */
DECL|method|initHandlersFromConfig
name|void
name|initHandlersFromConfig
parameter_list|(
name|SolrConfig
name|config
parameter_list|)
block|{
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|implicits
init|=
name|PluginsRegistry
operator|.
name|getHandlers
argument_list|(
name|core
argument_list|)
decl_stmt|;
comment|// use link map so we iterate in the same order
name|Map
argument_list|<
name|PluginInfo
argument_list|,
name|SolrRequestHandler
argument_list|>
name|handlers
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PluginInfo
argument_list|>
name|infoMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|//deduping implicit and explicit requesthandlers
for|for
control|(
name|PluginInfo
name|info
range|:
name|implicits
control|)
name|infoMap
operator|.
name|put
argument_list|(
name|info
operator|.
name|name
argument_list|,
name|info
argument_list|)
expr_stmt|;
for|for
control|(
name|PluginInfo
name|info
range|:
name|config
operator|.
name|getPluginInfos
argument_list|(
name|SolrRequestHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
control|)
name|infoMap
operator|.
name|put
argument_list|(
name|info
operator|.
name|name
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|PluginInfo
argument_list|>
name|infos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|infoMap
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PluginInfo
name|info
range|:
name|infos
control|)
block|{
try|try
block|{
name|SolrRequestHandler
name|requestHandler
decl_stmt|;
name|String
name|startup
init|=
name|info
operator|.
name|attributes
operator|.
name|get
argument_list|(
literal|"startup"
argument_list|)
decl_stmt|;
name|String
name|lib
init|=
name|info
operator|.
name|attributes
operator|.
name|get
argument_list|(
literal|"lib"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lib
operator|!=
literal|null
condition|)
block|{
name|requestHandler
operator|=
operator|new
name|DynamicLazyRequestHandlerWrapper
argument_list|(
name|core
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|startup
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"lazy"
operator|.
name|equals
argument_list|(
name|startup
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"adding lazy requestHandler: "
operator|+
name|info
operator|.
name|className
argument_list|)
expr_stmt|;
name|requestHandler
operator|=
operator|new
name|LazyRequestHandlerWrapper
argument_list|(
name|core
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unknown startup value: '"
operator|+
name|startup
operator|+
literal|"' for: "
operator|+
name|info
operator|.
name|className
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|requestHandler
operator|=
name|core
operator|.
name|createRequestHandler
argument_list|(
name|info
operator|.
name|className
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|requestHandler
operator|instanceof
name|RequestHandlerBase
condition|)
operator|(
operator|(
name|RequestHandlerBase
operator|)
name|requestHandler
operator|)
operator|.
name|setPluginInfo
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|handlers
operator|.
name|put
argument_list|(
name|info
argument_list|,
name|requestHandler
argument_list|)
expr_stmt|;
name|SolrRequestHandler
name|old
init|=
name|register
argument_list|(
name|info
operator|.
name|name
argument_list|,
name|requestHandler
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Multiple requestHandler registered to the same name: "
operator|+
name|info
operator|.
name|name
operator|+
literal|" ignoring: "
operator|+
name|old
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|isDefault
argument_list|()
condition|)
block|{
name|old
operator|=
name|register
argument_list|(
literal|""
argument_list|,
name|requestHandler
argument_list|)
expr_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
name|log
operator|.
name|warn
argument_list|(
literal|"Multiple default requestHandler registered"
operator|+
literal|" ignoring: "
operator|+
name|old
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"created "
operator|+
name|info
operator|.
name|name
operator|+
literal|": "
operator|+
name|info
operator|.
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"RequestHandler init failure"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|// we've now registered all handlers, time to init them in the same order
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|PluginInfo
argument_list|,
name|SolrRequestHandler
argument_list|>
name|entry
range|:
name|handlers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|PluginInfo
name|info
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|SolrRequestHandler
name|requestHandler
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|info
operator|=
name|applyInitParams
argument_list|(
name|config
argument_list|,
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|requestHandler
operator|instanceof
name|PluginInfoInitialized
condition|)
block|{
operator|(
operator|(
name|PluginInfoInitialized
operator|)
name|requestHandler
operator|)
operator|.
name|init
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|requestHandler
operator|.
name|init
argument_list|(
name|info
operator|.
name|initArgs
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|get
argument_list|(
literal|""
argument_list|)
operator|==
literal|null
condition|)
name|register
argument_list|(
literal|""
argument_list|,
name|get
argument_list|(
literal|"/select"
argument_list|)
argument_list|)
expr_stmt|;
comment|//defacto default handler
if|if
condition|(
name|get
argument_list|(
literal|""
argument_list|)
operator|==
literal|null
condition|)
name|register
argument_list|(
literal|""
argument_list|,
name|get
argument_list|(
literal|"standard"
argument_list|)
argument_list|)
expr_stmt|;
comment|//old default handler name; TODO remove?
if|if
condition|(
name|get
argument_list|(
literal|""
argument_list|)
operator|==
literal|null
condition|)
name|log
operator|.
name|warn
argument_list|(
literal|"no default request handler is registered (either '/select' or 'standard')"
argument_list|)
expr_stmt|;
block|}
DECL|method|applyInitParams
specifier|private
name|PluginInfo
name|applyInitParams
parameter_list|(
name|SolrConfig
name|config
parameter_list|,
name|PluginInfo
name|info
parameter_list|)
block|{
name|List
argument_list|<
name|InitParams
argument_list|>
name|ags
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|p
init|=
name|info
operator|.
name|attributes
operator|.
name|get
argument_list|(
name|InitParams
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|arg
range|:
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|p
argument_list|,
literal|','
argument_list|)
control|)
block|{
if|if
condition|(
name|config
operator|.
name|getInitParams
argument_list|()
operator|.
name|containsKey
argument_list|(
name|arg
argument_list|)
condition|)
name|ags
operator|.
name|add
argument_list|(
name|config
operator|.
name|getInitParams
argument_list|()
operator|.
name|get
argument_list|(
name|arg
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|log
operator|.
name|warn
argument_list|(
literal|"INVALID paramSet {} in requestHandler {}"
argument_list|,
name|arg
argument_list|,
name|info
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|InitParams
name|args
range|:
name|config
operator|.
name|getInitParams
argument_list|()
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
name|args
operator|.
name|matchPath
argument_list|(
name|info
operator|.
name|name
argument_list|)
condition|)
name|ags
operator|.
name|add
argument_list|(
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|info
operator|=
name|info
operator|.
name|copy
argument_list|()
expr_stmt|;
for|for
control|(
name|InitParams
name|initParam
range|:
name|ags
control|)
block|{
name|initParam
operator|.
name|apply
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|info
return|;
block|}
comment|/**    * The<code>LazyRequestHandlerWrapper</code> wraps any {@link SolrRequestHandler}.      * Rather then instantiate and initialize the handler on startup, this wrapper waits    * until it is actually called.  This should only be used for handlers that are    * unlikely to be used in the normal lifecycle.    *     * You can enable lazy loading in solrconfig.xml using:    *     *<pre>    *&lt;requestHandler name="..." class="..." startup="lazy"&gt;    *    ...    *&lt;/requestHandler&gt;    *</pre>    *     * This is a private class - if there is a real need for it to be public, it could    * move    *     * @since solr 1.2    */
DECL|class|LazyRequestHandlerWrapper
specifier|public
specifier|static
class|class
name|LazyRequestHandlerWrapper
implements|implements
name|SolrRequestHandler
implements|,
name|AutoCloseable
implements|,
name|PluginInfoInitialized
block|{
DECL|field|core
specifier|private
specifier|final
name|SolrCore
name|core
decl_stmt|;
DECL|field|_className
name|String
name|_className
decl_stmt|;
DECL|field|_handler
name|SolrRequestHandler
name|_handler
decl_stmt|;
DECL|field|_pluginInfo
name|PluginInfo
name|_pluginInfo
decl_stmt|;
DECL|method|LazyRequestHandlerWrapper
specifier|public
name|LazyRequestHandlerWrapper
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|this
operator|.
name|core
operator|=
name|core
expr_stmt|;
name|_handler
operator|=
literal|null
expr_stmt|;
comment|// don't initialize
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{ }
comment|/**      * Wait for the first request before initializing the wrapped handler       */
annotation|@
name|Override
DECL|method|handleRequest
specifier|public
name|void
name|handleRequest
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
name|SolrRequestHandler
name|handler
init|=
name|_handler
decl_stmt|;
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
name|handler
operator|=
name|getWrappedHandler
argument_list|()
expr_stmt|;
block|}
name|handler
operator|.
name|handleRequest
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
DECL|method|getWrappedHandler
specifier|public
specifier|synchronized
name|SolrRequestHandler
name|getWrappedHandler
parameter_list|()
block|{
if|if
condition|(
name|_handler
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|SolrRequestHandler
name|handler
init|=
name|createRequestHandler
argument_list|()
decl_stmt|;
if|if
condition|(
name|handler
operator|instanceof
name|PluginInfoInitialized
condition|)
block|{
operator|(
operator|(
name|PluginInfoInitialized
operator|)
name|handler
operator|)
operator|.
name|init
argument_list|(
name|_pluginInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handler
operator|.
name|init
argument_list|(
name|_pluginInfo
operator|.
name|initArgs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|handler
operator|instanceof
name|PluginInfoInitialized
condition|)
block|{
operator|(
operator|(
name|PluginInfoInitialized
operator|)
name|handler
operator|)
operator|.
name|init
argument_list|(
name|_pluginInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handler
operator|.
name|init
argument_list|(
name|_pluginInfo
operator|.
name|initArgs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|handler
operator|instanceof
name|SolrCoreAware
condition|)
block|{
operator|(
operator|(
name|SolrCoreAware
operator|)
name|handler
operator|)
operator|.
name|inform
argument_list|(
name|core
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|handler
operator|instanceof
name|RequestHandlerBase
condition|)
operator|(
operator|(
name|RequestHandlerBase
operator|)
name|handler
operator|)
operator|.
name|setPluginInfo
argument_list|(
name|_pluginInfo
argument_list|)
expr_stmt|;
name|_handler
operator|=
name|handler
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"lazy loading error"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
return|return
name|_handler
return|;
block|}
DECL|method|createRequestHandler
specifier|protected
name|SolrRequestHandler
name|createRequestHandler
parameter_list|()
block|{
return|return
name|core
operator|.
name|createRequestHandler
argument_list|(
name|_className
argument_list|)
return|;
block|}
DECL|method|getHandlerClass
specifier|public
name|String
name|getHandlerClass
parameter_list|()
block|{
return|return
name|_className
return|;
block|}
comment|//////////////////////// SolrInfoMBeans methods //////////////////////
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Lazy["
operator|+
name|_className
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
if|if
condition|(
name|_handler
operator|==
literal|null
condition|)
block|{
return|return
name|getName
argument_list|()
return|;
block|}
return|return
name|_handler
operator|.
name|getDescription
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getVersion
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
if|if
condition|(
name|_handler
operator|!=
literal|null
condition|)
block|{
return|return
name|_handler
operator|.
name|getVersion
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getDocs
specifier|public
name|URL
index|[]
name|getDocs
parameter_list|()
block|{
if|if
condition|(
name|_handler
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|_handler
operator|.
name|getDocs
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getCategory
specifier|public
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|Category
operator|.
name|QUERYHANDLER
return|;
block|}
annotation|@
name|Override
DECL|method|getStatistics
specifier|public
name|NamedList
name|getStatistics
parameter_list|()
block|{
if|if
condition|(
name|_handler
operator|!=
literal|null
condition|)
block|{
return|return
name|_handler
operator|.
name|getStatistics
argument_list|()
return|;
block|}
name|NamedList
argument_list|<
name|String
argument_list|>
name|lst
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"note"
argument_list|,
literal|"not initialized yet"
argument_list|)
expr_stmt|;
return|return
name|lst
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|_handler
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|_handler
operator|instanceof
name|AutoCloseable
operator|&&
operator|!
operator|(
name|_handler
operator|instanceof
name|DynamicLazyRequestHandlerWrapper
operator|)
condition|)
block|{
operator|(
operator|(
name|AutoCloseable
operator|)
name|_handler
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|PluginInfo
name|info
parameter_list|)
block|{
name|_pluginInfo
operator|=
name|info
expr_stmt|;
name|_className
operator|=
name|info
operator|.
name|className
expr_stmt|;
block|}
block|}
DECL|class|DynamicLazyRequestHandlerWrapper
specifier|public
specifier|static
class|class
name|DynamicLazyRequestHandlerWrapper
extends|extends
name|LazyRequestHandlerWrapper
block|{
DECL|field|lib
specifier|private
name|String
name|lib
decl_stmt|;
DECL|field|key
specifier|private
name|String
name|key
decl_stmt|;
DECL|field|version
specifier|private
name|String
name|version
decl_stmt|;
DECL|field|coreContainer
specifier|private
name|CoreContainer
name|coreContainer
decl_stmt|;
DECL|field|solrResourceLoader
specifier|private
name|SolrResourceLoader
name|solrResourceLoader
decl_stmt|;
DECL|field|classLoader
specifier|private
name|MemClassLoader
name|classLoader
decl_stmt|;
DECL|field|_closed
specifier|private
name|boolean
name|_closed
init|=
literal|false
decl_stmt|;
DECL|field|unrecoverable
name|boolean
name|unrecoverable
init|=
literal|false
decl_stmt|;
DECL|field|errMsg
name|String
name|errMsg
init|=
literal|null
decl_stmt|;
DECL|field|exception
specifier|private
name|Exception
name|exception
decl_stmt|;
DECL|method|DynamicLazyRequestHandlerWrapper
specifier|public
name|DynamicLazyRequestHandlerWrapper
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|super
argument_list|(
name|core
argument_list|)
expr_stmt|;
name|this
operator|.
name|coreContainer
operator|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
expr_stmt|;
name|this
operator|.
name|solrResourceLoader
operator|=
name|core
operator|.
name|getResourceLoader
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|PluginInfo
name|info
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|this
operator|.
name|lib
operator|=
name|_pluginInfo
operator|.
name|attributes
operator|.
name|get
argument_list|(
literal|"lib"
argument_list|)
expr_stmt|;
if|if
condition|(
name|disableExternalLib
condition|)
block|{
name|errMsg
operator|=
literal|"ERROR external library loading is disabled"
expr_stmt|;
name|unrecoverable
operator|=
literal|true
expr_stmt|;
name|_handler
operator|=
name|this
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|_pluginInfo
operator|.
name|attributes
operator|.
name|get
argument_list|(
literal|"version"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|errMsg
operator|=
literal|"ERROR 'lib' attribute must be accompanied with version also"
expr_stmt|;
name|unrecoverable
operator|=
literal|true
expr_stmt|;
name|_handler
operator|=
name|this
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
return|return;
block|}
name|version
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|_pluginInfo
operator|.
name|attributes
operator|.
name|get
argument_list|(
literal|"version"
argument_list|)
argument_list|)
expr_stmt|;
name|classLoader
operator|=
operator|new
name|MemClassLoader
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleRequest
specifier|public
name|void
name|handleRequest
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
if|if
condition|(
name|unrecoverable
condition|)
block|{
name|rsp
operator|.
name|add
argument_list|(
literal|"error"
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
name|rsp
operator|.
name|setException
argument_list|(
name|exception
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|classLoader
operator|.
name|checkJarAvailable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|rsp
operator|.
name|add
argument_list|(
literal|"error"
argument_list|,
literal|"Jar could not be loaded"
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|unrecoverable
operator|=
literal|true
expr_stmt|;
name|errMsg
operator|=
literal|"Could not load jar"
expr_stmt|;
name|exception
operator|=
name|e
expr_stmt|;
name|handleRequest
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
return|return;
block|}
name|super
operator|.
name|handleRequest
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRequestHandler
specifier|protected
name|SolrRequestHandler
name|createRequestHandler
parameter_list|()
block|{
try|try
block|{
name|Class
name|clazz
init|=
name|classLoader
operator|.
name|findClass
argument_list|(
name|_className
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
argument_list|>
index|[]
name|cons
init|=
name|clazz
operator|.
name|getConstructors
argument_list|()
decl_stmt|;
for|for
control|(
name|Constructor
argument_list|<
name|?
argument_list|>
name|con
range|:
name|cons
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|types
init|=
name|con
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|types
operator|.
name|length
operator|==
literal|1
operator|&&
name|types
index|[
literal|0
index|]
operator|==
name|SolrCore
operator|.
name|class
condition|)
block|{
return|return
name|SolrRequestHandler
operator|.
name|class
operator|.
name|cast
argument_list|(
name|con
operator|.
name|newInstance
argument_list|(
name|this
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
operator|(
name|SolrRequestHandler
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|unrecoverable
operator|=
literal|true
expr_stmt|;
name|errMsg
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"class {0} could not be loaded "
argument_list|,
name|_className
argument_list|)
expr_stmt|;
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|_closed
condition|)
return|return;
if|if
condition|(
name|classLoader
operator|!=
literal|null
condition|)
name|classLoader
operator|.
name|releaseJar
argument_list|()
expr_stmt|;
name|_closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|class|MemClassLoader
specifier|public
specifier|static
class|class
name|MemClassLoader
extends|extends
name|ClassLoader
block|{
DECL|field|jarContent
specifier|private
name|JarRepository
operator|.
name|JarContentRef
name|jarContent
decl_stmt|;
DECL|field|handlerWrapper
specifier|private
specifier|final
name|DynamicLazyRequestHandlerWrapper
name|handlerWrapper
decl_stmt|;
DECL|method|MemClassLoader
specifier|public
name|MemClassLoader
parameter_list|(
name|DynamicLazyRequestHandlerWrapper
name|handlerWrapper
parameter_list|)
block|{
name|super
argument_list|(
name|handlerWrapper
operator|.
name|solrResourceLoader
operator|.
name|classLoader
argument_list|)
expr_stmt|;
name|this
operator|.
name|handlerWrapper
operator|=
name|handlerWrapper
expr_stmt|;
block|}
DECL|method|checkJarAvailable
name|boolean
name|checkJarAvailable
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|jarContent
operator|!=
literal|null
condition|)
return|return
literal|true
return|;
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|jarContent
operator|=
name|handlerWrapper
operator|.
name|coreContainer
operator|.
name|getJarRepository
argument_list|()
operator|.
name|getJarIncRef
argument_list|(
name|handlerWrapper
operator|.
name|lib
operator|+
literal|"/"
operator|+
name|handlerWrapper
operator|.
name|version
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SolrException
name|se
parameter_list|)
block|{
throw|throw
name|se
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|findClass
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|findClass
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
try|try
block|{
return|return
name|super
operator|.
name|findClass
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|String
name|path
init|=
name|name
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|concat
argument_list|(
literal|".class"
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buf
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|jarContent
operator|==
literal|null
condition|)
name|checkJarAvailable
argument_list|()
expr_stmt|;
name|buf
operator|=
name|jarContent
operator|.
name|jar
operator|.
name|getFileContent
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|buf
operator|==
literal|null
condition|)
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
literal|"class not found in loaded jar"
operator|+
name|name
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
literal|"class not found "
operator|+
name|name
argument_list|,
name|e1
argument_list|)
throw|;
block|}
name|ProtectionDomain
name|defaultDomain
init|=
literal|null
decl_stmt|;
comment|//using the default protection domain, with no permissions
try|try
block|{
name|defaultDomain
operator|=
operator|new
name|ProtectionDomain
argument_list|(
operator|new
name|CodeSource
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://localhost/.system/blob/"
operator|+
name|handlerWrapper
operator|.
name|lib
argument_list|)
argument_list|,
operator|(
name|Certificate
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e1
parameter_list|)
block|{
comment|//should not happen
block|}
return|return
name|defineClass
argument_list|(
name|name
argument_list|,
name|buf
operator|.
name|array
argument_list|()
argument_list|,
name|buf
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|buf
operator|.
name|limit
argument_list|()
argument_list|,
name|defaultDomain
argument_list|)
return|;
block|}
block|}
DECL|method|releaseJar
specifier|private
name|void
name|releaseJar
parameter_list|()
block|{
name|handlerWrapper
operator|.
name|coreContainer
operator|.
name|getJarRepository
argument_list|()
operator|.
name|decrementJarRefCount
argument_list|(
name|jarContent
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SolrRequestHandler
argument_list|>
name|e
range|:
name|handlers
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|instanceof
name|AutoCloseable
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|AutoCloseable
operator|)
name|e
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exp
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error closing requestHandler "
operator|+
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
