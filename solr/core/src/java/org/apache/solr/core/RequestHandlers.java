begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  */
end_comment
begin_class
DECL|class|RequestHandlers
specifier|public
specifier|final
class|class
name|RequestHandlers
block|{
DECL|field|log
specifier|public
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RequestHandlers
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|core
specifier|protected
specifier|final
name|SolrCore
name|core
decl_stmt|;
DECL|field|handlers
specifier|final
name|PluginBag
argument_list|<
name|SolrRequestHandler
argument_list|>
name|handlers
decl_stmt|;
comment|/**    * Trim the trailing '/' if it's there, and convert null to empty string.    *     * we want:    *  /update/csv   and    *  /update/csv/    * to map to the same handler     *     */
DECL|method|normalize
specifier|public
specifier|static
name|String
name|normalize
parameter_list|(
name|String
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|p
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|&&
name|p
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
return|return
name|p
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
return|return
name|p
return|;
block|}
DECL|method|RequestHandlers
specifier|public
name|RequestHandlers
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|this
operator|.
name|core
operator|=
name|core
expr_stmt|;
name|handlers
operator|=
operator|new
name|PluginBag
argument_list|<>
argument_list|(
name|SolrRequestHandler
operator|.
name|class
argument_list|,
name|core
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the RequestHandler registered at the given name     */
DECL|method|get
specifier|public
name|SolrRequestHandler
name|get
parameter_list|(
name|String
name|handlerName
parameter_list|)
block|{
return|return
name|handlers
operator|.
name|get
argument_list|(
name|normalize
argument_list|(
name|handlerName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Handlers must be initialized before calling this function.  As soon as this is    * called, the handler can immediately accept requests.    *     * This call is thread safe.    *     * @return the previous handler at the given path or null    */
DECL|method|register
specifier|public
name|SolrRequestHandler
name|register
parameter_list|(
name|String
name|handlerName
parameter_list|,
name|SolrRequestHandler
name|handler
parameter_list|)
block|{
name|String
name|norm
init|=
name|normalize
argument_list|(
name|handlerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
return|return
name|handlers
operator|.
name|remove
argument_list|(
name|norm
argument_list|)
return|;
block|}
return|return
name|handlers
operator|.
name|put
argument_list|(
name|norm
argument_list|,
name|handler
argument_list|)
return|;
comment|//    return register(handlerName, new PluginRegistry.PluginHolder<>(null, handler));
block|}
comment|/**    * Returns an unmodifiable Map containing the registered handlers    */
DECL|method|getRequestHandlers
specifier|public
name|PluginBag
argument_list|<
name|SolrRequestHandler
argument_list|>
name|getRequestHandlers
parameter_list|()
block|{
return|return
name|handlers
return|;
block|}
comment|/**    * Read solrconfig.xml and register the appropriate handlers    *     * This function should<b>only</b> be called from the SolrCore constructor.  It is    * not intended as a public API.    *     * While the normal runtime registration contract is that handlers MUST be initialized    * before they are registered, this function does not do that exactly.    *    * This function registers all handlers first and then calls init() for each one.    *    * This is OK because this function is only called at startup and there is no chance that    * a handler could be asked to handle a request before it is initialized.    *     * The advantage to this approach is that handlers can know what path they are registered    * to and what other handlers are available at startup.    *     * Handlers will be registered and initialized in the order they appear in solrconfig.xml    */
DECL|method|initHandlersFromConfig
name|void
name|initHandlersFromConfig
parameter_list|(
name|SolrConfig
name|config
parameter_list|)
block|{
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|implicits
init|=
name|ImplicitPlugins
operator|.
name|getHandlers
argument_list|(
name|core
argument_list|)
decl_stmt|;
comment|// use link map so we iterate in the same order
name|Map
argument_list|<
name|String
argument_list|,
name|PluginInfo
argument_list|>
name|infoMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|//deduping implicit and explicit requesthandlers
for|for
control|(
name|PluginInfo
name|info
range|:
name|implicits
control|)
name|infoMap
operator|.
name|put
argument_list|(
name|info
operator|.
name|name
argument_list|,
name|info
argument_list|)
expr_stmt|;
for|for
control|(
name|PluginInfo
name|info
range|:
name|config
operator|.
name|getPluginInfos
argument_list|(
name|SolrRequestHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
control|)
name|infoMap
operator|.
name|put
argument_list|(
name|info
operator|.
name|name
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|PluginInfo
argument_list|>
name|infos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|infoMap
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|modifiedInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PluginInfo
name|info
range|:
name|infos
control|)
block|{
name|modifiedInfos
operator|.
name|add
argument_list|(
name|applyInitParams
argument_list|(
name|config
argument_list|,
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|handlers
operator|.
name|init
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|core
argument_list|,
name|modifiedInfos
argument_list|)
expr_stmt|;
name|handlers
operator|.
name|alias
argument_list|(
name|handlers
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Registered paths: {}"
argument_list|,
name|StrUtils
operator|.
name|join
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|handlers
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
literal|','
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|handlers
operator|.
name|alias
argument_list|(
literal|"/select"
argument_list|,
literal|""
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|handlers
operator|.
name|alias
argument_list|(
literal|"standard"
argument_list|,
literal|""
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"no default request handler is registered (either '/select' or 'standard')"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|applyInitParams
specifier|private
name|PluginInfo
name|applyInitParams
parameter_list|(
name|SolrConfig
name|config
parameter_list|,
name|PluginInfo
name|info
parameter_list|)
block|{
name|List
argument_list|<
name|InitParams
argument_list|>
name|ags
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|p
init|=
name|info
operator|.
name|attributes
operator|.
name|get
argument_list|(
name|InitParams
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|arg
range|:
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|p
argument_list|,
literal|','
argument_list|)
control|)
block|{
if|if
condition|(
name|config
operator|.
name|getInitParams
argument_list|()
operator|.
name|containsKey
argument_list|(
name|arg
argument_list|)
condition|)
name|ags
operator|.
name|add
argument_list|(
name|config
operator|.
name|getInitParams
argument_list|()
operator|.
name|get
argument_list|(
name|arg
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|log
operator|.
name|warn
argument_list|(
literal|"INVALID paramSet {} in requestHandler {}"
argument_list|,
name|arg
argument_list|,
name|info
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|InitParams
name|args
range|:
name|config
operator|.
name|getInitParams
argument_list|()
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
name|args
operator|.
name|matchPath
argument_list|(
name|info
operator|.
name|name
argument_list|)
condition|)
name|ags
operator|.
name|add
argument_list|(
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|info
operator|=
name|info
operator|.
name|copy
argument_list|()
expr_stmt|;
for|for
control|(
name|InitParams
name|initParam
range|:
name|ags
control|)
block|{
name|initParam
operator|.
name|apply
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|info
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|handlers
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
