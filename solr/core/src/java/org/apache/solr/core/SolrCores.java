begin_unit
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|CloudDescriptor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrXMLSerializer
operator|.
name|SolrCoreXMLDef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DOMUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import
begin_class
DECL|class|SolrCores
class|class
name|SolrCores
block|{
DECL|field|SOLR_XML_SERIALIZER
specifier|private
specifier|static
name|SolrXMLSerializer
name|SOLR_XML_SERIALIZER
init|=
operator|new
name|SolrXMLSerializer
argument_list|()
decl_stmt|;
DECL|field|modifyLock
specifier|private
specifier|static
name|Object
name|modifyLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|// for locking around manipulating any of the core maps.
DECL|field|cores
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SolrCore
argument_list|>
name|cores
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|SolrCore
argument_list|>
argument_list|()
decl_stmt|;
comment|// For "permanent" cores
comment|//WARNING! The _only_ place you put anything into the list of transient cores is with the putTransientCore method!
DECL|field|transientCores
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|SolrCore
argument_list|>
name|transientCores
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|SolrCore
argument_list|>
argument_list|()
decl_stmt|;
comment|// For "lazily loaded" cores
DECL|field|dynamicDescriptors
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CoreDescriptor
argument_list|>
name|dynamicDescriptors
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|CoreDescriptor
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|createdCores
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SolrCore
argument_list|>
name|createdCores
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|SolrCore
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|coreToOrigName
specifier|private
name|Map
argument_list|<
name|SolrCore
argument_list|,
name|String
argument_list|>
name|coreToOrigName
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|SolrCore
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|container
specifier|private
specifier|final
name|CoreContainer
name|container
decl_stmt|;
comment|// This map will hold objects that are being currently operated on. The core (value) may be null in the case of
comment|// initial load. The rule is, never to any operation on a core that is currently being operated upon.
DECL|field|pendingCoreOps
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|pendingCoreOps
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Due to the fact that closes happen potentially whenever anything is _added_ to the transient core list, we need
comment|// to essentially queue them up to be handled via pendingCoreOps.
DECL|field|pendingCloses
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|SolrCore
argument_list|>
name|pendingCloses
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrCore
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|SolrCores
name|SolrCores
parameter_list|(
name|CoreContainer
name|container
parameter_list|)
block|{
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
block|}
comment|// Trivial helper method for load, note it implements LRU on transient cores. Also note, if
comment|// there is no setting for max size, nothing is done and all cores go in the regular "cores" list
DECL|method|allocateLazyCores
specifier|protected
name|void
name|allocateLazyCores
parameter_list|(
specifier|final
name|ConfigSolr
name|cfg
parameter_list|,
specifier|final
name|SolrResourceLoader
name|loader
parameter_list|)
block|{
specifier|final
name|int
name|transientCacheSize
init|=
name|cfg
operator|.
name|getInt
argument_list|(
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_TRANSIENTCACHESIZE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
if|if
condition|(
name|transientCacheSize
operator|!=
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|CoreContainer
operator|.
name|log
operator|.
name|info
argument_list|(
literal|"Allocating transient cache for {} transient cores"
argument_list|,
name|transientCacheSize
argument_list|)
expr_stmt|;
name|transientCores
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|SolrCore
argument_list|>
argument_list|(
name|transientCacheSize
argument_list|,
literal|0.75f
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SolrCore
argument_list|>
name|eldest
parameter_list|)
block|{
if|if
condition|(
name|size
argument_list|()
operator|>
name|transientCacheSize
condition|)
block|{
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
name|pendingCloses
operator|.
name|add
argument_list|(
name|eldest
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Essentially just queue this core up for closing.
name|modifyLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
comment|// Wakes up closer thread too
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
expr_stmt|;
block|}
block|}
DECL|method|putDynamicDescriptor
specifier|protected
name|void
name|putDynamicDescriptor
parameter_list|(
name|String
name|rawName
parameter_list|,
name|CoreDescriptor
name|p
parameter_list|)
block|{
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
name|dynamicDescriptors
operator|.
name|put
argument_list|(
name|rawName
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We are shutting down. You can't hold the lock on the various lists of cores while they shut down, so we need to
comment|// make a temporary copy of the names and shut them down outside the lock.
DECL|method|close
specifier|protected
name|void
name|close
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|coreNames
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|transientNames
decl_stmt|;
name|List
argument_list|<
name|SolrCore
argument_list|>
name|pendingToClose
decl_stmt|;
comment|// It might be possible for one of the cores to move from one list to another while we're closing them. So
comment|// loop through the lists until they're all empty. In particular, the core could have moved from the transient
comment|// list to the pendingCloses list.
while|while
condition|(
literal|true
condition|)
block|{
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
name|coreNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|cores
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|transientNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|transientCores
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|pendingToClose
operator|=
operator|new
name|ArrayList
argument_list|<
name|SolrCore
argument_list|>
argument_list|(
name|pendingCloses
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|coreNames
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|transientNames
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|pendingToClose
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
break|break;
for|for
control|(
name|String
name|coreName
range|:
name|coreNames
control|)
block|{
name|SolrCore
name|core
init|=
name|cores
operator|.
name|get
argument_list|(
name|coreName
argument_list|)
decl_stmt|;
if|if
condition|(
name|core
operator|==
literal|null
condition|)
block|{
name|CoreContainer
operator|.
name|log
operator|.
name|info
argument_list|(
literal|"Core "
operator|+
name|coreName
operator|+
literal|" moved from core container list before closing."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|CoreContainer
operator|.
name|log
argument_list|,
literal|"Error shutting down core"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
name|cores
operator|.
name|remove
argument_list|(
name|coreName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|String
name|coreName
range|:
name|transientNames
control|)
block|{
name|SolrCore
name|core
init|=
name|transientCores
operator|.
name|get
argument_list|(
name|coreName
argument_list|)
decl_stmt|;
if|if
condition|(
name|core
operator|==
literal|null
condition|)
block|{
name|CoreContainer
operator|.
name|log
operator|.
name|info
argument_list|(
literal|"Core "
operator|+
name|coreName
operator|+
literal|" moved from transient core container list before closing."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|CoreContainer
operator|.
name|log
argument_list|,
literal|"Error shutting down core"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
name|transientCores
operator|.
name|remove
argument_list|(
name|coreName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// We might have some cores that we were _thinking_ about shutting down, so take care of those too.
for|for
control|(
name|SolrCore
name|core
range|:
name|pendingToClose
control|)
block|{
try|try
block|{
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|CoreContainer
operator|.
name|log
argument_list|,
literal|"Error shutting down core"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
name|pendingCloses
operator|.
name|remove
argument_list|(
name|core
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|//WARNING! This should be the _only_ place you put anything into the list of transient cores!
DECL|method|putTransientCore
specifier|protected
name|SolrCore
name|putTransientCore
parameter_list|(
name|ConfigSolr
name|cfg
parameter_list|,
name|String
name|name
parameter_list|,
name|SolrCore
name|core
parameter_list|,
name|SolrResourceLoader
name|loader
parameter_list|)
block|{
name|SolrCore
name|retCore
decl_stmt|;
name|CoreContainer
operator|.
name|log
operator|.
name|info
argument_list|(
literal|"Opening transient core {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
name|retCore
operator|=
name|transientCores
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|core
argument_list|)
expr_stmt|;
block|}
return|return
name|retCore
return|;
block|}
DECL|method|putCore
specifier|protected
name|SolrCore
name|putCore
parameter_list|(
name|String
name|name
parameter_list|,
name|SolrCore
name|core
parameter_list|)
block|{
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
return|return
name|cores
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|core
argument_list|)
return|;
block|}
block|}
DECL|method|getCores
name|List
argument_list|<
name|SolrCore
argument_list|>
name|getCores
parameter_list|()
block|{
name|List
argument_list|<
name|SolrCore
argument_list|>
name|lst
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrCore
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
name|lst
operator|.
name|addAll
argument_list|(
name|cores
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|lst
return|;
block|}
block|}
DECL|method|getCoreNames
name|Set
argument_list|<
name|String
argument_list|>
name|getCoreNames
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
name|set
operator|.
name|addAll
argument_list|(
name|cores
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|transientCores
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|set
return|;
block|}
DECL|method|getCoreNames
name|List
argument_list|<
name|String
argument_list|>
name|getCoreNames
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|lst
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SolrCore
argument_list|>
name|entry
range|:
name|cores
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|core
operator|==
name|entry
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|lst
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SolrCore
argument_list|>
name|entry
range|:
name|transientCores
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|core
operator|==
name|entry
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|lst
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|lst
return|;
block|}
comment|/**    * Gets a list of all cores, loaded and unloaded (dynamic)    *    * @return all cores names, whether loaded or unloaded.    */
DECL|method|getAllCoreNames
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getAllCoreNames
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
name|set
operator|.
name|addAll
argument_list|(
name|cores
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|transientCores
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|dynamicDescriptors
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|createdCores
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|set
return|;
block|}
DECL|method|getCore
name|SolrCore
name|getCore
parameter_list|(
name|String
name|name
parameter_list|)
block|{
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
return|return
name|cores
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
DECL|method|swap
specifier|protected
name|void
name|swap
parameter_list|(
name|String
name|n0
parameter_list|,
name|String
name|n1
parameter_list|)
block|{
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
name|SolrCore
name|c0
init|=
name|cores
operator|.
name|get
argument_list|(
name|n0
argument_list|)
decl_stmt|;
name|SolrCore
name|c1
init|=
name|cores
operator|.
name|get
argument_list|(
name|n1
argument_list|)
decl_stmt|;
if|if
condition|(
name|c0
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No such core: "
operator|+
name|n0
argument_list|)
throw|;
if|if
condition|(
name|c1
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No such core: "
operator|+
name|n1
argument_list|)
throw|;
name|cores
operator|.
name|put
argument_list|(
name|n0
argument_list|,
name|c1
argument_list|)
expr_stmt|;
name|cores
operator|.
name|put
argument_list|(
name|n1
argument_list|,
name|c0
argument_list|)
expr_stmt|;
name|c0
operator|.
name|setName
argument_list|(
name|n1
argument_list|)
expr_stmt|;
name|c0
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|putProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_NAME
argument_list|,
name|n1
argument_list|)
expr_stmt|;
name|c1
operator|.
name|setName
argument_list|(
name|n0
argument_list|)
expr_stmt|;
name|c1
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|putProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_NAME
argument_list|,
name|n0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|remove
specifier|protected
name|SolrCore
name|remove
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|removeOrig
parameter_list|)
block|{
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
name|SolrCore
name|tmp
init|=
name|cores
operator|.
name|remove
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|SolrCore
name|ret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|removeOrig
operator|&&
name|tmp
operator|!=
literal|null
condition|)
block|{
name|coreToOrigName
operator|.
name|remove
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
name|ret
operator|=
operator|(
name|ret
operator|==
literal|null
operator|)
condition|?
name|tmp
else|:
name|ret
expr_stmt|;
comment|// It could have been a newly-created core. It could have been a transient core. The newly-created cores
comment|// in particular should be checked. It could have been a dynamic core.
name|tmp
operator|=
name|transientCores
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|ret
operator|=
operator|(
name|ret
operator|==
literal|null
operator|)
condition|?
name|tmp
else|:
name|ret
expr_stmt|;
name|tmp
operator|=
name|createdCores
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|ret
operator|=
operator|(
name|ret
operator|==
literal|null
operator|)
condition|?
name|tmp
else|:
name|ret
expr_stmt|;
name|dynamicDescriptors
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
DECL|method|putCoreToOrigName
specifier|protected
name|void
name|putCoreToOrigName
parameter_list|(
name|SolrCore
name|c
parameter_list|,
name|String
name|name
parameter_list|)
block|{
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
name|coreToOrigName
operator|.
name|put
argument_list|(
name|c
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeCoreToOrigName
specifier|protected
name|void
name|removeCoreToOrigName
parameter_list|(
name|SolrCore
name|newCore
parameter_list|,
name|SolrCore
name|core
parameter_list|)
block|{
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
name|String
name|origName
init|=
name|coreToOrigName
operator|.
name|remove
argument_list|(
name|core
argument_list|)
decl_stmt|;
if|if
condition|(
name|origName
operator|!=
literal|null
condition|)
block|{
name|coreToOrigName
operator|.
name|put
argument_list|(
name|newCore
argument_list|,
name|origName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getCoreFromAnyList
specifier|protected
name|SolrCore
name|getCoreFromAnyList
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|SolrCore
name|core
decl_stmt|;
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
name|core
operator|=
name|cores
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
return|return
name|core
return|;
block|}
if|if
condition|(
name|dynamicDescriptors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
comment|// Nobody even tried to define any transient cores, so we're done.
block|}
comment|// Now look for already loaded transient cores.
return|return
name|transientCores
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
DECL|method|getDynamicDescriptor
specifier|protected
name|CoreDescriptor
name|getDynamicDescriptor
parameter_list|(
name|String
name|name
parameter_list|)
block|{
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
return|return
name|dynamicDescriptors
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
DECL|method|isLoaded
specifier|protected
name|boolean
name|isLoaded
parameter_list|(
name|String
name|name
parameter_list|)
block|{
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
if|if
condition|(
name|cores
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|transientCores
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|getUnloadedCoreDescriptor
specifier|protected
name|CoreDescriptor
name|getUnloadedCoreDescriptor
parameter_list|(
name|String
name|cname
parameter_list|)
block|{
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
name|CoreDescriptor
name|desc
init|=
name|dynamicDescriptors
operator|.
name|get
argument_list|(
name|cname
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|CoreDescriptor
argument_list|(
name|desc
argument_list|)
return|;
block|}
block|}
DECL|method|getCoreToOrigName
specifier|protected
name|String
name|getCoreToOrigName
parameter_list|(
name|SolrCore
name|solrCore
parameter_list|)
block|{
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
return|return
name|coreToOrigName
operator|.
name|get
argument_list|(
name|solrCore
argument_list|)
return|;
block|}
block|}
DECL|method|persistCores
specifier|public
name|void
name|persistCores
parameter_list|(
name|Config
name|cfg
parameter_list|,
name|Properties
name|containerProperties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rootSolrAttribs
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|coresAttribs
parameter_list|,
name|File
name|file
parameter_list|,
name|File
name|configFile
parameter_list|,
name|SolrResourceLoader
name|loader
parameter_list|)
throws|throws
name|XPathExpressionException
block|{
name|List
argument_list|<
name|SolrXMLSerializer
operator|.
name|SolrCoreXMLDef
argument_list|>
name|solrCoreXMLDefs
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrXMLSerializer
operator|.
name|SolrCoreXMLDef
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
name|persistCores
argument_list|(
name|cfg
argument_list|,
name|cores
argument_list|,
name|loader
argument_list|,
name|solrCoreXMLDefs
argument_list|)
expr_stmt|;
name|persistCores
argument_list|(
name|cfg
argument_list|,
name|transientCores
argument_list|,
name|loader
argument_list|,
name|solrCoreXMLDefs
argument_list|)
expr_stmt|;
comment|// add back all the cores that aren't loaded, either in cores or transient
comment|// cores
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CoreDescriptor
argument_list|>
name|ent
range|:
name|dynamicDescriptors
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|cores
operator|.
name|containsKey
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
operator|!
name|transientCores
operator|.
name|containsKey
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|addCoreToPersistList
argument_list|(
name|cfg
argument_list|,
name|loader
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
argument_list|,
literal|null
argument_list|,
name|solrCoreXMLDefs
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SolrCore
argument_list|>
name|ent
range|:
name|createdCores
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|cores
operator|.
name|containsKey
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
operator|!
name|transientCores
operator|.
name|containsKey
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
operator|!
name|dynamicDescriptors
operator|.
name|containsKey
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|addCoreToPersistList
argument_list|(
name|cfg
argument_list|,
name|loader
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|,
literal|null
argument_list|,
name|solrCoreXMLDefs
argument_list|)
expr_stmt|;
block|}
block|}
name|SolrXMLSerializer
operator|.
name|SolrXMLDef
name|solrXMLDef
init|=
operator|new
name|SolrXMLSerializer
operator|.
name|SolrXMLDef
argument_list|()
decl_stmt|;
name|solrXMLDef
operator|.
name|coresDefs
operator|=
name|solrCoreXMLDefs
expr_stmt|;
name|solrXMLDef
operator|.
name|containerProperties
operator|=
name|containerProperties
expr_stmt|;
name|solrXMLDef
operator|.
name|solrAttribs
operator|=
name|rootSolrAttribs
expr_stmt|;
name|solrXMLDef
operator|.
name|coresAttribs
operator|=
name|coresAttribs
expr_stmt|;
name|SOLR_XML_SERIALIZER
operator|.
name|persistFile
argument_list|(
name|file
argument_list|,
name|solrXMLDef
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Wait here until any pending operations (load, unload or reload) are completed on this core.
DECL|method|waitAddPendingCoreOps
specifier|protected
name|SolrCore
name|waitAddPendingCoreOps
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// Keep multiple threads from operating on a core at one time.
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
name|boolean
name|pending
decl_stmt|;
do|do
block|{
comment|// Are we currently doing anything to this core? Loading, unloading, reloading?
name|pending
operator|=
name|pendingCoreOps
operator|.
name|contains
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// wait for the core to be done being operated upon
if|if
condition|(
operator|!
name|pending
condition|)
block|{
comment|// Linear list, but shouldn't be too long
for|for
control|(
name|SolrCore
name|core
range|:
name|pendingCloses
control|)
block|{
if|if
condition|(
name|core
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|pending
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|container
operator|.
name|isShutDown
argument_list|()
condition|)
return|return
literal|null
return|;
comment|// Just stop already.
if|if
condition|(
name|pending
condition|)
block|{
try|try
block|{
name|modifyLock
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
comment|// Seems best not to do anything at all if the thread is interrupted
block|}
block|}
block|}
do|while
condition|(
name|pending
condition|)
do|;
comment|// We _really_ need to do this within the synchronized block!
if|if
condition|(
operator|!
name|container
operator|.
name|isShutDown
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|pendingCoreOps
operator|.
name|add
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|CoreContainer
operator|.
name|log
operator|.
name|warn
argument_list|(
literal|"Replaced an entry in pendingCoreOps {}, we should not be doing this"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|getCoreFromAnyList
argument_list|(
name|name
argument_list|)
return|;
comment|// we might have been _unloading_ the core, so return the core if it was loaded.
block|}
block|}
return|return
literal|null
return|;
block|}
comment|// We should always be removing the first thing in the list with our name! The idea here is to NOT do anything n
comment|// any core while some other operation is working on that core.
DECL|method|removeFromPendingOps
specifier|protected
name|void
name|removeFromPendingOps
parameter_list|(
name|String
name|name
parameter_list|)
block|{
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
if|if
condition|(
operator|!
name|pendingCoreOps
operator|.
name|remove
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|CoreContainer
operator|.
name|log
operator|.
name|warn
argument_list|(
literal|"Tried to remove core {} from pendingCoreOps and it wasn't there. "
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|modifyLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|persistCores
specifier|protected
name|void
name|persistCores
parameter_list|(
name|Config
name|cfg
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SolrCore
argument_list|>
name|whichCores
parameter_list|,
name|SolrResourceLoader
name|loader
parameter_list|,
name|List
argument_list|<
name|SolrCoreXMLDef
argument_list|>
name|solrCoreXMLDefs
parameter_list|)
throws|throws
name|XPathExpressionException
block|{
for|for
control|(
name|SolrCore
name|solrCore
range|:
name|whichCores
operator|.
name|values
argument_list|()
control|)
block|{
name|addCoreToPersistList
argument_list|(
name|cfg
argument_list|,
name|loader
argument_list|,
name|solrCore
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|,
name|getCoreToOrigName
argument_list|(
name|solrCore
argument_list|)
argument_list|,
name|solrCoreXMLDefs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addCoreProperty
specifier|private
name|void
name|addCoreProperty
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|coreAttribs
parameter_list|,
name|SolrResourceLoader
name|loader
parameter_list|,
name|Node
name|node
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|coreAttribs
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|String
name|rawAttribValue
init|=
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|coreAttribs
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|rawAttribValue
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|rawAttribValue
operator|==
literal|null
operator|&&
name|defaultValue
operator|!=
literal|null
operator|&&
name|value
operator|.
name|equals
argument_list|(
name|defaultValue
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|rawAttribValue
operator|!=
literal|null
operator|&&
name|value
operator|.
name|equals
argument_list|(
name|DOMUtil
operator|.
name|substituteProperty
argument_list|(
name|rawAttribValue
argument_list|,
name|loader
operator|.
name|getCoreProperties
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|coreAttribs
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|rawAttribValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|coreAttribs
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addCoreToPersistList
specifier|protected
name|void
name|addCoreToPersistList
parameter_list|(
name|Config
name|cfg
parameter_list|,
name|SolrResourceLoader
name|loader
parameter_list|,
name|CoreDescriptor
name|dcore
parameter_list|,
name|String
name|origCoreName
parameter_list|,
name|List
argument_list|<
name|SolrCoreXMLDef
argument_list|>
name|solrCoreXMLDefs
parameter_list|)
throws|throws
name|XPathExpressionException
block|{
name|String
name|coreName
init|=
name|dcore
operator|.
name|getProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_NAME
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|coreAttribs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|CloudDescriptor
name|cd
init|=
name|dcore
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
name|String
name|collection
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cd
operator|!=
literal|null
condition|)
name|collection
operator|=
name|cd
operator|.
name|getCollectionName
argument_list|()
expr_stmt|;
if|if
condition|(
name|origCoreName
operator|==
literal|null
condition|)
block|{
name|origCoreName
operator|=
name|coreName
expr_stmt|;
block|}
name|Properties
name|properties
init|=
name|dcore
operator|.
name|getCoreProperties
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cfg
operator|!=
literal|null
condition|)
block|{
name|node
operator|=
name|cfg
operator|.
name|getNode
argument_list|(
literal|"/solr/cores/core[@name='"
operator|+
name|origCoreName
operator|+
literal|"']"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|coreAttribs
operator|.
name|put
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_NAME
argument_list|,
name|coreName
argument_list|)
expr_stmt|;
name|addCoreProperty
argument_list|(
name|coreAttribs
argument_list|,
name|loader
argument_list|,
name|node
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_INSTDIR
argument_list|,
name|dcore
operator|.
name|getRawInstanceDir
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|coreAttribs
operator|.
name|put
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_COLLECTION
argument_list|,
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|collection
argument_list|)
condition|?
name|collection
else|:
name|dcore
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addCoreProperty
argument_list|(
name|coreAttribs
argument_list|,
name|loader
argument_list|,
name|node
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_DATADIR
argument_list|,
name|dcore
operator|.
name|getDataDir
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addCoreProperty
argument_list|(
name|coreAttribs
argument_list|,
name|loader
argument_list|,
name|node
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_ULOGDIR
argument_list|,
name|dcore
operator|.
name|getUlogDir
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addCoreProperty
argument_list|(
name|coreAttribs
argument_list|,
name|loader
argument_list|,
name|node
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_TRANSIENT
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|dcore
operator|.
name|isTransient
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addCoreProperty
argument_list|(
name|coreAttribs
argument_list|,
name|loader
argument_list|,
name|node
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_LOADONSTARTUP
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|dcore
operator|.
name|isLoadOnStartup
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addCoreProperty
argument_list|(
name|coreAttribs
argument_list|,
name|loader
argument_list|,
name|node
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_COLLECTION
argument_list|,
name|collection
argument_list|,
name|dcore
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|shard
init|=
literal|null
decl_stmt|;
name|String
name|roles
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cd
operator|!=
literal|null
condition|)
block|{
name|shard
operator|=
name|cd
operator|.
name|getShardId
argument_list|()
expr_stmt|;
name|roles
operator|=
name|cd
operator|.
name|getRoles
argument_list|()
expr_stmt|;
block|}
name|addCoreProperty
argument_list|(
name|coreAttribs
argument_list|,
name|loader
argument_list|,
name|node
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_SHARD
argument_list|,
name|shard
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addCoreProperty
argument_list|(
name|coreAttribs
argument_list|,
name|loader
argument_list|,
name|node
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_ROLES
argument_list|,
name|roles
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|coreAttribs
operator|.
name|put
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_LOADONSTARTUP
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|dcore
operator|.
name|isLoadOnStartup
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|coreAttribs
operator|.
name|put
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_TRANSIENT
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|dcore
operator|.
name|isTransient
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SolrXMLSerializer
operator|.
name|SolrCoreXMLDef
name|solrCoreXMLDef
init|=
operator|new
name|SolrXMLSerializer
operator|.
name|SolrCoreXMLDef
argument_list|()
decl_stmt|;
name|solrCoreXMLDef
operator|.
name|coreAttribs
operator|=
name|coreAttribs
expr_stmt|;
name|solrCoreXMLDef
operator|.
name|coreProperties
operator|=
name|properties
expr_stmt|;
name|solrCoreXMLDefs
operator|.
name|add
argument_list|(
name|solrCoreXMLDef
argument_list|)
expr_stmt|;
block|}
DECL|method|getModifyLock
specifier|protected
name|Object
name|getModifyLock
parameter_list|()
block|{
return|return
name|modifyLock
return|;
block|}
comment|// Be a little careful. We don't want to either open or close a core unless it's _not_ being opened or closed by
comment|// another thread. So within this lock we'll walk along the list of pending closes until we find something NOT in
comment|// the list of threads currently being loaded or reloaded. The "usual" case will probably return the very first
comment|// one anyway..
DECL|method|getCoreToClose
specifier|protected
name|SolrCore
name|getCoreToClose
parameter_list|()
block|{
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
for|for
control|(
name|SolrCore
name|core
range|:
name|pendingCloses
control|)
block|{
if|if
condition|(
operator|!
name|pendingCoreOps
operator|.
name|contains
argument_list|(
name|core
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|pendingCoreOps
operator|.
name|add
argument_list|(
name|core
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|pendingCloses
operator|.
name|remove
argument_list|(
name|core
argument_list|)
expr_stmt|;
return|return
name|core
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|addCreated
specifier|protected
name|void
name|addCreated
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
synchronized|synchronized
init|(
name|modifyLock
init|)
block|{
name|createdCores
operator|.
name|put
argument_list|(
name|core
operator|.
name|getName
argument_list|()
argument_list|,
name|core
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
