begin_unit
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|CharArr
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import
begin_class
DECL|class|ConfigOverlay
specifier|public
class|class
name|ConfigOverlay
block|{
DECL|field|znodeVersion
specifier|private
specifier|final
name|int
name|znodeVersion
decl_stmt|;
DECL|field|data
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|data
decl_stmt|;
DECL|field|props
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
decl_stmt|;
DECL|field|userProps
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|userProps
decl_stmt|;
DECL|method|ConfigOverlay
specifier|public
name|ConfigOverlay
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonObj
parameter_list|,
name|int
name|znodeVersion
parameter_list|)
block|{
if|if
condition|(
name|jsonObj
operator|==
literal|null
condition|)
name|jsonObj
operator|=
name|Collections
operator|.
name|EMPTY_MAP
expr_stmt|;
name|this
operator|.
name|znodeVersion
operator|=
name|znodeVersion
expr_stmt|;
name|data
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|jsonObj
argument_list|)
expr_stmt|;
name|props
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|data
operator|.
name|get
argument_list|(
literal|"props"
argument_list|)
expr_stmt|;
if|if
condition|(
name|props
operator|==
literal|null
condition|)
name|props
operator|=
name|Collections
operator|.
name|EMPTY_MAP
expr_stmt|;
name|userProps
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|data
operator|.
name|get
argument_list|(
literal|"userProps"
argument_list|)
expr_stmt|;
if|if
condition|(
name|userProps
operator|==
literal|null
condition|)
name|userProps
operator|=
name|Collections
operator|.
name|EMPTY_MAP
expr_stmt|;
block|}
DECL|method|getXPathProperty
specifier|public
name|Object
name|getXPathProperty
parameter_list|(
name|String
name|xpath
parameter_list|)
block|{
return|return
name|getXPathProperty
argument_list|(
name|xpath
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|getXPathProperty
specifier|public
name|Object
name|getXPathProperty
parameter_list|(
name|String
name|xpath
parameter_list|,
name|boolean
name|onlyPrimitive
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|hierarchy
init|=
name|checkEditable
argument_list|(
name|xpath
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|hierarchy
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|getObjectByPath
argument_list|(
name|props
argument_list|,
name|onlyPrimitive
argument_list|,
name|hierarchy
argument_list|)
return|;
block|}
DECL|method|getObjectByPath
specifier|public
specifier|static
name|Object
name|getObjectByPath
parameter_list|(
name|Map
name|root
parameter_list|,
name|boolean
name|onlyPrimitive
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|hierarchy
parameter_list|)
block|{
name|Map
name|obj
init|=
name|root
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hierarchy
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s
init|=
name|hierarchy
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|hierarchy
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|obj
operator|=
operator|(
name|Map
operator|)
name|obj
operator|.
name|get
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|null
return|;
block|}
else|else
block|{
name|Object
name|val
init|=
name|obj
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|onlyPrimitive
operator|&&
name|val
operator|instanceof
name|Map
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|val
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|setUserProperty
specifier|public
name|ConfigOverlay
name|setUserProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
name|Map
name|copy
init|=
operator|new
name|LinkedHashMap
argument_list|(
name|userProps
argument_list|)
decl_stmt|;
name|copy
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonObj
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|this
operator|.
name|data
argument_list|)
decl_stmt|;
name|jsonObj
operator|.
name|put
argument_list|(
literal|"userProps"
argument_list|,
name|copy
argument_list|)
expr_stmt|;
return|return
operator|new
name|ConfigOverlay
argument_list|(
name|jsonObj
argument_list|,
name|znodeVersion
argument_list|)
return|;
block|}
DECL|method|unsetUserProperty
specifier|public
name|ConfigOverlay
name|unsetUserProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
operator|!
name|userProps
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
return|return
name|this
return|;
name|Map
name|copy
init|=
operator|new
name|LinkedHashMap
argument_list|(
name|userProps
argument_list|)
decl_stmt|;
name|copy
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonObj
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|this
operator|.
name|data
argument_list|)
decl_stmt|;
name|jsonObj
operator|.
name|put
argument_list|(
literal|"userProps"
argument_list|,
name|copy
argument_list|)
expr_stmt|;
return|return
operator|new
name|ConfigOverlay
argument_list|(
name|jsonObj
argument_list|,
name|znodeVersion
argument_list|)
return|;
block|}
DECL|method|setProperty
specifier|public
name|ConfigOverlay
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|hierarchy
init|=
name|checkEditable
argument_list|(
name|name
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
name|deepCopy
init|=
name|getDeepCopy
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|Map
name|obj
init|=
name|deepCopy
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hierarchy
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s
init|=
name|hierarchy
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|hierarchy
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|obj
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|==
literal|null
operator|||
operator|(
operator|!
operator|(
name|obj
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|instanceof
name|Map
operator|)
operator|)
condition|)
block|{
name|obj
operator|.
name|put
argument_list|(
name|s
argument_list|,
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|obj
operator|=
operator|(
name|Map
operator|)
name|obj
operator|.
name|get
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|obj
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonObj
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|this
operator|.
name|data
argument_list|)
decl_stmt|;
name|jsonObj
operator|.
name|put
argument_list|(
literal|"props"
argument_list|,
name|deepCopy
argument_list|)
expr_stmt|;
return|return
operator|new
name|ConfigOverlay
argument_list|(
name|jsonObj
argument_list|,
name|znodeVersion
argument_list|)
return|;
block|}
DECL|method|getDeepCopy
specifier|private
name|Map
name|getDeepCopy
parameter_list|(
name|Map
name|map
parameter_list|)
block|{
return|return
operator|(
name|Map
operator|)
name|ZkStateReader
operator|.
name|fromJSON
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|map
argument_list|)
argument_list|)
return|;
block|}
DECL|field|NOT_EDITABLE
specifier|public
specifier|static
specifier|final
name|String
name|NOT_EDITABLE
init|=
literal|"''{0}'' is not an editable property"
decl_stmt|;
DECL|method|checkEditable
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|checkEditable
parameter_list|(
name|String
name|propName
parameter_list|,
name|boolean
name|isXPath
parameter_list|,
name|boolean
name|failOnError
parameter_list|)
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|hierarchy
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isEditableProp
argument_list|(
name|propName
argument_list|,
name|isXPath
argument_list|,
name|hierarchy
argument_list|)
condition|)
block|{
if|if
condition|(
name|failOnError
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
name|NOT_EDITABLE
argument_list|,
name|propName
argument_list|)
argument_list|)
throw|;
else|else
return|return
literal|null
return|;
block|}
return|return
name|hierarchy
return|;
block|}
DECL|method|unsetProperty
specifier|public
name|ConfigOverlay
name|unsetProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|hierarchy
init|=
name|checkEditable
argument_list|(
name|name
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
name|deepCopy
init|=
name|getDeepCopy
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|Map
name|obj
init|=
name|deepCopy
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hierarchy
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s
init|=
name|hierarchy
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|hierarchy
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|obj
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|==
literal|null
operator|||
operator|(
operator|!
operator|(
name|obj
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|instanceof
name|Map
operator|)
operator|)
condition|)
block|{
return|return
name|this
return|;
block|}
name|obj
operator|=
operator|(
name|Map
operator|)
name|obj
operator|.
name|get
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|obj
operator|.
name|remove
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonObj
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|this
operator|.
name|data
argument_list|)
decl_stmt|;
name|jsonObj
operator|.
name|put
argument_list|(
literal|"props"
argument_list|,
name|deepCopy
argument_list|)
expr_stmt|;
return|return
operator|new
name|ConfigOverlay
argument_list|(
name|jsonObj
argument_list|,
name|znodeVersion
argument_list|)
return|;
block|}
DECL|method|toByteArray
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|()
block|{
return|return
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|data
argument_list|)
return|;
block|}
DECL|method|getZnodeVersion
specifier|public
name|int
name|getZnodeVersion
parameter_list|()
block|{
return|return
name|znodeVersion
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|CharArr
name|out
init|=
operator|new
name|CharArr
argument_list|()
decl_stmt|;
try|try
block|{
operator|new
name|JSONWriter
argument_list|(
name|out
argument_list|,
literal|2
argument_list|)
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|toOutputFormat
specifier|public
name|Map
name|toOutputFormat
parameter_list|()
block|{
name|Map
name|result
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|znodeVersion
argument_list|)
expr_stmt|;
name|result
operator|.
name|putAll
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|field|RESOURCE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|RESOURCE_NAME
init|=
literal|"configoverlay.json"
decl_stmt|;
DECL|field|XML_ATTR
specifier|private
specifier|static
specifier|final
name|Long
name|XML_ATTR
init|=
literal|0L
decl_stmt|;
DECL|field|XML_NODE
specifier|private
specifier|static
specifier|final
name|Long
name|XML_NODE
init|=
literal|1L
decl_stmt|;
DECL|field|editable_prop_map
specifier|private
specifier|static
name|Map
name|editable_prop_map
decl_stmt|;
DECL|field|MAPPING
specifier|public
specifier|static
specifier|final
name|String
name|MAPPING
init|=
literal|"{ updateHandler : {"
operator|+
literal|"                 autoCommit : { maxDocs:1, maxTime:1, openSearcher:1 },"
operator|+
literal|"                 autoSoftCommit : { maxDocs:1, maxTime :1},"
operator|+
literal|"                 commitWithin : {softCommit:1},"
operator|+
literal|"                 commitIntervalLowerBound:1,"
operator|+
literal|"                 indexWriter : {closeWaitsForMerges:1}"
operator|+
literal|"                 },"
operator|+
literal|" query : {"
operator|+
literal|"          filterCache : {class:0, size:0, initialSize:0 , autowarmCount:0 , regenerator:0},"
operator|+
literal|"          queryResultCache :{class:0, size:0, initialSize:0,autowarmCount:0,regenerator:0},"
operator|+
literal|"          documentCache :{class:0, size:0, initialSize:0 ,autowarmCount:0,regenerator:0},"
operator|+
literal|"          fieldValueCache :{class:0, size:0, initialSize:0 ,autowarmCount:0,regenerator:0}"
operator|+
literal|"}}"
decl_stmt|;
static|static
block|{
try|try
block|{
name|editable_prop_map
operator|=
operator|(
name|Map
operator|)
operator|new
name|ObjectBuilder
argument_list|(
operator|new
name|JSONParser
argument_list|(
operator|new
name|StringReader
argument_list|(
name|MAPPING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getObject
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"error parsing mapping "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|isEditableProp
specifier|public
specifier|static
name|boolean
name|isEditableProp
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|isXpath
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|hierarchy
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|path
argument_list|,
name|isXpath
condition|?
literal|'/'
else|:
literal|'.'
argument_list|)
decl_stmt|;
name|Object
name|obj
init|=
name|editable_prop_map
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|part
init|=
name|parts
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|boolean
name|isAttr
init|=
name|isXpath
operator|&&
name|part
operator|.
name|startsWith
argument_list|(
literal|"@"
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAttr
condition|)
block|{
name|part
operator|=
name|part
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hierarchy
operator|!=
literal|null
condition|)
name|hierarchy
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|i
operator|==
name|parts
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Map
condition|)
block|{
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|isXpath
operator|&&
name|isAttr
condition|)
block|{
return|return
name|XML_ATTR
operator|.
name|equals
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|part
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|XML_ATTR
operator|.
name|equals
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|part
argument_list|)
argument_list|)
operator|||
name|XML_NODE
operator|.
name|equals
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|part
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
name|obj
operator|=
operator|(
operator|(
name|Map
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|getEditableSubProperties
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getEditableSubProperties
parameter_list|(
name|String
name|xpath
parameter_list|)
block|{
name|Object
name|o
init|=
name|getObjectByPath
argument_list|(
name|props
argument_list|,
literal|false
argument_list|,
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|xpath
argument_list|,
literal|'/'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Map
condition|)
block|{
return|return
operator|(
name|Map
operator|)
name|o
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getUserProps
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getUserProps
parameter_list|()
block|{
return|return
name|userProps
return|;
block|}
block|}
end_class
end_unit
