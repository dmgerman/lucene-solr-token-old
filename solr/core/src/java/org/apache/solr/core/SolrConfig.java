begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexDeletionPolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ZkSolrResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|SearchComponent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|QueryResponseWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
operator|.
name|RestManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchemaFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|CacheConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|FastLRUCache
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QParserPlugin
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|ValueSourceParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrRequestParsers
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|spelling
operator|.
name|QueryConverter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|SolrIndexConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateLog
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|UpdateRequestProcessorChain
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DOMUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RegexFileFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrConfig
operator|.
name|PluginOpts
operator|.
name|MULTI_OK
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrConfig
operator|.
name|PluginOpts
operator|.
name|NOOP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrConfig
operator|.
name|PluginOpts
operator|.
name|REQUIRE_CLASS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrConfig
operator|.
name|PluginOpts
operator|.
name|REQUIRE_NAME
import|;
end_import
begin_comment
comment|/**  * Provides a static reference to a Config object modeling the main  * configuration data for a a Solr instance -- typically found in  * "solrconfig.xml".  */
end_comment
begin_class
DECL|class|SolrConfig
specifier|public
class|class
name|SolrConfig
extends|extends
name|Config
implements|implements
name|MapSerializable
block|{
DECL|field|log
specifier|public
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrConfig
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_CONF_FILE
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CONF_FILE
init|=
literal|"solrconfig.xml"
decl_stmt|;
DECL|enum|PluginOpts
specifier|static
enum|enum
name|PluginOpts
block|{
DECL|enum constant|MULTI_OK
name|MULTI_OK
block|,
DECL|enum constant|REQUIRE_NAME
name|REQUIRE_NAME
block|,
DECL|enum constant|REQUIRE_CLASS
name|REQUIRE_CLASS
block|,
comment|// EnumSet.of and/or EnumSet.copyOf(Collection) are anoying
comment|// because of type determination
DECL|enum constant|NOOP
name|NOOP
block|}
DECL|field|multipartUploadLimitKB
specifier|private
name|int
name|multipartUploadLimitKB
decl_stmt|;
DECL|field|formUploadLimitKB
specifier|private
name|int
name|formUploadLimitKB
decl_stmt|;
DECL|field|enableRemoteStreams
specifier|private
name|boolean
name|enableRemoteStreams
decl_stmt|;
DECL|field|handleSelect
specifier|private
name|boolean
name|handleSelect
decl_stmt|;
DECL|field|addHttpRequestToContext
specifier|private
name|boolean
name|addHttpRequestToContext
decl_stmt|;
DECL|field|solrRequestParsers
specifier|private
specifier|final
name|SolrRequestParsers
name|solrRequestParsers
decl_stmt|;
comment|/** Creates a default instance from the solrconfig.xml. */
DECL|method|SolrConfig
specifier|public
name|SolrConfig
parameter_list|()
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
argument_list|(
operator|(
name|SolrResourceLoader
operator|)
literal|null
argument_list|,
name|DEFAULT_CONF_FILE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a configuration instance from a configuration name.    * A default resource loader will be created (@see SolrResourceLoader)    *@param name the configuration name used by the loader    */
DECL|method|SolrConfig
specifier|public
name|SolrConfig
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
argument_list|(
operator|(
name|SolrResourceLoader
operator|)
literal|null
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a configuration instance from a configuration name and stream.    * A default resource loader will be created (@see SolrResourceLoader).    * If the stream is null, the resource loader will open the configuration stream.    * If the stream is not null, no attempt to load the resource will occur (the name is not used).    *@param name the configuration name    *@param is the configuration stream    */
DECL|method|SolrConfig
specifier|public
name|SolrConfig
parameter_list|(
name|String
name|name
parameter_list|,
name|InputSource
name|is
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
argument_list|(
operator|(
name|SolrResourceLoader
operator|)
literal|null
argument_list|,
name|name
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a configuration instance from an instance directory, configuration name and stream.    *@param instanceDir the directory used to create the resource loader    *@param name the configuration name used by the loader if the stream is null    *@param is the configuration stream     */
DECL|method|SolrConfig
specifier|public
name|SolrConfig
parameter_list|(
name|String
name|instanceDir
parameter_list|,
name|String
name|name
parameter_list|,
name|InputSource
name|is
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
argument_list|(
operator|new
name|SolrResourceLoader
argument_list|(
name|instanceDir
argument_list|)
argument_list|,
name|name
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
DECL|method|readFromResourceLoader
specifier|public
specifier|static
name|SolrConfig
name|readFromResourceLoader
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|,
name|String
name|name
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|SolrConfig
argument_list|(
name|loader
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|resource
decl_stmt|;
if|if
condition|(
name|loader
operator|instanceof
name|ZkSolrResourceLoader
condition|)
block|{
name|resource
operator|=
name|name
expr_stmt|;
block|}
else|else
block|{
name|resource
operator|=
name|loader
operator|.
name|getConfigDir
argument_list|()
operator|+
name|name
expr_stmt|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error loading solr config from "
operator|+
name|resource
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** Creates a configuration instance from a resource loader, a configuration name and a stream.    * If the stream is null, the resource loader will open the configuration stream.    * If the stream is not null, no attempt to load the resource will occur (the name is not used).    *@param loader the resource loader    *@param name the configuration name    *@param is the configuration stream    */
DECL|method|SolrConfig
specifier|public
name|SolrConfig
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|,
name|String
name|name
parameter_list|,
name|InputSource
name|is
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|super
argument_list|(
name|loader
argument_list|,
name|name
argument_list|,
name|is
argument_list|,
literal|"/config/"
argument_list|)
expr_stmt|;
name|getOverlay
argument_list|()
expr_stmt|;
comment|//just in case it is not initialized
name|initLibs
argument_list|()
expr_stmt|;
name|luceneMatchVersion
operator|=
name|getLuceneVersion
argument_list|(
literal|"luceneMatchVersion"
argument_list|)
expr_stmt|;
name|String
name|indexConfigPrefix
decl_stmt|;
comment|// Old indexDefaults and mainIndex sections are deprecated and fails fast for luceneMatchVersion=>LUCENE_4_0_0.
comment|// For older solrconfig.xml's we allow the old sections, but never mixed with the new<indexConfig>
name|boolean
name|hasDeprecatedIndexConfig
init|=
operator|(
name|getNode
argument_list|(
literal|"indexDefaults"
argument_list|,
literal|false
argument_list|)
operator|!=
literal|null
operator|)
operator|||
operator|(
name|getNode
argument_list|(
literal|"mainIndex"
argument_list|,
literal|false
argument_list|)
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|hasDeprecatedIndexConfig
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|FORBIDDEN
argument_list|,
literal|"<indexDefaults> and<mainIndex> configuration sections are discontinued. Use<indexConfig> instead."
argument_list|)
throw|;
block|}
else|else
block|{
name|defaultIndexConfig
operator|=
name|mainIndexConfig
operator|=
literal|null
expr_stmt|;
name|indexConfigPrefix
operator|=
literal|"indexConfig"
expr_stmt|;
block|}
name|nrtMode
operator|=
name|getBool
argument_list|(
name|indexConfigPrefix
operator|+
literal|"/nrtMode"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Parse indexConfig section, using mainIndex as backup in case old config is used
name|indexConfig
operator|=
operator|new
name|SolrIndexConfig
argument_list|(
name|this
argument_list|,
literal|"indexConfig"
argument_list|,
name|mainIndexConfig
argument_list|)
expr_stmt|;
name|booleanQueryMaxClauseCount
operator|=
name|getInt
argument_list|(
literal|"query/maxBooleanClauses"
argument_list|,
name|BooleanQuery
operator|.
name|getMaxClauseCount
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Using Lucene MatchVersion: "
operator|+
name|luceneMatchVersion
argument_list|)
expr_stmt|;
comment|// Warn about deprecated / discontinued parameters
comment|// boolToFilterOptimizer has had no effect since 3.1
if|if
condition|(
name|get
argument_list|(
literal|"query/boolTofilterOptimizer"
argument_list|,
literal|null
argument_list|)
operator|!=
literal|null
condition|)
name|log
operator|.
name|warn
argument_list|(
literal|"solrconfig.xml:<boolTofilterOptimizer> is currently not implemented and has no effect."
argument_list|)
expr_stmt|;
if|if
condition|(
name|get
argument_list|(
literal|"query/HashDocSet"
argument_list|,
literal|null
argument_list|)
operator|!=
literal|null
condition|)
name|log
operator|.
name|warn
argument_list|(
literal|"solrconfig.xml:<HashDocSet> is deprecated and no longer recommended used."
argument_list|)
expr_stmt|;
comment|// TODO: Old code - in case somebody wants to re-enable. Also see SolrIndexSearcher#search()
comment|//    filtOptEnabled = getBool("query/boolTofilterOptimizer/@enabled", false);
comment|//    filtOptCacheSize = getInt("query/boolTofilterOptimizer/@cacheSize",32);
comment|//    filtOptThreshold = getFloat("query/boolTofilterOptimizer/@threshold",.05f);
name|useFilterForSortedQuery
operator|=
name|getBool
argument_list|(
literal|"query/useFilterForSortedQuery"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|queryResultWindowSize
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|getInt
argument_list|(
literal|"query/queryResultWindowSize"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|queryResultMaxDocsCached
operator|=
name|getInt
argument_list|(
literal|"query/queryResultMaxDocsCached"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|enableLazyFieldLoading
operator|=
name|getBool
argument_list|(
literal|"query/enableLazyFieldLoading"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|filterCacheConfig
operator|=
name|CacheConfig
operator|.
name|getConfig
argument_list|(
name|this
argument_list|,
literal|"query/filterCache"
argument_list|)
expr_stmt|;
name|queryResultCacheConfig
operator|=
name|CacheConfig
operator|.
name|getConfig
argument_list|(
name|this
argument_list|,
literal|"query/queryResultCache"
argument_list|)
expr_stmt|;
name|documentCacheConfig
operator|=
name|CacheConfig
operator|.
name|getConfig
argument_list|(
name|this
argument_list|,
literal|"query/documentCache"
argument_list|)
expr_stmt|;
name|CacheConfig
name|conf
init|=
name|CacheConfig
operator|.
name|getConfig
argument_list|(
name|this
argument_list|,
literal|"query/fieldValueCache"
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"fieldValueCache"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"size"
argument_list|,
literal|"10000"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"initialSize"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"showItems"
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|CacheConfig
argument_list|(
name|FastLRUCache
operator|.
name|class
argument_list|,
name|args
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|fieldValueCacheConfig
operator|=
name|conf
expr_stmt|;
name|unlockOnStartup
operator|=
name|getBool
argument_list|(
name|indexConfigPrefix
operator|+
literal|"/unlockOnStartup"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|useColdSearcher
operator|=
name|getBool
argument_list|(
literal|"query/useColdSearcher"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dataDir
operator|=
name|get
argument_list|(
literal|"dataDir"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataDir
operator|!=
literal|null
operator|&&
name|dataDir
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|dataDir
operator|=
literal|null
expr_stmt|;
name|userCacheConfigs
operator|=
name|CacheConfig
operator|.
name|getMultipleConfigs
argument_list|(
name|this
argument_list|,
literal|"query/cache"
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
operator|.
name|initRegenerators
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|hashSetInverseLoadFactor
operator|=
literal|1.0f
operator|/
name|getFloat
argument_list|(
literal|"//HashDocSet/@loadFactor"
argument_list|,
literal|0.75f
argument_list|)
expr_stmt|;
name|hashDocSetMaxSize
operator|=
name|getInt
argument_list|(
literal|"//HashDocSet/@maxSize"
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
name|httpCachingConfig
operator|=
operator|new
name|HttpCachingConfig
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|Node
name|jmx
init|=
name|getNode
argument_list|(
literal|"jmx"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|jmx
operator|!=
literal|null
condition|)
block|{
name|jmxConfig
operator|=
operator|new
name|JmxConfiguration
argument_list|(
literal|true
argument_list|,
name|get
argument_list|(
literal|"jmx/@agentId"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|get
argument_list|(
literal|"jmx/@serviceUrl"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|get
argument_list|(
literal|"jmx/@rootName"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jmxConfig
operator|=
operator|new
name|JmxConfiguration
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|maxWarmingSearchers
operator|=
name|getInt
argument_list|(
literal|"query/maxWarmingSearchers"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|slowQueryThresholdMillis
operator|=
name|getInt
argument_list|(
literal|"query/slowQueryThresholdMillis"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrPluginInfo
name|plugin
range|:
name|plugins
control|)
name|loadPluginInfo
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
name|updateHandlerInfo
operator|=
name|loadUpdatehandlerInfo
argument_list|()
expr_stmt|;
name|multipartUploadLimitKB
operator|=
name|getInt
argument_list|(
literal|"requestDispatcher/requestParsers/@multipartUploadLimitInKB"
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|formUploadLimitKB
operator|=
name|getInt
argument_list|(
literal|"requestDispatcher/requestParsers/@formdataUploadLimitInKB"
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|enableRemoteStreams
operator|=
name|getBool
argument_list|(
literal|"requestDispatcher/requestParsers/@enableRemoteStreaming"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Let this filter take care of /select?xxx format
name|handleSelect
operator|=
name|getBool
argument_list|(
literal|"requestDispatcher/@handleSelect"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addHttpRequestToContext
operator|=
name|getBool
argument_list|(
literal|"requestDispatcher/requestParsers/@addHttpRequestToContext"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|argsInfos
init|=
name|pluginStore
operator|.
name|get
argument_list|(
name|InitParams
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|argsInfos
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|InitParams
argument_list|>
name|argsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PluginInfo
name|p
range|:
name|argsInfos
control|)
block|{
name|InitParams
name|args
init|=
operator|new
name|InitParams
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|argsMap
operator|.
name|put
argument_list|(
name|args
operator|.
name|name
operator|==
literal|null
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|args
operator|.
name|hashCode
argument_list|()
argument_list|)
else|:
name|args
operator|.
name|name
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|initParams
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|argsMap
argument_list|)
expr_stmt|;
block|}
name|solrRequestParsers
operator|=
operator|new
name|SolrRequestParsers
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|Config
operator|.
name|log
operator|.
name|info
argument_list|(
literal|"Loaded SolrConfig: "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
DECL|field|plugins
specifier|public
specifier|static
name|List
argument_list|<
name|SolrPluginInfo
argument_list|>
name|plugins
init|=
name|ImmutableList
operator|.
expr|<
name|SolrPluginInfo
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SolrPluginInfo
argument_list|(
name|SolrRequestHandler
operator|.
name|class
argument_list|,
name|SolrRequestHandler
operator|.
name|TYPE
argument_list|,
name|REQUIRE_NAME
argument_list|,
name|REQUIRE_CLASS
argument_list|,
name|MULTI_OK
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|SolrPluginInfo
argument_list|(
name|QParserPlugin
operator|.
name|class
argument_list|,
literal|"queryParser"
argument_list|,
name|REQUIRE_NAME
argument_list|,
name|REQUIRE_CLASS
argument_list|,
name|MULTI_OK
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|SolrPluginInfo
argument_list|(
name|QueryResponseWriter
operator|.
name|class
argument_list|,
literal|"queryResponseWriter"
argument_list|,
name|REQUIRE_NAME
argument_list|,
name|REQUIRE_CLASS
argument_list|,
name|MULTI_OK
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|SolrPluginInfo
argument_list|(
name|ValueSourceParser
operator|.
name|class
argument_list|,
literal|"valueSourceParser"
argument_list|,
name|REQUIRE_NAME
argument_list|,
name|REQUIRE_CLASS
argument_list|,
name|MULTI_OK
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|SolrPluginInfo
argument_list|(
name|TransformerFactory
operator|.
name|class
argument_list|,
literal|"transformer"
argument_list|,
name|REQUIRE_NAME
argument_list|,
name|REQUIRE_CLASS
argument_list|,
name|MULTI_OK
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|SolrPluginInfo
argument_list|(
name|SearchComponent
operator|.
name|class
argument_list|,
literal|"searchComponent"
argument_list|,
name|REQUIRE_NAME
argument_list|,
name|REQUIRE_CLASS
argument_list|,
name|MULTI_OK
argument_list|)
argument_list|)
comment|// TODO: WTF is up with queryConverter???
comment|// it aparently *only* works as a singleton? - SOLR-4304
comment|// and even then -- only if there is a single SpellCheckComponent
comment|// because of queryConverter.setIndexAnalyzer
operator|.
name|add
argument_list|(
operator|new
name|SolrPluginInfo
argument_list|(
name|QueryConverter
operator|.
name|class
argument_list|,
literal|"queryConverter"
argument_list|,
name|REQUIRE_NAME
argument_list|,
name|REQUIRE_CLASS
argument_list|)
argument_list|)
comment|// this is hackish, since it picks up all SolrEventListeners,
comment|// regardless of when/how/why they are used (or even if they are
comment|// declared outside of the appropriate context) but there's no nice
comment|// way around that in the PluginInfo framework
operator|.
name|add
argument_list|(
operator|new
name|SolrPluginInfo
argument_list|(
name|SolrEventListener
operator|.
name|class
argument_list|,
literal|"//listener"
argument_list|,
name|REQUIRE_CLASS
argument_list|,
name|MULTI_OK
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|SolrPluginInfo
argument_list|(
name|DirectoryFactory
operator|.
name|class
argument_list|,
literal|"directoryFactory"
argument_list|,
name|REQUIRE_CLASS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|SolrPluginInfo
argument_list|(
name|IndexDeletionPolicy
operator|.
name|class
argument_list|,
literal|"indexConfig/deletionPolicy"
argument_list|,
name|REQUIRE_CLASS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|SolrPluginInfo
argument_list|(
name|CodecFactory
operator|.
name|class
argument_list|,
literal|"codecFactory"
argument_list|,
name|REQUIRE_CLASS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|SolrPluginInfo
argument_list|(
name|IndexReaderFactory
operator|.
name|class
argument_list|,
literal|"indexReaderFactory"
argument_list|,
name|REQUIRE_CLASS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|SolrPluginInfo
argument_list|(
name|UpdateRequestProcessorChain
operator|.
name|class
argument_list|,
literal|"updateRequestProcessorChain"
argument_list|,
name|MULTI_OK
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|SolrPluginInfo
argument_list|(
name|UpdateLog
operator|.
name|class
argument_list|,
literal|"updateHandler/updateLog"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|SolrPluginInfo
argument_list|(
name|IndexSchemaFactory
operator|.
name|class
argument_list|,
literal|"schemaFactory"
argument_list|,
name|REQUIRE_CLASS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|SolrPluginInfo
argument_list|(
name|RestManager
operator|.
name|class
argument_list|,
literal|"restManager"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|SolrPluginInfo
argument_list|(
name|InitParams
operator|.
name|class
argument_list|,
name|InitParams
operator|.
name|TYPE
argument_list|,
name|MULTI_OK
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|class|SolrPluginInfo
specifier|public
specifier|static
class|class
name|SolrPluginInfo
block|{
DECL|field|clazz
specifier|public
specifier|final
name|Class
name|clazz
decl_stmt|;
DECL|field|tag
specifier|public
specifier|final
name|String
name|tag
decl_stmt|;
DECL|field|options
specifier|public
specifier|final
name|Set
argument_list|<
name|PluginOpts
argument_list|>
name|options
decl_stmt|;
DECL|method|SolrPluginInfo
specifier|private
name|SolrPluginInfo
parameter_list|(
name|Class
name|clz
parameter_list|,
name|String
name|tag
parameter_list|,
name|PluginOpts
modifier|...
name|opts
parameter_list|)
block|{
name|this
operator|.
name|clazz
operator|=
name|clz
expr_stmt|;
name|this
operator|.
name|tag
operator|=
name|tag
expr_stmt|;
name|this
operator|.
name|options
operator|=
name|opts
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_SET
else|:
name|EnumSet
operator|.
name|of
argument_list|(
name|NOOP
argument_list|,
name|opts
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getConfigOverlay
specifier|public
specifier|static
name|ConfigOverlay
name|getConfigOverlay
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|)
block|{
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|loader
operator|.
name|openResource
argument_list|(
name|ConfigOverlay
operator|.
name|RESOURCE_NAME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//no problem no overlay.json file
return|return
operator|new
name|ConfigOverlay
argument_list|(
name|Collections
operator|.
name|EMPTY_MAP
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
try|try
block|{
name|int
name|version
init|=
literal|0
decl_stmt|;
comment|//will be always 0 for file based resourceloader
if|if
condition|(
name|in
operator|instanceof
name|ZkSolrResourceLoader
operator|.
name|ZkByteArrayInputStream
condition|)
block|{
name|version
operator|=
operator|(
operator|(
name|ZkSolrResourceLoader
operator|.
name|ZkByteArrayInputStream
operator|)
name|in
operator|)
operator|.
name|getStat
argument_list|()
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"config overlay loaded . version : {} "
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
name|Map
name|m
init|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
operator|new
name|JSONParser
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|ConfigOverlay
argument_list|(
name|m
argument_list|,
name|version
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error reading config overlay"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|field|initParams
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|InitParams
argument_list|>
name|initParams
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
DECL|method|getInitParams
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|InitParams
argument_list|>
name|getInitParams
parameter_list|()
block|{
return|return
name|initParams
return|;
block|}
DECL|method|loadUpdatehandlerInfo
specifier|protected
name|UpdateHandlerInfo
name|loadUpdatehandlerInfo
parameter_list|()
block|{
return|return
operator|new
name|UpdateHandlerInfo
argument_list|(
name|get
argument_list|(
literal|"updateHandler/@class"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|getInt
argument_list|(
literal|"updateHandler/autoCommit/maxDocs"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|getInt
argument_list|(
literal|"updateHandler/autoCommit/maxTime"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|getBool
argument_list|(
literal|"updateHandler/indexWriter/closeWaitsForMerges"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|getBool
argument_list|(
literal|"updateHandler/autoCommit/openSearcher"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|getInt
argument_list|(
literal|"updateHandler/commitIntervalLowerBound"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|getInt
argument_list|(
literal|"updateHandler/autoSoftCommit/maxDocs"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|getInt
argument_list|(
literal|"updateHandler/autoSoftCommit/maxTime"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|getBool
argument_list|(
literal|"updateHandler/commitWithin/softCommit"
argument_list|,
literal|true
argument_list|)
argument_list|)
return|;
block|}
DECL|method|loadPluginInfo
specifier|private
name|void
name|loadPluginInfo
parameter_list|(
name|SolrPluginInfo
name|pluginInfo
parameter_list|)
block|{
name|boolean
name|requireName
init|=
name|pluginInfo
operator|.
name|options
operator|.
name|contains
argument_list|(
name|REQUIRE_NAME
argument_list|)
decl_stmt|;
name|boolean
name|requireClass
init|=
name|pluginInfo
operator|.
name|options
operator|.
name|contains
argument_list|(
name|REQUIRE_CLASS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|result
init|=
name|readPluginInfos
argument_list|(
name|pluginInfo
operator|.
name|tag
argument_list|,
name|requireName
argument_list|,
name|requireClass
argument_list|)
decl_stmt|;
if|if
condition|(
literal|1
operator|<
name|result
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|pluginInfo
operator|.
name|options
operator|.
name|contains
argument_list|(
name|MULTI_OK
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Found "
operator|+
name|result
operator|.
name|size
argument_list|()
operator|+
literal|" configuration sections when at most "
operator|+
literal|"1 is allowed matching expression: "
operator|+
name|pluginInfo
operator|.
name|tag
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
name|pluginStore
operator|.
name|put
argument_list|(
name|pluginInfo
operator|.
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|readPluginInfos
specifier|public
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|readPluginInfos
parameter_list|(
name|String
name|tag
parameter_list|,
name|boolean
name|requireName
parameter_list|,
name|boolean
name|requireClass
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|PluginInfo
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|NodeList
name|nodes
init|=
operator|(
name|NodeList
operator|)
name|evaluate
argument_list|(
name|tag
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PluginInfo
name|pluginInfo
init|=
operator|new
name|PluginInfo
argument_list|(
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"[solrconfig.xml] "
operator|+
name|tag
argument_list|,
name|requireName
argument_list|,
name|requireClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|pluginInfo
operator|.
name|isEnabled
argument_list|()
condition|)
name|result
operator|.
name|add
argument_list|(
name|pluginInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getRequestParsers
specifier|public
name|SolrRequestParsers
name|getRequestParsers
parameter_list|()
block|{
return|return
name|solrRequestParsers
return|;
block|}
comment|/* The set of materialized parameters: */
DECL|field|booleanQueryMaxClauseCount
specifier|public
specifier|final
name|int
name|booleanQueryMaxClauseCount
decl_stmt|;
comment|// SolrIndexSearcher - nutch optimizer -- Disabled since 3.1
comment|//  public final boolean filtOptEnabled;
comment|//  public final int filtOptCacheSize;
comment|//  public final float filtOptThreshold;
comment|// SolrIndexSearcher - caches configurations
DECL|field|filterCacheConfig
specifier|public
specifier|final
name|CacheConfig
name|filterCacheConfig
decl_stmt|;
DECL|field|queryResultCacheConfig
specifier|public
specifier|final
name|CacheConfig
name|queryResultCacheConfig
decl_stmt|;
DECL|field|documentCacheConfig
specifier|public
specifier|final
name|CacheConfig
name|documentCacheConfig
decl_stmt|;
DECL|field|fieldValueCacheConfig
specifier|public
specifier|final
name|CacheConfig
name|fieldValueCacheConfig
decl_stmt|;
DECL|field|userCacheConfigs
specifier|public
specifier|final
name|CacheConfig
index|[]
name|userCacheConfigs
decl_stmt|;
comment|// SolrIndexSearcher - more...
DECL|field|useFilterForSortedQuery
specifier|public
specifier|final
name|boolean
name|useFilterForSortedQuery
decl_stmt|;
DECL|field|queryResultWindowSize
specifier|public
specifier|final
name|int
name|queryResultWindowSize
decl_stmt|;
DECL|field|queryResultMaxDocsCached
specifier|public
specifier|final
name|int
name|queryResultMaxDocsCached
decl_stmt|;
DECL|field|enableLazyFieldLoading
specifier|public
specifier|final
name|boolean
name|enableLazyFieldLoading
decl_stmt|;
DECL|field|nrtMode
specifier|public
specifier|final
name|boolean
name|nrtMode
decl_stmt|;
comment|// DocSet
DECL|field|hashSetInverseLoadFactor
specifier|public
specifier|final
name|float
name|hashSetInverseLoadFactor
decl_stmt|;
DECL|field|hashDocSetMaxSize
specifier|public
specifier|final
name|int
name|hashDocSetMaxSize
decl_stmt|;
comment|// default& main index configurations, deprecated as of 3.6
annotation|@
name|Deprecated
DECL|field|defaultIndexConfig
specifier|public
specifier|final
name|SolrIndexConfig
name|defaultIndexConfig
decl_stmt|;
annotation|@
name|Deprecated
DECL|field|mainIndexConfig
specifier|public
specifier|final
name|SolrIndexConfig
name|mainIndexConfig
decl_stmt|;
comment|// IndexConfig settings
DECL|field|indexConfig
specifier|public
specifier|final
name|SolrIndexConfig
name|indexConfig
decl_stmt|;
DECL|field|updateHandlerInfo
specifier|protected
name|UpdateHandlerInfo
name|updateHandlerInfo
decl_stmt|;
DECL|field|pluginStore
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PluginInfo
argument_list|>
argument_list|>
name|pluginStore
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|maxWarmingSearchers
specifier|public
specifier|final
name|int
name|maxWarmingSearchers
decl_stmt|;
DECL|field|unlockOnStartup
specifier|public
specifier|final
name|boolean
name|unlockOnStartup
decl_stmt|;
DECL|field|useColdSearcher
specifier|public
specifier|final
name|boolean
name|useColdSearcher
decl_stmt|;
DECL|field|luceneMatchVersion
specifier|public
specifier|final
name|Version
name|luceneMatchVersion
decl_stmt|;
DECL|field|dataDir
specifier|protected
name|String
name|dataDir
decl_stmt|;
DECL|field|slowQueryThresholdMillis
specifier|public
specifier|final
name|int
name|slowQueryThresholdMillis
decl_stmt|;
comment|// threshold above which a query is considered slow
comment|//JMX configuration
DECL|field|jmxConfig
specifier|public
specifier|final
name|JmxConfiguration
name|jmxConfig
decl_stmt|;
DECL|field|httpCachingConfig
specifier|private
specifier|final
name|HttpCachingConfig
name|httpCachingConfig
decl_stmt|;
DECL|method|getHttpCachingConfig
specifier|public
name|HttpCachingConfig
name|getHttpCachingConfig
parameter_list|()
block|{
return|return
name|httpCachingConfig
return|;
block|}
DECL|class|JmxConfiguration
specifier|public
specifier|static
class|class
name|JmxConfiguration
implements|implements
name|MapSerializable
block|{
DECL|field|enabled
specifier|public
name|boolean
name|enabled
init|=
literal|false
decl_stmt|;
DECL|field|agentId
specifier|public
name|String
name|agentId
decl_stmt|;
DECL|field|serviceUrl
specifier|public
name|String
name|serviceUrl
decl_stmt|;
DECL|field|rootName
specifier|public
name|String
name|rootName
decl_stmt|;
DECL|method|JmxConfiguration
specifier|public
name|JmxConfiguration
parameter_list|(
name|boolean
name|enabled
parameter_list|,
name|String
name|agentId
parameter_list|,
name|String
name|serviceUrl
parameter_list|,
name|String
name|rootName
parameter_list|)
block|{
name|this
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
name|this
operator|.
name|agentId
operator|=
name|agentId
expr_stmt|;
name|this
operator|.
name|serviceUrl
operator|=
name|serviceUrl
expr_stmt|;
name|this
operator|.
name|rootName
operator|=
name|rootName
expr_stmt|;
if|if
condition|(
name|agentId
operator|!=
literal|null
operator|&&
name|serviceUrl
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Incorrect JMX Configuration in solrconfig.xml, "
operator|+
literal|"both agentId and serviceUrl cannot be specified at the same time"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toMap
parameter_list|()
block|{
name|LinkedHashMap
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"agentId"
argument_list|,
name|agentId
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"serviceUrl"
argument_list|,
name|serviceUrl
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"rootName"
argument_list|,
name|rootName
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
block|}
DECL|class|HttpCachingConfig
specifier|public
specifier|static
class|class
name|HttpCachingConfig
implements|implements
name|MapSerializable
block|{
comment|/** config xpath prefix for getting HTTP Caching options */
DECL|field|CACHE_PRE
specifier|private
specifier|final
specifier|static
name|String
name|CACHE_PRE
init|=
literal|"requestDispatcher/httpCaching/"
decl_stmt|;
comment|/** For extracting Expires "ttl" from<cacheControl> config */
DECL|field|MAX_AGE
specifier|private
specifier|final
specifier|static
name|Pattern
name|MAX_AGE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\bmax-age=(\\d+)"
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|toMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toMap
parameter_list|()
block|{
return|return
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
literal|"never304"
argument_list|,
name|never304
argument_list|,
literal|"etagSeed"
argument_list|,
name|etagSeed
argument_list|,
literal|"lastModFrom"
argument_list|,
name|lastModFrom
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
literal|"cacheControl"
argument_list|,
name|cacheControlHeader
argument_list|)
return|;
block|}
DECL|enum|LastModFrom
specifier|public
specifier|static
enum|enum
name|LastModFrom
block|{
DECL|enum constant|OPENTIME
DECL|enum constant|DIRLASTMOD
DECL|enum constant|BOGUS
name|OPENTIME
block|,
name|DIRLASTMOD
block|,
name|BOGUS
block|;
comment|/** Input must not be null */
DECL|method|parse
specifier|public
specifier|static
name|LastModFrom
name|parse
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
block|{
try|try
block|{
return|return
name|valueOf
argument_list|(
name|s
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unrecognized value for lastModFrom: "
operator|+
name|s
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|BOGUS
return|;
block|}
block|}
block|}
DECL|field|never304
specifier|private
specifier|final
name|boolean
name|never304
decl_stmt|;
DECL|field|etagSeed
specifier|private
specifier|final
name|String
name|etagSeed
decl_stmt|;
DECL|field|cacheControlHeader
specifier|private
specifier|final
name|String
name|cacheControlHeader
decl_stmt|;
DECL|field|maxAge
specifier|private
specifier|final
name|Long
name|maxAge
decl_stmt|;
DECL|field|lastModFrom
specifier|private
specifier|final
name|LastModFrom
name|lastModFrom
decl_stmt|;
DECL|method|HttpCachingConfig
specifier|private
name|HttpCachingConfig
parameter_list|(
name|SolrConfig
name|conf
parameter_list|)
block|{
name|never304
operator|=
name|conf
operator|.
name|getBool
argument_list|(
name|CACHE_PRE
operator|+
literal|"@never304"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|etagSeed
operator|=
name|conf
operator|.
name|get
argument_list|(
name|CACHE_PRE
operator|+
literal|"@etagSeed"
argument_list|,
literal|"Solr"
argument_list|)
expr_stmt|;
name|lastModFrom
operator|=
name|LastModFrom
operator|.
name|parse
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|CACHE_PRE
operator|+
literal|"@lastModFrom"
argument_list|,
literal|"openTime"
argument_list|)
argument_list|)
expr_stmt|;
name|cacheControlHeader
operator|=
name|conf
operator|.
name|get
argument_list|(
name|CACHE_PRE
operator|+
literal|"cacheControl"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Long
name|tmp
init|=
literal|null
decl_stmt|;
comment|// maxAge
if|if
condition|(
literal|null
operator|!=
name|cacheControlHeader
condition|)
block|{
try|try
block|{
specifier|final
name|Matcher
name|ttlMatcher
init|=
name|MAX_AGE
operator|.
name|matcher
argument_list|(
name|cacheControlHeader
argument_list|)
decl_stmt|;
specifier|final
name|String
name|ttlStr
init|=
name|ttlMatcher
operator|.
name|find
argument_list|()
condition|?
name|ttlMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
else|:
literal|null
decl_stmt|;
name|tmp
operator|=
operator|(
literal|null
operator|!=
name|ttlStr
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|ttlStr
argument_list|)
operator|)
condition|?
name|Long
operator|.
name|valueOf
argument_list|(
name|ttlStr
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Ignoring exception while attempting to "
operator|+
literal|"extract max-age from cacheControl config: "
operator|+
name|cacheControlHeader
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|maxAge
operator|=
name|tmp
expr_stmt|;
block|}
DECL|method|isNever304
specifier|public
name|boolean
name|isNever304
parameter_list|()
block|{
return|return
name|never304
return|;
block|}
DECL|method|getEtagSeed
specifier|public
name|String
name|getEtagSeed
parameter_list|()
block|{
return|return
name|etagSeed
return|;
block|}
comment|/** null if no Cache-Control header */
DECL|method|getCacheControlHeader
specifier|public
name|String
name|getCacheControlHeader
parameter_list|()
block|{
return|return
name|cacheControlHeader
return|;
block|}
comment|/** null if no max age limitation */
DECL|method|getMaxAge
specifier|public
name|Long
name|getMaxAge
parameter_list|()
block|{
return|return
name|maxAge
return|;
block|}
DECL|method|getLastModFrom
specifier|public
name|LastModFrom
name|getLastModFrom
parameter_list|()
block|{
return|return
name|lastModFrom
return|;
block|}
block|}
DECL|class|UpdateHandlerInfo
specifier|public
specifier|static
class|class
name|UpdateHandlerInfo
implements|implements
name|MapSerializable
block|{
DECL|field|className
specifier|public
specifier|final
name|String
name|className
decl_stmt|;
DECL|field|autoCommmitMaxDocs
DECL|field|autoCommmitMaxTime
DECL|field|commitIntervalLowerBound
specifier|public
specifier|final
name|int
name|autoCommmitMaxDocs
decl_stmt|,
name|autoCommmitMaxTime
decl_stmt|,
name|commitIntervalLowerBound
decl_stmt|,
DECL|field|autoSoftCommmitMaxDocs
DECL|field|autoSoftCommmitMaxTime
name|autoSoftCommmitMaxDocs
decl_stmt|,
name|autoSoftCommmitMaxTime
decl_stmt|;
DECL|field|indexWriterCloseWaitsForMerges
specifier|public
specifier|final
name|boolean
name|indexWriterCloseWaitsForMerges
decl_stmt|;
DECL|field|openSearcher
specifier|public
specifier|final
name|boolean
name|openSearcher
decl_stmt|;
comment|// is opening a new searcher part of hard autocommit?
DECL|field|commitWithinSoftCommit
specifier|public
specifier|final
name|boolean
name|commitWithinSoftCommit
decl_stmt|;
comment|/**      * @param autoCommmitMaxDocs set -1 as default      * @param autoCommmitMaxTime set -1 as default      * @param commitIntervalLowerBound set -1 as default      */
DECL|method|UpdateHandlerInfo
specifier|public
name|UpdateHandlerInfo
parameter_list|(
name|String
name|className
parameter_list|,
name|int
name|autoCommmitMaxDocs
parameter_list|,
name|int
name|autoCommmitMaxTime
parameter_list|,
name|boolean
name|indexWriterCloseWaitsForMerges
parameter_list|,
name|boolean
name|openSearcher
parameter_list|,
name|int
name|commitIntervalLowerBound
parameter_list|,
name|int
name|autoSoftCommmitMaxDocs
parameter_list|,
name|int
name|autoSoftCommmitMaxTime
parameter_list|,
name|boolean
name|commitWithinSoftCommit
parameter_list|)
block|{
name|this
operator|.
name|className
operator|=
name|className
expr_stmt|;
name|this
operator|.
name|autoCommmitMaxDocs
operator|=
name|autoCommmitMaxDocs
expr_stmt|;
name|this
operator|.
name|autoCommmitMaxTime
operator|=
name|autoCommmitMaxTime
expr_stmt|;
name|this
operator|.
name|indexWriterCloseWaitsForMerges
operator|=
name|indexWriterCloseWaitsForMerges
expr_stmt|;
name|this
operator|.
name|openSearcher
operator|=
name|openSearcher
expr_stmt|;
name|this
operator|.
name|commitIntervalLowerBound
operator|=
name|commitIntervalLowerBound
expr_stmt|;
name|this
operator|.
name|autoSoftCommmitMaxDocs
operator|=
name|autoSoftCommmitMaxDocs
expr_stmt|;
name|this
operator|.
name|autoSoftCommmitMaxTime
operator|=
name|autoSoftCommmitMaxTime
expr_stmt|;
name|this
operator|.
name|commitWithinSoftCommit
operator|=
name|commitWithinSoftCommit
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toMap
parameter_list|()
block|{
name|LinkedHashMap
name|result
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"class"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"autoCommmitMaxDocs"
argument_list|,
name|autoCommmitMaxDocs
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"indexWriterCloseWaitsForMerges"
argument_list|,
name|indexWriterCloseWaitsForMerges
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"openSearcher"
argument_list|,
name|openSearcher
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"commitIntervalLowerBound"
argument_list|,
name|commitIntervalLowerBound
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"commitWithinSoftCommit"
argument_list|,
name|commitWithinSoftCommit
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"autoCommit"
argument_list|,
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
literal|"maxDocs"
argument_list|,
name|autoCommmitMaxDocs
argument_list|,
literal|"maxTime"
argument_list|,
name|autoCommmitMaxTime
argument_list|,
literal|"commitIntervalLowerBound"
argument_list|,
name|commitIntervalLowerBound
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"autoSoftCommit"
argument_list|,
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
literal|"maxDocs"
argument_list|,
name|autoSoftCommmitMaxDocs
argument_list|,
literal|"maxTime"
argument_list|,
name|autoSoftCommmitMaxTime
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
comment|//  public Map<String, List<PluginInfo>> getUpdateProcessorChainInfo() { return updateProcessorChainInfo; }
DECL|method|getUpdateHandlerInfo
specifier|public
name|UpdateHandlerInfo
name|getUpdateHandlerInfo
parameter_list|()
block|{
return|return
name|updateHandlerInfo
return|;
block|}
DECL|method|getDataDir
specifier|public
name|String
name|getDataDir
parameter_list|()
block|{
return|return
name|dataDir
return|;
block|}
comment|/**SolrConfig keeps a repository of plugins by the type. The known interfaces are the types.    * @param type The key is FQN of the plugin class there are a few  known types : SolrFormatter, SolrFragmenter    * SolrRequestHandler,QParserPlugin, QueryResponseWriter,ValueSourceParser,    * SearchComponent, QueryConverter, SolrEventListener, DirectoryFactory,    * IndexDeletionPolicy, IndexReaderFactory, {@link TransformerFactory}    */
DECL|method|getPluginInfos
specifier|public
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|getPluginInfos
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|result
init|=
name|pluginStore
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|result
operator|==
literal|null
condition|?
name|Collections
operator|.
expr|<
name|PluginInfo
operator|>
name|emptyList
argument_list|()
else|:
name|result
return|;
block|}
DECL|method|getPluginInfo
specifier|public
name|PluginInfo
name|getPluginInfo
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|result
init|=
name|pluginStore
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
operator|||
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
literal|1
operator|==
name|result
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Multiple plugins configured for type: "
operator|+
name|type
argument_list|)
throw|;
block|}
DECL|method|initLibs
specifier|private
name|void
name|initLibs
parameter_list|()
block|{
name|NodeList
name|nodes
init|=
operator|(
name|NodeList
operator|)
name|evaluate
argument_list|(
literal|"lib"
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|==
literal|null
operator|||
name|nodes
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|log
operator|.
name|info
argument_list|(
literal|"Adding specified lib dirs to ClassLoader"
argument_list|)
expr_stmt|;
name|SolrResourceLoader
name|loader
init|=
name|getResourceLoader
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|baseDir
init|=
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
literal|"dir"
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
literal|"path"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|baseDir
condition|)
block|{
comment|// :TODO: add support for a simpler 'glob' mutually exclusive of regex
name|String
name|regex
init|=
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
literal|"regex"
argument_list|)
decl_stmt|;
name|FileFilter
name|filter
init|=
operator|(
literal|null
operator|==
name|regex
operator|)
condition|?
literal|null
else|:
operator|new
name|RegexFileFilter
argument_list|(
name|regex
argument_list|)
decl_stmt|;
name|loader
operator|.
name|addToClassLoader
argument_list|(
name|baseDir
argument_list|,
name|filter
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|null
operator|!=
name|path
condition|)
block|{
specifier|final
name|File
name|file
init|=
name|FileUtils
operator|.
name|resolvePath
argument_list|(
operator|new
name|File
argument_list|(
name|loader
operator|.
name|getInstanceDir
argument_list|()
argument_list|)
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|loader
operator|.
name|addToClassLoader
argument_list|(
name|file
operator|.
name|getParent
argument_list|()
argument_list|,
operator|new
name|FileFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|pathname
parameter_list|)
block|{
return|return
name|pathname
operator|.
name|equals
argument_list|(
name|file
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"lib: missing mandatory attributes: 'dir' or 'path'"
argument_list|)
throw|;
block|}
block|}
block|}
finally|finally
block|{
name|loader
operator|.
name|reloadLuceneSPI
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getMultipartUploadLimitKB
specifier|public
name|int
name|getMultipartUploadLimitKB
parameter_list|()
block|{
return|return
name|multipartUploadLimitKB
return|;
block|}
DECL|method|getFormUploadLimitKB
specifier|public
name|int
name|getFormUploadLimitKB
parameter_list|()
block|{
return|return
name|formUploadLimitKB
return|;
block|}
DECL|method|isHandleSelect
specifier|public
name|boolean
name|isHandleSelect
parameter_list|()
block|{
return|return
name|handleSelect
return|;
block|}
DECL|method|isAddHttpRequestToContext
specifier|public
name|boolean
name|isAddHttpRequestToContext
parameter_list|()
block|{
return|return
name|addHttpRequestToContext
return|;
block|}
DECL|method|isEnableRemoteStreams
specifier|public
name|boolean
name|isEnableRemoteStreams
parameter_list|()
block|{
return|return
name|enableRemoteStreams
return|;
block|}
annotation|@
name|Override
DECL|method|getInt
specifier|public
name|int
name|getInt
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|getInt
argument_list|(
name|path
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getInt
specifier|public
name|int
name|getInt
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|def
parameter_list|)
block|{
name|Object
name|v
init|=
name|overlay
operator|.
name|getXPathProperty
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Object
name|val
init|=
name|overlay
operator|.
name|getXPathProperty
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|)
return|;
return|return
name|super
operator|.
name|getInt
argument_list|(
name|path
argument_list|,
name|def
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getBool
specifier|public
name|boolean
name|getBool
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|def
parameter_list|)
block|{
name|Object
name|val
init|=
name|overlay
operator|.
name|getXPathProperty
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|)
return|;
return|return
name|super
operator|.
name|getBool
argument_list|(
name|path
argument_list|,
name|def
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toMap
parameter_list|()
block|{
name|LinkedHashMap
name|result
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|getZnodeVersion
argument_list|()
operator|>
operator|-
literal|1
condition|)
name|result
operator|.
name|put
argument_list|(
literal|"znodeVersion"
argument_list|,
name|getZnodeVersion
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"luceneMatchVersion"
argument_list|,
name|luceneMatchVersion
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"updateHandler"
argument_list|,
name|getUpdateHandlerInfo
argument_list|()
operator|.
name|toMap
argument_list|()
argument_list|)
expr_stmt|;
name|Map
name|m
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"query"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"useFilterForSortedQuery"
argument_list|,
name|useFilterForSortedQuery
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"queryResultWindowSize"
argument_list|,
name|queryResultWindowSize
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"queryResultMaxDocsCached"
argument_list|,
name|queryResultMaxDocsCached
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"enableLazyFieldLoading"
argument_list|,
name|enableLazyFieldLoading
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"maxBooleanClauses"
argument_list|,
name|booleanQueryMaxClauseCount
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrPluginInfo
name|plugin
range|:
name|plugins
control|)
block|{
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|infos
init|=
name|getPluginInfos
argument_list|(
name|plugin
operator|.
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|infos
operator|==
literal|null
operator|||
name|infos
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|String
name|tag
init|=
name|plugin
operator|.
name|tag
decl_stmt|;
name|tag
operator|=
name|tag
operator|.
name|replace
argument_list|(
literal|"/"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|plugin
operator|.
name|options
operator|.
name|contains
argument_list|(
name|PluginOpts
operator|.
name|REQUIRE_NAME
argument_list|)
condition|)
block|{
name|LinkedHashMap
name|items
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|PluginInfo
name|info
range|:
name|infos
control|)
name|items
operator|.
name|put
argument_list|(
name|info
operator|.
name|name
argument_list|,
name|info
operator|.
name|toMap
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tag
operator|.
name|equals
argument_list|(
name|SolrRequestHandler
operator|.
name|TYPE
argument_list|)
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
name|e
range|:
name|overlay
operator|.
name|getReqHandlers
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
name|items
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|items
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|plugin
operator|.
name|options
operator|.
name|contains
argument_list|(
name|MULTI_OK
argument_list|)
condition|)
block|{
name|ArrayList
argument_list|<
name|Map
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PluginInfo
name|info
range|:
name|infos
control|)
name|l
operator|.
name|add
argument_list|(
name|info
operator|.
name|toMap
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|infos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|addCacheConfig
argument_list|(
name|m
argument_list|,
name|filterCacheConfig
argument_list|,
name|queryResultCacheConfig
argument_list|,
name|documentCacheConfig
argument_list|,
name|fieldValueCacheConfig
argument_list|)
expr_stmt|;
if|if
condition|(
name|jmxConfig
operator|!=
literal|null
condition|)
name|result
operator|.
name|put
argument_list|(
literal|"jmx"
argument_list|,
name|jmxConfig
operator|.
name|toMap
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|=
operator|new
name|LinkedHashMap
argument_list|()
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"requestDispatcher"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"handleSelect"
argument_list|,
name|handleSelect
argument_list|)
expr_stmt|;
if|if
condition|(
name|httpCachingConfig
operator|!=
literal|null
condition|)
name|m
operator|.
name|put
argument_list|(
literal|"httpCaching"
argument_list|,
name|httpCachingConfig
operator|.
name|toMap
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"requestParsers"
argument_list|,
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
literal|"multipartUploadLimitKB"
argument_list|,
name|multipartUploadLimitKB
argument_list|,
literal|"formUploadLimitKB"
argument_list|,
name|formUploadLimitKB
argument_list|,
literal|"addHttpRequestToContext"
argument_list|,
name|addHttpRequestToContext
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexConfig
operator|!=
literal|null
condition|)
name|result
operator|.
name|put
argument_list|(
literal|"indexConfig"
argument_list|,
name|indexConfig
operator|.
name|toMap
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO there is more to add
return|return
name|result
return|;
block|}
DECL|method|addCacheConfig
specifier|private
name|void
name|addCacheConfig
parameter_list|(
name|Map
name|queryMap
parameter_list|,
name|CacheConfig
modifier|...
name|cache
parameter_list|)
block|{
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|CacheConfig
name|config
range|:
name|cache
control|)
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
name|queryMap
operator|.
name|put
argument_list|(
name|config
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|config
operator|.
name|toMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSubstituteProperties
specifier|protected
name|Properties
name|getSubstituteProperties
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|p
init|=
name|getOverlay
argument_list|()
operator|.
name|getUserProps
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
operator|||
name|p
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|super
operator|.
name|getSubstituteProperties
argument_list|()
return|;
name|Properties
name|result
init|=
operator|new
name|Properties
argument_list|(
name|super
operator|.
name|getSubstituteProperties
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|putAll
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|field|overlay
specifier|private
name|ConfigOverlay
name|overlay
decl_stmt|;
DECL|method|getOverlay
specifier|public
name|ConfigOverlay
name|getOverlay
parameter_list|()
block|{
if|if
condition|(
name|overlay
operator|==
literal|null
condition|)
block|{
name|overlay
operator|=
name|getConfigOverlay
argument_list|(
name|getResourceLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|overlay
return|;
block|}
block|}
end_class
end_unit
