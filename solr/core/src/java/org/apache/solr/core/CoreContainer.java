begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ZkController
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ZkSolrResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZooKeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ExecutorUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CollectionsHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CoreAdminHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|InfoHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandlerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|logging
operator|.
name|LogWatcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchemaFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateShardHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DefaultSolrThreadFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import
begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import
begin_comment
comment|/**  *  * @since solr 1.3  */
end_comment
begin_class
DECL|class|CoreContainer
specifier|public
class|class
name|CoreContainer
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CoreContainer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|solrCores
specifier|private
specifier|final
name|SolrCores
name|solrCores
init|=
operator|new
name|SolrCores
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|coreInitFailures
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|coreInitFailures
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|coreAdminHandler
specifier|protected
name|CoreAdminHandler
name|coreAdminHandler
init|=
literal|null
decl_stmt|;
DECL|field|collectionsHandler
specifier|protected
name|CollectionsHandler
name|collectionsHandler
init|=
literal|null
decl_stmt|;
DECL|field|infoHandler
specifier|private
name|InfoHandler
name|infoHandler
decl_stmt|;
DECL|field|containerProperties
specifier|protected
name|Properties
name|containerProperties
decl_stmt|;
DECL|field|indexSchemaCache
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|IndexSchema
argument_list|>
name|indexSchemaCache
decl_stmt|;
DECL|field|shareSchema
specifier|protected
name|boolean
name|shareSchema
decl_stmt|;
DECL|field|zkSys
specifier|protected
name|ZkContainer
name|zkSys
init|=
operator|new
name|ZkContainer
argument_list|()
decl_stmt|;
DECL|field|shardHandlerFactory
specifier|protected
name|ShardHandlerFactory
name|shardHandlerFactory
decl_stmt|;
DECL|field|updateShardHandler
specifier|private
name|UpdateShardHandler
name|updateShardHandler
decl_stmt|;
DECL|field|logging
specifier|protected
name|LogWatcher
name|logging
init|=
literal|null
decl_stmt|;
DECL|field|backgroundCloser
specifier|private
name|CloserThread
name|backgroundCloser
init|=
literal|null
decl_stmt|;
DECL|field|cfg
specifier|protected
specifier|final
name|ConfigSolr
name|cfg
decl_stmt|;
DECL|field|loader
specifier|protected
specifier|final
name|SolrResourceLoader
name|loader
decl_stmt|;
DECL|field|solrHome
specifier|protected
specifier|final
name|String
name|solrHome
decl_stmt|;
DECL|field|coresLocator
specifier|protected
specifier|final
name|CoresLocator
name|coresLocator
decl_stmt|;
DECL|field|hostName
specifier|private
name|String
name|hostName
decl_stmt|;
comment|// private ClientConnectionManager clientConnectionManager = new PoolingClientConnectionManager();
block|{
name|log
operator|.
name|info
argument_list|(
literal|"New CoreContainer "
operator|+
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new CoreContainer using system properties to detect the solr home    * directory.  The container's cores are not loaded.    * @see #load()    */
DECL|method|CoreContainer
specifier|public
name|CoreContainer
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|SolrResourceLoader
argument_list|(
name|SolrResourceLoader
operator|.
name|locateSolrHome
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new CoreContainer using the given SolrResourceLoader.  The container's    * cores are not loaded.    * @param loader the SolrResourceLoader    * @see #load()    */
DECL|method|CoreContainer
specifier|public
name|CoreContainer
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|)
block|{
name|this
argument_list|(
name|loader
argument_list|,
name|ConfigSolr
operator|.
name|fromSolrHome
argument_list|(
name|loader
argument_list|,
name|loader
operator|.
name|getInstanceDir
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new CoreContainer using the given solr home directory.  The container's    * cores are not loaded.    * @param solrHome a String containing the path to the solr home directory    * @see #load()    */
DECL|method|CoreContainer
specifier|public
name|CoreContainer
parameter_list|(
name|String
name|solrHome
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|SolrResourceLoader
argument_list|(
name|solrHome
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new CoreContainer using the given SolrResourceLoader,    * configuration and CoresLocator.  The container's cores are    * not loaded.    * @param loader the SolrResourceLoader    * @param config a ConfigSolr representation of this container's configuration    * @see #load()    */
DECL|method|CoreContainer
specifier|public
name|CoreContainer
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|,
name|ConfigSolr
name|config
parameter_list|)
block|{
name|this
operator|.
name|loader
operator|=
name|checkNotNull
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|this
operator|.
name|solrHome
operator|=
name|loader
operator|.
name|getInstanceDir
argument_list|()
expr_stmt|;
name|this
operator|.
name|cfg
operator|=
name|checkNotNull
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|this
operator|.
name|coresLocator
operator|=
name|config
operator|.
name|getCoresLocator
argument_list|()
expr_stmt|;
block|}
DECL|method|CoreContainer
specifier|public
name|CoreContainer
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|,
name|ConfigSolr
name|config
parameter_list|,
name|CoresLocator
name|locator
parameter_list|)
block|{
name|this
operator|.
name|loader
operator|=
name|checkNotNull
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|this
operator|.
name|solrHome
operator|=
name|loader
operator|.
name|getInstanceDir
argument_list|()
expr_stmt|;
name|this
operator|.
name|cfg
operator|=
name|checkNotNull
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|this
operator|.
name|coresLocator
operator|=
name|locator
expr_stmt|;
block|}
comment|/**    * This method allows subclasses to construct a CoreContainer    * without any default init behavior.    *     * @param testConstructor pass (Object)null.    * @lucene.experimental    */
DECL|method|CoreContainer
specifier|protected
name|CoreContainer
parameter_list|(
name|Object
name|testConstructor
parameter_list|)
block|{
name|solrHome
operator|=
literal|null
expr_stmt|;
name|loader
operator|=
literal|null
expr_stmt|;
name|coresLocator
operator|=
literal|null
expr_stmt|;
name|cfg
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Create a new CoreContainer and load its cores    * @param solrHome the solr home directory    * @param configFile the file containing this container's configuration    * @return a loaded CoreContainer    */
DECL|method|createAndLoad
specifier|public
specifier|static
name|CoreContainer
name|createAndLoad
parameter_list|(
name|String
name|solrHome
parameter_list|,
name|File
name|configFile
parameter_list|)
block|{
name|SolrResourceLoader
name|loader
init|=
operator|new
name|SolrResourceLoader
argument_list|(
name|solrHome
argument_list|)
decl_stmt|;
name|CoreContainer
name|cc
init|=
operator|new
name|CoreContainer
argument_list|(
name|loader
argument_list|,
name|ConfigSolr
operator|.
name|fromFile
argument_list|(
name|loader
argument_list|,
name|configFile
argument_list|)
argument_list|)
decl_stmt|;
name|cc
operator|.
name|load
argument_list|()
expr_stmt|;
return|return
name|cc
return|;
block|}
DECL|method|getContainerProperties
specifier|public
name|Properties
name|getContainerProperties
parameter_list|()
block|{
return|return
name|containerProperties
return|;
block|}
comment|//-------------------------------------------------------------------
comment|// Initialization / Cleanup
comment|//-------------------------------------------------------------------
comment|/**    * Load the cores defined for this CoreContainer    */
DECL|method|load
specifier|public
name|void
name|load
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Loading cores into CoreContainer [instanceDir={}]"
argument_list|,
name|loader
operator|.
name|getInstanceDir
argument_list|()
argument_list|)
expr_stmt|;
comment|// add the sharedLib to the shared resource loader before initializing cfg based plugins
name|String
name|libDir
init|=
name|cfg
operator|.
name|getSharedLibDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|libDir
operator|!=
literal|null
condition|)
block|{
name|File
name|f
init|=
name|FileUtils
operator|.
name|resolvePath
argument_list|(
operator|new
name|File
argument_list|(
name|solrHome
argument_list|)
argument_list|,
name|libDir
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"loading shared library: "
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|loader
operator|.
name|addToClassLoader
argument_list|(
name|libDir
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|loader
operator|.
name|reloadLuceneSPI
argument_list|()
expr_stmt|;
block|}
name|shardHandlerFactory
operator|=
name|ShardHandlerFactory
operator|.
name|newInstance
argument_list|(
name|cfg
operator|.
name|getShardHandlerFactoryPluginInfo
argument_list|()
argument_list|,
name|loader
argument_list|)
expr_stmt|;
name|updateShardHandler
operator|=
operator|new
name|UpdateShardHandler
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|solrCores
operator|.
name|allocateLazyCores
argument_list|(
name|cfg
operator|.
name|getTransientCacheSize
argument_list|()
argument_list|,
name|loader
argument_list|)
expr_stmt|;
name|logging
operator|=
name|LogWatcher
operator|.
name|newRegisteredLogWatcher
argument_list|(
name|cfg
operator|.
name|getLogWatcherConfig
argument_list|()
argument_list|,
name|loader
argument_list|)
expr_stmt|;
name|shareSchema
operator|=
name|cfg
operator|.
name|hasSchemaCache
argument_list|()
expr_stmt|;
if|if
condition|(
name|shareSchema
condition|)
block|{
name|indexSchemaCache
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|hostName
operator|=
name|cfg
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Host Name: "
operator|+
name|hostName
argument_list|)
expr_stmt|;
name|zkSys
operator|.
name|initZooKeeper
argument_list|(
name|this
argument_list|,
name|solrHome
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|collectionsHandler
operator|=
name|createHandler
argument_list|(
name|cfg
operator|.
name|getCollectionsHandlerClass
argument_list|()
argument_list|,
name|CollectionsHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|infoHandler
operator|=
name|createHandler
argument_list|(
name|cfg
operator|.
name|getInfoHandlerClass
argument_list|()
argument_list|,
name|InfoHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|coreAdminHandler
operator|=
name|createHandler
argument_list|(
name|cfg
operator|.
name|getCoreAdminHandlerClass
argument_list|()
argument_list|,
name|CoreAdminHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|containerProperties
operator|=
name|cfg
operator|.
name|getSolrProperties
argument_list|(
literal|"solr"
argument_list|)
expr_stmt|;
comment|// setup executor to load cores in parallel
comment|// do not limit the size of the executor in zk mode since cores may try and wait for each other.
name|ExecutorService
name|coreLoadExecutor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
operator|(
name|zkSys
operator|.
name|getZkController
argument_list|()
operator|==
literal|null
condition|?
name|cfg
operator|.
name|getCoreLoadThreadCount
argument_list|()
else|:
name|Integer
operator|.
name|MAX_VALUE
operator|)
argument_list|,
operator|new
name|DefaultSolrThreadFactory
argument_list|(
literal|"coreLoadExecutor"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|CompletionService
argument_list|<
name|SolrCore
argument_list|>
name|completionService
init|=
operator|new
name|ExecutorCompletionService
argument_list|<>
argument_list|(
name|coreLoadExecutor
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Future
argument_list|<
name|SolrCore
argument_list|>
argument_list|>
name|pending
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CoreDescriptor
argument_list|>
name|cds
init|=
name|coresLocator
operator|.
name|discover
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|checkForDuplicateCoreNames
argument_list|(
name|cds
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|CoreDescriptor
name|cd
range|:
name|cds
control|)
block|{
specifier|final
name|String
name|name
init|=
name|cd
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|cd
operator|.
name|isTransient
argument_list|()
operator|||
operator|!
name|cd
operator|.
name|isLoadOnStartup
argument_list|()
condition|)
block|{
comment|// Store it away for later use. includes non-transient but not
comment|// loaded at startup cores.
name|solrCores
operator|.
name|putDynamicDescriptor
argument_list|(
name|name
argument_list|,
name|cd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cd
operator|.
name|isLoadOnStartup
argument_list|()
condition|)
block|{
comment|// The normal case
name|Callable
argument_list|<
name|SolrCore
argument_list|>
name|task
init|=
operator|new
name|Callable
argument_list|<
name|SolrCore
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SolrCore
name|call
parameter_list|()
block|{
name|SolrCore
name|c
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|zkSys
operator|.
name|getZkController
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|preRegisterInZk
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
name|c
operator|=
name|create
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|registerCore
argument_list|(
name|cd
operator|.
name|isTransient
argument_list|()
argument_list|,
name|name
argument_list|,
name|c
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
comment|/*    if (isZooKeeperAware()) {                     try {                       zkSys.zkController.unregister(name, cd);                     } catch (InterruptedException e2) {                       Thread.currentThread().interrupt();                       SolrException.log(log, null, e2);                     } catch (KeeperException e3) {                       SolrException.log(log, null, e3);                     }                   }*/
block|}
finally|finally
block|{
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|c
return|;
block|}
block|}
decl_stmt|;
name|pending
operator|.
name|add
argument_list|(
name|completionService
operator|.
name|submit
argument_list|(
name|task
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
name|pending
operator|!=
literal|null
operator|&&
name|pending
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Future
argument_list|<
name|SolrCore
argument_list|>
name|future
init|=
name|completionService
operator|.
name|take
argument_list|()
decl_stmt|;
if|if
condition|(
name|future
operator|==
literal|null
condition|)
return|return;
name|pending
operator|.
name|remove
argument_list|(
name|future
argument_list|)
expr_stmt|;
try|try
block|{
name|SolrCore
name|c
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// track original names
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|solrCores
operator|.
name|putCoreToOrigName
argument_list|(
name|c
argument_list|,
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|SolrCore
operator|.
name|log
argument_list|,
literal|"Error loading core"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
literal|"interrupted while loading core"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Start the background thread
name|backgroundCloser
operator|=
operator|new
name|CloserThread
argument_list|(
name|this
argument_list|,
name|solrCores
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|backgroundCloser
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|coreLoadExecutor
operator|!=
literal|null
condition|)
block|{
name|ExecutorUtil
operator|.
name|shutdownNowAndAwaitTermination
argument_list|(
name|coreLoadExecutor
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isZooKeeperAware
argument_list|()
condition|)
block|{
comment|// register in zk in background threads
name|Collection
argument_list|<
name|SolrCore
argument_list|>
name|cores
init|=
name|getCores
argument_list|()
decl_stmt|;
if|if
condition|(
name|cores
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SolrCore
name|core
range|:
name|cores
control|)
block|{
try|try
block|{
name|zkSys
operator|.
name|registerInZk
argument_list|(
name|core
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Error registering SolrCore"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|zkSys
operator|.
name|getZkController
argument_list|()
operator|.
name|checkOverseerDesignate
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkForDuplicateCoreNames
specifier|private
specifier|static
name|void
name|checkForDuplicateCoreNames
parameter_list|(
name|List
argument_list|<
name|CoreDescriptor
argument_list|>
name|cds
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|addedCores
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|CoreDescriptor
name|cd
range|:
name|cds
control|)
block|{
specifier|final
name|String
name|name
init|=
name|cd
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|addedCores
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Found multiple cores with the name [%s], with instancedirs [%s] and [%s]"
argument_list|,
name|name
argument_list|,
name|addedCores
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
name|cd
operator|.
name|getInstanceDir
argument_list|()
argument_list|)
argument_list|)
throw|;
name|addedCores
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|cd
operator|.
name|getInstanceDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|isShutDown
specifier|private
specifier|volatile
name|boolean
name|isShutDown
init|=
literal|false
decl_stmt|;
DECL|method|isShutDown
specifier|public
name|boolean
name|isShutDown
parameter_list|()
block|{
return|return
name|isShutDown
return|;
block|}
comment|/**    * Stops all cores.    */
DECL|method|shutdown
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Shutting down CoreContainer instance="
operator|+
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|isShutDown
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|isZooKeeperAware
argument_list|()
condition|)
block|{
name|cancelCoreRecoveries
argument_list|()
expr_stmt|;
name|zkSys
operator|.
name|publishCoresAsDown
argument_list|(
name|solrCores
operator|.
name|getCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|coreAdminHandler
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error shutting down CoreAdminHandler. Continuing to shutdown CoreContainer."
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
try|try
block|{
comment|// First wake up the closer thread, it'll terminate almost immediately since it checks isShutDown.
synchronized|synchronized
init|(
name|solrCores
operator|.
name|getModifyLock
argument_list|()
init|)
block|{
name|solrCores
operator|.
name|getModifyLock
argument_list|()
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
comment|// wake up anyone waiting
block|}
if|if
condition|(
name|backgroundCloser
operator|!=
literal|null
condition|)
block|{
comment|// Doesn't seem right, but tests get in here without initializing the core.
try|try
block|{
name|backgroundCloser
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"backgroundCloser thread was interrupted before finishing"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Now clear all the cores that are being operated upon.
name|solrCores
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// It's still possible that one of the pending dynamic load operation is waiting, so wake it up if so.
comment|// Since all the pending operations queues have been drained, there should be nothing to do.
synchronized|synchronized
init|(
name|solrCores
operator|.
name|getModifyLock
argument_list|()
init|)
block|{
name|solrCores
operator|.
name|getModifyLock
argument_list|()
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
comment|// wake up the thread
block|}
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|shardHandlerFactory
operator|!=
literal|null
condition|)
block|{
name|shardHandlerFactory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|updateShardHandler
operator|!=
literal|null
condition|)
block|{
name|updateShardHandler
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// we want to close zk stuff last
name|zkSys
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|loader
argument_list|)
expr_stmt|;
comment|// best effort
block|}
DECL|method|cancelCoreRecoveries
specifier|public
name|void
name|cancelCoreRecoveries
parameter_list|()
block|{
name|List
argument_list|<
name|SolrCore
argument_list|>
name|cores
init|=
name|solrCores
operator|.
name|getCores
argument_list|()
decl_stmt|;
comment|// we must cancel without holding the cores sync
comment|// make sure we wait for any recoveries to stop
for|for
control|(
name|SolrCore
name|core
range|:
name|cores
control|)
block|{
try|try
block|{
name|core
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|cancelRecovery
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Error canceling recovery for core"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|finalize
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
if|if
condition|(
operator|!
name|isShutDown
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"CoreContainer was not shutdown prior to finalize(), indicates a bug -- POSSIBLE RESOURCE LEAK!!!  instance="
operator|+
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getCoresLocator
specifier|public
name|CoresLocator
name|getCoresLocator
parameter_list|()
block|{
return|return
name|coresLocator
return|;
block|}
DECL|method|registerCore
specifier|protected
name|SolrCore
name|registerCore
parameter_list|(
name|boolean
name|isTransientCore
parameter_list|,
name|String
name|name
parameter_list|,
name|SolrCore
name|core
parameter_list|,
name|boolean
name|returnPrevNotClosed
parameter_list|)
block|{
return|return
name|registerCore
argument_list|(
name|isTransientCore
argument_list|,
name|name
argument_list|,
name|core
argument_list|,
name|returnPrevNotClosed
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|registerCore
specifier|protected
name|SolrCore
name|registerCore
parameter_list|(
name|boolean
name|isTransientCore
parameter_list|,
name|String
name|name
parameter_list|,
name|SolrCore
name|core
parameter_list|,
name|boolean
name|returnPrevNotClosed
parameter_list|,
name|boolean
name|registerInZk
parameter_list|)
block|{
if|if
condition|(
name|core
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can not register a null core."
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|>=
literal|0
operator|||
name|name
operator|.
name|indexOf
argument_list|(
literal|'\\'
argument_list|)
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid core name: "
operator|+
name|name
argument_list|)
throw|;
block|}
comment|// We can register a core when creating them via the admin UI, so we need to insure that the dynamic descriptors
comment|// are up to date
name|CoreDescriptor
name|cd
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|cd
operator|.
name|isTransient
argument_list|()
operator|||
operator|!
name|cd
operator|.
name|isLoadOnStartup
argument_list|()
operator|)
operator|&&
name|solrCores
operator|.
name|getDynamicDescriptor
argument_list|(
name|name
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// Store it away for later use. includes non-transient but not
comment|// loaded at startup cores.
name|solrCores
operator|.
name|putDynamicDescriptor
argument_list|(
name|name
argument_list|,
name|cd
argument_list|)
expr_stmt|;
block|}
name|SolrCore
name|old
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isShutDown
condition|)
block|{
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"This CoreContainer has been shutdown"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isTransientCore
condition|)
block|{
name|old
operator|=
name|solrCores
operator|.
name|putTransientCore
argument_list|(
name|cfg
argument_list|,
name|name
argument_list|,
name|core
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|old
operator|=
name|solrCores
operator|.
name|putCore
argument_list|(
name|name
argument_list|,
name|core
argument_list|)
expr_stmt|;
block|}
comment|/*       * set both the name of the descriptor and the name of the       * core, since the descriptors name is used for persisting.       */
name|core
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|coreInitFailures
init|)
block|{
name|coreInitFailures
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|old
operator|==
literal|null
operator|||
name|old
operator|==
name|core
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"registering core: "
operator|+
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|registerInZk
condition|)
block|{
name|zkSys
operator|.
name|registerInZk
argument_list|(
name|core
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"replacing core: "
operator|+
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|returnPrevNotClosed
condition|)
block|{
name|old
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|registerInZk
condition|)
block|{
name|zkSys
operator|.
name|registerInZk
argument_list|(
name|core
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|old
return|;
block|}
block|}
comment|/**    * Registers a SolrCore descriptor in the registry using the core's name.    * If returnPrev==false, the old core, if different, is closed.    * @return a previous core having the same name if it existed and returnPrev==true    */
DECL|method|register
specifier|public
name|SolrCore
name|register
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|boolean
name|returnPrev
parameter_list|)
block|{
return|return
name|registerCore
argument_list|(
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|isTransient
argument_list|()
argument_list|,
name|core
operator|.
name|getName
argument_list|()
argument_list|,
name|core
argument_list|,
name|returnPrev
argument_list|)
return|;
block|}
DECL|method|register
specifier|public
name|SolrCore
name|register
parameter_list|(
name|String
name|name
parameter_list|,
name|SolrCore
name|core
parameter_list|,
name|boolean
name|returnPrev
parameter_list|)
block|{
return|return
name|registerCore
argument_list|(
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|isTransient
argument_list|()
argument_list|,
name|name
argument_list|,
name|core
argument_list|,
name|returnPrev
argument_list|)
return|;
block|}
comment|// Helper method to separate out creating a core from local configuration files. See create()
DECL|method|createFromLocal
specifier|private
name|SolrCore
name|createFromLocal
parameter_list|(
name|String
name|instanceDir
parameter_list|,
name|CoreDescriptor
name|dcore
parameter_list|)
block|{
name|SolrResourceLoader
name|solrLoader
init|=
literal|null
decl_stmt|;
name|SolrConfig
name|config
init|=
literal|null
decl_stmt|;
name|solrLoader
operator|=
operator|new
name|SolrResourceLoader
argument_list|(
name|instanceDir
argument_list|,
name|loader
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|dcore
operator|.
name|getSubstitutableProperties
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|config
operator|=
operator|new
name|SolrConfig
argument_list|(
name|solrLoader
argument_list|,
name|dcore
operator|.
name|getConfigName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to load file {}"
argument_list|,
operator|new
name|File
argument_list|(
name|instanceDir
argument_list|,
name|dcore
operator|.
name|getConfigName
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not load config file "
operator|+
operator|new
name|File
argument_list|(
name|instanceDir
argument_list|,
name|dcore
operator|.
name|getConfigName
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|IndexSchema
name|schema
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|indexSchemaCache
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|resourceNameToBeUsed
init|=
name|IndexSchemaFactory
operator|.
name|getResourceNameToBeUsed
argument_list|(
name|dcore
operator|.
name|getSchemaName
argument_list|()
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|File
name|schemaFile
init|=
operator|new
name|File
argument_list|(
name|resourceNameToBeUsed
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|schemaFile
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|schemaFile
operator|=
operator|new
name|File
argument_list|(
name|solrLoader
operator|.
name|getConfigDir
argument_list|()
argument_list|,
name|schemaFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|schemaFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|schemaFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|":"
operator|+
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddHHmmss"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|schemaFile
operator|.
name|lastModified
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|schema
operator|=
name|indexSchemaCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"creating new schema object for core: "
operator|+
name|dcore
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|schema
operator|=
name|IndexSchemaFactory
operator|.
name|buildIndexSchema
argument_list|(
name|dcore
operator|.
name|getSchemaName
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|indexSchemaCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"re-using schema object for core: "
operator|+
name|dcore
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
name|schema
operator|=
name|IndexSchemaFactory
operator|.
name|buildIndexSchema
argument_list|(
name|dcore
operator|.
name|getSchemaName
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
name|SolrCore
name|core
init|=
operator|new
name|SolrCore
argument_list|(
name|dcore
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|config
argument_list|,
name|schema
argument_list|,
name|dcore
argument_list|)
decl_stmt|;
if|if
condition|(
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// always kick off recovery if we are in standalone mode.
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|.
name|recoverFromLog
argument_list|()
expr_stmt|;
block|}
return|return
name|core
return|;
block|}
comment|/**    * Creates a new core based on a descriptor but does not register it.    *    * @param dcore a core descriptor    * @return the newly created core    */
DECL|method|create
specifier|public
name|SolrCore
name|create
parameter_list|(
name|CoreDescriptor
name|dcore
parameter_list|)
block|{
if|if
condition|(
name|isShutDown
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
literal|"Solr has shutdown."
argument_list|)
throw|;
block|}
specifier|final
name|String
name|name
init|=
name|dcore
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Make the instanceDir relative to the cores instanceDir if not absolute
name|File
name|idir
init|=
operator|new
name|File
argument_list|(
name|dcore
operator|.
name|getInstanceDir
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|instanceDir
init|=
name|idir
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Creating SolrCore '{}' using instanceDir: {}"
argument_list|,
name|dcore
operator|.
name|getName
argument_list|()
argument_list|,
name|instanceDir
argument_list|)
expr_stmt|;
comment|// Initialize the solr config
name|SolrCore
name|created
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|zkSys
operator|.
name|getZkController
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|created
operator|=
name|zkSys
operator|.
name|createFromZk
argument_list|(
name|instanceDir
argument_list|,
name|dcore
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|created
operator|=
name|createFromLocal
argument_list|(
name|instanceDir
argument_list|,
name|dcore
argument_list|)
expr_stmt|;
block|}
name|solrCores
operator|.
name|addCreated
argument_list|(
name|created
argument_list|)
expr_stmt|;
comment|// For persisting newly-created cores.
return|return
name|created
return|;
comment|// :TODO: Java7...
comment|// http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
name|recordAndThrow
argument_list|(
name|name
argument_list|,
literal|"Unable to create core: "
operator|+
name|name
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return a Collection of registered SolrCores    */
DECL|method|getCores
specifier|public
name|Collection
argument_list|<
name|SolrCore
argument_list|>
name|getCores
parameter_list|()
block|{
return|return
name|solrCores
operator|.
name|getCores
argument_list|()
return|;
block|}
comment|/**    * @return a Collection of the names that cores are mapped to    */
DECL|method|getCoreNames
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getCoreNames
parameter_list|()
block|{
return|return
name|solrCores
operator|.
name|getCoreNames
argument_list|()
return|;
block|}
comment|/** This method is currently experimental.    * @return a Collection of the names that a specific core is mapped to.    */
DECL|method|getCoreNames
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getCoreNames
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
return|return
name|solrCores
operator|.
name|getCoreNames
argument_list|(
name|core
argument_list|)
return|;
block|}
comment|/**    * get a list of all the cores that are currently loaded    * @return a list of al lthe available core names in either permanent or transient core lists.    */
DECL|method|getAllCoreNames
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getAllCoreNames
parameter_list|()
block|{
return|return
name|solrCores
operator|.
name|getAllCoreNames
argument_list|()
return|;
block|}
comment|/**    * Returns an immutable Map of Exceptions that occured when initializing     * SolrCores (either at startup, or do to runtime requests to create cores)     * keyed off of the name (String) of the SolrCore that had the Exception     * during initialization.    *<p>    * While the Map returned by this method is immutable and will not change     * once returned to the client, the source data used to generate this Map     * can be changed as various SolrCore operations are performed:    *</p>    *<ul>    *<li>Failed attempts to create new SolrCores will add new Exceptions.</li>    *<li>Failed attempts to re-create a SolrCore using a name already contained in this Map will replace the Exception.</li>    *<li>Failed attempts to reload a SolrCore will cause an Exception to be added to this list -- even though the existing SolrCore with that name will continue to be available.</li>    *<li>Successful attempts to re-created a SolrCore using a name already contained in this Map will remove the Exception.</li>    *<li>Registering an existing SolrCore with a name already contained in this Map (ie: ALIAS or SWAP) will remove the Exception.</li>    *</ul>    */
DECL|method|getCoreInitFailures
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|getCoreInitFailures
parameter_list|()
block|{
synchronized|synchronized
init|(
name|coreInitFailures
init|)
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|coreInitFailures
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|// ---------------- Core name related methods ---------------
comment|/**    * Recreates a SolrCore.    * While the new core is loading, requests will continue to be dispatched to    * and processed by the old core    *     * @param name the name of the SolrCore to reload    */
DECL|method|reload
specifier|public
name|void
name|reload
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
name|name
operator|=
name|checkDefault
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|SolrCore
name|core
init|=
name|solrCores
operator|.
name|getCoreFromAnyList
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|core
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No such core: "
operator|+
name|name
argument_list|)
throw|;
try|try
block|{
name|solrCores
operator|.
name|waitAddPendingCoreOps
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|CoreDescriptor
name|cd
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
decl_stmt|;
name|File
name|instanceDir
init|=
operator|new
name|File
argument_list|(
name|cd
operator|.
name|getInstanceDir
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Reloading SolrCore '{}' using instanceDir: {}"
argument_list|,
name|cd
operator|.
name|getName
argument_list|()
argument_list|,
name|instanceDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|SolrResourceLoader
name|solrLoader
decl_stmt|;
if|if
condition|(
name|zkSys
operator|.
name|getZkController
argument_list|()
operator|==
literal|null
condition|)
block|{
name|solrLoader
operator|=
operator|new
name|SolrResourceLoader
argument_list|(
name|instanceDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|loader
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|cd
operator|.
name|getSubstitutableProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|String
name|collection
init|=
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|zkSys
operator|.
name|getZkController
argument_list|()
operator|.
name|createCollectionZkNode
argument_list|(
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|zkConfigName
init|=
name|zkSys
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|readConfigName
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|zkConfigName
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not find config name for collection:"
operator|+
name|collection
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not find config name for collection:"
operator|+
name|collection
argument_list|)
throw|;
block|}
name|solrLoader
operator|=
operator|new
name|ZkSolrResourceLoader
argument_list|(
name|instanceDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|zkConfigName
argument_list|,
name|loader
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|cd
operator|.
name|getSubstitutableProperties
argument_list|()
argument_list|,
name|zkSys
operator|.
name|getZkController
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|SolrCore
name|newCore
init|=
name|core
operator|.
name|reload
argument_list|(
name|solrLoader
argument_list|,
name|core
argument_list|)
decl_stmt|;
comment|// keep core to orig name link
name|solrCores
operator|.
name|removeCoreToOrigName
argument_list|(
name|newCore
argument_list|,
name|core
argument_list|)
expr_stmt|;
name|registerCore
argument_list|(
literal|false
argument_list|,
name|name
argument_list|,
name|newCore
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrCores
operator|.
name|removeFromPendingOps
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|// :TODO: Java7...
comment|// http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
name|recordAndThrow
argument_list|(
name|name
argument_list|,
literal|"Unable to reload core: "
operator|+
name|name
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|//5.0 remove all checkDefaults?
DECL|method|checkDefault
specifier|private
name|String
name|checkDefault
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
literal|null
operator|==
name|name
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|getDefaultCoreName
argument_list|()
else|:
name|name
return|;
block|}
comment|/**    * Swaps two SolrCore descriptors.    */
DECL|method|swap
specifier|public
name|void
name|swap
parameter_list|(
name|String
name|n0
parameter_list|,
name|String
name|n1
parameter_list|)
block|{
if|if
condition|(
name|n0
operator|==
literal|null
operator|||
name|n1
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Can not swap unnamed cores."
argument_list|)
throw|;
block|}
name|n0
operator|=
name|checkDefault
argument_list|(
name|n0
argument_list|)
expr_stmt|;
name|n1
operator|=
name|checkDefault
argument_list|(
name|n1
argument_list|)
expr_stmt|;
name|solrCores
operator|.
name|swap
argument_list|(
name|n0
argument_list|,
name|n1
argument_list|)
expr_stmt|;
name|coresLocator
operator|.
name|swap
argument_list|(
name|this
argument_list|,
name|solrCores
operator|.
name|getCoreDescriptor
argument_list|(
name|n0
argument_list|)
argument_list|,
name|solrCores
operator|.
name|getCoreDescriptor
argument_list|(
name|n1
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"swapped: "
operator|+
name|n0
operator|+
literal|" with "
operator|+
name|n1
argument_list|)
expr_stmt|;
block|}
comment|/** Removes and returns registered core w/o decrementing it's reference count */
DECL|method|remove
specifier|public
name|SolrCore
name|remove
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
name|checkDefault
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|CoreDescriptor
name|cd
init|=
name|solrCores
operator|.
name|getCoreDescriptor
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|SolrCore
name|removed
init|=
name|solrCores
operator|.
name|remove
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|coresLocator
operator|.
name|delete
argument_list|(
name|this
argument_list|,
name|cd
argument_list|)
expr_stmt|;
return|return
name|removed
return|;
block|}
DECL|method|rename
specifier|public
name|void
name|rename
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|toName
parameter_list|)
block|{
name|SolrCore
name|core
init|=
name|getCore
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|registerCore
argument_list|(
literal|false
argument_list|,
name|toName
argument_list|,
name|core
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|name
operator|=
name|checkDefault
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|SolrCore
name|old
init|=
name|solrCores
operator|.
name|remove
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|coresLocator
operator|.
name|rename
argument_list|(
name|this
argument_list|,
name|old
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|,
name|core
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get the CoreDescriptors for all cores managed by this container    * @return a List of CoreDescriptors    */
DECL|method|getCoreDescriptors
specifier|public
name|List
argument_list|<
name|CoreDescriptor
argument_list|>
name|getCoreDescriptors
parameter_list|()
block|{
return|return
name|solrCores
operator|.
name|getCoreDescriptors
argument_list|()
return|;
block|}
DECL|method|getCoreDescriptor
specifier|public
name|CoreDescriptor
name|getCoreDescriptor
parameter_list|(
name|String
name|coreName
parameter_list|)
block|{
comment|// TODO make this less hideous!
for|for
control|(
name|CoreDescriptor
name|cd
range|:
name|getCoreDescriptors
argument_list|()
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|coreName
argument_list|)
condition|)
return|return
name|cd
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getCoreRootDirectory
specifier|public
name|String
name|getCoreRootDirectory
parameter_list|()
block|{
return|return
name|cfg
operator|.
name|getCoreRootDirectory
argument_list|()
return|;
block|}
comment|/**    * Gets a core by name and increase its refcount.    *    * @see SolrCore#close()    * @param name the core name    * @return the core if found, null if a SolrCore by this name does not exist    * @exception SolrException if a SolrCore with this name failed to be initialized    */
DECL|method|getCore
specifier|public
name|SolrCore
name|getCore
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
name|checkDefault
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// Do this in two phases since we don't want to lock access to the cores over a load.
name|SolrCore
name|core
init|=
name|solrCores
operator|.
name|getCoreFromAnyList
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
return|return
name|core
return|;
block|}
comment|// OK, it's not presently in any list, is it in the list of dynamic cores but not loaded yet? If so, load it.
name|CoreDescriptor
name|desc
init|=
name|solrCores
operator|.
name|getDynamicDescriptor
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|==
literal|null
condition|)
block|{
comment|//Nope, no transient core with this name
comment|// if there was an error initalizing this core, throw a 500
comment|// error with the details for clients attempting to access it.
name|Exception
name|e
init|=
name|getCoreInitFailures
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|e
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"SolrCore '"
operator|+
name|name
operator|+
literal|"' is not available due to init failure: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// otherwise the user is simply asking for something that doesn't exist.
return|return
literal|null
return|;
block|}
comment|// This will put an entry in pending core ops if the core isn't loaded
name|core
operator|=
name|solrCores
operator|.
name|waitAddPendingCoreOps
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|isShutDown
condition|)
return|return
literal|null
return|;
comment|// We're quitting, so stop. This needs to be after the wait above since we may come off
comment|// the wait as a consequence of shutting down.
try|try
block|{
if|if
condition|(
name|core
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|zkSys
operator|.
name|getZkController
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|preRegisterInZk
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
name|core
operator|=
name|create
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// This should throw an error if it fails.
name|core
operator|.
name|open
argument_list|()
expr_stmt|;
name|registerCore
argument_list|(
name|desc
operator|.
name|isTransient
argument_list|()
argument_list|,
name|name
argument_list|,
name|core
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|core
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// remains to be seen how transient cores and such
comment|// will work in SolrCloud mode, but just to be future
comment|// proof...
comment|/*if (isZooKeeperAware()) {         try {           getZkController().unregister(name, desc);         } catch (InterruptedException e) {           Thread.currentThread().interrupt();           SolrException.log(log, null, e);         } catch (KeeperException e) {           SolrException.log(log, null, e);         }       }*/
throw|throw
name|recordAndThrow
argument_list|(
name|name
argument_list|,
literal|"Unable to create core: "
operator|+
name|name
argument_list|,
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
name|solrCores
operator|.
name|removeFromPendingOps
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|core
return|;
block|}
comment|// ---------------- CoreContainer request handlers --------------
DECL|method|createHandler
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|createHandler
parameter_list|(
name|String
name|handlerClass
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|loader
operator|.
name|newInstance
argument_list|(
name|handlerClass
argument_list|,
name|clazz
argument_list|,
literal|null
argument_list|,
operator|new
name|Class
index|[]
block|{
name|CoreContainer
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|this
block|}
argument_list|)
return|;
block|}
DECL|method|getMultiCoreHandler
specifier|public
name|CoreAdminHandler
name|getMultiCoreHandler
parameter_list|()
block|{
return|return
name|coreAdminHandler
return|;
block|}
DECL|method|getCollectionsHandler
specifier|public
name|CollectionsHandler
name|getCollectionsHandler
parameter_list|()
block|{
return|return
name|collectionsHandler
return|;
block|}
DECL|method|getInfoHandler
specifier|public
name|InfoHandler
name|getInfoHandler
parameter_list|()
block|{
return|return
name|infoHandler
return|;
block|}
comment|// ---------------- Multicore self related methods ---------------
comment|/**    * the default core name, or null if there is no default core name    */
DECL|method|getDefaultCoreName
specifier|public
name|String
name|getDefaultCoreName
parameter_list|()
block|{
return|return
name|cfg
operator|.
name|getDefaultCoreName
argument_list|()
return|;
block|}
comment|// all of the following properties aren't synchronized
comment|// but this should be OK since they normally won't be changed rapidly
annotation|@
name|Deprecated
DECL|method|isPersistent
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
name|cfg
operator|.
name|isPersistent
argument_list|()
return|;
block|}
DECL|method|getAdminPath
specifier|public
name|String
name|getAdminPath
parameter_list|()
block|{
return|return
name|cfg
operator|.
name|getAdminPath
argument_list|()
return|;
block|}
DECL|method|getHostName
specifier|public
name|String
name|getHostName
parameter_list|()
block|{
return|return
name|this
operator|.
name|hostName
return|;
block|}
comment|/**    * Gets the alternate path for multicore handling:    * This is used in case there is a registered unnamed core (aka name is "") to    * declare an alternate way of accessing named cores.    * This can also be used in a pseudo single-core environment so admins can prepare    * a new version before swapping.    */
DECL|method|getManagementPath
specifier|public
name|String
name|getManagementPath
parameter_list|()
block|{
return|return
name|cfg
operator|.
name|getManagementPath
argument_list|()
return|;
block|}
DECL|method|getLogging
specifier|public
name|LogWatcher
name|getLogging
parameter_list|()
block|{
return|return
name|logging
return|;
block|}
comment|/**    * Determines whether the core is already loaded or not but does NOT load the core    *    */
DECL|method|isLoaded
specifier|public
name|boolean
name|isLoaded
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|solrCores
operator|.
name|isLoaded
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|isLoadedNotPendingClose
specifier|public
name|boolean
name|isLoadedNotPendingClose
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|solrCores
operator|.
name|isLoadedNotPendingClose
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Gets a solr core descriptor for a core that is not loaded. Note that if the caller calls this on a    * loaded core, the unloaded descriptor will be returned.    *    * @param cname - name of the unloaded core descriptor to load. NOTE:    * @return a coreDescriptor. May return null    */
DECL|method|getUnloadedCoreDescriptor
specifier|public
name|CoreDescriptor
name|getUnloadedCoreDescriptor
parameter_list|(
name|String
name|cname
parameter_list|)
block|{
return|return
name|solrCores
operator|.
name|getUnloadedCoreDescriptor
argument_list|(
name|cname
argument_list|)
return|;
block|}
DECL|method|preRegisterInZk
specifier|public
name|void
name|preRegisterInZk
parameter_list|(
specifier|final
name|CoreDescriptor
name|p
parameter_list|)
block|{
name|zkSys
operator|.
name|getZkController
argument_list|()
operator|.
name|preRegister
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
DECL|method|getSolrHome
specifier|public
name|String
name|getSolrHome
parameter_list|()
block|{
return|return
name|solrHome
return|;
block|}
DECL|method|isZooKeeperAware
specifier|public
name|boolean
name|isZooKeeperAware
parameter_list|()
block|{
return|return
name|zkSys
operator|.
name|getZkController
argument_list|()
operator|!=
literal|null
return|;
block|}
DECL|method|getZkController
specifier|public
name|ZkController
name|getZkController
parameter_list|()
block|{
return|return
name|zkSys
operator|.
name|getZkController
argument_list|()
return|;
block|}
DECL|method|isShareSchema
specifier|public
name|boolean
name|isShareSchema
parameter_list|()
block|{
return|return
name|shareSchema
return|;
block|}
comment|/** The default ShardHandlerFactory used to communicate with other solr instances */
DECL|method|getShardHandlerFactory
specifier|public
name|ShardHandlerFactory
name|getShardHandlerFactory
parameter_list|()
block|{
return|return
name|shardHandlerFactory
return|;
block|}
DECL|method|getUpdateShardHandler
specifier|public
name|UpdateShardHandler
name|getUpdateShardHandler
parameter_list|()
block|{
return|return
name|updateShardHandler
return|;
block|}
comment|// Just to tidy up the code where it did this in-line.
DECL|method|recordAndThrow
specifier|private
name|SolrException
name|recordAndThrow
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|msg
parameter_list|,
name|Exception
name|ex
parameter_list|)
block|{
synchronized|synchronized
init|(
name|coreInitFailures
init|)
block|{
name|coreInitFailures
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|coreInitFailures
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|msg
argument_list|,
name|ex
argument_list|)
return|;
block|}
DECL|method|getCoreToOrigName
name|String
name|getCoreToOrigName
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
return|return
name|solrCores
operator|.
name|getCoreToOrigName
argument_list|(
name|core
argument_list|)
return|;
block|}
block|}
end_class
begin_class
DECL|class|CloserThread
class|class
name|CloserThread
extends|extends
name|Thread
block|{
DECL|field|container
name|CoreContainer
name|container
decl_stmt|;
DECL|field|solrCores
name|SolrCores
name|solrCores
decl_stmt|;
DECL|field|cfg
name|ConfigSolr
name|cfg
decl_stmt|;
DECL|method|CloserThread
name|CloserThread
parameter_list|(
name|CoreContainer
name|container
parameter_list|,
name|SolrCores
name|solrCores
parameter_list|,
name|ConfigSolr
name|cfg
parameter_list|)
block|{
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
name|this
operator|.
name|solrCores
operator|=
name|solrCores
expr_stmt|;
name|this
operator|.
name|cfg
operator|=
name|cfg
expr_stmt|;
block|}
comment|// It's important that this be the _only_ thread removing things from pendingDynamicCloses!
comment|// This is single-threaded, but I tried a multi-threaded approach and didn't see any performance gains, so
comment|// there's no good justification for the complexity. I suspect that the locking on things like DefaultSolrCoreState
comment|// essentially create a single-threaded process anyway.
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|container
operator|.
name|isShutDown
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|solrCores
operator|.
name|getModifyLock
argument_list|()
init|)
block|{
comment|// need this so we can wait and be awoken.
try|try
block|{
name|solrCores
operator|.
name|getModifyLock
argument_list|()
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Well, if we've been told to stop, we will. Otherwise, continue on and check to see if there are
comment|// any cores to close.
block|}
block|}
for|for
control|(
name|SolrCore
name|removeMe
init|=
name|solrCores
operator|.
name|getCoreToClose
argument_list|()
init|;
name|removeMe
operator|!=
literal|null
operator|&&
operator|!
name|container
operator|.
name|isShutDown
argument_list|()
condition|;
name|removeMe
operator|=
name|solrCores
operator|.
name|getCoreToClose
argument_list|()
control|)
block|{
try|try
block|{
name|removeMe
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|solrCores
operator|.
name|removeFromPendingOps
argument_list|(
name|removeMe
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
