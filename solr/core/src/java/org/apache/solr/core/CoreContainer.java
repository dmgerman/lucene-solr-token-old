begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMResult
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|CurrentCoreDescriptorProvider
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|SolrZkServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ZkController
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ZkSolrResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZooKeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ExecutorUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CollectionsHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CoreAdminHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|HttpShardHandlerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandlerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|logging
operator|.
name|ListenerConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|logging
operator|.
name|LogWatcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|logging
operator|.
name|jul
operator|.
name|JulWatcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Log4jWatcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchemaFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|SolrCoreState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DefaultSolrThreadFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|PropertiesUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|SystemIdResolver
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|PluginInfoInitialized
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|impl
operator|.
name|StaticLoggerBinder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import
begin_comment
comment|/**  *  * @since solr 1.3  */
end_comment
begin_class
DECL|class|CoreContainer
specifier|public
class|class
name|CoreContainer
block|{
DECL|field|LEADER_VOTE_WAIT
specifier|private
specifier|static
specifier|final
name|String
name|LEADER_VOTE_WAIT
init|=
literal|"180000"
decl_stmt|;
comment|// 3 minutes
DECL|field|CORE_LOAD_THREADS
specifier|private
specifier|static
specifier|final
name|int
name|CORE_LOAD_THREADS
init|=
literal|3
decl_stmt|;
comment|/** @deprecated will be remove in Solr 5.0 (SOLR-4622) */
DECL|field|DEFAULT_HOST_CONTEXT
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_HOST_CONTEXT
init|=
literal|"solr"
decl_stmt|;
comment|/** @deprecated will be remove in Solr 5.0 (SOLR-4622) */
DECL|field|DEFAULT_HOST_PORT
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_HOST_PORT
init|=
literal|"8983"
decl_stmt|;
DECL|field|DEFAULT_ZK_CLIENT_TIMEOUT
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_ZK_CLIENT_TIMEOUT
init|=
literal|15000
decl_stmt|;
DECL|field|DEFAULT_DEFAULT_CORE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_DEFAULT_CORE_NAME
init|=
literal|"collection1"
decl_stmt|;
DECL|field|DEFAULT_SHARE_SCHEMA
specifier|private
specifier|static
specifier|final
name|boolean
name|DEFAULT_SHARE_SCHEMA
init|=
literal|false
decl_stmt|;
DECL|field|log
specifier|protected
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CoreContainer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|coreMaps
specifier|private
specifier|final
name|CoreMaps
name|coreMaps
init|=
operator|new
name|CoreMaps
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|coreInitFailures
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|coreInitFailures
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|persistent
specifier|protected
name|boolean
name|persistent
init|=
literal|false
decl_stmt|;
DECL|field|adminPath
specifier|protected
name|String
name|adminPath
init|=
literal|null
decl_stmt|;
DECL|field|managementPath
specifier|protected
name|String
name|managementPath
init|=
literal|null
decl_stmt|;
DECL|field|hostPort
specifier|protected
name|String
name|hostPort
decl_stmt|;
DECL|field|hostContext
specifier|protected
name|String
name|hostContext
decl_stmt|;
DECL|field|host
specifier|protected
name|String
name|host
decl_stmt|;
DECL|field|coreAdminHandler
specifier|protected
name|CoreAdminHandler
name|coreAdminHandler
init|=
literal|null
decl_stmt|;
DECL|field|collectionsHandler
specifier|protected
name|CollectionsHandler
name|collectionsHandler
init|=
literal|null
decl_stmt|;
DECL|field|configFile
specifier|protected
name|File
name|configFile
init|=
literal|null
decl_stmt|;
DECL|field|libDir
specifier|protected
name|String
name|libDir
init|=
literal|null
decl_stmt|;
DECL|field|loader
specifier|protected
name|SolrResourceLoader
name|loader
init|=
literal|null
decl_stmt|;
DECL|field|containerProperties
specifier|protected
name|Properties
name|containerProperties
decl_stmt|;
DECL|field|indexSchemaCache
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|IndexSchema
argument_list|>
name|indexSchemaCache
decl_stmt|;
DECL|field|adminHandler
specifier|protected
name|String
name|adminHandler
decl_stmt|;
DECL|field|shareSchema
specifier|protected
name|boolean
name|shareSchema
decl_stmt|;
DECL|field|zkClientTimeout
specifier|protected
name|Integer
name|zkClientTimeout
decl_stmt|;
DECL|field|solrHome
specifier|protected
name|String
name|solrHome
decl_stmt|;
DECL|field|defaultCoreName
specifier|protected
name|String
name|defaultCoreName
init|=
literal|null
decl_stmt|;
DECL|field|zkController
specifier|private
name|ZkController
name|zkController
decl_stmt|;
DECL|field|zkServer
specifier|private
name|SolrZkServer
name|zkServer
decl_stmt|;
DECL|field|shardHandlerFactory
specifier|private
name|ShardHandlerFactory
name|shardHandlerFactory
decl_stmt|;
DECL|field|logging
specifier|protected
name|LogWatcher
name|logging
init|=
literal|null
decl_stmt|;
DECL|field|zkHost
specifier|private
name|String
name|zkHost
decl_stmt|;
DECL|field|transientCacheSize
specifier|private
name|int
name|transientCacheSize
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|leaderVoteWait
specifier|private
name|String
name|leaderVoteWait
init|=
name|LEADER_VOTE_WAIT
decl_stmt|;
DECL|field|distribUpdateConnTimeout
specifier|private
name|int
name|distribUpdateConnTimeout
init|=
literal|0
decl_stmt|;
DECL|field|distribUpdateSoTimeout
specifier|private
name|int
name|distribUpdateSoTimeout
init|=
literal|0
decl_stmt|;
DECL|field|coreLoadThreads
specifier|private
name|int
name|coreLoadThreads
decl_stmt|;
DECL|field|backgroundCloser
specifier|private
name|CloserThread
name|backgroundCloser
init|=
literal|null
decl_stmt|;
DECL|field|cfg
specifier|protected
specifier|volatile
name|ConfigSolr
name|cfg
decl_stmt|;
DECL|field|origCfg
specifier|private
name|Config
name|origCfg
decl_stmt|;
block|{
name|log
operator|.
name|info
argument_list|(
literal|"New CoreContainer "
operator|+
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deprecated    * @deprecated use the single arg constructor with locateSolrHome()    * @see SolrResourceLoader#locateSolrHome    */
annotation|@
name|Deprecated
DECL|method|CoreContainer
specifier|public
name|CoreContainer
parameter_list|()
block|{
name|this
argument_list|(
name|SolrResourceLoader
operator|.
name|locateSolrHome
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initalize CoreContainer directly from the constructor    */
DECL|method|CoreContainer
specifier|public
name|CoreContainer
parameter_list|(
name|String
name|dir
parameter_list|,
name|File
name|configFile
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|this
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|this
operator|.
name|load
argument_list|(
name|dir
argument_list|,
name|configFile
argument_list|)
expr_stmt|;
block|}
comment|/**    * Minimal CoreContainer constructor.    * @param loader the CoreContainer resource loader    */
DECL|method|CoreContainer
specifier|public
name|CoreContainer
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|)
block|{
name|this
argument_list|(
name|loader
operator|.
name|getInstanceDir
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|loader
operator|=
name|loader
expr_stmt|;
block|}
DECL|method|CoreContainer
specifier|public
name|CoreContainer
parameter_list|(
name|String
name|solrHome
parameter_list|)
block|{
name|this
operator|.
name|solrHome
operator|=
name|solrHome
expr_stmt|;
block|}
DECL|method|getSolrConfigFromZk
specifier|public
name|SolrConfig
name|getSolrConfigFromZk
parameter_list|(
name|String
name|zkConfigName
parameter_list|,
name|String
name|solrConfigFileName
parameter_list|,
name|SolrResourceLoader
name|resourceLoader
parameter_list|)
block|{
name|SolrConfig
name|cfg
init|=
literal|null
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|config
init|=
name|zkController
operator|.
name|getConfigFileData
argument_list|(
name|zkConfigName
argument_list|,
name|solrConfigFileName
argument_list|)
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|is
operator|.
name|setSystemId
argument_list|(
name|SystemIdResolver
operator|.
name|createSystemIdFromResourceName
argument_list|(
name|solrConfigFileName
argument_list|)
argument_list|)
expr_stmt|;
name|cfg
operator|=
name|solrConfigFileName
operator|==
literal|null
condition|?
operator|new
name|SolrConfig
argument_list|(
name|resourceLoader
argument_list|,
name|SolrConfig
operator|.
name|DEFAULT_CONF_FILE
argument_list|,
name|is
argument_list|)
else|:
operator|new
name|SolrConfig
argument_list|(
name|resourceLoader
argument_list|,
name|solrConfigFileName
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"getSolrConfigFromZK failed for "
operator|+
name|zkConfigName
operator|+
literal|" "
operator|+
name|solrConfigFileName
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|cfg
return|;
block|}
DECL|method|initZooKeeper
specifier|protected
name|void
name|initZooKeeper
parameter_list|(
name|String
name|zkHost
parameter_list|,
name|int
name|zkClientTimeout
parameter_list|)
block|{
comment|// if zkHost sys property is not set, we are not using ZooKeeper
name|String
name|zookeeperHost
decl_stmt|;
if|if
condition|(
name|zkHost
operator|==
literal|null
condition|)
block|{
name|zookeeperHost
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"zkHost"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|zookeeperHost
operator|=
name|zkHost
expr_stmt|;
block|}
name|String
name|zkRun
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"zkRun"
argument_list|)
decl_stmt|;
if|if
condition|(
name|zkRun
operator|==
literal|null
operator|&&
name|zookeeperHost
operator|==
literal|null
condition|)
return|return;
comment|// not in zk mode
comment|// BEGIN: SOLR-4622: deprecated hardcoded defaults for hostPort& hostContext
if|if
condition|(
literal|null
operator|==
name|hostPort
condition|)
block|{
comment|// throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,
comment|//               "'hostPort' must be configured to run SolrCloud");
name|log
operator|.
name|warn
argument_list|(
literal|"Solr 'hostPort' has not be explicitly configured, using hardcoded default of "
operator|+
name|DEFAULT_HOST_PORT
operator|+
literal|".  This default has been deprecated and will be removed in future versions of Solr, please configure this value explicitly"
argument_list|)
expr_stmt|;
name|hostPort
operator|=
name|DEFAULT_HOST_PORT
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|hostContext
condition|)
block|{
comment|// throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,
comment|//               "'hostContext' must be configured to run SolrCloud");
name|log
operator|.
name|warn
argument_list|(
literal|"Solr 'hostContext' has not be explicitly configured, using hardcoded default of "
operator|+
name|DEFAULT_HOST_CONTEXT
operator|+
literal|".  This default has been deprecated and will be removed in future versions of Solr, please configure this value explicitly"
argument_list|)
expr_stmt|;
name|hostContext
operator|=
name|DEFAULT_HOST_CONTEXT
expr_stmt|;
block|}
comment|// END: SOLR-4622
comment|// zookeeper in quorum mode currently causes a failure when trying to
comment|// register log4j mbeans.  See SOLR-2369
comment|// TODO: remove after updating to an slf4j based zookeeper
name|System
operator|.
name|setProperty
argument_list|(
literal|"zookeeper.jmx.log4j.disable"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
name|zkRun
operator|!=
literal|null
condition|)
block|{
name|String
name|zkDataHome
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"zkServerDataDir"
argument_list|,
name|solrHome
operator|+
literal|"zoo_data"
argument_list|)
decl_stmt|;
name|String
name|zkConfHome
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"zkServerConfDir"
argument_list|,
name|solrHome
argument_list|)
decl_stmt|;
name|zkServer
operator|=
operator|new
name|SolrZkServer
argument_list|(
name|zkRun
argument_list|,
name|zookeeperHost
argument_list|,
name|zkDataHome
argument_list|,
name|zkConfHome
argument_list|,
name|hostPort
argument_list|)
expr_stmt|;
name|zkServer
operator|.
name|parseConfig
argument_list|()
expr_stmt|;
name|zkServer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// set client from server config if not already set
if|if
condition|(
name|zookeeperHost
operator|==
literal|null
condition|)
block|{
name|zookeeperHost
operator|=
name|zkServer
operator|.
name|getClientString
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|zkClientConnectTimeout
init|=
literal|15000
decl_stmt|;
if|if
condition|(
name|zookeeperHost
operator|!=
literal|null
condition|)
block|{
comment|// we are ZooKeeper enabled
try|try
block|{
comment|// If this is an ensemble, allow for a long connect time for other servers to come up
if|if
condition|(
name|zkRun
operator|!=
literal|null
operator|&&
name|zkServer
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|zkClientConnectTimeout
operator|=
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
expr_stmt|;
comment|// 1 day for embedded ensemble
name|log
operator|.
name|info
argument_list|(
literal|"Zookeeper client="
operator|+
name|zookeeperHost
operator|+
literal|"  Waiting for a quorum."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Zookeeper client="
operator|+
name|zookeeperHost
argument_list|)
expr_stmt|;
block|}
name|String
name|confDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"bootstrap_confdir"
argument_list|)
decl_stmt|;
name|boolean
name|boostrapConf
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"bootstrap_conf"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ZkController
operator|.
name|checkChrootPath
argument_list|(
name|zookeeperHost
argument_list|,
operator|(
name|confDir
operator|!=
literal|null
operator|)
operator|||
name|boostrapConf
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"A chroot was specified in ZkHost but the znode doesn't exist. "
argument_list|)
throw|;
block|}
name|zkController
operator|=
operator|new
name|ZkController
argument_list|(
name|this
argument_list|,
name|zookeeperHost
argument_list|,
name|zkClientTimeout
argument_list|,
name|zkClientConnectTimeout
argument_list|,
name|host
argument_list|,
name|hostPort
argument_list|,
name|hostContext
argument_list|,
name|leaderVoteWait
argument_list|,
name|distribUpdateConnTimeout
argument_list|,
name|distribUpdateSoTimeout
argument_list|,
operator|new
name|CurrentCoreDescriptorProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CoreDescriptor
argument_list|>
name|getCurrentDescriptors
parameter_list|()
block|{
name|List
argument_list|<
name|CoreDescriptor
argument_list|>
name|descriptors
init|=
operator|new
name|ArrayList
argument_list|<
name|CoreDescriptor
argument_list|>
argument_list|(
name|getCoreNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SolrCore
name|core
range|:
name|getCores
argument_list|()
control|)
block|{
name|descriptors
operator|.
name|add
argument_list|(
name|core
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|descriptors
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|zkRun
operator|!=
literal|null
operator|&&
name|zkServer
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|confDir
operator|==
literal|null
operator|&&
name|boostrapConf
operator|==
literal|false
condition|)
block|{
comment|// we are part of an ensemble and we are not uploading the config - pause to give the config time
comment|// to get up
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|confDir
operator|!=
literal|null
condition|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|confDir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bootstrap_confdir must be a directory of configuration files"
argument_list|)
throw|;
block|}
name|String
name|confName
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|ZkController
operator|.
name|COLLECTION_PARAM_PREFIX
operator|+
name|ZkController
operator|.
name|CONFIGNAME_PROP
argument_list|,
literal|"configuration1"
argument_list|)
decl_stmt|;
name|zkController
operator|.
name|uploadConfigDir
argument_list|(
name|dir
argument_list|,
name|confName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|boostrapConf
condition|)
block|{
name|ZkController
operator|.
name|bootstrapConf
argument_list|(
name|zkController
operator|.
name|getZkClient
argument_list|()
argument_list|,
name|cfg
argument_list|,
name|solrHome
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not connect to ZooKeeper"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getContainerProperties
specifier|public
name|Properties
name|getContainerProperties
parameter_list|()
block|{
return|return
name|containerProperties
return|;
block|}
comment|// Helper class to initialize the CoreContainer
DECL|class|Initializer
specifier|public
specifier|static
class|class
name|Initializer
block|{
DECL|field|containerConfigFilename
specifier|protected
name|String
name|containerConfigFilename
init|=
literal|null
decl_stmt|;
comment|// normally "solr.xml" becoming solr.properties in 5.0
DECL|field|dataDir
specifier|protected
name|String
name|dataDir
init|=
literal|null
decl_stmt|;
comment|// override datadir for single core mode
comment|// core container instantiation
DECL|method|initialize
specifier|public
name|CoreContainer
name|initialize
parameter_list|()
throws|throws
name|FileNotFoundException
block|{
name|CoreContainer
name|cores
init|=
literal|null
decl_stmt|;
name|String
name|solrHome
init|=
name|SolrResourceLoader
operator|.
name|locateSolrHome
argument_list|()
decl_stmt|;
comment|// ContainerConfigFilename could  could be a properties file
name|File
name|fconf
init|=
operator|new
name|File
argument_list|(
name|solrHome
argument_list|,
name|containerConfigFilename
operator|==
literal|null
condition|?
literal|"solr.xml"
else|:
name|containerConfigFilename
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"looking for solr config file: "
operator|+
name|fconf
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|cores
operator|=
operator|new
name|CoreContainer
argument_list|(
name|solrHome
argument_list|)
expr_stmt|;
comment|// Either we have a config file or not.
if|if
condition|(
name|fconf
operator|.
name|exists
argument_list|()
condition|)
block|{
name|cores
operator|.
name|load
argument_list|(
name|solrHome
argument_list|,
name|fconf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Back compart support
name|log
operator|.
name|info
argument_list|(
literal|"no solr.xml found. using default old-style solr.xml"
argument_list|)
expr_stmt|;
try|try
block|{
name|cores
operator|.
name|load
argument_list|(
name|solrHome
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|ConfigSolrXmlOld
operator|.
name|DEF_SOLR_XML
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"CoreContainer.Initialize failed when trying to load default solr.xml file"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|cores
operator|.
name|configFile
operator|=
name|fconf
expr_stmt|;
block|}
name|containerConfigFilename
operator|=
name|cores
operator|.
name|getConfigFile
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
return|return
name|cores
return|;
block|}
block|}
comment|//-------------------------------------------------------------------
comment|// Initialization / Cleanup
comment|//-------------------------------------------------------------------
comment|/**    * Load a config file listing the available solr cores.    * @param dir the home directory of all resources.    * @param configFile the configuration file    */
DECL|method|load
specifier|public
name|void
name|load
parameter_list|(
name|String
name|dir
parameter_list|,
name|File
name|configFile
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|this
operator|.
name|configFile
operator|=
name|configFile
expr_stmt|;
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|configFile
argument_list|)
decl_stmt|;
try|try
block|{
name|this
operator|.
name|load
argument_list|(
name|dir
argument_list|,
name|in
argument_list|,
name|configFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Load a config file listing the available solr cores.    *     * @param dir the home directory of all resources.    * @param is the configuration file InputStream. May be a properties file or an xml file    */
comment|// Let's keep this ugly boolean out of public circulation.
DECL|method|load
specifier|protected
name|void
name|load
parameter_list|(
name|String
name|dir
parameter_list|,
name|InputStream
name|is
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
name|ThreadPoolExecutor
name|coreLoadExecutor
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|dir
condition|)
block|{
comment|// don't rely on SolrResourceLoader(), determine explicitly first
name|dir
operator|=
name|SolrResourceLoader
operator|.
name|locateSolrHome
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Loading CoreContainer using Solr Home: '{}'"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|this
operator|.
name|loader
operator|=
operator|new
name|SolrResourceLoader
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|solrHome
operator|=
name|loader
operator|.
name|getInstanceDir
argument_list|()
expr_stmt|;
comment|//ConfigSolr cfg;
comment|// keep orig config for persist to consult. TODO: Remove this silly stuff for 5.0, persistence not supported.
try|try
block|{
name|Config
name|config
init|=
operator|new
name|Config
argument_list|(
name|loader
argument_list|,
literal|null
argument_list|,
operator|new
name|InputSource
argument_list|(
name|is
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|this
operator|.
name|origCfg
operator|=
operator|new
name|Config
argument_list|(
name|loader
argument_list|,
literal|null
argument_list|,
name|copyDoc
argument_list|(
name|config
operator|.
name|getDocument
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|oldStyle
init|=
operator|(
name|config
operator|.
name|getNode
argument_list|(
literal|"solr/cores"
argument_list|,
literal|false
argument_list|)
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|oldStyle
condition|)
block|{
name|this
operator|.
name|cfg
operator|=
operator|new
name|ConfigSolrXmlOld
argument_list|(
name|config
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|cfg
operator|=
operator|new
name|ConfigSolrXml
argument_list|(
name|config
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Since the cores var is now initialized to null, let's set it up right
comment|// now.
name|cfg
operator|.
name|substituteProperties
argument_list|()
expr_stmt|;
comment|// add the sharedLib to the shared resource loader before initializing cfg based plugins
name|libDir
operator|=
name|cfg
operator|.
name|get
argument_list|(
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_SHAREDLIB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|libDir
operator|!=
literal|null
condition|)
block|{
name|File
name|f
init|=
name|FileUtils
operator|.
name|resolvePath
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|)
argument_list|,
name|libDir
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"loading shared library: "
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|loader
operator|.
name|addToClassLoader
argument_list|(
name|libDir
argument_list|)
expr_stmt|;
name|loader
operator|.
name|reloadLuceneSPI
argument_list|()
expr_stmt|;
block|}
name|shardHandlerFactory
operator|=
name|initShardHandler
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|coreMaps
operator|.
name|allocateLazyCores
argument_list|(
name|cfg
argument_list|,
name|loader
argument_list|)
expr_stmt|;
comment|// Initialize Logging
if|if
condition|(
name|cfg
operator|.
name|getBool
argument_list|(
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_LOGGING_ENABLED
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|String
name|slf4jImpl
init|=
literal|null
decl_stmt|;
name|String
name|fname
init|=
name|cfg
operator|.
name|get
argument_list|(
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_LOGGING_CLASS
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|slf4jImpl
operator|=
name|StaticLoggerBinder
operator|.
name|getSingleton
argument_list|()
operator|.
name|getLoggerFactoryClassStr
argument_list|()
expr_stmt|;
if|if
condition|(
name|fname
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|slf4jImpl
operator|.
name|indexOf
argument_list|(
literal|"Log4j"
argument_list|)
operator|>
literal|0
condition|)
block|{
name|fname
operator|=
literal|"Log4j"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|slf4jImpl
operator|.
name|indexOf
argument_list|(
literal|"JDK"
argument_list|)
operator|>
literal|0
condition|)
block|{
name|fname
operator|=
literal|"JUL"
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to read SLF4J version.  LogWatcher will be disabled: "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
comment|// Now load the framework
if|if
condition|(
name|fname
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"JUL"
operator|.
name|equalsIgnoreCase
argument_list|(
name|fname
argument_list|)
condition|)
block|{
name|logging
operator|=
operator|new
name|JulWatcher
argument_list|(
name|slf4jImpl
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"Log4j"
operator|.
name|equals
argument_list|(
name|fname
argument_list|)
condition|)
block|{
name|logging
operator|=
operator|new
name|Log4jWatcher
argument_list|(
name|slf4jImpl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|logging
operator|=
name|loader
operator|.
name|newInstance
argument_list|(
name|fname
argument_list|,
name|LogWatcher
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to load LogWatcher"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|logging
operator|!=
literal|null
condition|)
block|{
name|ListenerConfig
name|v
init|=
operator|new
name|ListenerConfig
argument_list|()
decl_stmt|;
name|v
operator|.
name|size
operator|=
name|cfg
operator|.
name|getInt
argument_list|(
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_LOGGING_WATCHER_SIZE
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|v
operator|.
name|threshold
operator|=
name|cfg
operator|.
name|get
argument_list|(
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_LOGGING_WATCHER_THRESHOLD
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|.
name|size
operator|>
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Registering Log Listener"
argument_list|)
expr_stmt|;
name|logging
operator|.
name|registerListener
argument_list|(
name|v
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|cfg
operator|instanceof
name|ConfigSolrXmlOld
condition|)
block|{
comment|//TODO: Remove for 5.0
name|String
name|dcoreName
init|=
name|cfg
operator|.
name|get
argument_list|(
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_CORES_DEFAULT_CORE_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|dcoreName
operator|!=
literal|null
operator|&&
operator|!
name|dcoreName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|defaultCoreName
operator|=
name|dcoreName
expr_stmt|;
block|}
name|persistent
operator|=
name|cfg
operator|.
name|getBool
argument_list|(
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_PERSISTENT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|adminPath
operator|=
name|cfg
operator|.
name|get
argument_list|(
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_ADMINPATH
argument_list|,
literal|"/admin/cores"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|adminPath
operator|=
literal|"/admin/cores"
expr_stmt|;
block|}
name|zkHost
operator|=
name|cfg
operator|.
name|get
argument_list|(
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_ZKHOST
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|coreLoadThreads
operator|=
name|cfg
operator|.
name|getInt
argument_list|(
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_CORELOADTHREADS
argument_list|,
name|CORE_LOAD_THREADS
argument_list|)
expr_stmt|;
name|shareSchema
operator|=
name|cfg
operator|.
name|getBool
argument_list|(
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_SHARESCHEMA
argument_list|,
name|DEFAULT_SHARE_SCHEMA
argument_list|)
expr_stmt|;
name|zkClientTimeout
operator|=
name|cfg
operator|.
name|getInt
argument_list|(
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_ZKCLIENTTIMEOUT
argument_list|,
name|DEFAULT_ZK_CLIENT_TIMEOUT
argument_list|)
expr_stmt|;
name|distribUpdateConnTimeout
operator|=
name|cfg
operator|.
name|getInt
argument_list|(
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_DISTRIBUPDATECONNTIMEOUT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|distribUpdateSoTimeout
operator|=
name|cfg
operator|.
name|getInt
argument_list|(
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_DISTRIBUPDATESOTIMEOUT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Note: initZooKeeper will apply hardcoded default if cloud mode
name|hostPort
operator|=
name|cfg
operator|.
name|get
argument_list|(
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_HOSTPORT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Note: initZooKeeper will apply hardcoded default if cloud mode
name|hostContext
operator|=
name|cfg
operator|.
name|get
argument_list|(
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_HOSTCONTEXT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|host
operator|=
name|cfg
operator|.
name|get
argument_list|(
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_HOST
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|leaderVoteWait
operator|=
name|cfg
operator|.
name|get
argument_list|(
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_LEADERVOTEWAIT
argument_list|,
name|LEADER_VOTE_WAIT
argument_list|)
expr_stmt|;
name|adminHandler
operator|=
name|cfg
operator|.
name|get
argument_list|(
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_ADMINHANDLER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|managementPath
operator|=
name|cfg
operator|.
name|get
argument_list|(
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_MANAGEMENTPATH
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|transientCacheSize
operator|=
name|cfg
operator|.
name|getInt
argument_list|(
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_TRANSIENTCACHESIZE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
if|if
condition|(
name|shareSchema
condition|)
block|{
name|indexSchemaCache
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|IndexSchema
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|zkClientTimeout
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"zkClientTimeout"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|zkClientTimeout
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|initZooKeeper
argument_list|(
name|zkHost
argument_list|,
name|zkClientTimeout
argument_list|)
expr_stmt|;
if|if
condition|(
name|isZooKeeperAware
argument_list|()
operator|&&
name|coreLoadThreads
operator|<=
literal|1
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"SolrCloud requires a value of at least 2 in solr.xml for coreLoadThreads"
argument_list|)
throw|;
block|}
if|if
condition|(
name|adminPath
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|adminHandler
operator|==
literal|null
condition|)
block|{
name|coreAdminHandler
operator|=
operator|new
name|CoreAdminHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|coreAdminHandler
operator|=
name|this
operator|.
name|createMultiCoreHandler
argument_list|(
name|adminHandler
argument_list|)
expr_stmt|;
block|}
block|}
name|collectionsHandler
operator|=
operator|new
name|CollectionsHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|containerProperties
operator|=
name|cfg
operator|.
name|getSolrProperties
argument_list|(
literal|"solr"
argument_list|)
expr_stmt|;
comment|// setup executor to load cores in parallel
name|coreLoadExecutor
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|coreLoadThreads
argument_list|,
name|coreLoadThreads
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|DefaultSolrThreadFactory
argument_list|(
literal|"coreLoadExecutor"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|CompletionService
argument_list|<
name|SolrCore
argument_list|>
name|completionService
init|=
operator|new
name|ExecutorCompletionService
argument_list|<
name|SolrCore
argument_list|>
argument_list|(
name|coreLoadExecutor
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Future
argument_list|<
name|SolrCore
argument_list|>
argument_list|>
name|pending
init|=
operator|new
name|HashSet
argument_list|<
name|Future
argument_list|<
name|SolrCore
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allCores
init|=
name|cfg
operator|.
name|getAllCoreNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|oneCoreName
range|:
name|allCores
control|)
block|{
try|try
block|{
name|String
name|rawName
init|=
name|cfg
operator|.
name|getProperty
argument_list|(
name|oneCoreName
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|rawName
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Each core in solr.xml must have a 'name'"
argument_list|)
throw|;
block|}
specifier|final
name|String
name|name
init|=
name|rawName
decl_stmt|;
specifier|final
name|CoreDescriptor
name|p
init|=
operator|new
name|CoreDescriptor
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|cfg
operator|.
name|getProperty
argument_list|(
name|oneCoreName
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_INSTDIR
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
comment|// deal with optional settings
name|String
name|opt
init|=
name|cfg
operator|.
name|getProperty
argument_list|(
name|oneCoreName
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_CONFIG
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|opt
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setConfigName
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
name|opt
operator|=
name|cfg
operator|.
name|getProperty
argument_list|(
name|oneCoreName
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_SCHEMA
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setSchemaName
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|zkController
operator|!=
literal|null
condition|)
block|{
name|opt
operator|=
name|cfg
operator|.
name|getProperty
argument_list|(
name|oneCoreName
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_SHARD
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|!=
literal|null
operator|&&
name|opt
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|p
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|setShardId
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
name|opt
operator|=
name|cfg
operator|.
name|getProperty
argument_list|(
name|oneCoreName
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_COLLECTION
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|setCollectionName
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
name|opt
operator|=
name|cfg
operator|.
name|getProperty
argument_list|(
name|oneCoreName
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_ROLES
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|setRoles
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
name|opt
operator|=
name|cfg
operator|.
name|getProperty
argument_list|(
name|oneCoreName
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_NODE_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|!=
literal|null
operator|&&
name|opt
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|p
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|setCoreNodeName
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
block|}
name|opt
operator|=
name|cfg
operator|.
name|getProperty
argument_list|(
name|oneCoreName
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_PROPERTIES
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setPropertiesName
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
name|opt
operator|=
name|cfg
operator|.
name|getProperty
argument_list|(
name|oneCoreName
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_DATADIR
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setDataDir
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|setCoreProperties
argument_list|(
name|cfg
operator|.
name|readCoreProperties
argument_list|(
name|oneCoreName
argument_list|)
argument_list|)
expr_stmt|;
name|opt
operator|=
name|cfg
operator|.
name|getProperty
argument_list|(
name|oneCoreName
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_LOADONSTARTUP
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setLoadOnStartup
argument_list|(
operator|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|opt
argument_list|)
operator|||
literal|"on"
operator|.
name|equalsIgnoreCase
argument_list|(
name|opt
argument_list|)
operator|)
condition|?
literal|true
else|:
literal|false
argument_list|)
expr_stmt|;
block|}
name|opt
operator|=
name|cfg
operator|.
name|getProperty
argument_list|(
name|oneCoreName
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_TRANSIENT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setTransient
argument_list|(
operator|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|opt
argument_list|)
operator|||
literal|"on"
operator|.
name|equalsIgnoreCase
argument_list|(
name|opt
argument_list|)
operator|)
condition|?
literal|true
else|:
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|.
name|isLoadOnStartup
argument_list|()
condition|)
block|{
comment|// The normal case
name|Callable
argument_list|<
name|SolrCore
argument_list|>
name|task
init|=
operator|new
name|Callable
argument_list|<
name|SolrCore
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SolrCore
name|call
parameter_list|()
block|{
name|SolrCore
name|c
init|=
literal|null
decl_stmt|;
try|try
block|{
name|c
operator|=
name|create
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|registerCore
argument_list|(
name|p
operator|.
name|isTransient
argument_list|()
argument_list|,
name|name
argument_list|,
name|c
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|null
argument_list|,
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|c
return|;
block|}
block|}
decl_stmt|;
name|pending
operator|.
name|add
argument_list|(
name|completionService
operator|.
name|submit
argument_list|(
name|task
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Store it away for later use. includes non-transient but not
comment|// loaded at startup cores.
name|coreMaps
operator|.
name|putDynamicDescriptor
argument_list|(
name|rawName
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
name|pending
operator|!=
literal|null
operator|&&
name|pending
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Future
argument_list|<
name|SolrCore
argument_list|>
name|future
init|=
name|completionService
operator|.
name|take
argument_list|()
decl_stmt|;
if|if
condition|(
name|future
operator|==
literal|null
condition|)
return|return;
name|pending
operator|.
name|remove
argument_list|(
name|future
argument_list|)
expr_stmt|;
try|try
block|{
name|SolrCore
name|c
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// track original names
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|coreMaps
operator|.
name|putCoreToOrigName
argument_list|(
name|c
argument_list|,
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|SolrCore
operator|.
name|log
argument_list|,
literal|"Error loading core"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
literal|"interrupted while loading core"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Start the background thread
name|backgroundCloser
operator|=
operator|new
name|CloserThread
argument_list|(
name|this
argument_list|,
name|coreMaps
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|backgroundCloser
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|coreLoadExecutor
operator|!=
literal|null
condition|)
block|{
name|ExecutorUtil
operator|.
name|shutdownNowAndAwaitTermination
argument_list|(
name|coreLoadExecutor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|initShardHandler
specifier|private
name|ShardHandlerFactory
name|initShardHandler
parameter_list|(
name|ConfigSolr
name|configSolr
parameter_list|)
block|{
name|PluginInfo
name|info
init|=
literal|null
decl_stmt|;
name|Node
name|shfn
init|=
name|configSolr
operator|.
name|getConfig
argument_list|()
operator|.
name|getNode
argument_list|(
literal|"solr/cores/shardHandlerFactory"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|shfn
operator|!=
literal|null
condition|)
block|{
name|info
operator|=
operator|new
name|PluginInfo
argument_list|(
name|shfn
argument_list|,
literal|"shardHandlerFactory"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
name|m
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"class"
argument_list|,
name|HttpShardHandlerFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|=
operator|new
name|PluginInfo
argument_list|(
literal|"shardHandlerFactory"
argument_list|,
name|m
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|PluginInfo
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ShardHandlerFactory
name|fac
decl_stmt|;
try|try
block|{
name|fac
operator|=
name|configSolr
operator|.
name|getConfig
argument_list|()
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|findClass
argument_list|(
name|info
operator|.
name|className
argument_list|,
name|ShardHandlerFactory
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error instantiating shardHandlerFactory class "
operator|+
name|info
operator|.
name|className
argument_list|)
throw|;
block|}
if|if
condition|(
name|fac
operator|instanceof
name|PluginInfoInitialized
condition|)
block|{
operator|(
operator|(
name|PluginInfoInitialized
operator|)
name|fac
operator|)
operator|.
name|init
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|fac
return|;
block|}
comment|// To make this available to TestHarness.
DECL|method|initShardHandler
specifier|protected
name|void
name|initShardHandler
parameter_list|()
block|{
if|if
condition|(
name|cfg
operator|!=
literal|null
condition|)
block|{
name|initShardHandler
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Cough! Hack! But tests run this way.
name|HttpShardHandlerFactory
name|fac
init|=
operator|new
name|HttpShardHandlerFactory
argument_list|()
decl_stmt|;
name|shardHandlerFactory
operator|=
name|fac
expr_stmt|;
block|}
block|}
DECL|field|isShutDown
specifier|private
specifier|volatile
name|boolean
name|isShutDown
init|=
literal|false
decl_stmt|;
DECL|method|isShutDown
specifier|public
name|boolean
name|isShutDown
parameter_list|()
block|{
return|return
name|isShutDown
return|;
block|}
comment|/**    * Stops all cores.    */
DECL|method|shutdown
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Shutting down CoreContainer instance="
operator|+
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isZooKeeperAware
argument_list|()
condition|)
block|{
try|try
block|{
name|zkController
operator|.
name|publishAndWaitForDownStates
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|isShutDown
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|isZooKeeperAware
argument_list|()
condition|)
block|{
name|coreMaps
operator|.
name|publishCoresAsDown
argument_list|(
name|zkController
argument_list|)
expr_stmt|;
name|cancelCoreRecoveries
argument_list|()
expr_stmt|;
block|}
try|try
block|{
comment|// First wake up the closer thread, it'll terminate almost immediately since it checks isShutDown.
synchronized|synchronized
init|(
name|coreMaps
operator|.
name|getLocker
argument_list|()
init|)
block|{
name|coreMaps
operator|.
name|getLocker
argument_list|()
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
comment|// wake up anyone waiting
block|}
if|if
condition|(
name|backgroundCloser
operator|!=
literal|null
condition|)
block|{
comment|// Doesn't seem right, but tests get in here without initializing the core.
try|try
block|{
name|backgroundCloser
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"backgroundCloser thread was interrupted before finishing"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Now clear all the cores that are being operated upon.
name|coreMaps
operator|.
name|clearMaps
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
comment|// It's still possible that one of the pending dynamic load operation is waiting, so wake it up if so.
comment|// Since all the pending operations queues have been drained, there should be nothing to do.
synchronized|synchronized
init|(
name|coreMaps
operator|.
name|getLocker
argument_list|()
init|)
block|{
name|coreMaps
operator|.
name|getLocker
argument_list|()
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
comment|// wake up the thread
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|shardHandlerFactory
operator|!=
literal|null
condition|)
block|{
name|shardHandlerFactory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// we want to close zk stuff last
if|if
condition|(
name|zkController
operator|!=
literal|null
condition|)
block|{
name|zkController
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|zkServer
operator|!=
literal|null
condition|)
block|{
name|zkServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|cancelCoreRecoveries
specifier|public
name|void
name|cancelCoreRecoveries
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|SolrCoreState
argument_list|>
name|coreStates
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrCoreState
argument_list|>
argument_list|()
decl_stmt|;
name|coreMaps
operator|.
name|addCoresToList
argument_list|(
name|coreStates
argument_list|)
expr_stmt|;
comment|// we must cancel without holding the cores sync
comment|// make sure we wait for any recoveries to stop
for|for
control|(
name|SolrCoreState
name|coreState
range|:
name|coreStates
control|)
block|{
try|try
block|{
name|coreState
operator|.
name|cancelRecovery
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Error canceling recovery for core"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|finalize
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
if|if
condition|(
operator|!
name|isShutDown
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"CoreContainer was not shutdown prior to finalize(), indicates a bug -- POSSIBLE RESOURCE LEAK!!!  instance="
operator|+
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|registerCore
specifier|protected
name|SolrCore
name|registerCore
parameter_list|(
name|boolean
name|isTransientCore
parameter_list|,
name|String
name|name
parameter_list|,
name|SolrCore
name|core
parameter_list|,
name|boolean
name|returnPrevNotClosed
parameter_list|)
block|{
if|if
condition|(
name|core
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can not register a null core."
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|>=
literal|0
operator|||
name|name
operator|.
name|indexOf
argument_list|(
literal|'\\'
argument_list|)
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid core name: "
operator|+
name|name
argument_list|)
throw|;
block|}
if|if
condition|(
name|zkController
operator|!=
literal|null
condition|)
block|{
comment|// this happens before we can receive requests
try|try
block|{
name|zkController
operator|.
name|preRegister
argument_list|(
name|core
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|SolrCore
name|old
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isShutDown
condition|)
block|{
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"This CoreContainer has been shutdown"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isTransientCore
condition|)
block|{
name|old
operator|=
name|coreMaps
operator|.
name|putTransientCore
argument_list|(
name|cfg
argument_list|,
name|name
argument_list|,
name|core
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|old
operator|=
name|coreMaps
operator|.
name|putCore
argument_list|(
name|name
argument_list|,
name|core
argument_list|)
expr_stmt|;
block|}
comment|/*       * set both the name of the descriptor and the name of the       * core, since the descriptors name is used for persisting.       */
name|core
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|putProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|coreInitFailures
init|)
block|{
name|coreInitFailures
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|old
operator|==
literal|null
operator|||
name|old
operator|==
name|core
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"registering core: "
operator|+
name|name
argument_list|)
expr_stmt|;
name|registerInZk
argument_list|(
name|core
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"replacing core: "
operator|+
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|returnPrevNotClosed
condition|)
block|{
name|old
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|registerInZk
argument_list|(
name|core
argument_list|)
expr_stmt|;
return|return
name|old
return|;
block|}
block|}
DECL|method|registerInZk
specifier|private
name|void
name|registerInZk
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
if|if
condition|(
name|zkController
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|zkController
operator|.
name|register
argument_list|(
name|core
operator|.
name|getName
argument_list|()
argument_list|,
name|core
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// if register fails, this is really bad - close the zkController to
comment|// minimize any damage we can cause
try|try
block|{
name|zkController
operator|.
name|publish
argument_list|(
name|core
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|DOWN
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Registers a SolrCore descriptor in the registry using the core's name.    * If returnPrev==false, the old core, if different, is closed.    * @return a previous core having the same name if it existed and returnPrev==true    */
DECL|method|register
specifier|public
name|SolrCore
name|register
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|boolean
name|returnPrev
parameter_list|)
block|{
return|return
name|registerCore
argument_list|(
literal|false
argument_list|,
name|core
operator|.
name|getName
argument_list|()
argument_list|,
name|core
argument_list|,
name|returnPrev
argument_list|)
return|;
block|}
DECL|method|register
specifier|public
name|SolrCore
name|register
parameter_list|(
name|String
name|name
parameter_list|,
name|SolrCore
name|core
parameter_list|,
name|boolean
name|returnPrev
parameter_list|)
block|{
return|return
name|registerCore
argument_list|(
literal|false
argument_list|,
name|name
argument_list|,
name|core
argument_list|,
name|returnPrev
argument_list|)
return|;
block|}
comment|// Helper method to separate out creating a core from ZK as opposed to the "usual" way. See create()
DECL|method|createFromZk
specifier|private
name|SolrCore
name|createFromZk
parameter_list|(
name|String
name|instanceDir
parameter_list|,
name|CoreDescriptor
name|dcore
parameter_list|)
block|{
try|try
block|{
name|SolrResourceLoader
name|solrLoader
init|=
literal|null
decl_stmt|;
name|SolrConfig
name|config
init|=
literal|null
decl_stmt|;
name|String
name|zkConfigName
init|=
literal|null
decl_stmt|;
name|IndexSchema
name|schema
decl_stmt|;
name|String
name|collection
init|=
name|dcore
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|zkController
operator|.
name|createCollectionZkNode
argument_list|(
name|dcore
operator|.
name|getCloudDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|zkConfigName
operator|=
name|zkController
operator|.
name|readConfigName
argument_list|(
name|collection
argument_list|)
expr_stmt|;
if|if
condition|(
name|zkConfigName
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not find config name for collection:"
operator|+
name|collection
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not find config name for collection:"
operator|+
name|collection
argument_list|)
throw|;
block|}
name|solrLoader
operator|=
operator|new
name|ZkSolrResourceLoader
argument_list|(
name|instanceDir
argument_list|,
name|zkConfigName
argument_list|,
name|loader
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|ConfigSolrXml
operator|.
name|getCoreProperties
argument_list|(
name|instanceDir
argument_list|,
name|dcore
argument_list|)
argument_list|,
name|zkController
argument_list|)
expr_stmt|;
name|config
operator|=
name|getSolrConfigFromZk
argument_list|(
name|zkConfigName
argument_list|,
name|dcore
operator|.
name|getConfigName
argument_list|()
argument_list|,
name|solrLoader
argument_list|)
expr_stmt|;
name|schema
operator|=
name|IndexSchemaFactory
operator|.
name|buildIndexSchema
argument_list|(
name|dcore
operator|.
name|getSchemaName
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
return|return
operator|new
name|SolrCore
argument_list|(
name|dcore
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|config
argument_list|,
name|schema
argument_list|,
name|dcore
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Helper method to separate out creating a core from local configuration files. See create()
DECL|method|createFromLocal
specifier|private
name|SolrCore
name|createFromLocal
parameter_list|(
name|String
name|instanceDir
parameter_list|,
name|CoreDescriptor
name|dcore
parameter_list|)
block|{
name|SolrResourceLoader
name|solrLoader
init|=
literal|null
decl_stmt|;
name|SolrConfig
name|config
init|=
literal|null
decl_stmt|;
name|solrLoader
operator|=
operator|new
name|SolrResourceLoader
argument_list|(
name|instanceDir
argument_list|,
name|loader
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|ConfigSolrXml
operator|.
name|getCoreProperties
argument_list|(
name|instanceDir
argument_list|,
name|dcore
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|config
operator|=
operator|new
name|SolrConfig
argument_list|(
name|solrLoader
argument_list|,
name|dcore
operator|.
name|getConfigName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to load file {}"
argument_list|,
operator|new
name|File
argument_list|(
name|instanceDir
argument_list|,
name|dcore
operator|.
name|getConfigName
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not load config for "
operator|+
name|dcore
operator|.
name|getConfigName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|IndexSchema
name|schema
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|indexSchemaCache
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|resourceNameToBeUsed
init|=
name|IndexSchemaFactory
operator|.
name|getResourceNameToBeUsed
argument_list|(
name|dcore
operator|.
name|getSchemaName
argument_list|()
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|File
name|schemaFile
init|=
operator|new
name|File
argument_list|(
name|resourceNameToBeUsed
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|schemaFile
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|schemaFile
operator|=
operator|new
name|File
argument_list|(
name|solrLoader
operator|.
name|getConfigDir
argument_list|()
argument_list|,
name|schemaFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|schemaFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|schemaFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|":"
operator|+
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddHHmmss"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|schemaFile
operator|.
name|lastModified
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|schema
operator|=
name|indexSchemaCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"creating new schema object for core: "
operator|+
name|dcore
operator|.
name|getProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|=
name|IndexSchemaFactory
operator|.
name|buildIndexSchema
argument_list|(
name|dcore
operator|.
name|getSchemaName
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|indexSchemaCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"re-using schema object for core: "
operator|+
name|dcore
operator|.
name|getProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
name|schema
operator|=
name|IndexSchemaFactory
operator|.
name|buildIndexSchema
argument_list|(
name|dcore
operator|.
name|getSchemaName
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
name|SolrCore
name|core
init|=
operator|new
name|SolrCore
argument_list|(
name|dcore
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|config
argument_list|,
name|schema
argument_list|,
name|dcore
argument_list|)
decl_stmt|;
if|if
condition|(
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// always kick off recovery if we are in standalone mode.
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|.
name|recoverFromLog
argument_list|()
expr_stmt|;
block|}
return|return
name|core
return|;
block|}
comment|/**    * Creates a new core based on a descriptor but does not register it.    *    * @param dcore a core descriptor    * @return the newly created core    */
DECL|method|create
specifier|public
name|SolrCore
name|create
parameter_list|(
name|CoreDescriptor
name|dcore
parameter_list|)
block|{
if|if
condition|(
name|isShutDown
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
literal|"Solr has shutdown."
argument_list|)
throw|;
block|}
specifier|final
name|String
name|name
init|=
name|dcore
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Make the instanceDir relative to the cores instanceDir if not absolute
name|File
name|idir
init|=
operator|new
name|File
argument_list|(
name|dcore
operator|.
name|getInstanceDir
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|instanceDir
init|=
name|idir
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Creating SolrCore '{}' using instanceDir: {}"
argument_list|,
name|dcore
operator|.
name|getName
argument_list|()
argument_list|,
name|instanceDir
argument_list|)
expr_stmt|;
comment|// Initialize the solr config
name|SolrCore
name|created
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|zkController
operator|!=
literal|null
condition|)
block|{
name|created
operator|=
name|createFromZk
argument_list|(
name|instanceDir
argument_list|,
name|dcore
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|created
operator|=
name|createFromLocal
argument_list|(
name|instanceDir
argument_list|,
name|dcore
argument_list|)
expr_stmt|;
block|}
name|coreMaps
operator|.
name|addCreated
argument_list|(
name|created
argument_list|)
expr_stmt|;
comment|// For persisting newly-created cores.
return|return
name|created
return|;
comment|// :TODO: Java7...
comment|// http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
name|recordAndThrow
argument_list|(
name|name
argument_list|,
literal|"Unable to create core: "
operator|+
name|name
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return a Collection of registered SolrCores    */
DECL|method|getCores
specifier|public
name|Collection
argument_list|<
name|SolrCore
argument_list|>
name|getCores
parameter_list|()
block|{
return|return
name|coreMaps
operator|.
name|getCores
argument_list|()
return|;
block|}
comment|/**    * @return a Collection of the names that cores are mapped to    */
DECL|method|getCoreNames
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getCoreNames
parameter_list|()
block|{
return|return
name|coreMaps
operator|.
name|getCoreNames
argument_list|()
return|;
block|}
comment|/** This method is currently experimental.    * @return a Collection of the names that a specific core is mapped to.    */
DECL|method|getCoreNames
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getCoreNames
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
return|return
name|coreMaps
operator|.
name|getCoreNames
argument_list|(
name|core
argument_list|)
return|;
block|}
comment|/**    * get a list of all the cores that are currently loaded    * @return a list of al lthe available core names in either permanent or transient core lists.    */
DECL|method|getAllCoreNames
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getAllCoreNames
parameter_list|()
block|{
return|return
name|coreMaps
operator|.
name|getAllCoreNames
argument_list|()
return|;
block|}
comment|/**    * Checks that the data dir passed is is NOT shared by any other core    * @param targetPath - path to check    * @return - null if this path is unique, core name of the first other core that shares this path.    */
DECL|method|checkUniqueDataDir
specifier|public
name|String
name|checkUniqueDataDir
parameter_list|(
name|String
name|targetPath
parameter_list|)
block|{
return|return
name|coreMaps
operator|.
name|checkUniqueDataDir
argument_list|(
name|targetPath
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable Map of Exceptions that occured when initializing     * SolrCores (either at startup, or do to runtime requests to create cores)     * keyed off of the name (String) of the SolrCore that had the Exception     * during initialization.    *<p>    * While the Map returned by this method is immutable and will not change     * once returned to the client, the source data used to generate this Map     * can be changed as various SolrCore operations are performed:    *</p>    *<ul>    *<li>Failed attempts to create new SolrCores will add new Exceptions.</li>    *<li>Failed attempts to re-create a SolrCore using a name already contained in this Map will replace the Exception.</li>    *<li>Failed attempts to reload a SolrCore will cause an Exception to be added to this list -- even though the existing SolrCore with that name will continue to be available.</li>    *<li>Successful attempts to re-created a SolrCore using a name already contained in this Map will remove the Exception.</li>    *<li>Registering an existing SolrCore with a name already contained in this Map (ie: ALIAS or SWAP) will remove the Exception.</li>    *</ul>    */
DECL|method|getCoreInitFailures
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|getCoreInitFailures
parameter_list|()
block|{
synchronized|synchronized
init|(
name|coreInitFailures
init|)
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
argument_list|(
name|coreInitFailures
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|// ---------------- Core name related methods ---------------
comment|/**    * Recreates a SolrCore.    * While the new core is loading, requests will continue to be dispatched to    * and processed by the old core    *     * @param name the name of the SolrCore to reload    */
DECL|method|reload
specifier|public
name|void
name|reload
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
name|name
operator|=
name|checkDefault
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|cfg
operator|!=
literal|null
condition|)
block|{
comment|// Another test artifact.
name|String
name|badMsg
init|=
name|cfg
operator|.
name|getBadConfigCoreMessage
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|badMsg
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|badMsg
argument_list|)
throw|;
block|}
block|}
name|SolrCore
name|core
init|=
name|coreMaps
operator|.
name|getCore
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|core
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No such core: "
operator|+
name|name
argument_list|)
throw|;
try|try
block|{
name|coreMaps
operator|.
name|waitAddPendingCoreOps
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|CoreDescriptor
name|cd
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
decl_stmt|;
name|File
name|instanceDir
init|=
operator|new
name|File
argument_list|(
name|cd
operator|.
name|getInstanceDir
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Reloading SolrCore '{}' using instanceDir: {}"
argument_list|,
name|cd
operator|.
name|getName
argument_list|()
argument_list|,
name|instanceDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|SolrResourceLoader
name|solrLoader
decl_stmt|;
if|if
condition|(
name|zkController
operator|==
literal|null
condition|)
block|{
name|solrLoader
operator|=
operator|new
name|SolrResourceLoader
argument_list|(
name|instanceDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|loader
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|ConfigSolrXml
operator|.
name|getCoreProperties
argument_list|(
name|instanceDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|cd
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|String
name|collection
init|=
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|zkController
operator|.
name|createCollectionZkNode
argument_list|(
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|zkConfigName
init|=
name|zkController
operator|.
name|readConfigName
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|zkConfigName
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not find config name for collection:"
operator|+
name|collection
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not find config name for collection:"
operator|+
name|collection
argument_list|)
throw|;
block|}
name|solrLoader
operator|=
operator|new
name|ZkSolrResourceLoader
argument_list|(
name|instanceDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|zkConfigName
argument_list|,
name|loader
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|ConfigSolrXml
operator|.
name|getCoreProperties
argument_list|(
name|instanceDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|cd
argument_list|)
argument_list|,
name|zkController
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|SolrCore
name|newCore
init|=
name|core
operator|.
name|reload
argument_list|(
name|solrLoader
argument_list|,
name|core
argument_list|)
decl_stmt|;
comment|// keep core to orig name link
name|coreMaps
operator|.
name|removeCoreToOrigName
argument_list|(
name|newCore
argument_list|,
name|core
argument_list|)
expr_stmt|;
name|registerCore
argument_list|(
literal|false
argument_list|,
name|name
argument_list|,
name|newCore
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|coreMaps
operator|.
name|removeFromPendingOps
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|// :TODO: Java7...
comment|// http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
name|recordAndThrow
argument_list|(
name|name
argument_list|,
literal|"Unable to reload core: "
operator|+
name|name
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|//5.0 remove all checkDefaults?
DECL|method|checkDefault
specifier|private
name|String
name|checkDefault
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
literal|null
operator|==
name|name
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|defaultCoreName
else|:
name|name
return|;
block|}
comment|/**    * Swaps two SolrCore descriptors.    */
DECL|method|swap
specifier|public
name|void
name|swap
parameter_list|(
name|String
name|n0
parameter_list|,
name|String
name|n1
parameter_list|)
block|{
if|if
condition|(
name|n0
operator|==
literal|null
operator|||
name|n1
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Can not swap unnamed cores."
argument_list|)
throw|;
block|}
name|n0
operator|=
name|checkDefault
argument_list|(
name|n0
argument_list|)
expr_stmt|;
name|n1
operator|=
name|checkDefault
argument_list|(
name|n1
argument_list|)
expr_stmt|;
name|coreMaps
operator|.
name|swap
argument_list|(
name|n0
argument_list|,
name|n1
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"swapped: "
operator|+
name|n0
operator|+
literal|" with "
operator|+
name|n1
argument_list|)
expr_stmt|;
block|}
comment|/** Removes and returns registered core w/o decrementing it's reference count */
DECL|method|remove
specifier|public
name|SolrCore
name|remove
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
name|checkDefault
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|coreMaps
operator|.
name|remove
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|rename
specifier|public
name|void
name|rename
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|toName
parameter_list|)
block|{
name|SolrCore
name|core
init|=
name|getCore
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|registerCore
argument_list|(
literal|false
argument_list|,
name|toName
argument_list|,
name|core
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|name
operator|=
name|checkDefault
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|coreMaps
operator|.
name|remove
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**     * Gets a core by name and increase its refcount.    *    * @see SolrCore#close()     * @param name the core name    * @return the core if found, null if a SolrCore by this name does not exist    * @exception SolrException if a SolrCore with this name failed to be initialized    */
DECL|method|getCore
specifier|public
name|SolrCore
name|getCore
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
name|checkDefault
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|cfg
operator|!=
literal|null
condition|)
block|{
comment|// Get this out of here sometime, this is test-code only stuff!
name|String
name|badMsg
init|=
name|cfg
operator|.
name|getBadConfigCoreMessage
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|badMsg
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|badMsg
argument_list|)
throw|;
block|}
block|}
comment|// Do this in two phases since we don't want to lock access to the cores over a load.
name|SolrCore
name|core
init|=
name|coreMaps
operator|.
name|getCoreFromAnyList
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|core
operator|.
name|open
argument_list|()
expr_stmt|;
return|return
name|core
return|;
block|}
comment|// OK, it's not presently in any list, is it in the list of dynamic cores but not loaded yet? If so, load it.
name|CoreDescriptor
name|desc
init|=
name|coreMaps
operator|.
name|getDynamicDescriptor
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|==
literal|null
condition|)
block|{
comment|//Nope, no transient core with this name
comment|// if there was an error initalizing this core, throw a 500
comment|// error with the details for clients attempting to access it.
name|Exception
name|e
init|=
name|getCoreInitFailures
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|e
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"SolrCore '"
operator|+
name|name
operator|+
literal|"' is not available due to init failure: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// otherwise the user is simply asking for something that doesn't exist.
return|return
literal|null
return|;
block|}
comment|// This will put an entry in pending core ops if the core isn't loaded
name|core
operator|=
name|coreMaps
operator|.
name|waitAddPendingCoreOps
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|isShutDown
condition|)
return|return
literal|null
return|;
comment|// We're quitting, so stop. This needs to be after the wait above since we may come off
comment|// the wait as a consequence of shutting down.
try|try
block|{
if|if
condition|(
name|core
operator|==
literal|null
condition|)
block|{
name|core
operator|=
name|create
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// This should throw an error if it fails.
name|core
operator|.
name|open
argument_list|()
expr_stmt|;
name|registerCore
argument_list|(
name|desc
operator|.
name|isTransient
argument_list|()
argument_list|,
name|name
argument_list|,
name|core
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|core
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
name|recordAndThrow
argument_list|(
name|name
argument_list|,
literal|"Unable to create core: "
operator|+
name|name
argument_list|,
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
name|coreMaps
operator|.
name|removeFromPendingOps
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|core
return|;
block|}
comment|// ---------------- Multicore self related methods ---------------
comment|/**     * Creates a CoreAdminHandler for this MultiCore.    * @return a CoreAdminHandler    */
DECL|method|createMultiCoreHandler
specifier|protected
name|CoreAdminHandler
name|createMultiCoreHandler
parameter_list|(
specifier|final
name|String
name|adminHandlerClass
parameter_list|)
block|{
return|return
name|loader
operator|.
name|newAdminHandlerInstance
argument_list|(
name|CoreContainer
operator|.
name|this
argument_list|,
name|adminHandlerClass
argument_list|)
return|;
block|}
DECL|method|getMultiCoreHandler
specifier|public
name|CoreAdminHandler
name|getMultiCoreHandler
parameter_list|()
block|{
return|return
name|coreAdminHandler
return|;
block|}
DECL|method|getCollectionsHandler
specifier|public
name|CollectionsHandler
name|getCollectionsHandler
parameter_list|()
block|{
return|return
name|collectionsHandler
return|;
block|}
comment|/**    * the default core name, or null if there is no default core name    */
DECL|method|getDefaultCoreName
specifier|public
name|String
name|getDefaultCoreName
parameter_list|()
block|{
return|return
name|defaultCoreName
return|;
block|}
comment|// all of the following properties aren't synchronized
comment|// but this should be OK since they normally won't be changed rapidly
annotation|@
name|Deprecated
DECL|method|isPersistent
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
name|persistent
return|;
block|}
DECL|method|setPersistent
specifier|public
name|void
name|setPersistent
parameter_list|(
name|boolean
name|persistent
parameter_list|)
block|{
name|this
operator|.
name|persistent
operator|=
name|persistent
expr_stmt|;
block|}
DECL|method|getAdminPath
specifier|public
name|String
name|getAdminPath
parameter_list|()
block|{
return|return
name|adminPath
return|;
block|}
DECL|method|getHostPort
specifier|public
name|String
name|getHostPort
parameter_list|()
block|{
return|return
name|hostPort
return|;
block|}
DECL|method|getHostContext
specifier|public
name|String
name|getHostContext
parameter_list|()
block|{
return|return
name|hostContext
return|;
block|}
DECL|method|getHost
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
DECL|method|getZkClientTimeout
specifier|public
name|int
name|getZkClientTimeout
parameter_list|()
block|{
return|return
name|zkClientTimeout
return|;
block|}
DECL|method|getManagementPath
specifier|public
name|String
name|getManagementPath
parameter_list|()
block|{
return|return
name|managementPath
return|;
block|}
comment|/**    * Sets the alternate path for multicore handling:    * This is used in case there is a registered unnamed core (aka name is "") to    * declare an alternate way of accessing named cores.    * This can also be used in a pseudo single-core environment so admins can prepare    * a new version before swapping.    */
DECL|method|setManagementPath
specifier|public
name|void
name|setManagementPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|managementPath
operator|=
name|path
expr_stmt|;
block|}
DECL|method|getLogging
specifier|public
name|LogWatcher
name|getLogging
parameter_list|()
block|{
return|return
name|logging
return|;
block|}
DECL|method|setLogging
specifier|public
name|void
name|setLogging
parameter_list|(
name|LogWatcher
name|v
parameter_list|)
block|{
name|logging
operator|=
name|v
expr_stmt|;
block|}
DECL|method|getConfigFile
specifier|public
name|File
name|getConfigFile
parameter_list|()
block|{
return|return
name|configFile
return|;
block|}
comment|/**    * Determines whether the core is already loaded or not but does NOT load the core    *    */
DECL|method|isLoaded
specifier|public
name|boolean
name|isLoaded
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|coreMaps
operator|.
name|isLoaded
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/** Persists the cores config file in cores.xml. */
DECL|method|persist
specifier|public
name|void
name|persist
parameter_list|()
block|{
name|persistFile
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets a solr core descriptor for a core that is not loaded. Note that if the caller calls this on a    * loaded core, the unloaded descriptor will be returned.    *    * @param cname - name of the unloaded core descriptor to load. NOTE:    * @return a coreDescriptor. May return null    */
DECL|method|getUnloadedCoreDescriptor
specifier|public
name|CoreDescriptor
name|getUnloadedCoreDescriptor
parameter_list|(
name|String
name|cname
parameter_list|)
block|{
return|return
name|coreMaps
operator|.
name|getUnloadedCoreDescriptor
argument_list|(
name|cname
argument_list|)
return|;
block|}
comment|/** Persists the cores config file in a user provided file. */
comment|//TODO: obsolete in SOLR 5.0
DECL|method|persistFile
specifier|public
name|void
name|persistFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
assert|assert
name|file
operator|!=
literal|null
assert|;
comment|// only the old solrxml persists
if|if
condition|(
name|cfg
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|cfg
operator|instanceof
name|ConfigSolrXmlOld
operator|)
condition|)
return|return;
name|log
operator|.
name|info
argument_list|(
literal|"Persisting cores config to "
operator|+
operator|(
name|file
operator|==
literal|null
condition|?
name|configFile
else|:
name|file
operator|)
argument_list|)
expr_stmt|;
comment|//<solr attrib="value">
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rootSolrAttribs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|libDir
operator|!=
literal|null
condition|)
name|rootSolrAttribs
operator|.
name|put
argument_list|(
literal|"sharedLib"
argument_list|,
name|libDir
argument_list|)
expr_stmt|;
name|rootSolrAttribs
operator|.
name|put
argument_list|(
literal|"persistent"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|isPersistent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//<solr attrib="value"><cores attrib="value">
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|coresAttribs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|addCoresAttrib
argument_list|(
name|coresAttribs
argument_list|,
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_ADMINPATH
argument_list|,
literal|"adminPath"
argument_list|,
name|this
operator|.
name|adminPath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addCoresAttrib
argument_list|(
name|coresAttribs
argument_list|,
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_ADMINHANDLER
argument_list|,
literal|"adminHandler"
argument_list|,
name|this
operator|.
name|adminHandler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addCoresAttrib
argument_list|(
name|coresAttribs
argument_list|,
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_SHARESCHEMA
argument_list|,
literal|"shareSchema"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|this
operator|.
name|shareSchema
argument_list|)
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|DEFAULT_SHARE_SCHEMA
argument_list|)
argument_list|)
expr_stmt|;
name|addCoresAttrib
argument_list|(
name|coresAttribs
argument_list|,
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_HOST
argument_list|,
literal|"host"
argument_list|,
name|this
operator|.
name|host
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
literal|null
operator|==
name|defaultCoreName
operator|||
name|defaultCoreName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
condition|)
block|{
name|coresAttribs
operator|.
name|put
argument_list|(
literal|"defaultCoreName"
argument_list|,
name|defaultCoreName
argument_list|)
expr_stmt|;
block|}
name|addCoresAttrib
argument_list|(
name|coresAttribs
argument_list|,
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_HOSTPORT
argument_list|,
literal|"hostPort"
argument_list|,
name|this
operator|.
name|hostPort
argument_list|,
name|DEFAULT_HOST_PORT
argument_list|)
expr_stmt|;
name|addCoresAttrib
argument_list|(
name|coresAttribs
argument_list|,
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_ZKCLIENTTIMEOUT
argument_list|,
literal|"zkClientTimeout"
argument_list|,
name|intToString
argument_list|(
name|this
operator|.
name|zkClientTimeout
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|DEFAULT_ZK_CLIENT_TIMEOUT
argument_list|)
argument_list|)
expr_stmt|;
name|addCoresAttrib
argument_list|(
name|coresAttribs
argument_list|,
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_HOSTCONTEXT
argument_list|,
literal|"hostContext"
argument_list|,
name|this
operator|.
name|hostContext
argument_list|,
name|DEFAULT_HOST_CONTEXT
argument_list|)
expr_stmt|;
name|addCoresAttrib
argument_list|(
name|coresAttribs
argument_list|,
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_LEADERVOTEWAIT
argument_list|,
literal|"leaderVoteWait"
argument_list|,
name|this
operator|.
name|leaderVoteWait
argument_list|,
name|LEADER_VOTE_WAIT
argument_list|)
expr_stmt|;
name|addCoresAttrib
argument_list|(
name|coresAttribs
argument_list|,
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_CORELOADTHREADS
argument_list|,
literal|"coreLoadThreads"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|this
operator|.
name|coreLoadThreads
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|CORE_LOAD_THREADS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|transientCacheSize
operator|!=
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
comment|// This test
comment|// is a consequence of testing. I really hate it.
name|addCoresAttrib
argument_list|(
name|coresAttribs
argument_list|,
name|ConfigSolr
operator|.
name|CfgProp
operator|.
name|SOLR_TRANSIENTCACHESIZE
argument_list|,
literal|"transientCacheSize"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|this
operator|.
name|transientCacheSize
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|coreMaps
operator|.
name|persistCores
argument_list|(
name|origCfg
argument_list|,
name|containerProperties
argument_list|,
name|rootSolrAttribs
argument_list|,
name|coresAttribs
argument_list|,
name|file
argument_list|,
name|configFile
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|null
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|intToString
specifier|private
name|String
name|intToString
parameter_list|(
name|Integer
name|integer
parameter_list|)
block|{
if|if
condition|(
name|integer
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|integer
argument_list|)
return|;
block|}
comment|//TODO: Obsolete in 5.0 Having to pass prop is a hack to get us to 5.0.
DECL|method|addCoresAttrib
specifier|private
name|void
name|addCoresAttrib
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|coresAttribs
parameter_list|,
name|ConfigSolr
operator|.
name|CfgProp
name|prop
parameter_list|,
name|String
name|attribName
parameter_list|,
name|String
name|attribValue
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|cfg
operator|==
literal|null
condition|)
block|{
name|coresAttribs
operator|.
name|put
argument_list|(
name|attribName
argument_list|,
name|attribValue
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|attribValue
operator|!=
literal|null
condition|)
block|{
name|String
name|origValue
init|=
name|cfg
operator|.
name|getOrigProp
argument_list|(
name|prop
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|origValue
operator|==
literal|null
operator|&&
name|defaultValue
operator|!=
literal|null
operator|&&
name|attribValue
operator|.
name|equals
argument_list|(
name|defaultValue
argument_list|)
condition|)
return|return;
if|if
condition|(
name|attribValue
operator|.
name|equals
argument_list|(
name|PropertiesUtil
operator|.
name|substituteProperty
argument_list|(
name|origValue
argument_list|,
name|loader
operator|.
name|getCoreProperties
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|coresAttribs
operator|.
name|put
argument_list|(
name|attribName
argument_list|,
name|origValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|coresAttribs
operator|.
name|put
argument_list|(
name|attribName
argument_list|,
name|attribValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getSolrHome
specifier|public
name|String
name|getSolrHome
parameter_list|()
block|{
return|return
name|solrHome
return|;
block|}
DECL|method|isZooKeeperAware
specifier|public
name|boolean
name|isZooKeeperAware
parameter_list|()
block|{
return|return
name|zkController
operator|!=
literal|null
return|;
block|}
DECL|method|getZkController
specifier|public
name|ZkController
name|getZkController
parameter_list|()
block|{
return|return
name|zkController
return|;
block|}
DECL|method|isShareSchema
specifier|public
name|boolean
name|isShareSchema
parameter_list|()
block|{
return|return
name|shareSchema
return|;
block|}
comment|/** The default ShardHandlerFactory used to communicate with other solr instances */
DECL|method|getShardHandlerFactory
specifier|public
name|ShardHandlerFactory
name|getShardHandlerFactory
parameter_list|()
block|{
return|return
name|shardHandlerFactory
return|;
block|}
comment|// Just to tidy up the code where it did this in-line.
DECL|method|recordAndThrow
specifier|private
name|SolrException
name|recordAndThrow
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|msg
parameter_list|,
name|Exception
name|ex
parameter_list|)
block|{
synchronized|synchronized
init|(
name|coreInitFailures
init|)
block|{
name|coreInitFailures
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|coreInitFailures
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|msg
argument_list|,
name|ex
argument_list|)
return|;
block|}
DECL|method|getCoreToOrigName
name|String
name|getCoreToOrigName
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
return|return
name|coreMaps
operator|.
name|getCoreToOrigName
argument_list|(
name|core
argument_list|)
return|;
block|}
DECL|method|getBadCoreMessage
specifier|public
name|String
name|getBadCoreMessage
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|cfg
operator|.
name|getBadConfigCoreMessage
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|copyDoc
specifier|private
name|Document
name|copyDoc
parameter_list|(
name|Document
name|document
parameter_list|)
throws|throws
name|TransformerException
block|{
name|TransformerFactory
name|tfactory
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Transformer
name|tx
init|=
name|tfactory
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|DOMSource
name|source
init|=
operator|new
name|DOMSource
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|DOMResult
name|result
init|=
operator|new
name|DOMResult
argument_list|()
decl_stmt|;
name|tx
operator|.
name|transform
argument_list|(
name|source
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
operator|(
name|Document
operator|)
name|result
operator|.
name|getNode
argument_list|()
return|;
block|}
block|}
end_class
begin_class
DECL|class|CloserThread
class|class
name|CloserThread
extends|extends
name|Thread
block|{
DECL|field|container
name|CoreContainer
name|container
decl_stmt|;
DECL|field|coreMaps
name|CoreMaps
name|coreMaps
decl_stmt|;
DECL|field|cfg
name|ConfigSolr
name|cfg
decl_stmt|;
DECL|method|CloserThread
name|CloserThread
parameter_list|(
name|CoreContainer
name|container
parameter_list|,
name|CoreMaps
name|coreMaps
parameter_list|,
name|ConfigSolr
name|cfg
parameter_list|)
block|{
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
name|this
operator|.
name|coreMaps
operator|=
name|coreMaps
expr_stmt|;
name|this
operator|.
name|cfg
operator|=
name|cfg
expr_stmt|;
block|}
comment|// It's important that this be the _only_ thread removing things from pendingDynamicCloses!
comment|// This is single-threaded, but I tried a multi-threaded approach and didn't see any performance gains, so
comment|// there's no good justification for the complexity. I suspect that the locking on things like DefaultSolrCoreState
comment|// essentially create a single-threaded process anyway.
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|container
operator|.
name|isShutDown
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|coreMaps
operator|.
name|getLocker
argument_list|()
init|)
block|{
comment|// need this so we can wait and be awoken.
try|try
block|{
name|coreMaps
operator|.
name|getLocker
argument_list|()
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Well, if we've been told to stop, we will. Otherwise, continue on and check to see if there are
comment|// any cores to close.
block|}
block|}
for|for
control|(
name|SolrCore
name|removeMe
init|=
name|coreMaps
operator|.
name|getCoreToClose
argument_list|()
init|;
name|removeMe
operator|!=
literal|null
operator|&&
operator|!
name|container
operator|.
name|isShutDown
argument_list|()
condition|;
name|removeMe
operator|=
name|coreMaps
operator|.
name|getCoreToClose
argument_list|()
control|)
block|{
try|try
block|{
name|removeMe
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|coreMaps
operator|.
name|removeFromPendingOps
argument_list|(
name|removeMe
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
