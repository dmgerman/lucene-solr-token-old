begin_unit
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_comment
comment|/**  * Writes any changes in core definitions to this instance's solr.xml  */
end_comment
begin_class
DECL|class|SolrXMLCoresLocator
specifier|public
class|class
name|SolrXMLCoresLocator
implements|implements
name|CoresLocator
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrXMLCoresLocator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|solrXmlTemplate
specifier|private
specifier|final
name|String
name|solrXmlTemplate
decl_stmt|;
DECL|field|cfg
specifier|private
specifier|final
name|ConfigSolrXmlOld
name|cfg
decl_stmt|;
comment|/** Core name to use if a core definition has no name */
DECL|field|DEFAULT_CORE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CORE_NAME
init|=
literal|"collection1"
decl_stmt|;
comment|/**    * Create a new SolrXMLCoresLocator    * @param originalXML   the original content of the solr.xml file    * @param cfg           the CoreContainer's config object    */
DECL|method|SolrXMLCoresLocator
specifier|public
name|SolrXMLCoresLocator
parameter_list|(
name|String
name|originalXML
parameter_list|,
name|ConfigSolrXmlOld
name|cfg
parameter_list|)
block|{
name|this
operator|.
name|solrXmlTemplate
operator|=
name|buildTemplate
argument_list|(
name|originalXML
argument_list|)
expr_stmt|;
name|this
operator|.
name|cfg
operator|=
name|cfg
expr_stmt|;
block|}
DECL|field|POPULATED_CORES_TAG
specifier|private
specifier|static
name|Pattern
name|POPULATED_CORES_TAG
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*<cores[^>]*>)(.*)(</cores>.*)$"
argument_list|,
name|Pattern
operator|.
name|DOTALL
argument_list|)
decl_stmt|;
DECL|field|EMPTY_CORES_TAG
specifier|private
specifier|static
name|Pattern
name|EMPTY_CORES_TAG
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*<cores[^>]*)/>(.*)$"
argument_list|,
name|Pattern
operator|.
name|DOTALL
argument_list|)
decl_stmt|;
DECL|field|SHARD_HANDLER_TAG
specifier|private
specifier|static
name|Pattern
name|SHARD_HANDLER_TAG
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(<shardHandlerFactory[^>]*>.*</shardHandlerFactory>)|(<shardHandlerFactory[^>]*/>)"
argument_list|,
name|Pattern
operator|.
name|DOTALL
argument_list|)
decl_stmt|;
DECL|field|CORES_PLACEHOLDER
specifier|private
specifier|static
name|String
name|CORES_PLACEHOLDER
init|=
literal|"{{CORES_PLACEHOLDER}}"
decl_stmt|;
comment|// Package-private for testing
comment|// We replace the existing<cores></cores> contents with a template pattern
comment|// that we can later replace with the up-to-date core definitions.  We also
comment|// need to extract the<shardHandlerFactory> section, as, annoyingly, it's
comment|// kept inside<cores/>.
DECL|method|buildTemplate
specifier|static
name|String
name|buildTemplate
parameter_list|(
name|String
name|originalXML
parameter_list|)
block|{
name|String
name|shardHandlerConfig
init|=
literal|""
decl_stmt|;
name|Matcher
name|shfMatcher
init|=
name|SHARD_HANDLER_TAG
operator|.
name|matcher
argument_list|(
name|originalXML
argument_list|)
decl_stmt|;
if|if
condition|(
name|shfMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|shardHandlerConfig
operator|=
name|shfMatcher
operator|.
name|group
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|Matcher
name|popMatcher
init|=
name|POPULATED_CORES_TAG
operator|.
name|matcher
argument_list|(
name|originalXML
argument_list|)
decl_stmt|;
if|if
condition|(
name|popMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
operator|new
name|StringBuilder
argument_list|(
name|popMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|CORES_PLACEHOLDER
argument_list|)
operator|.
name|append
argument_list|(
name|shardHandlerConfig
argument_list|)
operator|.
name|append
argument_list|(
name|popMatcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// Self-closing<cores/> tag gets expanded to<cores></cores>
name|Matcher
name|emptyMatcher
init|=
name|EMPTY_CORES_TAG
operator|.
name|matcher
argument_list|(
name|originalXML
argument_list|)
decl_stmt|;
if|if
condition|(
name|emptyMatcher
operator|.
name|matches
argument_list|()
condition|)
return|return
operator|new
name|StringBuilder
argument_list|(
name|emptyMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
operator|.
name|append
argument_list|(
name|CORES_PLACEHOLDER
argument_list|)
operator|.
name|append
argument_list|(
literal|"</cores>"
argument_list|)
operator|.
name|append
argument_list|(
name|emptyMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
comment|// If there's no<cores> tag at all, add one at the end of the file
return|return
name|originalXML
operator|.
name|replace
argument_list|(
literal|"</solr>"
argument_list|,
literal|"<cores>"
operator|+
name|CORES_PLACEHOLDER
operator|+
literal|"</cores></solr>"
argument_list|)
return|;
block|}
comment|// protected access for testing
DECL|method|buildSolrXML
specifier|protected
name|String
name|buildSolrXML
parameter_list|(
name|List
argument_list|<
name|CoreDescriptor
argument_list|>
name|cds
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|CoreDescriptor
name|cd
range|:
name|cds
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|buildCoreTag
argument_list|(
name|cd
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|solrXmlTemplate
operator|.
name|replace
argument_list|(
name|CORES_PLACEHOLDER
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|field|NEWLINE
specifier|public
specifier|static
specifier|final
name|String
name|NEWLINE
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|INDENT
specifier|public
specifier|static
specifier|final
name|String
name|INDENT
init|=
literal|"    "
decl_stmt|;
comment|/**    * Serialize a coredescriptor as a String containing an XML&lt;core> tag.    * @param cd the CoreDescriptor    * @return an XML representation of the CoreDescriptor    */
DECL|method|buildCoreTag
specifier|protected
specifier|static
name|String
name|buildCoreTag
parameter_list|(
name|CoreDescriptor
name|cd
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|NEWLINE
argument_list|)
operator|.
name|append
argument_list|(
name|INDENT
argument_list|)
operator|.
name|append
argument_list|(
literal|"<core"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|cd
operator|.
name|getPersistableStandardProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"=\""
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|Properties
name|userProperties
init|=
name|cd
operator|.
name|getPersistableUserProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|userProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|builder
operator|.
name|append
argument_list|(
literal|"/>"
argument_list|)
operator|.
name|append
argument_list|(
name|NEWLINE
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
operator|.
name|append
argument_list|(
name|NEWLINE
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|userProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|INDENT
argument_list|)
operator|.
name|append
argument_list|(
name|INDENT
argument_list|)
operator|.
name|append
argument_list|(
literal|"<property name=\""
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" value=\""
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"/>"
argument_list|)
operator|.
name|append
argument_list|(
name|NEWLINE
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|append
argument_list|(
literal|"</core>"
argument_list|)
operator|.
name|append
argument_list|(
name|NEWLINE
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|persist
specifier|public
specifier|final
name|void
name|persist
parameter_list|(
name|CoreContainer
name|cc
parameter_list|,
name|CoreDescriptor
modifier|...
name|coreDescriptors
parameter_list|)
block|{
name|List
argument_list|<
name|CoreDescriptor
argument_list|>
name|cds
init|=
operator|new
name|ArrayList
argument_list|<
name|CoreDescriptor
argument_list|>
argument_list|(
name|cc
operator|.
name|getCoreDescriptors
argument_list|()
operator|.
name|size
argument_list|()
operator|+
name|coreDescriptors
operator|.
name|length
argument_list|)
decl_stmt|;
name|cds
operator|.
name|addAll
argument_list|(
name|cc
operator|.
name|getCoreDescriptors
argument_list|()
argument_list|)
expr_stmt|;
name|cds
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|coreDescriptors
argument_list|)
argument_list|)
expr_stmt|;
name|doPersist
argument_list|(
name|buildSolrXML
argument_list|(
name|cds
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doPersist
specifier|protected
specifier|synchronized
name|void
name|doPersist
parameter_list|(
name|String
name|xml
parameter_list|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|cfg
operator|.
name|config
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|getInstanceDir
argument_list|()
argument_list|,
name|ConfigSolr
operator|.
name|SOLR_XML_FILE
argument_list|)
decl_stmt|;
try|try
block|{
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|xml
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Persisted core descriptions to {}"
argument_list|,
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Couldn't persist core descriptions to {} : {}"
argument_list|,
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|void
name|create
parameter_list|(
name|CoreContainer
name|cc
parameter_list|,
name|CoreDescriptor
modifier|...
name|coreDescriptors
parameter_list|)
block|{
name|this
operator|.
name|persist
argument_list|(
name|cc
argument_list|,
name|coreDescriptors
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|(
name|CoreContainer
name|cc
parameter_list|,
name|CoreDescriptor
modifier|...
name|coreDescriptors
parameter_list|)
block|{
comment|// coreDescriptors is kind of a useless param - we persist the current state off cc
name|this
operator|.
name|persist
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rename
specifier|public
name|void
name|rename
parameter_list|(
name|CoreContainer
name|cc
parameter_list|,
name|CoreDescriptor
name|oldCD
parameter_list|,
name|CoreDescriptor
name|newCD
parameter_list|)
block|{
comment|// we don't need those params, we just write out the current cc state
name|this
operator|.
name|persist
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|discover
specifier|public
name|List
argument_list|<
name|CoreDescriptor
argument_list|>
name|discover
parameter_list|(
name|CoreContainer
name|cc
parameter_list|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|CoreDescriptor
argument_list|>
name|listBuilder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|coreName
range|:
name|cfg
operator|.
name|getAllCoreNames
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|cfg
operator|.
name|getProperty
argument_list|(
name|coreName
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_NAME
argument_list|,
name|DEFAULT_CORE_NAME
argument_list|)
decl_stmt|;
name|String
name|instanceDir
init|=
name|cfg
operator|.
name|getProperty
argument_list|(
name|coreName
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_INSTDIR
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Properties
name|coreProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|propName
range|:
name|CoreDescriptor
operator|.
name|standardPropNames
control|)
block|{
name|String
name|propValue
init|=
name|cfg
operator|.
name|getProperty
argument_list|(
name|coreName
argument_list|,
name|propName
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|propValue
argument_list|)
condition|)
name|coreProperties
operator|.
name|setProperty
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
name|coreProperties
operator|.
name|putAll
argument_list|(
name|cfg
operator|.
name|getCoreProperties
argument_list|(
name|coreName
argument_list|)
argument_list|)
expr_stmt|;
name|listBuilder
operator|.
name|add
argument_list|(
operator|new
name|CoreDescriptor
argument_list|(
name|cc
argument_list|,
name|name
argument_list|,
name|instanceDir
argument_list|,
name|coreProperties
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|listBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|// for testing
DECL|method|getTemplate
name|String
name|getTemplate
parameter_list|()
block|{
return|return
name|solrXmlTemplate
return|;
block|}
DECL|class|NonPersistingLocator
specifier|public
specifier|static
class|class
name|NonPersistingLocator
extends|extends
name|SolrXMLCoresLocator
block|{
DECL|method|NonPersistingLocator
specifier|public
name|NonPersistingLocator
parameter_list|(
name|String
name|originalXML
parameter_list|,
name|ConfigSolrXmlOld
name|cfg
parameter_list|)
block|{
name|super
argument_list|(
name|originalXML
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|this
operator|.
name|xml
operator|=
name|originalXML
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doPersist
specifier|public
name|void
name|doPersist
parameter_list|(
name|String
name|xml
parameter_list|)
block|{
name|this
operator|.
name|xml
operator|=
name|xml
expr_stmt|;
block|}
DECL|field|xml
specifier|public
name|String
name|xml
decl_stmt|;
block|}
block|}
end_class
end_unit
