begin_unit
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|PropertiesUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  *  */
end_comment
begin_class
DECL|class|ConfigSolrXml
specifier|public
class|class
name|ConfigSolrXml
extends|extends
name|ConfigSolr
block|{
DECL|field|log
specifier|protected
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConfigSolrXml
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|coresLocator
specifier|private
specifier|final
name|CoresLocator
name|coresLocator
decl_stmt|;
DECL|method|ConfigSolrXml
specifier|public
name|ConfigSolrXml
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
try|try
block|{
name|checkForIllegalConfig
argument_list|()
expr_stmt|;
name|fillPropMap
argument_list|()
expr_stmt|;
name|config
operator|.
name|substituteProperties
argument_list|()
expr_stmt|;
name|coresLocator
operator|=
operator|new
name|CorePropertiesLocator
argument_list|(
name|getCoreRootDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|checkForIllegalConfig
specifier|private
name|void
name|checkForIllegalConfig
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Do sanity checks - we don't want to find old style config
name|failIfFound
argument_list|(
literal|"solr/@coreLoadThreads"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/@persistent"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/@sharedLib"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/@zkHost"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/logging/@class"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/logging/@enabled"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/logging/watcher/@size"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/logging/watcher/@threshold"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@adminHandler"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@distribUpdateConnTimeout"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@distribUpdateSoTimeout"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@host"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@hostContext"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@hostPort"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@leaderVoteWait"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@genericCoreNodeNames"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@managementPath"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@shareSchema"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@transientCacheSize"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@zkClientTimeout"
argument_list|)
expr_stmt|;
comment|// These have no counterpart in 5.0, asking for any of these in Solr 5.0
comment|// will result in an error being
comment|// thrown.
name|failIfFound
argument_list|(
literal|"solr/cores/@defaultCoreName"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/@persistent"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@adminPath"
argument_list|)
expr_stmt|;
block|}
DECL|method|failIfFound
specifier|private
name|void
name|failIfFound
parameter_list|(
name|String
name|xPath
parameter_list|)
block|{
if|if
condition|(
name|config
operator|.
name|getVal
argument_list|(
name|xPath
argument_list|,
literal|false
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Should not have found "
operator|+
name|xPath
operator|+
literal|" solr.xml may be a mix of old and new style formats."
argument_list|)
throw|;
block|}
block|}
comment|// We can do this in 5.0 when we read the solr.xml since we don't need to keep the original around for persistence.
DECL|method|doSub
specifier|private
name|String
name|doSub
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|String
name|val
init|=
name|config
operator|.
name|getVal
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|val
operator|=
name|PropertiesUtil
operator|.
name|substituteProperty
argument_list|(
name|val
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
DECL|method|fillPropMap
specifier|private
name|void
name|fillPropMap
parameter_list|()
block|{
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_ADMINHANDLER
argument_list|,
name|doSub
argument_list|(
literal|"solr/str[@name='adminHandler']"
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_COLLECTIONSHANDLER
argument_list|,
name|doSub
argument_list|(
literal|"solr/str[@name='collectionsHandler']"
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_INFOHANDLER
argument_list|,
name|doSub
argument_list|(
literal|"solr/str[@name='infoHandler']"
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_CORELOADTHREADS
argument_list|,
name|doSub
argument_list|(
literal|"solr/int[@name='coreLoadThreads']"
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_COREROOTDIRECTORY
argument_list|,
name|doSub
argument_list|(
literal|"solr/str[@name='coreRootDirectory']"
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_DISTRIBUPDATECONNTIMEOUT
argument_list|,
name|doSub
argument_list|(
literal|"solr/solrcloud/int[@name='distribUpdateConnTimeout']"
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_DISTRIBUPDATESOTIMEOUT
argument_list|,
name|doSub
argument_list|(
literal|"solr/solrcloud/int[@name='distribUpdateSoTimeout']"
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_MAXUPDATECONNECTIONS
argument_list|,
name|doSub
argument_list|(
literal|"solr/solrcloud/int[@name='maxUpdateConnections']"
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_MAXUPDATECONNECTIONSPERHOST
argument_list|,
name|doSub
argument_list|(
literal|"solr/solrcloud/int[@name='maxUpdateConnectionsPerHost']"
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_HOST
argument_list|,
name|doSub
argument_list|(
literal|"solr/solrcloud/str[@name='host']"
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_HOSTCONTEXT
argument_list|,
name|doSub
argument_list|(
literal|"solr/solrcloud/str[@name='hostContext']"
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_HOSTPORT
argument_list|,
name|doSub
argument_list|(
literal|"solr/solrcloud/int[@name='hostPort']"
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_LEADERVOTEWAIT
argument_list|,
name|doSub
argument_list|(
literal|"solr/solrcloud/int[@name='leaderVoteWait']"
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_GENERICCORENODENAMES
argument_list|,
name|doSub
argument_list|(
literal|"solr/solrcloud/bool[@name='genericCoreNodeNames']"
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_MANAGEMENTPATH
argument_list|,
name|doSub
argument_list|(
literal|"solr/str[@name='managementPath']"
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_SHAREDLIB
argument_list|,
name|doSub
argument_list|(
literal|"solr/str[@name='sharedLib']"
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_SHARESCHEMA
argument_list|,
name|doSub
argument_list|(
literal|"solr/str[@name='shareSchema']"
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_TRANSIENTCACHESIZE
argument_list|,
name|doSub
argument_list|(
literal|"solr/int[@name='transientCacheSize']"
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_ZKCLIENTTIMEOUT
argument_list|,
name|doSub
argument_list|(
literal|"solr/solrcloud/int[@name='zkClientTimeout']"
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_ZKHOST
argument_list|,
name|doSub
argument_list|(
literal|"solr/solrcloud/str[@name='zkHost']"
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_LOGGING_CLASS
argument_list|,
name|doSub
argument_list|(
literal|"solr/logging/str[@name='class']"
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_LOGGING_ENABLED
argument_list|,
name|doSub
argument_list|(
literal|"solr/logging/str[@name='enabled']"
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_LOGGING_WATCHER_SIZE
argument_list|,
name|doSub
argument_list|(
literal|"solr/logging/watcher/int[@name='size']"
argument_list|)
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CfgProp
operator|.
name|SOLR_LOGGING_WATCHER_THRESHOLD
argument_list|,
name|doSub
argument_list|(
literal|"solr/logging/watcher/int[@name='threshold']"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDefaultCoreName
specifier|public
name|String
name|getDefaultCoreName
parameter_list|()
block|{
return|return
literal|"collection1"
return|;
block|}
annotation|@
name|Override
DECL|method|isPersistent
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getShardHandlerFactoryConfigPath
specifier|protected
name|String
name|getShardHandlerFactoryConfigPath
parameter_list|()
block|{
return|return
literal|"solr/shardHandlerFactory"
return|;
block|}
annotation|@
name|Override
DECL|method|getAdminPath
specifier|public
name|String
name|getAdminPath
parameter_list|()
block|{
return|return
name|DEFAULT_CORE_ADMIN_PATH
return|;
block|}
annotation|@
name|Override
DECL|method|getCoresLocator
specifier|public
name|CoresLocator
name|getCoresLocator
parameter_list|()
block|{
return|return
name|coresLocator
return|;
block|}
block|}
end_class
end_unit
