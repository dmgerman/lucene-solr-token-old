begin_unit
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DOMUtil
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Functions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_comment
comment|/**  *  */
end_comment
begin_class
DECL|class|ConfigSolrXml
specifier|public
class|class
name|ConfigSolrXml
extends|extends
name|ConfigSolr
block|{
DECL|field|log
specifier|protected
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConfigSolrXml
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|coresLocator
specifier|private
specifier|final
name|CoresLocator
name|coresLocator
decl_stmt|;
DECL|method|ConfigSolrXml
specifier|public
name|ConfigSolrXml
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
try|try
block|{
name|checkForIllegalConfig
argument_list|()
expr_stmt|;
name|fillPropMap
argument_list|()
expr_stmt|;
name|coresLocator
operator|=
operator|new
name|CorePropertiesLocator
argument_list|(
name|getCoreRootDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|checkForIllegalConfig
specifier|private
name|void
name|checkForIllegalConfig
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Do sanity checks - we don't want to find old style config
name|failIfFound
argument_list|(
literal|"solr/@coreLoadThreads"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/@persistent"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/@sharedLib"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/@zkHost"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/logging/@class"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/logging/@enabled"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/logging/watcher/@size"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/logging/watcher/@threshold"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@adminHandler"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@distribUpdateConnTimeout"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@distribUpdateSoTimeout"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@host"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@hostContext"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@hostPort"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@leaderVoteWait"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@leaderConflictResolveWait"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@genericCoreNodeNames"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@managementPath"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@shareSchema"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@transientCacheSize"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@zkClientTimeout"
argument_list|)
expr_stmt|;
comment|// These have no counterpart in 5.0, asking for any of these in Solr 5.0
comment|// will result in an error being
comment|// thrown.
name|failIfFound
argument_list|(
literal|"solr/cores/@defaultCoreName"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/@persistent"
argument_list|)
expr_stmt|;
name|failIfFound
argument_list|(
literal|"solr/cores/@adminPath"
argument_list|)
expr_stmt|;
block|}
DECL|method|failIfFound
specifier|private
name|void
name|failIfFound
parameter_list|(
name|String
name|xPath
parameter_list|)
block|{
if|if
condition|(
name|config
operator|.
name|getVal
argument_list|(
name|xPath
argument_list|,
literal|false
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Should not have found "
operator|+
name|xPath
operator|+
literal|" solr.xml may be a mix of old and new style formats."
argument_list|)
throw|;
block|}
block|}
DECL|method|readNodeListAsNamedList
specifier|private
name|NamedList
argument_list|<
name|Object
argument_list|>
name|readNodeListAsNamedList
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|NodeList
name|nodes
init|=
name|config
operator|.
name|getNodeList
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|!=
literal|null
condition|)
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|namedList
init|=
name|DOMUtil
operator|.
name|nodesToNamedList
argument_list|(
name|nodes
argument_list|)
decl_stmt|;
return|return
name|namedList
return|;
block|}
return|return
operator|new
name|NamedList
argument_list|<>
argument_list|()
return|;
block|}
DECL|method|fillPropMap
specifier|private
name|void
name|fillPropMap
parameter_list|()
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|unknownConfigParams
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// shardHandlerFactory is parsed differently in the base class as a plugin, so we're excluding this node from the node list
name|fillSolrSection
argument_list|(
name|readNodeListAsNamedList
argument_list|(
literal|"solr/*[@name][not(name()='shardHandlerFactory')]"
argument_list|)
argument_list|)
expr_stmt|;
name|thereCanBeOnlyOne
argument_list|(
literal|"solr/solrcloud"
argument_list|,
literal|"<solrcloud>"
argument_list|)
expr_stmt|;
name|fillSolrCloudSection
argument_list|(
name|readNodeListAsNamedList
argument_list|(
literal|"solr/solrcloud/*[@name]"
argument_list|)
argument_list|)
expr_stmt|;
name|thereCanBeOnlyOne
argument_list|(
literal|"solr/logging"
argument_list|,
literal|"<logging>"
argument_list|)
expr_stmt|;
name|thereCanBeOnlyOne
argument_list|(
literal|"solr/logging/watcher"
argument_list|,
literal|"Logging<watcher>"
argument_list|)
expr_stmt|;
name|fillLoggingSection
argument_list|(
name|readNodeListAsNamedList
argument_list|(
literal|"solr/logging/*[@name]"
argument_list|)
argument_list|,
name|readNodeListAsNamedList
argument_list|(
literal|"solr/logging/watcher/*[@name]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|fillSolrSection
specifier|private
name|void
name|fillSolrSection
parameter_list|(
name|NamedList
argument_list|<
name|Object
argument_list|>
name|nl
parameter_list|)
block|{
name|String
name|s
init|=
literal|"Main"
decl_stmt|;
name|storeConfigPropertyAsString
argument_list|(
name|s
argument_list|,
name|nl
argument_list|,
name|CfgProp
operator|.
name|SOLR_ADMINHANDLER
argument_list|,
literal|"adminHandler"
argument_list|)
expr_stmt|;
name|storeConfigPropertyAsString
argument_list|(
name|s
argument_list|,
name|nl
argument_list|,
name|CfgProp
operator|.
name|SOLR_COLLECTIONSHANDLER
argument_list|,
literal|"collectionsHandler"
argument_list|)
expr_stmt|;
name|storeConfigPropertyAsString
argument_list|(
name|s
argument_list|,
name|nl
argument_list|,
name|CfgProp
operator|.
name|SOLR_INFOHANDLER
argument_list|,
literal|"infoHandler"
argument_list|)
expr_stmt|;
name|storeConfigPropertyAsString
argument_list|(
name|s
argument_list|,
name|nl
argument_list|,
name|CfgProp
operator|.
name|SOLR_COREROOTDIRECTORY
argument_list|,
literal|"coreRootDirectory"
argument_list|)
expr_stmt|;
name|storeConfigPropertyAsString
argument_list|(
name|s
argument_list|,
name|nl
argument_list|,
name|CfgProp
operator|.
name|SOLR_MANAGEMENTPATH
argument_list|,
literal|"managementPath"
argument_list|)
expr_stmt|;
name|storeConfigPropertyAsString
argument_list|(
name|s
argument_list|,
name|nl
argument_list|,
name|CfgProp
operator|.
name|SOLR_SHAREDLIB
argument_list|,
literal|"sharedLib"
argument_list|)
expr_stmt|;
name|storeConfigPropertyAsString
argument_list|(
name|s
argument_list|,
name|nl
argument_list|,
name|CfgProp
operator|.
name|SOLR_CONFIGSETBASEDIR
argument_list|,
literal|"configSetBaseDir"
argument_list|)
expr_stmt|;
name|storeConfigPropertyAsBoolean
argument_list|(
name|s
argument_list|,
name|nl
argument_list|,
name|CfgProp
operator|.
name|SOLR_SHARESCHEMA
argument_list|,
literal|"shareSchema"
argument_list|)
expr_stmt|;
name|storeConfigPropertyAsInt
argument_list|(
name|s
argument_list|,
name|nl
argument_list|,
name|CfgProp
operator|.
name|SOLR_CORELOADTHREADS
argument_list|,
literal|"coreLoadThreads"
argument_list|)
expr_stmt|;
name|storeConfigPropertyAsInt
argument_list|(
name|s
argument_list|,
name|nl
argument_list|,
name|CfgProp
operator|.
name|SOLR_TRANSIENTCACHESIZE
argument_list|,
literal|"transientCacheSize"
argument_list|)
expr_stmt|;
name|errorOnLeftOvers
argument_list|(
name|s
argument_list|,
name|nl
argument_list|)
expr_stmt|;
block|}
DECL|method|fillSolrCloudSection
specifier|private
name|void
name|fillSolrCloudSection
parameter_list|(
name|NamedList
argument_list|<
name|Object
argument_list|>
name|nl
parameter_list|)
block|{
name|String
name|s
init|=
literal|"<solrcloud>"
decl_stmt|;
name|storeConfigPropertyAsInt
argument_list|(
name|s
argument_list|,
name|nl
argument_list|,
name|CfgProp
operator|.
name|SOLR_DISTRIBUPDATECONNTIMEOUT
argument_list|,
literal|"distribUpdateConnTimeout"
argument_list|)
expr_stmt|;
name|storeConfigPropertyAsInt
argument_list|(
name|s
argument_list|,
name|nl
argument_list|,
name|CfgProp
operator|.
name|SOLR_DISTRIBUPDATESOTIMEOUT
argument_list|,
literal|"distribUpdateSoTimeout"
argument_list|)
expr_stmt|;
name|storeConfigPropertyAsInt
argument_list|(
name|s
argument_list|,
name|nl
argument_list|,
name|CfgProp
operator|.
name|SOLR_MAXUPDATECONNECTIONS
argument_list|,
literal|"maxUpdateConnections"
argument_list|)
expr_stmt|;
name|storeConfigPropertyAsInt
argument_list|(
name|s
argument_list|,
name|nl
argument_list|,
name|CfgProp
operator|.
name|SOLR_MAXUPDATECONNECTIONSPERHOST
argument_list|,
literal|"maxUpdateConnectionsPerHost"
argument_list|)
expr_stmt|;
name|storeConfigPropertyAsInt
argument_list|(
name|s
argument_list|,
name|nl
argument_list|,
name|CfgProp
operator|.
name|SOLR_LEADERVOTEWAIT
argument_list|,
literal|"leaderVoteWait"
argument_list|)
expr_stmt|;
name|storeConfigPropertyAsInt
argument_list|(
name|s
argument_list|,
name|nl
argument_list|,
name|CfgProp
operator|.
name|SOLR_LEADERCONFLICTRESOLVEWAIT
argument_list|,
literal|"leaderConflictResolveWait"
argument_list|)
expr_stmt|;
name|storeConfigPropertyAsInt
argument_list|(
name|s
argument_list|,
name|nl
argument_list|,
name|CfgProp
operator|.
name|SOLR_ZKCLIENTTIMEOUT
argument_list|,
literal|"zkClientTimeout"
argument_list|)
expr_stmt|;
name|storeConfigPropertyAsString
argument_list|(
name|s
argument_list|,
name|nl
argument_list|,
name|CfgProp
operator|.
name|SOLR_HOST
argument_list|,
literal|"host"
argument_list|)
expr_stmt|;
name|storeConfigPropertyAsString
argument_list|(
name|s
argument_list|,
name|nl
argument_list|,
name|CfgProp
operator|.
name|SOLR_HOSTCONTEXT
argument_list|,
literal|"hostContext"
argument_list|)
expr_stmt|;
name|storeConfigPropertyAsString
argument_list|(
name|s
argument_list|,
name|nl
argument_list|,
name|CfgProp
operator|.
name|SOLR_HOSTPORT
argument_list|,
literal|"hostPort"
argument_list|)
expr_stmt|;
name|storeConfigPropertyAsString
argument_list|(
name|s
argument_list|,
name|nl
argument_list|,
name|CfgProp
operator|.
name|SOLR_ZKHOST
argument_list|,
literal|"zkHost"
argument_list|)
expr_stmt|;
name|storeConfigPropertyAsBoolean
argument_list|(
name|s
argument_list|,
name|nl
argument_list|,
name|CfgProp
operator|.
name|SOLR_GENERICCORENODENAMES
argument_list|,
literal|"genericCoreNodeNames"
argument_list|)
expr_stmt|;
name|errorOnLeftOvers
argument_list|(
name|s
argument_list|,
name|nl
argument_list|)
expr_stmt|;
block|}
DECL|method|fillLoggingSection
specifier|private
name|void
name|fillLoggingSection
parameter_list|(
name|NamedList
argument_list|<
name|Object
argument_list|>
name|loggingConfig
parameter_list|,
name|NamedList
argument_list|<
name|Object
argument_list|>
name|loggingWatcherConfig
parameter_list|)
block|{
name|String
name|s
init|=
literal|"<logging>"
decl_stmt|;
name|storeConfigPropertyAsString
argument_list|(
name|s
argument_list|,
name|loggingConfig
argument_list|,
name|CfgProp
operator|.
name|SOLR_LOGGING_CLASS
argument_list|,
literal|"class"
argument_list|)
expr_stmt|;
name|storeConfigPropertyAsBoolean
argument_list|(
name|s
argument_list|,
name|loggingConfig
argument_list|,
name|CfgProp
operator|.
name|SOLR_LOGGING_ENABLED
argument_list|,
literal|"enabled"
argument_list|)
expr_stmt|;
name|errorOnLeftOvers
argument_list|(
name|s
argument_list|,
name|loggingConfig
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"Logging<watcher>"
expr_stmt|;
name|storeConfigPropertyAsInt
argument_list|(
name|s
argument_list|,
name|loggingWatcherConfig
argument_list|,
name|CfgProp
operator|.
name|SOLR_LOGGING_WATCHER_SIZE
argument_list|,
literal|"size"
argument_list|)
expr_stmt|;
name|storeConfigPropertyAsString
argument_list|(
name|s
argument_list|,
name|loggingWatcherConfig
argument_list|,
name|CfgProp
operator|.
name|SOLR_LOGGING_WATCHER_THRESHOLD
argument_list|,
literal|"threshold"
argument_list|)
expr_stmt|;
name|errorOnLeftOvers
argument_list|(
name|s
argument_list|,
name|loggingWatcherConfig
argument_list|)
expr_stmt|;
block|}
DECL|method|storeConfigProperty
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|storeConfigProperty
parameter_list|(
name|String
name|section
parameter_list|,
name|NamedList
argument_list|<
name|Object
argument_list|>
name|config
parameter_list|,
name|CfgProp
name|propertyKey
parameter_list|,
name|String
name|name
parameter_list|,
name|Function
argument_list|<
name|Object
argument_list|,
name|T
argument_list|>
name|valueTransformer
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|config
operator|.
name|removeAll
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|values
operator|&&
literal|0
operator|!=
name|values
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
literal|1
operator|<
name|values
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s section of solr.xml contains duplicated '%s'"
operator|+
literal|" in solr.xml: %s"
argument_list|,
name|section
argument_list|,
name|name
argument_list|,
name|values
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|Object
name|value
init|=
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|propertyKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|propMap
operator|.
name|put
argument_list|(
name|propertyKey
argument_list|,
name|valueTransformer
operator|.
name|apply
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|propMap
operator|.
name|put
argument_list|(
name|propertyKey
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|storeConfigPropertyAsString
specifier|private
name|void
name|storeConfigPropertyAsString
parameter_list|(
name|String
name|section
parameter_list|,
name|NamedList
argument_list|<
name|Object
argument_list|>
name|config
parameter_list|,
name|CfgProp
name|propertyKey
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|storeConfigProperty
argument_list|(
name|section
argument_list|,
name|config
argument_list|,
name|propertyKey
argument_list|,
name|name
argument_list|,
name|Functions
operator|.
name|toStringFunction
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|storeConfigPropertyAsInt
specifier|private
name|void
name|storeConfigPropertyAsInt
parameter_list|(
name|String
name|section
parameter_list|,
name|NamedList
argument_list|<
name|Object
argument_list|>
name|config
parameter_list|,
name|CfgProp
name|propertyKey
parameter_list|,
name|String
name|xmlElementName
parameter_list|)
block|{
name|storeConfigProperty
argument_list|(
name|section
argument_list|,
name|config
argument_list|,
name|propertyKey
argument_list|,
name|xmlElementName
argument_list|,
name|TO_INT_FUNCTION
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|storeConfigPropertyAsBoolean
specifier|private
name|void
name|storeConfigPropertyAsBoolean
parameter_list|(
name|String
name|section
parameter_list|,
name|NamedList
argument_list|<
name|Object
argument_list|>
name|config
parameter_list|,
name|CfgProp
name|propertyKey
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|storeConfigProperty
argument_list|(
name|section
argument_list|,
name|config
argument_list|,
name|propertyKey
argument_list|,
name|name
argument_list|,
name|TO_BOOLEAN_FUNCTION
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/** throws an error if more then one element matching the xpath */
DECL|method|thereCanBeOnlyOne
specifier|private
name|void
name|thereCanBeOnlyOne
parameter_list|(
name|String
name|xpath
parameter_list|,
name|String
name|section
parameter_list|)
block|{
name|NodeList
name|lst
init|=
name|config
operator|.
name|getNodeList
argument_list|(
name|xpath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
literal|1
operator|<
name|lst
operator|.
name|getLength
argument_list|()
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|lst
operator|.
name|getLength
argument_list|()
operator|+
literal|" instances of "
operator|+
name|section
operator|+
literal|" found in solr.xml"
argument_list|)
throw|;
block|}
comment|/** logs each item in leftovers and then throws an exception with a summary */
DECL|method|errorOnLeftOvers
specifier|private
name|void
name|errorOnLeftOvers
parameter_list|(
name|String
name|section
parameter_list|,
name|NamedList
argument_list|<
name|Object
argument_list|>
name|leftovers
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|leftovers
operator|||
literal|0
operator|==
name|leftovers
operator|.
name|size
argument_list|()
condition|)
return|return;
name|List
argument_list|<
name|String
argument_list|>
name|unknownElements
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|leftovers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|unknownElement
range|:
name|leftovers
control|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unknown config parameter in {} section of solr.xml: {} -> {}"
argument_list|,
name|section
argument_list|,
name|unknownElement
operator|.
name|getKey
argument_list|()
argument_list|,
name|unknownElement
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|unknownElements
operator|.
name|add
argument_list|(
name|unknownElement
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|unknownElements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s section of solr.xml contains %d unknown config parameter(s): %s"
argument_list|,
name|section
argument_list|,
name|unknownElements
operator|.
name|size
argument_list|()
argument_list|,
name|unknownElements
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDefaultCoreName
specifier|public
name|String
name|getDefaultCoreName
parameter_list|()
block|{
return|return
literal|"collection1"
return|;
block|}
annotation|@
name|Override
DECL|method|isPersistent
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getShardHandlerFactoryConfigPath
specifier|protected
name|String
name|getShardHandlerFactoryConfigPath
parameter_list|()
block|{
return|return
literal|"solr/shardHandlerFactory"
return|;
block|}
annotation|@
name|Override
DECL|method|getAdminPath
specifier|public
name|String
name|getAdminPath
parameter_list|()
block|{
return|return
name|DEFAULT_CORE_ADMIN_PATH
return|;
block|}
annotation|@
name|Override
DECL|method|getCoresLocator
specifier|public
name|CoresLocator
name|getCoresLocator
parameter_list|()
block|{
return|return
name|coresLocator
return|;
block|}
DECL|field|GET_KEY_FUNCTION
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|String
argument_list|>
name|GET_KEY_FUNCTION
init|=
operator|new
name|Function
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|field|TO_INT_FUNCTION
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|Object
argument_list|,
name|Integer
argument_list|>
name|TO_INT_FUNCTION
init|=
operator|new
name|Function
argument_list|<
name|Object
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|input
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exc
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Value of '%s' can not be parsed as 'int'"
argument_list|,
name|input
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
DECL|field|TO_BOOLEAN_FUNCTION
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|Object
argument_list|,
name|Boolean
argument_list|>
name|TO_BOOLEAN_FUNCTION
init|=
operator|new
name|Function
argument_list|<
name|Object
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|instanceof
name|String
condition|)
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|input
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Value of '%s' can not be parsed as 'bool'"
argument_list|,
name|input
argument_list|)
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
block|}
end_class
end_unit
