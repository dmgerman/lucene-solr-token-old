begin_unit
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ZkController
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|HttpShardHandlerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandlerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DOMUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|PropertiesUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|SystemIdResolver
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|PluginInfoInitialized
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMResult
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_comment
comment|/**  * ConfigSolrXml  *<p/>  * This class is entirely to localize the backwards compatibility for dealing with specific issues when transitioning  * from solr.xml to a solr.properties-based, enumeration/discovery of defined cores. See SOLR-4196 for background.  *<p/>  * @since solr 4.3  *  * It's a bit twisted, but we decided to NOT do the solr.properties switch. But since there's already an interface  * it makes sense to leave it in so we can use other methods of providing the Solr information that is contained  * in solr.xml. Perhapse something form SolrCloud in the future?  *  */
end_comment
begin_class
DECL|class|ConfigSolrXml
specifier|public
class|class
name|ConfigSolrXml
extends|extends
name|Config
implements|implements
name|ConfigSolr
block|{
DECL|field|prefixes
specifier|private
specifier|static
name|Map
argument_list|<
name|ConfLevel
argument_list|,
name|String
argument_list|>
name|prefixes
decl_stmt|;
DECL|field|isAutoDiscover
specifier|private
name|boolean
name|isAutoDiscover
init|=
literal|false
decl_stmt|;
DECL|field|coreDescriptorPlusMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CoreDescriptorPlus
argument_list|>
name|coreDescriptorPlusMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CoreDescriptorPlus
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|coreNodes
specifier|private
name|NodeList
name|coreNodes
init|=
literal|null
decl_stmt|;
static|static
block|{
name|prefixes
operator|=
operator|new
name|HashMap
argument_list|<
name|ConfLevel
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|prefixes
operator|.
name|put
argument_list|(
name|ConfLevel
operator|.
name|SOLR
argument_list|,
literal|"solr/@"
argument_list|)
expr_stmt|;
name|prefixes
operator|.
name|put
argument_list|(
name|ConfLevel
operator|.
name|SOLR_CORES
argument_list|,
literal|"solr/cores/@"
argument_list|)
expr_stmt|;
name|prefixes
operator|.
name|put
argument_list|(
name|ConfLevel
operator|.
name|SOLR_CORES_CORE
argument_list|,
literal|"solr/cores/core/@"
argument_list|)
expr_stmt|;
name|prefixes
operator|.
name|put
argument_list|(
name|ConfLevel
operator|.
name|SOLR_LOGGING
argument_list|,
literal|"solr/logging/@"
argument_list|)
expr_stmt|;
name|prefixes
operator|.
name|put
argument_list|(
name|ConfLevel
operator|.
name|SOLR_LOGGING_WATCHER
argument_list|,
literal|"solr/logging/watcher/@"
argument_list|)
expr_stmt|;
block|}
DECL|method|ConfigSolrXml
specifier|public
name|ConfigSolrXml
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|,
name|String
name|name
parameter_list|,
name|InputStream
name|is
parameter_list|,
name|String
name|prefix
parameter_list|,
name|boolean
name|subProps
parameter_list|,
name|CoreContainer
name|container
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|super
argument_list|(
name|loader
argument_list|,
name|name
argument_list|,
operator|new
name|InputSource
argument_list|(
name|is
argument_list|)
argument_list|,
name|prefix
argument_list|,
name|subProps
argument_list|)
expr_stmt|;
name|initCoreList
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
DECL|method|ConfigSolrXml
specifier|public
name|ConfigSolrXml
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|,
name|Config
name|cfg
parameter_list|,
name|CoreContainer
name|container
parameter_list|)
throws|throws
name|TransformerException
throws|,
name|IOException
block|{
name|super
argument_list|(
name|loader
argument_list|,
literal|null
argument_list|,
name|copyDoc
argument_list|(
name|cfg
operator|.
name|getDocument
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Mimics a call from CoreContainer.
name|initCoreList
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
DECL|method|initCoreList
specifier|public
name|void
name|initCoreList
parameter_list|(
name|CoreContainer
name|container
parameter_list|)
throws|throws
name|IOException
block|{
name|isAutoDiscover
operator|=
name|getBool
argument_list|(
name|ConfigSolr
operator|.
name|ConfLevel
operator|.
name|SOLR_CORES
argument_list|,
literal|"autoDiscoverCores"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAutoDiscover
condition|)
block|{
synchronized|synchronized
init|(
name|coreDescriptorPlusMap
init|)
block|{
name|walkFromHere
argument_list|(
operator|new
name|File
argument_list|(
name|container
operator|.
name|getSolrHome
argument_list|()
argument_list|)
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|coreNodes
operator|=
operator|(
name|NodeList
operator|)
name|evaluate
argument_list|(
literal|"solr/cores/core"
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|copyDoc
specifier|public
specifier|static
name|Document
name|copyDoc
parameter_list|(
name|Document
name|doc
parameter_list|)
throws|throws
name|TransformerException
block|{
name|TransformerFactory
name|tfactory
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Transformer
name|tx
init|=
name|tfactory
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|DOMSource
name|source
init|=
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|DOMResult
name|result
init|=
operator|new
name|DOMResult
argument_list|()
decl_stmt|;
name|tx
operator|.
name|transform
argument_list|(
name|source
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
operator|(
name|Document
operator|)
name|result
operator|.
name|getNode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getInt
specifier|public
name|int
name|getInt
parameter_list|(
name|ConfLevel
name|level
parameter_list|,
name|String
name|tag
parameter_list|,
name|int
name|def
parameter_list|)
block|{
return|return
name|getInt
argument_list|(
name|prefixes
operator|.
name|get
argument_list|(
name|level
argument_list|)
operator|+
name|tag
argument_list|,
name|def
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getBool
specifier|public
name|boolean
name|getBool
parameter_list|(
name|ConfLevel
name|level
parameter_list|,
name|String
name|tag
parameter_list|,
name|boolean
name|defValue
parameter_list|)
block|{
return|return
name|getBool
argument_list|(
name|prefixes
operator|.
name|get
argument_list|(
name|level
argument_list|)
operator|+
name|tag
argument_list|,
name|defValue
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|String
name|get
parameter_list|(
name|ConfLevel
name|level
parameter_list|,
name|String
name|tag
parameter_list|,
name|String
name|def
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|prefixes
operator|.
name|get
argument_list|(
name|level
argument_list|)
operator|+
name|tag
argument_list|,
name|def
argument_list|)
return|;
block|}
DECL|method|initShardHandler
specifier|public
name|ShardHandlerFactory
name|initShardHandler
parameter_list|()
block|{
name|PluginInfo
name|info
init|=
literal|null
decl_stmt|;
name|Node
name|shfn
init|=
name|getNode
argument_list|(
literal|"solr/cores/shardHandlerFactory"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|shfn
operator|!=
literal|null
condition|)
block|{
name|info
operator|=
operator|new
name|PluginInfo
argument_list|(
name|shfn
argument_list|,
literal|"shardHandlerFactory"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
name|m
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"class"
argument_list|,
name|HttpShardHandlerFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|=
operator|new
name|PluginInfo
argument_list|(
literal|"shardHandlerFactory"
argument_list|,
name|m
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|PluginInfo
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ShardHandlerFactory
name|fac
decl_stmt|;
try|try
block|{
name|fac
operator|=
name|getResourceLoader
argument_list|()
operator|.
name|findClass
argument_list|(
name|info
operator|.
name|className
argument_list|,
name|ShardHandlerFactory
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error instantiating shardHandlerFactory class "
operator|+
name|info
operator|.
name|className
argument_list|)
throw|;
block|}
if|if
condition|(
name|fac
operator|instanceof
name|PluginInfoInitialized
condition|)
block|{
operator|(
operator|(
name|PluginInfoInitialized
operator|)
name|fac
operator|)
operator|.
name|init
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|fac
return|;
block|}
annotation|@
name|Override
DECL|method|getSolrProperties
specifier|public
name|Properties
name|getSolrProperties
parameter_list|(
name|ConfigSolr
name|cfg
parameter_list|,
name|String
name|context
parameter_list|)
block|{
try|try
block|{
return|return
name|readProperties
argument_list|(
operator|(
operator|(
name|NodeList
operator|)
name|evaluate
argument_list|(
name|context
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
operator|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|readProperties
name|Properties
name|readProperties
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|XPathExpressionException
block|{
name|XPath
name|xpath
init|=
name|getXPath
argument_list|()
decl_stmt|;
name|NodeList
name|props
init|=
operator|(
name|NodeList
operator|)
name|xpath
operator|.
name|evaluate
argument_list|(
literal|"property"
argument_list|,
name|node
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|props
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|prop
init|=
name|props
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|prop
argument_list|,
literal|"name"
argument_list|)
argument_list|,
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|prop
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
annotation|@
name|Override
DECL|method|readCoreAttributes
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|readCoreAttributes
parameter_list|(
name|String
name|coreName
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attrs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isAutoDiscover
condition|)
block|{
return|return
name|attrs
return|;
comment|// this is a no-op.... intentionally
block|}
synchronized|synchronized
init|(
name|coreNodes
init|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|coreNodes
operator|.
name|getLength
argument_list|()
condition|;
operator|++
name|idx
control|)
block|{
name|Node
name|node
init|=
name|coreNodes
operator|.
name|item
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|coreName
operator|.
name|equals
argument_list|(
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_NAME
argument_list|,
literal|null
argument_list|)
argument_list|)
condition|)
block|{
name|NamedNodeMap
name|attributes
init|=
name|node
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|attribute
init|=
name|attributes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|val
init|=
name|attribute
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|CoreDescriptor
operator|.
name|CORE_DATADIR
operator|.
name|equals
argument_list|(
name|attribute
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|||
name|CoreDescriptor
operator|.
name|CORE_INSTDIR
operator|.
name|equals
argument_list|(
name|attribute
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|val
operator|.
name|indexOf
argument_list|(
literal|'$'
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|val
operator|=
operator|(
name|val
operator|!=
literal|null
operator|&&
operator|!
name|val
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|)
condition|?
name|val
operator|+
literal|'/'
else|:
name|val
expr_stmt|;
block|}
block|}
name|attrs
operator|.
name|put
argument_list|(
name|attribute
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|attrs
return|;
block|}
block|}
block|}
return|return
name|attrs
return|;
block|}
comment|// Basic recursive tree walking, looking for "core.properties" files. Once one is found, we'll stop going any
comment|// deeper in the tree.
comment|//
comment|// @param file - the directory we're to either read the properties file from or recurse into.
DECL|method|walkFromHere
specifier|private
name|void
name|walkFromHere
parameter_list|(
name|File
name|file
parameter_list|,
name|CoreContainer
name|container
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Looking for cores in "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|childFile
range|:
name|file
operator|.
name|listFiles
argument_list|()
control|)
block|{
comment|// This is a little tricky, we are asking if core.properties exists in a child directory of the directory passed
comment|// in. In other words we're looking for core.properties in the grandchild directories of the parameter passed
comment|// in. That allows us to gracefully top recursing deep but continue looking wide.
name|File
name|propFile
init|=
operator|new
name|File
argument_list|(
name|childFile
argument_list|,
name|CORE_PROP_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|propFile
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// Stop looking after processing this file!
name|log
operator|.
name|info
argument_list|(
literal|"Discovered properties file {}, adding to cores"
argument_list|,
name|propFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|Properties
name|propsOrig
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|propFile
argument_list|)
decl_stmt|;
try|try
block|{
name|propsOrig
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|prop
range|:
name|propsOrig
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|props
operator|.
name|put
argument_list|(
name|prop
argument_list|,
name|PropertiesUtil
operator|.
name|substituteProperty
argument_list|(
name|propsOrig
operator|.
name|getProperty
argument_list|(
name|prop
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|props
operator|.
name|getProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_INSTDIR
argument_list|)
operator|==
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_INSTDIR
argument_list|,
name|childFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|props
operator|.
name|getProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_NAME
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// Should default to this directory
name|props
operator|.
name|setProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_NAME
argument_list|,
name|childFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CoreDescriptor
name|desc
init|=
operator|new
name|CoreDescriptor
argument_list|(
name|container
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|CoreDescriptorPlus
name|plus
init|=
operator|new
name|CoreDescriptorPlus
argument_list|(
name|propFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|desc
argument_list|,
name|propsOrig
argument_list|)
decl_stmt|;
name|coreDescriptorPlusMap
operator|.
name|put
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|,
name|plus
argument_list|)
expr_stmt|;
continue|continue;
comment|// Go on to the sibling directory
block|}
if|if
condition|(
name|childFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|walkFromHere
argument_list|(
name|childFile
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getSchemaFromZk
specifier|public
name|IndexSchema
name|getSchemaFromZk
parameter_list|(
name|ZkController
name|zkController
parameter_list|,
name|String
name|zkConfigName
parameter_list|,
name|String
name|schemaName
parameter_list|,
name|SolrConfig
name|config
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|byte
index|[]
name|configBytes
init|=
name|zkController
operator|.
name|getConfigFileData
argument_list|(
name|zkConfigName
argument_list|,
name|schemaName
argument_list|)
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|configBytes
argument_list|)
argument_list|)
decl_stmt|;
name|is
operator|.
name|setSystemId
argument_list|(
name|SystemIdResolver
operator|.
name|createSystemIdFromResourceName
argument_list|(
name|schemaName
argument_list|)
argument_list|)
expr_stmt|;
name|IndexSchema
name|schema
init|=
operator|new
name|IndexSchema
argument_list|(
name|config
argument_list|,
name|schemaName
argument_list|,
name|is
argument_list|)
decl_stmt|;
return|return
name|schema
return|;
block|}
annotation|@
name|Override
DECL|method|getSolrConfigFromZk
specifier|public
name|SolrConfig
name|getSolrConfigFromZk
parameter_list|(
name|ZkController
name|zkController
parameter_list|,
name|String
name|zkConfigName
parameter_list|,
name|String
name|solrConfigFileName
parameter_list|,
name|SolrResourceLoader
name|resourceLoader
parameter_list|)
block|{
name|SolrConfig
name|cfg
init|=
literal|null
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|config
init|=
name|zkController
operator|.
name|getConfigFileData
argument_list|(
name|zkConfigName
argument_list|,
name|solrConfigFileName
argument_list|)
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|is
operator|.
name|setSystemId
argument_list|(
name|SystemIdResolver
operator|.
name|createSystemIdFromResourceName
argument_list|(
name|solrConfigFileName
argument_list|)
argument_list|)
expr_stmt|;
name|cfg
operator|=
name|solrConfigFileName
operator|==
literal|null
condition|?
operator|new
name|SolrConfig
argument_list|(
name|resourceLoader
argument_list|,
name|SolrConfig
operator|.
name|DEFAULT_CONF_FILE
argument_list|,
name|is
argument_list|)
else|:
operator|new
name|SolrConfig
argument_list|(
name|resourceLoader
argument_list|,
name|solrConfigFileName
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"getSolrConfigFromZK failed for "
operator|+
name|zkConfigName
operator|+
literal|" "
operator|+
name|solrConfigFileName
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|cfg
return|;
block|}
DECL|field|solrCoreXMLDefs
specifier|static
name|List
argument_list|<
name|SolrXMLSerializer
operator|.
name|SolrCoreXMLDef
argument_list|>
name|solrCoreXMLDefs
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrXMLSerializer
operator|.
name|SolrCoreXMLDef
argument_list|>
argument_list|()
decl_stmt|;
comment|// Do this when re-using a ConfigSolrXml.
comment|// These two methods are part of SOLR-4196 and are awkward, should go away with 5.0
annotation|@
name|Override
DECL|method|initPersist
specifier|public
name|void
name|initPersist
parameter_list|()
block|{
name|initPersistStatic
argument_list|()
expr_stmt|;
block|}
DECL|method|initPersistStatic
specifier|public
specifier|static
name|void
name|initPersistStatic
parameter_list|()
block|{
name|solrCoreXMLDefs
operator|=
operator|new
name|ArrayList
argument_list|<
name|SolrXMLSerializer
operator|.
name|SolrCoreXMLDef
argument_list|>
argument_list|()
expr_stmt|;
name|solrXMLSerializer
operator|=
operator|new
name|SolrXMLSerializer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addPersistCore
specifier|public
name|void
name|addPersistCore
parameter_list|(
name|String
name|coreName
parameter_list|,
name|Properties
name|attribs
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
block|{
name|addPersistCore
argument_list|(
name|attribs
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
DECL|method|addPersistCore
specifier|static
name|void
name|addPersistCore
parameter_list|(
name|Properties
name|props
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attribs
parameter_list|)
block|{
name|SolrXMLSerializer
operator|.
name|SolrCoreXMLDef
name|solrCoreXMLDef
init|=
operator|new
name|SolrXMLSerializer
operator|.
name|SolrCoreXMLDef
argument_list|()
decl_stmt|;
name|solrCoreXMLDef
operator|.
name|coreAttribs
operator|=
name|attribs
expr_stmt|;
name|solrCoreXMLDef
operator|.
name|coreProperties
operator|=
name|props
expr_stmt|;
name|solrCoreXMLDefs
operator|.
name|add
argument_list|(
name|solrCoreXMLDef
argument_list|)
expr_stmt|;
block|}
DECL|field|solrXMLSerializer
specifier|private
specifier|static
name|SolrXMLSerializer
name|solrXMLSerializer
init|=
operator|new
name|SolrXMLSerializer
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|addPersistAllCores
specifier|public
name|void
name|addPersistAllCores
parameter_list|(
name|Properties
name|containerProperties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rootSolrAttribs
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|coresAttribs
parameter_list|,
name|File
name|file
parameter_list|)
block|{
name|addPersistAllCoresStatic
argument_list|(
name|containerProperties
argument_list|,
name|rootSolrAttribs
argument_list|,
name|coresAttribs
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|// Fortunately, we don't iterate over these too often, so the waste is probably tolerable.
annotation|@
name|Override
DECL|method|getCoreNameFromOrig
specifier|public
name|String
name|getCoreNameFromOrig
parameter_list|(
name|String
name|origCoreName
parameter_list|,
name|SolrResourceLoader
name|loader
parameter_list|,
name|String
name|coreName
parameter_list|)
block|{
if|if
condition|(
name|isAutoDiscover
condition|)
block|{
comment|// first look for an exact match
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CoreDescriptorPlus
argument_list|>
name|ent
range|:
name|coreDescriptorPlusMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|ent
operator|.
name|getValue
argument_list|()
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|origCoreName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|coreName
operator|.
name|equals
argument_list|(
name|origCoreName
argument_list|)
condition|)
block|{
return|return
name|name
return|;
block|}
return|return
name|coreName
return|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CoreDescriptorPlus
argument_list|>
name|ent
range|:
name|coreDescriptorPlusMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|ent
operator|.
name|getValue
argument_list|()
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// see if we match with substitution
if|if
condition|(
name|origCoreName
operator|.
name|equals
argument_list|(
name|PropertiesUtil
operator|.
name|substituteProperty
argument_list|(
name|name
argument_list|,
name|loader
operator|.
name|getCoreProperties
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|coreName
operator|.
name|equals
argument_list|(
name|origCoreName
argument_list|)
condition|)
block|{
return|return
name|name
return|;
block|}
return|return
name|coreName
return|;
block|}
block|}
block|}
else|else
block|{
comment|// look for an existing node
synchronized|synchronized
init|(
name|coreNodes
init|)
block|{
comment|// first look for an exact match
name|Node
name|coreNode
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|coreNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|coreNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|origCoreName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|coreName
operator|.
name|equals
argument_list|(
name|origCoreName
argument_list|)
condition|)
block|{
return|return
name|name
return|;
block|}
return|return
name|coreName
return|;
block|}
block|}
if|if
condition|(
name|coreNode
operator|==
literal|null
condition|)
block|{
comment|// see if we match with substitution
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|coreNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|coreNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|origCoreName
operator|.
name|equals
argument_list|(
name|PropertiesUtil
operator|.
name|substituteProperty
argument_list|(
name|name
argument_list|,
name|loader
operator|.
name|getCoreProperties
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|coreName
operator|.
name|equals
argument_list|(
name|origCoreName
argument_list|)
condition|)
block|{
return|return
name|name
return|;
block|}
return|return
name|coreName
return|;
block|}
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getAllCoreNames
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllCoreNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isAutoDiscover
condition|)
block|{
name|ret
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|coreDescriptorPlusMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|coreNodes
init|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|coreNodes
operator|.
name|getLength
argument_list|()
condition|;
operator|++
name|idx
control|)
block|{
name|Node
name|node
init|=
name|coreNodes
operator|.
name|item
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_NAME
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|getProperty
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|coreName
parameter_list|,
name|String
name|property
parameter_list|,
name|String
name|defaultVal
parameter_list|)
block|{
if|if
condition|(
name|isAutoDiscover
condition|)
block|{
name|CoreDescriptorPlus
name|plus
init|=
name|coreDescriptorPlusMap
operator|.
name|get
argument_list|(
name|coreName
argument_list|)
decl_stmt|;
if|if
condition|(
name|plus
operator|==
literal|null
condition|)
return|return
name|defaultVal
return|;
name|CoreDescriptor
name|desc
init|=
name|plus
operator|.
name|getCoreDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
name|desc
operator|==
literal|null
condition|)
return|return
name|defaultVal
return|;
return|return
name|desc
operator|.
name|getProperty
argument_list|(
name|property
argument_list|,
name|defaultVal
argument_list|)
return|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|coreNodes
init|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|coreNodes
operator|.
name|getLength
argument_list|()
condition|;
operator|++
name|idx
control|)
block|{
name|Node
name|node
init|=
name|coreNodes
operator|.
name|item
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|coreName
operator|.
name|equals
argument_list|(
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_NAME
argument_list|,
literal|null
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
name|property
argument_list|,
name|defaultVal
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|defaultVal
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|readCoreProperties
specifier|public
name|Properties
name|readCoreProperties
parameter_list|(
name|String
name|coreName
parameter_list|)
block|{
if|if
condition|(
name|isAutoDiscover
condition|)
block|{
name|CoreDescriptorPlus
name|plus
init|=
name|coreDescriptorPlusMap
operator|.
name|get
argument_list|(
name|coreName
argument_list|)
decl_stmt|;
if|if
condition|(
name|plus
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|Properties
argument_list|(
name|plus
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreProperties
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|coreNodes
init|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|coreNodes
operator|.
name|getLength
argument_list|()
condition|;
operator|++
name|idx
control|)
block|{
name|Node
name|node
init|=
name|coreNodes
operator|.
name|item
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|coreName
operator|.
name|equals
argument_list|(
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_NAME
argument_list|,
literal|null
argument_list|)
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|readProperties
argument_list|(
name|node
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getCoreProperties
specifier|static
name|Properties
name|getCoreProperties
parameter_list|(
name|String
name|instanceDir
parameter_list|,
name|CoreDescriptor
name|dcore
parameter_list|)
block|{
name|String
name|file
init|=
name|dcore
operator|.
name|getPropertiesName
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
name|file
operator|=
literal|"conf"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"solrcore.properties"
expr_stmt|;
name|File
name|corePropsFile
init|=
operator|new
name|File
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|corePropsFile
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|corePropsFile
operator|=
operator|new
name|File
argument_list|(
name|instanceDir
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
name|Properties
name|p
init|=
name|dcore
operator|.
name|getCoreProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|corePropsFile
operator|.
name|exists
argument_list|()
operator|&&
name|corePropsFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|p
operator|=
operator|new
name|Properties
argument_list|(
name|dcore
operator|.
name|getCoreProperties
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|corePropsFile
argument_list|)
expr_stmt|;
name|p
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error loading properties "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|p
return|;
block|}
DECL|method|addPersistAllCoresStatic
specifier|static
name|void
name|addPersistAllCoresStatic
parameter_list|(
name|Properties
name|containerProperties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rootSolrAttribs
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|coresAttribs
parameter_list|,
name|File
name|file
parameter_list|)
block|{
name|SolrXMLSerializer
operator|.
name|SolrXMLDef
name|solrXMLDef
init|=
operator|new
name|SolrXMLSerializer
operator|.
name|SolrXMLDef
argument_list|()
decl_stmt|;
name|solrXMLDef
operator|.
name|coresDefs
operator|=
name|solrCoreXMLDefs
expr_stmt|;
name|solrXMLDef
operator|.
name|containerProperties
operator|=
name|containerProperties
expr_stmt|;
name|solrXMLDef
operator|.
name|solrAttribs
operator|=
name|rootSolrAttribs
expr_stmt|;
name|solrXMLDef
operator|.
name|coresAttribs
operator|=
name|coresAttribs
expr_stmt|;
name|solrXMLSerializer
operator|.
name|persistFile
argument_list|(
name|file
argument_list|,
name|solrXMLDef
argument_list|)
expr_stmt|;
block|}
DECL|field|DEF_SOLR_XML
specifier|static
specifier|final
name|String
name|DEF_SOLR_XML
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
operator|+
literal|"<solr persistent=\"false\">\n"
operator|+
literal|"<cores adminPath=\"/admin/cores\" defaultCoreName=\""
operator|+
name|CoreContainer
operator|.
name|DEFAULT_DEFAULT_CORE_NAME
operator|+
literal|"\""
operator|+
literal|" host=\"${host:}\" hostPort=\"${hostPort:}\" hostContext=\"${hostContext:}\" zkClientTimeout=\"${zkClientTimeout:15000}\""
operator|+
literal|">\n"
operator|+
literal|"<core name=\""
operator|+
name|CoreContainer
operator|.
name|DEFAULT_DEFAULT_CORE_NAME
operator|+
literal|"\" shard=\"${shard:}\" collection=\"${collection:}\" instanceDir=\"collection1\" />\n"
operator|+
literal|"</cores>\n"
operator|+
literal|"</solr>"
decl_stmt|;
block|}
end_class
begin_comment
comment|// It's mightily convenient to have all of the original path names and property values when persisting cores, so
end_comment
begin_comment
comment|// this little convenience class is just for that.
end_comment
begin_comment
comment|// Also, let's keep track of anything we added here, especially the instance dir for persistence purposes. We don't
end_comment
begin_comment
comment|// want, for instance, to persist instanceDir if it was not specified originally.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// I suspect that for persistence purposes, we may want to expand this idea to record, say, ${blah}
end_comment
begin_class
DECL|class|CoreDescriptorPlus
class|class
name|CoreDescriptorPlus
block|{
DECL|field|coreDescriptor
specifier|private
name|CoreDescriptor
name|coreDescriptor
decl_stmt|;
DECL|field|filePath
specifier|private
name|String
name|filePath
decl_stmt|;
DECL|field|propsOrig
specifier|private
name|Properties
name|propsOrig
decl_stmt|;
DECL|method|CoreDescriptorPlus
name|CoreDescriptorPlus
parameter_list|(
name|String
name|filePath
parameter_list|,
name|CoreDescriptor
name|descriptor
parameter_list|,
name|Properties
name|propsOrig
parameter_list|)
block|{
name|coreDescriptor
operator|=
name|descriptor
expr_stmt|;
name|this
operator|.
name|filePath
operator|=
name|filePath
expr_stmt|;
name|this
operator|.
name|propsOrig
operator|=
name|propsOrig
expr_stmt|;
block|}
DECL|method|getCoreDescriptor
name|CoreDescriptor
name|getCoreDescriptor
parameter_list|()
block|{
return|return
name|coreDescriptor
return|;
block|}
DECL|method|getFilePath
name|String
name|getFilePath
parameter_list|()
block|{
return|return
name|filePath
return|;
block|}
DECL|method|getPropsOrig
name|Properties
name|getPropsOrig
parameter_list|()
block|{
return|return
name|propsOrig
return|;
block|}
block|}
end_class
end_unit
