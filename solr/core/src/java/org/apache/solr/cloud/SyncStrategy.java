begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CommonsHttpSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
operator|.
name|RequestRecovery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|CloudState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
operator|.
name|CoreAdminAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|PeerSync
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_class
DECL|class|SyncStrategy
specifier|public
class|class
name|SyncStrategy
block|{
DECL|field|log
specifier|protected
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|sync
specifier|public
name|boolean
name|sync
parameter_list|(
name|ZkController
name|zkController
parameter_list|,
name|SolrCore
name|core
parameter_list|,
name|ZkNodeProps
name|leaderProps
parameter_list|)
block|{
name|zkController
operator|.
name|publish
argument_list|(
name|core
argument_list|,
name|ZkStateReader
operator|.
name|SYNC
argument_list|)
expr_stmt|;
comment|// solrcloud_debug
comment|// System.out.println("SYNC UP");
name|boolean
name|success
init|=
name|syncReplicas
argument_list|(
name|zkController
argument_list|,
name|core
argument_list|,
name|leaderProps
argument_list|)
decl_stmt|;
return|return
name|success
return|;
block|}
DECL|method|syncReplicas
specifier|private
name|boolean
name|syncReplicas
parameter_list|(
name|ZkController
name|zkController
parameter_list|,
name|SolrCore
name|core
parameter_list|,
name|ZkNodeProps
name|leaderProps
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|CloudDescriptor
name|cloudDesc
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
name|String
name|collection
init|=
name|cloudDesc
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|String
name|shardId
init|=
name|cloudDesc
operator|.
name|getShardId
argument_list|()
decl_stmt|;
comment|// first sync ourselves - we are the potential leader after all
try|try
block|{
name|success
operator|=
name|syncWithReplicas
argument_list|(
name|zkController
argument_list|,
name|core
argument_list|,
name|leaderProps
argument_list|,
name|collection
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Sync Failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// if !success but no one else is in active mode,
comment|// we are the leader anyway
comment|// TODO: should we also be leader if there is only one other active?
comment|// if we couldn't sync with it, it shouldn't be able to sync with us
if|if
condition|(
operator|!
name|success
operator|&&
operator|!
name|areAnyOtherReplicasActive
argument_list|(
name|zkController
argument_list|,
name|leaderProps
argument_list|,
name|collection
argument_list|,
name|shardId
argument_list|)
condition|)
block|{
comment|//        System.out
comment|//            .println("wasnt a success but no on else i active! I am the leader");
name|success
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|success
condition|)
block|{
comment|// solrcloud_debug
comment|// System.out.println("Sync success");
comment|// we are the leader - tell all of our replias to sync with us
name|syncToMe
argument_list|(
name|zkController
argument_list|,
name|collection
argument_list|,
name|shardId
argument_list|,
name|leaderProps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// solrcloud_debug
comment|// System.out.println("Sync failure");
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Sync Failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
DECL|method|areAnyOtherReplicasActive
specifier|private
name|boolean
name|areAnyOtherReplicasActive
parameter_list|(
name|ZkController
name|zkController
parameter_list|,
name|ZkNodeProps
name|leaderProps
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|shardId
parameter_list|)
block|{
name|CloudState
name|cloudState
init|=
name|zkController
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getCloudState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|cloudState
operator|.
name|getSlices
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|Slice
name|slice
init|=
name|slices
operator|.
name|get
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
name|shards
init|=
name|slice
operator|.
name|getShards
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
name|shard
range|:
name|shards
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|state
init|=
name|shard
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
decl_stmt|;
comment|//      System.out.println("state:"
comment|//          + state
comment|//          + shard.getValue().get(ZkStateReader.NODE_NAME_PROP)
comment|//          + " live: "
comment|//          + cloudState.liveNodesContain(shard.getValue().get(
comment|//              ZkStateReader.NODE_NAME_PROP)));
if|if
condition|(
operator|(
name|state
operator|.
name|equals
argument_list|(
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
operator|)
operator|&&
name|cloudState
operator|.
name|liveNodesContain
argument_list|(
name|shard
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|)
operator|&&
operator|!
operator|new
name|ZkCoreNodeProps
argument_list|(
name|shard
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|getCoreUrl
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|ZkCoreNodeProps
argument_list|(
name|leaderProps
argument_list|)
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|syncWithReplicas
specifier|private
name|boolean
name|syncWithReplicas
parameter_list|(
name|ZkController
name|zkController
parameter_list|,
name|SolrCore
name|core
parameter_list|,
name|ZkNodeProps
name|props
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|shardId
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|SolrServerException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|ZkCoreNodeProps
argument_list|>
name|nodes
init|=
name|zkController
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getReplicaProps
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
argument_list|,
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
decl_stmt|;
comment|// TODO:
comment|// should
comment|// there
comment|// be a
comment|// state
comment|// filter?
if|if
condition|(
name|nodes
operator|==
literal|null
condition|)
block|{
comment|// I have no replicas
return|return
literal|true
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|syncWith
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ZkCoreNodeProps
name|node
range|:
name|nodes
control|)
block|{
comment|// if we see a leader, must be stale state, and this is the guy that went down
if|if
condition|(
operator|!
name|node
operator|.
name|getNodeProps
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|ZkStateReader
operator|.
name|LEADER_PROP
argument_list|)
condition|)
block|{
name|syncWith
operator|.
name|add
argument_list|(
name|node
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|PeerSync
name|peerSync
init|=
operator|new
name|PeerSync
argument_list|(
name|core
argument_list|,
name|syncWith
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
return|return
name|peerSync
operator|.
name|sync
argument_list|()
return|;
block|}
DECL|method|syncToMe
specifier|private
name|void
name|syncToMe
parameter_list|(
name|ZkController
name|zkController
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|shardId
parameter_list|,
name|ZkNodeProps
name|leaderProps
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|SolrServerException
throws|,
name|IOException
block|{
comment|// sync everyone else
comment|// TODO: we should do this in parallel at least
name|List
argument_list|<
name|ZkCoreNodeProps
argument_list|>
name|nodes
init|=
name|zkController
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getReplicaProps
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|,
name|leaderProps
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|,
name|leaderProps
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
argument_list|,
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|==
literal|null
condition|)
block|{
comment|// System.out.println("I have no replicas");
comment|// I have no replicas
return|return;
block|}
comment|//System.out.println("tell my replicas to sync");
name|ZkCoreNodeProps
name|zkLeader
init|=
operator|new
name|ZkCoreNodeProps
argument_list|(
name|leaderProps
argument_list|)
decl_stmt|;
for|for
control|(
name|ZkCoreNodeProps
name|node
range|:
name|nodes
control|)
block|{
try|try
block|{
comment|// TODO: do we first everyone register as sync phase? get the overseer
comment|// to do it?
comment|// TODO: this should be done in parallel
name|QueryRequest
name|qr
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"getVersions"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|1000
argument_list|)
argument_list|,
literal|"sync"
argument_list|,
name|zkLeader
operator|.
name|getCoreUrl
argument_list|()
argument_list|,
literal|"distrib"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
name|CommonsHttpSolrServer
name|server
init|=
operator|new
name|CommonsHttpSolrServer
argument_list|(
name|node
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
decl_stmt|;
comment|//System.out.println("ask " + node.getCoreUrl() + " to sync");
name|NamedList
name|rsp
init|=
name|server
operator|.
name|request
argument_list|(
name|qr
argument_list|)
decl_stmt|;
comment|//System.out.println("response about syncing to leader:" + rsp + " node:"
comment|//    + node.getCoreUrl() + " me:" + zkController.getBaseUrl());
name|boolean
name|success
init|=
operator|(
name|Boolean
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"sync"
argument_list|)
decl_stmt|;
comment|//System.out.println("success:" + success);
if|if
condition|(
operator|!
name|success
condition|)
block|{
comment|// System.out
comment|//     .println("try and ask " + node.getCoreUrl() + " to recover");
name|log
operator|.
name|info
argument_list|(
literal|"try and ask "
operator|+
name|node
operator|.
name|getCoreUrl
argument_list|()
operator|+
literal|" to recover"
argument_list|)
expr_stmt|;
try|try
block|{
name|server
operator|=
operator|new
name|CommonsHttpSolrServer
argument_list|(
name|node
operator|.
name|getBaseUrl
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|setSoTimeout
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|server
operator|.
name|setConnectionTimeout
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|RequestRecovery
name|recoverRequestCmd
init|=
operator|new
name|RequestRecovery
argument_list|()
decl_stmt|;
name|recoverRequestCmd
operator|.
name|setAction
argument_list|(
name|CoreAdminAction
operator|.
name|REQUESTRECOVERY
argument_list|)
expr_stmt|;
name|recoverRequestCmd
operator|.
name|setCoreName
argument_list|(
name|node
operator|.
name|getCoreName
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|request
argument_list|(
name|recoverRequestCmd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Could not tell a replica to recover"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Error syncing replica to leader"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|params
specifier|public
specifier|static
name|ModifiableSolrParams
name|params
parameter_list|(
name|String
modifier|...
name|params
parameter_list|)
block|{
name|ModifiableSolrParams
name|msp
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|msp
operator|.
name|add
argument_list|(
name|params
index|[
name|i
index|]
argument_list|,
name|params
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|msp
return|;
block|}
block|}
end_class
end_unit
