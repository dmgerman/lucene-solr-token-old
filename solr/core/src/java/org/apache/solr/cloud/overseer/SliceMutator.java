begin_unit
begin_package
DECL|package|org.apache.solr.cloud.overseer
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|Assign
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|Overseer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|RoutingRule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionProcessor
operator|.
name|COLL_PROP_PREFIX
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
operator|.
name|CollectionMutator
operator|.
name|checkCollectionKeyExistence
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
operator|.
name|makeMap
import|;
end_import
begin_class
DECL|class|SliceMutator
specifier|public
class|class
name|SliceMutator
block|{
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SliceMutator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PREFERRED_LEADER_PROP
specifier|public
specifier|static
specifier|final
name|String
name|PREFERRED_LEADER_PROP
init|=
name|COLL_PROP_PREFIX
operator|+
literal|"preferredleader"
decl_stmt|;
DECL|field|SLICE_UNIQUE_BOOLEAN_PROPERTIES
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|SLICE_UNIQUE_BOOLEAN_PROPERTIES
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|PREFERRED_LEADER_PROP
argument_list|)
decl_stmt|;
DECL|field|zkStateReader
specifier|protected
specifier|final
name|ZkStateReader
name|zkStateReader
decl_stmt|;
DECL|method|SliceMutator
specifier|public
name|SliceMutator
parameter_list|(
name|ZkStateReader
name|zkStateReader
parameter_list|)
block|{
name|this
operator|.
name|zkStateReader
operator|=
name|zkStateReader
expr_stmt|;
block|}
DECL|method|addReplica
specifier|public
name|ZkWriteCommand
name|addReplica
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"createReplica() {} "
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|String
name|coll
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkCollectionKeyExistence
argument_list|(
name|message
argument_list|)
condition|)
return|return
name|ZkStateWriter
operator|.
name|NO_OP
return|;
name|String
name|slice
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|DocCollection
name|collection
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|coll
argument_list|)
decl_stmt|;
name|Slice
name|sl
init|=
name|collection
operator|.
name|getSlice
argument_list|(
name|slice
argument_list|)
decl_stmt|;
if|if
condition|(
name|sl
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid Collection/Slice {}/{} "
argument_list|,
name|coll
argument_list|,
name|slice
argument_list|)
expr_stmt|;
return|return
name|ZkStateWriter
operator|.
name|NO_OP
return|;
block|}
name|String
name|coreNodeName
init|=
name|Assign
operator|.
name|assignNode
argument_list|(
name|coll
argument_list|,
name|clusterState
argument_list|)
decl_stmt|;
name|Replica
name|replica
init|=
operator|new
name|Replica
argument_list|(
name|coreNodeName
argument_list|,
name|makeMap
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|ZkWriteCommand
argument_list|(
name|coll
argument_list|,
name|updateReplica
argument_list|(
name|collection
argument_list|,
name|sl
argument_list|,
name|replica
operator|.
name|getName
argument_list|()
argument_list|,
name|replica
argument_list|)
argument_list|)
return|;
block|}
DECL|method|removeReplica
specifier|public
name|ZkWriteCommand
name|removeReplica
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
specifier|final
name|String
name|cnn
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|)
decl_stmt|;
specifier|final
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkCollectionKeyExistence
argument_list|(
name|message
argument_list|)
condition|)
return|return
name|ZkStateWriter
operator|.
name|NO_OP
return|;
name|DocCollection
name|coll
init|=
name|clusterState
operator|.
name|getCollectionOrNull
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|coll
operator|==
literal|null
condition|)
block|{
comment|// make sure we delete the zk nodes for this collection just to be safe
return|return
operator|new
name|ZkWriteCommand
argument_list|(
name|collection
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|newSlices
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|lastSlice
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|coll
operator|.
name|getSlices
argument_list|()
control|)
block|{
name|Replica
name|replica
init|=
name|slice
operator|.
name|getReplica
argument_list|(
name|cnn
argument_list|)
decl_stmt|;
if|if
condition|(
name|replica
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|newReplicas
init|=
name|slice
operator|.
name|getReplicasCopy
argument_list|()
decl_stmt|;
name|newReplicas
operator|.
name|remove
argument_list|(
name|cnn
argument_list|)
expr_stmt|;
comment|// TODO TODO TODO!!! if there are no replicas left for the slice, and the slice has no hash range, remove it
comment|// if (newReplicas.size() == 0&& slice.getRange() == null) {
comment|// if there are no replicas left for the slice remove it
if|if
condition|(
name|newReplicas
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|slice
operator|=
literal|null
expr_stmt|;
name|lastSlice
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|slice
operator|=
operator|new
name|Slice
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|newReplicas
argument_list|,
name|slice
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|slice
operator|!=
literal|null
condition|)
block|{
name|newSlices
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|slice
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lastSlice
condition|)
block|{
comment|// remove all empty pre allocated slices
for|for
control|(
name|Slice
name|slice
range|:
name|coll
operator|.
name|getSlices
argument_list|()
control|)
block|{
if|if
condition|(
name|slice
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|newSlices
operator|.
name|remove
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// if there are no slices left in the collection, remove it?
if|if
condition|(
name|newSlices
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|ClusterStateMutator
argument_list|(
name|zkStateReader
argument_list|)
operator|.
name|deleteCollection
argument_list|(
name|clusterState
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
literal|"name"
argument_list|,
name|collection
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ZkWriteCommand
argument_list|(
name|collection
argument_list|,
name|coll
operator|.
name|copyWithSlices
argument_list|(
name|newSlices
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|setShardLeader
specifier|public
name|ZkWriteCommand
name|setShardLeader
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|baseUrl
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
decl_stmt|;
name|String
name|coreName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|baseUrl
argument_list|)
expr_stmt|;
if|if
condition|(
name|baseUrl
operator|!=
literal|null
operator|&&
operator|!
name|baseUrl
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|coreName
operator|==
literal|null
condition|?
literal|""
else|:
name|coreName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|sb
operator|.
name|substring
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
operator|)
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|String
name|leaderUrl
init|=
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|sb
operator|.
name|toString
argument_list|()
else|:
literal|null
decl_stmt|;
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
name|String
name|sliceName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|DocCollection
name|coll
init|=
name|clusterState
operator|.
name|getCollectionOrNull
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|coll
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not mark shard leader for non existing collection:"
operator|+
name|collectionName
argument_list|)
expr_stmt|;
return|return
name|ZkStateWriter
operator|.
name|NO_OP
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|coll
operator|.
name|getSlicesMap
argument_list|()
decl_stmt|;
name|Slice
name|slice
init|=
name|slices
operator|.
name|get
argument_list|(
name|sliceName
argument_list|)
decl_stmt|;
name|Replica
name|oldLeader
init|=
name|slice
operator|.
name|getLeader
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|newReplicas
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Replica
name|replica
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
comment|// TODO: this should only be calculated once and cached somewhere?
name|String
name|coreURL
init|=
name|ZkCoreNodeProps
operator|.
name|getCoreUrl
argument_list|(
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
argument_list|,
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|replica
operator|==
name|oldLeader
operator|&&
operator|!
name|coreURL
operator|.
name|equals
argument_list|(
name|leaderUrl
argument_list|)
condition|)
block|{
name|replica
operator|=
operator|new
name|ReplicaMutator
argument_list|(
name|zkStateReader
argument_list|)
operator|.
name|unsetLeader
argument_list|(
name|replica
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|coreURL
operator|.
name|equals
argument_list|(
name|leaderUrl
argument_list|)
condition|)
block|{
name|replica
operator|=
operator|new
name|ReplicaMutator
argument_list|(
name|zkStateReader
argument_list|)
operator|.
name|setLeader
argument_list|(
name|replica
argument_list|)
expr_stmt|;
block|}
name|newReplicas
operator|.
name|put
argument_list|(
name|replica
operator|.
name|getName
argument_list|()
argument_list|,
name|replica
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|newSliceProps
init|=
name|slice
operator|.
name|shallowCopy
argument_list|()
decl_stmt|;
name|newSliceProps
operator|.
name|put
argument_list|(
name|Slice
operator|.
name|REPLICAS
argument_list|,
name|newReplicas
argument_list|)
expr_stmt|;
name|slice
operator|=
operator|new
name|Slice
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|newReplicas
argument_list|,
name|slice
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|ZkWriteCommand
argument_list|(
name|collectionName
argument_list|,
name|CollectionMutator
operator|.
name|updateSlice
argument_list|(
name|collectionName
argument_list|,
name|coll
argument_list|,
name|slice
argument_list|)
argument_list|)
return|;
block|}
DECL|method|updateShardState
specifier|public
name|ZkWriteCommand
name|updateShardState
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkCollectionKeyExistence
argument_list|(
name|message
argument_list|)
condition|)
return|return
name|ZkStateWriter
operator|.
name|NO_OP
return|;
name|log
operator|.
name|info
argument_list|(
literal|"Update shard state invoked for collection: "
operator|+
name|collection
operator|+
literal|" with message: "
operator|+
name|message
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slicesCopy
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|clusterState
operator|.
name|getSlicesMap
argument_list|(
name|collection
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|message
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|Overseer
operator|.
name|QUEUE_OPERATION
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
continue|continue;
name|Slice
name|slice
init|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Overseer.updateShardState unknown collection: "
operator|+
name|collection
operator|+
literal|" slice: "
operator|+
name|key
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Update shard state "
operator|+
name|key
operator|+
literal|" to "
operator|+
name|message
operator|.
name|getStr
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|slice
operator|.
name|shallowCopy
argument_list|()
decl_stmt|;
if|if
condition|(
name|Slice
operator|.
name|RECOVERY
operator|.
name|equals
argument_list|(
name|props
operator|.
name|get
argument_list|(
name|Slice
operator|.
name|STATE
argument_list|)
argument_list|)
operator|&&
name|Slice
operator|.
name|ACTIVE
operator|.
name|equals
argument_list|(
name|message
operator|.
name|getStr
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
block|{
name|props
operator|.
name|remove
argument_list|(
name|Slice
operator|.
name|PARENT
argument_list|)
expr_stmt|;
block|}
name|props
operator|.
name|put
argument_list|(
name|Slice
operator|.
name|STATE
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|Slice
name|newSlice
init|=
operator|new
name|Slice
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|slice
operator|.
name|getReplicasCopy
argument_list|()
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|slicesCopy
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|newSlice
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ZkWriteCommand
argument_list|(
name|collection
argument_list|,
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collection
argument_list|)
operator|.
name|copyWithSlices
argument_list|(
name|slicesCopy
argument_list|)
argument_list|)
return|;
block|}
DECL|method|addRoutingRule
specifier|public
name|ZkWriteCommand
name|addRoutingRule
parameter_list|(
specifier|final
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkCollectionKeyExistence
argument_list|(
name|message
argument_list|)
condition|)
return|return
name|ZkStateWriter
operator|.
name|NO_OP
return|;
name|String
name|shard
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|String
name|routeKey
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"routeKey"
argument_list|)
decl_stmt|;
name|String
name|range
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"range"
argument_list|)
decl_stmt|;
name|String
name|targetCollection
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"targetCollection"
argument_list|)
decl_stmt|;
name|String
name|targetShard
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"targetShard"
argument_list|)
decl_stmt|;
name|String
name|expireAt
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"expireAt"
argument_list|)
decl_stmt|;
name|Slice
name|slice
init|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Overseer.addRoutingRule unknown collection: "
operator|+
name|collection
operator|+
literal|" slice:"
operator|+
name|shard
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RoutingRule
argument_list|>
name|routingRules
init|=
name|slice
operator|.
name|getRoutingRules
argument_list|()
decl_stmt|;
if|if
condition|(
name|routingRules
operator|==
literal|null
condition|)
name|routingRules
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|RoutingRule
name|r
init|=
name|routingRules
operator|.
name|get
argument_list|(
name|routeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"routeRanges"
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"targetCollection"
argument_list|,
name|targetCollection
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"expireAt"
argument_list|,
name|expireAt
argument_list|)
expr_stmt|;
name|RoutingRule
name|rule
init|=
operator|new
name|RoutingRule
argument_list|(
name|routeKey
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|routingRules
operator|.
name|put
argument_list|(
name|routeKey
argument_list|,
name|rule
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// add this range
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|r
operator|.
name|shallowCopy
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"routeRanges"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"routeRanges"
argument_list|)
operator|+
literal|","
operator|+
name|range
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"expireAt"
argument_list|,
name|expireAt
argument_list|)
expr_stmt|;
name|routingRules
operator|.
name|put
argument_list|(
name|routeKey
argument_list|,
operator|new
name|RoutingRule
argument_list|(
name|routeKey
argument_list|,
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|slice
operator|.
name|shallowCopy
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"routingRules"
argument_list|,
name|routingRules
argument_list|)
expr_stmt|;
name|Slice
name|newSlice
init|=
operator|new
name|Slice
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|slice
operator|.
name|getReplicasCopy
argument_list|()
argument_list|,
name|props
argument_list|)
decl_stmt|;
return|return
operator|new
name|ZkWriteCommand
argument_list|(
name|collection
argument_list|,
name|CollectionMutator
operator|.
name|updateSlice
argument_list|(
name|collection
argument_list|,
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collection
argument_list|)
argument_list|,
name|newSlice
argument_list|)
argument_list|)
return|;
block|}
DECL|method|removeRoutingRule
specifier|public
name|ZkWriteCommand
name|removeRoutingRule
parameter_list|(
specifier|final
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkCollectionKeyExistence
argument_list|(
name|message
argument_list|)
condition|)
return|return
name|ZkStateWriter
operator|.
name|NO_OP
return|;
name|String
name|shard
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|String
name|routeKeyStr
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"routeKey"
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Overseer.removeRoutingRule invoked for collection: "
operator|+
name|collection
operator|+
literal|" shard: "
operator|+
name|shard
operator|+
literal|" routeKey: "
operator|+
name|routeKeyStr
argument_list|)
expr_stmt|;
name|Slice
name|slice
init|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unknown collection: "
operator|+
name|collection
operator|+
literal|" shard: "
operator|+
name|shard
argument_list|)
expr_stmt|;
return|return
name|ZkStateWriter
operator|.
name|NO_OP
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RoutingRule
argument_list|>
name|routingRules
init|=
name|slice
operator|.
name|getRoutingRules
argument_list|()
decl_stmt|;
if|if
condition|(
name|routingRules
operator|!=
literal|null
condition|)
block|{
name|routingRules
operator|.
name|remove
argument_list|(
name|routeKeyStr
argument_list|)
expr_stmt|;
comment|// no rules left
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|slice
operator|.
name|shallowCopy
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"routingRules"
argument_list|,
name|routingRules
argument_list|)
expr_stmt|;
name|Slice
name|newSlice
init|=
operator|new
name|Slice
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|slice
operator|.
name|getReplicasCopy
argument_list|()
argument_list|,
name|props
argument_list|)
decl_stmt|;
return|return
operator|new
name|ZkWriteCommand
argument_list|(
name|collection
argument_list|,
name|CollectionMutator
operator|.
name|updateSlice
argument_list|(
name|collection
argument_list|,
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collection
argument_list|)
argument_list|,
name|newSlice
argument_list|)
argument_list|)
return|;
block|}
return|return
name|ZkStateWriter
operator|.
name|NO_OP
return|;
block|}
DECL|method|updateReplica
specifier|public
specifier|static
name|DocCollection
name|updateReplica
parameter_list|(
name|DocCollection
name|collection
parameter_list|,
specifier|final
name|Slice
name|slice
parameter_list|,
name|String
name|coreNodeName
parameter_list|,
specifier|final
name|Replica
name|replica
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|copy
init|=
name|slice
operator|.
name|getReplicasCopy
argument_list|()
decl_stmt|;
if|if
condition|(
name|replica
operator|==
literal|null
condition|)
block|{
name|copy
operator|.
name|remove
argument_list|(
name|coreNodeName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copy
operator|.
name|put
argument_list|(
name|replica
operator|.
name|getName
argument_list|()
argument_list|,
name|replica
argument_list|)
expr_stmt|;
block|}
name|Slice
name|newSlice
init|=
operator|new
name|Slice
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|copy
argument_list|,
name|slice
operator|.
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|CollectionMutator
operator|.
name|updateSlice
argument_list|(
name|collection
operator|.
name|getName
argument_list|()
argument_list|,
name|collection
argument_list|,
name|newSlice
argument_list|)
return|;
block|}
block|}
end_class
end_unit
