begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.cloud.overseer
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
package|;
end_package
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|Assign
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|Overseer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|COLL_PROP_PREFIX
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
operator|.
name|CollectionMutator
operator|.
name|checkCollectionKeyExistence
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
operator|.
name|CollectionMutator
operator|.
name|checkKeyExistence
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|NAME
import|;
end_import
begin_class
DECL|class|ReplicaMutator
specifier|public
class|class
name|ReplicaMutator
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|zkStateReader
specifier|protected
specifier|final
name|ZkStateReader
name|zkStateReader
decl_stmt|;
DECL|method|ReplicaMutator
specifier|public
name|ReplicaMutator
parameter_list|(
name|ZkStateReader
name|reader
parameter_list|)
block|{
name|this
operator|.
name|zkStateReader
operator|=
name|reader
expr_stmt|;
block|}
DECL|method|setProperty
specifier|protected
name|Replica
name|setProperty
parameter_list|(
name|Replica
name|replica
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
assert|assert
name|key
operator|!=
literal|null
assert|;
assert|assert
name|value
operator|!=
literal|null
assert|;
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
name|replica
operator|.
name|getStr
argument_list|(
name|key
argument_list|)
argument_list|,
name|value
argument_list|)
condition|)
return|return
name|replica
return|;
comment|// already the value we're going to set
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|replicaProps
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|replica
operator|.
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
name|replicaProps
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
operator|new
name|Replica
argument_list|(
name|replica
operator|.
name|getName
argument_list|()
argument_list|,
name|replicaProps
argument_list|)
return|;
block|}
DECL|method|unsetProperty
specifier|protected
name|Replica
name|unsetProperty
parameter_list|(
name|Replica
name|replica
parameter_list|,
name|String
name|key
parameter_list|)
block|{
assert|assert
name|key
operator|!=
literal|null
assert|;
if|if
condition|(
operator|!
name|replica
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
return|return
name|replica
return|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|replicaProps
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|replica
operator|.
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
name|replicaProps
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
operator|new
name|Replica
argument_list|(
name|replica
operator|.
name|getName
argument_list|()
argument_list|,
name|replicaProps
argument_list|)
return|;
block|}
DECL|method|setLeader
specifier|protected
name|Replica
name|setLeader
parameter_list|(
name|Replica
name|replica
parameter_list|)
block|{
return|return
name|setProperty
argument_list|(
name|replica
argument_list|,
name|ZkStateReader
operator|.
name|LEADER_PROP
argument_list|,
literal|"true"
argument_list|)
return|;
block|}
DECL|method|unsetLeader
specifier|protected
name|Replica
name|unsetLeader
parameter_list|(
name|Replica
name|replica
parameter_list|)
block|{
return|return
name|unsetProperty
argument_list|(
name|replica
argument_list|,
name|ZkStateReader
operator|.
name|LEADER_PROP
argument_list|)
return|;
block|}
DECL|method|setState
specifier|protected
name|Replica
name|setState
parameter_list|(
name|Replica
name|replica
parameter_list|,
name|String
name|state
parameter_list|)
block|{
assert|assert
name|state
operator|!=
literal|null
assert|;
return|return
name|setProperty
argument_list|(
name|replica
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|state
argument_list|)
return|;
block|}
DECL|method|addReplicaProperty
specifier|public
name|ZkWriteCommand
name|addReplicaProperty
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
if|if
condition|(
name|checkKeyExistence
argument_list|(
name|message
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
operator|==
literal|false
operator|||
name|checkKeyExistence
argument_list|(
name|message
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
operator|==
literal|false
operator|||
name|checkKeyExistence
argument_list|(
name|message
argument_list|,
name|ZkStateReader
operator|.
name|REPLICA_PROP
argument_list|)
operator|==
literal|false
operator|||
name|checkKeyExistence
argument_list|(
name|message
argument_list|,
name|ZkStateReader
operator|.
name|PROPERTY_PROP
argument_list|)
operator|==
literal|false
operator|||
name|checkKeyExistence
argument_list|(
name|message
argument_list|,
name|ZkStateReader
operator|.
name|PROPERTY_VALUE_PROP
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Overseer ADDREPLICAPROP requires "
operator|+
name|ZkStateReader
operator|.
name|COLLECTION_PROP
operator|+
literal|" and "
operator|+
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
operator|+
literal|" and "
operator|+
name|ZkStateReader
operator|.
name|REPLICA_PROP
operator|+
literal|" and "
operator|+
name|ZkStateReader
operator|.
name|PROPERTY_PROP
operator|+
literal|" and "
operator|+
name|ZkStateReader
operator|.
name|PROPERTY_VALUE_PROP
operator|+
literal|" no action taken."
argument_list|)
throw|;
block|}
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
name|String
name|sliceName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|String
name|replicaName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|REPLICA_PROP
argument_list|)
decl_stmt|;
name|String
name|property
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|PROPERTY_PROP
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|startsWith
argument_list|(
name|property
argument_list|,
name|COLL_PROP_PREFIX
argument_list|)
operator|==
literal|false
condition|)
block|{
name|property
operator|=
name|OverseerCollectionMessageHandler
operator|.
name|COLL_PROP_PREFIX
operator|+
name|property
expr_stmt|;
block|}
name|property
operator|=
name|property
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
expr_stmt|;
name|String
name|propVal
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|PROPERTY_VALUE_PROP
argument_list|)
decl_stmt|;
name|String
name|shardUnique
init|=
name|message
operator|.
name|getStr
argument_list|(
name|OverseerCollectionMessageHandler
operator|.
name|SHARD_UNIQUE
argument_list|)
decl_stmt|;
name|boolean
name|isUnique
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|SliceMutator
operator|.
name|SLICE_UNIQUE_BOOLEAN_PROPERTIES
operator|.
name|contains
argument_list|(
name|property
argument_list|)
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|shardUnique
argument_list|)
operator|&&
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|shardUnique
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Overseer ADDREPLICAPROP for "
operator|+
name|property
operator|+
literal|" cannot have "
operator|+
name|OverseerCollectionMessageHandler
operator|.
name|SHARD_UNIQUE
operator|+
literal|" set to anything other than"
operator|+
literal|"'true'. No action taken"
argument_list|)
throw|;
block|}
name|isUnique
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|isUnique
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|shardUnique
argument_list|)
expr_stmt|;
block|}
name|DocCollection
name|collection
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|Replica
name|replica
init|=
name|collection
operator|.
name|getReplica
argument_list|(
name|replicaName
argument_list|)
decl_stmt|;
if|if
condition|(
name|replica
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Could not find collection/slice/replica "
operator|+
name|collectionName
operator|+
literal|"/"
operator|+
name|sliceName
operator|+
literal|"/"
operator|+
name|replicaName
operator|+
literal|" no action taken."
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Setting property "
operator|+
name|property
operator|+
literal|" with value: "
operator|+
name|propVal
operator|+
literal|" for collection: "
operator|+
name|collectionName
operator|+
literal|". Full message: "
operator|+
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
name|replica
operator|.
name|getStr
argument_list|(
name|property
argument_list|)
argument_list|,
name|propVal
argument_list|)
condition|)
return|return
name|ZkStateWriter
operator|.
name|NO_OP
return|;
comment|// already the value we're going to set
comment|// OK, there's no way we won't change the cluster state now
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|replicas
init|=
name|collection
operator|.
name|getSlice
argument_list|(
name|sliceName
argument_list|)
operator|.
name|getReplicasCopy
argument_list|()
decl_stmt|;
if|if
condition|(
name|isUnique
operator|==
literal|false
condition|)
block|{
name|replicas
operator|.
name|get
argument_list|(
name|replicaName
argument_list|)
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|propVal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Set prop for this replica, but remove it for all others.
for|for
control|(
name|Replica
name|rep
range|:
name|replicas
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|rep
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|replicaName
argument_list|)
condition|)
block|{
name|rep
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|propVal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rep
operator|.
name|getProperties
argument_list|()
operator|.
name|remove
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Slice
name|newSlice
init|=
operator|new
name|Slice
argument_list|(
name|sliceName
argument_list|,
name|replicas
argument_list|,
name|collection
operator|.
name|getSlice
argument_list|(
name|sliceName
argument_list|)
operator|.
name|shallowCopy
argument_list|()
argument_list|)
decl_stmt|;
name|DocCollection
name|newCollection
init|=
name|CollectionMutator
operator|.
name|updateSlice
argument_list|(
name|collectionName
argument_list|,
name|collection
argument_list|,
name|newSlice
argument_list|)
decl_stmt|;
return|return
operator|new
name|ZkWriteCommand
argument_list|(
name|collectionName
argument_list|,
name|newCollection
argument_list|)
return|;
block|}
DECL|method|deleteReplicaProperty
specifier|public
name|ZkWriteCommand
name|deleteReplicaProperty
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
if|if
condition|(
name|checkKeyExistence
argument_list|(
name|message
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
operator|==
literal|false
operator|||
name|checkKeyExistence
argument_list|(
name|message
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
operator|==
literal|false
operator|||
name|checkKeyExistence
argument_list|(
name|message
argument_list|,
name|ZkStateReader
operator|.
name|REPLICA_PROP
argument_list|)
operator|==
literal|false
operator|||
name|checkKeyExistence
argument_list|(
name|message
argument_list|,
name|ZkStateReader
operator|.
name|PROPERTY_PROP
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Overseer DELETEREPLICAPROP requires "
operator|+
name|ZkStateReader
operator|.
name|COLLECTION_PROP
operator|+
literal|" and "
operator|+
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
operator|+
literal|" and "
operator|+
name|ZkStateReader
operator|.
name|REPLICA_PROP
operator|+
literal|" and "
operator|+
name|ZkStateReader
operator|.
name|PROPERTY_PROP
operator|+
literal|" no action taken."
argument_list|)
throw|;
block|}
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
name|String
name|sliceName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|String
name|replicaName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|REPLICA_PROP
argument_list|)
decl_stmt|;
name|String
name|property
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|PROPERTY_PROP
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|startsWith
argument_list|(
name|property
argument_list|,
name|COLL_PROP_PREFIX
argument_list|)
operator|==
literal|false
condition|)
block|{
name|property
operator|=
name|OverseerCollectionMessageHandler
operator|.
name|COLL_PROP_PREFIX
operator|+
name|property
expr_stmt|;
block|}
name|DocCollection
name|collection
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|Replica
name|replica
init|=
name|collection
operator|.
name|getReplica
argument_list|(
name|replicaName
argument_list|)
decl_stmt|;
if|if
condition|(
name|replica
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Could not find collection/slice/replica "
operator|+
name|collectionName
operator|+
literal|"/"
operator|+
name|sliceName
operator|+
literal|"/"
operator|+
name|replicaName
operator|+
literal|" no action taken."
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Deleting property "
operator|+
name|property
operator|+
literal|" for collection: "
operator|+
name|collectionName
operator|+
literal|" slice "
operator|+
name|sliceName
operator|+
literal|" replica "
operator|+
name|replicaName
operator|+
literal|". Full message: "
operator|+
name|message
argument_list|)
expr_stmt|;
name|String
name|curProp
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|curProp
operator|==
literal|null
condition|)
return|return
name|ZkStateWriter
operator|.
name|NO_OP
return|;
comment|// not there anyway, nothing to do.
name|log
operator|.
name|info
argument_list|(
literal|"Deleting property "
operator|+
name|property
operator|+
literal|" for collection: "
operator|+
name|collectionName
operator|+
literal|" slice "
operator|+
name|sliceName
operator|+
literal|" replica "
operator|+
name|replicaName
operator|+
literal|". Full message: "
operator|+
name|message
argument_list|)
expr_stmt|;
name|Slice
name|slice
init|=
name|collection
operator|.
name|getSlice
argument_list|(
name|sliceName
argument_list|)
decl_stmt|;
name|DocCollection
name|newCollection
init|=
name|SliceMutator
operator|.
name|updateReplica
argument_list|(
name|collection
argument_list|,
name|slice
argument_list|,
name|replicaName
argument_list|,
name|unsetProperty
argument_list|(
name|replica
argument_list|,
name|property
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|ZkWriteCommand
argument_list|(
name|collectionName
argument_list|,
name|newCollection
argument_list|)
return|;
block|}
DECL|method|setState
specifier|public
name|ZkWriteCommand
name|setState
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
if|if
condition|(
name|Overseer
operator|.
name|isLegacy
argument_list|(
name|zkStateReader
operator|.
name|getClusterProps
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|updateState
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|updateStateNew
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|)
return|;
block|}
block|}
DECL|method|updateState
specifier|protected
name|ZkWriteCommand
name|updateState
parameter_list|(
specifier|final
name|ClusterState
name|prevState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
specifier|final
name|String
name|cName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkCollectionKeyExistence
argument_list|(
name|message
argument_list|)
condition|)
return|return
name|ZkStateWriter
operator|.
name|NO_OP
return|;
name|Integer
name|numShards
init|=
name|message
operator|.
name|getInt
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Update state numShards={} message={}"
argument_list|,
name|numShards
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|shardNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ZkWriteCommand
name|writeCommand
init|=
literal|null
decl_stmt|;
name|ClusterState
name|newState
init|=
literal|null
decl_stmt|;
comment|//collection does not yet exist, create placeholders if num shards is specified
name|boolean
name|collectionExists
init|=
name|prevState
operator|.
name|hasCollection
argument_list|(
name|cName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|collectionExists
operator|&&
name|numShards
operator|!=
literal|null
condition|)
block|{
name|ClusterStateMutator
operator|.
name|getShardNames
argument_list|(
name|numShards
argument_list|,
name|shardNames
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|createMsg
init|=
name|Utils
operator|.
name|makeMap
argument_list|(
name|NAME
argument_list|,
name|cName
argument_list|)
decl_stmt|;
name|createMsg
operator|.
name|putAll
argument_list|(
name|message
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|writeCommand
operator|=
operator|new
name|ClusterStateMutator
argument_list|(
name|zkStateReader
argument_list|)
operator|.
name|createCollection
argument_list|(
name|prevState
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|createMsg
argument_list|)
argument_list|)
expr_stmt|;
name|DocCollection
name|collection
init|=
name|writeCommand
operator|.
name|collection
decl_stmt|;
name|newState
operator|=
name|ClusterStateMutator
operator|.
name|newState
argument_list|(
name|prevState
argument_list|,
name|cName
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
return|return
name|updateState
argument_list|(
name|newState
operator|!=
literal|null
condition|?
name|newState
else|:
name|prevState
argument_list|,
name|message
argument_list|,
name|cName
argument_list|,
name|numShards
argument_list|,
name|collectionExists
argument_list|)
return|;
block|}
DECL|method|updateState
specifier|private
name|ZkWriteCommand
name|updateState
parameter_list|(
specifier|final
name|ClusterState
name|prevState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|Integer
name|numShards
parameter_list|,
name|boolean
name|collectionExists
parameter_list|)
block|{
name|String
name|sliceName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|String
name|coreNodeName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|)
decl_stmt|;
name|DocCollection
name|collection
init|=
name|prevState
operator|.
name|getCollectionOrNull
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|coreNodeName
operator|==
literal|null
condition|)
block|{
name|coreNodeName
operator|=
name|ClusterStateMutator
operator|.
name|getAssignedCoreNodeName
argument_list|(
name|collection
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|coreNodeName
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"node="
operator|+
name|coreNodeName
operator|+
literal|" is already registered"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if coreNodeName is null, auto assign one
name|coreNodeName
operator|=
name|Assign
operator|.
name|assignNode
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|,
name|coreNodeName
argument_list|)
expr_stmt|;
block|}
comment|// use the provided non null shardId
if|if
condition|(
name|sliceName
operator|==
literal|null
condition|)
block|{
comment|//get shardId from ClusterState
name|sliceName
operator|=
name|ClusterStateMutator
operator|.
name|getAssignedId
argument_list|(
name|collection
argument_list|,
name|coreNodeName
argument_list|)
expr_stmt|;
if|if
condition|(
name|sliceName
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"shard="
operator|+
name|sliceName
operator|+
literal|" is already registered"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sliceName
operator|==
literal|null
condition|)
block|{
comment|//request new shardId
if|if
condition|(
name|collectionExists
condition|)
block|{
comment|// use existing numShards
name|numShards
operator|=
name|collection
operator|.
name|getSlices
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Collection already exists with "
operator|+
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
operator|+
literal|"="
operator|+
name|numShards
argument_list|)
expr_stmt|;
block|}
name|sliceName
operator|=
name|Assign
operator|.
name|assignShard
argument_list|(
name|collection
argument_list|,
name|numShards
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Assigning new node to shard shard="
operator|+
name|sliceName
argument_list|)
expr_stmt|;
block|}
name|Slice
name|slice
init|=
name|collection
operator|!=
literal|null
condition|?
name|collection
operator|.
name|getSlice
argument_list|(
name|sliceName
argument_list|)
else|:
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|replicaProps
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|replicaProps
operator|.
name|putAll
argument_list|(
name|message
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|slice
operator|!=
literal|null
condition|)
block|{
name|Replica
name|oldReplica
init|=
name|slice
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|get
argument_list|(
name|coreNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldReplica
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|oldReplica
operator|.
name|containsKey
argument_list|(
name|ZkStateReader
operator|.
name|LEADER_PROP
argument_list|)
condition|)
block|{
name|replicaProps
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|LEADER_PROP
argument_list|,
name|oldReplica
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|LEADER_PROP
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Move custom props over.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ent
range|:
name|oldReplica
operator|.
name|getProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|ent
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|COLL_PROP_PREFIX
argument_list|)
condition|)
block|{
name|replicaProps
operator|.
name|put
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// we don't put these in the clusterstate
name|replicaProps
operator|.
name|remove
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|)
expr_stmt|;
name|replicaProps
operator|.
name|remove
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|)
expr_stmt|;
name|replicaProps
operator|.
name|remove
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
expr_stmt|;
name|replicaProps
operator|.
name|remove
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
expr_stmt|;
name|replicaProps
operator|.
name|remove
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|)
expr_stmt|;
comment|// remove any props with null values
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entrySet
init|=
name|replicaProps
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|removeKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|entrySet
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
name|removeKeys
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|removeKey
range|:
name|removeKeys
control|)
block|{
name|replicaProps
operator|.
name|remove
argument_list|(
name|removeKey
argument_list|)
expr_stmt|;
block|}
name|replicaProps
operator|.
name|remove
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|)
expr_stmt|;
comment|// remove shard specific properties
name|String
name|shardRange
init|=
operator|(
name|String
operator|)
name|replicaProps
operator|.
name|remove
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_RANGE_PROP
argument_list|)
decl_stmt|;
name|String
name|shardState
init|=
operator|(
name|String
operator|)
name|replicaProps
operator|.
name|remove
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_STATE_PROP
argument_list|)
decl_stmt|;
name|String
name|shardParent
init|=
operator|(
name|String
operator|)
name|replicaProps
operator|.
name|remove
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_PARENT_PROP
argument_list|)
decl_stmt|;
name|Replica
name|replica
init|=
operator|new
name|Replica
argument_list|(
name|coreNodeName
argument_list|,
name|replicaProps
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sliceProps
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|replicas
decl_stmt|;
if|if
condition|(
name|slice
operator|!=
literal|null
condition|)
block|{
name|collection
operator|=
name|checkAndCompleteShardSplit
argument_list|(
name|prevState
argument_list|,
name|collection
argument_list|,
name|coreNodeName
argument_list|,
name|sliceName
argument_list|,
name|replica
argument_list|)
expr_stmt|;
comment|// get the current slice again because it may have been updated due to checkAndCompleteShardSplit method
name|slice
operator|=
name|collection
operator|.
name|getSlice
argument_list|(
name|sliceName
argument_list|)
expr_stmt|;
name|sliceProps
operator|=
name|slice
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|replicas
operator|=
name|slice
operator|.
name|getReplicasCopy
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|replicas
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sliceProps
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|sliceProps
operator|.
name|put
argument_list|(
name|Slice
operator|.
name|RANGE
argument_list|,
name|shardRange
argument_list|)
expr_stmt|;
name|sliceProps
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|shardState
argument_list|)
expr_stmt|;
name|sliceProps
operator|.
name|put
argument_list|(
name|Slice
operator|.
name|PARENT
argument_list|,
name|shardParent
argument_list|)
expr_stmt|;
block|}
name|replicas
operator|.
name|put
argument_list|(
name|replica
operator|.
name|getName
argument_list|()
argument_list|,
name|replica
argument_list|)
expr_stmt|;
name|slice
operator|=
operator|new
name|Slice
argument_list|(
name|sliceName
argument_list|,
name|replicas
argument_list|,
name|sliceProps
argument_list|)
expr_stmt|;
name|DocCollection
name|newCollection
init|=
name|CollectionMutator
operator|.
name|updateSlice
argument_list|(
name|collectionName
argument_list|,
name|collection
argument_list|,
name|slice
argument_list|)
decl_stmt|;
return|return
operator|new
name|ZkWriteCommand
argument_list|(
name|collectionName
argument_list|,
name|newCollection
argument_list|)
return|;
block|}
comment|/**    * Handles non-legacy state updates    */
DECL|method|updateStateNew
specifier|protected
name|ZkWriteCommand
name|updateStateNew
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
specifier|final
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkCollectionKeyExistence
argument_list|(
name|message
argument_list|)
condition|)
return|return
name|ZkStateWriter
operator|.
name|NO_OP
return|;
name|String
name|sliceName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|collectionName
operator|==
literal|null
operator|||
name|sliceName
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid collection and slice {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
return|return
name|ZkStateWriter
operator|.
name|NO_OP
return|;
block|}
name|DocCollection
name|collection
init|=
name|clusterState
operator|.
name|getCollectionOrNull
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|Slice
name|slice
init|=
name|collection
operator|!=
literal|null
condition|?
name|collection
operator|.
name|getSlice
argument_list|(
name|sliceName
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"No such slice exists {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
return|return
name|ZkStateWriter
operator|.
name|NO_OP
return|;
block|}
return|return
name|updateState
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|)
return|;
block|}
DECL|method|checkAndCompleteShardSplit
specifier|private
name|DocCollection
name|checkAndCompleteShardSplit
parameter_list|(
name|ClusterState
name|prevState
parameter_list|,
name|DocCollection
name|collection
parameter_list|,
name|String
name|coreNodeName
parameter_list|,
name|String
name|sliceName
parameter_list|,
name|Replica
name|replica
parameter_list|)
block|{
name|Slice
name|slice
init|=
name|collection
operator|.
name|getSlice
argument_list|(
name|sliceName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sliceProps
init|=
name|slice
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|slice
operator|.
name|getState
argument_list|()
operator|==
name|Slice
operator|.
name|State
operator|.
name|RECOVERY
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Shard: {} is in recovery state"
argument_list|,
name|sliceName
argument_list|)
expr_stmt|;
comment|// is this replica active?
if|if
condition|(
name|replica
operator|.
name|getState
argument_list|()
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Shard: {} is in recovery state and coreNodeName: {} is active"
argument_list|,
name|sliceName
argument_list|,
name|coreNodeName
argument_list|)
expr_stmt|;
comment|// are all other replicas also active?
name|boolean
name|allActive
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|entry
range|:
name|slice
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|coreNodeName
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getState
argument_list|()
operator|!=
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
condition|)
block|{
name|allActive
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|allActive
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Shard: {} - all replicas are active. Finding status of fellow sub-shards"
argument_list|,
name|sliceName
argument_list|)
expr_stmt|;
comment|// find out about other sub shards
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|allSlicesCopy
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|collection
operator|.
name|getSlicesMap
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Slice
argument_list|>
name|subShardSlices
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|outer
label|:
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|entry
range|:
name|allSlicesCopy
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|sliceName
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Slice
name|otherSlice
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherSlice
operator|.
name|getState
argument_list|()
operator|==
name|Slice
operator|.
name|State
operator|.
name|RECOVERY
condition|)
block|{
if|if
condition|(
name|slice
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
operator|&&
name|slice
operator|.
name|getParent
argument_list|()
operator|.
name|equals
argument_list|(
name|otherSlice
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Shard: {} - Fellow sub-shard: {} found"
argument_list|,
name|sliceName
argument_list|,
name|otherSlice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// this is a fellow sub shard so check if all replicas are active
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|sliceEntry
range|:
name|otherSlice
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|sliceEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getState
argument_list|()
operator|!=
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
condition|)
block|{
name|allActive
operator|=
literal|false
expr_stmt|;
break|break
name|outer
break|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Shard: {} - Fellow sub-shard: {} has all replicas active"
argument_list|,
name|sliceName
argument_list|,
name|otherSlice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|subShardSlices
operator|.
name|add
argument_list|(
name|otherSlice
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|allActive
condition|)
block|{
comment|// hurray, all sub shard replicas are active
name|log
operator|.
name|info
argument_list|(
literal|"Shard: {} - All replicas across all fellow sub-shards are now ACTIVE. Preparing to switch shard states."
argument_list|,
name|sliceName
argument_list|)
expr_stmt|;
name|String
name|parentSliceName
init|=
operator|(
name|String
operator|)
name|sliceProps
operator|.
name|remove
argument_list|(
name|Slice
operator|.
name|PARENT
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
literal|"updateshardstate"
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|parentSliceName
argument_list|,
name|Slice
operator|.
name|State
operator|.
name|INACTIVE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|sliceName
argument_list|,
name|Slice
operator|.
name|State
operator|.
name|ACTIVE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Slice
name|subShardSlice
range|:
name|subShardSlices
control|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|subShardSlice
operator|.
name|getName
argument_list|()
argument_list|,
name|Slice
operator|.
name|State
operator|.
name|ACTIVE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
decl_stmt|;
return|return
operator|new
name|SliceMutator
argument_list|(
name|zkStateReader
argument_list|)
operator|.
name|updateShardState
argument_list|(
name|prevState
argument_list|,
name|m
argument_list|)
operator|.
name|collection
return|;
block|}
block|}
block|}
block|}
return|return
name|collection
return|;
block|}
block|}
end_class
end_unit
