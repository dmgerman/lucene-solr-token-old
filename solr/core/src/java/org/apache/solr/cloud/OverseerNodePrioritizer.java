begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
operator|.
name|OverseerAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
operator|.
name|CoreAdminAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandlerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * Responsible for prioritization of Overseer nodes, for example with the  * ADDROLE collection command.  */
end_comment
begin_class
DECL|class|OverseerNodePrioritizer
specifier|public
class|class
name|OverseerNodePrioritizer
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|zkStateReader
specifier|private
specifier|final
name|ZkStateReader
name|zkStateReader
decl_stmt|;
DECL|field|adminPath
specifier|private
specifier|final
name|String
name|adminPath
decl_stmt|;
DECL|field|shardHandlerFactory
specifier|private
specifier|final
name|ShardHandlerFactory
name|shardHandlerFactory
decl_stmt|;
DECL|method|OverseerNodePrioritizer
specifier|public
name|OverseerNodePrioritizer
parameter_list|(
name|ZkStateReader
name|zkStateReader
parameter_list|,
name|String
name|adminPath
parameter_list|,
name|ShardHandlerFactory
name|shardHandlerFactory
parameter_list|)
block|{
name|this
operator|.
name|zkStateReader
operator|=
name|zkStateReader
expr_stmt|;
name|this
operator|.
name|adminPath
operator|=
name|adminPath
expr_stmt|;
name|this
operator|.
name|shardHandlerFactory
operator|=
name|shardHandlerFactory
expr_stmt|;
block|}
DECL|method|prioritizeOverseerNodes
specifier|public
specifier|synchronized
name|void
name|prioritizeOverseerNodes
parameter_list|(
name|String
name|overseerId
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|SolrZkClient
name|zk
init|=
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|zk
operator|.
name|exists
argument_list|(
name|ZkStateReader
operator|.
name|ROLES
argument_list|,
literal|true
argument_list|)
condition|)
return|return;
name|Map
name|m
init|=
operator|(
name|Map
operator|)
name|Utils
operator|.
name|fromJSON
argument_list|(
name|zk
operator|.
name|getData
argument_list|(
name|ZkStateReader
operator|.
name|ROLES
argument_list|,
literal|null
argument_list|,
operator|new
name|Stat
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|List
name|overseerDesignates
init|=
operator|(
name|List
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"overseer"
argument_list|)
decl_stmt|;
if|if
condition|(
name|overseerDesignates
operator|==
literal|null
operator|||
name|overseerDesignates
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|String
name|ldr
init|=
name|OverseerTaskProcessor
operator|.
name|getLeaderNode
argument_list|(
name|zk
argument_list|)
decl_stmt|;
if|if
condition|(
name|overseerDesignates
operator|.
name|contains
argument_list|(
name|ldr
argument_list|)
condition|)
return|return;
name|log
operator|.
name|info
argument_list|(
literal|"prioritizing overseer nodes at {} overseer designates are {}"
argument_list|,
name|overseerId
argument_list|,
name|overseerDesignates
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|electionNodes
init|=
name|OverseerTaskProcessor
operator|.
name|getSortedElectionNodes
argument_list|(
name|zk
argument_list|,
name|OverseerElectionContext
operator|.
name|OVERSEER_ELECT
operator|+
name|LeaderElector
operator|.
name|ELECTION_NODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|electionNodes
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
return|return;
name|log
operator|.
name|info
argument_list|(
literal|"sorted nodes {}"
argument_list|,
name|electionNodes
argument_list|)
expr_stmt|;
name|String
name|designateNodeId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|electionNode
range|:
name|electionNodes
control|)
block|{
if|if
condition|(
name|overseerDesignates
operator|.
name|contains
argument_list|(
name|LeaderElector
operator|.
name|getNodeName
argument_list|(
name|electionNode
argument_list|)
argument_list|)
condition|)
block|{
name|designateNodeId
operator|=
name|electionNode
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|designateNodeId
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No live overseer designate "
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|designateNodeId
operator|.
name|equals
argument_list|(
name|electionNodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
comment|//checking if it is already at no:1
name|log
operator|.
name|info
argument_list|(
literal|"asking node {} to come join election at head"
argument_list|,
name|designateNodeId
argument_list|)
expr_stmt|;
name|invokeOverseerOp
argument_list|(
name|designateNodeId
argument_list|,
literal|"rejoinAtHead"
argument_list|)
expr_stmt|;
comment|//ask designate to come first
name|log
operator|.
name|info
argument_list|(
literal|"asking the old first in line {} to rejoin election  "
argument_list|,
name|electionNodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|invokeOverseerOp
argument_list|(
name|electionNodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"rejoin"
argument_list|)
expr_stmt|;
comment|//ask second inline to go behind
block|}
comment|//now ask the current leader to QUIT , so that the designate can takeover
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|QUIT
operator|.
name|toLower
argument_list|()
argument_list|,
literal|"id"
argument_list|,
name|OverseerTaskProcessor
operator|.
name|getLeaderId
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|invokeOverseerOp
specifier|private
name|void
name|invokeOverseerOp
parameter_list|(
name|String
name|electionNode
parameter_list|,
name|String
name|op
parameter_list|)
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|ShardHandler
name|shardHandler
init|=
name|shardHandlerFactory
operator|.
name|getShardHandler
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|OVERSEEROP
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"op"
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
name|adminPath
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"electionNode"
argument_list|,
name|electionNode
argument_list|)
expr_stmt|;
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|sreq
operator|.
name|purpose
operator|=
literal|1
expr_stmt|;
name|String
name|replica
init|=
name|zkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|LeaderElector
operator|.
name|getNodeName
argument_list|(
name|electionNode
argument_list|)
argument_list|)
decl_stmt|;
name|sreq
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|replica
block|}
expr_stmt|;
name|sreq
operator|.
name|actualShards
operator|=
name|sreq
operator|.
name|shards
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|shardHandler
operator|.
name|submit
argument_list|(
name|sreq
argument_list|,
name|replica
argument_list|,
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
name|shardHandler
operator|.
name|takeCompletedOrError
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
