begin_unit
begin_package
DECL|package|org.apache.solr.cloud.rule
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|rule
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CoreAdminHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_class
DECL|class|ImplicitSnitch
specifier|public
class|class
name|ImplicitSnitch
extends|extends
name|Snitch
implements|implements
name|CoreAdminHandler
operator|.
name|Invocable
block|{
DECL|field|hostAndPortPattern
specifier|public
specifier|static
specifier|final
name|Pattern
name|hostAndPortPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(?:https?://)?([^:]+):(\\d+)"
argument_list|)
decl_stmt|;
comment|//well known tags
DECL|field|NODE
specifier|public
specifier|static
specifier|final
name|String
name|NODE
init|=
literal|"node"
decl_stmt|;
DECL|field|PORT
specifier|public
specifier|static
specifier|final
name|String
name|PORT
init|=
literal|"port"
decl_stmt|;
DECL|field|HOST
specifier|public
specifier|static
specifier|final
name|String
name|HOST
init|=
literal|"host"
decl_stmt|;
DECL|field|CORES
specifier|public
specifier|static
specifier|final
name|String
name|CORES
init|=
literal|"cores"
decl_stmt|;
DECL|field|DISK
specifier|public
specifier|static
specifier|final
name|String
name|DISK
init|=
literal|"freedisk"
decl_stmt|;
DECL|field|SYSPROP
specifier|public
specifier|static
specifier|final
name|String
name|SYSPROP
init|=
literal|"sysprop."
decl_stmt|;
DECL|field|tags
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|tags
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NODE
argument_list|,
name|PORT
argument_list|,
name|HOST
argument_list|,
name|CORES
argument_list|,
name|DISK
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|getTags
specifier|public
name|void
name|getTags
parameter_list|(
name|String
name|solrNode
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|requestedTags
parameter_list|,
name|SnitchContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|requestedTags
operator|.
name|contains
argument_list|(
name|NODE
argument_list|)
condition|)
name|ctx
operator|.
name|getTags
argument_list|()
operator|.
name|put
argument_list|(
name|NODE
argument_list|,
name|solrNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|requestedTags
operator|.
name|contains
argument_list|(
name|HOST
argument_list|)
condition|)
block|{
name|Matcher
name|hostAndPortMatcher
init|=
name|hostAndPortPattern
operator|.
name|matcher
argument_list|(
name|solrNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostAndPortMatcher
operator|.
name|find
argument_list|()
condition|)
name|ctx
operator|.
name|getTags
argument_list|()
operator|.
name|put
argument_list|(
name|HOST
argument_list|,
name|hostAndPortMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|requestedTags
operator|.
name|contains
argument_list|(
name|PORT
argument_list|)
condition|)
block|{
name|Matcher
name|hostAndPortMatcher
init|=
name|hostAndPortPattern
operator|.
name|matcher
argument_list|(
name|solrNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostAndPortMatcher
operator|.
name|find
argument_list|()
condition|)
name|ctx
operator|.
name|getTags
argument_list|()
operator|.
name|put
argument_list|(
name|PORT
argument_list|,
name|hostAndPortMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
if|if
condition|(
name|requestedTags
operator|.
name|contains
argument_list|(
name|CORES
argument_list|)
condition|)
name|params
operator|.
name|add
argument_list|(
name|CORES
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
if|if
condition|(
name|requestedTags
operator|.
name|contains
argument_list|(
name|DISK
argument_list|)
condition|)
name|params
operator|.
name|add
argument_list|(
name|DISK
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tag
range|:
name|requestedTags
control|)
block|{
if|if
condition|(
name|tag
operator|.
name|startsWith
argument_list|(
name|SYSPROP
argument_list|)
condition|)
name|params
operator|.
name|add
argument_list|(
name|SYSPROP
argument_list|,
name|tag
operator|.
name|substring
argument_list|(
name|SYSPROP
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|ctx
operator|.
name|invokeRemote
argument_list|(
name|solrNode
argument_list|,
name|params
argument_list|,
name|ImplicitSnitch
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|getUsableSpaceInGB
specifier|static
name|long
name|getUsableSpaceInGB
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|space
init|=
name|Files
operator|.
name|getFileStore
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"/"
argument_list|)
argument_list|)
operator|.
name|getUsableSpace
argument_list|()
decl_stmt|;
name|long
name|spaceInGB
init|=
name|space
operator|/
literal|1024
operator|/
literal|1024
operator|/
literal|1024
decl_stmt|;
return|return
name|spaceInGB
return|;
block|}
DECL|method|invoke
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|invoke
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getInt
argument_list|(
name|CORES
argument_list|,
operator|-
literal|1
argument_list|)
operator|==
literal|1
condition|)
block|{
name|CoreContainer
name|cc
init|=
operator|(
name|CoreContainer
operator|)
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|get
argument_list|(
name|CoreContainer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|CORES
argument_list|,
name|cc
operator|.
name|getCoreNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getInt
argument_list|(
name|DISK
argument_list|,
operator|-
literal|1
argument_list|)
operator|==
literal|1
condition|)
block|{
try|try
block|{
specifier|final
name|long
name|spaceInGB
init|=
name|getUsableSpaceInGB
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|DISK
argument_list|,
name|spaceInGB
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{        }
block|}
name|String
index|[]
name|sysProps
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getParams
argument_list|(
name|SYSPROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|sysProps
operator|!=
literal|null
operator|&&
name|sysProps
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|prop
range|:
name|sysProps
control|)
name|result
operator|.
name|put
argument_list|(
name|SYSPROP
operator|+
name|prop
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|prop
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|isKnownTag
specifier|public
name|boolean
name|isKnownTag
parameter_list|(
name|String
name|tag
parameter_list|)
block|{
return|return
name|tags
operator|.
name|contains
argument_list|(
name|tag
argument_list|)
operator|||
name|tag
operator|.
name|startsWith
argument_list|(
name|SYSPROP
argument_list|)
return|;
comment|//a system property
block|}
block|}
end_class
end_unit
