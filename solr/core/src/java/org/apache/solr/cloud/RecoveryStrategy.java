begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpUriRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
operator|.
name|HttpUriRequestResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|AbstractUpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
operator|.
name|WaitForState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClosableThread
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZooKeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|UpdateParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreDescriptor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|DirectoryFactory
operator|.
name|DirContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ReplicationHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|CommitUpdateCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|PeerSync
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateLog
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateLog
operator|.
name|RecoveryInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|DistributedUpdateProcessor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_class
DECL|class|RecoveryStrategy
specifier|public
class|class
name|RecoveryStrategy
extends|extends
name|Thread
implements|implements
name|ClosableThread
block|{
DECL|field|WAIT_FOR_UPDATES_WITH_STALE_STATE_PAUSE
specifier|private
specifier|static
specifier|final
name|int
name|WAIT_FOR_UPDATES_WITH_STALE_STATE_PAUSE
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"solr.cloud.wait-for-updates-with-stale-state-pause"
argument_list|,
literal|7000
argument_list|)
decl_stmt|;
DECL|field|MAX_RETRIES
specifier|private
specifier|static
specifier|final
name|int
name|MAX_RETRIES
init|=
literal|500
decl_stmt|;
DECL|field|STARTING_RECOVERY_DELAY
specifier|private
specifier|static
specifier|final
name|int
name|STARTING_RECOVERY_DELAY
init|=
literal|5000
decl_stmt|;
DECL|field|REPLICATION_HANDLER
specifier|private
specifier|static
specifier|final
name|String
name|REPLICATION_HANDLER
init|=
literal|"/replication"
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RecoveryStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|interface|RecoveryListener
specifier|public
specifier|static
interface|interface
name|RecoveryListener
block|{
DECL|method|recovered
specifier|public
name|void
name|recovered
parameter_list|()
function_decl|;
DECL|method|failed
specifier|public
name|void
name|failed
parameter_list|()
function_decl|;
block|}
DECL|field|close
specifier|private
specifier|volatile
name|boolean
name|close
init|=
literal|false
decl_stmt|;
DECL|field|recoveryListener
specifier|private
name|RecoveryListener
name|recoveryListener
decl_stmt|;
DECL|field|zkController
specifier|private
name|ZkController
name|zkController
decl_stmt|;
DECL|field|baseUrl
specifier|private
name|String
name|baseUrl
decl_stmt|;
DECL|field|coreZkNodeName
specifier|private
name|String
name|coreZkNodeName
decl_stmt|;
DECL|field|zkStateReader
specifier|private
name|ZkStateReader
name|zkStateReader
decl_stmt|;
DECL|field|coreName
specifier|private
specifier|volatile
name|String
name|coreName
decl_stmt|;
DECL|field|retries
specifier|private
name|int
name|retries
decl_stmt|;
DECL|field|recoveringAfterStartup
specifier|private
name|boolean
name|recoveringAfterStartup
decl_stmt|;
DECL|field|cc
specifier|private
name|CoreContainer
name|cc
decl_stmt|;
DECL|field|prevSendPreRecoveryHttpUriRequest
specifier|private
specifier|volatile
name|HttpUriRequest
name|prevSendPreRecoveryHttpUriRequest
decl_stmt|;
comment|// this should only be used from SolrCoreState
DECL|method|RecoveryStrategy
specifier|public
name|RecoveryStrategy
parameter_list|(
name|CoreContainer
name|cc
parameter_list|,
name|CoreDescriptor
name|cd
parameter_list|,
name|RecoveryListener
name|recoveryListener
parameter_list|)
block|{
name|this
operator|.
name|cc
operator|=
name|cc
expr_stmt|;
name|this
operator|.
name|coreName
operator|=
name|cd
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|recoveryListener
operator|=
name|recoveryListener
expr_stmt|;
name|setName
argument_list|(
literal|"RecoveryThread-"
operator|+
name|this
operator|.
name|coreName
argument_list|)
expr_stmt|;
name|zkController
operator|=
name|cc
operator|.
name|getZkController
argument_list|()
expr_stmt|;
name|zkStateReader
operator|=
name|zkController
operator|.
name|getZkStateReader
argument_list|()
expr_stmt|;
name|baseUrl
operator|=
name|zkController
operator|.
name|getBaseUrl
argument_list|()
expr_stmt|;
name|coreZkNodeName
operator|=
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCoreNodeName
argument_list|()
expr_stmt|;
block|}
DECL|method|setRecoveringAfterStartup
specifier|public
name|void
name|setRecoveringAfterStartup
parameter_list|(
name|boolean
name|recoveringAfterStartup
parameter_list|)
block|{
name|this
operator|.
name|recoveringAfterStartup
operator|=
name|recoveringAfterStartup
expr_stmt|;
block|}
comment|// make sure any threads stop retrying
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|close
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|prevSendPreRecoveryHttpUriRequest
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// okay
block|}
name|log
operator|.
name|warn
argument_list|(
literal|"Stopping recovery for core={} coreNodeName={}"
argument_list|,
name|coreName
argument_list|,
name|coreZkNodeName
argument_list|)
expr_stmt|;
block|}
DECL|method|recoveryFailed
specifier|private
name|void
name|recoveryFailed
parameter_list|(
specifier|final
name|SolrCore
name|core
parameter_list|,
specifier|final
name|ZkController
name|zkController
parameter_list|,
specifier|final
name|String
name|baseUrl
parameter_list|,
specifier|final
name|String
name|shardZkNodeName
parameter_list|,
specifier|final
name|CoreDescriptor
name|cd
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Recovery failed - I give up. core="
operator|+
name|coreName
argument_list|)
expr_stmt|;
try|try
block|{
name|zkController
operator|.
name|publish
argument_list|(
name|cd
argument_list|,
name|ZkStateReader
operator|.
name|RECOVERY_FAILED
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|()
expr_stmt|;
name|recoveryListener
operator|.
name|failed
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|replicate
specifier|private
name|void
name|replicate
parameter_list|(
name|String
name|nodeName
parameter_list|,
name|SolrCore
name|core
parameter_list|,
name|ZkNodeProps
name|leaderprops
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|ZkCoreNodeProps
name|leaderCNodeProps
init|=
operator|new
name|ZkCoreNodeProps
argument_list|(
name|leaderprops
argument_list|)
decl_stmt|;
name|String
name|leaderUrl
init|=
name|leaderCNodeProps
operator|.
name|getCoreUrl
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Attempting to replicate from "
operator|+
name|leaderUrl
operator|+
literal|". core="
operator|+
name|coreName
argument_list|)
expr_stmt|;
comment|// send commit
name|commitOnLeader
argument_list|(
name|leaderUrl
argument_list|)
expr_stmt|;
comment|// use rep handler directly, so we can do this sync rather than async
name|SolrRequestHandler
name|handler
init|=
name|core
operator|.
name|getRequestHandler
argument_list|(
name|REPLICATION_HANDLER
argument_list|)
decl_stmt|;
name|ReplicationHandler
name|replicationHandler
init|=
operator|(
name|ReplicationHandler
operator|)
name|handler
decl_stmt|;
if|if
condition|(
name|replicationHandler
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
literal|"Skipping recovery, no "
operator|+
name|REPLICATION_HANDLER
operator|+
literal|" handler found"
argument_list|)
throw|;
block|}
name|ModifiableSolrParams
name|solrParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|solrParams
operator|.
name|set
argument_list|(
name|ReplicationHandler
operator|.
name|MASTER_URL
argument_list|,
name|leaderUrl
argument_list|)
expr_stmt|;
if|if
condition|(
name|isClosed
argument_list|()
condition|)
return|return;
comment|// we check closed on return
name|boolean
name|success
init|=
name|replicationHandler
operator|.
name|doFetch
argument_list|(
name|solrParams
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Replication for recovery failed."
argument_list|)
throw|;
block|}
comment|// solrcloud_debug
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
try|try
block|{
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searchHolder
init|=
name|core
operator|.
name|getNewestSearcher
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|SolrIndexSearcher
name|searcher
init|=
name|searchHolder
operator|.
name|get
argument_list|()
decl_stmt|;
name|Directory
name|dir
init|=
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|get
argument_list|(
name|core
operator|.
name|getIndexDir
argument_list|()
argument_list|,
name|DirContext
operator|.
name|META_DATA
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" replicated "
operator|+
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
operator|+
literal|" from "
operator|+
name|leaderUrl
operator|+
literal|" gen:"
operator|+
name|core
operator|.
name|getDeletionPolicy
argument_list|()
operator|.
name|getLatestCommit
argument_list|()
operator|!=
literal|null
condition|?
literal|"null"
else|:
name|core
operator|.
name|getDeletionPolicy
argument_list|()
operator|.
name|getLatestCommit
argument_list|()
operator|.
name|getGeneration
argument_list|()
operator|+
literal|" data:"
operator|+
name|core
operator|.
name|getDataDir
argument_list|()
operator|+
literal|" index:"
operator|+
name|core
operator|.
name|getIndexDir
argument_list|()
operator|+
literal|" newIndex:"
operator|+
name|core
operator|.
name|getNewIndexDir
argument_list|()
operator|+
literal|" files:"
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|dir
operator|.
name|listAll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|release
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|searchHolder
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Error in solrcloud_debug block"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|commitOnLeader
specifier|private
name|void
name|commitOnLeader
parameter_list|(
name|String
name|leaderUrl
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
try|try
init|(
name|HttpSolrClient
name|client
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|leaderUrl
argument_list|)
init|)
block|{
name|client
operator|.
name|setConnectionTimeout
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
name|UpdateRequest
name|ureq
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|ureq
operator|.
name|setParams
argument_list|(
operator|new
name|ModifiableSolrParams
argument_list|()
argument_list|)
expr_stmt|;
name|ureq
operator|.
name|getParams
argument_list|()
operator|.
name|set
argument_list|(
name|DistributedUpdateProcessor
operator|.
name|COMMIT_END_POINT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ureq
operator|.
name|getParams
argument_list|()
operator|.
name|set
argument_list|(
name|UpdateParams
operator|.
name|OPEN_SEARCHER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ureq
operator|.
name|setAction
argument_list|(
name|AbstractUpdateRequest
operator|.
name|ACTION
operator|.
name|COMMIT
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// set request info for logging
try|try
init|(
name|SolrCore
name|core
init|=
name|cc
operator|.
name|getCore
argument_list|(
name|coreName
argument_list|)
init|)
block|{
if|if
condition|(
name|core
operator|==
literal|null
condition|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"SolrCore not found - cannot recover:"
operator|+
name|coreName
argument_list|)
expr_stmt|;
return|return;
block|}
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|()
argument_list|)
decl_stmt|;
name|SolrQueryResponse
name|rsp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|SolrRequestInfo
operator|.
name|setRequestInfo
argument_list|(
operator|new
name|SolrRequestInfo
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Starting recovery process.  core="
operator|+
name|coreName
operator|+
literal|" recoveringAfterStartup="
operator|+
name|recoveringAfterStartup
argument_list|)
expr_stmt|;
try|try
block|{
name|doRecovery
argument_list|(
name|core
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|SolrRequestInfo
operator|.
name|clearRequestInfo
argument_list|()
expr_stmt|;
block|}
block|}
comment|// TODO: perhaps make this grab a new core each time through the loop to handle core reloads?
DECL|method|doRecovery
specifier|public
name|void
name|doRecovery
parameter_list|(
name|SolrCore
name|core
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|boolean
name|replayed
init|=
literal|false
decl_stmt|;
name|boolean
name|successfulRecovery
init|=
literal|false
decl_stmt|;
name|UpdateLog
name|ulog
decl_stmt|;
name|ulog
operator|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
expr_stmt|;
if|if
condition|(
name|ulog
operator|==
literal|null
condition|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"No UpdateLog found - cannot recover. core="
operator|+
name|coreName
argument_list|)
expr_stmt|;
name|recoveryFailed
argument_list|(
name|core
argument_list|,
name|zkController
argument_list|,
name|baseUrl
argument_list|,
name|coreZkNodeName
argument_list|,
name|core
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|firstTime
init|=
literal|true
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|recentVersions
decl_stmt|;
name|UpdateLog
operator|.
name|RecentUpdates
name|recentUpdates
init|=
literal|null
decl_stmt|;
try|try
block|{
name|recentUpdates
operator|=
name|ulog
operator|.
name|getRecentUpdates
argument_list|()
expr_stmt|;
name|recentVersions
operator|=
name|recentUpdates
operator|.
name|getVersions
argument_list|(
name|ulog
operator|.
name|getNumRecordsToKeep
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Corrupt tlog - ignoring. core="
operator|+
name|coreName
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|recentVersions
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|recentUpdates
operator|!=
literal|null
condition|)
block|{
name|recentUpdates
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Long
argument_list|>
name|startingVersions
init|=
name|ulog
operator|.
name|getStartingVersions
argument_list|()
decl_stmt|;
if|if
condition|(
name|startingVersions
operator|!=
literal|null
operator|&&
name|recoveringAfterStartup
condition|)
block|{
try|try
block|{
name|int
name|oldIdx
init|=
literal|0
decl_stmt|;
comment|// index of the start of the old list in the current
comment|// list
name|long
name|firstStartingVersion
init|=
name|startingVersions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|startingVersions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|0
decl_stmt|;
for|for
control|(
init|;
name|oldIdx
operator|<
name|recentVersions
operator|.
name|size
argument_list|()
condition|;
name|oldIdx
operator|++
control|)
block|{
if|if
condition|(
name|recentVersions
operator|.
name|get
argument_list|(
name|oldIdx
argument_list|)
operator|==
name|firstStartingVersion
condition|)
break|break;
block|}
if|if
condition|(
name|oldIdx
operator|>
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"####### Found new versions added after startup: num="
operator|+
name|oldIdx
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"###### currentVersions="
operator|+
name|recentVersions
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"###### startupVersions="
operator|+
name|startingVersions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Error getting recent versions. core="
operator|+
name|coreName
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|recentVersions
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|recoveringAfterStartup
condition|)
block|{
comment|// if we're recovering after startup (i.e. we have been down), then we need to know what the last versions were
comment|// when we went down.  We may have received updates since then.
name|recentVersions
operator|=
name|startingVersions
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|(
name|ulog
operator|.
name|getStartingOperation
argument_list|()
operator|&
name|UpdateLog
operator|.
name|FLAG_GAP
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// last operation at the time of startup had the GAP flag set...
comment|// this means we were previously doing a full index replication
comment|// that probably didn't complete and buffering updates in the
comment|// meantime.
name|log
operator|.
name|info
argument_list|(
literal|"Looks like a previous replication recovery did not complete - skipping peer sync. core="
operator|+
name|coreName
argument_list|)
expr_stmt|;
name|firstTime
operator|=
literal|false
expr_stmt|;
comment|// skip peersync
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Error trying to get ulog starting operation. core="
operator|+
name|coreName
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|firstTime
operator|=
literal|false
expr_stmt|;
comment|// skip peersync
block|}
block|}
while|while
condition|(
operator|!
name|successfulRecovery
operator|&&
operator|!
name|isInterrupted
argument_list|()
operator|&&
operator|!
name|isClosed
argument_list|()
condition|)
block|{
comment|// don't use interruption or it will close channels though
try|try
block|{
name|CloudDescriptor
name|cloudDesc
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
name|ZkNodeProps
name|leaderprops
init|=
name|zkStateReader
operator|.
name|getLeaderRetry
argument_list|(
name|cloudDesc
operator|.
name|getCollectionName
argument_list|()
argument_list|,
name|cloudDesc
operator|.
name|getShardId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|leaderBaseUrl
init|=
name|leaderprops
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
decl_stmt|;
specifier|final
name|String
name|leaderCoreName
init|=
name|leaderprops
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
name|String
name|leaderUrl
init|=
name|ZkCoreNodeProps
operator|.
name|getCoreUrl
argument_list|(
name|leaderBaseUrl
argument_list|,
name|leaderCoreName
argument_list|)
decl_stmt|;
name|String
name|ourUrl
init|=
name|ZkCoreNodeProps
operator|.
name|getCoreUrl
argument_list|(
name|baseUrl
argument_list|,
name|coreName
argument_list|)
decl_stmt|;
name|boolean
name|isLeader
init|=
name|leaderUrl
operator|.
name|equals
argument_list|(
name|ourUrl
argument_list|)
decl_stmt|;
if|if
condition|(
name|isLeader
operator|&&
operator|!
name|cloudDesc
operator|.
name|isLeader
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Cloud state still says we are leader."
argument_list|)
throw|;
block|}
if|if
condition|(
name|cloudDesc
operator|.
name|isLeader
argument_list|()
condition|)
block|{
comment|// we are now the leader - no one else must have been suitable
name|log
operator|.
name|warn
argument_list|(
literal|"We have not yet recovered - but we are now the leader! core="
operator|+
name|coreName
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Finished recovery process. core="
operator|+
name|coreName
argument_list|)
expr_stmt|;
name|zkController
operator|.
name|publish
argument_list|(
name|core
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Publishing state of core "
operator|+
name|core
operator|.
name|getName
argument_list|()
operator|+
literal|" as recovering, leader is "
operator|+
name|leaderUrl
operator|+
literal|" and I am "
operator|+
name|ourUrl
argument_list|)
expr_stmt|;
name|zkController
operator|.
name|publish
argument_list|(
name|core
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|RECOVERING
argument_list|)
expr_stmt|;
specifier|final
name|Slice
name|slice
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|cloudDesc
operator|.
name|getCollectionName
argument_list|()
argument_list|,
name|cloudDesc
operator|.
name|getShardId
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|prevSendPreRecoveryHttpUriRequest
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// okay
block|}
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Recovery was cancelled"
argument_list|)
expr_stmt|;
break|break;
block|}
name|sendPrepRecoveryCmd
argument_list|(
name|leaderBaseUrl
argument_list|,
name|leaderCoreName
argument_list|,
name|slice
argument_list|)
expr_stmt|;
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Recovery was cancelled"
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// we wait a bit so that any updates on the leader
comment|// that started before they saw recovering state
comment|// are sure to have finished (see SOLR-7141 for
comment|// discussion around current value)
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|WAIT_FOR_UPDATES_WITH_STALE_STATE_PAUSE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
comment|// first thing we just try to sync
if|if
condition|(
name|firstTime
condition|)
block|{
name|firstTime
operator|=
literal|false
expr_stmt|;
comment|// only try sync the first time through the loop
name|log
operator|.
name|info
argument_list|(
literal|"Attempting to PeerSync from "
operator|+
name|leaderUrl
operator|+
literal|" core="
operator|+
name|coreName
operator|+
literal|" - recoveringAfterStartup="
operator|+
name|recoveringAfterStartup
argument_list|)
expr_stmt|;
comment|// System.out.println("Attempting to PeerSync from " + leaderUrl
comment|// + " i am:" + zkController.getNodeName());
name|PeerSync
name|peerSync
init|=
operator|new
name|PeerSync
argument_list|(
name|core
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|leaderUrl
argument_list|)
argument_list|,
name|ulog
operator|.
name|getNumRecordsToKeep
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|peerSync
operator|.
name|setStartingVersions
argument_list|(
name|recentVersions
argument_list|)
expr_stmt|;
name|boolean
name|syncSuccess
init|=
name|peerSync
operator|.
name|sync
argument_list|()
decl_stmt|;
if|if
condition|(
name|syncSuccess
condition|)
block|{
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|()
argument_list|)
decl_stmt|;
comment|// force open a new searcher
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|commit
argument_list|(
operator|new
name|CommitUpdateCommand
argument_list|(
name|req
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"PeerSync Recovery was successful - registering as Active. core="
operator|+
name|coreName
argument_list|)
expr_stmt|;
comment|// solrcloud_debug
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
try|try
block|{
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searchHolder
init|=
name|core
operator|.
name|getNewestSearcher
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|SolrIndexSearcher
name|searcher
init|=
name|searchHolder
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" synched "
operator|+
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|searchHolder
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Error in solrcloud_debug block"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// sync success - register as active and return
name|zkController
operator|.
name|publish
argument_list|(
name|core
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|successfulRecovery
operator|=
literal|true
expr_stmt|;
name|close
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"PeerSync Recovery was not successful - trying replication. core="
operator|+
name|coreName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Recovery was cancelled"
argument_list|)
expr_stmt|;
break|break;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Starting Replication Recovery. core="
operator|+
name|coreName
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Begin buffering updates. core="
operator|+
name|coreName
argument_list|)
expr_stmt|;
name|ulog
operator|.
name|bufferUpdates
argument_list|()
expr_stmt|;
name|replayed
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|replicate
argument_list|(
name|zkController
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|core
argument_list|,
name|leaderprops
argument_list|)
expr_stmt|;
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Recovery was cancelled"
argument_list|)
expr_stmt|;
break|break;
block|}
name|replay
argument_list|(
name|core
argument_list|)
expr_stmt|;
name|replayed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Recovery was cancelled"
argument_list|)
expr_stmt|;
break|break;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Replication Recovery was successful - registering as Active. core="
operator|+
name|coreName
argument_list|)
expr_stmt|;
comment|// if there are pending recovery requests, don't advert as active
name|zkController
operator|.
name|publish
argument_list|(
name|core
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|close
operator|=
literal|true
expr_stmt|;
name|successfulRecovery
operator|=
literal|true
expr_stmt|;
name|recoveryListener
operator|.
name|recovered
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Recovery was interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|close
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Error while trying to recover"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|replayed
condition|)
block|{
try|try
block|{
name|ulog
operator|.
name|dropBufferedUpdates
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Error while trying to recover. core="
operator|+
name|coreName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|successfulRecovery
condition|)
block|{
comment|// lets pause for a moment and we need to try again...
comment|// TODO: we don't want to retry for some problems?
comment|// Or do a fall off retry...
try|try
block|{
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
break|break;
block|}
name|log
operator|.
name|error
argument_list|(
literal|"Recovery failed - trying again... ("
operator|+
name|retries
operator|+
literal|") core="
operator|+
name|coreName
argument_list|)
expr_stmt|;
name|retries
operator|++
expr_stmt|;
if|if
condition|(
name|retries
operator|>=
name|MAX_RETRIES
condition|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Recovery failed - max retries exceeded ("
operator|+
name|retries
operator|+
literal|"). core="
operator|+
name|coreName
argument_list|)
expr_stmt|;
try|try
block|{
name|recoveryFailed
argument_list|(
name|core
argument_list|,
name|zkController
argument_list|,
name|baseUrl
argument_list|,
name|coreZkNodeName
argument_list|,
name|core
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Could not publish that recovery failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"core="
operator|+
name|coreName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// start at 1 sec and work up to a min
name|double
name|loopCount
init|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
name|retries
argument_list|)
argument_list|,
literal|60
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Wait {} seconds before trying to recover again ({})"
argument_list|,
name|loopCount
argument_list|,
name|retries
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|loopCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isClosed
argument_list|()
condition|)
break|break;
comment|// check if someone closed us
name|Thread
operator|.
name|sleep
argument_list|(
name|STARTING_RECOVERY_DELAY
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Recovery was interrupted. core="
operator|+
name|coreName
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|close
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Finished recovery process. core="
operator|+
name|coreName
argument_list|)
expr_stmt|;
block|}
DECL|method|replay
specifier|private
name|Future
argument_list|<
name|RecoveryInfo
argument_list|>
name|replay
parameter_list|(
name|SolrCore
name|core
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|Future
argument_list|<
name|RecoveryInfo
argument_list|>
name|future
init|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|.
name|applyBufferedUpdates
argument_list|()
decl_stmt|;
if|if
condition|(
name|future
operator|==
literal|null
condition|)
block|{
comment|// no replay needed\
name|log
operator|.
name|info
argument_list|(
literal|"No replay needed. core="
operator|+
name|coreName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Replaying buffered documents. core="
operator|+
name|coreName
argument_list|)
expr_stmt|;
comment|// wait for replay
name|RecoveryInfo
name|report
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|report
operator|.
name|failed
condition|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Replay failed"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Replay failed"
argument_list|)
throw|;
block|}
block|}
comment|// solrcloud_debug
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
try|try
block|{
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searchHolder
init|=
name|core
operator|.
name|getNewestSearcher
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|SolrIndexSearcher
name|searcher
init|=
name|searchHolder
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" replayed "
operator|+
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|searchHolder
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Error in solrcloud_debug block"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|future
return|;
block|}
annotation|@
name|Override
DECL|method|isClosed
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|close
return|;
block|}
DECL|method|sendPrepRecoveryCmd
specifier|private
name|void
name|sendPrepRecoveryCmd
parameter_list|(
name|String
name|leaderBaseUrl
parameter_list|,
name|String
name|leaderCoreName
parameter_list|,
name|Slice
name|slice
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
try|try
init|(
name|HttpSolrClient
name|client
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|leaderBaseUrl
argument_list|)
init|)
block|{
name|client
operator|.
name|setConnectionTimeout
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
name|WaitForState
name|prepCmd
init|=
operator|new
name|WaitForState
argument_list|()
decl_stmt|;
name|prepCmd
operator|.
name|setCoreName
argument_list|(
name|leaderCoreName
argument_list|)
expr_stmt|;
name|prepCmd
operator|.
name|setNodeName
argument_list|(
name|zkController
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|prepCmd
operator|.
name|setCoreNodeName
argument_list|(
name|coreZkNodeName
argument_list|)
expr_stmt|;
name|prepCmd
operator|.
name|setState
argument_list|(
name|ZkStateReader
operator|.
name|RECOVERING
argument_list|)
expr_stmt|;
name|prepCmd
operator|.
name|setCheckLive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|prepCmd
operator|.
name|setOnlyIfLeader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Slice
operator|.
name|State
name|state
init|=
name|slice
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|!=
name|Slice
operator|.
name|State
operator|.
name|CONSTRUCTION
operator|&&
name|state
operator|!=
name|Slice
operator|.
name|State
operator|.
name|RECOVERY
condition|)
block|{
name|prepCmd
operator|.
name|setOnlyIfLeaderActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|HttpUriRequestResponse
name|mrr
init|=
name|client
operator|.
name|httpUriRequest
argument_list|(
name|prepCmd
argument_list|)
decl_stmt|;
name|prevSendPreRecoveryHttpUriRequest
operator|=
name|mrr
operator|.
name|httpUriRequest
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending prep recovery command to {}; {}"
argument_list|,
name|leaderBaseUrl
argument_list|,
name|prepCmd
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mrr
operator|.
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
