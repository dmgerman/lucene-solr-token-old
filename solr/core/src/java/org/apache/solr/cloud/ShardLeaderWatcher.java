begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|Code
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * A watcher for shard leader.  */
end_comment
begin_class
DECL|class|ShardLeaderWatcher
specifier|public
class|class
name|ShardLeaderWatcher
implements|implements
name|Watcher
block|{
DECL|field|logger
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ShardLeaderWatcher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|interface|ShardLeaderListener
specifier|static
interface|interface
name|ShardLeaderListener
block|{
DECL|method|announceLeader
name|void
name|announceLeader
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|shardId
parameter_list|,
name|ZkCoreNodeProps
name|props
parameter_list|)
function_decl|;
block|}
DECL|field|shard
specifier|private
specifier|final
name|String
name|shard
decl_stmt|;
DECL|field|collection
specifier|private
specifier|final
name|String
name|collection
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|zkClient
specifier|private
specifier|final
name|SolrZkClient
name|zkClient
decl_stmt|;
DECL|field|closed
specifier|private
specifier|volatile
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|field|listener
specifier|private
specifier|final
name|ShardLeaderListener
name|listener
decl_stmt|;
DECL|method|ShardLeaderWatcher
specifier|public
name|ShardLeaderWatcher
parameter_list|(
name|String
name|shard
parameter_list|,
name|String
name|collection
parameter_list|,
name|SolrZkClient
name|zkClient
parameter_list|,
name|ShardLeaderListener
name|listener
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|shard
operator|=
name|shard
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|ZkStateReader
operator|.
name|getShardLeadersPath
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|this
operator|.
name|zkClient
operator|=
name|zkClient
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|processLeaderChange
argument_list|()
expr_stmt|;
block|}
DECL|method|processLeaderChange
specifier|private
name|void
name|processLeaderChange
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|closed
condition|)
return|return;
try|try
block|{
name|byte
index|[]
name|data
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|path
argument_list|,
name|this
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ZkCoreNodeProps
name|leaderProps
init|=
operator|new
name|ZkCoreNodeProps
argument_list|(
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|listener
operator|.
name|announceLeader
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|,
name|leaderProps
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
comment|//check if we lost connection or the node was gone
if|if
condition|(
name|ke
operator|.
name|code
argument_list|()
operator|!=
name|Code
operator|.
name|CONNECTIONLOSS
operator|&&
name|ke
operator|.
name|code
argument_list|()
operator|!=
name|Code
operator|.
name|SESSIONEXPIRED
operator|&&
name|ke
operator|.
name|code
argument_list|()
operator|!=
name|Code
operator|.
name|NONODE
condition|)
block|{
throw|throw
name|ke
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|processLeaderChange
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Shard leader watch triggered but Solr cannot talk to zk."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"Shard leader watch triggered but Solr cannot talk to zk."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class
end_unit
