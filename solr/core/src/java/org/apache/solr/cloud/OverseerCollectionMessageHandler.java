begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|AbstractUpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|UpdateResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|Assign
operator|.
name|ReplicaCount
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
operator|.
name|ClusterStateMutator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
operator|.
name|OverseerAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|rule
operator|.
name|ReplicaAssigner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|rule
operator|.
name|ReplicaAssigner
operator|.
name|Position
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|rule
operator|.
name|Rule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Aliases
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|CompositeIdRouter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocRouter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ImplicitDocRouter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|PlainIdRouter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|RoutingRule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkConfigManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
operator|.
name|CoreAdminAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|MapSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ShardParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|ClusterStatus
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandlerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|SolrIndexSplitter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RTimer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TimeOut
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|stats
operator|.
name|Snapshot
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|stats
operator|.
name|Timer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|Assign
operator|.
name|getNodesForNewReplicas
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
operator|.
name|SNITCH
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|BASE_URL_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|COLLECTION_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|ELECTION_NODE_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|MAX_SHARDS_PER_NODE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|PROPERTY_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|PROPERTY_VALUE_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|REJOIN_AT_HEAD_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|REPLICATION_FACTOR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|REPLICA_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|ADDREPLICA
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|ADDREPLICAPROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|ADDROLE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|BALANCESHARDUNIQUE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CLUSTERSTATUS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CREATE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CREATESHARD
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|DELETE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|DELETEREPLICAPROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|DELETESHARD
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|MIGRATESTATEFORMAT
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|REMOVEROLE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonAdminParams
operator|.
name|ASYNC
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|NAME
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
operator|.
name|formatString
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
operator|.
name|makeMap
import|;
end_import
begin_class
DECL|class|OverseerCollectionMessageHandler
specifier|public
class|class
name|OverseerCollectionMessageHandler
implements|implements
name|OverseerMessageHandler
block|{
DECL|field|NUM_SLICES
specifier|public
specifier|static
specifier|final
name|String
name|NUM_SLICES
init|=
literal|"numShards"
decl_stmt|;
DECL|field|CREATE_NODE_SET_SHUFFLE_DEFAULT
specifier|static
specifier|final
name|boolean
name|CREATE_NODE_SET_SHUFFLE_DEFAULT
init|=
literal|true
decl_stmt|;
DECL|field|CREATE_NODE_SET_SHUFFLE
specifier|public
specifier|static
specifier|final
name|String
name|CREATE_NODE_SET_SHUFFLE
init|=
literal|"createNodeSet.shuffle"
decl_stmt|;
DECL|field|CREATE_NODE_SET_EMPTY
specifier|public
specifier|static
specifier|final
name|String
name|CREATE_NODE_SET_EMPTY
init|=
literal|"EMPTY"
decl_stmt|;
DECL|field|CREATE_NODE_SET
specifier|public
specifier|static
specifier|final
name|String
name|CREATE_NODE_SET
init|=
literal|"createNodeSet"
decl_stmt|;
DECL|field|ROUTER
specifier|public
specifier|static
specifier|final
name|String
name|ROUTER
init|=
literal|"router"
decl_stmt|;
DECL|field|SHARDS_PROP
specifier|public
specifier|static
specifier|final
name|String
name|SHARDS_PROP
init|=
literal|"shards"
decl_stmt|;
DECL|field|REQUESTID
specifier|public
specifier|static
specifier|final
name|String
name|REQUESTID
init|=
literal|"requestid"
decl_stmt|;
DECL|field|COLL_CONF
specifier|public
specifier|static
specifier|final
name|String
name|COLL_CONF
init|=
literal|"collection.configName"
decl_stmt|;
DECL|field|COLL_PROP_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|COLL_PROP_PREFIX
init|=
literal|"property."
decl_stmt|;
DECL|field|ONLY_IF_DOWN
specifier|public
specifier|static
specifier|final
name|String
name|ONLY_IF_DOWN
init|=
literal|"onlyIfDown"
decl_stmt|;
DECL|field|SHARD_UNIQUE
specifier|public
specifier|static
specifier|final
name|String
name|SHARD_UNIQUE
init|=
literal|"shardUnique"
decl_stmt|;
DECL|field|ONLY_ACTIVE_NODES
specifier|public
specifier|static
specifier|final
name|String
name|ONLY_ACTIVE_NODES
init|=
literal|"onlyactivenodes"
decl_stmt|;
DECL|field|SKIP_CREATE_REPLICA_IN_CLUSTER_STATE
specifier|private
specifier|static
specifier|final
name|String
name|SKIP_CREATE_REPLICA_IN_CLUSTER_STATE
init|=
literal|"skipCreateReplicaInClusterState"
decl_stmt|;
DECL|field|COLL_PROPS
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|COLL_PROPS
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|makeMap
argument_list|(
name|ROUTER
argument_list|,
name|DocRouter
operator|.
name|DEFAULT_NAME
argument_list|,
name|ZkStateReader
operator|.
name|REPLICATION_FACTOR
argument_list|,
literal|"1"
argument_list|,
name|ZkStateReader
operator|.
name|MAX_SHARDS_PER_NODE
argument_list|,
literal|"1"
argument_list|,
name|ZkStateReader
operator|.
name|AUTO_ADD_REPLICAS
argument_list|,
literal|"false"
argument_list|,
name|DocCollection
operator|.
name|RULE
argument_list|,
literal|null
argument_list|,
name|SNITCH
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OverseerCollectionMessageHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|overseer
specifier|private
name|Overseer
name|overseer
decl_stmt|;
DECL|field|shardHandlerFactory
specifier|private
name|ShardHandlerFactory
name|shardHandlerFactory
decl_stmt|;
DECL|field|adminPath
specifier|private
name|String
name|adminPath
decl_stmt|;
DECL|field|zkStateReader
specifier|private
name|ZkStateReader
name|zkStateReader
decl_stmt|;
DECL|field|myId
specifier|private
name|String
name|myId
decl_stmt|;
DECL|field|stats
specifier|private
name|Overseer
operator|.
name|Stats
name|stats
decl_stmt|;
DECL|field|overseerPrioritizer
specifier|private
name|OverseerNodePrioritizer
name|overseerPrioritizer
decl_stmt|;
comment|// Set that tracks collections that are currently being processed by a running task.
comment|// This is used for handling mutual exclusion of the tasks.
DECL|field|collectionWip
specifier|final
specifier|private
name|Set
name|collectionWip
decl_stmt|;
DECL|field|RANDOM
specifier|static
specifier|final
name|Random
name|RANDOM
decl_stmt|;
static|static
block|{
comment|// We try to make things reproducible in the context of our tests by initializing the random instance
comment|// based on the current seed
name|String
name|seed
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"tests.seed"
argument_list|)
decl_stmt|;
if|if
condition|(
name|seed
operator|==
literal|null
condition|)
block|{
name|RANDOM
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|RANDOM
operator|=
operator|new
name|Random
argument_list|(
name|seed
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|OverseerCollectionMessageHandler
specifier|public
name|OverseerCollectionMessageHandler
parameter_list|(
name|ZkStateReader
name|zkStateReader
parameter_list|,
name|String
name|myId
parameter_list|,
specifier|final
name|ShardHandlerFactory
name|shardHandlerFactory
parameter_list|,
name|String
name|adminPath
parameter_list|,
name|Overseer
operator|.
name|Stats
name|stats
parameter_list|,
name|Overseer
name|overseer
parameter_list|,
name|OverseerNodePrioritizer
name|overseerPrioritizer
parameter_list|)
block|{
name|this
operator|.
name|zkStateReader
operator|=
name|zkStateReader
expr_stmt|;
name|this
operator|.
name|shardHandlerFactory
operator|=
name|shardHandlerFactory
expr_stmt|;
name|this
operator|.
name|adminPath
operator|=
name|adminPath
expr_stmt|;
name|this
operator|.
name|myId
operator|=
name|myId
expr_stmt|;
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
name|this
operator|.
name|overseer
operator|=
name|overseer
expr_stmt|;
name|this
operator|.
name|overseerPrioritizer
operator|=
name|overseerPrioritizer
expr_stmt|;
name|this
operator|.
name|collectionWip
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|processMessage
specifier|public
name|SolrResponse
name|processMessage
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|String
name|operation
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"OverseerCollectionProcessor.processMessage : "
operator|+
name|operation
operator|+
literal|" , "
operator|+
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|NamedList
name|results
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
try|try
block|{
comment|// force update the cluster state
name|zkStateReader
operator|.
name|updateClusterState
argument_list|()
expr_stmt|;
name|CollectionParams
operator|.
name|CollectionAction
name|action
init|=
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|get
argument_list|(
name|operation
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown operation:"
operator|+
name|operation
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|CREATE
case|:
name|createCollection
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|message
argument_list|,
name|results
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|deleteCollection
argument_list|(
name|message
argument_list|,
name|results
argument_list|)
expr_stmt|;
break|break;
case|case
name|RELOAD
case|:
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|RELOAD
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|collectionCmd
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|message
argument_list|,
name|params
argument_list|,
name|results
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
break|break;
case|case
name|CREATEALIAS
case|:
name|createAlias
argument_list|(
name|zkStateReader
operator|.
name|getAliases
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETEALIAS
case|:
name|deleteAlias
argument_list|(
name|zkStateReader
operator|.
name|getAliases
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPLITSHARD
case|:
name|splitShard
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|message
argument_list|,
name|results
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETESHARD
case|:
name|deleteShard
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|message
argument_list|,
name|results
argument_list|)
expr_stmt|;
break|break;
case|case
name|CREATESHARD
case|:
name|createShard
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|message
argument_list|,
name|results
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETEREPLICA
case|:
name|deleteReplica
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|message
argument_list|,
name|results
argument_list|)
expr_stmt|;
break|break;
case|case
name|MIGRATE
case|:
name|migrate
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|message
argument_list|,
name|results
argument_list|)
expr_stmt|;
break|break;
case|case
name|ADDROLE
case|:
name|processRoleCommand
argument_list|(
name|message
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|REMOVEROLE
case|:
name|processRoleCommand
argument_list|(
name|message
argument_list|,
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|ADDREPLICA
case|:
name|addReplica
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|message
argument_list|,
name|results
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERSEERSTATUS
case|:
name|getOverseerStatus
argument_list|(
name|message
argument_list|,
name|results
argument_list|)
expr_stmt|;
break|break;
case|case
name|CLUSTERSTATUS
case|:
comment|//TODO . deprecated. OCP does not need to do it .remove in a later release
operator|new
name|ClusterStatus
argument_list|(
name|zkStateReader
argument_list|,
name|message
argument_list|)
operator|.
name|getClusterStatus
argument_list|(
name|results
argument_list|)
expr_stmt|;
break|break;
case|case
name|ADDREPLICAPROP
case|:
name|processReplicaAddPropertyCommand
argument_list|(
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETEREPLICAPROP
case|:
name|processReplicaDeletePropertyCommand
argument_list|(
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|BALANCESHARDUNIQUE
case|:
name|balanceProperty
argument_list|(
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|REBALANCELEADERS
case|:
name|processRebalanceLeaders
argument_list|(
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|MODIFYCOLLECTION
case|:
name|overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|MIGRATESTATEFORMAT
case|:
name|migrateStateFormat
argument_list|(
name|message
argument_list|,
name|results
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown operation:"
operator|+
name|operation
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|collName
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"collection"
argument_list|)
decl_stmt|;
if|if
condition|(
name|collName
operator|==
literal|null
condition|)
name|collName
operator|=
name|message
operator|.
name|getStr
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|collName
operator|==
literal|null
condition|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Operation "
operator|+
name|operation
operator|+
literal|" failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Collection: "
operator|+
name|collName
operator|+
literal|" operation: "
operator|+
name|operation
operator|+
literal|" failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|add
argument_list|(
literal|"Operation "
operator|+
name|operation
operator|+
literal|" caused exception:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|SimpleOrderedMap
name|nl
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"msg"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"rspCode"
argument_list|,
name|e
operator|instanceof
name|SolrException
condition|?
operator|(
operator|(
name|SolrException
operator|)
name|e
operator|)
operator|.
name|code
argument_list|()
else|:
operator|-
literal|1
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"exception"
argument_list|,
name|nl
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|OverseerSolrResponse
argument_list|(
name|results
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|processRebalanceLeaders
specifier|private
name|void
name|processRebalanceLeaders
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|checkRequired
argument_list|(
name|message
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|CORE_NAME_PROP
argument_list|,
name|ELECTION_NODE_PROP
argument_list|,
name|NODE_NAME_PROP
argument_list|,
name|BASE_URL_PROP
argument_list|,
name|REJOIN_AT_HEAD_PROP
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|SHARD_ID_PROP
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|SHARD_ID_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|REJOIN_AT_HEAD_PROP
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|REJOIN_AT_HEAD_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|REJOINLEADERELECTION
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CORE_NAME_PROP
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|CORE_NAME_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|NODE_NAME_PROP
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|NODE_NAME_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|ELECTION_NODE_PROP
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|ELECTION_NODE_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|BASE_URL_PROP
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|BASE_URL_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|baseUrl
init|=
name|message
operator|.
name|getStr
argument_list|(
name|BASE_URL_PROP
argument_list|)
decl_stmt|;
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|sreq
operator|.
name|nodeName
operator|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
expr_stmt|;
comment|// yes, they must use same admin handler path everywhere...
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
name|adminPath
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|purpose
operator|=
name|ShardRequest
operator|.
name|PURPOSE_PRIVATE
expr_stmt|;
name|sreq
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|baseUrl
block|}
expr_stmt|;
name|sreq
operator|.
name|actualShards
operator|=
name|sreq
operator|.
name|shards
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|ShardHandler
name|shardHandler
init|=
name|shardHandlerFactory
operator|.
name|getShardHandler
argument_list|()
decl_stmt|;
name|shardHandler
operator|.
name|submit
argument_list|(
name|sreq
argument_list|,
name|baseUrl
argument_list|,
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|processReplicaAddPropertyCommand
specifier|private
name|void
name|processReplicaAddPropertyCommand
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|checkRequired
argument_list|(
name|message
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|REPLICA_PROP
argument_list|,
name|PROPERTY_PROP
argument_list|,
name|PROPERTY_VALUE_PROP
argument_list|)
expr_stmt|;
name|SolrZkClient
name|zkClient
init|=
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
decl_stmt|;
name|DistributedQueue
name|inQueue
init|=
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|ADDREPLICAPROP
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|putAll
argument_list|(
name|message
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
decl_stmt|;
name|inQueue
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|processReplicaDeletePropertyCommand
specifier|private
name|void
name|processReplicaDeletePropertyCommand
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|checkRequired
argument_list|(
name|message
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|REPLICA_PROP
argument_list|,
name|PROPERTY_PROP
argument_list|)
expr_stmt|;
name|SolrZkClient
name|zkClient
init|=
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
decl_stmt|;
name|DistributedQueue
name|inQueue
init|=
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|DELETEREPLICAPROP
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|putAll
argument_list|(
name|message
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
decl_stmt|;
name|inQueue
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|balanceProperty
specifier|private
name|void
name|balanceProperty
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|message
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
argument_list|)
operator|||
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|message
operator|.
name|getStr
argument_list|(
name|PROPERTY_PROP
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"The '"
operator|+
name|COLLECTION_PROP
operator|+
literal|"' and '"
operator|+
name|PROPERTY_PROP
operator|+
literal|"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken"
argument_list|)
throw|;
block|}
name|SolrZkClient
name|zkClient
init|=
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
decl_stmt|;
name|DistributedQueue
name|inQueue
init|=
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|BALANCESHARDUNIQUE
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|putAll
argument_list|(
name|message
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|inQueue
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getOverseerStatus
specifier|private
name|void
name|getOverseerStatus
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|leaderNode
init|=
name|OverseerProcessor
operator|.
name|getLeaderNode
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"leader"
argument_list|,
name|leaderNode
argument_list|)
expr_stmt|;
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|getData
argument_list|(
literal|"/overseer/queue"
argument_list|,
literal|null
argument_list|,
name|stat
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"overseer_queue_size"
argument_list|,
name|stat
operator|.
name|getNumChildren
argument_list|()
argument_list|)
expr_stmt|;
name|stat
operator|=
operator|new
name|Stat
argument_list|()
expr_stmt|;
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|getData
argument_list|(
literal|"/overseer/queue-work"
argument_list|,
literal|null
argument_list|,
name|stat
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"overseer_work_queue_size"
argument_list|,
name|stat
operator|.
name|getNumChildren
argument_list|()
argument_list|)
expr_stmt|;
name|stat
operator|=
operator|new
name|Stat
argument_list|()
expr_stmt|;
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|getData
argument_list|(
literal|"/overseer/collection-queue-work"
argument_list|,
literal|null
argument_list|,
name|stat
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"overseer_collection_queue_size"
argument_list|,
name|stat
operator|.
name|getNumChildren
argument_list|()
argument_list|)
expr_stmt|;
name|NamedList
name|overseerStats
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|NamedList
name|collectionStats
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|NamedList
name|stateUpdateQueueStats
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|NamedList
name|workQueueStats
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|NamedList
name|collectionQueueStats
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Overseer
operator|.
name|Stat
argument_list|>
name|entry
range|:
name|stats
operator|.
name|getStats
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|lst
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"collection_"
argument_list|)
condition|)
block|{
name|collectionStats
operator|.
name|add
argument_list|(
name|key
operator|.
name|substring
argument_list|(
literal|11
argument_list|)
argument_list|,
name|lst
argument_list|)
expr_stmt|;
name|int
name|successes
init|=
name|stats
operator|.
name|getSuccessCount
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|errors
init|=
name|stats
operator|.
name|getErrorCount
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"requests"
argument_list|,
name|successes
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"errors"
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Overseer
operator|.
name|FailedOp
argument_list|>
name|failureDetails
init|=
name|stats
operator|.
name|getFailureDetails
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|failureDetails
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|>
name|failures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Overseer
operator|.
name|FailedOp
name|failedOp
range|:
name|failureDetails
control|)
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|fail
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
name|fail
operator|.
name|add
argument_list|(
literal|"request"
argument_list|,
name|failedOp
operator|.
name|req
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|fail
operator|.
name|add
argument_list|(
literal|"response"
argument_list|,
name|failedOp
operator|.
name|resp
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
name|failures
operator|.
name|add
argument_list|(
name|fail
argument_list|)
expr_stmt|;
block|}
name|lst
operator|.
name|add
argument_list|(
literal|"recent_failures"
argument_list|,
name|failures
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"/overseer/queue_"
argument_list|)
condition|)
block|{
name|stateUpdateQueueStats
operator|.
name|add
argument_list|(
name|key
operator|.
name|substring
argument_list|(
literal|16
argument_list|)
argument_list|,
name|lst
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"/overseer/queue-work_"
argument_list|)
condition|)
block|{
name|workQueueStats
operator|.
name|add
argument_list|(
name|key
operator|.
name|substring
argument_list|(
literal|21
argument_list|)
argument_list|,
name|lst
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"/overseer/collection-queue-work_"
argument_list|)
condition|)
block|{
name|collectionQueueStats
operator|.
name|add
argument_list|(
name|key
operator|.
name|substring
argument_list|(
literal|32
argument_list|)
argument_list|,
name|lst
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// overseer stats
name|overseerStats
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|lst
argument_list|)
expr_stmt|;
name|int
name|successes
init|=
name|stats
operator|.
name|getSuccessCount
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|errors
init|=
name|stats
operator|.
name|getErrorCount
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"requests"
argument_list|,
name|successes
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"errors"
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
name|Timer
name|timer
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|requestTime
decl_stmt|;
name|Snapshot
name|snapshot
init|=
name|timer
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"totalTime"
argument_list|,
name|timer
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"avgRequestsPerMinute"
argument_list|,
name|timer
operator|.
name|getMeanRate
argument_list|()
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"5minRateRequestsPerMinute"
argument_list|,
name|timer
operator|.
name|getFiveMinuteRate
argument_list|()
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"15minRateRequestsPerMinute"
argument_list|,
name|timer
operator|.
name|getFifteenMinuteRate
argument_list|()
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"avgTimePerRequest"
argument_list|,
name|timer
operator|.
name|getMean
argument_list|()
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"medianRequestTime"
argument_list|,
name|snapshot
operator|.
name|getMedian
argument_list|()
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"75thPctlRequestTime"
argument_list|,
name|snapshot
operator|.
name|get75thPercentile
argument_list|()
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"95thPctlRequestTime"
argument_list|,
name|snapshot
operator|.
name|get95thPercentile
argument_list|()
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"99thPctlRequestTime"
argument_list|,
name|snapshot
operator|.
name|get99thPercentile
argument_list|()
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"999thPctlRequestTime"
argument_list|,
name|snapshot
operator|.
name|get999thPercentile
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|add
argument_list|(
literal|"overseer_operations"
argument_list|,
name|overseerStats
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"collection_operations"
argument_list|,
name|collectionStats
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"overseer_queue"
argument_list|,
name|stateUpdateQueueStats
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"overseer_internal_queue"
argument_list|,
name|workQueueStats
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"collection_queue"
argument_list|,
name|collectionQueueStats
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getClusterStatus
specifier|private
name|void
name|getClusterStatus
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
comment|// read aliases
name|Aliases
name|aliases
init|=
name|zkStateReader
operator|.
name|getAliases
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|collectionVsAliases
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aliasVsCollections
init|=
name|aliases
operator|.
name|getCollectionAliasMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|aliasVsCollections
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|aliasVsCollections
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|colls
init|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|String
name|alias
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|coll
range|:
name|colls
control|)
block|{
if|if
condition|(
name|collection
operator|==
literal|null
operator|||
name|collection
operator|.
name|equals
argument_list|(
name|coll
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|collectionVsAliases
operator|.
name|get
argument_list|(
name|coll
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|collectionVsAliases
operator|.
name|put
argument_list|(
name|coll
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|Map
name|roles
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|exists
argument_list|(
name|ZkStateReader
operator|.
name|ROLES
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|roles
operator|=
operator|(
name|Map
operator|)
name|Utils
operator|.
name|fromJSON
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|getData
argument_list|(
name|ZkStateReader
operator|.
name|ROLES
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// convert cluster state into a map of writable types
name|byte
index|[]
name|bytes
init|=
name|Utils
operator|.
name|toJSON
argument_list|(
name|clusterState
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|stateMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|Utils
operator|.
name|fromJSON
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|collections
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|routeKey
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ShardParams
operator|.
name|_ROUTE_
argument_list|)
decl_stmt|;
name|String
name|shard
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|collections
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|clusterState
operator|.
name|getCollections
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collections
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
name|NamedList
argument_list|<
name|Object
argument_list|>
name|collectionProps
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|collections
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collectionStatus
init|=
literal|null
decl_stmt|;
name|DocCollection
name|clusterStateCollection
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|requestedShards
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|routeKey
operator|!=
literal|null
condition|)
block|{
name|DocRouter
name|router
init|=
name|clusterStateCollection
operator|.
name|getRouter
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Slice
argument_list|>
name|slices
init|=
name|router
operator|.
name|getSearchSlices
argument_list|(
name|routeKey
argument_list|,
literal|null
argument_list|,
name|clusterStateCollection
argument_list|)
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|slices
control|)
block|{
name|requestedShards
operator|.
name|add
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|shard
operator|!=
literal|null
condition|)
block|{
name|requestedShards
operator|.
name|add
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clusterStateCollection
operator|.
name|getStateFormat
argument_list|()
operator|>
literal|1
condition|)
block|{
name|bytes
operator|=
name|Utils
operator|.
name|toJSON
argument_list|(
name|clusterStateCollection
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|docCollection
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|Utils
operator|.
name|fromJSON
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|collectionStatus
operator|=
name|getCollectionStatus
argument_list|(
name|docCollection
argument_list|,
name|name
argument_list|,
name|requestedShards
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collectionStatus
operator|=
name|getCollectionStatus
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|stateMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
name|name
argument_list|,
name|requestedShards
argument_list|)
expr_stmt|;
block|}
name|collectionStatus
operator|.
name|put
argument_list|(
literal|"znodeVersion"
argument_list|,
name|clusterStateCollection
operator|.
name|getZNodeVersion
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|collectionVsAliases
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
operator|&&
operator|!
name|collectionVsAliases
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|collectionStatus
operator|.
name|put
argument_list|(
literal|"aliases"
argument_list|,
name|collectionVsAliases
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|configName
init|=
name|zkStateReader
operator|.
name|readConfigName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|collectionStatus
operator|.
name|put
argument_list|(
literal|"configName"
argument_list|,
name|configName
argument_list|)
expr_stmt|;
name|collectionProps
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|collectionStatus
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|getChildren
argument_list|(
name|ZkStateReader
operator|.
name|LIVE_NODES_ZKNODE
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// now we need to walk the collectionProps tree to cross-check replica state with live nodes
name|crossCheckReplicaStateWithLiveNodes
argument_list|(
name|liveNodes
argument_list|,
name|collectionProps
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|clusterStatus
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
name|clusterStatus
operator|.
name|add
argument_list|(
literal|"collections"
argument_list|,
name|collectionProps
argument_list|)
expr_stmt|;
comment|// read cluster properties
name|Map
name|clusterProps
init|=
name|zkStateReader
operator|.
name|getClusterProps
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterProps
operator|!=
literal|null
operator|&&
operator|!
name|clusterProps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clusterStatus
operator|.
name|add
argument_list|(
literal|"properties"
argument_list|,
name|clusterProps
argument_list|)
expr_stmt|;
block|}
comment|// add the alias map too
if|if
condition|(
name|aliasVsCollections
operator|!=
literal|null
operator|&&
operator|!
name|aliasVsCollections
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clusterStatus
operator|.
name|add
argument_list|(
literal|"aliases"
argument_list|,
name|aliasVsCollections
argument_list|)
expr_stmt|;
block|}
comment|// add the roles map
if|if
condition|(
name|roles
operator|!=
literal|null
condition|)
block|{
name|clusterStatus
operator|.
name|add
argument_list|(
literal|"roles"
argument_list|,
name|roles
argument_list|)
expr_stmt|;
block|}
comment|// add live_nodes
name|clusterStatus
operator|.
name|add
argument_list|(
literal|"live_nodes"
argument_list|,
name|liveNodes
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"cluster"
argument_list|,
name|clusterStatus
argument_list|)
expr_stmt|;
block|}
comment|/**    * Walks the tree of collection status to verify that any replicas not reporting a "down" status is    * on a live node, if any replicas reporting their status as "active" but the node is not live is    * marked as "down"; used by CLUSTERSTATUS.    * @param liveNodes List of currently live node names.    * @param collectionProps Map of collection status information pulled directly from ZooKeeper.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|crossCheckReplicaStateWithLiveNodes
specifier|protected
name|void
name|crossCheckReplicaStateWithLiveNodes
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|liveNodes
parameter_list|,
name|NamedList
argument_list|<
name|Object
argument_list|>
name|collectionProps
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|colls
init|=
name|collectionProps
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|colls
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|next
init|=
name|colls
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|next
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|shards
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|collMap
operator|.
name|get
argument_list|(
literal|"shards"
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|nextShard
range|:
name|shards
operator|.
name|values
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|shardMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|nextShard
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|replicas
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|shardMap
operator|.
name|get
argument_list|(
literal|"replicas"
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|nextReplica
range|:
name|replicas
operator|.
name|values
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|replicaMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|nextReplica
decl_stmt|;
if|if
condition|(
name|Replica
operator|.
name|State
operator|.
name|getState
argument_list|(
operator|(
name|String
operator|)
name|replicaMap
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
argument_list|)
operator|!=
name|Replica
operator|.
name|State
operator|.
name|DOWN
condition|)
block|{
comment|// not down, so verify the node is live
name|String
name|node_name
init|=
operator|(
name|String
operator|)
name|replicaMap
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|liveNodes
operator|.
name|contains
argument_list|(
name|node_name
argument_list|)
condition|)
block|{
comment|// node is not live, so this replica is actually down
name|replicaMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|DOWN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|/**    * Get collection status from cluster state.    * Can return collection status by given shard name.    *    *    * @param collection collection map parsed from JSON-serialized {@link ClusterState}    * @param name  collection name    * @param requestedShards a set of shards to be returned in the status.    *                        An empty or null values indicates<b>all</b> shards.    * @return map of collection properties    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getCollectionStatus
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getCollectionStatus
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collection
parameter_list|,
name|String
name|name
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|requestedShards
parameter_list|)
block|{
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Collection: "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|requestedShards
operator|==
literal|null
operator|||
name|requestedShards
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|collection
return|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|shards
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|collection
operator|.
name|get
argument_list|(
literal|"shards"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|selected
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|selectedShard
range|:
name|requestedShards
control|)
block|{
if|if
condition|(
operator|!
name|shards
operator|.
name|containsKey
argument_list|(
name|selectedShard
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Collection: "
operator|+
name|name
operator|+
literal|" shard: "
operator|+
name|selectedShard
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|selected
operator|.
name|put
argument_list|(
name|selectedShard
argument_list|,
name|shards
operator|.
name|get
argument_list|(
name|selectedShard
argument_list|)
argument_list|)
expr_stmt|;
name|collection
operator|.
name|put
argument_list|(
literal|"shards"
argument_list|,
name|selected
argument_list|)
expr_stmt|;
block|}
return|return
name|collection
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|processRoleCommand
specifier|private
name|void
name|processRoleCommand
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|SolrZkClient
name|zkClient
init|=
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
decl_stmt|;
name|Map
name|roles
init|=
literal|null
decl_stmt|;
name|String
name|node
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
name|String
name|roleName
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"role"
argument_list|)
decl_stmt|;
name|boolean
name|nodeExists
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|nodeExists
operator|=
name|zkClient
operator|.
name|exists
argument_list|(
name|ZkStateReader
operator|.
name|ROLES
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|roles
operator|=
operator|(
name|Map
operator|)
name|Utils
operator|.
name|fromJSON
argument_list|(
name|zkClient
operator|.
name|getData
argument_list|(
name|ZkStateReader
operator|.
name|ROLES
argument_list|,
literal|null
argument_list|,
operator|new
name|Stat
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|roles
operator|=
operator|new
name|LinkedHashMap
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|List
name|nodeList
init|=
operator|(
name|List
operator|)
name|roles
operator|.
name|get
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeList
operator|==
literal|null
condition|)
name|roles
operator|.
name|put
argument_list|(
name|roleName
argument_list|,
name|nodeList
operator|=
operator|new
name|ArrayList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ADDROLE
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Overseer role added to {}"
argument_list|,
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nodeList
operator|.
name|contains
argument_list|(
name|node
argument_list|)
condition|)
name|nodeList
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|REMOVEROLE
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Overseer role removed from {}"
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|nodeList
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeExists
condition|)
block|{
name|zkClient
operator|.
name|setData
argument_list|(
name|ZkStateReader
operator|.
name|ROLES
argument_list|,
name|Utils
operator|.
name|toJSON
argument_list|(
name|roles
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|zkClient
operator|.
name|create
argument_list|(
name|ZkStateReader
operator|.
name|ROLES
argument_list|,
name|Utils
operator|.
name|toJSON
argument_list|(
name|roles
argument_list|)
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//if there are too many nodes this command may time out. And most likely dedicated
comment|// overseers are created when there are too many nodes  . So , do this operation in a separate thread
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|overseerPrioritizer
operator|.
name|prioritizeOverseerNodes
argument_list|(
name|myId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error in prioritizing Overseer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|deleteReplica
specifier|private
name|void
name|deleteReplica
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|checkRequired
argument_list|(
name|message
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|REPLICA_PROP
argument_list|)
expr_stmt|;
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
name|String
name|shard
init|=
name|message
operator|.
name|getStr
argument_list|(
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|String
name|replicaName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|REPLICA_PROP
argument_list|)
decl_stmt|;
name|DocCollection
name|coll
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|Slice
name|slice
init|=
name|coll
operator|.
name|getSlice
argument_list|(
name|shard
argument_list|)
decl_stmt|;
name|ShardHandler
name|shardHandler
init|=
name|shardHandlerFactory
operator|.
name|getShardHandler
argument_list|()
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Invalid shard name : "
operator|+
name|shard
operator|+
literal|" in collection : "
operator|+
name|collectionName
argument_list|)
throw|;
block|}
name|Replica
name|replica
init|=
name|slice
operator|.
name|getReplica
argument_list|(
name|replicaName
argument_list|)
decl_stmt|;
if|if
condition|(
name|replica
operator|==
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Replica
name|r
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
name|l
operator|.
name|add
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Invalid replica : "
operator|+
name|replicaName
operator|+
literal|" in shard/collection : "
operator|+
name|shard
operator|+
literal|"/"
operator|+
name|collectionName
operator|+
literal|" available replicas are "
operator|+
name|StrUtils
operator|.
name|join
argument_list|(
name|l
argument_list|,
literal|','
argument_list|)
argument_list|)
throw|;
block|}
comment|// If users are being safe and only want to remove a shard if it is down, they can specify onlyIfDown=true
comment|// on the command.
if|if
condition|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|message
operator|.
name|getStr
argument_list|(
name|ONLY_IF_DOWN
argument_list|)
argument_list|)
operator|&&
name|replica
operator|.
name|getState
argument_list|()
operator|!=
name|Replica
operator|.
name|State
operator|.
name|DOWN
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Attempted to remove replica : "
operator|+
name|collectionName
operator|+
literal|"/"
operator|+
name|shard
operator|+
literal|"/"
operator|+
name|replicaName
operator|+
literal|" with onlyIfDown='true', but state is '"
operator|+
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|String
name|baseUrl
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
decl_stmt|;
name|String
name|core
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
comment|// assume the core exists and try to unload it
name|Map
name|m
init|=
name|makeMap
argument_list|(
literal|"qt"
argument_list|,
name|adminPath
argument_list|,
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|UNLOAD
operator|.
name|toString
argument_list|()
argument_list|,
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
name|core
argument_list|,
name|CoreAdminParams
operator|.
name|DELETE_INSTANCE_DIR
argument_list|,
literal|"true"
argument_list|,
name|CoreAdminParams
operator|.
name|DELETE_DATA_DIR
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|sreq
operator|.
name|purpose
operator|=
literal|1
expr_stmt|;
name|sreq
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|baseUrl
block|}
expr_stmt|;
name|sreq
operator|.
name|actualShards
operator|=
name|sreq
operator|.
name|shards
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|(
operator|new
name|MapSolrParams
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|shardHandler
operator|.
name|submit
argument_list|(
name|sreq
argument_list|,
name|baseUrl
argument_list|,
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exception trying to unload core "
operator|+
name|sreq
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|collectShardResponses
argument_list|(
name|replica
operator|.
name|getState
argument_list|()
operator|!=
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
condition|?
operator|new
name|NamedList
argument_list|()
else|:
name|results
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|shardHandler
argument_list|)
expr_stmt|;
if|if
condition|(
name|waitForCoreNodeGone
argument_list|(
name|collectionName
argument_list|,
name|shard
argument_list|,
name|replicaName
argument_list|,
literal|5000
argument_list|)
condition|)
return|return;
comment|// check if the core unload removed the
comment|// corenode zk enry
name|deleteCoreNode
argument_list|(
name|collectionName
argument_list|,
name|replicaName
argument_list|,
name|replica
argument_list|,
name|core
argument_list|)
expr_stmt|;
comment|// try and ensure core info is removed from clusterstate
if|if
condition|(
name|waitForCoreNodeGone
argument_list|(
name|collectionName
argument_list|,
name|shard
argument_list|,
name|replicaName
argument_list|,
literal|30000
argument_list|)
condition|)
return|return;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not  remove replica : "
operator|+
name|collectionName
operator|+
literal|"/"
operator|+
name|shard
operator|+
literal|"/"
operator|+
name|replicaName
argument_list|)
throw|;
block|}
DECL|method|waitForCoreNodeGone
specifier|private
name|boolean
name|waitForCoreNodeGone
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|shard
parameter_list|,
name|String
name|replicaName
parameter_list|,
name|int
name|timeoutms
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|TimeOut
name|timeout
init|=
operator|new
name|TimeOut
argument_list|(
name|timeoutms
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|boolean
name|deleted
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|timeout
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|DocCollection
name|docCollection
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|docCollection
operator|!=
literal|null
condition|)
block|{
name|Slice
name|slice
init|=
name|docCollection
operator|.
name|getSlice
argument_list|(
name|shard
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
operator|||
name|slice
operator|.
name|getReplica
argument_list|(
name|replicaName
argument_list|)
operator|==
literal|null
condition|)
block|{
name|deleted
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// Return true if either someone already deleted the collection/slice/replica.
if|if
condition|(
name|docCollection
operator|==
literal|null
operator|||
name|deleted
condition|)
break|break;
block|}
return|return
name|deleted
return|;
block|}
DECL|method|deleteCoreNode
specifier|private
name|void
name|deleteCoreNode
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|replicaName
parameter_list|,
name|Replica
name|replica
parameter_list|,
name|String
name|core
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|DELETECORE
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|core
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|,
name|replicaName
argument_list|)
decl_stmt|;
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkRequired
specifier|private
name|void
name|checkRequired
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|String
modifier|...
name|props
parameter_list|)
block|{
for|for
control|(
name|String
name|prop
range|:
name|props
control|)
block|{
if|if
condition|(
name|message
operator|.
name|get
argument_list|(
name|prop
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|StrUtils
operator|.
name|join
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|props
argument_list|)
argument_list|,
literal|','
argument_list|)
operator|+
literal|" are required params"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|deleteCollection
specifier|private
name|void
name|deleteCollection
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|UNLOAD
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_INSTANCE_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_DATA_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|collectionCmd
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|message
argument_list|,
name|params
argument_list|,
name|results
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|DELETE
operator|.
name|toLower
argument_list|()
argument_list|,
name|NAME
argument_list|,
name|collection
argument_list|)
decl_stmt|;
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for a while until we don't see the collection
name|TimeOut
name|timeout
init|=
operator|new
name|TimeOut
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|timeout
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|removed
operator|=
operator|!
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|hasCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
if|if
condition|(
name|removed
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// just a bit of time so it's more likely other
comment|// readers see on return
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|removed
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not fully remove collection: "
operator|+
name|collection
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|exists
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|clean
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Cleaning up collection in zk was interrupted:"
operator|+
name|collection
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Problem cleaning up collection in zk:"
operator|+
name|collection
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|migrateStateFormat
specifier|private
name|void
name|migrateStateFormat
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
name|boolean
name|firstLoop
init|=
literal|true
decl_stmt|;
comment|// wait for a while until the state format changes
name|TimeOut
name|timeout
init|=
operator|new
name|TimeOut
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|timeout
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|DocCollection
name|collection
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Collection: "
operator|+
name|collectionName
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|collection
operator|.
name|getStateFormat
argument_list|()
operator|==
literal|2
condition|)
block|{
comment|// Done.
name|results
operator|.
name|add
argument_list|(
literal|"success"
argument_list|,
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|firstLoop
condition|)
block|{
comment|// Actually queue the migration command.
name|firstLoop
operator|=
literal|false
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|MIGRATESTATEFORMAT
operator|.
name|toLower
argument_list|()
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|)
decl_stmt|;
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not migrate state format for collection: "
operator|+
name|collectionName
argument_list|)
throw|;
block|}
DECL|method|createAlias
specifier|private
name|void
name|createAlias
parameter_list|(
name|Aliases
name|aliases
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|String
name|aliasName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
name|String
name|collections
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"collections"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|newAliasesMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newCollectionAliasesMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prevColAliases
init|=
name|aliases
operator|.
name|getCollectionAliasMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|prevColAliases
operator|!=
literal|null
condition|)
block|{
name|newCollectionAliasesMap
operator|.
name|putAll
argument_list|(
name|prevColAliases
argument_list|)
expr_stmt|;
block|}
name|newCollectionAliasesMap
operator|.
name|put
argument_list|(
name|aliasName
argument_list|,
name|collections
argument_list|)
expr_stmt|;
name|newAliasesMap
operator|.
name|put
argument_list|(
literal|"collection"
argument_list|,
name|newCollectionAliasesMap
argument_list|)
expr_stmt|;
name|Aliases
name|newAliases
init|=
operator|new
name|Aliases
argument_list|(
name|newAliasesMap
argument_list|)
decl_stmt|;
name|byte
index|[]
name|jsonBytes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|newAliases
operator|.
name|collectionAliasSize
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// only sub map right now
name|jsonBytes
operator|=
name|Utils
operator|.
name|toJSON
argument_list|(
name|newAliases
operator|.
name|getAliasMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|setData
argument_list|(
name|ZkStateReader
operator|.
name|ALIASES
argument_list|,
name|jsonBytes
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkForAlias
argument_list|(
name|aliasName
argument_list|,
name|collections
argument_list|)
expr_stmt|;
comment|// some fudge for other nodes
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|checkForAlias
specifier|private
name|void
name|checkForAlias
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|TimeOut
name|timeout
init|=
operator|new
name|TimeOut
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Aliases
name|aliases
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|!
name|timeout
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|aliases
operator|=
name|zkStateReader
operator|.
name|getAliases
argument_list|()
expr_stmt|;
name|String
name|collections
init|=
name|aliases
operator|.
name|getCollectionAlias
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|collections
operator|!=
literal|null
operator|&&
name|collections
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|success
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Timeout waiting to be notified of Alias change..."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkForAliasAbsence
specifier|private
name|void
name|checkForAliasAbsence
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|TimeOut
name|timeout
init|=
operator|new
name|TimeOut
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Aliases
name|aliases
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|!
name|timeout
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|aliases
operator|=
name|zkStateReader
operator|.
name|getAliases
argument_list|()
expr_stmt|;
name|String
name|collections
init|=
name|aliases
operator|.
name|getCollectionAlias
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|collections
operator|==
literal|null
condition|)
block|{
name|success
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Timeout waiting to be notified of Alias change..."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteAlias
specifier|private
name|void
name|deleteAlias
parameter_list|(
name|Aliases
name|aliases
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|String
name|aliasName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|newAliasesMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newCollectionAliasesMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|newCollectionAliasesMap
operator|.
name|putAll
argument_list|(
name|aliases
operator|.
name|getCollectionAliasMap
argument_list|()
argument_list|)
expr_stmt|;
name|newCollectionAliasesMap
operator|.
name|remove
argument_list|(
name|aliasName
argument_list|)
expr_stmt|;
name|newAliasesMap
operator|.
name|put
argument_list|(
literal|"collection"
argument_list|,
name|newCollectionAliasesMap
argument_list|)
expr_stmt|;
name|Aliases
name|newAliases
init|=
operator|new
name|Aliases
argument_list|(
name|newAliasesMap
argument_list|)
decl_stmt|;
name|byte
index|[]
name|jsonBytes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|newAliases
operator|.
name|collectionAliasSize
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// only sub map right now
name|jsonBytes
operator|=
name|Utils
operator|.
name|toJSON
argument_list|(
name|newAliases
operator|.
name|getAliasMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|setData
argument_list|(
name|ZkStateReader
operator|.
name|ALIASES
argument_list|,
name|jsonBytes
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkForAliasAbsence
argument_list|(
name|aliasName
argument_list|)
expr_stmt|;
comment|// some fudge for other nodes
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createShard
specifier|private
name|boolean
name|createShard
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
name|String
name|sliceName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Create shard invoked: {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|collectionName
operator|==
literal|null
operator|||
name|sliceName
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"'collection' and 'shard' are required parameters"
argument_list|)
throw|;
name|int
name|numSlices
init|=
literal|1
decl_stmt|;
name|ShardHandler
name|shardHandler
init|=
name|shardHandlerFactory
operator|.
name|getShardHandler
argument_list|()
decl_stmt|;
name|DocCollection
name|collection
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|int
name|repFactor
init|=
name|message
operator|.
name|getInt
argument_list|(
name|REPLICATION_FACTOR
argument_list|,
name|collection
operator|.
name|getInt
argument_list|(
name|REPLICATION_FACTOR
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|createNodeSetStr
init|=
name|message
operator|.
name|getStr
argument_list|(
name|CREATE_NODE_SET
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ReplicaCount
argument_list|>
name|sortedNodeList
init|=
name|getNodesForNewReplicas
argument_list|(
name|clusterState
argument_list|,
name|collectionName
argument_list|,
name|sliceName
argument_list|,
name|repFactor
argument_list|,
name|createNodeSetStr
argument_list|,
name|overseer
operator|.
name|getZkController
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
argument_list|)
decl_stmt|;
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for a while until we see the shard
name|TimeOut
name|timeout
init|=
operator|new
name|TimeOut
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|boolean
name|created
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|timeout
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|created
operator|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
operator|.
name|getSlice
argument_list|(
name|sliceName
argument_list|)
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
name|created
condition|)
break|break;
block|}
if|if
condition|(
operator|!
name|created
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not fully create shard: "
operator|+
name|message
operator|.
name|getStr
argument_list|(
name|NAME
argument_list|)
argument_list|)
throw|;
name|String
name|configName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|COLL_CONF
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|repFactor
condition|;
name|j
operator|++
control|)
block|{
name|String
name|nodeName
init|=
name|sortedNodeList
operator|.
name|get
argument_list|(
operator|(
operator|(
name|j
operator|-
literal|1
operator|)
operator|)
operator|%
name|sortedNodeList
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|nodeName
decl_stmt|;
name|String
name|shardName
init|=
name|collectionName
operator|+
literal|"_"
operator|+
name|sliceName
operator|+
literal|"_replica"
operator|+
name|j
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Creating shard "
operator|+
name|shardName
operator|+
literal|" as part of slice "
operator|+
name|sliceName
operator|+
literal|" of collection "
operator|+
name|collectionName
operator|+
literal|" on "
operator|+
name|nodeName
argument_list|)
expr_stmt|;
comment|// Need to create new params for each request
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|shardName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|COLL_CONF
argument_list|,
name|configName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|SHARD
argument_list|,
name|sliceName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
name|numSlices
argument_list|)
expr_stmt|;
name|addPropertyParams
argument_list|(
name|message
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
name|adminPath
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|purpose
operator|=
literal|1
expr_stmt|;
name|String
name|replica
init|=
name|zkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
name|sreq
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|replica
block|}
expr_stmt|;
name|sreq
operator|.
name|actualShards
operator|=
name|sreq
operator|.
name|shards
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|shardHandler
operator|.
name|submit
argument_list|(
name|sreq
argument_list|,
name|replica
argument_list|,
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
block|}
name|processResponses
argument_list|(
name|results
argument_list|,
name|shardHandler
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Finished create command on all shards for collection: "
operator|+
name|collectionName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|splitShard
specifier|private
name|boolean
name|splitShard
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
block|{
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"collection"
argument_list|)
decl_stmt|;
name|String
name|slice
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Split shard invoked"
argument_list|)
expr_stmt|;
name|String
name|splitKey
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"split.key"
argument_list|)
decl_stmt|;
name|ShardHandler
name|shardHandler
init|=
name|shardHandlerFactory
operator|.
name|getShardHandler
argument_list|()
decl_stmt|;
name|DocCollection
name|collection
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|DocRouter
name|router
init|=
name|collection
operator|.
name|getRouter
argument_list|()
operator|!=
literal|null
condition|?
name|collection
operator|.
name|getRouter
argument_list|()
else|:
name|DocRouter
operator|.
name|DEFAULT
decl_stmt|;
name|Slice
name|parentSlice
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|router
operator|instanceof
name|CompositeIdRouter
condition|)
block|{
name|Collection
argument_list|<
name|Slice
argument_list|>
name|searchSlices
init|=
name|router
operator|.
name|getSearchSlicesSingle
argument_list|(
name|splitKey
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|()
argument_list|,
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|searchSlices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unable to find an active shard for split.key: "
operator|+
name|splitKey
argument_list|)
throw|;
block|}
if|if
condition|(
name|searchSlices
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Splitting a split.key: "
operator|+
name|splitKey
operator|+
literal|" which spans multiple shards is not supported"
argument_list|)
throw|;
block|}
name|parentSlice
operator|=
name|searchSlices
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|slice
operator|=
name|parentSlice
operator|.
name|getName
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Split by route.key: {}, parent shard is: {} "
argument_list|,
name|splitKey
argument_list|,
name|slice
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Split by route key can only be used with CompositeIdRouter or subclass. Found router: "
operator|+
name|router
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|parentSlice
operator|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collectionName
argument_list|,
name|slice
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentSlice
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|clusterState
operator|.
name|hasCollection
argument_list|(
name|collectionName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No shard with the specified name exists: "
operator|+
name|slice
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No collection with the specified name exists: "
operator|+
name|collectionName
argument_list|)
throw|;
block|}
block|}
comment|// find the leader for the shard
name|Replica
name|parentShardLeader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parentShardLeader
operator|=
name|zkStateReader
operator|.
name|getLeaderRetry
argument_list|(
name|collectionName
argument_list|,
name|slice
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|DocRouter
operator|.
name|Range
name|range
init|=
name|parentSlice
operator|.
name|getRange
argument_list|()
decl_stmt|;
if|if
condition|(
name|range
operator|==
literal|null
condition|)
block|{
name|range
operator|=
operator|new
name|PlainIdRouter
argument_list|()
operator|.
name|fullRange
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|DocRouter
operator|.
name|Range
argument_list|>
name|subRanges
init|=
literal|null
decl_stmt|;
name|String
name|rangesStr
init|=
name|message
operator|.
name|getStr
argument_list|(
name|CoreAdminParams
operator|.
name|RANGES
argument_list|)
decl_stmt|;
if|if
condition|(
name|rangesStr
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|ranges
init|=
name|rangesStr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|ranges
operator|.
name|length
operator|==
literal|0
operator|||
name|ranges
operator|.
name|length
operator|==
literal|1
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"There must be at least two ranges specified to split a shard"
argument_list|)
throw|;
block|}
else|else
block|{
name|subRanges
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ranges
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ranges
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|r
init|=
name|ranges
index|[
name|i
index|]
decl_stmt|;
try|try
block|{
name|subRanges
operator|.
name|add
argument_list|(
name|DocRouter
operator|.
name|DEFAULT
operator|.
name|fromString
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Exception in parsing hexadecimal hash range: "
operator|+
name|r
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|subRanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isSubsetOf
argument_list|(
name|range
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Specified hash range: "
operator|+
name|r
operator|+
literal|" is not a subset of parent shard's range: "
operator|+
name|range
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|List
argument_list|<
name|DocRouter
operator|.
name|Range
argument_list|>
name|temp
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|subRanges
argument_list|)
decl_stmt|;
comment|// copy to preserve original order
name|Collections
operator|.
name|sort
argument_list|(
name|temp
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|range
operator|.
name|equals
argument_list|(
operator|new
name|DocRouter
operator|.
name|Range
argument_list|(
name|temp
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|min
argument_list|,
name|temp
operator|.
name|get
argument_list|(
name|temp
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|max
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Specified hash ranges: "
operator|+
name|rangesStr
operator|+
literal|" do not cover the entire range of parent shard: "
operator|+
name|range
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|temp
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|temp
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|max
operator|+
literal|1
operator|!=
name|temp
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|min
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Specified hash ranges: "
operator|+
name|rangesStr
operator|+
literal|" either overlap with each other or "
operator|+
literal|"do not cover the entire range of parent shard: "
operator|+
name|range
argument_list|)
throw|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|splitKey
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|router
operator|instanceof
name|CompositeIdRouter
condition|)
block|{
name|CompositeIdRouter
name|compositeIdRouter
init|=
operator|(
name|CompositeIdRouter
operator|)
name|router
decl_stmt|;
name|subRanges
operator|=
name|compositeIdRouter
operator|.
name|partitionRangeByKey
argument_list|(
name|splitKey
argument_list|,
name|range
argument_list|)
expr_stmt|;
if|if
condition|(
name|subRanges
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"The split.key: "
operator|+
name|splitKey
operator|+
literal|" has a hash range that is exactly equal to hash range of shard: "
operator|+
name|slice
argument_list|)
throw|;
block|}
for|for
control|(
name|DocRouter
operator|.
name|Range
name|subRange
range|:
name|subRanges
control|)
block|{
if|if
condition|(
name|subRange
operator|.
name|min
operator|==
name|subRange
operator|.
name|max
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"The split.key: "
operator|+
name|splitKey
operator|+
literal|" must be a compositeId"
argument_list|)
throw|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Partitioning parent shard "
operator|+
name|slice
operator|+
literal|" range: "
operator|+
name|parentSlice
operator|.
name|getRange
argument_list|()
operator|+
literal|" yields: "
operator|+
name|subRanges
argument_list|)
expr_stmt|;
name|rangesStr
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subRanges
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DocRouter
operator|.
name|Range
name|subRange
init|=
name|subRanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|rangesStr
operator|+=
name|subRange
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|subRanges
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
name|rangesStr
operator|+=
literal|','
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// todo: fixed to two partitions?
name|subRanges
operator|=
name|router
operator|.
name|partitionRange
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|subSlices
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|subRanges
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|subShardNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|subRanges
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|nodeName
init|=
name|parentShardLeader
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subRanges
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|subSlice
init|=
name|slice
operator|+
literal|"_"
operator|+
name|i
decl_stmt|;
name|subSlices
operator|.
name|add
argument_list|(
name|subSlice
argument_list|)
expr_stmt|;
name|String
name|subShardName
init|=
name|collectionName
operator|+
literal|"_"
operator|+
name|subSlice
operator|+
literal|"_replica1"
decl_stmt|;
name|subShardNames
operator|.
name|add
argument_list|(
name|subShardName
argument_list|)
expr_stmt|;
name|Slice
name|oSlice
init|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collectionName
argument_list|,
name|subSlice
argument_list|)
decl_stmt|;
if|if
condition|(
name|oSlice
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Slice
operator|.
name|State
name|state
init|=
name|oSlice
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|Slice
operator|.
name|State
operator|.
name|ACTIVE
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Sub-shard: "
operator|+
name|subSlice
operator|+
literal|" exists in active state. Aborting split shard."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|Slice
operator|.
name|State
operator|.
name|CONSTRUCTION
operator|||
name|state
operator|==
name|Slice
operator|.
name|State
operator|.
name|RECOVERY
condition|)
block|{
comment|// delete the shards
for|for
control|(
name|String
name|sub
range|:
name|subSlices
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Sub-shard: {} already exists therefore requesting its deletion"
argument_list|,
name|sub
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
literal|"deleteshard"
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|SHARD_ID_PROP
argument_list|,
name|sub
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
decl_stmt|;
try|try
block|{
name|deleteShard
argument_list|(
name|clusterState
argument_list|,
name|m
argument_list|,
operator|new
name|NamedList
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unable to delete already existing sub shard: "
operator|+
name|sub
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
comment|// do not abort splitshard if the unloading fails
comment|// this can happen because the replicas created previously may be down
comment|// the only side effect of this is that the sub shard may end up having more replicas than we want
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|shardHandler
argument_list|)
expr_stmt|;
specifier|final
name|String
name|asyncId
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ASYNC
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subRanges
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|subSlice
init|=
name|subSlices
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|subShardName
init|=
name|subShardNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DocRouter
operator|.
name|Range
name|subRange
init|=
name|subRanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Creating slice "
operator|+
name|subSlice
operator|+
literal|" of collection "
operator|+
name|collectionName
operator|+
literal|" on "
operator|+
name|nodeName
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|CREATESHARD
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
name|subSlice
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_RANGE_PROP
argument_list|,
name|subRange
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_STATE_PROP
argument_list|,
name|Slice
operator|.
name|State
operator|.
name|CONSTRUCTION
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_PARENT_PROP
argument_list|,
name|parentSlice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|DistributedQueue
name|inQueue
init|=
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
decl_stmt|;
name|inQueue
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait until we are able to see the new shard in cluster state
name|waitForNewShard
argument_list|(
name|collectionName
argument_list|,
name|subSlice
argument_list|)
expr_stmt|;
comment|// refresh cluster state
name|clusterState
operator|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Adding replica "
operator|+
name|subShardName
operator|+
literal|" as part of slice "
operator|+
name|subSlice
operator|+
literal|" of collection "
operator|+
name|collectionName
operator|+
literal|" on "
operator|+
name|nodeName
argument_list|)
expr_stmt|;
name|propMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|ADDREPLICA
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|SHARD_ID_PROP
argument_list|,
name|subSlice
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
literal|"node"
argument_list|,
name|nodeName
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|subShardName
argument_list|)
expr_stmt|;
comment|// copy over property params:
for|for
control|(
name|String
name|key
range|:
name|message
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|COLL_PROP_PREFIX
argument_list|)
condition|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add async param
if|if
condition|(
name|asyncId
operator|!=
literal|null
condition|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|ASYNC
argument_list|,
name|asyncId
argument_list|)
expr_stmt|;
block|}
name|addReplica
argument_list|(
name|clusterState
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"SPLITSHARD failed to create subshard leaders"
argument_list|,
name|shardHandler
argument_list|)
expr_stmt|;
name|completeAsyncRequest
argument_list|(
name|asyncId
argument_list|,
name|requestMap
argument_list|,
name|results
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|subShardName
range|:
name|subShardNames
control|)
block|{
comment|// wait for parent leader to acknowledge the sub-shard core
name|log
operator|.
name|info
argument_list|(
literal|"Asking parent leader to wait for: "
operator|+
name|subShardName
operator|+
literal|" to be alive on: "
operator|+
name|nodeName
argument_list|)
expr_stmt|;
name|String
name|coreNodeName
init|=
name|waitForCoreNodeName
argument_list|(
name|collectionName
argument_list|,
name|nodeName
argument_list|,
name|subShardName
argument_list|)
decl_stmt|;
name|CoreAdminRequest
operator|.
name|WaitForState
name|cmd
init|=
operator|new
name|CoreAdminRequest
operator|.
name|WaitForState
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|setCoreName
argument_list|(
name|subShardName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setNodeName
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCoreNodeName
argument_list|(
name|coreNodeName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setState
argument_list|(
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCheckLive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setOnlyIfLeader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|p
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|cmd
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
name|sendShardRequest
argument_list|(
name|nodeName
argument_list|,
name|p
argument_list|,
name|shardHandler
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
block|}
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"SPLITSHARD timed out waiting for subshard leaders to come up"
argument_list|,
name|shardHandler
argument_list|)
expr_stmt|;
name|completeAsyncRequest
argument_list|(
name|asyncId
argument_list|,
name|requestMap
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Successfully created all sub-shards for collection "
operator|+
name|collectionName
operator|+
literal|" parent shard: "
operator|+
name|slice
operator|+
literal|" on: "
operator|+
name|parentShardLeader
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Splitting shard "
operator|+
name|parentShardLeader
operator|.
name|getName
argument_list|()
operator|+
literal|" as part of slice "
operator|+
name|slice
operator|+
literal|" of collection "
operator|+
name|collectionName
operator|+
literal|" on "
operator|+
name|parentShardLeader
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|SPLIT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
name|parentShardLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subShardNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|subShardName
init|=
name|subShardNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|CoreAdminParams
operator|.
name|TARGET_CORE
argument_list|,
name|subShardName
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|RANGES
argument_list|,
name|rangesStr
argument_list|)
expr_stmt|;
name|sendShardRequest
argument_list|(
name|parentShardLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|params
argument_list|,
name|shardHandler
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"SPLITSHARD failed to invoke SPLIT core admin command"
argument_list|,
name|shardHandler
argument_list|)
expr_stmt|;
name|completeAsyncRequest
argument_list|(
name|asyncId
argument_list|,
name|requestMap
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Index on shard: "
operator|+
name|nodeName
operator|+
literal|" split into two successfully"
argument_list|)
expr_stmt|;
comment|// apply buffered updates on sub-shards
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subShardNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|subShardName
init|=
name|subShardNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Applying buffered updates on : "
operator|+
name|subShardName
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|REQUESTAPPLYUPDATES
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|subShardName
argument_list|)
expr_stmt|;
name|sendShardRequest
argument_list|(
name|nodeName
argument_list|,
name|params
argument_list|,
name|shardHandler
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
block|}
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"SPLITSHARD failed while asking sub shard leaders to apply buffered updates"
argument_list|,
name|shardHandler
argument_list|)
expr_stmt|;
name|completeAsyncRequest
argument_list|(
name|asyncId
argument_list|,
name|requestMap
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Successfully applied buffered updates on : "
operator|+
name|subShardNames
argument_list|)
expr_stmt|;
comment|// Replica creation for the new Slices
comment|// look at the replication factor and see if it matches reality
comment|// if it does not, find best nodes to create more cores
comment|// TODO: Have replication factor decided in some other way instead of numShards for the parent
name|int
name|repFactor
init|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collectionName
argument_list|,
name|slice
argument_list|)
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// we need to look at every node and see how many cores it serves
comment|// add our new cores to existing nodes serving the least number of cores
comment|// but (for now) require that each core goes on a distinct node.
comment|// TODO: add smarter options that look at the current number of cores per
comment|// node?
comment|// for now we just go random
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|clusterState
operator|.
name|getLiveNodes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodeList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|nodeList
operator|.
name|addAll
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
comment|// TODO: Have maxShardsPerNode param for this operation?
comment|// Remove the node that hosts the parent shard for replica creation.
name|nodeList
operator|.
name|remove
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
comment|// TODO: change this to handle sharding a slice into> 2 sub-shards.
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|replicas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
operator|(
name|repFactor
operator|-
literal|1
operator|)
operator|*
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|subSlices
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodeList
argument_list|,
name|RANDOM
argument_list|)
expr_stmt|;
name|String
name|sliceName
init|=
name|subSlices
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|2
init|;
name|j
operator|<=
name|repFactor
condition|;
name|j
operator|++
control|)
block|{
name|String
name|subShardNodeName
init|=
name|nodeList
operator|.
name|get
argument_list|(
operator|(
name|repFactor
operator|*
operator|(
name|i
operator|-
literal|1
operator|)
operator|+
operator|(
name|j
operator|-
literal|2
operator|)
operator|)
operator|%
name|nodeList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|shardName
init|=
name|collectionName
operator|+
literal|"_"
operator|+
name|sliceName
operator|+
literal|"_replica"
operator|+
operator|(
name|j
operator|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Creating replica shard "
operator|+
name|shardName
operator|+
literal|" as part of slice "
operator|+
name|sliceName
operator|+
literal|" of collection "
operator|+
name|collectionName
operator|+
literal|" on "
operator|+
name|subShardNodeName
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|props
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|ADDREPLICA
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
name|sliceName
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|shardName
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|DOWN
operator|.
name|toString
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|zkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|subShardNodeName
argument_list|)
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|subShardNodeName
argument_list|)
decl_stmt|;
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|props
argument_list|)
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|ADDREPLICA
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|SHARD_ID_PROP
argument_list|,
name|sliceName
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
literal|"node"
argument_list|,
name|subShardNodeName
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|shardName
argument_list|)
expr_stmt|;
comment|// copy over property params:
for|for
control|(
name|String
name|key
range|:
name|message
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|COLL_PROP_PREFIX
argument_list|)
condition|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add async param
if|if
condition|(
name|asyncId
operator|!=
literal|null
condition|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|ASYNC
argument_list|,
name|asyncId
argument_list|)
expr_stmt|;
block|}
comment|// special flag param to instruct addReplica not to create the replica in cluster state again
name|propMap
operator|.
name|put
argument_list|(
name|SKIP_CREATE_REPLICA_IN_CLUSTER_STATE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|replicas
operator|.
name|add
argument_list|(
name|propMap
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we must set the slice state into recovery before actually creating the replica cores
comment|// this ensures that the logic inside Overseer to update sub-shard state to 'active'
comment|// always gets a chance to execute. See SOLR-7673
if|if
condition|(
name|repFactor
operator|==
literal|1
condition|)
block|{
comment|// switch sub shard states to 'active'
name|log
operator|.
name|info
argument_list|(
literal|"Replication factor is 1 so switching shard states"
argument_list|)
expr_stmt|;
name|DistributedQueue
name|inQueue
init|=
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|UPDATESHARDSTATE
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|slice
argument_list|,
name|Slice
operator|.
name|State
operator|.
name|INACTIVE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|subSlice
range|:
name|subSlices
control|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|subSlice
argument_list|,
name|Slice
operator|.
name|State
operator|.
name|ACTIVE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
decl_stmt|;
name|inQueue
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Requesting shard state be set to 'recovery'"
argument_list|)
expr_stmt|;
name|DistributedQueue
name|inQueue
init|=
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|UPDATESHARDSTATE
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|subSlice
range|:
name|subSlices
control|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|subSlice
argument_list|,
name|Slice
operator|.
name|State
operator|.
name|RECOVERY
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
decl_stmt|;
name|inQueue
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// now actually create replica cores on sub shard nodes
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|replica
range|:
name|replicas
control|)
block|{
name|addReplica
argument_list|(
name|clusterState
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|replica
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"SPLITSHARD failed to create subshard replicas"
argument_list|,
name|shardHandler
argument_list|)
expr_stmt|;
name|completeAsyncRequest
argument_list|(
name|asyncId
argument_list|,
name|requestMap
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Successfully created all replica shards for all sub-slices "
operator|+
name|subSlices
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|results
argument_list|,
name|slice
argument_list|,
name|parentShardLeader
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error executing split operation for collection: "
operator|+
name|collectionName
operator|+
literal|" parent shard: "
operator|+
name|slice
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|null
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|commit
specifier|private
name|void
name|commit
parameter_list|(
name|NamedList
name|results
parameter_list|,
name|String
name|slice
parameter_list|,
name|Replica
name|parentShardLeader
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Calling soft commit to make sub shard updates visible"
argument_list|)
expr_stmt|;
name|String
name|coreUrl
init|=
operator|new
name|ZkCoreNodeProps
argument_list|(
name|parentShardLeader
argument_list|)
operator|.
name|getCoreUrl
argument_list|()
decl_stmt|;
comment|// HttpShardHandler is hard coded to send a QueryRequest hence we go direct
comment|// and we force open a searcher so that we have documents to show upon switching states
name|UpdateResponse
name|updateResponse
init|=
literal|null
decl_stmt|;
try|try
block|{
name|updateResponse
operator|=
name|softCommit
argument_list|(
name|coreUrl
argument_list|)
expr_stmt|;
name|processResponse
argument_list|(
name|results
argument_list|,
literal|null
argument_list|,
name|coreUrl
argument_list|,
name|updateResponse
argument_list|,
name|slice
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|processResponse
argument_list|(
name|results
argument_list|,
name|e
argument_list|,
name|coreUrl
argument_list|,
name|updateResponse
argument_list|,
name|slice
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unable to call distrib softCommit on: "
operator|+
name|coreUrl
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|softCommit
specifier|static
name|UpdateResponse
name|softCommit
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
try|try
init|(
name|HttpSolrClient
name|client
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|url
argument_list|)
init|)
block|{
name|client
operator|.
name|setConnectionTimeout
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
name|client
operator|.
name|setSoTimeout
argument_list|(
literal|120000
argument_list|)
expr_stmt|;
name|UpdateRequest
name|ureq
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|ureq
operator|.
name|setParams
argument_list|(
operator|new
name|ModifiableSolrParams
argument_list|()
argument_list|)
expr_stmt|;
name|ureq
operator|.
name|setAction
argument_list|(
name|AbstractUpdateRequest
operator|.
name|ACTION
operator|.
name|COMMIT
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|ureq
operator|.
name|process
argument_list|(
name|client
argument_list|)
return|;
block|}
block|}
DECL|method|waitForCoreNodeName
specifier|private
name|String
name|waitForCoreNodeName
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|msgNodeName
parameter_list|,
name|String
name|msgCore
parameter_list|)
block|{
name|int
name|retryCount
init|=
literal|320
decl_stmt|;
while|while
condition|(
name|retryCount
operator|--
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slicesMap
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlicesMap
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|slicesMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Slice
name|slice
range|:
name|slicesMap
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
comment|// TODO: for really large clusters, we could 'index' on this
name|String
name|nodeName
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
decl_stmt|;
name|String
name|core
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeName
operator|.
name|equals
argument_list|(
name|msgNodeName
argument_list|)
operator|&&
name|core
operator|.
name|equals
argument_list|(
name|msgCore
argument_list|)
condition|)
block|{
return|return
name|replica
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not find coreNodeName"
argument_list|)
throw|;
block|}
DECL|method|waitForNewShard
specifier|private
name|void
name|waitForNewShard
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|sliceName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Waiting for slice {} of collection {} to be available"
argument_list|,
name|sliceName
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|RTimer
name|timer
init|=
operator|new
name|RTimer
argument_list|()
decl_stmt|;
name|int
name|retryCount
init|=
literal|320
decl_stmt|;
while|while
condition|(
name|retryCount
operator|--
operator|>
literal|0
condition|)
block|{
name|DocCollection
name|collection
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unable to find collection: "
operator|+
name|collectionName
operator|+
literal|" in clusterstate"
argument_list|)
throw|;
block|}
name|Slice
name|slice
init|=
name|collection
operator|.
name|getSlice
argument_list|(
name|sliceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Waited for {}ms for slice {} of collection {} to be available"
argument_list|,
name|timer
operator|.
name|getTime
argument_list|()
argument_list|,
name|sliceName
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
return|return;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|zkStateReader
operator|.
name|updateClusterState
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not find new slice "
operator|+
name|sliceName
operator|+
literal|" in collection "
operator|+
name|collectionName
operator|+
literal|" even after waiting for "
operator|+
name|timer
operator|.
name|getTime
argument_list|()
operator|+
literal|"ms"
argument_list|)
throw|;
block|}
DECL|method|collectShardResponses
specifier|private
name|void
name|collectShardResponses
parameter_list|(
name|NamedList
name|results
parameter_list|,
name|boolean
name|abortOnError
parameter_list|,
name|String
name|msgOnError
parameter_list|,
name|ShardHandler
name|shardHandler
parameter_list|)
block|{
name|ShardResponse
name|srsp
decl_stmt|;
do|do
block|{
name|srsp
operator|=
name|shardHandler
operator|.
name|takeCompletedOrError
argument_list|()
expr_stmt|;
if|if
condition|(
name|srsp
operator|!=
literal|null
condition|)
block|{
name|processResponse
argument_list|(
name|results
argument_list|,
name|srsp
argument_list|)
expr_stmt|;
name|Throwable
name|exception
init|=
name|srsp
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|abortOnError
operator|&&
name|exception
operator|!=
literal|null
condition|)
block|{
comment|// drain pending requests
while|while
condition|(
name|srsp
operator|!=
literal|null
condition|)
block|{
name|srsp
operator|=
name|shardHandler
operator|.
name|takeCompletedOrError
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|msgOnError
argument_list|,
name|exception
argument_list|)
throw|;
block|}
block|}
block|}
do|while
condition|(
name|srsp
operator|!=
literal|null
condition|)
do|;
block|}
DECL|method|deleteShard
specifier|private
name|void
name|deleteShard
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
block|{
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
name|String
name|sliceId
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Delete shard invoked"
argument_list|)
expr_stmt|;
name|Slice
name|slice
init|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|sliceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|clusterState
operator|.
name|hasCollection
argument_list|(
name|collection
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No shard with name "
operator|+
name|sliceId
operator|+
literal|" exists for collection "
operator|+
name|collection
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No collection with the specified name exists: "
operator|+
name|collection
argument_list|)
throw|;
block|}
block|}
comment|// For now, only allow for deletions of Inactive slices or custom hashes (range==null).
comment|// TODO: Add check for range gaps on Slice deletion
specifier|final
name|Slice
operator|.
name|State
name|state
init|=
name|slice
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|slice
operator|.
name|getRange
argument_list|()
operator|==
literal|null
operator|||
name|state
operator|==
name|Slice
operator|.
name|State
operator|.
name|INACTIVE
operator|||
name|state
operator|==
name|Slice
operator|.
name|State
operator|.
name|RECOVERY
operator|||
name|state
operator|==
name|Slice
operator|.
name|State
operator|.
name|CONSTRUCTION
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"The slice: "
operator|+
name|slice
operator|.
name|getName
argument_list|()
operator|+
literal|" is currently "
operator|+
name|state
operator|+
literal|". Only non-active (or custom-hashed) slices can be deleted."
argument_list|)
throw|;
block|}
name|ShardHandler
name|shardHandler
init|=
name|shardHandlerFactory
operator|.
name|getShardHandler
argument_list|()
decl_stmt|;
try|try
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|UNLOAD
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_INDEX
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|sliceCmd
argument_list|(
name|clusterState
argument_list|,
name|params
argument_list|,
literal|null
argument_list|,
name|slice
argument_list|,
name|shardHandler
argument_list|)
expr_stmt|;
name|processResponses
argument_list|(
name|results
argument_list|,
name|shardHandler
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|DELETESHARD
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
name|sliceId
argument_list|)
decl_stmt|;
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for a while until we don't see the shard
name|TimeOut
name|timeout
init|=
operator|new
name|TimeOut
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|timeout
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|removed
operator|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|sliceId
argument_list|)
operator|==
literal|null
expr_stmt|;
if|if
condition|(
name|removed
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// just a bit of time so it's more likely other readers see on return
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|removed
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not fully remove collection: "
operator|+
name|collection
operator|+
literal|" shard: "
operator|+
name|sliceId
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Successfully deleted collection: "
operator|+
name|collection
operator|+
literal|", shard: "
operator|+
name|sliceId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error executing delete operation for collection: "
operator|+
name|collection
operator|+
literal|" shard: "
operator|+
name|sliceId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|migrate
specifier|private
name|void
name|migrate
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|sourceCollectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"collection"
argument_list|)
decl_stmt|;
name|String
name|splitKey
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"split.key"
argument_list|)
decl_stmt|;
name|String
name|targetCollectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"target.collection"
argument_list|)
decl_stmt|;
name|int
name|timeout
init|=
name|message
operator|.
name|getInt
argument_list|(
literal|"forward.timeout"
argument_list|,
literal|10
operator|*
literal|60
argument_list|)
operator|*
literal|1000
decl_stmt|;
name|DocCollection
name|sourceCollection
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|sourceCollectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceCollection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown source collection: "
operator|+
name|sourceCollectionName
argument_list|)
throw|;
block|}
name|DocCollection
name|targetCollection
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|targetCollectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetCollection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown target collection: "
operator|+
name|sourceCollectionName
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|sourceCollection
operator|.
name|getRouter
argument_list|()
operator|instanceof
name|CompositeIdRouter
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Source collection must use a compositeId router"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|targetCollection
operator|.
name|getRouter
argument_list|()
operator|instanceof
name|CompositeIdRouter
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Target collection must use a compositeId router"
argument_list|)
throw|;
block|}
name|CompositeIdRouter
name|sourceRouter
init|=
operator|(
name|CompositeIdRouter
operator|)
name|sourceCollection
operator|.
name|getRouter
argument_list|()
decl_stmt|;
name|CompositeIdRouter
name|targetRouter
init|=
operator|(
name|CompositeIdRouter
operator|)
name|targetCollection
operator|.
name|getRouter
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Slice
argument_list|>
name|sourceSlices
init|=
name|sourceRouter
operator|.
name|getSearchSlicesSingle
argument_list|(
name|splitKey
argument_list|,
literal|null
argument_list|,
name|sourceCollection
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceSlices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No active slices available in source collection: "
operator|+
name|sourceCollection
operator|+
literal|"for given split.key: "
operator|+
name|splitKey
argument_list|)
throw|;
block|}
name|Collection
argument_list|<
name|Slice
argument_list|>
name|targetSlices
init|=
name|targetRouter
operator|.
name|getSearchSlicesSingle
argument_list|(
name|splitKey
argument_list|,
literal|null
argument_list|,
name|targetCollection
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetSlices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No active slices available in target collection: "
operator|+
name|targetCollection
operator|+
literal|"for given split.key: "
operator|+
name|splitKey
argument_list|)
throw|;
block|}
name|String
name|asyncId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|containsKey
argument_list|(
name|ASYNC
argument_list|)
operator|&&
name|message
operator|.
name|get
argument_list|(
name|ASYNC
argument_list|)
operator|!=
literal|null
condition|)
name|asyncId
operator|=
name|message
operator|.
name|getStr
argument_list|(
name|ASYNC
argument_list|)
expr_stmt|;
for|for
control|(
name|Slice
name|sourceSlice
range|:
name|sourceSlices
control|)
block|{
for|for
control|(
name|Slice
name|targetSlice
range|:
name|targetSlices
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Migrating source shard: {} to target shard: {} for split.key = "
operator|+
name|splitKey
argument_list|,
name|sourceSlice
argument_list|,
name|targetSlice
argument_list|)
expr_stmt|;
name|migrateKey
argument_list|(
name|clusterState
argument_list|,
name|sourceCollection
argument_list|,
name|sourceSlice
argument_list|,
name|targetCollection
argument_list|,
name|targetSlice
argument_list|,
name|splitKey
argument_list|,
name|timeout
argument_list|,
name|results
argument_list|,
name|asyncId
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|migrateKey
specifier|private
name|void
name|migrateKey
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|DocCollection
name|sourceCollection
parameter_list|,
name|Slice
name|sourceSlice
parameter_list|,
name|DocCollection
name|targetCollection
parameter_list|,
name|Slice
name|targetSlice
parameter_list|,
name|String
name|splitKey
parameter_list|,
name|int
name|timeout
parameter_list|,
name|NamedList
name|results
parameter_list|,
name|String
name|asyncId
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|tempSourceCollectionName
init|=
literal|"split_"
operator|+
name|sourceSlice
operator|.
name|getName
argument_list|()
operator|+
literal|"_temp_"
operator|+
name|targetSlice
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterState
operator|.
name|hasCollection
argument_list|(
name|tempSourceCollectionName
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Deleting temporary collection: "
operator|+
name|tempSourceCollectionName
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|makeMap
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|DELETE
operator|.
name|toLower
argument_list|()
argument_list|,
name|NAME
argument_list|,
name|tempSourceCollectionName
argument_list|)
decl_stmt|;
try|try
block|{
name|deleteCollection
argument_list|(
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to clean up existing temporary collection: "
operator|+
name|tempSourceCollectionName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|CompositeIdRouter
name|sourceRouter
init|=
operator|(
name|CompositeIdRouter
operator|)
name|sourceCollection
operator|.
name|getRouter
argument_list|()
decl_stmt|;
name|DocRouter
operator|.
name|Range
name|keyHashRange
init|=
name|sourceRouter
operator|.
name|keyHashRange
argument_list|(
name|splitKey
argument_list|)
decl_stmt|;
name|ShardHandler
name|shardHandler
init|=
name|shardHandlerFactory
operator|.
name|getShardHandler
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Hash range for split.key: {} is: {}"
argument_list|,
name|splitKey
argument_list|,
name|keyHashRange
argument_list|)
expr_stmt|;
comment|// intersect source range, keyHashRange and target range
comment|// this is the range that has to be split from source and transferred to target
name|DocRouter
operator|.
name|Range
name|splitRange
init|=
name|intersect
argument_list|(
name|targetSlice
operator|.
name|getRange
argument_list|()
argument_list|,
name|intersect
argument_list|(
name|sourceSlice
operator|.
name|getRange
argument_list|()
argument_list|,
name|keyHashRange
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitRange
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No common hashes between source shard: {} and target shard: {}"
argument_list|,
name|sourceSlice
operator|.
name|getName
argument_list|()
argument_list|,
name|targetSlice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Common hash range between source shard: {} and target shard: {} = "
operator|+
name|splitRange
argument_list|,
name|sourceSlice
operator|.
name|getName
argument_list|()
argument_list|,
name|targetSlice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Replica
name|targetLeader
init|=
name|zkStateReader
operator|.
name|getLeaderRetry
argument_list|(
name|targetCollection
operator|.
name|getName
argument_list|()
argument_list|,
name|targetSlice
operator|.
name|getName
argument_list|()
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
comment|// For tracking async calls.
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Asking target leader node: "
operator|+
name|targetLeader
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" core: "
operator|+
name|targetLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
operator|+
literal|" to buffer updates"
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|REQUESTBUFFERUPDATES
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|targetLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|nodeName
init|=
name|targetLeader
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|sendShardRequest
argument_list|(
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|params
argument_list|,
name|shardHandler
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"MIGRATE failed to request node to buffer updates"
argument_list|,
name|shardHandler
argument_list|)
expr_stmt|;
name|completeAsyncRequest
argument_list|(
name|asyncId
argument_list|,
name|requestMap
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|ADDROUTINGRULE
operator|.
name|toLower
argument_list|()
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|sourceCollection
operator|.
name|getName
argument_list|()
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|sourceSlice
operator|.
name|getName
argument_list|()
argument_list|,
literal|"routeKey"
argument_list|,
name|SolrIndexSplitter
operator|.
name|getRouteKey
argument_list|(
name|splitKey
argument_list|)
operator|+
literal|"!"
argument_list|,
literal|"range"
argument_list|,
name|splitRange
operator|.
name|toString
argument_list|()
argument_list|,
literal|"targetCollection"
argument_list|,
name|targetCollection
operator|.
name|getName
argument_list|()
argument_list|,
literal|"expireAt"
argument_list|,
name|RoutingRule
operator|.
name|makeExpiryAt
argument_list|(
name|timeout
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Adding routing rule: "
operator|+
name|m
argument_list|)
expr_stmt|;
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for a while until we see the new rule
name|log
operator|.
name|info
argument_list|(
literal|"Waiting to see routing rule updated in clusterstate"
argument_list|)
expr_stmt|;
name|TimeOut
name|waitUntil
init|=
operator|new
name|TimeOut
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|boolean
name|added
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|waitUntil
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RoutingRule
argument_list|>
name|rules
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|sourceCollection
operator|.
name|getName
argument_list|()
argument_list|,
name|sourceSlice
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getRoutingRules
argument_list|()
decl_stmt|;
if|if
condition|(
name|rules
operator|!=
literal|null
condition|)
block|{
name|RoutingRule
name|rule
init|=
name|rules
operator|.
name|get
argument_list|(
name|SolrIndexSplitter
operator|.
name|getRouteKey
argument_list|(
name|splitKey
argument_list|)
operator|+
literal|"!"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rule
operator|!=
literal|null
operator|&&
name|rule
operator|.
name|getRouteRanges
argument_list|()
operator|.
name|contains
argument_list|(
name|splitRange
argument_list|)
condition|)
block|{
name|added
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|added
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not add routing rule: "
operator|+
name|m
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Routing rule added successfully"
argument_list|)
expr_stmt|;
comment|// Create temp core on source shard
name|Replica
name|sourceLeader
init|=
name|zkStateReader
operator|.
name|getLeaderRetry
argument_list|(
name|sourceCollection
operator|.
name|getName
argument_list|()
argument_list|,
name|sourceSlice
operator|.
name|getName
argument_list|()
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
comment|// create a temporary collection with just one node on the shard leader
name|String
name|configName
init|=
name|zkStateReader
operator|.
name|readConfigName
argument_list|(
name|sourceCollection
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|makeMap
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|CREATE
operator|.
name|toLower
argument_list|()
argument_list|,
name|NAME
argument_list|,
name|tempSourceCollectionName
argument_list|,
name|REPLICATION_FACTOR
argument_list|,
literal|1
argument_list|,
name|NUM_SLICES
argument_list|,
literal|1
argument_list|,
name|COLL_CONF
argument_list|,
name|configName
argument_list|,
name|CREATE_NODE_SET
argument_list|,
name|sourceLeader
operator|.
name|getNodeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|asyncId
operator|!=
literal|null
condition|)
block|{
name|String
name|internalAsyncId
init|=
name|asyncId
operator|+
name|Math
operator|.
name|abs
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ASYNC
argument_list|,
name|internalAsyncId
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Creating temporary collection: "
operator|+
name|props
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|clusterState
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
comment|// refresh cluster state
name|clusterState
operator|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
expr_stmt|;
name|Slice
name|tempSourceSlice
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|tempSourceCollectionName
argument_list|)
operator|.
name|getSlices
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Replica
name|tempSourceLeader
init|=
name|zkStateReader
operator|.
name|getLeaderRetry
argument_list|(
name|tempSourceCollectionName
argument_list|,
name|tempSourceSlice
operator|.
name|getName
argument_list|()
argument_list|,
literal|120000
argument_list|)
decl_stmt|;
name|String
name|tempCollectionReplica1
init|=
name|tempSourceCollectionName
operator|+
literal|"_"
operator|+
name|tempSourceSlice
operator|.
name|getName
argument_list|()
operator|+
literal|"_replica1"
decl_stmt|;
name|String
name|coreNodeName
init|=
name|waitForCoreNodeName
argument_list|(
name|tempSourceCollectionName
argument_list|,
name|sourceLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|tempCollectionReplica1
argument_list|)
decl_stmt|;
comment|// wait for the replicas to be seen as active on temp source leader
name|log
operator|.
name|info
argument_list|(
literal|"Asking source leader to wait for: "
operator|+
name|tempCollectionReplica1
operator|+
literal|" to be alive on: "
operator|+
name|sourceLeader
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|CoreAdminRequest
operator|.
name|WaitForState
name|cmd
init|=
operator|new
name|CoreAdminRequest
operator|.
name|WaitForState
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|setCoreName
argument_list|(
name|tempCollectionReplica1
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setNodeName
argument_list|(
name|sourceLeader
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCoreNodeName
argument_list|(
name|coreNodeName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setState
argument_list|(
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCheckLive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setOnlyIfLeader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// we don't want this to happen asynchronously
name|sendShardRequest
argument_list|(
name|tempSourceLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|(
name|cmd
operator|.
name|getParams
argument_list|()
argument_list|)
argument_list|,
name|shardHandler
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"MIGRATE failed to create temp collection leader or timed out waiting for it to come up"
argument_list|,
name|shardHandler
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Asking source leader to split index"
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|SPLIT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
name|sourceLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|CoreAdminParams
operator|.
name|TARGET_CORE
argument_list|,
name|tempSourceLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|RANGES
argument_list|,
name|splitRange
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"split.key"
argument_list|,
name|splitKey
argument_list|)
expr_stmt|;
name|String
name|tempNodeName
init|=
name|sourceLeader
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|sendShardRequest
argument_list|(
name|tempNodeName
argument_list|,
name|params
argument_list|,
name|shardHandler
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"MIGRATE failed to invoke SPLIT core admin command"
argument_list|,
name|shardHandler
argument_list|)
expr_stmt|;
name|completeAsyncRequest
argument_list|(
name|asyncId
argument_list|,
name|requestMap
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Creating a replica of temporary collection: {} on the target leader node: {}"
argument_list|,
name|tempSourceCollectionName
argument_list|,
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tempCollectionReplica2
init|=
name|tempSourceCollectionName
operator|+
literal|"_"
operator|+
name|tempSourceSlice
operator|.
name|getName
argument_list|()
operator|+
literal|"_replica2"
decl_stmt|;
name|props
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|ADDREPLICA
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|tempSourceCollectionName
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|SHARD_ID_PROP
argument_list|,
name|tempSourceSlice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"node"
argument_list|,
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|tempCollectionReplica2
argument_list|)
expr_stmt|;
comment|// copy over property params:
for|for
control|(
name|String
name|key
range|:
name|message
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|COLL_PROP_PREFIX
argument_list|)
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add async param
if|if
condition|(
name|asyncId
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|ASYNC
argument_list|,
name|asyncId
argument_list|)
expr_stmt|;
block|}
name|addReplica
argument_list|(
name|clusterState
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"MIGRATE failed to create replica of temporary collection in target leader node."
argument_list|,
name|shardHandler
argument_list|)
expr_stmt|;
name|completeAsyncRequest
argument_list|(
name|asyncId
argument_list|,
name|requestMap
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|coreNodeName
operator|=
name|waitForCoreNodeName
argument_list|(
name|tempSourceCollectionName
argument_list|,
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|tempCollectionReplica2
argument_list|)
expr_stmt|;
comment|// wait for the replicas to be seen as active on temp source leader
name|log
operator|.
name|info
argument_list|(
literal|"Asking temp source leader to wait for: "
operator|+
name|tempCollectionReplica2
operator|+
literal|" to be alive on: "
operator|+
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|=
operator|new
name|CoreAdminRequest
operator|.
name|WaitForState
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|setCoreName
argument_list|(
name|tempSourceLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setNodeName
argument_list|(
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCoreNodeName
argument_list|(
name|coreNodeName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setState
argument_list|(
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCheckLive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setOnlyIfLeader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|cmd
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
name|sendShardRequest
argument_list|(
name|tempSourceLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|params
argument_list|,
name|shardHandler
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"MIGRATE failed to create temp collection replica or timed out waiting for them to come up"
argument_list|,
name|shardHandler
argument_list|)
expr_stmt|;
name|completeAsyncRequest
argument_list|(
name|asyncId
argument_list|,
name|requestMap
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Successfully created replica of temp source collection on target leader node"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Requesting merge of temp source collection replica to target leader"
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|MERGEINDEXES
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
name|targetLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|SRC_CORE
argument_list|,
name|tempCollectionReplica2
argument_list|)
expr_stmt|;
name|sendShardRequest
argument_list|(
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|params
argument_list|,
name|shardHandler
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"MIGRATE failed to merge "
operator|+
name|tempCollectionReplica2
operator|+
literal|" to "
operator|+
name|targetLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
operator|+
literal|" on node: "
operator|+
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|shardHandler
argument_list|)
expr_stmt|;
name|completeAsyncRequest
argument_list|(
name|asyncId
argument_list|,
name|requestMap
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Asking target leader to apply buffered updates"
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|REQUESTAPPLYUPDATES
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|targetLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
name|sendShardRequest
argument_list|(
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|params
argument_list|,
name|shardHandler
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"MIGRATE failed to request node to apply buffered updates"
argument_list|,
name|shardHandler
argument_list|)
expr_stmt|;
name|completeAsyncRequest
argument_list|(
name|asyncId
argument_list|,
name|requestMap
argument_list|,
name|results
argument_list|)
expr_stmt|;
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Deleting temporary collection: "
operator|+
name|tempSourceCollectionName
argument_list|)
expr_stmt|;
name|props
operator|=
name|makeMap
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|DELETE
operator|.
name|toLower
argument_list|()
argument_list|,
name|NAME
argument_list|,
name|tempSourceCollectionName
argument_list|)
expr_stmt|;
name|deleteCollection
argument_list|(
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to delete temporary collection: "
operator|+
name|tempSourceCollectionName
operator|+
literal|". Please remove it manually"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|completeAsyncRequest
specifier|private
name|void
name|completeAsyncRequest
parameter_list|(
name|String
name|asyncId
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestMap
parameter_list|,
name|NamedList
name|results
parameter_list|)
block|{
if|if
condition|(
name|asyncId
operator|!=
literal|null
condition|)
block|{
name|waitForAsyncCallsToComplete
argument_list|(
name|requestMap
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|requestMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|intersect
specifier|private
name|DocRouter
operator|.
name|Range
name|intersect
parameter_list|(
name|DocRouter
operator|.
name|Range
name|a
parameter_list|,
name|DocRouter
operator|.
name|Range
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
operator|||
name|b
operator|==
literal|null
operator|||
operator|!
name|a
operator|.
name|overlaps
argument_list|(
name|b
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|a
operator|.
name|isSubsetOf
argument_list|(
name|b
argument_list|)
condition|)
return|return
name|a
return|;
elseif|else
if|if
condition|(
name|b
operator|.
name|isSubsetOf
argument_list|(
name|a
argument_list|)
condition|)
return|return
name|b
return|;
elseif|else
if|if
condition|(
name|b
operator|.
name|includes
argument_list|(
name|a
operator|.
name|max
argument_list|)
condition|)
block|{
return|return
operator|new
name|DocRouter
operator|.
name|Range
argument_list|(
name|b
operator|.
name|min
argument_list|,
name|a
operator|.
name|max
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|DocRouter
operator|.
name|Range
argument_list|(
name|a
operator|.
name|min
argument_list|,
name|b
operator|.
name|max
argument_list|)
return|;
block|}
block|}
DECL|method|sendShardRequest
specifier|private
name|void
name|sendShardRequest
parameter_list|(
name|String
name|nodeName
parameter_list|,
name|ModifiableSolrParams
name|params
parameter_list|,
name|ShardHandler
name|shardHandler
parameter_list|,
name|String
name|asyncId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestMap
parameter_list|)
block|{
if|if
condition|(
name|asyncId
operator|!=
literal|null
condition|)
block|{
name|String
name|coreAdminAsyncId
init|=
name|asyncId
operator|+
name|Math
operator|.
name|abs
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|ASYNC
argument_list|,
name|coreAdminAsyncId
argument_list|)
expr_stmt|;
name|requestMap
operator|.
name|put
argument_list|(
name|nodeName
argument_list|,
name|coreAdminAsyncId
argument_list|)
expr_stmt|;
block|}
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
name|adminPath
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|purpose
operator|=
literal|1
expr_stmt|;
name|String
name|replica
init|=
name|zkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
name|sreq
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|replica
block|}
expr_stmt|;
name|sreq
operator|.
name|actualShards
operator|=
name|sreq
operator|.
name|shards
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|shardHandler
operator|.
name|submit
argument_list|(
name|sreq
argument_list|,
name|replica
argument_list|,
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
block|}
DECL|method|addPropertyParams
specifier|private
name|void
name|addPropertyParams
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|ModifiableSolrParams
name|params
parameter_list|)
block|{
comment|// Now add the property.key=value pairs
for|for
control|(
name|String
name|key
range|:
name|message
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|COLL_PROP_PREFIX
argument_list|)
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getLiveOrLiveAndCreateNodeSetList
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getLiveOrLiveAndCreateNodeSetList
parameter_list|(
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
parameter_list|,
specifier|final
name|ZkNodeProps
name|message
parameter_list|,
specifier|final
name|Random
name|random
parameter_list|)
block|{
comment|// TODO: add smarter options that look at the current number of cores per
comment|// node?
comment|// for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)
name|List
argument_list|<
name|String
argument_list|>
name|nodeList
decl_stmt|;
specifier|final
name|String
name|createNodeSetStr
init|=
name|message
operator|.
name|getStr
argument_list|(
name|CREATE_NODE_SET
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|createNodeList
init|=
operator|(
name|createNodeSetStr
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|StrUtils
operator|.
name|splitSmart
argument_list|(
operator|(
name|CREATE_NODE_SET_EMPTY
operator|.
name|equals
argument_list|(
name|createNodeSetStr
argument_list|)
condition|?
literal|""
else|:
name|createNodeSetStr
operator|)
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|createNodeList
operator|!=
literal|null
condition|)
block|{
name|nodeList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|createNodeList
argument_list|)
expr_stmt|;
name|nodeList
operator|.
name|retainAll
argument_list|(
name|liveNodes
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|getBool
argument_list|(
name|CREATE_NODE_SET_SHUFFLE
argument_list|,
name|CREATE_NODE_SET_SHUFFLE_DEFAULT
argument_list|)
condition|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodeList
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|nodeList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|liveNodes
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodeList
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeList
return|;
block|}
DECL|method|createCollection
specifier|private
name|void
name|createCollection
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|clusterState
operator|.
name|hasCollection
argument_list|(
name|collectionName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"collection already exists: "
operator|+
name|collectionName
argument_list|)
throw|;
block|}
name|String
name|configName
init|=
name|getConfigName
argument_list|(
name|collectionName
argument_list|,
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|configName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No config set found to associate with the collection."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|validateConfig
argument_list|(
name|configName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Can not find the specified config set: "
operator|+
name|configName
argument_list|)
throw|;
block|}
try|try
block|{
comment|// look at the replication factor and see if it matches reality
comment|// if it does not, find best nodes to create more cores
name|int
name|repFactor
init|=
name|message
operator|.
name|getInt
argument_list|(
name|REPLICATION_FACTOR
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ShardHandler
name|shardHandler
init|=
name|shardHandlerFactory
operator|.
name|getShardHandler
argument_list|()
decl_stmt|;
specifier|final
name|String
name|async
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ASYNC
argument_list|)
decl_stmt|;
name|Integer
name|numSlices
init|=
name|message
operator|.
name|getInt
argument_list|(
name|NUM_SLICES
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|router
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"router.name"
argument_list|,
name|DocRouter
operator|.
name|DEFAULT_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|shardNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|ImplicitDocRouter
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|router
argument_list|)
condition|)
block|{
name|ClusterStateMutator
operator|.
name|getShardNames
argument_list|(
name|shardNames
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
literal|"shards"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|numSlices
operator|=
name|shardNames
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|numSlices
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|NUM_SLICES
operator|+
literal|" is a required param (when using CompositeId router)."
argument_list|)
throw|;
block|}
name|ClusterStateMutator
operator|.
name|getShardNames
argument_list|(
name|numSlices
argument_list|,
name|shardNames
argument_list|)
expr_stmt|;
block|}
name|int
name|maxShardsPerNode
init|=
name|message
operator|.
name|getInt
argument_list|(
name|MAX_SHARDS_PER_NODE
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|repFactor
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|REPLICATION_FACTOR
operator|+
literal|" must be greater than 0"
argument_list|)
throw|;
block|}
if|if
condition|(
name|numSlices
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|NUM_SLICES
operator|+
literal|" must be> 0"
argument_list|)
throw|;
block|}
comment|// we need to look at every node and see how many cores it serves
comment|// add our new cores to existing nodes serving the least number of cores
comment|// but (for now) require that each core goes on a distinct node.
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nodeList
init|=
name|getLiveOrLiveAndCreateNodeSetList
argument_list|(
name|clusterState
operator|.
name|getLiveNodes
argument_list|()
argument_list|,
name|message
argument_list|,
name|RANDOM
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Position
argument_list|,
name|String
argument_list|>
name|positionVsNodes
decl_stmt|;
if|if
condition|(
name|nodeList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"It is unusual to create a collection ("
operator|+
name|collectionName
operator|+
literal|") without cores."
argument_list|)
expr_stmt|;
name|positionVsNodes
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|repFactor
operator|>
name|nodeList
operator|.
name|size
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Specified "
operator|+
name|REPLICATION_FACTOR
operator|+
literal|" of "
operator|+
name|repFactor
operator|+
literal|" on collection "
operator|+
name|collectionName
operator|+
literal|" is higher than or equal to the number of Solr instances currently live or live and part of your "
operator|+
name|CREATE_NODE_SET
operator|+
literal|"("
operator|+
name|nodeList
operator|.
name|size
argument_list|()
operator|+
literal|"). It's unusual to run two replica of the same slice on the same Solr-instance."
argument_list|)
expr_stmt|;
block|}
name|int
name|maxShardsAllowedToCreate
init|=
name|maxShardsPerNode
operator|*
name|nodeList
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|requestedShardsToCreate
init|=
name|numSlices
operator|*
name|repFactor
decl_stmt|;
if|if
condition|(
name|maxShardsAllowedToCreate
operator|<
name|requestedShardsToCreate
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Cannot create collection "
operator|+
name|collectionName
operator|+
literal|". Value of "
operator|+
name|MAX_SHARDS_PER_NODE
operator|+
literal|" is "
operator|+
name|maxShardsPerNode
operator|+
literal|", and the number of nodes currently live or live and part of your "
operator|+
name|CREATE_NODE_SET
operator|+
literal|" is "
operator|+
name|nodeList
operator|.
name|size
argument_list|()
operator|+
literal|". This allows a maximum of "
operator|+
name|maxShardsAllowedToCreate
operator|+
literal|" to be created. Value of "
operator|+
name|NUM_SLICES
operator|+
literal|" is "
operator|+
name|numSlices
operator|+
literal|" and value of "
operator|+
name|REPLICATION_FACTOR
operator|+
literal|" is "
operator|+
name|repFactor
operator|+
literal|". This requires "
operator|+
name|requestedShardsToCreate
operator|+
literal|" shards to be created (higher than the allowed number)"
argument_list|)
throw|;
block|}
name|positionVsNodes
operator|=
name|identifyNodes
argument_list|(
name|clusterState
argument_list|,
name|nodeList
argument_list|,
name|message
argument_list|,
name|shardNames
argument_list|,
name|repFactor
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isLegacyCloud
init|=
name|Overseer
operator|.
name|isLegacy
argument_list|(
name|zkStateReader
operator|.
name|getClusterProps
argument_list|()
argument_list|)
decl_stmt|;
name|createConfNode
argument_list|(
name|configName
argument_list|,
name|collectionName
argument_list|,
name|isLegacyCloud
argument_list|)
expr_stmt|;
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for a while until we don't see the collection
name|TimeOut
name|waitUntil
init|=
operator|new
name|TimeOut
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|boolean
name|created
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|waitUntil
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|created
operator|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|hasCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
if|if
condition|(
name|created
condition|)
break|break;
block|}
if|if
condition|(
operator|!
name|created
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not fully create collection: "
operator|+
name|collectionName
argument_list|)
throw|;
if|if
condition|(
name|nodeList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Finished create command for collection: {}"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// For tracking async calls.
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|formatString
argument_list|(
literal|"Creating SolrCores for new collection {0}, shardNames {1} , replicationFactor : {2}"
argument_list|,
name|collectionName
argument_list|,
name|shardNames
argument_list|,
name|repFactor
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ShardRequest
argument_list|>
name|coresToCreate
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Position
argument_list|,
name|String
argument_list|>
name|e
range|:
name|positionVsNodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Position
name|position
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|nodeName
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|coreName
init|=
name|collectionName
operator|+
literal|"_"
operator|+
name|position
operator|.
name|shard
operator|+
literal|"_replica"
operator|+
operator|(
name|position
operator|.
name|index
operator|+
literal|1
operator|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|formatString
argument_list|(
literal|"Creating core {0} as part of shard {1} of collection {2} on {3}"
argument_list|,
name|coreName
argument_list|,
name|position
operator|.
name|shard
argument_list|,
name|collectionName
argument_list|,
name|nodeName
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|baseUrl
init|=
name|zkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
comment|//in the new mode, create the replica in clusterstate prior to creating the core.
comment|// Otherwise the core creation fails
if|if
condition|(
operator|!
name|isLegacyCloud
condition|)
block|{
name|ZkNodeProps
name|props
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|ADDREPLICA
operator|.
name|toString
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
name|position
operator|.
name|shard
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|coreName
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|DOWN
operator|.
name|toString
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|baseUrl
argument_list|)
decl_stmt|;
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|props
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Need to create new params for each request
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|coreName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|COLL_CONF
argument_list|,
name|configName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|SHARD
argument_list|,
name|position
operator|.
name|shard
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
name|numSlices
argument_list|)
expr_stmt|;
if|if
condition|(
name|async
operator|!=
literal|null
condition|)
block|{
name|String
name|coreAdminAsyncId
init|=
name|async
operator|+
name|Math
operator|.
name|abs
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|ASYNC
argument_list|,
name|coreAdminAsyncId
argument_list|)
expr_stmt|;
name|requestMap
operator|.
name|put
argument_list|(
name|nodeName
argument_list|,
name|coreAdminAsyncId
argument_list|)
expr_stmt|;
block|}
name|addPropertyParams
argument_list|(
name|message
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
name|adminPath
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|purpose
operator|=
literal|1
expr_stmt|;
name|sreq
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|baseUrl
block|}
expr_stmt|;
name|sreq
operator|.
name|actualShards
operator|=
name|sreq
operator|.
name|shards
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
name|params
expr_stmt|;
if|if
condition|(
name|isLegacyCloud
condition|)
block|{
name|shardHandler
operator|.
name|submit
argument_list|(
name|sreq
argument_list|,
name|sreq
operator|.
name|shards
index|[
literal|0
index|]
argument_list|,
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|coresToCreate
operator|.
name|put
argument_list|(
name|coreName
argument_list|,
name|sreq
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isLegacyCloud
condition|)
block|{
comment|// wait for all replica entries to be created
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|replicas
init|=
name|waitToSeeReplicasInState
argument_list|(
name|collectionName
argument_list|,
name|coresToCreate
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ShardRequest
argument_list|>
name|e
range|:
name|coresToCreate
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ShardRequest
name|sreq
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|CORE_NODE_NAME
argument_list|,
name|replicas
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|shardHandler
operator|.
name|submit
argument_list|(
name|sreq
argument_list|,
name|sreq
operator|.
name|shards
index|[
literal|0
index|]
argument_list|,
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
block|}
block|}
name|processResponses
argument_list|(
name|results
argument_list|,
name|shardHandler
argument_list|)
expr_stmt|;
name|completeAsyncRequest
argument_list|(
name|async
argument_list|,
name|requestMap
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Finished create command on all shards for collection: "
operator|+
name|collectionName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|null
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|identifyNodes
specifier|private
name|Map
argument_list|<
name|Position
argument_list|,
name|String
argument_list|>
name|identifyNodes
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|nodeList
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|shardNames
parameter_list|,
name|int
name|repFactor
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Map
argument_list|>
name|maps
init|=
operator|(
name|List
operator|)
name|message
operator|.
name|get
argument_list|(
literal|"rule"
argument_list|)
decl_stmt|;
if|if
condition|(
name|maps
operator|==
literal|null
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|Position
argument_list|,
name|String
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|aShard
range|:
name|shardNames
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|repFactor
condition|;
name|j
operator|++
control|)
block|{
name|result
operator|.
name|put
argument_list|(
operator|new
name|Position
argument_list|(
name|aShard
argument_list|,
name|j
argument_list|)
argument_list|,
name|nodeList
operator|.
name|get
argument_list|(
name|i
operator|%
name|nodeList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
name|List
argument_list|<
name|Rule
argument_list|>
name|rules
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|map
range|:
name|maps
control|)
name|rules
operator|.
name|add
argument_list|(
operator|new
name|Rule
argument_list|(
operator|(
name|Map
operator|)
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|sharVsReplicaCount
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|shard
range|:
name|shardNames
control|)
name|sharVsReplicaCount
operator|.
name|put
argument_list|(
name|shard
argument_list|,
name|repFactor
argument_list|)
expr_stmt|;
name|ReplicaAssigner
name|replicaAssigner
init|=
operator|new
name|ReplicaAssigner
argument_list|(
name|rules
argument_list|,
name|sharVsReplicaCount
argument_list|,
operator|(
name|List
argument_list|<
name|Map
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|SNITCH
argument_list|)
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
comment|//this is a new collection. So, there are no nodes in any shard
name|nodeList
argument_list|,
name|overseer
operator|.
name|getZkController
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
argument_list|,
name|clusterState
argument_list|)
decl_stmt|;
return|return
name|replicaAssigner
operator|.
name|getNodeMappings
argument_list|()
return|;
block|}
DECL|method|waitToSeeReplicasInState
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|waitToSeeReplicasInState
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|coreNames
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|TimeOut
name|timeout
init|=
operator|new
name|TimeOut
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|DocCollection
name|coll
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|coreName
range|:
name|coreNames
control|)
block|{
if|if
condition|(
name|result
operator|.
name|containsKey
argument_list|(
name|coreName
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Slice
name|slice
range|:
name|coll
operator|.
name|getSlices
argument_list|()
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
if|if
condition|(
name|coreName
operator|.
name|equals
argument_list|(
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|coreName
argument_list|,
name|replica
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|==
name|coreNames
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|result
return|;
block|}
if|if
condition|(
name|timeout
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Timed out waiting to see all replicas: "
operator|+
name|coreNames
operator|+
literal|" in cluster state."
argument_list|)
throw|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addReplica
specifier|private
name|void
name|addReplica
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
name|String
name|node
init|=
name|message
operator|.
name|getStr
argument_list|(
name|CoreAdminParams
operator|.
name|NODE
argument_list|)
decl_stmt|;
name|String
name|shard
init|=
name|message
operator|.
name|getStr
argument_list|(
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|String
name|coreName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|coreName
argument_list|)
condition|)
block|{
name|coreName
operator|=
name|message
operator|.
name|getStr
argument_list|(
name|CoreAdminParams
operator|.
name|PROPERTY_PREFIX
operator|+
name|CoreAdminParams
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|asyncId
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ASYNC
argument_list|)
decl_stmt|;
name|DocCollection
name|coll
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|coll
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Collection: "
operator|+
name|collection
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
if|if
condition|(
name|coll
operator|.
name|getSlice
argument_list|(
name|shard
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Collection: "
operator|+
name|collection
operator|+
literal|" shard: "
operator|+
name|shard
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
name|ShardHandler
name|shardHandler
init|=
name|shardHandlerFactory
operator|.
name|getShardHandler
argument_list|()
decl_stmt|;
comment|// Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.
name|node
operator|=
name|getNodesForNewReplicas
argument_list|(
name|clusterState
argument_list|,
name|collection
argument_list|,
name|shard
argument_list|,
literal|1
argument_list|,
name|node
argument_list|,
name|overseer
operator|.
name|getZkController
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|nodeName
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Node not provided, Identified {} for creating new replica"
argument_list|,
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|clusterState
operator|.
name|liveNodesContain
argument_list|(
name|node
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Node: "
operator|+
name|node
operator|+
literal|" is not live"
argument_list|)
throw|;
block|}
if|if
condition|(
name|coreName
operator|==
literal|null
condition|)
block|{
name|coreName
operator|=
name|Assign
operator|.
name|buildCoreName
argument_list|(
name|coll
argument_list|,
name|shard
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|message
operator|.
name|getBool
argument_list|(
name|SKIP_CREATE_REPLICA_IN_CLUSTER_STATE
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|//Validate that the core name is unique in that collection
for|for
control|(
name|Slice
name|slice
range|:
name|coll
operator|.
name|getSlices
argument_list|()
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
name|String
name|replicaCoreName
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|coreName
operator|.
name|equals
argument_list|(
name|replicaCoreName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Another replica with the same core name already exists"
operator|+
literal|" for this collection"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Overseer
operator|.
name|isLegacy
argument_list|(
name|zkStateReader
operator|.
name|getClusterProps
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|message
operator|.
name|getBool
argument_list|(
name|SKIP_CREATE_REPLICA_IN_CLUSTER_STATE
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|ZkNodeProps
name|props
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|ADDREPLICA
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
name|shard
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|coreName
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|DOWN
operator|.
name|toString
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|zkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|node
argument_list|)
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|props
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|CORE_NODE_NAME
argument_list|,
name|waitToSeeReplicasInState
argument_list|(
name|collection
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|coreName
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|coreName
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|configName
init|=
name|zkStateReader
operator|.
name|readConfigName
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|String
name|routeKey
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ShardParams
operator|.
name|_ROUTE_
argument_list|)
decl_stmt|;
name|String
name|dataDir
init|=
name|message
operator|.
name|getStr
argument_list|(
name|CoreAdminParams
operator|.
name|DATA_DIR
argument_list|)
decl_stmt|;
name|String
name|instanceDir
init|=
name|message
operator|.
name|getStr
argument_list|(
name|CoreAdminParams
operator|.
name|INSTANCE_DIR
argument_list|)
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|coreName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|COLL_CONF
argument_list|,
name|configName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|,
name|collection
argument_list|)
expr_stmt|;
if|if
condition|(
name|shard
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|SHARD
argument_list|,
name|shard
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|routeKey
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|Slice
argument_list|>
name|slices
init|=
name|coll
operator|.
name|getRouter
argument_list|()
operator|.
name|getSearchSlicesSingle
argument_list|(
name|routeKey
argument_list|,
literal|null
argument_list|,
name|coll
argument_list|)
decl_stmt|;
if|if
condition|(
name|slices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No active shard serving _route_="
operator|+
name|routeKey
operator|+
literal|" found"
argument_list|)
throw|;
block|}
else|else
block|{
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|SHARD
argument_list|,
name|slices
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Specify either 'shard' or _route_ param"
argument_list|)
throw|;
block|}
if|if
condition|(
name|dataDir
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|DATA_DIR
argument_list|,
name|dataDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|instanceDir
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|INSTANCE_DIR
argument_list|,
name|instanceDir
argument_list|)
expr_stmt|;
block|}
name|addPropertyParams
argument_list|(
name|message
argument_list|,
name|params
argument_list|)
expr_stmt|;
comment|// For tracking async calls.
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|sendShardRequest
argument_list|(
name|node
argument_list|,
name|params
argument_list|,
name|shardHandler
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"ADDREPLICA failed to create replica"
argument_list|,
name|shardHandler
argument_list|)
expr_stmt|;
name|completeAsyncRequest
argument_list|(
name|asyncId
argument_list|,
name|requestMap
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
DECL|method|processResponses
specifier|private
name|void
name|processResponses
parameter_list|(
name|NamedList
name|results
parameter_list|,
name|ShardHandler
name|shardHandler
parameter_list|)
block|{
name|ShardResponse
name|srsp
decl_stmt|;
do|do
block|{
name|srsp
operator|=
name|shardHandler
operator|.
name|takeCompletedOrError
argument_list|()
expr_stmt|;
if|if
condition|(
name|srsp
operator|!=
literal|null
condition|)
block|{
name|processResponse
argument_list|(
name|results
argument_list|,
name|srsp
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|srsp
operator|!=
literal|null
condition|)
do|;
block|}
DECL|method|getConfigName
specifier|private
name|String
name|getConfigName
parameter_list|(
name|String
name|coll
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|configName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|COLL_CONF
argument_list|)
decl_stmt|;
if|if
condition|(
name|configName
operator|==
literal|null
condition|)
block|{
comment|// if there is only one conf, use that
name|List
argument_list|<
name|String
argument_list|>
name|configNames
init|=
literal|null
decl_stmt|;
try|try
block|{
name|configNames
operator|=
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|getChildren
argument_list|(
name|ZkConfigManager
operator|.
name|CONFIGS_ZKNODE
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|configNames
operator|!=
literal|null
operator|&&
name|configNames
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|configName
operator|=
name|configNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// no config set named, but there is only 1 - use it
name|log
operator|.
name|info
argument_list|(
literal|"Only one config set found in zk - using it:"
operator|+
name|configName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configNames
operator|.
name|contains
argument_list|(
name|coll
argument_list|)
condition|)
block|{
name|configName
operator|=
name|coll
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{        }
block|}
return|return
name|configName
return|;
block|}
DECL|method|validateConfig
specifier|private
name|boolean
name|validateConfig
parameter_list|(
name|String
name|configName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|exists
argument_list|(
name|ZkConfigManager
operator|.
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|configName
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * This doesn't validate the config (path) itself and is just responsible for creating the confNode.    * That check should be done before the config node is created.    */
DECL|method|createConfNode
specifier|private
name|void
name|createConfNode
parameter_list|(
name|String
name|configName
parameter_list|,
name|String
name|coll
parameter_list|,
name|boolean
name|isLegacyCloud
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|configName
operator|!=
literal|null
condition|)
block|{
name|String
name|collDir
init|=
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|coll
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"creating collections conf node {} "
argument_list|,
name|collDir
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|Utils
operator|.
name|toJSON
argument_list|(
name|makeMap
argument_list|(
name|ZkController
operator|.
name|CONFIGNAME_PROP
argument_list|,
name|configName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|exists
argument_list|(
name|collDir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|setData
argument_list|(
name|collDir
argument_list|,
name|data
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|makePath
argument_list|(
name|collDir
argument_list|,
name|data
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isLegacyCloud
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not obtain config name"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unable to get config name"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|collectionCmd
specifier|private
name|void
name|collectionCmd
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|ModifiableSolrParams
name|params
parameter_list|,
name|NamedList
name|results
parameter_list|,
name|Replica
operator|.
name|State
name|stateMatcher
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Executing Collection Cmd : "
operator|+
name|params
argument_list|)
expr_stmt|;
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
name|ShardHandler
name|shardHandler
init|=
name|shardHandlerFactory
operator|.
name|getShardHandler
argument_list|()
decl_stmt|;
name|DocCollection
name|coll
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|entry
range|:
name|coll
operator|.
name|getSlicesMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Slice
name|slice
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|sliceCmd
argument_list|(
name|clusterState
argument_list|,
name|params
argument_list|,
name|stateMatcher
argument_list|,
name|slice
argument_list|,
name|shardHandler
argument_list|)
expr_stmt|;
block|}
name|processResponses
argument_list|(
name|results
argument_list|,
name|shardHandler
argument_list|)
expr_stmt|;
block|}
DECL|method|sliceCmd
specifier|private
name|void
name|sliceCmd
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ModifiableSolrParams
name|params
parameter_list|,
name|Replica
operator|.
name|State
name|stateMatcher
parameter_list|,
name|Slice
name|slice
parameter_list|,
name|ShardHandler
name|shardHandler
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shards
init|=
name|slice
operator|.
name|getReplicasMap
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
argument_list|>
name|shardEntries
init|=
name|shards
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shardEntry
range|:
name|shardEntries
control|)
block|{
specifier|final
name|ZkNodeProps
name|node
init|=
name|shardEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterState
operator|.
name|liveNodesContain
argument_list|(
name|node
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|)
operator|&&
operator|(
name|stateMatcher
operator|==
literal|null
operator|||
name|Replica
operator|.
name|State
operator|.
name|getState
argument_list|(
name|node
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
argument_list|)
operator|==
name|stateMatcher
operator|)
condition|)
block|{
comment|// For thread safety, only simple clone the ModifiableSolrParams
name|ModifiableSolrParams
name|cloneParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|cloneParams
operator|.
name|add
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|cloneParams
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
name|node
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|replica
init|=
name|node
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
decl_stmt|;
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|sreq
operator|.
name|nodeName
operator|=
name|node
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
expr_stmt|;
comment|// yes, they must use same admin handler path everywhere...
name|cloneParams
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
name|adminPath
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|purpose
operator|=
literal|1
expr_stmt|;
name|sreq
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|replica
block|}
expr_stmt|;
name|sreq
operator|.
name|actualShards
operator|=
name|sreq
operator|.
name|shards
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
name|cloneParams
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Collection Admin sending CoreAdmin cmd to "
operator|+
name|replica
operator|+
literal|" params:"
operator|+
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
name|shardHandler
operator|.
name|submit
argument_list|(
name|sreq
argument_list|,
name|replica
argument_list|,
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|processResponse
specifier|private
name|void
name|processResponse
parameter_list|(
name|NamedList
name|results
parameter_list|,
name|ShardResponse
name|srsp
parameter_list|)
block|{
name|Throwable
name|e
init|=
name|srsp
operator|.
name|getException
argument_list|()
decl_stmt|;
name|String
name|nodeName
init|=
name|srsp
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|SolrResponse
name|solrResponse
init|=
name|srsp
operator|.
name|getSolrResponse
argument_list|()
decl_stmt|;
name|String
name|shard
init|=
name|srsp
operator|.
name|getShard
argument_list|()
decl_stmt|;
name|processResponse
argument_list|(
name|results
argument_list|,
name|e
argument_list|,
name|nodeName
argument_list|,
name|solrResponse
argument_list|,
name|shard
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|processResponse
specifier|private
name|void
name|processResponse
parameter_list|(
name|NamedList
name|results
parameter_list|,
name|Throwable
name|e
parameter_list|,
name|String
name|nodeName
parameter_list|,
name|SolrResponse
name|solrResponse
parameter_list|,
name|String
name|shard
parameter_list|)
block|{
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error from shard: "
operator|+
name|shard
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|SimpleOrderedMap
name|failure
init|=
operator|(
name|SimpleOrderedMap
operator|)
name|results
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
decl_stmt|;
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
operator|new
name|SimpleOrderedMap
argument_list|()
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"failure"
argument_list|,
name|failure
argument_list|)
expr_stmt|;
block|}
name|failure
operator|.
name|add
argument_list|(
name|nodeName
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SimpleOrderedMap
name|success
init|=
operator|(
name|SimpleOrderedMap
operator|)
name|results
operator|.
name|get
argument_list|(
literal|"success"
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
operator|==
literal|null
condition|)
block|{
name|success
operator|=
operator|new
name|SimpleOrderedMap
argument_list|()
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"success"
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
name|success
operator|.
name|add
argument_list|(
name|nodeName
argument_list|,
name|solrResponse
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|waitForAsyncCallsToComplete
specifier|private
name|void
name|waitForAsyncCallsToComplete
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestMap
parameter_list|,
name|NamedList
name|results
parameter_list|)
block|{
for|for
control|(
name|String
name|k
range|:
name|requestMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"I am Waiting for :{}/{}"
argument_list|,
name|k
argument_list|,
name|requestMap
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|requestMap
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|,
name|waitForCoreAdminAsyncCallToComplete
argument_list|(
name|k
argument_list|,
name|requestMap
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|waitForCoreAdminAsyncCallToComplete
specifier|private
name|NamedList
name|waitForCoreAdminAsyncCallToComplete
parameter_list|(
name|String
name|nodeName
parameter_list|,
name|String
name|requestId
parameter_list|)
block|{
name|ShardHandler
name|shardHandler
init|=
name|shardHandlerFactory
operator|.
name|getShardHandler
argument_list|()
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|REQUESTSTATUS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|REQUESTID
argument_list|,
name|requestId
argument_list|)
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|ShardRequest
name|sreq
decl_stmt|;
do|do
block|{
name|sreq
operator|=
operator|new
name|ShardRequest
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
name|adminPath
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|purpose
operator|=
literal|1
expr_stmt|;
name|String
name|replica
init|=
name|zkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
name|sreq
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|replica
block|}
expr_stmt|;
name|sreq
operator|.
name|actualShards
operator|=
name|sreq
operator|.
name|shards
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|shardHandler
operator|.
name|submit
argument_list|(
name|sreq
argument_list|,
name|replica
argument_list|,
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
name|ShardResponse
name|srsp
decl_stmt|;
do|do
block|{
name|srsp
operator|=
name|shardHandler
operator|.
name|takeCompletedOrError
argument_list|()
expr_stmt|;
if|if
condition|(
name|srsp
operator|!=
literal|null
condition|)
block|{
name|NamedList
name|results
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|processResponse
argument_list|(
name|results
argument_list|,
name|srsp
argument_list|)
expr_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"STATUS"
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|equals
argument_list|(
literal|"running"
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"The task is still RUNNING, continuing to wait."
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
continue|continue;
block|}
elseif|else
if|if
condition|(
name|r
operator|.
name|equals
argument_list|(
literal|"completed"
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"The task is COMPLETED, returning"
argument_list|)
expr_stmt|;
return|return
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|r
operator|.
name|equals
argument_list|(
literal|"failed"
argument_list|)
condition|)
block|{
comment|// TODO: Improve this. Get more information.
name|log
operator|.
name|debug
argument_list|(
literal|"The task is FAILED, returning"
argument_list|)
expr_stmt|;
return|return
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|r
operator|.
name|equals
argument_list|(
literal|"notfound"
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"The task is notfound, retry"
argument_list|)
expr_stmt|;
if|if
condition|(
name|counter
operator|++
operator|<
literal|5
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{               }
break|break;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Invalid status request for requestId: "
operator|+
name|requestId
operator|+
literal|""
operator|+
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"STATUS"
argument_list|)
operator|+
literal|"retried "
operator|+
name|counter
operator|+
literal|"times"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Invalid status request "
operator|+
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"STATUS"
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
do|while
condition|(
name|srsp
operator|!=
literal|null
condition|)
do|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Overseer Collection Processor"
return|;
block|}
annotation|@
name|Override
DECL|method|getTimerName
specifier|public
name|String
name|getTimerName
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
return|return
literal|"collection_"
operator|+
name|operation
return|;
block|}
annotation|@
name|Override
DECL|method|getTaskKey
specifier|public
name|String
name|getTaskKey
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|)
block|{
return|return
name|message
operator|.
name|containsKey
argument_list|(
name|COLLECTION_PROP
argument_list|)
condition|?
name|message
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
else|:
name|message
operator|.
name|getStr
argument_list|(
name|NAME
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|markExclusiveTask
specifier|public
name|void
name|markExclusiveTask
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
comment|//TODO deprecated remove this check .
if|if
condition|(
operator|!
name|CLUSTERSTATUS
operator|.
name|isEqual
argument_list|(
name|message
operator|.
name|getStr
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|)
argument_list|)
operator|&&
name|collectionName
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|collectionWip
init|)
block|{
name|collectionWip
operator|.
name|add
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|unmarkExclusiveTask
specifier|public
name|void
name|unmarkExclusiveTask
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|operation
parameter_list|)
block|{
if|if
condition|(
operator|!
name|CLUSTERSTATUS
operator|.
name|isEqual
argument_list|(
name|operation
argument_list|)
operator|&&
name|collectionName
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|collectionWip
init|)
block|{
name|collectionWip
operator|.
name|remove
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|checkExclusiveMarking
specifier|public
name|ExclusiveMarking
name|checkExclusiveMarking
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
comment|// CLUSTERSTATUS is always mutually exclusive
comment|//TODO deprecated remove this check .
if|if
condition|(
name|CLUSTERSTATUS
operator|.
name|isEqual
argument_list|(
name|message
operator|.
name|getStr
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|)
argument_list|)
condition|)
return|return
name|ExclusiveMarking
operator|.
name|EXCLUSIVE
return|;
if|if
condition|(
name|collectionWip
operator|.
name|contains
argument_list|(
name|collectionName
argument_list|)
condition|)
return|return
name|ExclusiveMarking
operator|.
name|NONEXCLUSIVE
return|;
return|return
name|ExclusiveMarking
operator|.
name|NOTDETERMINED
return|;
block|}
block|}
end_class
end_unit
