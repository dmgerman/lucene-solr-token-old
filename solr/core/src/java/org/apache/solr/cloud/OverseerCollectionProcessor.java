begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|AbstractUpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|UpdateResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|DistributedQueue
operator|.
name|QueueEvent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|Overseer
operator|.
name|LeaderStatus
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Aliases
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClosableThread
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|CompositeIdRouter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocRouter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ImplicitDocRouter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|PlainIdRouter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|RoutingRule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZooKeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
operator|.
name|CoreAdminAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|MapSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|SolrIndexSplitter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|Assign
operator|.
name|Node
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|Assign
operator|.
name|getNodesForNewShard
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|COLLECTION_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|REPLICA_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|ADDROLE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|REMOVEROLE
import|;
end_import
begin_class
DECL|class|OverseerCollectionProcessor
specifier|public
class|class
name|OverseerCollectionProcessor
implements|implements
name|Runnable
implements|,
name|ClosableThread
block|{
DECL|field|NUM_SLICES
specifier|public
specifier|static
specifier|final
name|String
name|NUM_SLICES
init|=
literal|"numShards"
decl_stmt|;
DECL|field|REPLICATION_FACTOR
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_FACTOR
init|=
literal|"replicationFactor"
decl_stmt|;
DECL|field|MAX_SHARDS_PER_NODE
specifier|public
specifier|static
specifier|final
name|String
name|MAX_SHARDS_PER_NODE
init|=
literal|"maxShardsPerNode"
decl_stmt|;
DECL|field|CREATE_NODE_SET
specifier|public
specifier|static
specifier|final
name|String
name|CREATE_NODE_SET
init|=
literal|"createNodeSet"
decl_stmt|;
DECL|field|DELETECOLLECTION
specifier|public
specifier|static
specifier|final
name|String
name|DELETECOLLECTION
init|=
literal|"deletecollection"
decl_stmt|;
DECL|field|CREATECOLLECTION
specifier|public
specifier|static
specifier|final
name|String
name|CREATECOLLECTION
init|=
literal|"createcollection"
decl_stmt|;
DECL|field|RELOADCOLLECTION
specifier|public
specifier|static
specifier|final
name|String
name|RELOADCOLLECTION
init|=
literal|"reloadcollection"
decl_stmt|;
DECL|field|CREATEALIAS
specifier|public
specifier|static
specifier|final
name|String
name|CREATEALIAS
init|=
literal|"createalias"
decl_stmt|;
DECL|field|DELETEALIAS
specifier|public
specifier|static
specifier|final
name|String
name|DELETEALIAS
init|=
literal|"deletealias"
decl_stmt|;
DECL|field|SPLITSHARD
specifier|public
specifier|static
specifier|final
name|String
name|SPLITSHARD
init|=
literal|"splitshard"
decl_stmt|;
DECL|field|DELETESHARD
specifier|public
specifier|static
specifier|final
name|String
name|DELETESHARD
init|=
literal|"deleteshard"
decl_stmt|;
DECL|field|ROUTER
specifier|public
specifier|static
specifier|final
name|String
name|ROUTER
init|=
literal|"router"
decl_stmt|;
DECL|field|SHARDS_PROP
specifier|public
specifier|static
specifier|final
name|String
name|SHARDS_PROP
init|=
literal|"shards"
decl_stmt|;
DECL|field|CREATESHARD
specifier|public
specifier|static
specifier|final
name|String
name|CREATESHARD
init|=
literal|"createshard"
decl_stmt|;
DECL|field|DELETEREPLICA
specifier|public
specifier|static
specifier|final
name|String
name|DELETEREPLICA
init|=
literal|"deletereplica"
decl_stmt|;
DECL|field|MIGRATE
specifier|public
specifier|static
specifier|final
name|String
name|MIGRATE
init|=
literal|"migrate"
decl_stmt|;
DECL|field|COLL_CONF
specifier|public
specifier|static
specifier|final
name|String
name|COLL_CONF
init|=
literal|"collection.configName"
decl_stmt|;
DECL|field|COLL_PROP_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|COLL_PROP_PREFIX
init|=
literal|"property."
decl_stmt|;
DECL|field|KNOWN_CLUSTER_PROPS
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|KNOWN_CLUSTER_PROPS
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"legacyCloud"
argument_list|,
literal|"urlScheme"
argument_list|)
decl_stmt|;
DECL|field|COLL_PROPS
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|COLL_PROPS
init|=
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
name|ROUTER
argument_list|,
name|DocRouter
operator|.
name|DEFAULT_NAME
argument_list|,
name|REPLICATION_FACTOR
argument_list|,
literal|"1"
argument_list|,
name|MAX_SHARDS_PER_NODE
argument_list|,
literal|"1"
argument_list|,
literal|"external"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// TODO: use from Overseer?
DECL|field|QUEUE_OPERATION
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE_OPERATION
init|=
literal|"operation"
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OverseerCollectionProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|workQueue
specifier|private
name|DistributedQueue
name|workQueue
decl_stmt|;
DECL|field|myId
specifier|private
name|String
name|myId
decl_stmt|;
DECL|field|shardHandler
specifier|private
name|ShardHandler
name|shardHandler
decl_stmt|;
DECL|field|adminPath
specifier|private
name|String
name|adminPath
decl_stmt|;
DECL|field|zkStateReader
specifier|private
name|ZkStateReader
name|zkStateReader
decl_stmt|;
DECL|field|isClosed
specifier|private
name|boolean
name|isClosed
decl_stmt|;
DECL|method|OverseerCollectionProcessor
specifier|public
name|OverseerCollectionProcessor
parameter_list|(
name|ZkStateReader
name|zkStateReader
parameter_list|,
name|String
name|myId
parameter_list|,
name|ShardHandler
name|shardHandler
parameter_list|,
name|String
name|adminPath
parameter_list|)
block|{
name|this
argument_list|(
name|zkStateReader
argument_list|,
name|myId
argument_list|,
name|shardHandler
argument_list|,
name|adminPath
argument_list|,
name|Overseer
operator|.
name|getCollectionQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|OverseerCollectionProcessor
specifier|protected
name|OverseerCollectionProcessor
parameter_list|(
name|ZkStateReader
name|zkStateReader
parameter_list|,
name|String
name|myId
parameter_list|,
name|ShardHandler
name|shardHandler
parameter_list|,
name|String
name|adminPath
parameter_list|,
name|DistributedQueue
name|workQueue
parameter_list|)
block|{
name|this
operator|.
name|zkStateReader
operator|=
name|zkStateReader
expr_stmt|;
name|this
operator|.
name|myId
operator|=
name|myId
expr_stmt|;
name|this
operator|.
name|shardHandler
operator|=
name|shardHandler
expr_stmt|;
name|this
operator|.
name|adminPath
operator|=
name|adminPath
expr_stmt|;
name|this
operator|.
name|workQueue
operator|=
name|workQueue
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Process current queue of collection creations"
argument_list|)
expr_stmt|;
name|LeaderStatus
name|isLeader
init|=
name|amILeader
argument_list|()
decl_stmt|;
while|while
condition|(
name|isLeader
operator|==
name|LeaderStatus
operator|.
name|DONT_KNOW
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"am_i_leader unclear {}"
argument_list|,
name|isLeader
argument_list|)
expr_stmt|;
name|isLeader
operator|=
name|amILeader
argument_list|()
expr_stmt|;
comment|// not a no, not a yes, try ask again
block|}
try|try
block|{
name|prioritizeOverseerNodes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to prioritize overseer "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|this
operator|.
name|isClosed
condition|)
block|{
try|try
block|{
name|isLeader
operator|=
name|amILeader
argument_list|()
expr_stmt|;
if|if
condition|(
name|LeaderStatus
operator|.
name|NO
operator|==
name|isLeader
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|LeaderStatus
operator|.
name|YES
operator|!=
name|isLeader
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"am_i_leader unclear {}"
argument_list|,
name|isLeader
argument_list|)
expr_stmt|;
continue|continue;
comment|// not a no, not a yes, try asking again
block|}
name|QueueEvent
name|head
init|=
name|workQueue
operator|.
name|peek
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|ZkNodeProps
name|message
init|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|head
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Overseer Collection Processor: Get the message id:"
operator|+
name|head
operator|.
name|getId
argument_list|()
operator|+
literal|" message:"
operator|+
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|operation
init|=
name|message
operator|.
name|getStr
argument_list|(
name|QUEUE_OPERATION
argument_list|)
decl_stmt|;
name|SolrResponse
name|response
init|=
name|processMessage
argument_list|(
name|message
argument_list|,
name|operation
argument_list|)
decl_stmt|;
name|head
operator|.
name|setBytes
argument_list|(
name|SolrResponse
operator|.
name|serializable
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|workQueue
operator|.
name|remove
argument_list|(
name|head
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Overseer Collection Processor: Message id:"
operator|+
name|head
operator|.
name|getId
argument_list|()
operator|+
literal|" complete, response:"
operator|+
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|SESSIONEXPIRED
operator|||
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|CONNECTIONLOSS
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Overseer cannot talk to ZK"
argument_list|)
expr_stmt|;
return|return;
block|}
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|isClosed
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|prioritizeOverseerNodes
specifier|private
name|void
name|prioritizeOverseerNodes
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"prioritizing overseer nodes"
argument_list|)
expr_stmt|;
name|SolrZkClient
name|zk
init|=
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|zk
operator|.
name|exists
argument_list|(
name|ZkStateReader
operator|.
name|ROLES
argument_list|,
literal|true
argument_list|)
condition|)
return|return;
name|Map
name|m
init|=
operator|(
name|Map
operator|)
name|ZkStateReader
operator|.
name|fromJSON
argument_list|(
name|zk
operator|.
name|getData
argument_list|(
name|ZkStateReader
operator|.
name|ROLES
argument_list|,
literal|null
argument_list|,
operator|new
name|Stat
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|List
name|overseerDesignates
init|=
operator|(
name|List
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"overseer"
argument_list|)
decl_stmt|;
if|if
condition|(
name|overseerDesignates
operator|==
literal|null
operator|||
name|overseerDesignates
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|overseerDesignates
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|overseerDesignates
operator|.
name|contains
argument_list|(
name|getLeaderNode
argument_list|(
name|zk
argument_list|)
argument_list|)
condition|)
return|return;
name|log
operator|.
name|info
argument_list|(
literal|"overseer designates {}"
argument_list|,
name|overseerDesignates
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodeNames
init|=
name|getSortedNodeNames
argument_list|(
name|zk
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeNames
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
return|return;
comment|//
name|ArrayList
argument_list|<
name|String
argument_list|>
name|nodesTobePushedBack
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//ensure that the node right behind the leader , i.r at position 1 is a Overseer
name|List
argument_list|<
name|String
argument_list|>
name|availableDesignates
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"sorted nodes {}"
argument_list|,
name|nodeNames
argument_list|)
expr_stmt|;
comment|//TODO to be removed
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s
init|=
name|nodeNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|overseerDesignates
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|availableDesignates
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|overseerDesignates
operator|.
name|contains
argument_list|(
name|nodeNames
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|nodesTobePushedBack
operator|.
name|contains
argument_list|(
name|nodeNames
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
name|nodesTobePushedBack
operator|.
name|add
argument_list|(
name|nodeNames
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|availableDesignates
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
break|break;
block|}
if|if
condition|(
operator|!
name|availableDesignates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|nodesTobePushedBack
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|String
name|s
init|=
name|nodesTobePushedBack
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"pushing back {} "
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|invokeOverseerOp
argument_list|(
name|s
argument_list|,
literal|"rejoin"
argument_list|)
expr_stmt|;
block|}
comment|//wait for a while to ensure the designate has indeed come in front
name|boolean
name|prioritizationComplete
init|=
literal|false
decl_stmt|;
name|long
name|timeout
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|2500
decl_stmt|;
for|for
control|(
init|;
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeout
condition|;
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|currentNodeNames
init|=
name|getSortedNodeNames
argument_list|(
name|zk
argument_list|)
decl_stmt|;
name|int
name|totalLeaders
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|availableDesignates
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|overseerDesignates
operator|.
name|contains
argument_list|(
name|currentNodeNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
name|totalLeaders
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|totalLeaders
operator|==
name|availableDesignates
operator|.
name|size
argument_list|()
condition|)
block|{
name|prioritizationComplete
operator|=
literal|true
expr_stmt|;
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Thread interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|prioritizationComplete
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"available designates and current state {} {} "
argument_list|,
name|availableDesignates
argument_list|,
name|getSortedNodeNames
argument_list|(
name|zk
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No overseer designates are available, overseerDesignates: {}, live nodes : {}"
argument_list|,
name|overseerDesignates
argument_list|,
name|nodeNames
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|leaderNode
init|=
name|getLeaderNode
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leaderNode
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
operator|!
name|overseerDesignates
operator|.
name|contains
argument_list|(
name|leaderNode
argument_list|)
operator|&&
operator|!
name|availableDesignates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//this means there are designated Overseer nodes and I am not one of them , kill myself
name|String
name|newLeader
init|=
name|availableDesignates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"I am not an overseerdesignate , forcing a new leader {} "
argument_list|,
name|newLeader
argument_list|)
expr_stmt|;
name|invokeOverseerOp
argument_list|(
name|newLeader
argument_list|,
literal|"leader"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSortedNodeNames
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getSortedNodeNames
parameter_list|(
name|SolrZkClient
name|zk
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
literal|null
decl_stmt|;
try|try
block|{
name|children
operator|=
name|zk
operator|.
name|getChildren
argument_list|(
name|OverseerElectionContext
operator|.
name|PATH
operator|+
name|LeaderElector
operator|.
name|ELECTION_NODE
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
return|;
block|}
name|LeaderElector
operator|.
name|sortSeqs
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|nodeNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|children
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
name|children
control|)
name|nodeNames
operator|.
name|add
argument_list|(
name|LeaderElector
operator|.
name|getNodeName
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|nodeNames
return|;
block|}
DECL|method|getLeaderNode
specifier|public
specifier|static
name|String
name|getLeaderNode
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
name|data
operator|=
name|zkClient
operator|.
name|getData
argument_list|(
literal|"/overseer_elect/leader"
argument_list|,
literal|null
argument_list|,
operator|new
name|Stat
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
name|Map
name|m
init|=
operator|(
name|Map
operator|)
name|ZkStateReader
operator|.
name|fromJSON
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|String
name|s
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
comment|//    log.info("leader-id {}",s);
name|String
name|nodeName
init|=
name|LeaderElector
operator|.
name|getNodeName
argument_list|(
name|s
argument_list|)
decl_stmt|;
comment|//    log.info("Leader {}", nodeName);
return|return
name|nodeName
return|;
block|}
DECL|method|invokeOverseerOp
specifier|private
name|void
name|invokeOverseerOp
parameter_list|(
name|String
name|nodeName
parameter_list|,
name|String
name|op
parameter_list|)
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|OVERSEEROP
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"op"
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
name|adminPath
argument_list|)
expr_stmt|;
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|sreq
operator|.
name|purpose
operator|=
literal|1
expr_stmt|;
name|String
name|replica
init|=
name|nodeName
operator|.
name|replaceFirst
argument_list|(
literal|"_"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|sreq
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|replica
block|}
expr_stmt|;
name|sreq
operator|.
name|actualShards
operator|=
name|sreq
operator|.
name|shards
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|shardHandler
operator|.
name|submit
argument_list|(
name|sreq
argument_list|,
name|replica
argument_list|,
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
block|}
DECL|method|amILeader
specifier|protected
name|LeaderStatus
name|amILeader
parameter_list|()
block|{
try|try
block|{
name|ZkNodeProps
name|props
init|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|getData
argument_list|(
literal|"/overseer_elect/leader"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|myId
operator|.
name|equals
argument_list|(
name|props
operator|.
name|getStr
argument_list|(
literal|"id"
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|LeaderStatus
operator|.
name|YES
return|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|CONNECTIONLOSS
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|LeaderStatus
operator|.
name|DONT_KNOW
return|;
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|SESSIONEXPIRED
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"According to ZK I (id="
operator|+
name|myId
operator|+
literal|") am no longer a leader."
argument_list|)
expr_stmt|;
return|return
name|LeaderStatus
operator|.
name|NO
return|;
block|}
DECL|method|processMessage
specifier|protected
name|SolrResponse
name|processMessage
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|String
name|operation
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"OverseerCollectionProcessor.processMessage : "
operator|+
name|operation
operator|+
literal|" , "
operator|+
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|NamedList
name|results
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|CREATECOLLECTION
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|createCollection
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|message
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DELETECOLLECTION
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|deleteCollection
argument_list|(
name|message
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RELOADCOLLECTION
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|RELOAD
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|collectionCmd
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|message
argument_list|,
name|params
argument_list|,
name|results
argument_list|,
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CREATEALIAS
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|createAlias
argument_list|(
name|zkStateReader
operator|.
name|getAliases
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DELETEALIAS
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|deleteAlias
argument_list|(
name|zkStateReader
operator|.
name|getAliases
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SPLITSHARD
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|splitShard
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|message
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CREATESHARD
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|createShard
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|message
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DELETESHARD
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|deleteShard
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|message
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DELETEREPLICA
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|deleteReplica
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|message
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MIGRATE
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|migrate
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|message
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CLUSTERPROP
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|handleProp
argument_list|(
name|message
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|REMOVEROLE
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
operator|||
name|ADDROLE
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|processRoleCommand
argument_list|(
name|message
argument_list|,
name|operation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown operation:"
operator|+
name|operation
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Collection "
operator|+
name|operation
operator|+
literal|" of "
operator|+
name|operation
operator|+
literal|" failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"Operation "
operator|+
name|operation
operator|+
literal|" caused exception:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|SimpleOrderedMap
name|nl
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"msg"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"rspCode"
argument_list|,
name|e
operator|instanceof
name|SolrException
condition|?
operator|(
operator|(
name|SolrException
operator|)
name|e
operator|)
operator|.
name|code
argument_list|()
else|:
operator|-
literal|1
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"exception"
argument_list|,
name|nl
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|OverseerSolrResponse
argument_list|(
name|results
argument_list|)
return|;
block|}
DECL|method|handleProp
specifier|private
name|void
name|handleProp
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|name
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|val
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"val"
argument_list|)
decl_stmt|;
name|Map
name|m
init|=
name|zkStateReader
operator|.
name|getClusterProps
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
name|m
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
else|else
name|m
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|exists
argument_list|(
name|ZkStateReader
operator|.
name|CLUSTER_PROPS
argument_list|,
literal|true
argument_list|)
condition|)
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|setData
argument_list|(
name|ZkStateReader
operator|.
name|CLUSTER_PROPS
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|else
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|create
argument_list|(
name|ZkStateReader
operator|.
name|CLUSTER_PROPS
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|processRoleCommand
specifier|private
name|void
name|processRoleCommand
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|SolrZkClient
name|zkClient
init|=
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
decl_stmt|;
name|Map
name|roles
init|=
literal|null
decl_stmt|;
name|String
name|node
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
name|String
name|roleName
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"role"
argument_list|)
decl_stmt|;
name|boolean
name|nodeExists
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|nodeExists
operator|=
name|zkClient
operator|.
name|exists
argument_list|(
name|ZkStateReader
operator|.
name|ROLES
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|roles
operator|=
operator|(
name|Map
operator|)
name|ZkStateReader
operator|.
name|fromJSON
argument_list|(
name|zkClient
operator|.
name|getData
argument_list|(
name|ZkStateReader
operator|.
name|ROLES
argument_list|,
literal|null
argument_list|,
operator|new
name|Stat
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|roles
operator|=
operator|new
name|LinkedHashMap
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|List
name|nodeList
init|=
operator|(
name|List
operator|)
name|roles
operator|.
name|get
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeList
operator|==
literal|null
condition|)
name|roles
operator|.
name|put
argument_list|(
name|roleName
argument_list|,
name|nodeList
operator|=
operator|new
name|ArrayList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ADDROLE
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Overseer role added to {}"
argument_list|,
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nodeList
operator|.
name|contains
argument_list|(
name|node
argument_list|)
condition|)
name|nodeList
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|REMOVEROLE
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Overseer role removed from {}"
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|nodeList
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeExists
condition|)
block|{
name|zkClient
operator|.
name|setData
argument_list|(
name|ZkStateReader
operator|.
name|ROLES
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|roles
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|zkClient
operator|.
name|create
argument_list|(
name|ZkStateReader
operator|.
name|ROLES
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|roles
argument_list|)
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//if there are too many nodes this command may time out. And most likely dedicated
comment|// overseers are created when there are too many nodes  . So , do this operation in a separate thread
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|prioritizeOverseerNodes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error in prioritizing Overseer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|deleteReplica
specifier|private
name|void
name|deleteReplica
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|checkRequired
argument_list|(
name|message
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|REPLICA_PROP
argument_list|)
expr_stmt|;
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
name|String
name|shard
init|=
name|message
operator|.
name|getStr
argument_list|(
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|String
name|replicaName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|REPLICA_PROP
argument_list|)
decl_stmt|;
name|DocCollection
name|coll
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|Slice
name|slice
init|=
name|coll
operator|.
name|getSlice
argument_list|(
name|shard
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Invalid shard name : "
operator|+
name|shard
operator|+
literal|" in collection : "
operator|+
name|collectionName
argument_list|)
throw|;
block|}
name|Replica
name|replica
init|=
name|slice
operator|.
name|getReplica
argument_list|(
name|replicaName
argument_list|)
decl_stmt|;
if|if
condition|(
name|replica
operator|==
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Replica
name|r
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
name|l
operator|.
name|add
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Invalid replica : "
operator|+
name|replicaName
operator|+
literal|" in shard/collection : "
operator|+
name|shard
operator|+
literal|"/"
operator|+
name|collectionName
operator|+
literal|" available replicas are "
operator|+
name|StrUtils
operator|.
name|join
argument_list|(
name|l
argument_list|,
literal|','
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|baseUrl
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
decl_stmt|;
name|String
name|core
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
comment|// assume the core exists and try to unload it
name|Map
name|m
init|=
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
literal|"qt"
argument_list|,
name|adminPath
argument_list|,
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|UNLOAD
operator|.
name|toString
argument_list|()
argument_list|,
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
name|core
argument_list|)
decl_stmt|;
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|sreq
operator|.
name|purpose
operator|=
literal|1
expr_stmt|;
name|sreq
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|baseUrl
block|}
expr_stmt|;
name|sreq
operator|.
name|actualShards
operator|=
name|sreq
operator|.
name|shards
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|(
operator|new
name|MapSolrParams
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|shardHandler
operator|.
name|submit
argument_list|(
name|sreq
argument_list|,
name|baseUrl
argument_list|,
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exception trying to unload core "
operator|+
name|sreq
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|collectShardResponses
argument_list|(
operator|!
name|Slice
operator|.
name|ACTIVE
operator|.
name|equals
argument_list|(
name|replica
operator|.
name|getStr
argument_list|(
name|Slice
operator|.
name|STATE
argument_list|)
argument_list|)
condition|?
operator|new
name|NamedList
argument_list|()
else|:
name|results
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|waitForCoreNodeGone
argument_list|(
name|collectionName
argument_list|,
name|shard
argument_list|,
name|replicaName
argument_list|,
literal|5000
argument_list|)
condition|)
return|return;
comment|//check if the core unload removed the corenode zk enry
name|deleteCoreNode
argument_list|(
name|collectionName
argument_list|,
name|replicaName
argument_list|,
name|replica
argument_list|,
name|core
argument_list|)
expr_stmt|;
comment|// try and ensure core info is removed from clusterstate
if|if
condition|(
name|waitForCoreNodeGone
argument_list|(
name|collectionName
argument_list|,
name|shard
argument_list|,
name|replicaName
argument_list|,
literal|30000
argument_list|)
condition|)
return|return;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not  remove replica : "
operator|+
name|collectionName
operator|+
literal|"/"
operator|+
name|shard
operator|+
literal|"/"
operator|+
name|replicaName
argument_list|)
throw|;
block|}
DECL|method|waitForCoreNodeGone
specifier|private
name|boolean
name|waitForCoreNodeGone
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|shard
parameter_list|,
name|String
name|replicaName
parameter_list|,
name|int
name|timeoutms
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|waitUntil
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|timeoutms
decl_stmt|;
name|boolean
name|deleted
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|waitUntil
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|deleted
operator|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
operator|.
name|getSlice
argument_list|(
name|shard
argument_list|)
operator|.
name|getReplica
argument_list|(
name|replicaName
argument_list|)
operator|==
literal|null
expr_stmt|;
if|if
condition|(
name|deleted
condition|)
break|break;
block|}
return|return
name|deleted
return|;
block|}
DECL|method|deleteCoreNode
specifier|private
name|void
name|deleteCoreNode
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|replicaName
parameter_list|,
name|Replica
name|replica
parameter_list|,
name|String
name|core
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|Overseer
operator|.
name|DELETECORE
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|core
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|,
name|replicaName
argument_list|)
decl_stmt|;
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkRequired
specifier|private
name|void
name|checkRequired
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|String
modifier|...
name|props
parameter_list|)
block|{
for|for
control|(
name|String
name|prop
range|:
name|props
control|)
block|{
if|if
condition|(
name|message
operator|.
name|get
argument_list|(
name|prop
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|StrUtils
operator|.
name|join
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|props
argument_list|)
argument_list|,
literal|','
argument_list|)
operator|+
literal|" are required params"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|deleteCollection
specifier|private
name|void
name|deleteCollection
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
try|try
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|UNLOAD
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_INSTANCE_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_DATA_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|collectionCmd
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|message
argument_list|,
name|params
argument_list|,
name|results
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|Overseer
operator|.
name|REMOVECOLLECTION
argument_list|,
literal|"name"
argument_list|,
name|collection
argument_list|)
decl_stmt|;
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for a while until we don't see the collection
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|timeout
init|=
name|now
operator|+
literal|30000
decl_stmt|;
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeout
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|removed
operator|=
operator|!
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|hasCollection
argument_list|(
name|message
operator|.
name|getStr
argument_list|(
name|collection
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|removed
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// just a bit of time so it's more likely other
comment|// readers see on return
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|removed
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not fully remove collection: "
operator|+
name|message
operator|.
name|getStr
argument_list|(
literal|"name"
argument_list|)
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|exists
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|clean
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Cleaning up collection in zk was interrupted:"
operator|+
name|collection
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Problem cleaning up collection in zk:"
operator|+
name|collection
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createAlias
specifier|private
name|void
name|createAlias
parameter_list|(
name|Aliases
name|aliases
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|String
name|aliasName
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|collections
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"collections"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|newAliasesMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newCollectionAliasesMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prevColAliases
init|=
name|aliases
operator|.
name|getCollectionAliasMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|prevColAliases
operator|!=
literal|null
condition|)
block|{
name|newCollectionAliasesMap
operator|.
name|putAll
argument_list|(
name|prevColAliases
argument_list|)
expr_stmt|;
block|}
name|newCollectionAliasesMap
operator|.
name|put
argument_list|(
name|aliasName
argument_list|,
name|collections
argument_list|)
expr_stmt|;
name|newAliasesMap
operator|.
name|put
argument_list|(
literal|"collection"
argument_list|,
name|newCollectionAliasesMap
argument_list|)
expr_stmt|;
name|Aliases
name|newAliases
init|=
operator|new
name|Aliases
argument_list|(
name|newAliasesMap
argument_list|)
decl_stmt|;
name|byte
index|[]
name|jsonBytes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|newAliases
operator|.
name|collectionAliasSize
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// only sub map right now
name|jsonBytes
operator|=
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|newAliases
operator|.
name|getAliasMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|setData
argument_list|(
name|ZkStateReader
operator|.
name|ALIASES
argument_list|,
name|jsonBytes
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkForAlias
argument_list|(
name|aliasName
argument_list|,
name|collections
argument_list|)
expr_stmt|;
comment|// some fudge for other nodes
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|checkForAlias
specifier|private
name|void
name|checkForAlias
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|timeout
init|=
name|now
operator|+
literal|30000
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Aliases
name|aliases
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeout
condition|)
block|{
name|aliases
operator|=
name|zkStateReader
operator|.
name|getAliases
argument_list|()
expr_stmt|;
name|String
name|collections
init|=
name|aliases
operator|.
name|getCollectionAlias
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|collections
operator|!=
literal|null
operator|&&
name|collections
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|success
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Timeout waiting to be notified of Alias change..."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkForAliasAbsence
specifier|private
name|void
name|checkForAliasAbsence
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|timeout
init|=
name|now
operator|+
literal|30000
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Aliases
name|aliases
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeout
condition|)
block|{
name|aliases
operator|=
name|zkStateReader
operator|.
name|getAliases
argument_list|()
expr_stmt|;
name|String
name|collections
init|=
name|aliases
operator|.
name|getCollectionAlias
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|collections
operator|==
literal|null
condition|)
block|{
name|success
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Timeout waiting to be notified of Alias change..."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteAlias
specifier|private
name|void
name|deleteAlias
parameter_list|(
name|Aliases
name|aliases
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|String
name|aliasName
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|newAliasesMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newCollectionAliasesMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|newCollectionAliasesMap
operator|.
name|putAll
argument_list|(
name|aliases
operator|.
name|getCollectionAliasMap
argument_list|()
argument_list|)
expr_stmt|;
name|newCollectionAliasesMap
operator|.
name|remove
argument_list|(
name|aliasName
argument_list|)
expr_stmt|;
name|newAliasesMap
operator|.
name|put
argument_list|(
literal|"collection"
argument_list|,
name|newCollectionAliasesMap
argument_list|)
expr_stmt|;
name|Aliases
name|newAliases
init|=
operator|new
name|Aliases
argument_list|(
name|newAliasesMap
argument_list|)
decl_stmt|;
name|byte
index|[]
name|jsonBytes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|newAliases
operator|.
name|collectionAliasSize
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// only sub map right now
name|jsonBytes
operator|=
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|newAliases
operator|.
name|getAliasMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|setData
argument_list|(
name|ZkStateReader
operator|.
name|ALIASES
argument_list|,
name|jsonBytes
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkForAliasAbsence
argument_list|(
name|aliasName
argument_list|)
expr_stmt|;
comment|// some fudge for other nodes
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createShard
specifier|private
name|boolean
name|createShard
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Create shard invoked: {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
name|String
name|shard
init|=
name|message
operator|.
name|getStr
argument_list|(
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|collectionName
operator|==
literal|null
operator|||
name|shard
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"'collection' and 'shard' are required parameters"
argument_list|)
throw|;
name|int
name|numSlices
init|=
literal|1
decl_stmt|;
name|DocCollection
name|collection
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|int
name|maxShardsPerNode
init|=
name|collection
operator|.
name|getInt
argument_list|(
name|MAX_SHARDS_PER_NODE
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|repFactor
init|=
name|message
operator|.
name|getInt
argument_list|(
name|REPLICATION_FACTOR
argument_list|,
name|collection
operator|.
name|getInt
argument_list|(
name|REPLICATION_FACTOR
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|createNodeSetStr
init|=
name|message
operator|.
name|getStr
argument_list|(
name|CREATE_NODE_SET
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|sortedNodeList
init|=
name|getNodesForNewShard
argument_list|(
name|clusterState
argument_list|,
name|collectionName
argument_list|,
name|numSlices
argument_list|,
name|maxShardsPerNode
argument_list|,
name|repFactor
argument_list|,
name|createNodeSetStr
argument_list|)
decl_stmt|;
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for a while until we see the shard
name|long
name|waitUntil
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|30000
decl_stmt|;
name|boolean
name|created
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|waitUntil
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|created
operator|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
operator|.
name|getSlice
argument_list|(
name|shard
argument_list|)
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
name|created
condition|)
break|break;
block|}
if|if
condition|(
operator|!
name|created
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not fully create shard: "
operator|+
name|message
operator|.
name|getStr
argument_list|(
literal|"name"
argument_list|)
argument_list|)
throw|;
name|String
name|configName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|COLL_CONF
argument_list|)
decl_stmt|;
name|String
name|sliceName
init|=
name|shard
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|repFactor
condition|;
name|j
operator|++
control|)
block|{
name|String
name|nodeName
init|=
name|sortedNodeList
operator|.
name|get
argument_list|(
operator|(
operator|(
name|j
operator|-
literal|1
operator|)
operator|)
operator|%
name|sortedNodeList
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|nodeName
decl_stmt|;
name|String
name|shardName
init|=
name|collectionName
operator|+
literal|"_"
operator|+
name|sliceName
operator|+
literal|"_replica"
operator|+
name|j
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Creating shard "
operator|+
name|shardName
operator|+
literal|" as part of slice "
operator|+
name|sliceName
operator|+
literal|" of collection "
operator|+
name|collectionName
operator|+
literal|" on "
operator|+
name|nodeName
argument_list|)
expr_stmt|;
comment|// Need to create new params for each request
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|shardName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|COLL_CONF
argument_list|,
name|configName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|SHARD
argument_list|,
name|sliceName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
name|numSlices
argument_list|)
expr_stmt|;
name|addPropertyParams
argument_list|(
name|message
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
name|adminPath
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|purpose
operator|=
literal|1
expr_stmt|;
name|String
name|replica
init|=
name|zkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
name|sreq
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|replica
block|}
expr_stmt|;
name|sreq
operator|.
name|actualShards
operator|=
name|sreq
operator|.
name|shards
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|shardHandler
operator|.
name|submit
argument_list|(
name|sreq
argument_list|,
name|replica
argument_list|,
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
block|}
name|ShardResponse
name|srsp
decl_stmt|;
do|do
block|{
name|srsp
operator|=
name|shardHandler
operator|.
name|takeCompletedOrError
argument_list|()
expr_stmt|;
if|if
condition|(
name|srsp
operator|!=
literal|null
condition|)
block|{
name|processResponse
argument_list|(
name|results
argument_list|,
name|srsp
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|srsp
operator|!=
literal|null
condition|)
do|;
name|log
operator|.
name|info
argument_list|(
literal|"Finished create command on all shards for collection: "
operator|+
name|collectionName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|splitShard
specifier|private
name|boolean
name|splitShard
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Split shard invoked"
argument_list|)
expr_stmt|;
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"collection"
argument_list|)
decl_stmt|;
name|String
name|slice
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|String
name|splitKey
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"split.key"
argument_list|)
decl_stmt|;
name|DocCollection
name|collection
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|DocRouter
name|router
init|=
name|collection
operator|.
name|getRouter
argument_list|()
operator|!=
literal|null
condition|?
name|collection
operator|.
name|getRouter
argument_list|()
else|:
name|DocRouter
operator|.
name|DEFAULT
decl_stmt|;
name|Slice
name|parentSlice
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|router
operator|instanceof
name|CompositeIdRouter
condition|)
block|{
name|Collection
argument_list|<
name|Slice
argument_list|>
name|searchSlices
init|=
name|router
operator|.
name|getSearchSlicesSingle
argument_list|(
name|splitKey
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|()
argument_list|,
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|searchSlices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unable to find an active shard for split.key: "
operator|+
name|splitKey
argument_list|)
throw|;
block|}
if|if
condition|(
name|searchSlices
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Splitting a split.key: "
operator|+
name|splitKey
operator|+
literal|" which spans multiple shards is not supported"
argument_list|)
throw|;
block|}
name|parentSlice
operator|=
name|searchSlices
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|slice
operator|=
name|parentSlice
operator|.
name|getName
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Split by route.key: {}, parent shard is: {} "
argument_list|,
name|splitKey
argument_list|,
name|slice
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Split by route key can only be used with CompositeIdRouter or subclass. Found router: "
operator|+
name|router
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|parentSlice
operator|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collectionName
argument_list|,
name|slice
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentSlice
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|clusterState
operator|.
name|hasCollection
argument_list|(
name|collectionName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No shard with the specified name exists: "
operator|+
name|slice
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No collection with the specified name exists: "
operator|+
name|collectionName
argument_list|)
throw|;
block|}
block|}
comment|// find the leader for the shard
name|Replica
name|parentShardLeader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parentShardLeader
operator|=
name|zkStateReader
operator|.
name|getLeaderRetry
argument_list|(
name|collectionName
argument_list|,
name|slice
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|DocRouter
operator|.
name|Range
name|range
init|=
name|parentSlice
operator|.
name|getRange
argument_list|()
decl_stmt|;
if|if
condition|(
name|range
operator|==
literal|null
condition|)
block|{
name|range
operator|=
operator|new
name|PlainIdRouter
argument_list|()
operator|.
name|fullRange
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|DocRouter
operator|.
name|Range
argument_list|>
name|subRanges
init|=
literal|null
decl_stmt|;
name|String
name|rangesStr
init|=
name|message
operator|.
name|getStr
argument_list|(
name|CoreAdminParams
operator|.
name|RANGES
argument_list|)
decl_stmt|;
if|if
condition|(
name|rangesStr
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|ranges
init|=
name|rangesStr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|ranges
operator|.
name|length
operator|==
literal|0
operator|||
name|ranges
operator|.
name|length
operator|==
literal|1
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"There must be at least two ranges specified to split a shard"
argument_list|)
throw|;
block|}
else|else
block|{
name|subRanges
operator|=
operator|new
name|ArrayList
argument_list|<
name|DocRouter
operator|.
name|Range
argument_list|>
argument_list|(
name|ranges
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ranges
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|r
init|=
name|ranges
index|[
name|i
index|]
decl_stmt|;
try|try
block|{
name|subRanges
operator|.
name|add
argument_list|(
name|DocRouter
operator|.
name|DEFAULT
operator|.
name|fromString
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Exception in parsing hexadecimal hash range: "
operator|+
name|r
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|subRanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isSubsetOf
argument_list|(
name|range
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Specified hash range: "
operator|+
name|r
operator|+
literal|" is not a subset of parent shard's range: "
operator|+
name|range
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|List
argument_list|<
name|DocRouter
operator|.
name|Range
argument_list|>
name|temp
init|=
operator|new
name|ArrayList
argument_list|<
name|DocRouter
operator|.
name|Range
argument_list|>
argument_list|(
name|subRanges
argument_list|)
decl_stmt|;
comment|// copy to preserve original order
name|Collections
operator|.
name|sort
argument_list|(
name|temp
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|range
operator|.
name|equals
argument_list|(
operator|new
name|DocRouter
operator|.
name|Range
argument_list|(
name|temp
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|min
argument_list|,
name|temp
operator|.
name|get
argument_list|(
name|temp
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|max
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Specified hash ranges: "
operator|+
name|rangesStr
operator|+
literal|" do not cover the entire range of parent shard: "
operator|+
name|range
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|temp
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|temp
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|max
operator|+
literal|1
operator|!=
name|temp
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|min
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Specified hash ranges: "
operator|+
name|rangesStr
operator|+
literal|" either overlap with each other or "
operator|+
literal|"do not cover the entire range of parent shard: "
operator|+
name|range
argument_list|)
throw|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|splitKey
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|router
operator|instanceof
name|CompositeIdRouter
condition|)
block|{
name|CompositeIdRouter
name|compositeIdRouter
init|=
operator|(
name|CompositeIdRouter
operator|)
name|router
decl_stmt|;
name|subRanges
operator|=
name|compositeIdRouter
operator|.
name|partitionRangeByKey
argument_list|(
name|splitKey
argument_list|,
name|range
argument_list|)
expr_stmt|;
if|if
condition|(
name|subRanges
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"The split.key: "
operator|+
name|splitKey
operator|+
literal|" has a hash range that is exactly equal to hash range of shard: "
operator|+
name|slice
argument_list|)
throw|;
block|}
for|for
control|(
name|DocRouter
operator|.
name|Range
name|subRange
range|:
name|subRanges
control|)
block|{
if|if
condition|(
name|subRange
operator|.
name|min
operator|==
name|subRange
operator|.
name|max
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"The split.key: "
operator|+
name|splitKey
operator|+
literal|" must be a compositeId"
argument_list|)
throw|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Partitioning parent shard "
operator|+
name|slice
operator|+
literal|" range: "
operator|+
name|parentSlice
operator|.
name|getRange
argument_list|()
operator|+
literal|" yields: "
operator|+
name|subRanges
argument_list|)
expr_stmt|;
name|rangesStr
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subRanges
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DocRouter
operator|.
name|Range
name|subRange
init|=
name|subRanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|rangesStr
operator|+=
name|subRange
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|subRanges
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
name|rangesStr
operator|+=
literal|','
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// todo: fixed to two partitions?
name|subRanges
operator|=
name|router
operator|.
name|partitionRange
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|subSlices
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|subRanges
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|subShardNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|subRanges
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|nodeName
init|=
name|parentShardLeader
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subRanges
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|subSlice
init|=
name|slice
operator|+
literal|"_"
operator|+
name|i
decl_stmt|;
name|subSlices
operator|.
name|add
argument_list|(
name|subSlice
argument_list|)
expr_stmt|;
name|String
name|subShardName
init|=
name|collectionName
operator|+
literal|"_"
operator|+
name|subSlice
operator|+
literal|"_replica1"
decl_stmt|;
name|subShardNames
operator|.
name|add
argument_list|(
name|subShardName
argument_list|)
expr_stmt|;
name|Slice
name|oSlice
init|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collectionName
argument_list|,
name|subSlice
argument_list|)
decl_stmt|;
if|if
condition|(
name|oSlice
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Slice
operator|.
name|ACTIVE
operator|.
name|equals
argument_list|(
name|oSlice
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Sub-shard: "
operator|+
name|subSlice
operator|+
literal|" exists in active state. Aborting split shard."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|Slice
operator|.
name|CONSTRUCTION
operator|.
name|equals
argument_list|(
name|oSlice
operator|.
name|getState
argument_list|()
argument_list|)
operator|||
name|Slice
operator|.
name|RECOVERY
operator|.
name|equals
argument_list|(
name|oSlice
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
comment|// delete the shards
for|for
control|(
name|String
name|sub
range|:
name|subSlices
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Sub-shard: {} already exists therefore requesting its deletion"
argument_list|,
name|sub
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
literal|"deleteshard"
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|SHARD_ID_PROP
argument_list|,
name|sub
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
decl_stmt|;
try|try
block|{
name|deleteShard
argument_list|(
name|clusterState
argument_list|,
name|m
argument_list|,
operator|new
name|NamedList
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unable to delete already existing sub shard: "
operator|+
name|sub
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
comment|// do not abort splitshard if the unloading fails
comment|// this can happen because the replicas created previously may be down
comment|// the only side effect of this is that the sub shard may end up having more replicas than we want
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subRanges
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|subSlice
init|=
name|subSlices
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|subShardName
init|=
name|subShardNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DocRouter
operator|.
name|Range
name|subRange
init|=
name|subRanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Creating shard "
operator|+
name|subShardName
operator|+
literal|" as part of slice "
operator|+
name|subSlice
operator|+
literal|" of collection "
operator|+
name|collectionName
operator|+
literal|" on "
operator|+
name|nodeName
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
literal|"createshard"
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
name|subSlice
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_RANGE_PROP
argument_list|,
name|subRange
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_STATE_PROP
argument_list|,
name|Slice
operator|.
name|CONSTRUCTION
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_PARENT_PROP
argument_list|,
name|parentSlice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
decl_stmt|;
name|DistributedQueue
name|inQueue
init|=
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
decl_stmt|;
name|inQueue
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|subShardName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|SHARD
argument_list|,
name|subSlice
argument_list|)
expr_stmt|;
name|addPropertyParams
argument_list|(
name|message
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|sendShardRequest
argument_list|(
name|nodeName
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"SPLTSHARD failed to create subshard leaders"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|subShardName
range|:
name|subShardNames
control|)
block|{
comment|// wait for parent leader to acknowledge the sub-shard core
name|log
operator|.
name|info
argument_list|(
literal|"Asking parent leader to wait for: "
operator|+
name|subShardName
operator|+
literal|" to be alive on: "
operator|+
name|nodeName
argument_list|)
expr_stmt|;
name|String
name|coreNodeName
init|=
name|waitForCoreNodeName
argument_list|(
name|collection
argument_list|,
name|zkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|nodeName
argument_list|)
argument_list|,
name|subShardName
argument_list|)
decl_stmt|;
name|CoreAdminRequest
operator|.
name|WaitForState
name|cmd
init|=
operator|new
name|CoreAdminRequest
operator|.
name|WaitForState
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|setCoreName
argument_list|(
name|subShardName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setNodeName
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCoreNodeName
argument_list|(
name|coreNodeName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setState
argument_list|(
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCheckLive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setOnlyIfLeader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sendShardRequest
argument_list|(
name|nodeName
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|(
name|cmd
operator|.
name|getParams
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"SPLTSHARD timed out waiting for subshard leaders to come up"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Successfully created all sub-shards for collection "
operator|+
name|collectionName
operator|+
literal|" parent shard: "
operator|+
name|slice
operator|+
literal|" on: "
operator|+
name|parentShardLeader
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Splitting shard "
operator|+
name|parentShardLeader
operator|.
name|getName
argument_list|()
operator|+
literal|" as part of slice "
operator|+
name|slice
operator|+
literal|" of collection "
operator|+
name|collectionName
operator|+
literal|" on "
operator|+
name|parentShardLeader
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|SPLIT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
name|parentShardLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subShardNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|subShardName
init|=
name|subShardNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|CoreAdminParams
operator|.
name|TARGET_CORE
argument_list|,
name|subShardName
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|RANGES
argument_list|,
name|rangesStr
argument_list|)
expr_stmt|;
name|sendShardRequest
argument_list|(
name|parentShardLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"SPLITSHARD failed to invoke SPLIT core admin command"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Index on shard: "
operator|+
name|nodeName
operator|+
literal|" split into two successfully"
argument_list|)
expr_stmt|;
comment|// apply buffered updates on sub-shards
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subShardNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|subShardName
init|=
name|subShardNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Applying buffered updates on : "
operator|+
name|subShardName
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|REQUESTAPPLYUPDATES
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|subShardName
argument_list|)
expr_stmt|;
name|sendShardRequest
argument_list|(
name|nodeName
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"SPLITSHARD failed while asking sub shard leaders to apply buffered updates"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Successfully applied buffered updates on : "
operator|+
name|subShardNames
argument_list|)
expr_stmt|;
comment|// Replica creation for the new Slices
comment|// look at the replication factor and see if it matches reality
comment|// if it does not, find best nodes to create more cores
comment|// TODO: Have replication factor decided in some other way instead of numShards for the parent
name|int
name|repFactor
init|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collectionName
argument_list|,
name|slice
argument_list|)
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// we need to look at every node and see how many cores it serves
comment|// add our new cores to existing nodes serving the least number of cores
comment|// but (for now) require that each core goes on a distinct node.
comment|// TODO: add smarter options that look at the current number of cores per
comment|// node?
comment|// for now we just go random
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|clusterState
operator|.
name|getLiveNodes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodeList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|nodeList
operator|.
name|addAll
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodeList
argument_list|)
expr_stmt|;
comment|// TODO: Have maxShardsPerNode param for this operation?
comment|// Remove the node that hosts the parent shard for replica creation.
name|nodeList
operator|.
name|remove
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
comment|// TODO: change this to handle sharding a slice into> 2 sub-shards.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|subSlices
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodeList
argument_list|)
expr_stmt|;
name|String
name|sliceName
init|=
name|subSlices
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|2
init|;
name|j
operator|<=
name|repFactor
condition|;
name|j
operator|++
control|)
block|{
name|String
name|subShardNodeName
init|=
name|nodeList
operator|.
name|get
argument_list|(
operator|(
name|repFactor
operator|*
operator|(
name|i
operator|-
literal|1
operator|)
operator|+
operator|(
name|j
operator|-
literal|2
operator|)
operator|)
operator|%
name|nodeList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|shardName
init|=
name|collectionName
operator|+
literal|"_"
operator|+
name|sliceName
operator|+
literal|"_replica"
operator|+
operator|(
name|j
operator|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Creating replica shard "
operator|+
name|shardName
operator|+
literal|" as part of slice "
operator|+
name|sliceName
operator|+
literal|" of collection "
operator|+
name|collectionName
operator|+
literal|" on "
operator|+
name|subShardNodeName
argument_list|)
expr_stmt|;
comment|// Need to create new params for each request
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|shardName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|SHARD
argument_list|,
name|sliceName
argument_list|)
expr_stmt|;
name|addPropertyParams
argument_list|(
name|message
argument_list|,
name|params
argument_list|)
expr_stmt|;
comment|// TODO:  Figure the config used by the parent shard and use it.
comment|//params.set("collection.configName", configName);
comment|//Not using this property. Do we really need to use it?
comment|//params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);
name|sendShardRequest
argument_list|(
name|subShardNodeName
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|String
name|coreNodeName
init|=
name|waitForCoreNodeName
argument_list|(
name|collection
argument_list|,
name|zkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|subShardNodeName
argument_list|)
argument_list|,
name|shardName
argument_list|)
decl_stmt|;
comment|// wait for the replicas to be seen as active on sub shard leader
name|log
operator|.
name|info
argument_list|(
literal|"Asking sub shard leader to wait for: "
operator|+
name|shardName
operator|+
literal|" to be alive on: "
operator|+
name|subShardNodeName
argument_list|)
expr_stmt|;
name|CoreAdminRequest
operator|.
name|WaitForState
name|cmd
init|=
operator|new
name|CoreAdminRequest
operator|.
name|WaitForState
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|setCoreName
argument_list|(
name|subShardNames
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setNodeName
argument_list|(
name|subShardNodeName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCoreNodeName
argument_list|(
name|coreNodeName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setState
argument_list|(
name|ZkStateReader
operator|.
name|RECOVERING
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCheckLive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setOnlyIfLeader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sendShardRequest
argument_list|(
name|nodeName
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|(
name|cmd
operator|.
name|getParams
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"SPLTSHARD failed to create subshard replicas or timed out waiting for them to come up"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Successfully created all replica shards for all sub-slices "
operator|+
name|subSlices
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|results
argument_list|,
name|slice
argument_list|,
name|parentShardLeader
argument_list|)
expr_stmt|;
if|if
condition|(
name|repFactor
operator|==
literal|1
condition|)
block|{
comment|// switch sub shard states to 'active'
name|log
operator|.
name|info
argument_list|(
literal|"Replication factor is 1 so switching shard states"
argument_list|)
expr_stmt|;
name|DistributedQueue
name|inQueue
init|=
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
literal|"updateshardstate"
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|slice
argument_list|,
name|Slice
operator|.
name|INACTIVE
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|subSlice
range|:
name|subSlices
control|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|subSlice
argument_list|,
name|Slice
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
decl_stmt|;
name|inQueue
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Requesting shard state be set to 'recovery'"
argument_list|)
expr_stmt|;
name|DistributedQueue
name|inQueue
init|=
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
literal|"updateshardstate"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|subSlice
range|:
name|subSlices
control|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|subSlice
argument_list|,
name|Slice
operator|.
name|RECOVERY
argument_list|)
expr_stmt|;
block|}
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
decl_stmt|;
name|inQueue
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error executing split operation for collection: "
operator|+
name|collectionName
operator|+
literal|" parent shard: "
operator|+
name|slice
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|null
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|commit
specifier|private
name|void
name|commit
parameter_list|(
name|NamedList
name|results
parameter_list|,
name|String
name|slice
parameter_list|,
name|Replica
name|parentShardLeader
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Calling soft commit to make sub shard updates visible"
argument_list|)
expr_stmt|;
name|String
name|coreUrl
init|=
operator|new
name|ZkCoreNodeProps
argument_list|(
name|parentShardLeader
argument_list|)
operator|.
name|getCoreUrl
argument_list|()
decl_stmt|;
comment|// HttpShardHandler is hard coded to send a QueryRequest hence we go direct
comment|// and we force open a searcher so that we have documents to show upon switching states
name|UpdateResponse
name|updateResponse
init|=
literal|null
decl_stmt|;
try|try
block|{
name|updateResponse
operator|=
name|softCommit
argument_list|(
name|coreUrl
argument_list|)
expr_stmt|;
name|processResponse
argument_list|(
name|results
argument_list|,
literal|null
argument_list|,
name|coreUrl
argument_list|,
name|updateResponse
argument_list|,
name|slice
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|processResponse
argument_list|(
name|results
argument_list|,
name|e
argument_list|,
name|coreUrl
argument_list|,
name|updateResponse
argument_list|,
name|slice
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unable to call distrib softCommit on: "
operator|+
name|coreUrl
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|softCommit
specifier|static
name|UpdateResponse
name|softCommit
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|HttpSolrServer
name|server
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|=
operator|new
name|HttpSolrServer
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|server
operator|.
name|setConnectionTimeout
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
name|server
operator|.
name|setSoTimeout
argument_list|(
literal|120000
argument_list|)
expr_stmt|;
name|UpdateRequest
name|ureq
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|ureq
operator|.
name|setParams
argument_list|(
operator|new
name|ModifiableSolrParams
argument_list|()
argument_list|)
expr_stmt|;
name|ureq
operator|.
name|setAction
argument_list|(
name|AbstractUpdateRequest
operator|.
name|ACTION
operator|.
name|COMMIT
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|ureq
operator|.
name|process
argument_list|(
name|server
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|waitForCoreNodeName
specifier|private
name|String
name|waitForCoreNodeName
parameter_list|(
name|DocCollection
name|collection
parameter_list|,
name|String
name|msgBaseUrl
parameter_list|,
name|String
name|msgCore
parameter_list|)
block|{
name|int
name|retryCount
init|=
literal|320
decl_stmt|;
while|while
condition|(
name|retryCount
operator|--
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slicesMap
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlicesMap
argument_list|(
name|collection
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|slicesMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Slice
name|slice
range|:
name|slicesMap
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
comment|// TODO: for really large clusters, we could 'index' on this
name|String
name|baseUrl
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
decl_stmt|;
name|String
name|core
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseUrl
operator|.
name|equals
argument_list|(
name|msgBaseUrl
argument_list|)
operator|&&
name|core
operator|.
name|equals
argument_list|(
name|msgCore
argument_list|)
condition|)
block|{
return|return
name|replica
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not find coreNodeName"
argument_list|)
throw|;
block|}
DECL|method|collectShardResponses
specifier|private
name|void
name|collectShardResponses
parameter_list|(
name|NamedList
name|results
parameter_list|,
name|boolean
name|abortOnError
parameter_list|,
name|String
name|msgOnError
parameter_list|)
block|{
name|ShardResponse
name|srsp
decl_stmt|;
do|do
block|{
name|srsp
operator|=
name|shardHandler
operator|.
name|takeCompletedOrError
argument_list|()
expr_stmt|;
if|if
condition|(
name|srsp
operator|!=
literal|null
condition|)
block|{
name|processResponse
argument_list|(
name|results
argument_list|,
name|srsp
argument_list|)
expr_stmt|;
name|Throwable
name|exception
init|=
name|srsp
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|abortOnError
operator|&&
name|exception
operator|!=
literal|null
condition|)
block|{
comment|// drain pending requests
while|while
condition|(
name|srsp
operator|!=
literal|null
condition|)
block|{
name|srsp
operator|=
name|shardHandler
operator|.
name|takeCompletedOrError
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|msgOnError
argument_list|,
name|exception
argument_list|)
throw|;
block|}
block|}
block|}
do|while
condition|(
name|srsp
operator|!=
literal|null
condition|)
do|;
block|}
DECL|method|deleteShard
specifier|private
name|void
name|deleteShard
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Delete shard invoked"
argument_list|)
expr_stmt|;
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
name|String
name|sliceId
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|Slice
name|slice
init|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|sliceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|clusterState
operator|.
name|hasCollection
argument_list|(
name|collection
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No shard with the specified name exists: "
operator|+
name|slice
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No collection with the specified name exists: "
operator|+
name|collection
argument_list|)
throw|;
block|}
block|}
comment|// For now, only allow for deletions of Inactive slices or custom hashes (range==null).
comment|// TODO: Add check for range gaps on Slice deletion
if|if
condition|(
operator|!
operator|(
name|slice
operator|.
name|getRange
argument_list|()
operator|==
literal|null
operator|||
name|slice
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|Slice
operator|.
name|INACTIVE
argument_list|)
operator|||
name|slice
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|Slice
operator|.
name|RECOVERY
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"The slice: "
operator|+
name|slice
operator|.
name|getName
argument_list|()
operator|+
literal|" is currently "
operator|+
name|slice
operator|.
name|getState
argument_list|()
operator|+
literal|". Only INACTIVE (or custom-hashed) slices can be deleted."
argument_list|)
throw|;
block|}
try|try
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|UNLOAD
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_INDEX
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|sliceCmd
argument_list|(
name|clusterState
argument_list|,
name|params
argument_list|,
literal|null
argument_list|,
name|slice
argument_list|)
expr_stmt|;
name|ShardResponse
name|srsp
decl_stmt|;
do|do
block|{
name|srsp
operator|=
name|shardHandler
operator|.
name|takeCompletedOrError
argument_list|()
expr_stmt|;
if|if
condition|(
name|srsp
operator|!=
literal|null
condition|)
block|{
name|processResponse
argument_list|(
name|results
argument_list|,
name|srsp
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|srsp
operator|!=
literal|null
condition|)
do|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|Overseer
operator|.
name|REMOVESHARD
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
name|sliceId
argument_list|)
decl_stmt|;
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for a while until we don't see the shard
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|timeout
init|=
name|now
operator|+
literal|30000
decl_stmt|;
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeout
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|removed
operator|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|sliceId
argument_list|)
operator|==
literal|null
expr_stmt|;
if|if
condition|(
name|removed
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// just a bit of time so it's more likely other readers see on return
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|removed
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not fully remove collection: "
operator|+
name|collection
operator|+
literal|" shard: "
operator|+
name|sliceId
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Successfully deleted collection: "
operator|+
name|collection
operator|+
literal|", shard: "
operator|+
name|sliceId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error executing delete operation for collection: "
operator|+
name|collection
operator|+
literal|" shard: "
operator|+
name|sliceId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|migrate
specifier|private
name|void
name|migrate
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|sourceCollectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"collection"
argument_list|)
decl_stmt|;
name|String
name|splitKey
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"split.key"
argument_list|)
decl_stmt|;
name|String
name|targetCollectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"target.collection"
argument_list|)
decl_stmt|;
name|int
name|timeout
init|=
name|message
operator|.
name|getInt
argument_list|(
literal|"forward.timeout"
argument_list|,
literal|10
operator|*
literal|60
argument_list|)
operator|*
literal|1000
decl_stmt|;
name|DocCollection
name|sourceCollection
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|sourceCollectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceCollection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown source collection: "
operator|+
name|sourceCollectionName
argument_list|)
throw|;
block|}
name|DocCollection
name|targetCollection
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|targetCollectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetCollection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown target collection: "
operator|+
name|sourceCollectionName
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|sourceCollection
operator|.
name|getRouter
argument_list|()
operator|instanceof
name|CompositeIdRouter
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Source collection must use a compositeId router"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|targetCollection
operator|.
name|getRouter
argument_list|()
operator|instanceof
name|CompositeIdRouter
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Target collection must use a compositeId router"
argument_list|)
throw|;
block|}
name|CompositeIdRouter
name|sourceRouter
init|=
operator|(
name|CompositeIdRouter
operator|)
name|sourceCollection
operator|.
name|getRouter
argument_list|()
decl_stmt|;
name|CompositeIdRouter
name|targetRouter
init|=
operator|(
name|CompositeIdRouter
operator|)
name|targetCollection
operator|.
name|getRouter
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Slice
argument_list|>
name|sourceSlices
init|=
name|sourceRouter
operator|.
name|getSearchSlicesSingle
argument_list|(
name|splitKey
argument_list|,
literal|null
argument_list|,
name|sourceCollection
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceSlices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No active slices available in source collection: "
operator|+
name|sourceCollection
operator|+
literal|"for given split.key: "
operator|+
name|splitKey
argument_list|)
throw|;
block|}
name|Collection
argument_list|<
name|Slice
argument_list|>
name|targetSlices
init|=
name|targetRouter
operator|.
name|getSearchSlicesSingle
argument_list|(
name|splitKey
argument_list|,
literal|null
argument_list|,
name|targetCollection
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetSlices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No active slices available in target collection: "
operator|+
name|targetCollection
operator|+
literal|"for given split.key: "
operator|+
name|splitKey
argument_list|)
throw|;
block|}
for|for
control|(
name|Slice
name|sourceSlice
range|:
name|sourceSlices
control|)
block|{
for|for
control|(
name|Slice
name|targetSlice
range|:
name|targetSlices
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Migrating source shard: {} to target shard: {} for split.key = "
operator|+
name|splitKey
argument_list|,
name|sourceSlice
argument_list|,
name|targetSlice
argument_list|)
expr_stmt|;
name|migrateKey
argument_list|(
name|clusterState
argument_list|,
name|sourceCollection
argument_list|,
name|sourceSlice
argument_list|,
name|targetCollection
argument_list|,
name|targetSlice
argument_list|,
name|splitKey
argument_list|,
name|timeout
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|migrateKey
specifier|private
name|void
name|migrateKey
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|DocCollection
name|sourceCollection
parameter_list|,
name|Slice
name|sourceSlice
parameter_list|,
name|DocCollection
name|targetCollection
parameter_list|,
name|Slice
name|targetSlice
parameter_list|,
name|String
name|splitKey
parameter_list|,
name|int
name|timeout
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|tempSourceCollectionName
init|=
literal|"split_"
operator|+
name|sourceSlice
operator|.
name|getName
argument_list|()
operator|+
literal|"_temp_"
operator|+
name|targetSlice
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterState
operator|.
name|hasCollection
argument_list|(
name|tempSourceCollectionName
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Deleting temporary collection: "
operator|+
name|tempSourceCollectionName
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
name|QUEUE_OPERATION
argument_list|,
name|DELETECOLLECTION
argument_list|,
literal|"name"
argument_list|,
name|tempSourceCollectionName
argument_list|)
decl_stmt|;
try|try
block|{
name|deleteCollection
argument_list|(
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to clean up existing temporary collection: "
operator|+
name|tempSourceCollectionName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|CompositeIdRouter
name|sourceRouter
init|=
operator|(
name|CompositeIdRouter
operator|)
name|sourceCollection
operator|.
name|getRouter
argument_list|()
decl_stmt|;
name|DocRouter
operator|.
name|Range
name|keyHashRange
init|=
name|sourceRouter
operator|.
name|keyHashRange
argument_list|(
name|splitKey
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Hash range for split.key: {} is: {}"
argument_list|,
name|splitKey
argument_list|,
name|keyHashRange
argument_list|)
expr_stmt|;
comment|// intersect source range, keyHashRange and target range
comment|// this is the range that has to be split from source and transferred to target
name|DocRouter
operator|.
name|Range
name|splitRange
init|=
name|intersect
argument_list|(
name|targetSlice
operator|.
name|getRange
argument_list|()
argument_list|,
name|intersect
argument_list|(
name|sourceSlice
operator|.
name|getRange
argument_list|()
argument_list|,
name|keyHashRange
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitRange
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No common hashes between source shard: {} and target shard: {}"
argument_list|,
name|sourceSlice
operator|.
name|getName
argument_list|()
argument_list|,
name|targetSlice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Common hash range between source shard: {} and target shard: {} = "
operator|+
name|splitRange
argument_list|,
name|sourceSlice
operator|.
name|getName
argument_list|()
argument_list|,
name|targetSlice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Replica
name|targetLeader
init|=
name|zkStateReader
operator|.
name|getLeaderRetry
argument_list|(
name|targetCollection
operator|.
name|getName
argument_list|()
argument_list|,
name|targetSlice
operator|.
name|getName
argument_list|()
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Asking target leader node: "
operator|+
name|targetLeader
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" core: "
operator|+
name|targetLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
operator|+
literal|" to buffer updates"
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|REQUESTBUFFERUPDATES
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|targetLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
name|sendShardRequest
argument_list|(
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"MIGRATE failed to request node to buffer updates"
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|Overseer
operator|.
name|ADD_ROUTING_RULE
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|sourceCollection
operator|.
name|getName
argument_list|()
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|sourceSlice
operator|.
name|getName
argument_list|()
argument_list|,
literal|"routeKey"
argument_list|,
name|SolrIndexSplitter
operator|.
name|getRouteKey
argument_list|(
name|splitKey
argument_list|)
operator|+
literal|"!"
argument_list|,
literal|"range"
argument_list|,
name|splitRange
operator|.
name|toString
argument_list|()
argument_list|,
literal|"targetCollection"
argument_list|,
name|targetCollection
operator|.
name|getName
argument_list|()
argument_list|,
literal|"expireAt"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|timeout
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Adding routing rule: "
operator|+
name|m
argument_list|)
expr_stmt|;
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for a while until we see the new rule
name|log
operator|.
name|info
argument_list|(
literal|"Waiting to see routing rule updated in clusterstate"
argument_list|)
expr_stmt|;
name|long
name|waitUntil
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|60000
decl_stmt|;
name|boolean
name|added
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|waitUntil
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RoutingRule
argument_list|>
name|rules
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|sourceCollection
operator|.
name|getName
argument_list|()
argument_list|,
name|sourceSlice
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getRoutingRules
argument_list|()
decl_stmt|;
if|if
condition|(
name|rules
operator|!=
literal|null
condition|)
block|{
name|RoutingRule
name|rule
init|=
name|rules
operator|.
name|get
argument_list|(
name|SolrIndexSplitter
operator|.
name|getRouteKey
argument_list|(
name|splitKey
argument_list|)
operator|+
literal|"!"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rule
operator|!=
literal|null
operator|&&
name|rule
operator|.
name|getRouteRanges
argument_list|()
operator|.
name|contains
argument_list|(
name|splitRange
argument_list|)
condition|)
block|{
name|added
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|added
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not add routing rule: "
operator|+
name|m
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Routing rule added successfully"
argument_list|)
expr_stmt|;
comment|// Create temp core on source shard
name|Replica
name|sourceLeader
init|=
name|zkStateReader
operator|.
name|getLeaderRetry
argument_list|(
name|sourceCollection
operator|.
name|getName
argument_list|()
argument_list|,
name|sourceSlice
operator|.
name|getName
argument_list|()
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
comment|// create a temporary collection with just one node on the shard leader
name|String
name|configName
init|=
name|zkStateReader
operator|.
name|readConfigName
argument_list|(
name|sourceCollection
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
name|QUEUE_OPERATION
argument_list|,
name|CREATECOLLECTION
argument_list|,
literal|"name"
argument_list|,
name|tempSourceCollectionName
argument_list|,
name|REPLICATION_FACTOR
argument_list|,
literal|1
argument_list|,
name|NUM_SLICES
argument_list|,
literal|1
argument_list|,
name|COLL_CONF
argument_list|,
name|configName
argument_list|,
name|CREATE_NODE_SET
argument_list|,
name|sourceLeader
operator|.
name|getNodeName
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Creating temporary collection: "
operator|+
name|props
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|clusterState
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
comment|// refresh cluster state
name|clusterState
operator|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
expr_stmt|;
name|Slice
name|tempSourceSlice
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|tempSourceCollectionName
argument_list|)
operator|.
name|getSlices
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Replica
name|tempSourceLeader
init|=
name|zkStateReader
operator|.
name|getLeaderRetry
argument_list|(
name|tempSourceCollectionName
argument_list|,
name|tempSourceSlice
operator|.
name|getName
argument_list|()
argument_list|,
literal|120000
argument_list|)
decl_stmt|;
name|String
name|tempCollectionReplica1
init|=
name|tempSourceCollectionName
operator|+
literal|"_"
operator|+
name|tempSourceSlice
operator|.
name|getName
argument_list|()
operator|+
literal|"_replica1"
decl_stmt|;
name|String
name|coreNodeName
init|=
name|waitForCoreNodeName
argument_list|(
name|clusterState
operator|.
name|getCollection
argument_list|(
name|tempSourceCollectionName
argument_list|)
argument_list|,
name|zkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|sourceLeader
operator|.
name|getNodeName
argument_list|()
argument_list|)
argument_list|,
name|tempCollectionReplica1
argument_list|)
decl_stmt|;
comment|// wait for the replicas to be seen as active on temp source leader
name|log
operator|.
name|info
argument_list|(
literal|"Asking source leader to wait for: "
operator|+
name|tempCollectionReplica1
operator|+
literal|" to be alive on: "
operator|+
name|sourceLeader
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|CoreAdminRequest
operator|.
name|WaitForState
name|cmd
init|=
operator|new
name|CoreAdminRequest
operator|.
name|WaitForState
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|setCoreName
argument_list|(
name|tempCollectionReplica1
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setNodeName
argument_list|(
name|sourceLeader
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCoreNodeName
argument_list|(
name|coreNodeName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setState
argument_list|(
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCheckLive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setOnlyIfLeader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sendShardRequest
argument_list|(
name|tempSourceLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|(
name|cmd
operator|.
name|getParams
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"MIGRATE failed to create temp collection leader or timed out waiting for it to come up"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Asking source leader to split index"
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|SPLIT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
name|sourceLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|CoreAdminParams
operator|.
name|TARGET_CORE
argument_list|,
name|tempSourceLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|RANGES
argument_list|,
name|splitRange
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"split.key"
argument_list|,
name|splitKey
argument_list|)
expr_stmt|;
name|sendShardRequest
argument_list|(
name|sourceLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"MIGRATE failed to invoke SPLIT core admin command"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Creating a replica of temporary collection: {} on the target leader node: {}"
argument_list|,
name|tempSourceCollectionName
argument_list|,
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tempCollectionReplica2
init|=
name|tempSourceCollectionName
operator|+
literal|"_"
operator|+
name|tempSourceSlice
operator|.
name|getName
argument_list|()
operator|+
literal|"_replica2"
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|tempCollectionReplica2
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|,
name|tempSourceCollectionName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|SHARD
argument_list|,
name|tempSourceSlice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sendShardRequest
argument_list|(
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|coreNodeName
operator|=
name|waitForCoreNodeName
argument_list|(
name|clusterState
operator|.
name|getCollection
argument_list|(
name|tempSourceCollectionName
argument_list|)
argument_list|,
name|zkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|)
argument_list|,
name|tempCollectionReplica2
argument_list|)
expr_stmt|;
comment|// wait for the replicas to be seen as active on temp source leader
name|log
operator|.
name|info
argument_list|(
literal|"Asking temp source leader to wait for: "
operator|+
name|tempCollectionReplica2
operator|+
literal|" to be alive on: "
operator|+
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|=
operator|new
name|CoreAdminRequest
operator|.
name|WaitForState
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|setCoreName
argument_list|(
name|tempSourceLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setNodeName
argument_list|(
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCoreNodeName
argument_list|(
name|coreNodeName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setState
argument_list|(
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
comment|// todo introduce asynchronous actions
name|cmd
operator|.
name|setCheckLive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setOnlyIfLeader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sendShardRequest
argument_list|(
name|tempSourceLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|(
name|cmd
operator|.
name|getParams
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"MIGRATE failed to create temp collection replica or timed out waiting for them to come up"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Successfully created replica of temp source collection on target leader node"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Requesting merge of temp source collection replica to target leader"
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|MERGEINDEXES
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
name|targetLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|SRC_CORE
argument_list|,
name|tempCollectionReplica2
argument_list|)
expr_stmt|;
name|sendShardRequest
argument_list|(
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"MIGRATE failed to merge "
operator|+
name|tempCollectionReplica2
operator|+
literal|" to "
operator|+
name|targetLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
operator|+
literal|" on node: "
operator|+
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Asking target leader to apply buffered updates"
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|REQUESTAPPLYUPDATES
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|targetLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
name|sendShardRequest
argument_list|(
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|collectShardResponses
argument_list|(
name|results
argument_list|,
literal|true
argument_list|,
literal|"MIGRATE failed to request node to apply buffered updates"
argument_list|)
expr_stmt|;
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Deleting temporary collection: "
operator|+
name|tempSourceCollectionName
argument_list|)
expr_stmt|;
name|props
operator|=
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
name|QUEUE_OPERATION
argument_list|,
name|DELETECOLLECTION
argument_list|,
literal|"name"
argument_list|,
name|tempSourceCollectionName
argument_list|)
expr_stmt|;
name|deleteCollection
argument_list|(
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to delete temporary collection: "
operator|+
name|tempSourceCollectionName
operator|+
literal|". Please remove it manually"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|intersect
specifier|private
name|DocRouter
operator|.
name|Range
name|intersect
parameter_list|(
name|DocRouter
operator|.
name|Range
name|a
parameter_list|,
name|DocRouter
operator|.
name|Range
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
operator|||
name|b
operator|==
literal|null
operator|||
operator|!
name|a
operator|.
name|overlaps
argument_list|(
name|b
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|a
operator|.
name|isSubsetOf
argument_list|(
name|b
argument_list|)
condition|)
return|return
name|a
return|;
elseif|else
if|if
condition|(
name|b
operator|.
name|isSubsetOf
argument_list|(
name|a
argument_list|)
condition|)
return|return
name|b
return|;
elseif|else
if|if
condition|(
name|b
operator|.
name|includes
argument_list|(
name|a
operator|.
name|max
argument_list|)
condition|)
block|{
return|return
operator|new
name|DocRouter
operator|.
name|Range
argument_list|(
name|b
operator|.
name|min
argument_list|,
name|a
operator|.
name|max
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|DocRouter
operator|.
name|Range
argument_list|(
name|a
operator|.
name|min
argument_list|,
name|b
operator|.
name|max
argument_list|)
return|;
block|}
block|}
DECL|method|sendShardRequest
specifier|private
name|void
name|sendShardRequest
parameter_list|(
name|String
name|nodeName
parameter_list|,
name|ModifiableSolrParams
name|params
parameter_list|)
block|{
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
name|adminPath
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|purpose
operator|=
literal|1
expr_stmt|;
name|String
name|replica
init|=
name|zkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
name|sreq
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|replica
block|}
expr_stmt|;
name|sreq
operator|.
name|actualShards
operator|=
name|sreq
operator|.
name|shards
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|shardHandler
operator|.
name|submit
argument_list|(
name|sreq
argument_list|,
name|replica
argument_list|,
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
block|}
DECL|method|addPropertyParams
specifier|private
name|void
name|addPropertyParams
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|ModifiableSolrParams
name|params
parameter_list|)
block|{
comment|// Now add the property.key=value pairs
for|for
control|(
name|String
name|key
range|:
name|message
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|COLL_PROP_PREFIX
argument_list|)
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createCollection
specifier|private
name|void
name|createCollection
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|clusterState
operator|.
name|hasCollection
argument_list|(
name|collectionName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"collection already exists: "
operator|+
name|collectionName
argument_list|)
throw|;
block|}
try|try
block|{
comment|// look at the replication factor and see if it matches reality
comment|// if it does not, find best nodes to create more cores
name|int
name|repFactor
init|=
name|message
operator|.
name|getInt
argument_list|(
name|REPLICATION_FACTOR
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Integer
name|numSlices
init|=
name|message
operator|.
name|getInt
argument_list|(
name|NUM_SLICES
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|router
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"router.name"
argument_list|,
name|DocRouter
operator|.
name|DEFAULT_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|shardNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|ImplicitDocRouter
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|router
argument_list|)
condition|)
block|{
name|Overseer
operator|.
name|getShardNames
argument_list|(
name|shardNames
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
literal|"shards"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|numSlices
operator|=
name|shardNames
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Overseer
operator|.
name|getShardNames
argument_list|(
name|numSlices
argument_list|,
name|shardNames
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numSlices
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|NUM_SLICES
operator|+
literal|" is a required param"
argument_list|)
throw|;
block|}
name|int
name|maxShardsPerNode
init|=
name|message
operator|.
name|getInt
argument_list|(
name|MAX_SHARDS_PER_NODE
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|createNodeSetStr
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|createNodeList
init|=
operator|(
operator|(
name|createNodeSetStr
operator|=
name|message
operator|.
name|getStr
argument_list|(
name|CREATE_NODE_SET
argument_list|)
operator|)
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|createNodeSetStr
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|repFactor
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|REPLICATION_FACTOR
operator|+
literal|" must be greater than 0"
argument_list|)
throw|;
block|}
if|if
condition|(
name|numSlices
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|NUM_SLICES
operator|+
literal|" must be> 0"
argument_list|)
throw|;
block|}
comment|// we need to look at every node and see how many cores it serves
comment|// add our new cores to existing nodes serving the least number of cores
comment|// but (for now) require that each core goes on a distinct node.
comment|// TODO: add smarter options that look at the current number of cores per
comment|// node?
comment|// for now we just go random
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|clusterState
operator|.
name|getLiveNodes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodeList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|nodeList
operator|.
name|addAll
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
if|if
condition|(
name|createNodeList
operator|!=
literal|null
condition|)
name|nodeList
operator|.
name|retainAll
argument_list|(
name|createNodeList
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodeList
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeList
operator|.
name|size
argument_list|()
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Cannot create collection "
operator|+
name|collectionName
operator|+
literal|". No live Solr-instances"
operator|+
operator|(
operator|(
name|createNodeList
operator|!=
literal|null
operator|)
condition|?
literal|" among Solr-instances specified in "
operator|+
name|CREATE_NODE_SET
operator|+
literal|":"
operator|+
name|createNodeSetStr
else|:
literal|""
operator|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|repFactor
operator|>
name|nodeList
operator|.
name|size
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Specified "
operator|+
name|REPLICATION_FACTOR
operator|+
literal|" of "
operator|+
name|repFactor
operator|+
literal|" on collection "
operator|+
name|collectionName
operator|+
literal|" is higher than or equal to the number of Solr instances currently live or part of your "
operator|+
name|CREATE_NODE_SET
operator|+
literal|"("
operator|+
name|nodeList
operator|.
name|size
argument_list|()
operator|+
literal|"). Its unusual to run two replica of the same slice on the same Solr-instance."
argument_list|)
expr_stmt|;
block|}
name|int
name|maxShardsAllowedToCreate
init|=
name|maxShardsPerNode
operator|*
name|nodeList
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|requestedShardsToCreate
init|=
name|numSlices
operator|*
name|repFactor
decl_stmt|;
if|if
condition|(
name|maxShardsAllowedToCreate
operator|<
name|requestedShardsToCreate
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Cannot create collection "
operator|+
name|collectionName
operator|+
literal|". Value of "
operator|+
name|MAX_SHARDS_PER_NODE
operator|+
literal|" is "
operator|+
name|maxShardsPerNode
operator|+
literal|", and the number of live nodes is "
operator|+
name|nodeList
operator|.
name|size
argument_list|()
operator|+
literal|". This allows a maximum of "
operator|+
name|maxShardsAllowedToCreate
operator|+
literal|" to be created. Value of "
operator|+
name|NUM_SLICES
operator|+
literal|" is "
operator|+
name|numSlices
operator|+
literal|" and value of "
operator|+
name|REPLICATION_FACTOR
operator|+
literal|" is "
operator|+
name|repFactor
operator|+
literal|". This requires "
operator|+
name|requestedShardsToCreate
operator|+
literal|" shards to be created (higher than the allowed number)"
argument_list|)
throw|;
block|}
name|String
name|configName
init|=
name|createConfNode
argument_list|(
name|collectionName
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for a while until we don't see the collection
name|long
name|waitUntil
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|30000
decl_stmt|;
name|boolean
name|created
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|waitUntil
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|created
operator|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollections
argument_list|()
operator|.
name|contains
argument_list|(
name|message
operator|.
name|getStr
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|created
condition|)
break|break;
block|}
if|if
condition|(
operator|!
name|created
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not fully createcollection: "
operator|+
name|message
operator|.
name|getStr
argument_list|(
literal|"name"
argument_list|)
argument_list|)
throw|;
name|log
operator|.
name|info
argument_list|(
literal|"going to create cores replicas shardNames {} , repFactor : {}"
argument_list|,
name|shardNames
argument_list|,
name|repFactor
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|shardNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|sliceName
init|=
name|shardNames
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|repFactor
condition|;
name|j
operator|++
control|)
block|{
name|String
name|nodeName
init|=
name|nodeList
operator|.
name|get
argument_list|(
operator|(
name|repFactor
operator|*
operator|(
name|i
operator|-
literal|1
operator|)
operator|+
operator|(
name|j
operator|-
literal|1
operator|)
operator|)
operator|%
name|nodeList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|shardName
init|=
name|collectionName
operator|+
literal|"_"
operator|+
name|sliceName
operator|+
literal|"_replica"
operator|+
name|j
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Creating shard "
operator|+
name|shardName
operator|+
literal|" as part of slice "
operator|+
name|sliceName
operator|+
literal|" of collection "
operator|+
name|collectionName
operator|+
literal|" on "
operator|+
name|nodeName
argument_list|)
expr_stmt|;
comment|// Need to create new params for each request
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|shardName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|COLL_CONF
argument_list|,
name|configName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|SHARD
argument_list|,
name|sliceName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
name|numSlices
argument_list|)
expr_stmt|;
name|addPropertyParams
argument_list|(
name|message
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
name|adminPath
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|purpose
operator|=
literal|1
expr_stmt|;
name|String
name|replica
init|=
name|zkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
name|sreq
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|replica
block|}
expr_stmt|;
name|sreq
operator|.
name|actualShards
operator|=
name|sreq
operator|.
name|shards
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|shardHandler
operator|.
name|submit
argument_list|(
name|sreq
argument_list|,
name|replica
argument_list|,
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
block|}
block|}
name|ShardResponse
name|srsp
decl_stmt|;
do|do
block|{
name|srsp
operator|=
name|shardHandler
operator|.
name|takeCompletedOrError
argument_list|()
expr_stmt|;
if|if
condition|(
name|srsp
operator|!=
literal|null
condition|)
block|{
name|processResponse
argument_list|(
name|results
argument_list|,
name|srsp
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|srsp
operator|!=
literal|null
condition|)
do|;
name|log
operator|.
name|info
argument_list|(
literal|"Finished create command on all shards for collection: "
operator|+
name|collectionName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|null
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|createConfNode
specifier|private
name|String
name|createConfNode
parameter_list|(
name|String
name|coll
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|configName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|OverseerCollectionProcessor
operator|.
name|COLL_CONF
argument_list|)
decl_stmt|;
if|if
condition|(
name|configName
operator|==
literal|null
condition|)
block|{
comment|// if there is only one conf, use that
name|List
argument_list|<
name|String
argument_list|>
name|configNames
init|=
literal|null
decl_stmt|;
try|try
block|{
name|configNames
operator|=
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|getChildren
argument_list|(
name|ZkController
operator|.
name|CONFIGS_ZKNODE
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|configNames
operator|!=
literal|null
operator|&&
name|configNames
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|configName
operator|=
name|configNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// no config set named, but there is only 1 - use it
name|log
operator|.
name|info
argument_list|(
literal|"Only one config set found in zk - using it:"
operator|+
name|configName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{        }
block|}
if|if
condition|(
name|configName
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"creating collections conf node {} "
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|coll
argument_list|)
expr_stmt|;
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|makePath
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|coll
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
name|ZkController
operator|.
name|CONFIGNAME_PROP
argument_list|,
name|configName
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|msg
init|=
literal|"Could not obtain config name"
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
return|return
name|configName
return|;
block|}
DECL|method|collectionCmd
specifier|private
name|void
name|collectionCmd
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|ModifiableSolrParams
name|params
parameter_list|,
name|NamedList
name|results
parameter_list|,
name|String
name|stateMatcher
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Executing Collection Cmd : "
operator|+
name|params
argument_list|)
expr_stmt|;
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|DocCollection
name|coll
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|entry
range|:
name|coll
operator|.
name|getSlicesMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Slice
name|slice
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|sliceCmd
argument_list|(
name|clusterState
argument_list|,
name|params
argument_list|,
name|stateMatcher
argument_list|,
name|slice
argument_list|)
expr_stmt|;
block|}
name|ShardResponse
name|srsp
decl_stmt|;
do|do
block|{
name|srsp
operator|=
name|shardHandler
operator|.
name|takeCompletedOrError
argument_list|()
expr_stmt|;
if|if
condition|(
name|srsp
operator|!=
literal|null
condition|)
block|{
name|processResponse
argument_list|(
name|results
argument_list|,
name|srsp
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|srsp
operator|!=
literal|null
condition|)
do|;
block|}
DECL|method|sliceCmd
specifier|private
name|void
name|sliceCmd
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ModifiableSolrParams
name|params
parameter_list|,
name|String
name|stateMatcher
parameter_list|,
name|Slice
name|slice
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shards
init|=
name|slice
operator|.
name|getReplicasMap
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
argument_list|>
name|shardEntries
init|=
name|shards
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shardEntry
range|:
name|shardEntries
control|)
block|{
specifier|final
name|ZkNodeProps
name|node
init|=
name|shardEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterState
operator|.
name|liveNodesContain
argument_list|(
name|node
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|)
operator|&&
operator|(
name|stateMatcher
operator|!=
literal|null
condition|?
name|node
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
operator|.
name|equals
argument_list|(
name|stateMatcher
argument_list|)
else|:
literal|true
operator|)
condition|)
block|{
comment|// For thread safety, only simple clone the ModifiableSolrParams
name|ModifiableSolrParams
name|cloneParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|cloneParams
operator|.
name|add
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|cloneParams
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
name|node
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|replica
init|=
name|node
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
decl_stmt|;
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|sreq
operator|.
name|nodeName
operator|=
name|node
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
expr_stmt|;
comment|// yes, they must use same admin handler path everywhere...
name|cloneParams
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
name|adminPath
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|purpose
operator|=
literal|1
expr_stmt|;
name|sreq
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|replica
block|}
expr_stmt|;
name|sreq
operator|.
name|actualShards
operator|=
name|sreq
operator|.
name|shards
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
name|cloneParams
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Collection Admin sending CoreAdmin cmd to "
operator|+
name|replica
operator|+
literal|" params:"
operator|+
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
name|shardHandler
operator|.
name|submit
argument_list|(
name|sreq
argument_list|,
name|replica
argument_list|,
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|processResponse
specifier|private
name|void
name|processResponse
parameter_list|(
name|NamedList
name|results
parameter_list|,
name|ShardResponse
name|srsp
parameter_list|)
block|{
name|Throwable
name|e
init|=
name|srsp
operator|.
name|getException
argument_list|()
decl_stmt|;
name|String
name|nodeName
init|=
name|srsp
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|SolrResponse
name|solrResponse
init|=
name|srsp
operator|.
name|getSolrResponse
argument_list|()
decl_stmt|;
name|String
name|shard
init|=
name|srsp
operator|.
name|getShard
argument_list|()
decl_stmt|;
name|processResponse
argument_list|(
name|results
argument_list|,
name|e
argument_list|,
name|nodeName
argument_list|,
name|solrResponse
argument_list|,
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|processResponse
specifier|private
name|void
name|processResponse
parameter_list|(
name|NamedList
name|results
parameter_list|,
name|Throwable
name|e
parameter_list|,
name|String
name|nodeName
parameter_list|,
name|SolrResponse
name|solrResponse
parameter_list|,
name|String
name|shard
parameter_list|)
block|{
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error from shard: "
operator|+
name|shard
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|SimpleOrderedMap
name|failure
init|=
operator|(
name|SimpleOrderedMap
operator|)
name|results
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
decl_stmt|;
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
operator|new
name|SimpleOrderedMap
argument_list|()
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"failure"
argument_list|,
name|failure
argument_list|)
expr_stmt|;
block|}
name|failure
operator|.
name|add
argument_list|(
name|nodeName
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SimpleOrderedMap
name|success
init|=
operator|(
name|SimpleOrderedMap
operator|)
name|results
operator|.
name|get
argument_list|(
literal|"success"
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
operator|==
literal|null
condition|)
block|{
name|success
operator|=
operator|new
name|SimpleOrderedMap
argument_list|()
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"success"
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
name|success
operator|.
name|add
argument_list|(
name|nodeName
argument_list|,
name|solrResponse
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isClosed
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|isClosed
return|;
block|}
block|}
end_class
end_unit
