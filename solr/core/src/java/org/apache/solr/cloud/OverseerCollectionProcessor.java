begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|DistributedQueue
operator|.
name|QueueEvent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Aliases
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClosableThread
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZooKeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
operator|.
name|CoreAdminAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_class
DECL|class|OverseerCollectionProcessor
specifier|public
class|class
name|OverseerCollectionProcessor
implements|implements
name|Runnable
implements|,
name|ClosableThread
block|{
DECL|field|NUM_SLICES
specifier|public
specifier|static
specifier|final
name|String
name|NUM_SLICES
init|=
literal|"numShards"
decl_stmt|;
DECL|field|REPLICATION_FACTOR
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_FACTOR
init|=
literal|"replicationFactor"
decl_stmt|;
DECL|field|MAX_SHARDS_PER_NODE
specifier|public
specifier|static
specifier|final
name|String
name|MAX_SHARDS_PER_NODE
init|=
literal|"maxShardsPerNode"
decl_stmt|;
DECL|field|CREATE_NODE_SET
specifier|public
specifier|static
specifier|final
name|String
name|CREATE_NODE_SET
init|=
literal|"createNodeSet"
decl_stmt|;
DECL|field|DELETECOLLECTION
specifier|public
specifier|static
specifier|final
name|String
name|DELETECOLLECTION
init|=
literal|"deletecollection"
decl_stmt|;
DECL|field|CREATECOLLECTION
specifier|public
specifier|static
specifier|final
name|String
name|CREATECOLLECTION
init|=
literal|"createcollection"
decl_stmt|;
DECL|field|RELOADCOLLECTION
specifier|public
specifier|static
specifier|final
name|String
name|RELOADCOLLECTION
init|=
literal|"reloadcollection"
decl_stmt|;
DECL|field|CREATEALIAS
specifier|public
specifier|static
specifier|final
name|String
name|CREATEALIAS
init|=
literal|"createalias"
decl_stmt|;
DECL|field|DELETEALIAS
specifier|public
specifier|static
specifier|final
name|String
name|DELETEALIAS
init|=
literal|"deletealias"
decl_stmt|;
comment|// TODO: use from Overseer?
DECL|field|QUEUE_OPERATION
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE_OPERATION
init|=
literal|"operation"
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OverseerCollectionProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|workQueue
specifier|private
name|DistributedQueue
name|workQueue
decl_stmt|;
DECL|field|myId
specifier|private
name|String
name|myId
decl_stmt|;
DECL|field|shardHandler
specifier|private
name|ShardHandler
name|shardHandler
decl_stmt|;
DECL|field|adminPath
specifier|private
name|String
name|adminPath
decl_stmt|;
DECL|field|zkStateReader
specifier|private
name|ZkStateReader
name|zkStateReader
decl_stmt|;
DECL|field|isClosed
specifier|private
name|boolean
name|isClosed
decl_stmt|;
DECL|method|OverseerCollectionProcessor
specifier|public
name|OverseerCollectionProcessor
parameter_list|(
name|ZkStateReader
name|zkStateReader
parameter_list|,
name|String
name|myId
parameter_list|,
name|ShardHandler
name|shardHandler
parameter_list|,
name|String
name|adminPath
parameter_list|)
block|{
name|this
argument_list|(
name|zkStateReader
argument_list|,
name|myId
argument_list|,
name|shardHandler
argument_list|,
name|adminPath
argument_list|,
name|Overseer
operator|.
name|getCollectionQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|OverseerCollectionProcessor
specifier|protected
name|OverseerCollectionProcessor
parameter_list|(
name|ZkStateReader
name|zkStateReader
parameter_list|,
name|String
name|myId
parameter_list|,
name|ShardHandler
name|shardHandler
parameter_list|,
name|String
name|adminPath
parameter_list|,
name|DistributedQueue
name|workQueue
parameter_list|)
block|{
name|this
operator|.
name|zkStateReader
operator|=
name|zkStateReader
expr_stmt|;
name|this
operator|.
name|myId
operator|=
name|myId
expr_stmt|;
name|this
operator|.
name|shardHandler
operator|=
name|shardHandler
expr_stmt|;
name|this
operator|.
name|adminPath
operator|=
name|adminPath
expr_stmt|;
name|this
operator|.
name|workQueue
operator|=
name|workQueue
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Process current queue of collection creations"
argument_list|)
expr_stmt|;
while|while
condition|(
name|amILeader
argument_list|()
operator|&&
operator|!
name|isClosed
condition|)
block|{
try|try
block|{
name|QueueEvent
name|head
init|=
name|workQueue
operator|.
name|peek
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|ZkNodeProps
name|message
init|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|head
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Overseer Collection Processor: Get the message id:"
operator|+
name|head
operator|.
name|getId
argument_list|()
operator|+
literal|" message:"
operator|+
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|operation
init|=
name|message
operator|.
name|getStr
argument_list|(
name|QUEUE_OPERATION
argument_list|)
decl_stmt|;
name|SolrResponse
name|response
init|=
name|processMessage
argument_list|(
name|message
argument_list|,
name|operation
argument_list|)
decl_stmt|;
name|head
operator|.
name|setBytes
argument_list|(
name|SolrResponse
operator|.
name|serializable
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|workQueue
operator|.
name|remove
argument_list|(
name|head
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Overseer Collection Processor: Message id:"
operator|+
name|head
operator|.
name|getId
argument_list|()
operator|+
literal|" complete, response:"
operator|+
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|SESSIONEXPIRED
operator|||
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|CONNECTIONLOSS
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Overseer cannot talk to ZK"
argument_list|)
expr_stmt|;
return|return;
block|}
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|isClosed
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|amILeader
specifier|protected
name|boolean
name|amILeader
parameter_list|()
block|{
try|try
block|{
name|ZkNodeProps
name|props
init|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|getData
argument_list|(
literal|"/overseer_elect/leader"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|myId
operator|.
name|equals
argument_list|(
name|props
operator|.
name|getStr
argument_list|(
literal|"id"
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"According to ZK I (id="
operator|+
name|myId
operator|+
literal|") am no longer a leader."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|method|processMessage
specifier|protected
name|SolrResponse
name|processMessage
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|String
name|operation
parameter_list|)
block|{
name|NamedList
name|results
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|CREATECOLLECTION
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|createCollection
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|message
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DELETECOLLECTION
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|UNLOAD
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_INSTANCE_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|collectionCmd
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|message
argument_list|,
name|params
argument_list|,
name|results
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RELOADCOLLECTION
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|RELOAD
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|collectionCmd
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|message
argument_list|,
name|params
argument_list|,
name|results
argument_list|,
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CREATEALIAS
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|createAlias
argument_list|(
name|zkStateReader
operator|.
name|getAliases
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DELETEALIAS
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|deleteAlias
argument_list|(
name|zkStateReader
operator|.
name|getAliases
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown operation:"
operator|+
name|operation
argument_list|)
throw|;
block|}
name|int
name|failed
init|=
literal|0
decl_stmt|;
name|ShardResponse
name|srsp
decl_stmt|;
do|do
block|{
name|srsp
operator|=
name|shardHandler
operator|.
name|takeCompletedIncludingErrors
argument_list|()
expr_stmt|;
if|if
condition|(
name|srsp
operator|!=
literal|null
condition|)
block|{
name|Throwable
name|e
init|=
name|srsp
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|failed
operator|++
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Error talking to shard: "
operator|+
name|srsp
operator|.
name|getShard
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|srsp
operator|.
name|getShard
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|results
operator|.
name|add
argument_list|(
name|srsp
operator|.
name|getShard
argument_list|()
argument_list|,
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|srsp
operator|!=
literal|null
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Collection "
operator|+
name|operation
operator|+
literal|" of "
operator|+
name|operation
operator|+
literal|" failed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"Operation "
operator|+
name|operation
operator|+
literal|" caused exception:"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|SimpleOrderedMap
name|nl
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"msg"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"rspCode"
argument_list|,
name|ex
operator|instanceof
name|SolrException
condition|?
operator|(
operator|(
name|SolrException
operator|)
name|ex
operator|)
operator|.
name|code
argument_list|()
else|:
operator|-
literal|1
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"exception"
argument_list|,
name|nl
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
return|return
operator|new
name|OverseerSolrResponse
argument_list|(
name|results
argument_list|)
return|;
block|}
block|}
DECL|method|createAlias
specifier|private
name|void
name|createAlias
parameter_list|(
name|Aliases
name|aliases
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|String
name|aliasName
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|collections
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"collections"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|newAliasesMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newCollectionAliasesMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prevColAliases
init|=
name|aliases
operator|.
name|getCollectionAliasMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|prevColAliases
operator|!=
literal|null
condition|)
block|{
name|newCollectionAliasesMap
operator|.
name|putAll
argument_list|(
name|prevColAliases
argument_list|)
expr_stmt|;
block|}
name|newCollectionAliasesMap
operator|.
name|put
argument_list|(
name|aliasName
argument_list|,
name|collections
argument_list|)
expr_stmt|;
name|newAliasesMap
operator|.
name|put
argument_list|(
literal|"collection"
argument_list|,
name|newCollectionAliasesMap
argument_list|)
expr_stmt|;
name|Aliases
name|newAliases
init|=
operator|new
name|Aliases
argument_list|(
name|newAliasesMap
argument_list|)
decl_stmt|;
name|byte
index|[]
name|jsonBytes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|newAliases
operator|.
name|collectionAliasSize
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// only sub map right now
name|jsonBytes
operator|=
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|newAliases
operator|.
name|getAliasMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|setData
argument_list|(
name|ZkStateReader
operator|.
name|ALIASES
argument_list|,
name|jsonBytes
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkForAlias
argument_list|(
name|aliasName
argument_list|,
name|collections
argument_list|)
expr_stmt|;
comment|// some fudge for other nodes
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|checkForAlias
specifier|private
name|void
name|checkForAlias
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|timeout
init|=
name|now
operator|+
literal|30000
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Aliases
name|aliases
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeout
condition|)
block|{
name|aliases
operator|=
name|zkStateReader
operator|.
name|getAliases
argument_list|()
expr_stmt|;
name|String
name|collections
init|=
name|aliases
operator|.
name|getCollectionAlias
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|collections
operator|!=
literal|null
operator|&&
name|collections
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|success
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Timeout waiting to be notified of Alias change..."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkForAliasAbsence
specifier|private
name|void
name|checkForAliasAbsence
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|timeout
init|=
name|now
operator|+
literal|30000
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Aliases
name|aliases
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeout
condition|)
block|{
name|aliases
operator|=
name|zkStateReader
operator|.
name|getAliases
argument_list|()
expr_stmt|;
name|String
name|collections
init|=
name|aliases
operator|.
name|getCollectionAlias
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|collections
operator|==
literal|null
condition|)
block|{
name|success
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Timeout waiting to be notified of Alias change..."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteAlias
specifier|private
name|void
name|deleteAlias
parameter_list|(
name|Aliases
name|aliases
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|String
name|aliasName
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|newAliasesMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newCollectionAliasesMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|newCollectionAliasesMap
operator|.
name|putAll
argument_list|(
name|aliases
operator|.
name|getCollectionAliasMap
argument_list|()
argument_list|)
expr_stmt|;
name|newCollectionAliasesMap
operator|.
name|remove
argument_list|(
name|aliasName
argument_list|)
expr_stmt|;
name|newAliasesMap
operator|.
name|put
argument_list|(
literal|"collection"
argument_list|,
name|newCollectionAliasesMap
argument_list|)
expr_stmt|;
name|Aliases
name|newAliases
init|=
operator|new
name|Aliases
argument_list|(
name|newAliasesMap
argument_list|)
decl_stmt|;
name|byte
index|[]
name|jsonBytes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|newAliases
operator|.
name|collectionAliasSize
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// only sub map right now
name|jsonBytes
operator|=
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|newAliases
operator|.
name|getAliasMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|setData
argument_list|(
name|ZkStateReader
operator|.
name|ALIASES
argument_list|,
name|jsonBytes
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkForAliasAbsence
argument_list|(
name|aliasName
argument_list|)
expr_stmt|;
comment|// some fudge for other nodes
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createCollection
specifier|private
name|void
name|createCollection
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
block|{
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|clusterState
operator|.
name|getCollections
argument_list|()
operator|.
name|contains
argument_list|(
name|collectionName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"collection already exists: "
operator|+
name|collectionName
argument_list|)
throw|;
block|}
try|try
block|{
comment|// look at the replication factor and see if it matches reality
comment|// if it does not, find best nodes to create more cores
name|int
name|repFactor
init|=
name|msgStrToInt
argument_list|(
name|message
argument_list|,
name|REPLICATION_FACTOR
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Integer
name|numSlices
init|=
name|msgStrToInt
argument_list|(
name|message
argument_list|,
name|NUM_SLICES
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|numSlices
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"collection already exists: "
operator|+
name|collectionName
argument_list|)
throw|;
block|}
name|int
name|maxShardsPerNode
init|=
name|msgStrToInt
argument_list|(
name|message
argument_list|,
name|MAX_SHARDS_PER_NODE
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|createNodeSetStr
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|createNodeList
init|=
operator|(
operator|(
name|createNodeSetStr
operator|=
name|message
operator|.
name|getStr
argument_list|(
name|CREATE_NODE_SET
argument_list|)
operator|)
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|createNodeSetStr
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|repFactor
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|NUM_SLICES
operator|+
literal|" is a required paramater"
argument_list|)
throw|;
block|}
if|if
condition|(
name|numSlices
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|NUM_SLICES
operator|+
literal|" must be> 0"
argument_list|)
throw|;
block|}
name|String
name|configName
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"collection.configName"
argument_list|)
decl_stmt|;
comment|// we need to look at every node and see how many cores it serves
comment|// add our new cores to existing nodes serving the least number of cores
comment|// but (for now) require that each core goes on a distinct node.
comment|// TODO: add smarter options that look at the current number of cores per
comment|// node?
comment|// for now we just go random
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|clusterState
operator|.
name|getLiveNodes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodeList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|nodeList
operator|.
name|addAll
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
if|if
condition|(
name|createNodeList
operator|!=
literal|null
condition|)
name|nodeList
operator|.
name|retainAll
argument_list|(
name|createNodeList
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodeList
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeList
operator|.
name|size
argument_list|()
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Cannot create collection "
operator|+
name|collectionName
operator|+
literal|". No live Solr-instances"
operator|+
operator|(
operator|(
name|createNodeList
operator|!=
literal|null
operator|)
condition|?
literal|" among Solr-instances specified in "
operator|+
name|CREATE_NODE_SET
operator|+
literal|":"
operator|+
name|createNodeSetStr
else|:
literal|""
operator|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|repFactor
operator|>
name|nodeList
operator|.
name|size
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Specified "
operator|+
name|REPLICATION_FACTOR
operator|+
literal|" of "
operator|+
name|repFactor
operator|+
literal|" on collection "
operator|+
name|collectionName
operator|+
literal|" is higher than or equal to the number of Solr instances currently live or part of your "
operator|+
name|CREATE_NODE_SET
operator|+
literal|"("
operator|+
name|nodeList
operator|.
name|size
argument_list|()
operator|+
literal|"). Its unusual to run two replica of the same slice on the same Solr-instance."
argument_list|)
expr_stmt|;
block|}
name|int
name|maxShardsAllowedToCreate
init|=
name|maxShardsPerNode
operator|*
name|nodeList
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|requestedShardsToCreate
init|=
name|numSlices
operator|*
name|repFactor
decl_stmt|;
if|if
condition|(
name|maxShardsAllowedToCreate
operator|<
name|requestedShardsToCreate
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Cannot create collection "
operator|+
name|collectionName
operator|+
literal|". Value of "
operator|+
name|MAX_SHARDS_PER_NODE
operator|+
literal|" is "
operator|+
name|maxShardsPerNode
operator|+
literal|", and the number of live nodes is "
operator|+
name|nodeList
operator|.
name|size
argument_list|()
operator|+
literal|". This allows a maximum of "
operator|+
name|maxShardsAllowedToCreate
operator|+
literal|" to be created. Value of "
operator|+
name|NUM_SLICES
operator|+
literal|" is "
operator|+
name|numSlices
operator|+
literal|" and value of "
operator|+
name|REPLICATION_FACTOR
operator|+
literal|" is "
operator|+
name|repFactor
operator|+
literal|". This requires "
operator|+
name|requestedShardsToCreate
operator|+
literal|" shards to be created (higher than the allowed number)"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numSlices
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|repFactor
condition|;
name|j
operator|++
control|)
block|{
name|String
name|nodeName
init|=
name|nodeList
operator|.
name|get
argument_list|(
operator|(
name|repFactor
operator|*
operator|(
name|i
operator|-
literal|1
operator|)
operator|+
operator|(
name|j
operator|-
literal|1
operator|)
operator|)
operator|%
name|nodeList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|sliceName
init|=
literal|"shard"
operator|+
name|i
decl_stmt|;
name|String
name|shardName
init|=
name|collectionName
operator|+
literal|"_"
operator|+
name|sliceName
operator|+
literal|"_replica"
operator|+
name|j
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Creating shard "
operator|+
name|shardName
operator|+
literal|" as part of slice "
operator|+
name|sliceName
operator|+
literal|" of collection "
operator|+
name|collectionName
operator|+
literal|" on "
operator|+
name|nodeName
argument_list|)
expr_stmt|;
comment|// Need to create new params for each request
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|shardName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"collection.configName"
argument_list|,
name|configName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|SHARD
argument_list|,
name|sliceName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
name|numSlices
argument_list|)
expr_stmt|;
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|sreq
operator|.
name|nodeName
operator|=
name|nodeName
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
name|adminPath
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|purpose
operator|=
literal|1
expr_stmt|;
name|String
name|replica
init|=
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|replica
operator|.
name|startsWith
argument_list|(
literal|"http://"
argument_list|)
condition|)
name|replica
operator|=
name|replica
operator|.
name|substring
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|replica
block|}
expr_stmt|;
name|sreq
operator|.
name|actualShards
operator|=
name|sreq
operator|.
name|shards
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|shardHandler
operator|.
name|submit
argument_list|(
name|sreq
argument_list|,
name|replica
argument_list|,
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
block|}
block|}
name|ShardResponse
name|srsp
decl_stmt|;
do|do
block|{
name|srsp
operator|=
name|shardHandler
operator|.
name|takeCompletedOrError
argument_list|()
expr_stmt|;
if|if
condition|(
name|srsp
operator|!=
literal|null
condition|)
block|{
name|processResponse
argument_list|(
name|results
argument_list|,
name|srsp
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|srsp
operator|!=
literal|null
condition|)
do|;
name|log
operator|.
name|info
argument_list|(
literal|"Finished create command on all shards for collection: "
operator|+
name|collectionName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|null
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|collectionCmd
specifier|private
name|void
name|collectionCmd
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|ModifiableSolrParams
name|params
parameter_list|,
name|NamedList
name|results
parameter_list|,
name|String
name|stateMatcher
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Executing Collection Cmd : "
operator|+
name|params
argument_list|)
expr_stmt|;
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|DocCollection
name|coll
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|coll
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Could not find collection:"
operator|+
name|collectionName
argument_list|)
throw|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|entry
range|:
name|coll
operator|.
name|getSlicesMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Slice
name|slice
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shards
init|=
name|slice
operator|.
name|getReplicasMap
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
argument_list|>
name|shardEntries
init|=
name|shards
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shardEntry
range|:
name|shardEntries
control|)
block|{
specifier|final
name|ZkNodeProps
name|node
init|=
name|shardEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterState
operator|.
name|liveNodesContain
argument_list|(
name|node
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|)
operator|&&
operator|(
name|stateMatcher
operator|!=
literal|null
condition|?
name|node
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
operator|.
name|equals
argument_list|(
name|stateMatcher
argument_list|)
else|:
literal|true
operator|)
condition|)
block|{
comment|// For thread safety, only simple clone the ModifiableSolrParams
name|ModifiableSolrParams
name|cloneParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|cloneParams
operator|.
name|add
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|cloneParams
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
name|node
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|replica
init|=
name|node
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
decl_stmt|;
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|sreq
operator|.
name|nodeName
operator|=
name|node
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
expr_stmt|;
comment|// yes, they must use same admin handler path everywhere...
name|cloneParams
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
name|adminPath
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|purpose
operator|=
literal|1
expr_stmt|;
comment|// TODO: this sucks
if|if
condition|(
name|replica
operator|.
name|startsWith
argument_list|(
literal|"http://"
argument_list|)
condition|)
name|replica
operator|=
name|replica
operator|.
name|substring
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|replica
block|}
expr_stmt|;
name|sreq
operator|.
name|actualShards
operator|=
name|sreq
operator|.
name|shards
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
name|cloneParams
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Collection Admin sending CoreAdmin cmd to "
operator|+
name|replica
operator|+
literal|" params:"
operator|+
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
name|shardHandler
operator|.
name|submit
argument_list|(
name|sreq
argument_list|,
name|replica
argument_list|,
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ShardResponse
name|srsp
decl_stmt|;
do|do
block|{
name|srsp
operator|=
name|shardHandler
operator|.
name|takeCompletedOrError
argument_list|()
expr_stmt|;
if|if
condition|(
name|srsp
operator|!=
literal|null
condition|)
block|{
name|processResponse
argument_list|(
name|results
argument_list|,
name|srsp
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|srsp
operator|!=
literal|null
condition|)
do|;
block|}
DECL|method|processResponse
specifier|private
name|void
name|processResponse
parameter_list|(
name|NamedList
name|results
parameter_list|,
name|ShardResponse
name|srsp
parameter_list|)
block|{
name|Throwable
name|e
init|=
name|srsp
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error from shard: "
operator|+
name|srsp
operator|.
name|getShard
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|SimpleOrderedMap
name|failure
init|=
operator|(
name|SimpleOrderedMap
operator|)
name|results
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
decl_stmt|;
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
operator|new
name|SimpleOrderedMap
argument_list|()
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"failure"
argument_list|,
name|failure
argument_list|)
expr_stmt|;
block|}
name|failure
operator|.
name|add
argument_list|(
name|srsp
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SimpleOrderedMap
name|success
init|=
operator|(
name|SimpleOrderedMap
operator|)
name|results
operator|.
name|get
argument_list|(
literal|"success"
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
operator|==
literal|null
condition|)
block|{
name|success
operator|=
operator|new
name|SimpleOrderedMap
argument_list|()
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"success"
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
name|success
operator|.
name|add
argument_list|(
name|srsp
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|msgStrToInt
specifier|private
name|int
name|msgStrToInt
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|String
name|key
parameter_list|,
name|Integer
name|def
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|str
init|=
name|message
operator|.
name|getStr
argument_list|(
name|key
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|str
operator|==
literal|null
condition|?
name|def
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|str
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Could not parse "
operator|+
name|key
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|isClosed
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|isClosed
return|;
block|}
block|}
end_class
end_unit
