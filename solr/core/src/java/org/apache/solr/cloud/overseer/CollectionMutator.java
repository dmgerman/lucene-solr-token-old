begin_unit
begin_package
DECL|package|org.apache.solr.cloud.overseer
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ImplicitDocRouter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CollectionsHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|COLLECTION_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|NAME
import|;
end_import
begin_class
DECL|class|CollectionMutator
specifier|public
class|class
name|CollectionMutator
block|{
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CollectionMutator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|zkStateReader
specifier|protected
specifier|final
name|ZkStateReader
name|zkStateReader
decl_stmt|;
DECL|method|CollectionMutator
specifier|public
name|CollectionMutator
parameter_list|(
name|ZkStateReader
name|zkStateReader
parameter_list|)
block|{
name|this
operator|.
name|zkStateReader
operator|=
name|zkStateReader
expr_stmt|;
block|}
DECL|method|createShard
specifier|public
name|ZkWriteCommand
name|createShard
parameter_list|(
specifier|final
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkCollectionKeyExistence
argument_list|(
name|message
argument_list|)
condition|)
return|return
name|ZkStateWriter
operator|.
name|NO_OP
return|;
name|String
name|shardId
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|Slice
name|slice
init|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collectionName
argument_list|,
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|replicas
init|=
name|Collections
operator|.
name|EMPTY_MAP
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sliceProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|shardRange
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_RANGE_PROP
argument_list|)
decl_stmt|;
name|String
name|shardState
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_STATE_PROP
argument_list|)
decl_stmt|;
name|String
name|shardParent
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_PARENT_PROP
argument_list|)
decl_stmt|;
name|sliceProps
operator|.
name|put
argument_list|(
name|Slice
operator|.
name|RANGE
argument_list|,
name|shardRange
argument_list|)
expr_stmt|;
name|sliceProps
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|shardState
argument_list|)
expr_stmt|;
if|if
condition|(
name|shardParent
operator|!=
literal|null
condition|)
block|{
name|sliceProps
operator|.
name|put
argument_list|(
name|Slice
operator|.
name|PARENT
argument_list|,
name|shardParent
argument_list|)
expr_stmt|;
block|}
name|DocCollection
name|collection
init|=
name|updateSlice
argument_list|(
name|collectionName
argument_list|,
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
argument_list|,
operator|new
name|Slice
argument_list|(
name|shardId
argument_list|,
name|replicas
argument_list|,
name|sliceProps
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|ZkWriteCommand
argument_list|(
name|collectionName
argument_list|,
name|collection
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to create Shard: "
operator|+
name|shardId
operator|+
literal|" because it already exists in collection: "
operator|+
name|collectionName
argument_list|)
expr_stmt|;
return|return
name|ZkStateWriter
operator|.
name|NO_OP
return|;
block|}
block|}
DECL|method|deleteShard
specifier|public
name|ZkWriteCommand
name|deleteShard
parameter_list|(
specifier|final
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
specifier|final
name|String
name|sliceId
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
specifier|final
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkCollectionKeyExistence
argument_list|(
name|message
argument_list|)
condition|)
return|return
name|ZkStateWriter
operator|.
name|NO_OP
return|;
name|log
operator|.
name|info
argument_list|(
literal|"Removing collection: "
operator|+
name|collection
operator|+
literal|" shard: "
operator|+
name|sliceId
operator|+
literal|" from clusterstate"
argument_list|)
expr_stmt|;
name|DocCollection
name|coll
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|newSlices
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|coll
operator|.
name|getSlicesMap
argument_list|()
argument_list|)
decl_stmt|;
name|newSlices
operator|.
name|remove
argument_list|(
name|sliceId
argument_list|)
expr_stmt|;
name|DocCollection
name|newCollection
init|=
name|coll
operator|.
name|copyWithSlices
argument_list|(
name|newSlices
argument_list|)
decl_stmt|;
return|return
operator|new
name|ZkWriteCommand
argument_list|(
name|collection
argument_list|,
name|newCollection
argument_list|)
return|;
block|}
DECL|method|modifyCollection
specifier|public
name|ZkWriteCommand
name|modifyCollection
parameter_list|(
specifier|final
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
if|if
condition|(
operator|!
name|checkCollectionKeyExistence
argument_list|(
name|message
argument_list|)
condition|)
return|return
name|ZkStateWriter
operator|.
name|NO_OP
return|;
name|DocCollection
name|coll
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|message
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
name|coll
operator|.
name|shallowCopy
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|prop
range|:
name|CollectionsHandler
operator|.
name|MODIFIABLE_COLL_PROPS
control|)
block|{
if|if
condition|(
name|message
operator|.
name|get
argument_list|(
name|prop
argument_list|)
operator|!=
literal|null
condition|)
name|m
operator|.
name|put
argument_list|(
name|prop
argument_list|,
name|message
operator|.
name|get
argument_list|(
name|prop
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ZkWriteCommand
argument_list|(
name|coll
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|DocCollection
argument_list|(
name|coll
operator|.
name|getName
argument_list|()
argument_list|,
name|coll
operator|.
name|getSlicesMap
argument_list|()
argument_list|,
name|m
argument_list|,
name|coll
operator|.
name|getRouter
argument_list|()
argument_list|,
name|coll
operator|.
name|getZNodeVersion
argument_list|()
argument_list|,
name|coll
operator|.
name|getZNode
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|updateSlice
specifier|public
specifier|static
name|DocCollection
name|updateSlice
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|DocCollection
name|collection
parameter_list|,
name|Slice
name|slice
parameter_list|)
block|{
name|DocCollection
name|newCollection
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
comment|//  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself
comment|// without explicitly creating a collection.  In this current case, we assume custom sharding with an "implicit" router.
name|slices
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|slices
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|slice
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|DocCollection
operator|.
name|DOC_ROUTER
argument_list|,
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
name|NAME
argument_list|,
name|ImplicitDocRouter
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|newCollection
operator|=
operator|new
name|DocCollection
argument_list|(
name|collectionName
argument_list|,
name|slices
argument_list|,
name|props
argument_list|,
operator|new
name|ImplicitDocRouter
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|slices
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|collection
operator|.
name|getSlicesMap
argument_list|()
argument_list|)
expr_stmt|;
comment|// make a shallow copy
name|slices
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|slice
argument_list|)
expr_stmt|;
name|newCollection
operator|=
name|collection
operator|.
name|copyWithSlices
argument_list|(
name|slices
argument_list|)
expr_stmt|;
block|}
return|return
name|newCollection
return|;
block|}
DECL|method|checkCollectionKeyExistence
specifier|static
name|boolean
name|checkCollectionKeyExistence
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|)
block|{
return|return
name|checkKeyExistence
argument_list|(
name|message
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
return|;
block|}
DECL|method|checkKeyExistence
specifier|static
name|boolean
name|checkKeyExistence
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|String
name|value
init|=
name|message
operator|.
name|getStr
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Skipping invalid Overseer message because it has no "
operator|+
name|key
operator|+
literal|" specified: "
operator|+
name|message
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
