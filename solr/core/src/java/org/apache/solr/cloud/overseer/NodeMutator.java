begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.cloud.overseer
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
package|;
end_package
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_class
DECL|class|NodeMutator
specifier|public
class|class
name|NodeMutator
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|NodeMutator
specifier|public
name|NodeMutator
parameter_list|(
name|ZkStateReader
name|zkStateReader
parameter_list|)
block|{    }
DECL|method|downNode
specifier|public
name|List
argument_list|<
name|ZkWriteCommand
argument_list|>
name|downNode
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|List
argument_list|<
name|ZkWriteCommand
argument_list|>
name|zkWriteCommands
init|=
operator|new
name|ArrayList
argument_list|<
name|ZkWriteCommand
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|nodeName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"DownNode state invoked for node: "
operator|+
name|nodeName
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|collections
init|=
name|clusterState
operator|.
name|getCollections
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|collection
range|:
name|collections
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slicesCopy
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|clusterState
operator|.
name|getSlicesMap
argument_list|(
name|collection
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
name|entries
init|=
name|slicesCopy
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|Slice
name|slice
init|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|newReplicas
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Replica
argument_list|>
name|replicas
init|=
name|slice
operator|.
name|getReplicas
argument_list|()
decl_stmt|;
for|for
control|(
name|Replica
name|replica
range|:
name|replicas
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|replica
operator|.
name|shallowCopy
argument_list|()
decl_stmt|;
name|String
name|rNodeName
init|=
name|replica
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|rNodeName
operator|.
name|equals
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Update replica state for "
operator|+
name|replica
operator|+
literal|" to "
operator|+
name|Replica
operator|.
name|State
operator|.
name|DOWN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|DOWN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Replica
name|newReplica
init|=
operator|new
name|Replica
argument_list|(
name|replica
operator|.
name|getName
argument_list|()
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|newReplicas
operator|.
name|put
argument_list|(
name|replica
operator|.
name|getName
argument_list|()
argument_list|,
name|newReplica
argument_list|)
expr_stmt|;
block|}
name|Slice
name|newSlice
init|=
operator|new
name|Slice
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|newReplicas
argument_list|,
name|slice
operator|.
name|shallowCopy
argument_list|()
argument_list|)
decl_stmt|;
name|slicesCopy
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|newSlice
argument_list|)
expr_stmt|;
block|}
name|zkWriteCommands
operator|.
name|add
argument_list|(
operator|new
name|ZkWriteCommand
argument_list|(
name|collection
argument_list|,
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collection
argument_list|)
operator|.
name|copyWithSlices
argument_list|(
name|slicesCopy
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|zkWriteCommands
return|;
block|}
block|}
end_class
end_unit
