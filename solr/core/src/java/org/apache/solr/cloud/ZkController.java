begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|NetworkInterface
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
operator|.
name|WaitForState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
operator|.
name|OverseerAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
operator|.
name|SliceMutator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|BeforeReconnect
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterStateUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DefaultConnectionStrategy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DefaultZkACLProvider
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DefaultZkCredentialsProvider
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|OnReconnect
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkACLProvider
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCmdExecutor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCredentialsProvider
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZooKeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|URLUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CloseHook
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreDescriptor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateLog
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateShardHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|ConnectionLossException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NoNodeException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|SessionExpiredException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * Handle ZooKeeper interactions.  *   * notes: loads everything on init, creates what's not there - further updates  * are prompted with Watches.  *   * TODO: exceptions during close on attempts to update cloud state  *   */
end_comment
begin_class
DECL|class|ZkController
specifier|public
specifier|final
class|class
name|ZkController
block|{
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZkController
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NEWL
specifier|static
specifier|final
name|String
name|NEWL
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|SKIP_AUTO_RECOVERY
specifier|private
specifier|final
name|boolean
name|SKIP_AUTO_RECOVERY
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"solrcloud.skip.autorecovery"
argument_list|)
decl_stmt|;
DECL|field|overseerJobQueue
specifier|private
specifier|final
name|DistributedQueue
name|overseerJobQueue
decl_stmt|;
DECL|field|overseerCollectionQueue
specifier|private
specifier|final
name|DistributedQueue
name|overseerCollectionQueue
decl_stmt|;
DECL|field|overseerRunningMap
specifier|private
specifier|final
name|DistributedMap
name|overseerRunningMap
decl_stmt|;
DECL|field|overseerCompletedMap
specifier|private
specifier|final
name|DistributedMap
name|overseerCompletedMap
decl_stmt|;
DECL|field|overseerFailureMap
specifier|private
specifier|final
name|DistributedMap
name|overseerFailureMap
decl_stmt|;
DECL|field|CONFIGS_ZKNODE
specifier|public
specifier|static
specifier|final
name|String
name|CONFIGS_ZKNODE
init|=
literal|"/configs"
decl_stmt|;
DECL|field|COLLECTION_PARAM_PREFIX
specifier|public
specifier|final
specifier|static
name|String
name|COLLECTION_PARAM_PREFIX
init|=
literal|"collection."
decl_stmt|;
DECL|field|CONFIGNAME_PROP
specifier|public
specifier|final
specifier|static
name|String
name|CONFIGNAME_PROP
init|=
literal|"configName"
decl_stmt|;
DECL|class|ContextKey
specifier|static
class|class
name|ContextKey
block|{
DECL|field|collection
specifier|private
name|String
name|collection
decl_stmt|;
DECL|field|coreNodeName
specifier|private
name|String
name|coreNodeName
decl_stmt|;
DECL|method|ContextKey
specifier|public
name|ContextKey
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|coreNodeName
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
name|this
operator|.
name|coreNodeName
operator|=
name|coreNodeName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|collection
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|collection
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|coreNodeName
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|coreNodeName
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ContextKey
name|other
init|=
operator|(
name|ContextKey
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|collection
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|collection
operator|.
name|equals
argument_list|(
name|other
operator|.
name|collection
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|coreNodeName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|coreNodeName
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|coreNodeName
operator|.
name|equals
argument_list|(
name|other
operator|.
name|coreNodeName
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
DECL|field|electionContexts
specifier|private
specifier|final
name|Map
argument_list|<
name|ContextKey
argument_list|,
name|ElectionContext
argument_list|>
name|electionContexts
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|ContextKey
argument_list|,
name|ElectionContext
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|zkClient
specifier|private
specifier|final
name|SolrZkClient
name|zkClient
decl_stmt|;
DECL|field|cmdExecutor
specifier|private
specifier|final
name|ZkCmdExecutor
name|cmdExecutor
decl_stmt|;
DECL|field|zkStateReader
specifier|private
specifier|final
name|ZkStateReader
name|zkStateReader
decl_stmt|;
DECL|field|leaderElector
specifier|private
specifier|final
name|LeaderElector
name|leaderElector
decl_stmt|;
DECL|field|zkServerAddress
specifier|private
specifier|final
name|String
name|zkServerAddress
decl_stmt|;
comment|// example: 127.0.0.1:54062/solr
DECL|field|localHostPort
specifier|private
specifier|final
name|String
name|localHostPort
decl_stmt|;
comment|// example: 54065
DECL|field|localHostContext
specifier|private
specifier|final
name|String
name|localHostContext
decl_stmt|;
comment|// example: solr
DECL|field|hostName
specifier|private
specifier|final
name|String
name|hostName
decl_stmt|;
comment|// example: 127.0.0.1
DECL|field|nodeName
specifier|private
specifier|final
name|String
name|nodeName
decl_stmt|;
comment|// example: 127.0.0.1:54065_solr
DECL|field|baseURL
specifier|private
specifier|final
name|String
name|baseURL
decl_stmt|;
comment|// example: http://127.0.0.1:54065/solr
DECL|field|overseerElector
specifier|private
name|LeaderElector
name|overseerElector
decl_stmt|;
comment|// for now, this can be null in tests, in which case recovery will be inactive, and other features
comment|// may accept defaults or use mocks rather than pulling things from a CoreContainer
DECL|field|cc
specifier|private
name|CoreContainer
name|cc
decl_stmt|;
DECL|field|overseer
specifier|protected
specifier|volatile
name|Overseer
name|overseer
decl_stmt|;
DECL|field|leaderVoteWait
specifier|private
name|int
name|leaderVoteWait
decl_stmt|;
DECL|field|leaderConflictResolveWait
specifier|private
name|int
name|leaderConflictResolveWait
decl_stmt|;
DECL|field|genericCoreNodeNames
specifier|private
name|boolean
name|genericCoreNodeNames
decl_stmt|;
DECL|field|clientTimeout
specifier|private
name|int
name|clientTimeout
decl_stmt|;
DECL|field|isClosed
specifier|private
specifier|volatile
name|boolean
name|isClosed
decl_stmt|;
comment|// keeps track of replicas that have been asked to recover by leaders running on this node
DECL|field|replicasInLeaderInitiatedRecovery
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|replicasInLeaderInitiatedRecovery
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// This is an expert and unsupported development mode that does not create
comment|// an Overseer or register a /live node. This let's you monitor the cluster
comment|// and interact with zookeeper via the Solr admin UI on a node outside the cluster,
comment|// and so one that will not be killed or stopped when testing. See developer cloud-scripts.
DECL|field|zkRunOnly
specifier|private
name|boolean
name|zkRunOnly
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"zkRunOnly"
argument_list|)
decl_stmt|;
comment|// expert
comment|// keeps track of a list of objects that need to know a new ZooKeeper session was created after expiration occurred
DECL|field|reconnectListeners
specifier|private
name|List
argument_list|<
name|OnReconnect
argument_list|>
name|reconnectListeners
init|=
operator|new
name|ArrayList
argument_list|<
name|OnReconnect
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|ZkController
specifier|public
name|ZkController
parameter_list|(
specifier|final
name|CoreContainer
name|cc
parameter_list|,
name|String
name|zkServerAddress
parameter_list|,
name|int
name|zkClientTimeout
parameter_list|,
name|int
name|zkClientConnectTimeout
parameter_list|,
name|String
name|localHost
parameter_list|,
name|String
name|locaHostPort
parameter_list|,
name|String
name|localHostContext
parameter_list|,
name|int
name|leaderVoteWait
parameter_list|,
name|int
name|leaderConflictResolveWait
parameter_list|,
name|boolean
name|genericCoreNodeNames
parameter_list|,
specifier|final
name|CurrentCoreDescriptorProvider
name|registerOnReconnect
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|IOException
block|{
if|if
condition|(
name|cc
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"CoreContainer cannot be null."
argument_list|)
throw|;
name|this
operator|.
name|cc
operator|=
name|cc
expr_stmt|;
name|this
operator|.
name|genericCoreNodeNames
operator|=
name|genericCoreNodeNames
expr_stmt|;
comment|// be forgiving and strip this off leading/trailing slashes
comment|// this allows us to support users specifying hostContext="/" in
comment|// solr.xml to indicate the root context, instead of hostContext=""
comment|// which means the default of "solr"
name|localHostContext
operator|=
name|trimLeadingAndTrailingSlashes
argument_list|(
name|localHostContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|zkServerAddress
operator|=
name|zkServerAddress
expr_stmt|;
name|this
operator|.
name|localHostPort
operator|=
name|locaHostPort
expr_stmt|;
name|this
operator|.
name|localHostContext
operator|=
name|localHostContext
expr_stmt|;
name|this
operator|.
name|hostName
operator|=
name|normalizeHostName
argument_list|(
name|localHost
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeName
operator|=
name|generateNodeName
argument_list|(
name|this
operator|.
name|hostName
argument_list|,
name|this
operator|.
name|localHostPort
argument_list|,
name|this
operator|.
name|localHostContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|leaderVoteWait
operator|=
name|leaderVoteWait
expr_stmt|;
name|this
operator|.
name|leaderConflictResolveWait
operator|=
name|leaderConflictResolveWait
expr_stmt|;
name|this
operator|.
name|clientTimeout
operator|=
name|zkClientTimeout
expr_stmt|;
name|DefaultConnectionStrategy
name|strat
init|=
operator|new
name|DefaultConnectionStrategy
argument_list|()
decl_stmt|;
name|String
name|zkACLProviderClass
init|=
name|cc
operator|.
name|getConfig
argument_list|()
operator|.
name|getZkACLProviderClass
argument_list|()
decl_stmt|;
name|ZkACLProvider
name|zkACLProvider
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|zkACLProviderClass
operator|!=
literal|null
operator|&&
name|zkACLProviderClass
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|zkACLProvider
operator|=
name|cc
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|newInstance
argument_list|(
name|zkACLProviderClass
argument_list|,
name|ZkACLProvider
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|zkACLProvider
operator|=
operator|new
name|DefaultZkACLProvider
argument_list|()
expr_stmt|;
block|}
name|String
name|zkCredentialsProviderClass
init|=
name|cc
operator|.
name|getConfig
argument_list|()
operator|.
name|getZkCredentialsProviderClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|zkCredentialsProviderClass
operator|!=
literal|null
operator|&&
name|zkCredentialsProviderClass
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|strat
operator|.
name|setZkCredentialsToAddAutomatically
argument_list|(
name|cc
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|newInstance
argument_list|(
name|zkCredentialsProviderClass
argument_list|,
name|ZkCredentialsProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|strat
operator|.
name|setZkCredentialsToAddAutomatically
argument_list|(
operator|new
name|DefaultZkCredentialsProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addOnReconnectListener
argument_list|(
name|getConfigDirListener
argument_list|()
argument_list|)
expr_stmt|;
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|zkServerAddress
argument_list|,
name|zkClientTimeout
argument_list|,
name|zkClientConnectTimeout
argument_list|,
name|strat
argument_list|,
comment|// on reconnect, reload cloud info
operator|new
name|OnReconnect
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|command
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"ZooKeeper session re-connected ... refreshing core states after session expiration."
argument_list|)
expr_stmt|;
try|try
block|{
comment|// this is troublesome - we dont want to kill anything the old
comment|// leader accepted
comment|// though I guess sync will likely get those updates back? But
comment|// only if
comment|// he is involved in the sync, and he certainly may not be
comment|// ExecutorUtil.shutdownAndAwaitTermination(cc.getCmdDistribExecutor());
comment|// we need to create all of our lost watches
comment|// seems we dont need to do this again...
comment|// Overseer.createClientNodes(zkClient, getNodeName());
name|cc
operator|.
name|cancelCoreRecoveries
argument_list|()
expr_stmt|;
name|registerAllCoresAsDown
argument_list|(
name|registerOnReconnect
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|zkRunOnly
condition|)
block|{
name|ElectionContext
name|context
init|=
operator|new
name|OverseerElectionContext
argument_list|(
name|zkClient
argument_list|,
name|overseer
argument_list|,
name|getNodeName
argument_list|()
argument_list|)
decl_stmt|;
name|ElectionContext
name|prevContext
init|=
name|overseerElector
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|prevContext
operator|!=
literal|null
condition|)
block|{
name|prevContext
operator|.
name|cancelElection
argument_list|()
expr_stmt|;
block|}
name|overseerElector
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|overseerElector
operator|.
name|joinElection
argument_list|(
name|context
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|zkStateReader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
comment|// we have to register as live first to pick up docs in the buffer
name|createEphemeralLiveNode
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|CoreDescriptor
argument_list|>
name|descriptors
init|=
name|registerOnReconnect
operator|.
name|getCurrentDescriptors
argument_list|()
decl_stmt|;
comment|// re register all descriptors
if|if
condition|(
name|descriptors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CoreDescriptor
name|descriptor
range|:
name|descriptors
control|)
block|{
comment|// TODO: we need to think carefully about what happens when it
comment|// was
comment|// a leader that was expired - as well as what to do about
comment|// leaders/overseers
comment|// with connection loss
try|try
block|{
comment|// unload solrcores that have been 'failed over'
name|throwErrorIfReplicaReplaced
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|descriptor
operator|.
name|getName
argument_list|()
argument_list|,
name|descriptor
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Error registering SolrCore"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// notify any other objects that need to know when the session was re-connected
synchronized|synchronized
init|(
name|reconnectListeners
init|)
block|{
for|for
control|(
name|OnReconnect
name|listener
range|:
name|reconnectListeners
control|)
block|{
try|try
block|{
name|listener
operator|.
name|command
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
comment|// not much we can do here other than warn in the log
name|log
operator|.
name|warn
argument_list|(
literal|"Error when notifying OnReconnect listener "
operator|+
name|listener
operator|+
literal|" after session re-connected."
argument_list|,
name|exc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|,
operator|new
name|BeforeReconnect
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|command
parameter_list|()
block|{
try|try
block|{
name|ZkController
operator|.
name|this
operator|.
name|overseer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error trying to stop any Overseer threads"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|markAllAsNotLeader
argument_list|(
name|registerOnReconnect
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|zkACLProvider
argument_list|)
expr_stmt|;
name|this
operator|.
name|overseerJobQueue
operator|=
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|this
operator|.
name|overseerCollectionQueue
operator|=
name|Overseer
operator|.
name|getCollectionQueue
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|this
operator|.
name|overseerRunningMap
operator|=
name|Overseer
operator|.
name|getRunningMap
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|this
operator|.
name|overseerCompletedMap
operator|=
name|Overseer
operator|.
name|getCompletedMap
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|this
operator|.
name|overseerFailureMap
operator|=
name|Overseer
operator|.
name|getFailureMap
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|cmdExecutor
operator|=
operator|new
name|ZkCmdExecutor
argument_list|(
name|zkClientTimeout
argument_list|)
expr_stmt|;
name|leaderElector
operator|=
operator|new
name|LeaderElector
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|zkStateReader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|this
operator|.
name|baseURL
operator|=
name|zkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|this
operator|.
name|nodeName
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|registerOnReconnect
argument_list|)
expr_stmt|;
block|}
DECL|method|getLeaderVoteWait
specifier|public
name|int
name|getLeaderVoteWait
parameter_list|()
block|{
return|return
name|leaderVoteWait
return|;
block|}
DECL|method|getLeaderConflictResolveWait
specifier|public
name|int
name|getLeaderConflictResolveWait
parameter_list|()
block|{
return|return
name|leaderConflictResolveWait
return|;
block|}
DECL|method|registerAllCoresAsDown
specifier|private
name|void
name|registerAllCoresAsDown
parameter_list|(
specifier|final
name|CurrentCoreDescriptorProvider
name|registerOnReconnect
parameter_list|,
name|boolean
name|updateLastPublished
parameter_list|)
block|{
name|List
argument_list|<
name|CoreDescriptor
argument_list|>
name|descriptors
init|=
name|registerOnReconnect
operator|.
name|getCurrentDescriptors
argument_list|()
decl_stmt|;
if|if
condition|(
name|isClosed
condition|)
return|return;
if|if
condition|(
name|descriptors
operator|!=
literal|null
condition|)
block|{
comment|// before registering as live, make sure everyone is in a
comment|// down state
for|for
control|(
name|CoreDescriptor
name|descriptor
range|:
name|descriptors
control|)
block|{
try|try
block|{
name|descriptor
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|setLeader
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|publish
argument_list|(
name|descriptor
argument_list|,
name|ZkStateReader
operator|.
name|DOWN
argument_list|,
name|updateLastPublished
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|isClosed
condition|)
block|{
return|return;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|publish
argument_list|(
name|descriptor
argument_list|,
name|ZkStateReader
operator|.
name|DOWN
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e2
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
for|for
control|(
name|CoreDescriptor
name|descriptor
range|:
name|descriptors
control|)
block|{
comment|// if it looks like we are going to be the leader, we don't
comment|// want to wait for the following stuff
name|CloudDescriptor
name|cloudDesc
init|=
name|descriptor
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
name|String
name|collection
init|=
name|cloudDesc
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|String
name|slice
init|=
name|cloudDesc
operator|.
name|getShardId
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|children
init|=
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|getChildren
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
operator|+
literal|"/leader_elect/"
operator|+
name|slice
operator|+
literal|"/election"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"looks like we are going to be the leader for collection {} shard {}"
argument_list|,
name|collection
argument_list|,
name|slice
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|NoNodeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"looks like we are going to be the leader for collection {} shard {}"
argument_list|,
name|collection
argument_list|,
name|slice
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e2
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
specifier|final
name|String
name|coreZkNodeName
init|=
name|descriptor
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCoreNodeName
argument_list|()
decl_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"calling waitForLeaderToSeeDownState for coreZkNodeName={} collection={} shard={}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|coreZkNodeName
block|,
name|collection
block|,
name|slice
block|}
argument_list|)
expr_stmt|;
name|waitForLeaderToSeeDownState
argument_list|(
name|descriptor
argument_list|,
name|coreZkNodeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|isClosed
condition|)
block|{
return|return;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|markAllAsNotLeader
specifier|private
name|void
name|markAllAsNotLeader
parameter_list|(
specifier|final
name|CurrentCoreDescriptorProvider
name|registerOnReconnect
parameter_list|)
block|{
name|List
argument_list|<
name|CoreDescriptor
argument_list|>
name|descriptors
init|=
name|registerOnReconnect
operator|.
name|getCurrentDescriptors
argument_list|()
decl_stmt|;
if|if
condition|(
name|descriptors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CoreDescriptor
name|descriptor
range|:
name|descriptors
control|)
block|{
name|descriptor
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|setLeader
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Closes the underlying ZooKeeper client.    */
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|this
operator|.
name|isClosed
operator|=
literal|true
expr_stmt|;
try|try
block|{
for|for
control|(
name|ElectionContext
name|context
range|:
name|electionContexts
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error closing overseer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
try|try
block|{
try|try
block|{
name|overseer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error closing overseer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
try|try
block|{
name|zkStateReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error closing zkStateReader"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error closing zkClient"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Returns true if config file exists    */
DECL|method|configFileExists
specifier|public
name|boolean
name|configFileExists
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|Stat
name|stat
init|=
name|zkClient
operator|.
name|exists
argument_list|(
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
operator|+
literal|"/"
operator|+
name|fileName
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|stat
operator|!=
literal|null
return|;
block|}
comment|/**    * @return information about the cluster from ZooKeeper    */
DECL|method|getClusterState
specifier|public
name|ClusterState
name|getClusterState
parameter_list|()
block|{
return|return
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
return|;
block|}
comment|/**    * Returns config file data (in bytes)    */
DECL|method|getConfigFileData
specifier|public
name|byte
index|[]
name|getConfigFileData
parameter_list|(
name|String
name|zkConfigName
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|zkPath
init|=
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|zkConfigName
operator|+
literal|"/"
operator|+
name|fileName
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|zkPath
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Config file contains no data:"
operator|+
name|zkPath
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Config file contains no data:"
operator|+
name|zkPath
argument_list|)
throw|;
block|}
return|return
name|bytes
return|;
block|}
comment|// normalize host removing any url scheme.
comment|// input can be null, host, or url_prefix://host
DECL|method|normalizeHostName
specifier|private
name|String
name|normalizeHostName
parameter_list|(
name|String
name|host
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|host
operator|==
literal|null
operator|||
name|host
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|String
name|hostaddress
decl_stmt|;
try|try
block|{
name|hostaddress
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostAddress
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|hostaddress
operator|=
literal|"127.0.0.1"
expr_stmt|;
comment|// cannot resolve system hostname, fall through
block|}
comment|// Re-get the IP again for "127.0.0.1", the other case we trust the hosts
comment|// file is right.
if|if
condition|(
literal|"127.0.0.1"
operator|.
name|equals
argument_list|(
name|hostaddress
argument_list|)
condition|)
block|{
name|Enumeration
argument_list|<
name|NetworkInterface
argument_list|>
name|netInterfaces
init|=
literal|null
decl_stmt|;
try|try
block|{
name|netInterfaces
operator|=
name|NetworkInterface
operator|.
name|getNetworkInterfaces
argument_list|()
expr_stmt|;
while|while
condition|(
name|netInterfaces
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|NetworkInterface
name|ni
init|=
name|netInterfaces
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|InetAddress
argument_list|>
name|ips
init|=
name|ni
operator|.
name|getInetAddresses
argument_list|()
decl_stmt|;
while|while
condition|(
name|ips
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|InetAddress
name|ip
init|=
name|ips
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|ip
operator|.
name|isSiteLocalAddress
argument_list|()
condition|)
block|{
name|hostaddress
operator|=
name|ip
operator|.
name|getHostAddress
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Error while looking for a better host name than 127.0.0.1"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|host
operator|=
name|hostaddress
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|URLUtil
operator|.
name|hasScheme
argument_list|(
name|host
argument_list|)
condition|)
block|{
name|host
operator|=
name|URLUtil
operator|.
name|removeScheme
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|host
return|;
block|}
DECL|method|getHostName
specifier|public
name|String
name|getHostName
parameter_list|()
block|{
return|return
name|hostName
return|;
block|}
DECL|method|getHostPort
specifier|public
name|String
name|getHostPort
parameter_list|()
block|{
return|return
name|localHostPort
return|;
block|}
DECL|method|getZkClient
specifier|public
name|SolrZkClient
name|getZkClient
parameter_list|()
block|{
return|return
name|zkClient
return|;
block|}
comment|/**    * @return zookeeper server address    */
DECL|method|getZkServerAddress
specifier|public
name|String
name|getZkServerAddress
parameter_list|()
block|{
return|return
name|zkServerAddress
return|;
block|}
DECL|method|init
specifier|private
name|void
name|init
parameter_list|(
name|CurrentCoreDescriptorProvider
name|registerOnReconnect
parameter_list|)
block|{
try|try
block|{
name|boolean
name|createdWatchesAndUpdated
init|=
literal|false
decl_stmt|;
name|Stat
name|stat
init|=
name|zkClient
operator|.
name|exists
argument_list|(
name|ZkStateReader
operator|.
name|LIVE_NODES_ZKNODE
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|!=
literal|null
operator|&&
name|stat
operator|.
name|getNumChildren
argument_list|()
operator|>
literal|0
condition|)
block|{
name|zkStateReader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
name|createdWatchesAndUpdated
operator|=
literal|true
expr_stmt|;
name|publishAndWaitForDownStates
argument_list|()
expr_stmt|;
block|}
comment|// makes nodes zkNode
name|cmdExecutor
operator|.
name|ensureExists
argument_list|(
name|ZkStateReader
operator|.
name|LIVE_NODES_ZKNODE
argument_list|,
name|zkClient
argument_list|)
expr_stmt|;
name|createEphemeralLiveNode
argument_list|()
expr_stmt|;
name|cmdExecutor
operator|.
name|ensureExists
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
argument_list|,
name|zkClient
argument_list|)
expr_stmt|;
name|ShardHandler
name|shardHandler
decl_stmt|;
name|UpdateShardHandler
name|updateShardHandler
decl_stmt|;
name|String
name|adminPath
decl_stmt|;
name|shardHandler
operator|=
name|cc
operator|.
name|getShardHandlerFactory
argument_list|()
operator|.
name|getShardHandler
argument_list|()
expr_stmt|;
name|updateShardHandler
operator|=
name|cc
operator|.
name|getUpdateShardHandler
argument_list|()
expr_stmt|;
name|adminPath
operator|=
name|cc
operator|.
name|getAdminPath
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|zkRunOnly
condition|)
block|{
name|overseerElector
operator|=
operator|new
name|LeaderElector
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|this
operator|.
name|overseer
operator|=
operator|new
name|Overseer
argument_list|(
name|shardHandler
argument_list|,
name|updateShardHandler
argument_list|,
name|adminPath
argument_list|,
name|zkStateReader
argument_list|,
name|this
argument_list|,
name|cc
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|ElectionContext
name|context
init|=
operator|new
name|OverseerElectionContext
argument_list|(
name|zkClient
argument_list|,
name|overseer
argument_list|,
name|getNodeName
argument_list|()
argument_list|)
decl_stmt|;
name|overseerElector
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|overseerElector
operator|.
name|joinElection
argument_list|(
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|createdWatchesAndUpdated
condition|)
block|{
name|zkStateReader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Can't create ZooKeeperController"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|publishAndWaitForDownStates
specifier|public
name|void
name|publishAndWaitForDownStates
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|ClusterState
name|clusterState
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|collections
init|=
name|clusterState
operator|.
name|getCollections
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|updatedNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|collectionName
range|:
name|collections
control|)
block|{
name|DocCollection
name|collection
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Slice
argument_list|>
name|slices
init|=
name|collection
operator|.
name|getSlices
argument_list|()
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|slices
control|)
block|{
name|Collection
argument_list|<
name|Replica
argument_list|>
name|replicas
init|=
name|slice
operator|.
name|getReplicas
argument_list|()
decl_stmt|;
for|for
control|(
name|Replica
name|replica
range|:
name|replicas
control|)
block|{
if|if
condition|(
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|&&
operator|!
operator|(
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
operator|.
name|equals
argument_list|(
name|ZkStateReader
operator|.
name|DOWN
argument_list|)
operator|)
condition|)
block|{
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
literal|"state"
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|ZkStateReader
operator|.
name|DOWN
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|getBaseUrl
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
argument_list|,
name|ZkStateReader
operator|.
name|ROLES_PROP
argument_list|,
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|ROLES_PROP
argument_list|)
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|getNodeName
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|,
name|replica
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|updatedNodes
operator|.
name|add
argument_list|(
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|overseerJobQueue
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// now wait till the updates are in our state
name|long
name|now
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|timeout
init|=
name|now
operator|+
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|convert
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|boolean
name|foundStates
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|<
name|timeout
condition|)
block|{
name|clusterState
operator|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
expr_stmt|;
name|collections
operator|=
name|clusterState
operator|.
name|getCollections
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|collectionName
range|:
name|collections
control|)
block|{
name|DocCollection
name|collection
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Slice
argument_list|>
name|slices
init|=
name|collection
operator|.
name|getSlices
argument_list|()
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|slices
control|)
block|{
name|Collection
argument_list|<
name|Replica
argument_list|>
name|replicas
init|=
name|slice
operator|.
name|getReplicas
argument_list|()
decl_stmt|;
for|for
control|(
name|Replica
name|replica
range|:
name|replicas
control|)
block|{
if|if
condition|(
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
operator|.
name|equals
argument_list|(
name|ZkStateReader
operator|.
name|DOWN
argument_list|)
condition|)
block|{
name|updatedNodes
operator|.
name|remove
argument_list|(
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|updatedNodes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|foundStates
operator|=
literal|true
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|foundStates
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Timed out waiting to see all nodes published as DOWN in our cluster state."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validates if the chroot exists in zk (or if it is successfully created).    * Optionally, if create is set to true this method will create the path in    * case it doesn't exist    *     * @return true if the path exists or is created false if the path doesn't    *         exist and 'create' = false    */
DECL|method|checkChrootPath
specifier|public
specifier|static
name|boolean
name|checkChrootPath
parameter_list|(
name|String
name|zkHost
parameter_list|,
name|boolean
name|create
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|SolrZkClient
operator|.
name|containsChroot
argument_list|(
name|zkHost
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"zkHost includes chroot"
argument_list|)
expr_stmt|;
name|String
name|chrootPath
init|=
name|zkHost
operator|.
name|substring
argument_list|(
name|zkHost
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|zkHost
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|SolrZkClient
name|tmpClient
init|=
operator|new
name|SolrZkClient
argument_list|(
name|zkHost
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|zkHost
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|,
literal|60000
argument_list|,
literal|30000
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|exists
init|=
name|tmpClient
operator|.
name|exists
argument_list|(
name|chrootPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|exists
operator|&&
name|create
condition|)
block|{
name|tmpClient
operator|.
name|makePath
argument_list|(
name|chrootPath
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|exists
operator|=
literal|true
expr_stmt|;
block|}
name|tmpClient
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|exists
return|;
block|}
DECL|method|isConnected
specifier|public
name|boolean
name|isConnected
parameter_list|()
block|{
return|return
name|zkClient
operator|.
name|isConnected
argument_list|()
return|;
block|}
DECL|method|createEphemeralLiveNode
specifier|private
name|void
name|createEphemeralLiveNode
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|zkRunOnly
condition|)
block|{
return|return;
block|}
name|String
name|nodeName
init|=
name|getNodeName
argument_list|()
decl_stmt|;
name|String
name|nodePath
init|=
name|ZkStateReader
operator|.
name|LIVE_NODES_ZKNODE
operator|+
literal|"/"
operator|+
name|nodeName
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Register node as live in ZooKeeper:"
operator|+
name|nodePath
argument_list|)
expr_stmt|;
try|try
block|{
name|boolean
name|nodeDeleted
init|=
literal|true
decl_stmt|;
try|try
block|{
comment|// we attempt a delete in the case of a quick server bounce -
comment|// if there was not a graceful close, the node may exist
comment|// until expiration timeout - so a node won't be created here because
comment|// it exists, but eventually the node will be removed. So delete
comment|// in case it exists and create a new node.
name|zkClient
operator|.
name|delete
argument_list|(
name|nodePath
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
comment|// fine if there is nothing to delete
comment|// TODO: annoying that ZK logs a warning on us
name|nodeDeleted
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|nodeDeleted
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Found a previous node that still exists while trying to register a new live node "
operator|+
name|nodePath
operator|+
literal|" - removing existing node to create another."
argument_list|)
expr_stmt|;
block|}
name|zkClient
operator|.
name|makePath
argument_list|(
name|nodePath
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
comment|// its okay if the node already exists
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|!=
name|KeeperException
operator|.
name|Code
operator|.
name|NODEEXISTS
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
DECL|method|getNodeName
specifier|public
name|String
name|getNodeName
parameter_list|()
block|{
return|return
name|nodeName
return|;
block|}
comment|/**    * Returns true if the path exists    */
DECL|method|pathExists
specifier|public
name|boolean
name|pathExists
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|zkClient
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Register shard with ZooKeeper.    *     * @return the shardId for the SolrCore    */
DECL|method|register
specifier|public
name|String
name|register
parameter_list|(
name|String
name|coreName
parameter_list|,
specifier|final
name|CoreDescriptor
name|desc
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|register
argument_list|(
name|coreName
argument_list|,
name|desc
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Register shard with ZooKeeper.    *     * @return the shardId for the SolrCore    */
DECL|method|register
specifier|public
name|String
name|register
parameter_list|(
name|String
name|coreName
parameter_list|,
specifier|final
name|CoreDescriptor
name|desc
parameter_list|,
name|boolean
name|recoverReloadedCores
parameter_list|,
name|boolean
name|afterExpiration
parameter_list|)
throws|throws
name|Exception
block|{
comment|// pre register has published our down state
specifier|final
name|String
name|baseUrl
init|=
name|getBaseUrl
argument_list|()
decl_stmt|;
specifier|final
name|CloudDescriptor
name|cloudDesc
init|=
name|desc
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
specifier|final
name|String
name|collection
init|=
name|cloudDesc
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|coreZkNodeName
init|=
name|desc
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCoreNodeName
argument_list|()
decl_stmt|;
assert|assert
name|coreZkNodeName
operator|!=
literal|null
operator|:
literal|"we should have a coreNodeName by now"
assert|;
name|String
name|shardId
init|=
name|cloudDesc
operator|.
name|getShardId
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// we only put a subset of props into the leader node
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|baseUrl
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|coreName
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Register replica - core:"
operator|+
name|coreName
operator|+
literal|" address:"
operator|+
name|baseUrl
operator|+
literal|" collection:"
operator|+
name|cloudDesc
operator|.
name|getCollectionName
argument_list|()
operator|+
literal|" shard:"
operator|+
name|shardId
argument_list|)
expr_stmt|;
block|}
name|ZkNodeProps
name|leaderProps
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
decl_stmt|;
try|try
block|{
comment|// If we're a preferred leader, insert ourselves at the head of the queue
name|boolean
name|joinAtHead
init|=
literal|false
decl_stmt|;
name|Replica
name|replica
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getReplica
argument_list|(
name|desc
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
argument_list|,
name|coreZkNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|replica
operator|!=
literal|null
condition|)
block|{
name|joinAtHead
operator|=
name|replica
operator|.
name|getBool
argument_list|(
name|SliceMutator
operator|.
name|PREFERRED_LEADER_PROP
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|joinElection
argument_list|(
name|desc
argument_list|,
name|afterExpiration
argument_list|,
name|joinAtHead
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// in this case, we want to wait for the leader as long as the leader might
comment|// wait for a vote, at least - but also long enough that a large cluster has
comment|// time to get its act together
name|String
name|leaderUrl
init|=
name|getLeader
argument_list|(
name|cloudDesc
argument_list|,
name|leaderVoteWait
operator|+
literal|600000
argument_list|)
decl_stmt|;
name|String
name|ourUrl
init|=
name|ZkCoreNodeProps
operator|.
name|getCoreUrl
argument_list|(
name|baseUrl
argument_list|,
name|coreName
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"We are "
operator|+
name|ourUrl
operator|+
literal|" and leader is "
operator|+
name|leaderUrl
argument_list|)
expr_stmt|;
name|boolean
name|isLeader
init|=
name|leaderUrl
operator|.
name|equals
argument_list|(
name|ourUrl
argument_list|)
decl_stmt|;
try|try
init|(
name|SolrCore
name|core
init|=
name|cc
operator|.
name|getCore
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
init|)
block|{
comment|// recover from local transaction log and wait for it to complete before
comment|// going active
comment|// TODO: should this be moved to another thread? To recoveryStrat?
comment|// TODO: should this actually be done earlier, before (or as part of)
comment|// leader election perhaps?
name|UpdateLog
name|ulog
init|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|core
operator|.
name|isReloaded
argument_list|()
operator|&&
name|ulog
operator|!=
literal|null
condition|)
block|{
comment|// disable recovery in case shard is in construction state (for shard splits)
name|Slice
name|slice
init|=
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Slice
operator|.
name|CONSTRUCTION
operator|.
name|equals
argument_list|(
name|slice
operator|.
name|getState
argument_list|()
argument_list|)
operator|||
operator|!
name|isLeader
condition|)
block|{
name|Future
argument_list|<
name|UpdateLog
operator|.
name|RecoveryInfo
argument_list|>
name|recoveryFuture
init|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|.
name|recoverFromLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|recoveryFuture
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Replaying tlog for "
operator|+
name|ourUrl
operator|+
literal|" during startup... NOTE: This can take a while."
argument_list|)
expr_stmt|;
name|recoveryFuture
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// NOTE: this could potentially block for
comment|// minutes or more!
comment|// TODO: public as recovering in the mean time?
comment|// TODO: in the future we could do peersync in parallel with recoverFromLog
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No LogReplay needed for core="
operator|+
name|core
operator|.
name|getName
argument_list|()
operator|+
literal|" baseURL="
operator|+
name|baseUrl
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|didRecovery
init|=
name|checkRecovery
argument_list|(
name|coreName
argument_list|,
name|desc
argument_list|,
name|recoverReloadedCores
argument_list|,
name|isLeader
argument_list|,
name|cloudDesc
argument_list|,
name|collection
argument_list|,
name|coreZkNodeName
argument_list|,
name|shardId
argument_list|,
name|leaderProps
argument_list|,
name|core
argument_list|,
name|cc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|didRecovery
condition|)
block|{
name|publish
argument_list|(
name|desc
argument_list|,
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// make sure we have an update cluster state right away
name|zkStateReader
operator|.
name|updateClusterState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|shardId
return|;
block|}
comment|// timeoutms is the timeout for the first call to get the leader - there is then
comment|// a longer wait to make sure that leader matches our local state
DECL|method|getLeader
specifier|private
name|String
name|getLeader
parameter_list|(
specifier|final
name|CloudDescriptor
name|cloudDesc
parameter_list|,
name|int
name|timeoutms
parameter_list|)
block|{
name|String
name|collection
init|=
name|cloudDesc
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|String
name|shardId
init|=
name|cloudDesc
operator|.
name|getShardId
argument_list|()
decl_stmt|;
comment|// rather than look in the cluster state file, we go straight to the zknodes
comment|// here, because on cluster restart there could be stale leader info in the
comment|// cluster state node that won't be updated for a moment
name|String
name|leaderUrl
decl_stmt|;
try|try
block|{
name|leaderUrl
operator|=
name|getLeaderProps
argument_list|(
name|collection
argument_list|,
name|cloudDesc
operator|.
name|getShardId
argument_list|()
argument_list|,
name|timeoutms
argument_list|)
operator|.
name|getCoreUrl
argument_list|()
expr_stmt|;
comment|// now wait until our currently cloud state contains the latest leader
name|String
name|clusterStateLeaderUrl
init|=
name|zkStateReader
operator|.
name|getLeaderUrl
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|,
name|timeoutms
operator|*
literal|2
argument_list|)
decl_stmt|;
comment|// since we found it in zk, we are willing to
comment|// wait a while to find it in state
name|int
name|tries
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|msInSec
init|=
literal|1000L
decl_stmt|;
name|int
name|maxTries
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|leaderConflictResolveWait
operator|/
name|msInSec
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|leaderUrl
operator|.
name|equals
argument_list|(
name|clusterStateLeaderUrl
argument_list|)
condition|)
block|{
if|if
condition|(
name|tries
operator|>
name|maxTries
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"There is conflicting information about the leader of shard: "
operator|+
name|cloudDesc
operator|.
name|getShardId
argument_list|()
operator|+
literal|" our state says:"
operator|+
name|clusterStateLeaderUrl
operator|+
literal|" but zookeeper says:"
operator|+
name|leaderUrl
argument_list|)
throw|;
block|}
name|tries
operator|++
expr_stmt|;
if|if
condition|(
name|tries
operator|%
literal|30
operator|==
literal|0
condition|)
block|{
name|String
name|warnMsg
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"Still seeing conflicting information about the leader "
operator|+
literal|"of shard %s for collection %s after %d seconds; our state says %s, but ZooKeeper says %s"
argument_list|,
name|cloudDesc
operator|.
name|getShardId
argument_list|()
argument_list|,
name|collection
argument_list|,
name|tries
argument_list|,
name|clusterStateLeaderUrl
argument_list|,
name|leaderUrl
argument_list|)
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|warnMsg
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|msInSec
argument_list|)
expr_stmt|;
name|clusterStateLeaderUrl
operator|=
name|zkStateReader
operator|.
name|getLeaderUrl
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|,
name|timeoutms
argument_list|)
expr_stmt|;
name|leaderUrl
operator|=
name|getLeaderProps
argument_list|(
name|collection
argument_list|,
name|cloudDesc
operator|.
name|getShardId
argument_list|()
argument_list|,
name|timeoutms
argument_list|)
operator|.
name|getCoreUrl
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error getting leader from zk"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error getting leader from zk for shard "
operator|+
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|leaderUrl
return|;
block|}
comment|/**    * Get leader props directly from zk nodes.    */
DECL|method|getLeaderProps
specifier|public
name|ZkCoreNodeProps
name|getLeaderProps
parameter_list|(
specifier|final
name|String
name|collection
parameter_list|,
specifier|final
name|String
name|slice
parameter_list|,
name|int
name|timeoutms
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|getLeaderProps
argument_list|(
name|collection
argument_list|,
name|slice
argument_list|,
name|timeoutms
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Get leader props directly from zk nodes.    *     * @return leader props    */
DECL|method|getLeaderProps
specifier|public
name|ZkCoreNodeProps
name|getLeaderProps
parameter_list|(
specifier|final
name|String
name|collection
parameter_list|,
specifier|final
name|String
name|slice
parameter_list|,
name|int
name|timeoutms
parameter_list|,
name|boolean
name|failImmediatelyOnExpiration
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|iterCount
init|=
name|timeoutms
operator|/
literal|1000
decl_stmt|;
name|Exception
name|exp
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|iterCount
operator|--
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|byte
index|[]
name|data
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|ZkStateReader
operator|.
name|getShardLeadersPath
argument_list|(
name|collection
argument_list|,
name|slice
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ZkCoreNodeProps
name|leaderProps
init|=
operator|new
name|ZkCoreNodeProps
argument_list|(
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|leaderProps
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SessionExpiredException
name|e
parameter_list|)
block|{
if|if
condition|(
name|failImmediatelyOnExpiration
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Session has expired - could not get leader props"
argument_list|,
name|exp
argument_list|)
throw|;
block|}
name|exp
operator|=
name|e
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exp
operator|=
name|e
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cc
operator|.
name|isShutDown
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
literal|"CoreContainer is close"
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
literal|"Could not get leader props"
argument_list|,
name|exp
argument_list|)
throw|;
block|}
DECL|method|joinElection
specifier|private
name|void
name|joinElection
parameter_list|(
name|CoreDescriptor
name|cd
parameter_list|,
name|boolean
name|afterExpiration
parameter_list|,
name|boolean
name|joinAtHead
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
throws|,
name|IOException
block|{
comment|// look for old context - if we find it, cancel it
name|String
name|collection
init|=
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|coreNodeName
init|=
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCoreNodeName
argument_list|()
decl_stmt|;
name|ContextKey
name|contextKey
init|=
operator|new
name|ContextKey
argument_list|(
name|collection
argument_list|,
name|coreNodeName
argument_list|)
decl_stmt|;
name|ElectionContext
name|prevContext
init|=
name|electionContexts
operator|.
name|get
argument_list|(
name|contextKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevContext
operator|!=
literal|null
condition|)
block|{
name|prevContext
operator|.
name|cancelElection
argument_list|()
expr_stmt|;
block|}
name|String
name|shardId
init|=
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getShardId
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// we only put a subset of props into the leader node
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|getBaseUrl
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|cd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|ourProps
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|ElectionContext
name|context
init|=
operator|new
name|ShardLeaderElectionContext
argument_list|(
name|leaderElector
argument_list|,
name|shardId
argument_list|,
name|collection
argument_list|,
name|coreNodeName
argument_list|,
name|ourProps
argument_list|,
name|this
argument_list|,
name|cc
argument_list|)
decl_stmt|;
name|leaderElector
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|electionContexts
operator|.
name|put
argument_list|(
name|contextKey
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|leaderElector
operator|.
name|joinElection
argument_list|(
name|context
argument_list|,
literal|false
argument_list|,
name|joinAtHead
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns whether or not a recovery was started    */
DECL|method|checkRecovery
specifier|private
name|boolean
name|checkRecovery
parameter_list|(
name|String
name|coreName
parameter_list|,
specifier|final
name|CoreDescriptor
name|desc
parameter_list|,
name|boolean
name|recoverReloadedCores
parameter_list|,
specifier|final
name|boolean
name|isLeader
parameter_list|,
specifier|final
name|CloudDescriptor
name|cloudDesc
parameter_list|,
specifier|final
name|String
name|collection
parameter_list|,
specifier|final
name|String
name|shardZkNodeName
parameter_list|,
name|String
name|shardId
parameter_list|,
name|ZkNodeProps
name|leaderProps
parameter_list|,
name|SolrCore
name|core
parameter_list|,
name|CoreContainer
name|cc
parameter_list|)
block|{
if|if
condition|(
name|SKIP_AUTO_RECOVERY
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Skipping recovery according to sys prop solrcloud.skip.autorecovery"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|boolean
name|doRecovery
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|isLeader
condition|)
block|{
if|if
condition|(
name|core
operator|.
name|isReloaded
argument_list|()
operator|&&
operator|!
name|recoverReloadedCores
condition|)
block|{
name|doRecovery
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|doRecovery
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Core needs to recover:"
operator|+
name|core
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|doRecovery
argument_list|(
name|cc
argument_list|,
name|core
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// see if the leader told us to recover
name|String
name|lirState
init|=
name|getLeaderInitiatedRecoveryState
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|,
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCoreNodeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ZkStateReader
operator|.
name|DOWN
operator|.
name|equals
argument_list|(
name|lirState
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Leader marked core "
operator|+
name|core
operator|.
name|getName
argument_list|()
operator|+
literal|" down; starting recovery process"
argument_list|)
expr_stmt|;
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|doRecovery
argument_list|(
name|cc
argument_list|,
name|core
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"I am the leader, no recovery necessary"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|getBaseUrl
specifier|public
name|String
name|getBaseUrl
parameter_list|()
block|{
return|return
name|baseURL
return|;
block|}
DECL|method|publish
specifier|public
name|void
name|publish
parameter_list|(
specifier|final
name|CoreDescriptor
name|cd
parameter_list|,
specifier|final
name|String
name|state
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|publish
argument_list|(
name|cd
argument_list|,
name|state
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|publish
specifier|public
name|void
name|publish
parameter_list|(
specifier|final
name|CoreDescriptor
name|cd
parameter_list|,
specifier|final
name|String
name|state
parameter_list|,
name|boolean
name|updateLastState
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|publish
argument_list|(
name|cd
argument_list|,
name|state
argument_list|,
name|updateLastState
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Publish core state to overseer.    */
DECL|method|publish
specifier|public
name|void
name|publish
parameter_list|(
specifier|final
name|CoreDescriptor
name|cd
parameter_list|,
specifier|final
name|String
name|state
parameter_list|,
name|boolean
name|updateLastState
parameter_list|,
name|boolean
name|forcePublish
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|forcePublish
condition|)
block|{
try|try
init|(
name|SolrCore
name|core
init|=
name|cc
operator|.
name|getCore
argument_list|(
name|cd
operator|.
name|getName
argument_list|()
argument_list|)
init|)
block|{
if|if
condition|(
name|core
operator|==
literal|null
operator|||
name|core
operator|.
name|isClosed
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
block|}
name|String
name|collection
init|=
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"publishing core={} state={} collection={}"
argument_list|,
name|cd
operator|.
name|getName
argument_list|()
argument_list|,
name|state
argument_list|,
name|collection
argument_list|)
expr_stmt|;
comment|//System.out.println(Thread.currentThread().getStackTrace()[3]);
name|Integer
name|numShards
init|=
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getNumShards
argument_list|()
decl_stmt|;
if|if
condition|(
name|numShards
operator|==
literal|null
condition|)
block|{
comment|//XXX sys prop hack
name|log
operator|.
name|info
argument_list|(
literal|"numShards not found on descriptor - reading it from system property"
argument_list|)
expr_stmt|;
name|numShards
operator|=
name|Integer
operator|.
name|getInteger
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|)
expr_stmt|;
block|}
assert|assert
name|collection
operator|!=
literal|null
operator|&&
name|collection
operator|.
name|length
argument_list|()
operator|>
literal|0
assert|;
name|String
name|shardId
init|=
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getShardId
argument_list|()
decl_stmt|;
name|String
name|coreNodeName
init|=
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCoreNodeName
argument_list|()
decl_stmt|;
comment|// If the leader initiated recovery, then verify that this replica has performed
comment|// recovery as requested before becoming active; don't even look at lirState if going down
if|if
condition|(
operator|!
name|ZkStateReader
operator|.
name|DOWN
operator|.
name|equals
argument_list|(
name|state
argument_list|)
condition|)
block|{
name|String
name|lirState
init|=
name|getLeaderInitiatedRecoveryState
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|,
name|coreNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|lirState
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"active"
operator|.
name|equals
argument_list|(
name|state
argument_list|)
condition|)
block|{
comment|// trying to become active, so leader-initiated state must be recovering
if|if
condition|(
name|ZkStateReader
operator|.
name|RECOVERING
operator|.
name|equals
argument_list|(
name|lirState
argument_list|)
condition|)
block|{
name|updateLeaderInitiatedRecoveryState
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|,
name|coreNodeName
argument_list|,
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ZkStateReader
operator|.
name|DOWN
operator|.
name|equals
argument_list|(
name|lirState
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|INVALID_STATE
argument_list|,
literal|"Cannot publish state of core '"
operator|+
name|cd
operator|.
name|getName
argument_list|()
operator|+
literal|"' as active without recovering first!"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ZkStateReader
operator|.
name|RECOVERING
operator|.
name|equals
argument_list|(
name|state
argument_list|)
condition|)
block|{
comment|// if it is currently DOWN, then trying to enter into recovering state is good
if|if
condition|(
name|ZkStateReader
operator|.
name|DOWN
operator|.
name|equals
argument_list|(
name|lirState
argument_list|)
condition|)
block|{
name|updateLeaderInitiatedRecoveryState
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|,
name|coreNodeName
argument_list|,
name|ZkStateReader
operator|.
name|RECOVERING
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
literal|"state"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|getBaseUrl
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|cd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|ROLES_PROP
argument_list|,
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getRoles
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getShardId
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|)
expr_stmt|;
if|if
condition|(
name|numShards
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
name|numShards
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|coreNodeName
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|,
name|coreNodeName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ClusterStateUtil
operator|.
name|isAutoAddReplicas
argument_list|(
name|getZkStateReader
argument_list|()
argument_list|,
name|collection
argument_list|)
condition|)
block|{
try|try
init|(
name|SolrCore
name|core
init|=
name|cc
operator|.
name|getCore
argument_list|(
name|cd
operator|.
name|getName
argument_list|()
argument_list|)
init|)
block|{
if|if
condition|(
name|core
operator|!=
literal|null
operator|&&
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|isSharedStorage
argument_list|()
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
literal|"dataDir"
argument_list|,
name|core
operator|.
name|getDataDir
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateLog
name|ulog
init|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|ulog
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
literal|"ulogDir"
argument_list|,
name|ulog
operator|.
name|getLogDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
decl_stmt|;
if|if
condition|(
name|updateLastState
condition|)
block|{
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|lastPublished
operator|=
name|state
expr_stmt|;
block|}
name|overseerJobQueue
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|needsToBeAssignedShardId
specifier|private
name|boolean
name|needsToBeAssignedShardId
parameter_list|(
specifier|final
name|CoreDescriptor
name|desc
parameter_list|,
specifier|final
name|ClusterState
name|state
parameter_list|,
specifier|final
name|String
name|coreNodeName
parameter_list|)
block|{
specifier|final
name|CloudDescriptor
name|cloudDesc
init|=
name|desc
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
specifier|final
name|String
name|shardId
init|=
name|state
operator|.
name|getShardId
argument_list|(
name|getNodeName
argument_list|()
argument_list|,
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardId
operator|!=
literal|null
condition|)
block|{
name|cloudDesc
operator|.
name|setShardId
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|unregister
specifier|public
name|void
name|unregister
parameter_list|(
name|String
name|coreName
parameter_list|,
name|CoreDescriptor
name|cd
parameter_list|,
name|String
name|configLocation
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
specifier|final
name|String
name|coreNodeName
init|=
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCoreNodeName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|collection
init|=
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
assert|assert
name|collection
operator|!=
literal|null
assert|;
if|if
condition|(
name|collection
operator|==
literal|null
operator|||
name|collection
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"No collection was specified."
argument_list|)
expr_stmt|;
return|return;
block|}
name|ElectionContext
name|context
init|=
name|electionContexts
operator|.
name|remove
argument_list|(
operator|new
name|ContextKey
argument_list|(
name|collection
argument_list|,
name|coreNodeName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|cancelElection
argument_list|()
expr_stmt|;
block|}
name|CloudDescriptor
name|cloudDescriptor
init|=
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
name|boolean
name|removeWatch
init|=
literal|true
decl_stmt|;
comment|// if there is no SolrCore which is a member of this collection, remove the watch
for|for
control|(
name|SolrCore
name|solrCore
range|:
name|cc
operator|.
name|getCores
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|ZkSolrResourceLoader
operator|)
name|solrCore
operator|.
name|getResourceLoader
argument_list|()
operator|)
operator|.
name|getConfigSetZkPath
argument_list|()
operator|.
name|equals
argument_list|(
name|configLocation
argument_list|)
condition|)
name|configLocation
operator|=
literal|null
expr_stmt|;
comment|//if a core uses this config dir , then set it to null
name|CloudDescriptor
name|cloudDesc
init|=
name|solrCore
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
name|cloudDesc
operator|!=
literal|null
operator|&&
name|cloudDescriptor
operator|.
name|getCollectionName
argument_list|()
operator|.
name|equals
argument_list|(
name|cloudDesc
operator|.
name|getCollectionName
argument_list|()
argument_list|)
condition|)
block|{
name|removeWatch
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|removeWatch
condition|)
name|zkStateReader
operator|.
name|removeZKWatch
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|DELETECORE
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|coreName
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|getNodeName
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|cloudDescriptor
operator|.
name|getCollectionName
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|,
name|coreNodeName
argument_list|)
decl_stmt|;
name|overseerJobQueue
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|configLocation
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|confDirectoryListeners
init|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"This conf directory is no more watched {0}"
argument_list|,
name|configLocation
argument_list|)
expr_stmt|;
name|confDirectoryListeners
operator|.
name|remove
argument_list|(
name|configLocation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createCollection
specifier|public
name|void
name|createCollection
parameter_list|(
name|String
name|collection
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CREATE
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|getNodeName
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|)
decl_stmt|;
name|overseerJobQueue
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|uploadToZK
specifier|public
name|void
name|uploadToZK
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|zkPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|uploadToZK
argument_list|(
name|zkClient
argument_list|,
name|dir
argument_list|,
name|zkPath
argument_list|)
expr_stmt|;
block|}
DECL|method|uploadConfigDir
specifier|public
name|void
name|uploadConfigDir
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|configName
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|uploadToZK
argument_list|(
name|zkClient
argument_list|,
name|dir
argument_list|,
name|ZkController
operator|.
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|configName
argument_list|)
expr_stmt|;
block|}
comment|// convenience for testing
DECL|method|printLayoutToStdOut
name|void
name|printLayoutToStdOut
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|zkClient
operator|.
name|printLayoutToStdOut
argument_list|()
expr_stmt|;
block|}
DECL|method|createCollectionZkNode
specifier|public
name|void
name|createCollectionZkNode
parameter_list|(
name|CloudDescriptor
name|cd
parameter_list|)
block|{
name|String
name|collection
init|=
name|cd
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Check for collection zkNode:"
operator|+
name|collection
argument_list|)
expr_stmt|;
name|String
name|collectionPath
init|=
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|zkClient
operator|.
name|exists
argument_list|(
name|collectionPath
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Creating collection in ZooKeeper:"
operator|+
name|collection
argument_list|)
expr_stmt|;
name|SolrParams
name|params
init|=
name|cd
operator|.
name|getParams
argument_list|()
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collectionProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?
name|String
name|defaultConfigName
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|COLLECTION_PARAM_PREFIX
operator|+
name|CONFIGNAME_PROP
argument_list|,
name|collection
argument_list|)
decl_stmt|;
comment|// params passed in - currently only done via core admin (create core commmand).
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|params
operator|.
name|getParameterNamesIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|paramName
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|paramName
operator|.
name|startsWith
argument_list|(
name|COLLECTION_PARAM_PREFIX
argument_list|)
condition|)
block|{
name|collectionProps
operator|.
name|put
argument_list|(
name|paramName
operator|.
name|substring
argument_list|(
name|COLLECTION_PARAM_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|params
operator|.
name|get
argument_list|(
name|paramName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if the config name wasn't passed in, use the default
if|if
condition|(
operator|!
name|collectionProps
operator|.
name|containsKey
argument_list|(
name|CONFIGNAME_PROP
argument_list|)
condition|)
block|{
comment|// TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?
name|getConfName
argument_list|(
name|collection
argument_list|,
name|collectionPath
argument_list|,
name|collectionProps
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"bootstrap_confdir"
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// if we are bootstrapping a collection, default the config for
comment|// a new collection to the collection we are bootstrapping
name|log
operator|.
name|info
argument_list|(
literal|"Setting config for collection:"
operator|+
name|collection
operator|+
literal|" to "
operator|+
name|defaultConfigName
argument_list|)
expr_stmt|;
name|Properties
name|sysProps
init|=
name|System
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|sprop
range|:
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
if|if
condition|(
name|sprop
operator|.
name|startsWith
argument_list|(
name|COLLECTION_PARAM_PREFIX
argument_list|)
condition|)
block|{
name|collectionProps
operator|.
name|put
argument_list|(
name|sprop
operator|.
name|substring
argument_list|(
name|COLLECTION_PARAM_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|sysProps
operator|.
name|getProperty
argument_list|(
name|sprop
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if the config name wasn't passed in, use the default
if|if
condition|(
operator|!
name|collectionProps
operator|.
name|containsKey
argument_list|(
name|CONFIGNAME_PROP
argument_list|)
condition|)
name|collectionProps
operator|.
name|put
argument_list|(
name|CONFIGNAME_PROP
argument_list|,
name|defaultConfigName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"bootstrap_conf"
argument_list|)
condition|)
block|{
comment|// the conf name should should be the collection name of this core
name|collectionProps
operator|.
name|put
argument_list|(
name|CONFIGNAME_PROP
argument_list|,
name|cd
operator|.
name|getCollectionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getConfName
argument_list|(
name|collection
argument_list|,
name|collectionPath
argument_list|,
name|collectionProps
argument_list|)
expr_stmt|;
block|}
name|collectionProps
operator|.
name|remove
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|)
expr_stmt|;
comment|// we don't put numShards in the collections properties
name|ZkNodeProps
name|zkProps
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|collectionProps
argument_list|)
decl_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
name|collectionPath
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|zkProps
argument_list|)
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
comment|// its okay if the node already exists
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|!=
name|KeeperException
operator|.
name|Code
operator|.
name|NODEEXISTS
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Collection zkNode exists"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
comment|// its okay if another beats us creating the node
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|NODEEXISTS
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error creating collection node in Zookeeper"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error creating collection node in Zookeeper"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getConfName
specifier|private
name|void
name|getConfName
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|collectionPath
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collectionProps
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
comment|// check for configName
name|log
operator|.
name|info
argument_list|(
literal|"Looking for collection configName"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|configNames
init|=
literal|null
decl_stmt|;
name|int
name|retry
init|=
literal|1
decl_stmt|;
name|int
name|retryLimt
init|=
literal|6
decl_stmt|;
for|for
control|(
init|;
name|retry
operator|<
name|retryLimt
condition|;
name|retry
operator|++
control|)
block|{
if|if
condition|(
name|zkClient
operator|.
name|exists
argument_list|(
name|collectionPath
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|ZkNodeProps
name|cProps
init|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|zkClient
operator|.
name|getData
argument_list|(
name|collectionPath
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cProps
operator|.
name|containsKey
argument_list|(
name|CONFIGNAME_PROP
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
comment|// if there is only one conf, use that
try|try
block|{
name|configNames
operator|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|CONFIGS_ZKNODE
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoNodeException
name|e
parameter_list|)
block|{
comment|// just keep trying
block|}
if|if
condition|(
name|configNames
operator|!=
literal|null
operator|&&
name|configNames
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// no config set named, but there is only 1 - use it
name|log
operator|.
name|info
argument_list|(
literal|"Only one config set found in zk - using it:"
operator|+
name|configNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|collectionProps
operator|.
name|put
argument_list|(
name|CONFIGNAME_PROP
argument_list|,
name|configNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|configNames
operator|!=
literal|null
operator|&&
name|configNames
operator|.
name|contains
argument_list|(
name|collection
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Could not find explicit collection configName, but found config name matching collection name - using that set."
argument_list|)
expr_stmt|;
name|collectionProps
operator|.
name|put
argument_list|(
name|CONFIGNAME_PROP
argument_list|,
name|collection
argument_list|)
expr_stmt|;
break|break;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Could not find collection configName - pausing for 3 seconds and trying again - try: "
operator|+
name|retry
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|retry
operator|==
name|retryLimt
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not find configName for collection "
operator|+
name|collection
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not find configName for collection "
operator|+
name|collection
operator|+
literal|" found:"
operator|+
name|configNames
argument_list|)
throw|;
block|}
block|}
DECL|method|getZkStateReader
specifier|public
name|ZkStateReader
name|getZkStateReader
parameter_list|()
block|{
return|return
name|zkStateReader
return|;
block|}
DECL|method|doGetShardIdAndNodeNameProcess
specifier|private
name|void
name|doGetShardIdAndNodeNameProcess
parameter_list|(
name|CoreDescriptor
name|cd
parameter_list|)
block|{
specifier|final
name|String
name|coreNodeName
init|=
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCoreNodeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|coreNodeName
operator|!=
literal|null
condition|)
block|{
name|waitForShardId
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if no explicit coreNodeName, we want to match by base url and core name
name|waitForCoreNodeName
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|waitForShardId
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|waitForCoreNodeName
specifier|private
name|void
name|waitForCoreNodeName
parameter_list|(
name|CoreDescriptor
name|descriptor
parameter_list|)
block|{
name|int
name|retryCount
init|=
literal|320
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"look for our core node name"
argument_list|)
expr_stmt|;
while|while
condition|(
name|retryCount
operator|--
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slicesMap
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlicesMap
argument_list|(
name|descriptor
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|slicesMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Slice
name|slice
range|:
name|slicesMap
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
comment|// TODO: for really large clusters, we could 'index' on this
name|String
name|nodeName
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
decl_stmt|;
name|String
name|core
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
name|String
name|msgNodeName
init|=
name|getNodeName
argument_list|()
decl_stmt|;
name|String
name|msgCore
init|=
name|descriptor
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|msgNodeName
operator|.
name|equals
argument_list|(
name|nodeName
argument_list|)
operator|&&
name|core
operator|.
name|equals
argument_list|(
name|msgCore
argument_list|)
condition|)
block|{
name|descriptor
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|setCoreNodeName
argument_list|(
name|replica
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|waitForShardId
specifier|private
name|void
name|waitForShardId
parameter_list|(
name|CoreDescriptor
name|cd
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"waiting to find shard id in clusterstate for "
operator|+
name|cd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|retryCount
init|=
literal|320
decl_stmt|;
while|while
condition|(
name|retryCount
operator|--
operator|>
literal|0
condition|)
block|{
specifier|final
name|String
name|shardId
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getShardId
argument_list|(
name|cd
operator|.
name|getCollectionName
argument_list|()
argument_list|,
name|getNodeName
argument_list|()
argument_list|,
name|cd
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardId
operator|!=
literal|null
condition|)
block|{
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|setShardId
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not get shard id for core: "
operator|+
name|cd
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
DECL|method|uploadToZK
specifier|public
specifier|static
name|void
name|uploadToZK
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|File
name|dir
parameter_list|,
name|String
name|zkPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal directory: "
operator|+
name|dir
argument_list|)
throw|;
block|}
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|zkClient
operator|.
name|makePath
argument_list|(
name|zkPath
operator|+
literal|"/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|,
name|file
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uploadToZK
argument_list|(
name|zkClient
argument_list|,
name|file
argument_list|,
name|zkPath
operator|+
literal|"/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|downloadFromZK
specifier|public
specifier|static
name|void
name|downloadFromZK
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|String
name|zkPath
parameter_list|,
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|zkPath
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|zkPath
operator|+
literal|"/"
operator|+
name|file
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|byte
index|[]
name|data
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|zkPath
operator|+
literal|"/"
operator|+
name|file
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Write file "
operator|+
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|writeByteArrayToFile
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|file
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|downloadFromZK
argument_list|(
name|zkClient
argument_list|,
name|zkPath
operator|+
literal|"/"
operator|+
name|file
argument_list|,
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getCoreNodeName
specifier|public
name|String
name|getCoreNodeName
parameter_list|(
name|CoreDescriptor
name|descriptor
parameter_list|)
block|{
name|String
name|coreNodeName
init|=
name|descriptor
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCoreNodeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|coreNodeName
operator|==
literal|null
operator|&&
operator|!
name|genericCoreNodeNames
condition|)
block|{
comment|// it's the default
return|return
name|getNodeName
argument_list|()
operator|+
literal|"_"
operator|+
name|descriptor
operator|.
name|getName
argument_list|()
return|;
block|}
return|return
name|coreNodeName
return|;
block|}
DECL|method|uploadConfigDir
specifier|public
specifier|static
name|void
name|uploadConfigDir
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|File
name|dir
parameter_list|,
name|String
name|configName
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|uploadToZK
argument_list|(
name|zkClient
argument_list|,
name|dir
argument_list|,
name|ZkController
operator|.
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|configName
argument_list|)
expr_stmt|;
block|}
DECL|method|downloadConfigDir
specifier|public
specifier|static
name|void
name|downloadConfigDir
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|String
name|configName
parameter_list|,
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|downloadFromZK
argument_list|(
name|zkClient
argument_list|,
name|ZkController
operator|.
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|configName
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|preRegister
specifier|public
name|void
name|preRegister
parameter_list|(
name|CoreDescriptor
name|cd
parameter_list|)
block|{
name|String
name|coreNodeName
init|=
name|getCoreNodeName
argument_list|(
name|cd
argument_list|)
decl_stmt|;
comment|// before becoming available, make sure we are not live and active
comment|// this also gets us our assigned shard id if it was not specified
try|try
block|{
name|checkStateInZk
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|CloudDescriptor
name|cloudDesc
init|=
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
comment|// make sure the node name is set on the descriptor
if|if
condition|(
name|cloudDesc
operator|.
name|getCoreNodeName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|cloudDesc
operator|.
name|setCoreNodeName
argument_list|(
name|coreNodeName
argument_list|)
expr_stmt|;
block|}
name|publish
argument_list|(
name|cd
argument_list|,
name|ZkStateReader
operator|.
name|DOWN
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DocCollection
name|collection
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollectionOrNull
argument_list|(
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
operator|&&
name|collection
operator|.
name|getStateFormat
argument_list|()
operator|>
literal|1
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Registering watch for external collection {}"
argument_list|,
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
argument_list|)
expr_stmt|;
name|zkStateReader
operator|.
name|addCollectionWatch
argument_list|(
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getShardId
argument_list|()
operator|==
literal|null
operator|&&
name|needsToBeAssignedShardId
argument_list|(
name|cd
argument_list|,
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|coreNodeName
argument_list|)
condition|)
block|{
name|doGetShardIdAndNodeNameProcess
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// still wait till we see us in local state
name|doGetShardIdAndNodeNameProcess
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkStateInZk
specifier|private
name|void
name|checkStateInZk
parameter_list|(
name|CoreDescriptor
name|cd
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|Overseer
operator|.
name|isLegacy
argument_list|(
name|zkStateReader
operator|.
name|getClusterProps
argument_list|()
argument_list|)
condition|)
block|{
name|CloudDescriptor
name|cloudDesc
init|=
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
name|String
name|coreNodeName
init|=
name|cloudDesc
operator|.
name|getCoreNodeName
argument_list|()
decl_stmt|;
assert|assert
name|coreNodeName
operator|!=
literal|null
assert|;
if|if
condition|(
name|cloudDesc
operator|.
name|getShardId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"No shard id for :"
operator|+
name|cd
argument_list|)
throw|;
name|long
name|endTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|convert
argument_list|(
literal|3
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|String
name|errMessage
init|=
literal|null
decl_stmt|;
for|for
control|(
init|;
name|System
operator|.
name|nanoTime
argument_list|()
operator|<
name|endTime
condition|;
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|errMessage
operator|=
literal|null
expr_stmt|;
name|Slice
name|slice
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|cd
operator|.
name|getCollectionName
argument_list|()
argument_list|,
name|cloudDesc
operator|.
name|getShardId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
name|errMessage
operator|=
literal|"Invalid slice : "
operator|+
name|cloudDesc
operator|.
name|getShardId
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|slice
operator|.
name|getReplica
argument_list|(
name|coreNodeName
argument_list|)
operator|!=
literal|null
condition|)
return|return;
block|}
if|if
condition|(
name|errMessage
operator|==
literal|null
condition|)
name|errMessage
operator|=
literal|" no_such_replica in clusterstate ,replicaName :  "
operator|+
name|coreNodeName
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|errMessage
operator|+
literal|"state : "
operator|+
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|cd
operator|.
name|getCollectionName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|waitForLeaderToSeeDownState
specifier|private
name|ZkCoreNodeProps
name|waitForLeaderToSeeDownState
parameter_list|(
name|CoreDescriptor
name|descriptor
parameter_list|,
specifier|final
name|String
name|coreZkNodeName
parameter_list|)
block|{
name|CloudDescriptor
name|cloudDesc
init|=
name|descriptor
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
name|String
name|collection
init|=
name|cloudDesc
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|String
name|shard
init|=
name|cloudDesc
operator|.
name|getShardId
argument_list|()
decl_stmt|;
name|ZkCoreNodeProps
name|leaderProps
init|=
literal|null
decl_stmt|;
name|int
name|retries
init|=
literal|6
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|retries
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
if|if
condition|(
name|isClosed
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
literal|"We have been closed"
argument_list|)
throw|;
block|}
comment|// go straight to zk, not the cloud state - we must have current info
name|leaderProps
operator|=
name|getLeaderProps
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"There was a problem finding the leader in zk"
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
name|retries
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"There was a problem finding the leader in zk"
argument_list|)
throw|;
block|}
block|}
block|}
name|String
name|leaderBaseUrl
init|=
name|leaderProps
operator|.
name|getBaseUrl
argument_list|()
decl_stmt|;
name|String
name|leaderCoreName
init|=
name|leaderProps
operator|.
name|getCoreName
argument_list|()
decl_stmt|;
name|String
name|myCoreNodeName
init|=
name|cloudDesc
operator|.
name|getCoreNodeName
argument_list|()
decl_stmt|;
name|String
name|myCoreName
init|=
name|descriptor
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|ourUrl
init|=
name|ZkCoreNodeProps
operator|.
name|getCoreUrl
argument_list|(
name|getBaseUrl
argument_list|()
argument_list|,
name|myCoreName
argument_list|)
decl_stmt|;
name|boolean
name|isLeader
init|=
name|leaderProps
operator|.
name|getCoreUrl
argument_list|()
operator|.
name|equals
argument_list|(
name|ourUrl
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isLeader
operator|&&
operator|!
name|SKIP_AUTO_RECOVERY
condition|)
block|{
comment|// detect if this core is in leader-initiated recovery and if so,
comment|// then we don't need the leader to wait on seeing the down state
name|String
name|lirState
init|=
literal|null
decl_stmt|;
try|try
block|{
name|lirState
operator|=
name|getLeaderInitiatedRecoveryState
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|,
name|myCoreNodeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to determine if replica "
operator|+
name|myCoreNodeName
operator|+
literal|" is in leader-initiated recovery due to: "
operator|+
name|exc
argument_list|,
name|exc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lirState
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Replica "
operator|+
name|myCoreNodeName
operator|+
literal|" is already in leader-initiated recovery, so not waiting for leader to see down state."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Replica "
operator|+
name|myCoreNodeName
operator|+
literal|" NOT in leader-initiated recovery, need to wait for leader to see down state."
argument_list|)
expr_stmt|;
name|HttpSolrServer
name|server
init|=
literal|null
decl_stmt|;
name|server
operator|=
operator|new
name|HttpSolrServer
argument_list|(
name|leaderBaseUrl
argument_list|)
expr_stmt|;
try|try
block|{
name|server
operator|.
name|setConnectionTimeout
argument_list|(
literal|15000
argument_list|)
expr_stmt|;
name|server
operator|.
name|setSoTimeout
argument_list|(
literal|120000
argument_list|)
expr_stmt|;
name|WaitForState
name|prepCmd
init|=
operator|new
name|WaitForState
argument_list|()
decl_stmt|;
name|prepCmd
operator|.
name|setCoreName
argument_list|(
name|leaderCoreName
argument_list|)
expr_stmt|;
name|prepCmd
operator|.
name|setNodeName
argument_list|(
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|prepCmd
operator|.
name|setCoreNodeName
argument_list|(
name|coreZkNodeName
argument_list|)
expr_stmt|;
name|prepCmd
operator|.
name|setState
argument_list|(
name|ZkStateReader
operator|.
name|DOWN
argument_list|)
expr_stmt|;
comment|// let's retry a couple times - perhaps the leader just went down,
comment|// or perhaps he is just not quite ready for us yet
name|retries
operator|=
literal|6
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|retries
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isClosed
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
literal|"We have been closed"
argument_list|)
throw|;
block|}
try|try
block|{
name|server
operator|.
name|request
argument_list|(
name|prepCmd
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// if the core container is shutdown, don't wait
if|if
condition|(
name|cc
operator|.
name|isShutDown
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
literal|"Core container is shutdown."
argument_list|)
throw|;
block|}
name|Throwable
name|rootCause
init|=
name|SolrException
operator|.
name|getRootCause
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootCause
operator|instanceof
name|IOException
condition|)
block|{
comment|// if there was a communication error talking to the leader, see if the leader is even alive
if|if
condition|(
operator|!
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|liveNodesContain
argument_list|(
name|leaderProps
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
literal|"Node "
operator|+
name|leaderProps
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" hosting leader for "
operator|+
name|shard
operator|+
literal|" in "
operator|+
name|collection
operator|+
literal|" is not live!"
argument_list|)
throw|;
block|}
block|}
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"There was a problem making a request to the leader"
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
name|retries
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"There was a problem making a request to the leader"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|leaderProps
return|;
block|}
DECL|method|linkConfSet
specifier|public
specifier|static
name|void
name|linkConfSet
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|confSetName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|path
init|=
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Load collection config from:"
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|data
decl_stmt|;
try|try
block|{
name|data
operator|=
name|zkClient
operator|.
name|getData
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoNodeException
name|e
parameter_list|)
block|{
comment|// if there is no node, we will try and create it
comment|// first try to make in case we are pre configuring
name|ZkNodeProps
name|props
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|CONFIGNAME_PROP
argument_list|,
name|confSetName
argument_list|)
decl_stmt|;
try|try
block|{
name|zkClient
operator|.
name|makePath
argument_list|(
name|path
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|props
argument_list|)
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e2
parameter_list|)
block|{
comment|// its okay if the node already exists
if|if
condition|(
name|e2
operator|.
name|code
argument_list|()
operator|!=
name|KeeperException
operator|.
name|Code
operator|.
name|NODEEXISTS
condition|)
block|{
throw|throw
name|e
throw|;
block|}
comment|// if we fail creating, setdata
comment|// TODO: we should consider using version
name|zkClient
operator|.
name|setData
argument_list|(
name|path
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|props
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// we found existing data, let's update it
name|ZkNodeProps
name|props
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|props
operator|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|newProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|newProps
operator|.
name|putAll
argument_list|(
name|props
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|newProps
operator|.
name|put
argument_list|(
name|CONFIGNAME_PROP
argument_list|,
name|confSetName
argument_list|)
expr_stmt|;
name|props
operator|=
operator|new
name|ZkNodeProps
argument_list|(
name|newProps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|props
operator|=
operator|new
name|ZkNodeProps
argument_list|(
name|CONFIGNAME_PROP
argument_list|,
name|confSetName
argument_list|)
expr_stmt|;
block|}
comment|// TODO: we should consider using version
name|zkClient
operator|.
name|setData
argument_list|(
name|path
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|props
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.    */
DECL|method|bootstrapConf
specifier|public
specifier|static
name|void
name|bootstrapConf
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|CoreContainer
name|cc
parameter_list|,
name|String
name|solrHome
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
comment|//List<String> allCoreNames = cfg.getAllCoreNames();
name|List
argument_list|<
name|CoreDescriptor
argument_list|>
name|cds
init|=
name|cc
operator|.
name|getCoresLocator
argument_list|()
operator|.
name|discover
argument_list|(
name|cc
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"bootstrapping config for "
operator|+
name|cds
operator|.
name|size
argument_list|()
operator|+
literal|" cores into ZooKeeper using solr.xml from "
operator|+
name|solrHome
argument_list|)
expr_stmt|;
for|for
control|(
name|CoreDescriptor
name|cd
range|:
name|cds
control|)
block|{
name|String
name|coreName
init|=
name|cd
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|confName
init|=
name|cd
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|confName
argument_list|)
condition|)
name|confName
operator|=
name|coreName
expr_stmt|;
name|String
name|instanceDir
init|=
name|cd
operator|.
name|getInstanceDir
argument_list|()
decl_stmt|;
name|File
name|udir
init|=
operator|new
name|File
argument_list|(
name|instanceDir
argument_list|,
literal|"conf"
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Uploading directory "
operator|+
name|udir
operator|+
literal|" with name "
operator|+
name|confName
operator|+
literal|" for SolrCore "
operator|+
name|coreName
argument_list|)
expr_stmt|;
name|ZkController
operator|.
name|uploadConfigDir
argument_list|(
name|zkClient
argument_list|,
name|udir
argument_list|,
name|confName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getOverseerJobQueue
specifier|public
name|DistributedQueue
name|getOverseerJobQueue
parameter_list|()
block|{
return|return
name|overseerJobQueue
return|;
block|}
DECL|method|getOverseerCollectionQueue
specifier|public
name|DistributedQueue
name|getOverseerCollectionQueue
parameter_list|()
block|{
return|return
name|overseerCollectionQueue
return|;
block|}
DECL|method|getOverseerRunningMap
specifier|public
name|DistributedMap
name|getOverseerRunningMap
parameter_list|()
block|{
return|return
name|overseerRunningMap
return|;
block|}
DECL|method|getOverseerCompletedMap
specifier|public
name|DistributedMap
name|getOverseerCompletedMap
parameter_list|()
block|{
return|return
name|overseerCompletedMap
return|;
block|}
DECL|method|getOverseerFailureMap
specifier|public
name|DistributedMap
name|getOverseerFailureMap
parameter_list|()
block|{
return|return
name|overseerFailureMap
return|;
block|}
DECL|method|getClientTimeout
specifier|public
name|int
name|getClientTimeout
parameter_list|()
block|{
return|return
name|clientTimeout
return|;
block|}
DECL|method|getOverseer
specifier|public
name|Overseer
name|getOverseer
parameter_list|()
block|{
return|return
name|overseer
return|;
block|}
DECL|method|getOverseerElector
specifier|public
name|LeaderElector
name|getOverseerElector
parameter_list|()
block|{
return|return
name|overseerElector
return|;
block|}
comment|/**    * Returns the nodeName that should be used based on the specified properties.    *    * @param hostName - must not be null or the empty string    * @param hostPort - must consist only of digits, must not be null or the empty string    * @param hostContext - should not begin or end with a slash (leading/trailin slashes will be ignored), must not be null, may be the empty string to denote the root context    * @lucene.experimental    * @see ZkStateReader#getBaseUrlForNodeName    */
DECL|method|generateNodeName
specifier|static
name|String
name|generateNodeName
parameter_list|(
specifier|final
name|String
name|hostName
parameter_list|,
specifier|final
name|String
name|hostPort
parameter_list|,
specifier|final
name|String
name|hostContext
parameter_list|)
block|{
try|try
block|{
return|return
name|hostName
operator|+
literal|':'
operator|+
name|hostPort
operator|+
literal|'_'
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|trimLeadingAndTrailingSlashes
argument_list|(
name|hostContext
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"JVM Does not seem to support UTF-8"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Utility method for trimming and leading and/or trailing slashes from     * it's input.  May return the empty string.  May return null if and only     * if the input is null.    */
DECL|method|trimLeadingAndTrailingSlashes
specifier|public
specifier|static
name|String
name|trimLeadingAndTrailingSlashes
parameter_list|(
specifier|final
name|String
name|in
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|in
condition|)
return|return
name|in
return|;
name|String
name|out
init|=
name|in
decl_stmt|;
if|if
condition|(
name|out
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|out
operator|=
name|out
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|out
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|out
operator|=
name|out
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|out
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
DECL|method|rejoinOverseerElection
specifier|public
name|void
name|rejoinOverseerElection
parameter_list|(
name|String
name|electionNode
parameter_list|,
name|boolean
name|joinAtHead
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|electionNode
operator|!=
literal|null
condition|)
block|{
comment|//this call is from inside the JVM  . not from CoreAdminHandler
if|if
condition|(
name|overseerElector
operator|.
name|getContext
argument_list|()
operator|==
literal|null
operator|||
name|overseerElector
operator|.
name|getContext
argument_list|()
operator|.
name|leaderSeqPath
operator|==
literal|null
condition|)
block|{
name|overseerElector
operator|.
name|retryElection
argument_list|(
operator|new
name|OverseerElectionContext
argument_list|(
name|zkClient
argument_list|,
name|overseer
argument_list|,
name|getNodeName
argument_list|()
argument_list|)
argument_list|,
name|joinAtHead
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|overseerElector
operator|.
name|getContext
argument_list|()
operator|.
name|leaderSeqPath
operator|.
name|endsWith
argument_list|(
name|electionNode
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Asked to rejoin with wrong election node : {}, current node is {}"
argument_list|,
name|electionNode
argument_list|,
name|overseerElector
operator|.
name|getContext
argument_list|()
operator|.
name|leaderSeqPath
argument_list|)
expr_stmt|;
comment|//however delete it . This is possible when the last attempt at deleting the election node failed.
if|if
condition|(
name|electionNode
operator|.
name|startsWith
argument_list|(
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|zkClient
operator|.
name|delete
argument_list|(
name|OverseerElectionContext
operator|.
name|PATH
operator|+
name|LeaderElector
operator|.
name|ELECTION_NODE
operator|+
literal|"/"
operator|+
name|electionNode
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoNodeException
name|e
parameter_list|)
block|{
comment|//no problem
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Old election node exists , could not be removed "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|overseerElector
operator|.
name|retryElection
argument_list|(
name|overseerElector
operator|.
name|getContext
argument_list|()
argument_list|,
name|joinAtHead
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unable to rejoin election"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|checkOverseerDesignate
specifier|public
name|void
name|checkOverseerDesignate
parameter_list|()
block|{
try|try
block|{
name|byte
index|[]
name|data
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|ZkStateReader
operator|.
name|ROLES
argument_list|,
literal|null
argument_list|,
operator|new
name|Stat
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
return|return;
name|Map
name|roles
init|=
operator|(
name|Map
operator|)
name|ZkStateReader
operator|.
name|fromJSON
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|roles
operator|==
literal|null
condition|)
return|return;
name|List
name|nodeList
init|=
operator|(
name|List
operator|)
name|roles
operator|.
name|get
argument_list|(
literal|"overseer"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeList
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|nodeList
operator|.
name|contains
argument_list|(
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
name|ZkNodeProps
name|props
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|ADDROLE
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
literal|"node"
argument_list|,
name|getNodeName
argument_list|()
argument_list|,
literal|"role"
argument_list|,
literal|"overseer"
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Going to add role {} "
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|getOverseerCollectionQueue
argument_list|()
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|props
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoNodeException
name|nne
parameter_list|)
block|{
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"could not readd the overseer designate "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getCoreContainer
name|CoreContainer
name|getCoreContainer
parameter_list|()
block|{
return|return
name|cc
return|;
block|}
comment|/**    * When a leader receives a communication error when trying to send a request to a replica,    * it calls this method to ensure the replica enters recovery when connectivity is restored.    *     * returns true if the node hosting the replica is still considered "live" by ZooKeeper;    * false means the node is not live either, so no point in trying to send recovery commands    * to it.    */
DECL|method|ensureReplicaInLeaderInitiatedRecovery
specifier|public
name|boolean
name|ensureReplicaInLeaderInitiatedRecovery
parameter_list|(
specifier|final
name|String
name|collection
parameter_list|,
specifier|final
name|String
name|shardId
parameter_list|,
specifier|final
name|String
name|replicaUrl
parameter_list|,
specifier|final
name|ZkCoreNodeProps
name|replicaCoreProps
parameter_list|,
name|boolean
name|forcePublishState
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"collection parameter cannot be null for starting leader-initiated recovery for replica: "
operator|+
name|replicaUrl
argument_list|)
throw|;
if|if
condition|(
name|shardId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"shard parameter cannot be null for starting leader-initiated recovery for replica: "
operator|+
name|replicaUrl
argument_list|)
throw|;
if|if
condition|(
name|replicaUrl
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"replicaUrl parameter cannot be null for starting leader-initiated recovery"
argument_list|)
throw|;
comment|// First, determine if this replica is already in recovery handling
comment|// which is needed because there can be many concurrent errors flooding in
comment|// about the same replica having trouble and we only need to send the "needs"
comment|// recovery signal once
name|boolean
name|nodeIsLive
init|=
literal|true
decl_stmt|;
name|boolean
name|publishDownState
init|=
literal|false
decl_stmt|;
name|String
name|replicaNodeName
init|=
name|replicaCoreProps
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|String
name|replicaCoreNodeName
init|=
operator|(
operator|(
name|Replica
operator|)
name|replicaCoreProps
operator|.
name|getNodeProps
argument_list|()
operator|)
operator|.
name|getName
argument_list|()
decl_stmt|;
assert|assert
name|replicaCoreNodeName
operator|!=
literal|null
operator|:
literal|"No core name for replica "
operator|+
name|replicaNodeName
assert|;
synchronized|synchronized
init|(
name|replicasInLeaderInitiatedRecovery
init|)
block|{
if|if
condition|(
name|replicasInLeaderInitiatedRecovery
operator|.
name|containsKey
argument_list|(
name|replicaUrl
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|forcePublishState
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Replica {} already in leader-initiated recovery handling."
argument_list|,
name|replicaUrl
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// already in this recovery process
block|}
block|}
comment|// if the replica's state is not DOWN right now, make it so ...
comment|// we only really need to try to send the recovery command if the node itself is "live"
if|if
condition|(
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|liveNodesContain
argument_list|(
name|replicaNodeName
argument_list|)
condition|)
block|{
comment|// create a znode that requires the replica needs to "ack" to verify it knows it was out-of-sync
name|updateLeaderInitiatedRecoveryState
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|,
name|replicaCoreNodeName
argument_list|,
name|ZkStateReader
operator|.
name|DOWN
argument_list|)
expr_stmt|;
name|replicasInLeaderInitiatedRecovery
operator|.
name|put
argument_list|(
name|replicaUrl
argument_list|,
name|getLeaderInitiatedRecoveryZnodePath
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|,
name|replicaCoreNodeName
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Put replica core={} coreNodeName={} on "
operator|+
name|replicaNodeName
operator|+
literal|" into leader-initiated recovery."
argument_list|,
name|replicaCoreProps
operator|.
name|getCoreName
argument_list|()
argument_list|,
name|replicaCoreNodeName
argument_list|)
expr_stmt|;
name|publishDownState
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|nodeIsLive
operator|=
literal|false
expr_stmt|;
comment|// we really don't need to send the recovery request if the node is NOT live
name|log
operator|.
name|info
argument_list|(
literal|"Node "
operator|+
name|replicaNodeName
operator|+
literal|" is not live, so skipping leader-initiated recovery for replica: core={} coreNodeName={}"
argument_list|,
name|replicaCoreProps
operator|.
name|getCoreName
argument_list|()
argument_list|,
name|replicaCoreNodeName
argument_list|)
expr_stmt|;
comment|// publishDownState will be false to avoid publishing the "down" state too many times
comment|// as many errors can occur together and will each call into this method (SOLR-6189)
block|}
block|}
if|if
condition|(
name|publishDownState
operator|||
name|forcePublishState
condition|)
block|{
name|String
name|replicaCoreName
init|=
name|replicaCoreProps
operator|.
name|getCoreName
argument_list|()
decl_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
literal|"state"
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|ZkStateReader
operator|.
name|DOWN
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|replicaCoreProps
operator|.
name|getBaseUrl
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|replicaCoreProps
operator|.
name|getCoreName
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|replicaCoreProps
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
name|shardId
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|)
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Leader is publishing core={} coreNodeName ={} state={} on behalf of un-reachable replica {}; forcePublishState? "
operator|+
name|forcePublishState
argument_list|,
name|replicaCoreName
argument_list|,
name|replicaCoreNodeName
argument_list|,
name|ZkStateReader
operator|.
name|DOWN
argument_list|,
name|replicaUrl
argument_list|)
expr_stmt|;
name|overseerJobQueue
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeIsLive
return|;
block|}
DECL|method|isReplicaInRecoveryHandling
specifier|public
name|boolean
name|isReplicaInRecoveryHandling
parameter_list|(
name|String
name|replicaUrl
parameter_list|)
block|{
name|boolean
name|exists
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|replicasInLeaderInitiatedRecovery
init|)
block|{
name|exists
operator|=
name|replicasInLeaderInitiatedRecovery
operator|.
name|containsKey
argument_list|(
name|replicaUrl
argument_list|)
expr_stmt|;
block|}
return|return
name|exists
return|;
block|}
DECL|method|removeReplicaFromLeaderInitiatedRecoveryHandling
specifier|public
name|void
name|removeReplicaFromLeaderInitiatedRecoveryHandling
parameter_list|(
name|String
name|replicaUrl
parameter_list|)
block|{
synchronized|synchronized
init|(
name|replicasInLeaderInitiatedRecovery
init|)
block|{
name|replicasInLeaderInitiatedRecovery
operator|.
name|remove
argument_list|(
name|replicaUrl
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getLeaderInitiatedRecoveryState
specifier|public
name|String
name|getLeaderInitiatedRecoveryState
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|shardId
parameter_list|,
name|String
name|coreNodeName
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|stateObj
init|=
name|getLeaderInitiatedRecoveryStateObject
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|,
name|coreNodeName
argument_list|)
decl_stmt|;
return|return
operator|(
name|stateObj
operator|!=
literal|null
operator|)
condition|?
operator|(
name|String
operator|)
name|stateObj
operator|.
name|get
argument_list|(
literal|"state"
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|getLeaderInitiatedRecoveryStateObject
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getLeaderInitiatedRecoveryStateObject
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|shardId
parameter_list|,
name|String
name|coreNodeName
parameter_list|)
block|{
if|if
condition|(
name|collection
operator|==
literal|null
operator|||
name|shardId
operator|==
literal|null
operator|||
name|coreNodeName
operator|==
literal|null
condition|)
return|return
literal|null
return|;
comment|// if we don't have complete data about a core in cloud mode, return null
name|String
name|znodePath
init|=
name|getLeaderInitiatedRecoveryZnodePath
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|,
name|coreNodeName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|stateData
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stateData
operator|=
name|zkClient
operator|.
name|getData
argument_list|(
name|znodePath
argument_list|,
literal|null
argument_list|,
operator|new
name|Stat
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoNodeException
name|ignoreMe
parameter_list|)
block|{
comment|// safe to ignore as this znode will only exist if the leader initiated recovery
block|}
catch|catch
parameter_list|(
name|ConnectionLossException
name|cle
parameter_list|)
block|{
comment|// sort of safe to ignore ??? Usually these are seen when the core is going down
comment|// or there are bigger issues to deal with than reading this znode
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to read "
operator|+
name|znodePath
operator|+
literal|" due to: "
operator|+
name|cle
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SessionExpiredException
name|see
parameter_list|)
block|{
comment|// sort of safe to ignore ??? Usually these are seen when the core is going down
comment|// or there are bigger issues to deal with than reading this znode
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to read "
operator|+
name|znodePath
operator|+
literal|" due to: "
operator|+
name|see
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to read data from znode "
operator|+
name|znodePath
operator|+
literal|" due to: "
operator|+
name|exc
argument_list|)
expr_stmt|;
if|if
condition|(
name|exc
operator|instanceof
name|SolrException
condition|)
block|{
throw|throw
operator|(
name|SolrException
operator|)
name|exc
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Failed to read data from znodePath: "
operator|+
name|znodePath
argument_list|,
name|exc
argument_list|)
throw|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|stateObj
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|stateData
operator|!=
literal|null
operator|&&
name|stateData
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Object
name|parsedJson
init|=
name|ZkStateReader
operator|.
name|fromJSON
argument_list|(
name|stateData
argument_list|)
decl_stmt|;
if|if
condition|(
name|parsedJson
operator|instanceof
name|Map
condition|)
block|{
name|stateObj
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|parsedJson
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parsedJson
operator|instanceof
name|String
condition|)
block|{
comment|// old format still in ZK
name|stateObj
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|stateObj
operator|.
name|put
argument_list|(
literal|"state"
argument_list|,
operator|(
name|String
operator|)
name|parsedJson
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Leader-initiated recovery state data is invalid! "
operator|+
name|parsedJson
argument_list|)
throw|;
block|}
block|}
return|return
name|stateObj
return|;
block|}
DECL|method|updateLeaderInitiatedRecoveryState
specifier|private
name|void
name|updateLeaderInitiatedRecoveryState
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|shardId
parameter_list|,
name|String
name|coreNodeName
parameter_list|,
name|String
name|state
parameter_list|)
block|{
if|if
condition|(
name|collection
operator|==
literal|null
operator|||
name|shardId
operator|==
literal|null
operator|||
name|coreNodeName
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot set leader-initiated recovery state znode to "
operator|+
name|state
operator|+
literal|" using: collection="
operator|+
name|collection
operator|+
literal|"; shardId="
operator|+
name|shardId
operator|+
literal|"; coreNodeName="
operator|+
name|coreNodeName
argument_list|)
expr_stmt|;
return|return;
comment|// if we don't have complete data about a core in cloud mode, do nothing
block|}
name|String
name|znodePath
init|=
name|getLeaderInitiatedRecoveryZnodePath
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|,
name|coreNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ZkStateReader
operator|.
name|ACTIVE
operator|.
name|equals
argument_list|(
name|state
argument_list|)
condition|)
block|{
comment|// since we're marking it active, we don't need this znode anymore, so delete instead of update
try|try
block|{
name|zkClient
operator|.
name|delete
argument_list|(
name|znodePath
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|justLogIt
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to delete znode "
operator|+
name|znodePath
operator|+
literal|" due to: "
operator|+
name|justLogIt
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|stateObj
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stateObj
operator|=
name|getLeaderInitiatedRecoveryStateObject
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|,
name|coreNodeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|exc
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stateObj
operator|==
literal|null
condition|)
name|stateObj
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|stateObj
operator|.
name|put
argument_list|(
literal|"state"
argument_list|,
name|state
argument_list|)
expr_stmt|;
comment|// only update the createdBy value if its not set
if|if
condition|(
name|stateObj
operator|.
name|get
argument_list|(
literal|"createdByNodeName"
argument_list|)
operator|==
literal|null
condition|)
name|stateObj
operator|.
name|put
argument_list|(
literal|"createdByNodeName"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|nodeName
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|znodeData
init|=
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|stateObj
argument_list|)
decl_stmt|;
name|boolean
name|retryOnConnLoss
init|=
literal|true
decl_stmt|;
comment|// be a little more robust when trying to write data
try|try
block|{
if|if
condition|(
name|zkClient
operator|.
name|exists
argument_list|(
name|znodePath
argument_list|,
name|retryOnConnLoss
argument_list|)
condition|)
block|{
name|zkClient
operator|.
name|setData
argument_list|(
name|znodePath
argument_list|,
name|znodeData
argument_list|,
name|retryOnConnLoss
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|zkClient
operator|.
name|makePath
argument_list|(
name|znodePath
argument_list|,
name|znodeData
argument_list|,
name|retryOnConnLoss
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Wrote "
operator|+
name|state
operator|+
literal|" to "
operator|+
name|znodePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
if|if
condition|(
name|exc
operator|instanceof
name|SolrException
condition|)
block|{
throw|throw
operator|(
name|SolrException
operator|)
name|exc
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Failed to update data to "
operator|+
name|state
operator|+
literal|" for znode: "
operator|+
name|znodePath
argument_list|,
name|exc
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getLeaderInitiatedRecoveryZnodePath
specifier|public
name|String
name|getLeaderInitiatedRecoveryZnodePath
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|shardId
parameter_list|)
block|{
return|return
literal|"/collections/"
operator|+
name|collection
operator|+
literal|"/leader_initiated_recovery/"
operator|+
name|shardId
return|;
block|}
DECL|method|getLeaderInitiatedRecoveryZnodePath
specifier|public
name|String
name|getLeaderInitiatedRecoveryZnodePath
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|shardId
parameter_list|,
name|String
name|coreNodeName
parameter_list|)
block|{
return|return
name|getLeaderInitiatedRecoveryZnodePath
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|)
operator|+
literal|"/"
operator|+
name|coreNodeName
return|;
block|}
DECL|method|throwErrorIfReplicaReplaced
specifier|public
name|void
name|throwErrorIfReplicaReplaced
parameter_list|(
name|CoreDescriptor
name|desc
parameter_list|)
block|{
name|ClusterState
name|clusterState
init|=
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterState
operator|!=
literal|null
condition|)
block|{
name|DocCollection
name|collection
init|=
name|clusterState
operator|.
name|getCollectionOrNull
argument_list|(
name|desc
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|boolean
name|autoAddReplicas
init|=
name|ClusterStateUtil
operator|.
name|isAutoAddReplicas
argument_list|(
name|getZkStateReader
argument_list|()
argument_list|,
name|collection
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|autoAddReplicas
condition|)
block|{
name|CloudUtil
operator|.
name|checkSharedFSFailoverReplaced
argument_list|(
name|cc
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Add a listener to be notified once there is a new session created after a ZooKeeper session expiration occurs;    * in most cases, listeners will be components that have watchers that need to be re-created.    */
DECL|method|addOnReconnectListener
specifier|public
name|void
name|addOnReconnectListener
parameter_list|(
name|OnReconnect
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|reconnectListeners
init|)
block|{
name|reconnectListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Persists a config file to ZooKeeper using optimistic concurrency.    *    * @return true on success    */
DECL|method|persistConfigResourceToZooKeeper
specifier|public
specifier|static
name|boolean
name|persistConfigResourceToZooKeeper
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|,
name|int
name|znodeVersion
parameter_list|,
name|String
name|resourceName
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|boolean
name|createIfNotExists
parameter_list|)
block|{
specifier|final
name|ZkSolrResourceLoader
name|zkLoader
init|=
operator|(
name|ZkSolrResourceLoader
operator|)
name|loader
decl_stmt|;
specifier|final
name|ZkController
name|zkController
init|=
name|zkLoader
operator|.
name|getZkController
argument_list|()
decl_stmt|;
specifier|final
name|SolrZkClient
name|zkClient
init|=
name|zkController
operator|.
name|getZkClient
argument_list|()
decl_stmt|;
specifier|final
name|String
name|resourceLocation
init|=
name|zkLoader
operator|.
name|getConfigSetZkPath
argument_list|()
operator|+
literal|"/"
operator|+
name|resourceName
decl_stmt|;
name|String
name|errMsg
init|=
literal|"Failed to persist resource at {0} - old {1}"
decl_stmt|;
try|try
block|{
try|try
block|{
name|zkClient
operator|.
name|setData
argument_list|(
name|resourceLocation
argument_list|,
name|content
argument_list|,
name|znodeVersion
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|setData
argument_list|(
name|zkLoader
operator|.
name|getConfigSetZkPath
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoNodeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|createIfNotExists
condition|)
block|{
try|try
block|{
name|zkClient
operator|.
name|create
argument_list|(
name|resourceLocation
argument_list|,
name|content
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|setData
argument_list|(
name|zkLoader
operator|.
name|getConfigSetZkPath
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NodeExistsException
name|nee
parameter_list|)
block|{
try|try
block|{
name|Stat
name|stat
init|=
name|zkClient
operator|.
name|exists
argument_list|(
name|resourceLocation
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"failed to set data version in zk is {0} and expected version is {1} "
argument_list|,
name|stat
operator|.
name|getVersion
argument_list|()
argument_list|,
name|znodeVersion
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"could not get stat"
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
name|errMsg
argument_list|,
name|resourceLocation
argument_list|,
name|znodeVersion
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ResourceModifiedInZkException
argument_list|(
name|ErrorCode
operator|.
name|CONFLICT
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
name|errMsg
argument_list|,
name|resourceLocation
argument_list|,
name|znodeVersion
argument_list|)
operator|+
literal|", retry."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|BadVersionException
name|bve
parameter_list|)
block|{
name|int
name|v
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|Stat
name|stat
init|=
name|zkClient
operator|.
name|exists
argument_list|(
name|resourceLocation
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|v
operator|=
name|stat
operator|.
name|getVersion
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
name|errMsg
operator|+
literal|" zkVersion= "
operator|+
name|v
argument_list|,
name|resourceLocation
argument_list|,
name|znodeVersion
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ResourceModifiedInZkException
argument_list|(
name|ErrorCode
operator|.
name|CONFLICT
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
name|errMsg
argument_list|,
name|resourceLocation
argument_list|,
name|znodeVersion
argument_list|)
operator|+
literal|", retry."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ResourceModifiedInZkException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InterruptedException
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// Restore the interrupted status
block|}
specifier|final
name|String
name|msg
init|=
literal|"Error persisting resource at "
operator|+
name|resourceLocation
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
DECL|class|ResourceModifiedInZkException
specifier|public
specifier|static
class|class
name|ResourceModifiedInZkException
extends|extends
name|SolrException
block|{
DECL|method|ResourceModifiedInZkException
specifier|public
name|ResourceModifiedInZkException
parameter_list|(
name|ErrorCode
name|code
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|code
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|unRegisterConfListener
specifier|public
name|void
name|unRegisterConfListener
parameter_list|(
name|Runnable
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
return|return;
synchronized|synchronized
init|(
name|confDirectoryListeners
init|)
block|{
for|for
control|(
name|Set
argument_list|<
name|Runnable
argument_list|>
name|listeners
range|:
name|confDirectoryListeners
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|listeners
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|" a listener was removed because of core close"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**This will give a callback to the listener whenever a child is modified in the    * conf directory. It is the responsibility of the listener to check if the individual    * item of interest has been modified.  When the last core which was interested in    * this conf directory is gone the listeners will be removed automatically.    */
DECL|method|registerConfListenerForCore
specifier|public
name|void
name|registerConfListenerForCore
parameter_list|(
name|String
name|confDir
parameter_list|,
name|SolrCore
name|core
parameter_list|,
specifier|final
name|Runnable
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"listener cannot be null"
argument_list|)
throw|;
synchronized|synchronized
init|(
name|confDirectoryListeners
init|)
block|{
if|if
condition|(
name|confDirectoryListeners
operator|.
name|containsKey
argument_list|(
name|confDir
argument_list|)
condition|)
block|{
name|confDirectoryListeners
operator|.
name|get
argument_list|(
name|confDir
argument_list|)
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|core
operator|.
name|addCloseHook
argument_list|(
operator|new
name|CloseHook
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|preClose
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|unRegisterConfListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postClose
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{ }
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"This conf directory is not valid"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|field|confDirectoryListeners
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Runnable
argument_list|>
argument_list|>
name|confDirectoryListeners
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|watchZKConfDir
name|void
name|watchZKConfDir
parameter_list|(
specifier|final
name|String
name|zkDir
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"watch zkdir "
operator|+
name|zkDir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|confDirectoryListeners
operator|.
name|containsKey
argument_list|(
name|zkDir
argument_list|)
condition|)
block|{
name|confDirectoryListeners
operator|.
name|put
argument_list|(
name|zkDir
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|setConfWatcher
argument_list|(
name|zkDir
argument_list|,
operator|new
name|WatcherImpl
argument_list|(
name|zkDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|WatcherImpl
specifier|private
class|class
name|WatcherImpl
implements|implements
name|Watcher
block|{
DECL|field|zkDir
specifier|private
specifier|final
name|String
name|zkDir
decl_stmt|;
DECL|method|WatcherImpl
specifier|private
name|WatcherImpl
parameter_list|(
name|String
name|dir
parameter_list|)
block|{
name|this
operator|.
name|zkDir
operator|=
name|dir
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
try|try
block|{
synchronized|synchronized
init|(
name|confDirectoryListeners
init|)
block|{
comment|// if this is not among directories to be watched then don't set the watcher anymore
if|if
condition|(
operator|!
name|confDirectoryListeners
operator|.
name|containsKey
argument_list|(
name|zkDir
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Watcher on {} is removed "
argument_list|,
name|zkDir
argument_list|)
expr_stmt|;
return|return;
block|}
name|Set
argument_list|<
name|Runnable
argument_list|>
name|listeners
init|=
name|confDirectoryListeners
operator|.
name|get
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|listeners
operator|!=
literal|null
operator|&&
operator|!
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|Set
argument_list|<
name|Runnable
argument_list|>
name|listenersCopy
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|listeners
argument_list|)
decl_stmt|;
operator|new
name|Thread
argument_list|()
block|{
comment|//run these in a separate thread because this can be long running
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
specifier|final
name|Runnable
name|listener
range|:
name|listenersCopy
control|)
block|{
try|try
block|{
name|listener
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"listener throws error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|Event
operator|.
name|EventType
operator|.
name|None
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"A node got unwatched for {}"
argument_list|,
name|zkDir
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|setConfWatcher
argument_list|(
name|zkDir
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|setConfWatcher
specifier|private
name|void
name|setConfWatcher
parameter_list|(
name|String
name|zkDir
parameter_list|,
name|Watcher
name|watcher
parameter_list|)
block|{
try|try
block|{
name|zkClient
operator|.
name|exists
argument_list|(
name|zkDir
argument_list|,
name|watcher
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"failed to set watcher for conf dir {} "
argument_list|,
name|zkDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"failed to set watcher for conf dir {} "
argument_list|,
name|zkDir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getConfigDirListener
specifier|public
name|OnReconnect
name|getConfigDirListener
parameter_list|()
block|{
return|return
operator|new
name|OnReconnect
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|command
parameter_list|()
block|{
synchronized|synchronized
init|(
name|confDirectoryListeners
init|)
block|{
for|for
control|(
name|String
name|s
range|:
name|confDirectoryListeners
operator|.
name|keySet
argument_list|()
control|)
block|{
name|watchZKConfDir
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|;
block|}
block|}
end_class
end_unit
