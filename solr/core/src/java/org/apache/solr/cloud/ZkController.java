begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
operator|.
name|WaitForState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|OnReconnect
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCmdExecutor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZooKeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|Config
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreDescriptor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|HttpShardHandlerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateLog
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DOMUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NoNodeException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import
begin_comment
comment|/**  * Handle ZooKeeper interactions.  *   * notes: loads everything on init, creates what's not there - further updates  * are prompted with Watches.  *   * TODO: exceptions during shutdown on attempts to update cloud state  *   */
end_comment
begin_class
DECL|class|ZkController
specifier|public
specifier|final
class|class
name|ZkController
block|{
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZkController
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NEWL
specifier|static
specifier|final
name|String
name|NEWL
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|URL_POST
specifier|private
specifier|final
specifier|static
name|Pattern
name|URL_POST
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"https?://(.*)"
argument_list|)
decl_stmt|;
DECL|field|URL_PREFIX
specifier|private
specifier|final
specifier|static
name|Pattern
name|URL_PREFIX
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(https?://).*"
argument_list|)
decl_stmt|;
DECL|field|SKIP_AUTO_RECOVERY
specifier|private
specifier|final
name|boolean
name|SKIP_AUTO_RECOVERY
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"solrcloud.skip.autorecovery"
argument_list|)
decl_stmt|;
DECL|field|overseerJobQueue
specifier|private
specifier|final
name|DistributedQueue
name|overseerJobQueue
decl_stmt|;
DECL|field|overseerCollectionQueue
specifier|private
specifier|final
name|DistributedQueue
name|overseerCollectionQueue
decl_stmt|;
comment|// package private for tests
DECL|field|CONFIGS_ZKNODE
specifier|static
specifier|final
name|String
name|CONFIGS_ZKNODE
init|=
literal|"/configs"
decl_stmt|;
DECL|field|COLLECTION_PARAM_PREFIX
specifier|public
specifier|final
specifier|static
name|String
name|COLLECTION_PARAM_PREFIX
init|=
literal|"collection."
decl_stmt|;
DECL|field|CONFIGNAME_PROP
specifier|public
specifier|final
specifier|static
name|String
name|CONFIGNAME_PROP
init|=
literal|"configName"
decl_stmt|;
DECL|field|electionContexts
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ElectionContext
argument_list|>
name|electionContexts
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ElectionContext
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|zkClient
specifier|private
name|SolrZkClient
name|zkClient
decl_stmt|;
DECL|field|cmdExecutor
specifier|private
name|ZkCmdExecutor
name|cmdExecutor
decl_stmt|;
DECL|field|zkStateReader
specifier|private
name|ZkStateReader
name|zkStateReader
decl_stmt|;
DECL|field|leaderElector
specifier|private
name|LeaderElector
name|leaderElector
decl_stmt|;
DECL|field|zkServerAddress
specifier|private
name|String
name|zkServerAddress
decl_stmt|;
comment|// example: 127.0.0.1:54062/solr
DECL|field|localHostPort
specifier|private
specifier|final
name|String
name|localHostPort
decl_stmt|;
comment|// example: 54065
DECL|field|localHostContext
specifier|private
specifier|final
name|String
name|localHostContext
decl_stmt|;
comment|// example: solr
DECL|field|localHost
specifier|private
specifier|final
name|String
name|localHost
decl_stmt|;
comment|// example: http://127.0.0.1
DECL|field|hostName
specifier|private
specifier|final
name|String
name|hostName
decl_stmt|;
comment|// example: 127.0.0.1
DECL|field|nodeName
specifier|private
specifier|final
name|String
name|nodeName
decl_stmt|;
comment|// example: 127.0.0.1:54065_solr
DECL|field|baseURL
specifier|private
specifier|final
name|String
name|baseURL
decl_stmt|;
comment|// example: http://127.0.0.1:54065/solr
DECL|field|overseerElector
specifier|private
name|LeaderElector
name|overseerElector
decl_stmt|;
comment|// for now, this can be null in tests, in which case recovery will be inactive, and other features
comment|// may accept defaults or use mocks rather than pulling things from a CoreContainer
DECL|field|cc
specifier|private
name|CoreContainer
name|cc
decl_stmt|;
DECL|field|overseer
specifier|protected
specifier|volatile
name|Overseer
name|overseer
decl_stmt|;
comment|/**    * @param cc if null, recovery will not be enabled    * @param zkServerAddress    * @param zkClientTimeout    * @param zkClientConnectTimeout    * @param localHost    * @param locaHostPort    * @param localHostContext    * @param registerOnReconnect    * @throws InterruptedException    * @throws TimeoutException    * @throws IOException    */
DECL|method|ZkController
specifier|public
name|ZkController
parameter_list|(
specifier|final
name|CoreContainer
name|cc
parameter_list|,
name|String
name|zkServerAddress
parameter_list|,
name|int
name|zkClientTimeout
parameter_list|,
name|int
name|zkClientConnectTimeout
parameter_list|,
name|String
name|localHost
parameter_list|,
name|String
name|locaHostPort
parameter_list|,
name|String
name|localHostContext
parameter_list|,
specifier|final
name|CurrentCoreDescriptorProvider
name|registerOnReconnect
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|IOException
block|{
name|this
operator|.
name|cc
operator|=
name|cc
expr_stmt|;
if|if
condition|(
name|localHostContext
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"localHostContext ("
operator|+
name|localHostContext
operator|+
literal|") should not contain a /"
argument_list|)
throw|;
block|}
name|this
operator|.
name|zkServerAddress
operator|=
name|zkServerAddress
expr_stmt|;
name|this
operator|.
name|localHostPort
operator|=
name|locaHostPort
expr_stmt|;
name|this
operator|.
name|localHostContext
operator|=
name|localHostContext
expr_stmt|;
name|this
operator|.
name|localHost
operator|=
name|getHostAddress
argument_list|(
name|localHost
argument_list|)
expr_stmt|;
name|this
operator|.
name|hostName
operator|=
name|getHostNameFromAddress
argument_list|(
name|this
operator|.
name|localHost
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeName
operator|=
name|this
operator|.
name|hostName
operator|+
literal|':'
operator|+
name|this
operator|.
name|localHostPort
operator|+
literal|'_'
operator|+
name|this
operator|.
name|localHostContext
expr_stmt|;
name|this
operator|.
name|baseURL
operator|=
name|this
operator|.
name|localHost
operator|+
literal|":"
operator|+
name|this
operator|.
name|localHostPort
operator|+
literal|"/"
operator|+
name|this
operator|.
name|localHostContext
expr_stmt|;
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|zkServerAddress
argument_list|,
name|zkClientTimeout
argument_list|,
name|zkClientConnectTimeout
argument_list|,
comment|// on reconnect, reload cloud info
operator|new
name|OnReconnect
argument_list|()
block|{
specifier|public
name|void
name|command
parameter_list|()
block|{
try|try
block|{
comment|// we need to create all of our lost watches
comment|// seems we dont need to do this again...
comment|//Overseer.createClientNodes(zkClient, getNodeName());
name|ShardHandler
name|shardHandler
decl_stmt|;
name|String
name|adminPath
decl_stmt|;
if|if
condition|(
name|cc
operator|==
literal|null
condition|)
block|{
name|shardHandler
operator|=
operator|new
name|HttpShardHandlerFactory
argument_list|()
operator|.
name|getShardHandler
argument_list|()
expr_stmt|;
name|adminPath
operator|=
literal|"/admin/cores"
expr_stmt|;
block|}
else|else
block|{
name|shardHandler
operator|=
name|cc
operator|.
name|getShardHandlerFactory
argument_list|()
operator|.
name|getShardHandler
argument_list|()
expr_stmt|;
name|adminPath
operator|=
name|cc
operator|.
name|getAdminPath
argument_list|()
expr_stmt|;
block|}
name|ZkController
operator|.
name|this
operator|.
name|overseer
operator|=
operator|new
name|Overseer
argument_list|(
name|shardHandler
argument_list|,
name|adminPath
argument_list|,
name|zkStateReader
argument_list|)
expr_stmt|;
name|ElectionContext
name|context
init|=
operator|new
name|OverseerElectionContext
argument_list|(
name|zkClient
argument_list|,
name|overseer
argument_list|,
name|getNodeName
argument_list|()
argument_list|)
decl_stmt|;
name|overseerElector
operator|.
name|joinElection
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|zkStateReader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
name|registerAllCoresAsDown
argument_list|(
name|registerOnReconnect
argument_list|)
expr_stmt|;
comment|// we have to register as live first to pick up docs in the buffer
name|createEphemeralLiveNode
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|CoreDescriptor
argument_list|>
name|descriptors
init|=
name|registerOnReconnect
operator|.
name|getCurrentDescriptors
argument_list|()
decl_stmt|;
comment|// re register all descriptors
if|if
condition|(
name|descriptors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CoreDescriptor
name|descriptor
range|:
name|descriptors
control|)
block|{
comment|// TODO: we need to think carefully about what happens when it was
comment|// a leader that was expired - as well as what to do about leaders/overseers
comment|// with connection loss
name|register
argument_list|(
name|descriptor
operator|.
name|getName
argument_list|()
argument_list|,
name|descriptor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|overseerJobQueue
operator|=
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|this
operator|.
name|overseerCollectionQueue
operator|=
name|Overseer
operator|.
name|getCollectionQueue
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|cmdExecutor
operator|=
operator|new
name|ZkCmdExecutor
argument_list|()
expr_stmt|;
name|leaderElector
operator|=
operator|new
name|LeaderElector
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|zkStateReader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|registerOnReconnect
argument_list|)
expr_stmt|;
block|}
DECL|method|registerAllCoresAsDown
specifier|private
name|void
name|registerAllCoresAsDown
parameter_list|(
specifier|final
name|CurrentCoreDescriptorProvider
name|registerOnReconnect
parameter_list|)
block|{
name|List
argument_list|<
name|CoreDescriptor
argument_list|>
name|descriptors
init|=
name|registerOnReconnect
operator|.
name|getCurrentDescriptors
argument_list|()
decl_stmt|;
if|if
condition|(
name|descriptors
operator|!=
literal|null
condition|)
block|{
comment|// before registering as live, make sure everyone is in a
comment|// down state
for|for
control|(
name|CoreDescriptor
name|descriptor
range|:
name|descriptors
control|)
block|{
specifier|final
name|String
name|coreZkNodeName
init|=
name|getNodeName
argument_list|()
operator|+
literal|"_"
operator|+
name|descriptor
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|publish
argument_list|(
name|descriptor
argument_list|,
name|ZkStateReader
operator|.
name|DOWN
argument_list|)
expr_stmt|;
name|waitForLeaderToSeeDownState
argument_list|(
name|descriptor
argument_list|,
name|coreZkNodeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Closes the underlying ZooKeeper client.    */
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|overseer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error closing overseer"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * @param collection    * @param fileName    * @return true if config file exists    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|configFileExists
specifier|public
name|boolean
name|configFileExists
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|Stat
name|stat
init|=
name|zkClient
operator|.
name|exists
argument_list|(
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
operator|+
literal|"/"
operator|+
name|fileName
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|stat
operator|!=
literal|null
return|;
block|}
comment|/**    * @return information about the cluster from ZooKeeper    */
DECL|method|getClusterState
specifier|public
name|ClusterState
name|getClusterState
parameter_list|()
block|{
return|return
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
return|;
block|}
comment|/**    * @param zkConfigName    * @param fileName    * @return config file data (in bytes)    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|getConfigFileData
specifier|public
name|byte
index|[]
name|getConfigFileData
parameter_list|(
name|String
name|zkConfigName
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|zkPath
init|=
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|zkConfigName
operator|+
literal|"/"
operator|+
name|fileName
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|zkPath
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Config file contains no data:"
operator|+
name|zkPath
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Config file contains no data:"
operator|+
name|zkPath
argument_list|)
throw|;
block|}
return|return
name|bytes
return|;
block|}
comment|// normalize host to url_prefix://host
comment|// input can be null, host, or url_prefix://host
DECL|method|getHostAddress
specifier|private
name|String
name|getHostAddress
parameter_list|(
name|String
name|host
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
name|host
operator|=
literal|"http://"
operator|+
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Matcher
name|m
init|=
name|URL_PREFIX
operator|.
name|matcher
argument_list|(
name|host
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|prefix
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|host
operator|=
name|prefix
operator|+
name|host
expr_stmt|;
block|}
else|else
block|{
name|host
operator|=
literal|"http://"
operator|+
name|host
expr_stmt|;
block|}
block|}
return|return
name|host
return|;
block|}
comment|// extract host from url_prefix://host
DECL|method|getHostNameFromAddress
specifier|private
name|String
name|getHostNameFromAddress
parameter_list|(
name|String
name|addr
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|URL_POST
operator|.
name|matcher
argument_list|(
name|addr
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unrecognized host:"
operator|+
name|addr
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unrecognized host:"
operator|+
name|addr
argument_list|)
throw|;
block|}
block|}
DECL|method|getHostName
specifier|public
name|String
name|getHostName
parameter_list|()
block|{
return|return
name|hostName
return|;
block|}
DECL|method|getHostPort
specifier|public
name|String
name|getHostPort
parameter_list|()
block|{
return|return
name|localHostPort
return|;
block|}
DECL|method|getZkClient
specifier|public
name|SolrZkClient
name|getZkClient
parameter_list|()
block|{
return|return
name|zkClient
return|;
block|}
comment|/**    * @return zookeeper server address    */
DECL|method|getZkServerAddress
specifier|public
name|String
name|getZkServerAddress
parameter_list|()
block|{
return|return
name|zkServerAddress
return|;
block|}
DECL|method|init
specifier|private
name|void
name|init
parameter_list|(
name|CurrentCoreDescriptorProvider
name|registerOnReconnect
parameter_list|)
block|{
name|registerAllCoresAsDown
argument_list|(
name|registerOnReconnect
argument_list|)
expr_stmt|;
try|try
block|{
comment|// makes nodes zkNode
name|cmdExecutor
operator|.
name|ensureExists
argument_list|(
name|ZkStateReader
operator|.
name|LIVE_NODES_ZKNODE
argument_list|,
name|zkClient
argument_list|)
expr_stmt|;
name|createEphemeralLiveNode
argument_list|()
expr_stmt|;
name|cmdExecutor
operator|.
name|ensureExists
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
argument_list|,
name|zkClient
argument_list|)
expr_stmt|;
name|ShardHandler
name|shardHandler
decl_stmt|;
name|String
name|adminPath
decl_stmt|;
if|if
condition|(
name|cc
operator|==
literal|null
condition|)
block|{
name|shardHandler
operator|=
operator|new
name|HttpShardHandlerFactory
argument_list|()
operator|.
name|getShardHandler
argument_list|()
expr_stmt|;
name|adminPath
operator|=
literal|"/admin/cores"
expr_stmt|;
block|}
else|else
block|{
name|shardHandler
operator|=
name|cc
operator|.
name|getShardHandlerFactory
argument_list|()
operator|.
name|getShardHandler
argument_list|()
expr_stmt|;
name|adminPath
operator|=
name|cc
operator|.
name|getAdminPath
argument_list|()
expr_stmt|;
block|}
name|overseerElector
operator|=
operator|new
name|LeaderElector
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|this
operator|.
name|overseer
operator|=
operator|new
name|Overseer
argument_list|(
name|shardHandler
argument_list|,
name|adminPath
argument_list|,
name|zkStateReader
argument_list|)
expr_stmt|;
name|ElectionContext
name|context
init|=
operator|new
name|OverseerElectionContext
argument_list|(
name|zkClient
argument_list|,
name|overseer
argument_list|,
name|getNodeName
argument_list|()
argument_list|)
decl_stmt|;
name|overseerElector
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|overseerElector
operator|.
name|joinElection
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|zkStateReader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Can't create ZooKeeperController"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|isConnected
specifier|public
name|boolean
name|isConnected
parameter_list|()
block|{
return|return
name|zkClient
operator|.
name|isConnected
argument_list|()
return|;
block|}
DECL|method|createEphemeralLiveNode
specifier|private
name|void
name|createEphemeralLiveNode
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|nodeName
init|=
name|getNodeName
argument_list|()
decl_stmt|;
name|String
name|nodePath
init|=
name|ZkStateReader
operator|.
name|LIVE_NODES_ZKNODE
operator|+
literal|"/"
operator|+
name|nodeName
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Register node as live in ZooKeeper:"
operator|+
name|nodePath
argument_list|)
expr_stmt|;
try|try
block|{
name|boolean
name|nodeDeleted
init|=
literal|true
decl_stmt|;
try|try
block|{
comment|// we attempt a delete in the case of a quick server bounce -
comment|// if there was not a graceful shutdown, the node may exist
comment|// until expiration timeout - so a node won't be created here because
comment|// it exists, but eventually the node will be removed. So delete
comment|// in case it exists and create a new node.
name|zkClient
operator|.
name|delete
argument_list|(
name|nodePath
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
comment|// fine if there is nothing to delete
comment|// TODO: annoying that ZK logs a warning on us
name|nodeDeleted
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|nodeDeleted
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Found a previous node that still exists while trying to register a new live node "
operator|+
name|nodePath
operator|+
literal|" - removing existing node to create another."
argument_list|)
expr_stmt|;
block|}
name|zkClient
operator|.
name|makePath
argument_list|(
name|nodePath
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
comment|// its okay if the node already exists
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|!=
name|KeeperException
operator|.
name|Code
operator|.
name|NODEEXISTS
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
DECL|method|getNodeName
specifier|public
name|String
name|getNodeName
parameter_list|()
block|{
return|return
name|nodeName
return|;
block|}
comment|/**    * @param path    * @return true if the path exists    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|pathExists
specifier|public
name|boolean
name|pathExists
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|zkClient
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * @param collection    * @return config value    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|readConfigName
specifier|public
name|String
name|readConfigName
parameter_list|(
name|String
name|collection
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|configName
init|=
literal|null
decl_stmt|;
name|String
name|path
init|=
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Load collection config from:"
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|data
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|ZkNodeProps
name|props
init|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|configName
operator|=
name|props
operator|.
name|get
argument_list|(
name|CONFIGNAME_PROP
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configName
operator|!=
literal|null
operator|&&
operator|!
name|zkClient
operator|.
name|exists
argument_list|(
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|configName
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Specified config does not exist in ZooKeeper:"
operator|+
name|configName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Specified config does not exist in ZooKeeper:"
operator|+
name|configName
argument_list|)
throw|;
block|}
return|return
name|configName
return|;
block|}
comment|/**    * Register shard with ZooKeeper.    *     * @param coreName    * @param desc    * @return the shardId for the SolrCore    * @throws Exception    */
DECL|method|register
specifier|public
name|String
name|register
parameter_list|(
name|String
name|coreName
parameter_list|,
specifier|final
name|CoreDescriptor
name|desc
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|register
argument_list|(
name|coreName
argument_list|,
name|desc
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Register shard with ZooKeeper.    *     * @param coreName    * @param desc    * @param recoverReloadedCores    * @return the shardId for the SolrCore    * @throws Exception    */
DECL|method|register
specifier|public
name|String
name|register
parameter_list|(
name|String
name|coreName
parameter_list|,
specifier|final
name|CoreDescriptor
name|desc
parameter_list|,
name|boolean
name|recoverReloadedCores
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|baseUrl
init|=
name|getBaseUrl
argument_list|()
decl_stmt|;
specifier|final
name|CloudDescriptor
name|cloudDesc
init|=
name|desc
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
specifier|final
name|String
name|collection
init|=
name|cloudDesc
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|coreZkNodeName
init|=
name|getNodeName
argument_list|()
operator|+
literal|"_"
operator|+
name|coreName
decl_stmt|;
name|String
name|shardId
init|=
name|cloudDesc
operator|.
name|getShardId
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// we only put a subset of props into the leader node
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|baseUrl
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|coreName
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Register shard - core:"
operator|+
name|coreName
operator|+
literal|" address:"
operator|+
name|baseUrl
operator|+
literal|" shardId:"
operator|+
name|shardId
argument_list|)
expr_stmt|;
block|}
name|ZkNodeProps
name|leaderProps
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
decl_stmt|;
try|try
block|{
name|joinElection
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// rather than look in the cluster state file, we go straight to the zknodes
comment|// here, because on cluster restart there could be stale leader info in the
comment|// cluster state node that won't be updated for a moment
name|String
name|leaderUrl
init|=
name|getLeaderProps
argument_list|(
name|collection
argument_list|,
name|cloudDesc
operator|.
name|getShardId
argument_list|()
argument_list|)
operator|.
name|getCoreUrl
argument_list|()
decl_stmt|;
comment|// now wait until our currently cloud state contains the latest leader
name|String
name|clusterStateLeader
init|=
name|zkStateReader
operator|.
name|getLeaderUrl
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|,
literal|30000
argument_list|)
decl_stmt|;
name|int
name|tries
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|leaderUrl
operator|.
name|equals
argument_list|(
name|clusterStateLeader
argument_list|)
condition|)
block|{
if|if
condition|(
name|tries
operator|==
literal|60
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"There is conflicting information about the leader of shard: "
operator|+
name|cloudDesc
operator|.
name|getShardId
argument_list|()
operator|+
literal|" our state says:"
operator|+
name|clusterStateLeader
operator|+
literal|" but zookeeper says:"
operator|+
name|leaderUrl
argument_list|)
throw|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|tries
operator|++
expr_stmt|;
name|clusterStateLeader
operator|=
name|zkStateReader
operator|.
name|getLeaderUrl
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|leaderUrl
operator|=
name|getLeaderProps
argument_list|(
name|collection
argument_list|,
name|cloudDesc
operator|.
name|getShardId
argument_list|()
argument_list|)
operator|.
name|getCoreUrl
argument_list|()
expr_stmt|;
block|}
name|String
name|ourUrl
init|=
name|ZkCoreNodeProps
operator|.
name|getCoreUrl
argument_list|(
name|baseUrl
argument_list|,
name|coreName
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"We are "
operator|+
name|ourUrl
operator|+
literal|" and leader is "
operator|+
name|leaderUrl
argument_list|)
expr_stmt|;
name|boolean
name|isLeader
init|=
name|leaderUrl
operator|.
name|equals
argument_list|(
name|ourUrl
argument_list|)
decl_stmt|;
name|SolrCore
name|core
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cc
operator|!=
literal|null
condition|)
block|{
comment|// CoreContainer only null in tests
try|try
block|{
name|core
operator|=
name|cc
operator|.
name|getCore
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// recover from local transaction log and wait for it to complete before
comment|// going active
comment|// TODO: should this be moved to another thread? To recoveryStrat?
comment|// TODO: should this actually be done earlier, before (or as part of)
comment|// leader election perhaps?
comment|// TODO: if I'm the leader, ensure that a replica that is trying to recover waits until I'm
comment|// active (or don't make me the
comment|// leader until my local replay is done.
name|UpdateLog
name|ulog
init|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|core
operator|.
name|isReloaded
argument_list|()
operator|&&
name|ulog
operator|!=
literal|null
condition|)
block|{
name|Future
argument_list|<
name|UpdateLog
operator|.
name|RecoveryInfo
argument_list|>
name|recoveryFuture
init|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|.
name|recoverFromLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|recoveryFuture
operator|!=
literal|null
condition|)
block|{
name|recoveryFuture
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// NOTE: this could potentially block for
comment|// minutes or more!
comment|// TODO: public as recovering in the mean time?
comment|// TODO: in the future we could do peerync in parallel with recoverFromLog
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No LogReplay needed for core="
operator|+
name|core
operator|.
name|getName
argument_list|()
operator|+
literal|" baseURL="
operator|+
name|baseUrl
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|didRecovery
init|=
name|checkRecovery
argument_list|(
name|coreName
argument_list|,
name|desc
argument_list|,
name|recoverReloadedCores
argument_list|,
name|isLeader
argument_list|,
name|cloudDesc
argument_list|,
name|collection
argument_list|,
name|coreZkNodeName
argument_list|,
name|shardId
argument_list|,
name|leaderProps
argument_list|,
name|core
argument_list|,
name|cc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|didRecovery
condition|)
block|{
name|publish
argument_list|(
name|desc
argument_list|,
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|publish
argument_list|(
name|desc
argument_list|,
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
comment|// make sure we have an update cluster state right away
name|zkStateReader
operator|.
name|updateClusterState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|shardId
return|;
block|}
comment|/**    * Get leader props directly from zk nodes.    *     * @param collection    * @param slice    * @return    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|getLeaderProps
specifier|private
name|ZkCoreNodeProps
name|getLeaderProps
parameter_list|(
specifier|final
name|String
name|collection
parameter_list|,
specifier|final
name|String
name|slice
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|int
name|iterCount
init|=
literal|60
decl_stmt|;
while|while
condition|(
name|iterCount
operator|--
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|byte
index|[]
name|data
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|ZkStateReader
operator|.
name|getShardLeadersPath
argument_list|(
name|collection
argument_list|,
name|slice
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ZkCoreNodeProps
name|leaderProps
init|=
operator|new
name|ZkCoreNodeProps
argument_list|(
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|leaderProps
return|;
block|}
catch|catch
parameter_list|(
name|NoNodeException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not get leader props"
argument_list|)
throw|;
block|}
DECL|method|joinElection
specifier|private
name|void
name|joinElection
parameter_list|(
name|CoreDescriptor
name|cd
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
throws|,
name|IOException
block|{
name|String
name|shardId
init|=
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getShardId
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// we only put a subset of props into the leader node
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|getBaseUrl
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|cd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|coreZkNodeName
init|=
name|getNodeName
argument_list|()
operator|+
literal|"_"
operator|+
name|cd
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ZkNodeProps
name|ourProps
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|String
name|collection
init|=
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|ElectionContext
name|context
init|=
operator|new
name|ShardLeaderElectionContext
argument_list|(
name|leaderElector
argument_list|,
name|shardId
argument_list|,
name|collection
argument_list|,
name|coreZkNodeName
argument_list|,
name|ourProps
argument_list|,
name|this
argument_list|,
name|cc
argument_list|)
decl_stmt|;
name|leaderElector
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|electionContexts
operator|.
name|put
argument_list|(
name|coreZkNodeName
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|leaderElector
operator|.
name|joinElection
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param coreName    * @param desc    * @param recoverReloadedCores    * @param isLeader    * @param cloudDesc    * @param collection    * @param shardZkNodeName    * @param shardId    * @param leaderProps    * @param core    * @param cc    * @return whether or not a recovery was started    */
DECL|method|checkRecovery
specifier|private
name|boolean
name|checkRecovery
parameter_list|(
name|String
name|coreName
parameter_list|,
specifier|final
name|CoreDescriptor
name|desc
parameter_list|,
name|boolean
name|recoverReloadedCores
parameter_list|,
specifier|final
name|boolean
name|isLeader
parameter_list|,
specifier|final
name|CloudDescriptor
name|cloudDesc
parameter_list|,
specifier|final
name|String
name|collection
parameter_list|,
specifier|final
name|String
name|shardZkNodeName
parameter_list|,
name|String
name|shardId
parameter_list|,
name|ZkNodeProps
name|leaderProps
parameter_list|,
name|SolrCore
name|core
parameter_list|,
name|CoreContainer
name|cc
parameter_list|)
block|{
if|if
condition|(
name|SKIP_AUTO_RECOVERY
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Skipping recovery according to sys prop solrcloud.skip.autorecovery"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|boolean
name|doRecovery
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|isLeader
condition|)
block|{
if|if
condition|(
name|core
operator|.
name|isReloaded
argument_list|()
operator|&&
operator|!
name|recoverReloadedCores
condition|)
block|{
name|doRecovery
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|doRecovery
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Core needs to recover:"
operator|+
name|core
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|doRecovery
argument_list|(
name|cc
argument_list|,
name|coreName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"I am the leader, no recovery necessary"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|getBaseUrl
specifier|public
name|String
name|getBaseUrl
parameter_list|()
block|{
return|return
name|baseURL
return|;
block|}
comment|/**    * Publish core state to overseer.    * @param cd    * @param state    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|publish
specifier|public
name|void
name|publish
parameter_list|(
specifier|final
name|CoreDescriptor
name|cd
parameter_list|,
specifier|final
name|String
name|state
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
comment|//System.out.println(Thread.currentThread().getStackTrace()[3]);
name|Integer
name|numShards
init|=
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getNumShards
argument_list|()
decl_stmt|;
if|if
condition|(
name|numShards
operator|==
literal|null
condition|)
block|{
comment|//XXX sys prop hack
name|numShards
operator|=
name|Integer
operator|.
name|getInteger
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|)
expr_stmt|;
block|}
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
literal|"state"
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|state
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|getBaseUrl
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|cd
operator|.
name|getName
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|ROLES_PROP
argument_list|,
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getRoles
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|getNodeName
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getShardId
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|state
argument_list|,
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
name|numShards
operator|!=
literal|null
condition|?
name|numShards
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|)
decl_stmt|;
name|overseerJobQueue
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|needsToBeAssignedShardId
specifier|private
name|boolean
name|needsToBeAssignedShardId
parameter_list|(
specifier|final
name|CoreDescriptor
name|desc
parameter_list|,
specifier|final
name|ClusterState
name|state
parameter_list|,
specifier|final
name|String
name|shardZkNodeName
parameter_list|)
block|{
specifier|final
name|CloudDescriptor
name|cloudDesc
init|=
name|desc
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
specifier|final
name|String
name|shardId
init|=
name|state
operator|.
name|getShardId
argument_list|(
name|shardZkNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardId
operator|!=
literal|null
condition|)
block|{
name|cloudDesc
operator|.
name|setShardId
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * @param coreName    * @param cloudDesc    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|unregister
specifier|public
name|void
name|unregister
parameter_list|(
name|String
name|coreName
parameter_list|,
name|CloudDescriptor
name|cloudDesc
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
literal|"deletecore"
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|coreName
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|getNodeName
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|cloudDesc
operator|.
name|getCollectionName
argument_list|()
argument_list|)
decl_stmt|;
name|overseerJobQueue
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|zkNodeName
init|=
name|getNodeName
argument_list|()
operator|+
literal|"_"
operator|+
name|coreName
decl_stmt|;
name|ElectionContext
name|context
init|=
name|electionContexts
operator|.
name|remove
argument_list|(
name|zkNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|cancelElection
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createCollection
specifier|public
name|void
name|createCollection
parameter_list|(
name|String
name|collection
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
literal|"createcollection"
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|getNodeName
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|)
decl_stmt|;
name|overseerJobQueue
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param dir    * @param zkPath    * @throws IOException    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|uploadToZK
specifier|public
name|void
name|uploadToZK
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|zkPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|uploadToZK
argument_list|(
name|zkClient
argument_list|,
name|dir
argument_list|,
name|zkPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param dir    * @param configName    * @throws IOException    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|uploadConfigDir
specifier|public
name|void
name|uploadConfigDir
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|configName
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|uploadToZK
argument_list|(
name|zkClient
argument_list|,
name|dir
argument_list|,
name|ZkController
operator|.
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|configName
argument_list|)
expr_stmt|;
block|}
comment|// convenience for testing
DECL|method|printLayoutToStdOut
name|void
name|printLayoutToStdOut
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|zkClient
operator|.
name|printLayoutToStdOut
argument_list|()
expr_stmt|;
block|}
DECL|method|createCollectionZkNode
specifier|public
name|void
name|createCollectionZkNode
parameter_list|(
name|CloudDescriptor
name|cd
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|collection
init|=
name|cd
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Check for collection zkNode:"
operator|+
name|collection
argument_list|)
expr_stmt|;
name|String
name|collectionPath
init|=
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|zkClient
operator|.
name|exists
argument_list|(
name|collectionPath
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Creating collection in ZooKeeper:"
operator|+
name|collection
argument_list|)
expr_stmt|;
name|SolrParams
name|params
init|=
name|cd
operator|.
name|getParams
argument_list|()
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|collectionProps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?
name|String
name|defaultConfigName
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|COLLECTION_PARAM_PREFIX
operator|+
name|CONFIGNAME_PROP
argument_list|,
name|collection
argument_list|)
decl_stmt|;
comment|// params passed in - currently only done via core admin (create core commmand).
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|params
operator|.
name|getParameterNamesIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|paramName
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|paramName
operator|.
name|startsWith
argument_list|(
name|COLLECTION_PARAM_PREFIX
argument_list|)
condition|)
block|{
name|collectionProps
operator|.
name|put
argument_list|(
name|paramName
operator|.
name|substring
argument_list|(
name|COLLECTION_PARAM_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|params
operator|.
name|get
argument_list|(
name|paramName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if the config name wasn't passed in, use the default
if|if
condition|(
operator|!
name|collectionProps
operator|.
name|containsKey
argument_list|(
name|CONFIGNAME_PROP
argument_list|)
condition|)
name|getConfName
argument_list|(
name|collection
argument_list|,
name|collectionPath
argument_list|,
name|collectionProps
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"bootstrap_confdir"
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// if we are bootstrapping a collection, default the config for
comment|// a new collection to the collection we are bootstrapping
name|log
operator|.
name|info
argument_list|(
literal|"Setting config for collection:"
operator|+
name|collection
operator|+
literal|" to "
operator|+
name|defaultConfigName
argument_list|)
expr_stmt|;
name|Properties
name|sysProps
init|=
name|System
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|sprop
range|:
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
if|if
condition|(
name|sprop
operator|.
name|startsWith
argument_list|(
name|COLLECTION_PARAM_PREFIX
argument_list|)
condition|)
block|{
name|collectionProps
operator|.
name|put
argument_list|(
name|sprop
operator|.
name|substring
argument_list|(
name|COLLECTION_PARAM_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|sysProps
operator|.
name|getProperty
argument_list|(
name|sprop
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if the config name wasn't passed in, use the default
if|if
condition|(
operator|!
name|collectionProps
operator|.
name|containsKey
argument_list|(
name|CONFIGNAME_PROP
argument_list|)
condition|)
name|collectionProps
operator|.
name|put
argument_list|(
name|CONFIGNAME_PROP
argument_list|,
name|defaultConfigName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"bootstrap_conf"
argument_list|)
condition|)
block|{
comment|// the conf name should should be the collection name of this core
name|collectionProps
operator|.
name|put
argument_list|(
name|CONFIGNAME_PROP
argument_list|,
name|cd
operator|.
name|getCollectionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getConfName
argument_list|(
name|collection
argument_list|,
name|collectionPath
argument_list|,
name|collectionProps
argument_list|)
expr_stmt|;
block|}
name|ZkNodeProps
name|zkProps
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|collectionProps
argument_list|)
decl_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
name|collectionPath
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|zkProps
argument_list|)
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
comment|// its okay if the node already exists
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|!=
name|KeeperException
operator|.
name|Code
operator|.
name|NODEEXISTS
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Collection zkNode exists"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
comment|// its okay if another beats us creating the node
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|!=
name|KeeperException
operator|.
name|Code
operator|.
name|NODEEXISTS
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
DECL|method|getConfName
specifier|private
name|void
name|getConfName
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|collectionPath
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|collectionProps
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
comment|// check for configName
name|log
operator|.
name|info
argument_list|(
literal|"Looking for collection configName"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|configNames
init|=
literal|null
decl_stmt|;
name|int
name|retry
init|=
literal|1
decl_stmt|;
name|int
name|retryLimt
init|=
literal|6
decl_stmt|;
for|for
control|(
init|;
name|retry
operator|<
name|retryLimt
condition|;
name|retry
operator|++
control|)
block|{
if|if
condition|(
name|zkClient
operator|.
name|exists
argument_list|(
name|collectionPath
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|ZkNodeProps
name|cProps
init|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|zkClient
operator|.
name|getData
argument_list|(
name|collectionPath
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cProps
operator|.
name|containsKey
argument_list|(
name|CONFIGNAME_PROP
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
comment|// if there is only one conf, use that
try|try
block|{
name|configNames
operator|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|CONFIGS_ZKNODE
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoNodeException
name|e
parameter_list|)
block|{
comment|// just keep trying
block|}
if|if
condition|(
name|configNames
operator|!=
literal|null
operator|&&
name|configNames
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// no config set named, but there is only 1 - use it
name|log
operator|.
name|info
argument_list|(
literal|"Only one config set found in zk - using it:"
operator|+
name|configNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|collectionProps
operator|.
name|put
argument_list|(
name|CONFIGNAME_PROP
argument_list|,
name|configNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|configNames
operator|!=
literal|null
operator|&&
name|configNames
operator|.
name|contains
argument_list|(
name|collection
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Could not find explicit collection configName, but found config name matching collection name - using that set."
argument_list|)
expr_stmt|;
name|collectionProps
operator|.
name|put
argument_list|(
name|CONFIGNAME_PROP
argument_list|,
name|collection
argument_list|)
expr_stmt|;
break|break;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Could not find collection configName - pausing for 3 seconds and trying again - try: "
operator|+
name|retry
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|retry
operator|==
name|retryLimt
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not find configName for collection "
operator|+
name|collection
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not find configName for collection "
operator|+
name|collection
operator|+
literal|" found:"
operator|+
name|configNames
argument_list|)
throw|;
block|}
block|}
DECL|method|getZkStateReader
specifier|public
name|ZkStateReader
name|getZkStateReader
parameter_list|()
block|{
return|return
name|zkStateReader
return|;
block|}
DECL|method|doGetShardIdProcess
specifier|private
name|String
name|doGetShardIdProcess
parameter_list|(
name|String
name|coreName
parameter_list|,
name|CloudDescriptor
name|descriptor
parameter_list|)
block|{
specifier|final
name|String
name|shardZkNodeName
init|=
name|getNodeName
argument_list|()
operator|+
literal|"_"
operator|+
name|coreName
decl_stmt|;
name|int
name|retryCount
init|=
literal|120
decl_stmt|;
while|while
condition|(
name|retryCount
operator|--
operator|>
literal|0
condition|)
block|{
specifier|final
name|String
name|shardId
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getShardId
argument_list|(
name|shardZkNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardId
operator|!=
literal|null
condition|)
block|{
return|return
name|shardId
return|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not get shard_id for core: "
operator|+
name|coreName
argument_list|)
throw|;
block|}
DECL|method|uploadToZK
specifier|public
specifier|static
name|void
name|uploadToZK
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|File
name|dir
parameter_list|,
name|String
name|zkPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal directory: "
operator|+
name|dir
argument_list|)
throw|;
block|}
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|zkClient
operator|.
name|makePath
argument_list|(
name|zkPath
operator|+
literal|"/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|,
name|file
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uploadToZK
argument_list|(
name|zkClient
argument_list|,
name|file
argument_list|,
name|zkPath
operator|+
literal|"/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|downloadFromZK
specifier|public
specifier|static
name|void
name|downloadFromZK
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|String
name|zkPath
parameter_list|,
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|zkPath
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|zkPath
operator|+
literal|"/"
operator|+
name|file
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|byte
index|[]
name|data
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|zkPath
operator|+
literal|"/"
operator|+
name|file
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Write file "
operator|+
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|file
argument_list|)
argument_list|,
operator|new
name|String
argument_list|(
name|data
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|downloadFromZK
argument_list|(
name|zkClient
argument_list|,
name|zkPath
operator|+
literal|"/"
operator|+
name|file
argument_list|,
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getCoreNodeName
specifier|private
name|String
name|getCoreNodeName
parameter_list|(
name|CoreDescriptor
name|descriptor
parameter_list|)
block|{
return|return
name|getNodeName
argument_list|()
operator|+
literal|"_"
operator|+
name|descriptor
operator|.
name|getName
argument_list|()
return|;
block|}
DECL|method|uploadConfigDir
specifier|public
specifier|static
name|void
name|uploadConfigDir
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|File
name|dir
parameter_list|,
name|String
name|configName
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|uploadToZK
argument_list|(
name|zkClient
argument_list|,
name|dir
argument_list|,
name|ZkController
operator|.
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|configName
argument_list|)
expr_stmt|;
block|}
DECL|method|downloadConfigDir
specifier|public
specifier|static
name|void
name|downloadConfigDir
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|String
name|configName
parameter_list|,
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|downloadFromZK
argument_list|(
name|zkClient
argument_list|,
name|ZkController
operator|.
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|configName
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|preRegister
specifier|public
name|void
name|preRegister
parameter_list|(
name|CoreDescriptor
name|cd
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
comment|// before becoming available, make sure we are not live and active
comment|// this also gets us our assigned shard id if it was not specified
name|publish
argument_list|(
name|cd
argument_list|,
name|ZkStateReader
operator|.
name|DOWN
argument_list|)
expr_stmt|;
name|String
name|shardZkNodeName
init|=
name|getCoreNodeName
argument_list|(
name|cd
argument_list|)
decl_stmt|;
if|if
condition|(
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getShardId
argument_list|()
operator|==
literal|null
operator|&&
name|needsToBeAssignedShardId
argument_list|(
name|cd
argument_list|,
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|shardZkNodeName
argument_list|)
condition|)
block|{
name|String
name|shardId
decl_stmt|;
name|shardId
operator|=
name|doGetShardIdProcess
argument_list|(
name|cd
operator|.
name|getName
argument_list|()
argument_list|,
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|setShardId
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|waitForLeaderToSeeDownState
specifier|private
name|ZkCoreNodeProps
name|waitForLeaderToSeeDownState
parameter_list|(
name|CoreDescriptor
name|descriptor
parameter_list|,
specifier|final
name|String
name|coreZkNodeName
parameter_list|)
block|{
name|CloudDescriptor
name|cloudDesc
init|=
name|descriptor
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
name|String
name|collection
init|=
name|cloudDesc
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|String
name|shard
init|=
name|cloudDesc
operator|.
name|getShardId
argument_list|()
decl_stmt|;
name|ZkCoreNodeProps
name|leaderProps
init|=
literal|null
decl_stmt|;
name|int
name|retries
init|=
literal|6
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|retries
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
comment|// go straight to zk, not the cloud state - we must have current info
name|leaderProps
operator|=
name|getLeaderProps
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"There was a problem finding the leader in zk"
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
name|retries
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"There was a problem finding the leader in zk"
argument_list|)
throw|;
block|}
block|}
block|}
name|String
name|leaderBaseUrl
init|=
name|leaderProps
operator|.
name|getBaseUrl
argument_list|()
decl_stmt|;
name|String
name|leaderCoreName
init|=
name|leaderProps
operator|.
name|getCoreName
argument_list|()
decl_stmt|;
name|String
name|ourUrl
init|=
name|ZkCoreNodeProps
operator|.
name|getCoreUrl
argument_list|(
name|getBaseUrl
argument_list|()
argument_list|,
name|descriptor
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isLeader
init|=
name|leaderProps
operator|.
name|getCoreUrl
argument_list|()
operator|.
name|equals
argument_list|(
name|ourUrl
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isLeader
operator|&&
operator|!
name|SKIP_AUTO_RECOVERY
condition|)
block|{
name|HttpSolrServer
name|server
init|=
literal|null
decl_stmt|;
name|server
operator|=
operator|new
name|HttpSolrServer
argument_list|(
name|leaderBaseUrl
argument_list|)
expr_stmt|;
name|server
operator|.
name|setConnectionTimeout
argument_list|(
literal|45000
argument_list|)
expr_stmt|;
name|server
operator|.
name|setSoTimeout
argument_list|(
literal|45000
argument_list|)
expr_stmt|;
name|WaitForState
name|prepCmd
init|=
operator|new
name|WaitForState
argument_list|()
decl_stmt|;
name|prepCmd
operator|.
name|setCoreName
argument_list|(
name|leaderCoreName
argument_list|)
expr_stmt|;
name|prepCmd
operator|.
name|setNodeName
argument_list|(
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|prepCmd
operator|.
name|setCoreNodeName
argument_list|(
name|coreZkNodeName
argument_list|)
expr_stmt|;
name|prepCmd
operator|.
name|setState
argument_list|(
name|ZkStateReader
operator|.
name|DOWN
argument_list|)
expr_stmt|;
name|prepCmd
operator|.
name|setPauseFor
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// let's retry a couple times - perhaps the leader just went down,
comment|// or perhaps he is just not quite ready for us yet
name|retries
operator|=
literal|6
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|retries
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|server
operator|.
name|request
argument_list|(
name|prepCmd
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"There was a problem making a request to the leader"
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
name|retries
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"There was a problem making a request to the leader"
argument_list|)
throw|;
block|}
block|}
block|}
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
return|return
name|leaderProps
return|;
block|}
DECL|method|linkConfSet
specifier|public
specifier|static
name|void
name|linkConfSet
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|confSetName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|path
init|=
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Load collection config from:"
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|data
decl_stmt|;
try|try
block|{
name|data
operator|=
name|zkClient
operator|.
name|getData
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoNodeException
name|e
parameter_list|)
block|{
comment|// if there is no node, we will try and create it
comment|// first try to make in case we are pre configuring
name|ZkNodeProps
name|props
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|CONFIGNAME_PROP
argument_list|,
name|confSetName
argument_list|)
decl_stmt|;
try|try
block|{
name|zkClient
operator|.
name|makePath
argument_list|(
name|path
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|props
argument_list|)
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e2
parameter_list|)
block|{
comment|// its okay if the node already exists
if|if
condition|(
name|e2
operator|.
name|code
argument_list|()
operator|!=
name|KeeperException
operator|.
name|Code
operator|.
name|NODEEXISTS
condition|)
block|{
throw|throw
name|e
throw|;
block|}
comment|// if we fail creating, setdata
comment|// TODO: we should consider using version
name|zkClient
operator|.
name|setData
argument_list|(
name|path
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|props
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// we found existing data, let's update it
name|ZkNodeProps
name|props
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|props
operator|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newProps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|newProps
operator|.
name|putAll
argument_list|(
name|props
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|newProps
operator|.
name|put
argument_list|(
name|CONFIGNAME_PROP
argument_list|,
name|confSetName
argument_list|)
expr_stmt|;
name|props
operator|=
operator|new
name|ZkNodeProps
argument_list|(
name|newProps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|props
operator|=
operator|new
name|ZkNodeProps
argument_list|(
name|CONFIGNAME_PROP
argument_list|,
name|confSetName
argument_list|)
expr_stmt|;
block|}
comment|// TODO: we should consider using version
name|zkClient
operator|.
name|setData
argument_list|(
name|path
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|props
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.    *     * @throws IOException    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|bootstrapConf
specifier|public
specifier|static
name|void
name|bootstrapConf
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|Config
name|cfg
parameter_list|,
name|String
name|solrHome
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"bootstraping config into ZooKeeper using solr.xml"
argument_list|)
expr_stmt|;
name|NodeList
name|nodes
init|=
operator|(
name|NodeList
operator|)
name|cfg
operator|.
name|evaluate
argument_list|(
literal|"solr/cores/core"
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|rawName
init|=
name|DOMUtil
operator|.
name|substituteProperty
argument_list|(
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
literal|"name"
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|instanceDir
init|=
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
literal|"instanceDir"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|File
name|idir
init|=
operator|new
name|File
argument_list|(
name|instanceDir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|idir
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|idir
operator|=
operator|new
name|File
argument_list|(
name|solrHome
argument_list|,
name|instanceDir
argument_list|)
expr_stmt|;
block|}
name|String
name|confName
init|=
name|DOMUtil
operator|.
name|substituteProperty
argument_list|(
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
literal|"collection"
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|confName
operator|==
literal|null
condition|)
block|{
name|confName
operator|=
name|rawName
expr_stmt|;
block|}
name|File
name|udir
init|=
operator|new
name|File
argument_list|(
name|idir
argument_list|,
literal|"conf"
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Uploading directory "
operator|+
name|udir
operator|+
literal|" with name "
operator|+
name|confName
operator|+
literal|" for SolrCore "
operator|+
name|rawName
argument_list|)
expr_stmt|;
name|ZkController
operator|.
name|uploadConfigDir
argument_list|(
name|zkClient
argument_list|,
name|udir
argument_list|,
name|confName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getOverseerJobQueue
specifier|public
name|DistributedQueue
name|getOverseerJobQueue
parameter_list|()
block|{
return|return
name|overseerJobQueue
return|;
block|}
DECL|method|getOverseerCollectionQueue
specifier|public
name|DistributedQueue
name|getOverseerCollectionQueue
parameter_list|()
block|{
return|return
name|overseerCollectionQueue
return|;
block|}
block|}
end_class
end_unit
