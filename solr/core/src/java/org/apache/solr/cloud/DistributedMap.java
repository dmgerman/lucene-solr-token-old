begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCmdExecutor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/**  * A distributed map.  * This supports basic map functions e.g. get, put, contains for interaction with zk which  * don't have to be ordered i.e. DistributedQueue.  */
end_comment
begin_class
DECL|class|DistributedMap
specifier|public
class|class
name|DistributedMap
block|{
DECL|field|dir
specifier|protected
specifier|final
name|String
name|dir
decl_stmt|;
DECL|field|zookeeper
specifier|protected
name|SolrZkClient
name|zookeeper
decl_stmt|;
DECL|field|prefix
specifier|protected
specifier|final
name|String
name|prefix
init|=
literal|"mn-"
decl_stmt|;
DECL|method|DistributedMap
specifier|public
name|DistributedMap
parameter_list|(
name|SolrZkClient
name|zookeeper
parameter_list|,
name|String
name|dir
parameter_list|)
block|{
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|ZkCmdExecutor
name|cmdExecutor
init|=
operator|new
name|ZkCmdExecutor
argument_list|(
name|zookeeper
operator|.
name|getZkClientTimeout
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|cmdExecutor
operator|.
name|ensureExists
argument_list|(
name|dir
argument_list|,
name|zookeeper
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|zookeeper
operator|=
name|zookeeper
expr_stmt|;
block|}
DECL|method|put
specifier|public
name|void
name|put
parameter_list|(
name|String
name|trackingId
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|zookeeper
operator|.
name|makePath
argument_list|(
name|dir
operator|+
literal|"/"
operator|+
name|prefix
operator|+
name|trackingId
argument_list|,
name|data
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|get
specifier|public
name|byte
index|[]
name|get
parameter_list|(
name|String
name|trackingId
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|zookeeper
operator|.
name|getData
argument_list|(
name|dir
operator|+
literal|"/"
operator|+
name|prefix
operator|+
name|trackingId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|String
name|trackingId
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|zookeeper
operator|.
name|exists
argument_list|(
name|dir
operator|+
literal|"/"
operator|+
name|prefix
operator|+
name|trackingId
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|zookeeper
operator|.
name|getData
argument_list|(
name|dir
argument_list|,
literal|null
argument_list|,
name|stat
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|stat
operator|.
name|getNumChildren
argument_list|()
return|;
block|}
comment|/**    * return true if the znode was successfully deleted    *        false if the node didn't exist and therefore not deleted    *        exception an exception occurred while deleting    */
DECL|method|remove
specifier|public
name|boolean
name|remove
parameter_list|(
name|String
name|trackingId
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
try|try
block|{
name|zookeeper
operator|.
name|delete
argument_list|(
name|dir
operator|+
literal|"/"
operator|+
name|prefix
operator|+
name|trackingId
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Helper method to clear all child nodes for a parent node.    */
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|childNames
init|=
name|zookeeper
operator|.
name|getChildren
argument_list|(
name|dir
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|childName
range|:
name|childNames
control|)
block|{
name|zookeeper
operator|.
name|delete
argument_list|(
name|dir
operator|+
literal|"/"
operator|+
name|childName
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
