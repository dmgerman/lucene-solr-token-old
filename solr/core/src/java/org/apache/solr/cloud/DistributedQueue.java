begin_unit
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * A distributed queue from zk recipes.  */
end_comment
begin_class
DECL|class|DistributedQueue
specifier|public
class|class
name|DistributedQueue
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DistributedQueue
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|String
name|dir
decl_stmt|;
DECL|field|zookeeper
specifier|private
name|SolrZkClient
name|zookeeper
decl_stmt|;
DECL|field|acl
specifier|private
name|List
argument_list|<
name|ACL
argument_list|>
name|acl
init|=
name|ZooDefs
operator|.
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
decl_stmt|;
DECL|field|prefix
specifier|private
specifier|final
name|String
name|prefix
init|=
literal|"qn-"
decl_stmt|;
DECL|method|DistributedQueue
specifier|public
name|DistributedQueue
parameter_list|(
name|SolrZkClient
name|zookeeper
parameter_list|,
name|String
name|dir
parameter_list|,
name|List
argument_list|<
name|ACL
argument_list|>
name|acl
parameter_list|)
block|{
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
if|if
condition|(
name|acl
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|acl
operator|=
name|acl
expr_stmt|;
block|}
name|this
operator|.
name|zookeeper
operator|=
name|zookeeper
expr_stmt|;
block|}
comment|/**    * Returns a Map of the children, ordered by id.    *     * @param watcher    *          optional watcher on getChildren() operation.    * @return map from id to child name for all children    */
DECL|method|orderedChildren
specifier|private
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|orderedChildren
parameter_list|(
name|Watcher
name|watcher
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|orderedChildren
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|childNames
init|=
literal|null
decl_stmt|;
try|try
block|{
name|childNames
operator|=
name|zookeeper
operator|.
name|getChildren
argument_list|(
name|dir
argument_list|,
name|watcher
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
for|for
control|(
name|String
name|childName
range|:
name|childNames
control|)
block|{
try|try
block|{
comment|// Check format
if|if
condition|(
operator|!
name|childName
operator|.
name|regionMatches
argument_list|(
literal|0
argument_list|,
name|prefix
argument_list|,
literal|0
argument_list|,
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found child node with improper name: "
operator|+
name|childName
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|suffix
init|=
name|childName
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|childId
init|=
operator|new
name|Long
argument_list|(
name|suffix
argument_list|)
decl_stmt|;
name|orderedChildren
operator|.
name|put
argument_list|(
name|childId
argument_list|,
name|childName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found child node with improper format : "
operator|+
name|childName
operator|+
literal|" "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|orderedChildren
return|;
block|}
comment|/**    * Return the head of the queue without modifying the queue.    *     * @return the data at the head of the queue.    * @throws NoSuchElementException    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|element
specifier|public
name|byte
index|[]
name|element
parameter_list|()
throws|throws
name|NoSuchElementException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|orderedChildren
decl_stmt|;
comment|// element, take, and remove follow the same pattern.
comment|// We want to return the child node with the smallest sequence number.
comment|// Since other clients are remove()ing and take()ing nodes concurrently,
comment|// the child with the smallest sequence number in orderedChildren might be
comment|// gone by the time we check.
comment|// We don't call getChildren again until we have tried the rest of the nodes
comment|// in sequence order.
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|orderedChildren
operator|=
name|orderedChildren
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
if|if
condition|(
name|orderedChildren
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
for|for
control|(
name|String
name|headNode
range|:
name|orderedChildren
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|headNode
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|zookeeper
operator|.
name|getData
argument_list|(
name|dir
operator|+
literal|"/"
operator|+
name|headNode
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
comment|// Another client removed the node first, try next
block|}
block|}
block|}
block|}
block|}
comment|/**    * Attempts to remove the head of the queue and return it.    *     * @return The former head of the queue    * @throws NoSuchElementException    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|remove
specifier|public
name|byte
index|[]
name|remove
parameter_list|()
throws|throws
name|NoSuchElementException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|orderedChildren
decl_stmt|;
comment|// Same as for element. Should refactor this.
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|orderedChildren
operator|=
name|orderedChildren
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
if|if
condition|(
name|orderedChildren
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
for|for
control|(
name|String
name|headNode
range|:
name|orderedChildren
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|path
init|=
name|dir
operator|+
literal|"/"
operator|+
name|headNode
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|data
init|=
name|zookeeper
operator|.
name|getData
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|zookeeper
operator|.
name|delete
argument_list|(
name|path
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
comment|// Another client deleted the node first.
block|}
block|}
block|}
block|}
DECL|class|LatchChildWatcher
specifier|private
class|class
name|LatchChildWatcher
implements|implements
name|Watcher
block|{
DECL|field|latch
name|CountDownLatch
name|latch
decl_stmt|;
DECL|method|LatchChildWatcher
specifier|public
name|LatchChildWatcher
parameter_list|()
block|{
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Watcher fired on path: "
operator|+
name|event
operator|.
name|getPath
argument_list|()
operator|+
literal|" state: "
operator|+
name|event
operator|.
name|getState
argument_list|()
operator|+
literal|" type "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
DECL|method|await
specifier|public
name|void
name|await
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Removes the head of the queue and returns it, blocks until it succeeds.    *     * @return The former head of the queue    * @throws NoSuchElementException    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|take
specifier|public
name|byte
index|[]
name|take
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|orderedChildren
decl_stmt|;
comment|// Same as for element. Should refactor this.
while|while
condition|(
literal|true
condition|)
block|{
name|LatchChildWatcher
name|childWatcher
init|=
operator|new
name|LatchChildWatcher
argument_list|()
decl_stmt|;
try|try
block|{
name|orderedChildren
operator|=
name|orderedChildren
argument_list|(
name|childWatcher
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
name|zookeeper
operator|.
name|create
argument_list|(
name|dir
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|acl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|orderedChildren
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|childWatcher
operator|.
name|await
argument_list|()
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|String
name|headNode
range|:
name|orderedChildren
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|path
init|=
name|dir
operator|+
literal|"/"
operator|+
name|headNode
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|data
init|=
name|zookeeper
operator|.
name|getData
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|zookeeper
operator|.
name|delete
argument_list|(
name|path
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
comment|// Another client deleted the node first.
block|}
block|}
block|}
block|}
comment|/**    * Inserts data into queue.    *     * @param data    * @return true if data was successfully added    */
DECL|method|offer
specifier|public
name|boolean
name|offer
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
name|zookeeper
operator|.
name|create
argument_list|(
name|dir
operator|+
literal|"/"
operator|+
name|prefix
argument_list|,
name|data
argument_list|,
name|acl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT_SEQUENTIAL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
try|try
block|{
name|zookeeper
operator|.
name|create
argument_list|(
name|dir
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|acl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NodeExistsException
name|ne
parameter_list|)
block|{
comment|//someone created it
block|}
block|}
block|}
block|}
comment|/**    * Returns the data at the first element of the queue, or null if the queue is    * empty.    *     * @return data at the first element of the queue, or null.    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|peek
specifier|public
name|byte
index|[]
name|peek
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
try|try
block|{
return|return
name|element
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Returns the data at the first element of the queue, or null if the queue is    * empty.    *     * @return data at the first element of the queue, or null.    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|peek
specifier|public
name|byte
index|[]
name|peek
parameter_list|(
name|boolean
name|block
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|block
condition|)
block|{
return|return
name|peek
argument_list|()
return|;
block|}
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|orderedChildren
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|LatchChildWatcher
name|childWatcher
init|=
operator|new
name|LatchChildWatcher
argument_list|()
decl_stmt|;
try|try
block|{
name|orderedChildren
operator|=
name|orderedChildren
argument_list|(
name|childWatcher
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
name|zookeeper
operator|.
name|create
argument_list|(
name|dir
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|acl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|orderedChildren
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|childWatcher
operator|.
name|await
argument_list|()
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|String
name|headNode
range|:
name|orderedChildren
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|path
init|=
name|dir
operator|+
literal|"/"
operator|+
name|headNode
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|data
init|=
name|zookeeper
operator|.
name|getData
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|data
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
comment|// Another client deleted the node first.
block|}
block|}
block|}
block|}
comment|/**    * Attempts to remove the head of the queue and return it. Returns null if the    * queue is empty.    *     * @return Head of the queue or null.    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|poll
specifier|public
name|byte
index|[]
name|poll
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
try|try
block|{
return|return
name|remove
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class
end_unit
