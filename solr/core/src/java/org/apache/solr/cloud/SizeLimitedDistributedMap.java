begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * A size limited distributed map maintained in zk.  * Oldest znodes (as per modification time) are evicted as newer ones come in.   */
end_comment
begin_class
DECL|class|SizeLimitedDistributedMap
specifier|public
class|class
name|SizeLimitedDistributedMap
extends|extends
name|DistributedMap
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DistributedMap
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|maxSize
specifier|private
specifier|final
name|int
name|maxSize
decl_stmt|;
DECL|method|SizeLimitedDistributedMap
specifier|public
name|SizeLimitedDistributedMap
parameter_list|(
name|SolrZkClient
name|zookeeper
parameter_list|,
name|String
name|dir
parameter_list|,
name|List
argument_list|<
name|ACL
argument_list|>
name|acl
parameter_list|,
name|int
name|maxSize
parameter_list|)
block|{
name|super
argument_list|(
name|zookeeper
argument_list|,
name|dir
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxSize
operator|=
name|maxSize
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|put
specifier|public
name|boolean
name|put
parameter_list|(
name|String
name|trackingId
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|this
operator|.
name|size
argument_list|()
operator|>=
name|maxSize
condition|)
block|{
comment|// Bring down the size
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|zookeeper
operator|.
name|getChildren
argument_list|(
name|dir
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|cleanupSize
init|=
name|maxSize
operator|/
literal|10
decl_stmt|;
specifier|final
name|PriorityQueue
name|priorityQueue
init|=
operator|new
name|PriorityQueue
argument_list|<
name|Long
argument_list|>
argument_list|(
name|cleanupSize
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|lessThan
parameter_list|(
name|Long
name|a
parameter_list|,
name|Long
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|>
name|b
operator|)
return|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|Stat
name|stat
init|=
name|zookeeper
operator|.
name|exists
argument_list|(
name|dir
operator|+
literal|"/"
operator|+
name|child
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|priorityQueue
operator|.
name|insertWithOverflow
argument_list|(
name|stat
operator|.
name|getMzxid
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|topElementMzxId
init|=
operator|(
name|Long
operator|)
name|priorityQueue
operator|.
name|top
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|Stat
name|stat
init|=
name|zookeeper
operator|.
name|exists
argument_list|(
name|dir
operator|+
literal|"/"
operator|+
name|child
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|.
name|getMzxid
argument_list|()
operator|<=
name|topElementMzxId
condition|)
name|zookeeper
operator|.
name|delete
argument_list|(
name|dir
operator|+
literal|"/"
operator|+
name|child
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|createData
argument_list|(
name|dir
operator|+
literal|"/"
operator|+
name|prefix
operator|+
name|trackingId
argument_list|,
name|data
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
end_class
end_unit
