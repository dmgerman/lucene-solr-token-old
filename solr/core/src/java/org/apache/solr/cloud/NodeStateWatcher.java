begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|CoreState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * Watcher for node state changes.  */
end_comment
begin_class
DECL|class|NodeStateWatcher
specifier|public
class|class
name|NodeStateWatcher
implements|implements
name|Watcher
block|{
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NodeStateWatcher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|interface|NodeStateChangeListener
specifier|public
specifier|static
interface|interface
name|NodeStateChangeListener
block|{
DECL|method|coreChanged
name|void
name|coreChanged
parameter_list|(
name|String
name|nodeName
parameter_list|,
name|Set
argument_list|<
name|CoreState
argument_list|>
name|states
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
function_decl|;
block|}
DECL|field|zkClient
specifier|private
specifier|final
name|SolrZkClient
name|zkClient
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|currentState
specifier|private
specifier|volatile
name|Set
argument_list|<
name|CoreState
argument_list|>
name|currentState
init|=
operator|new
name|HashSet
argument_list|<
name|CoreState
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|listener
specifier|private
specifier|final
name|NodeStateChangeListener
name|listener
decl_stmt|;
DECL|field|nodeName
specifier|private
specifier|final
name|String
name|nodeName
decl_stmt|;
DECL|method|getCurrentState
specifier|public
name|Set
argument_list|<
name|CoreState
argument_list|>
name|getCurrentState
parameter_list|()
block|{
return|return
name|currentState
return|;
block|}
DECL|method|NodeStateWatcher
specifier|public
name|NodeStateWatcher
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|String
name|nodeName
parameter_list|,
name|String
name|path
parameter_list|,
name|NodeStateChangeListener
name|listener
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|nodeName
operator|=
name|nodeName
expr_stmt|;
name|this
operator|.
name|zkClient
operator|=
name|zkClient
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|processStateChange
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|processStateChange
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error processing state change"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processStateChange
specifier|private
name|void
name|processStateChange
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|byte
index|[]
name|data
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|path
argument_list|,
name|this
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|CoreState
index|[]
name|states
init|=
name|CoreState
operator|.
name|load
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CoreState
argument_list|>
name|stateList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|states
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|CoreState
argument_list|>
name|modifiedCores
init|=
operator|new
name|HashSet
argument_list|<
name|CoreState
argument_list|>
argument_list|()
decl_stmt|;
name|modifiedCores
operator|.
name|addAll
argument_list|(
name|stateList
argument_list|)
expr_stmt|;
name|modifiedCores
operator|.
name|removeAll
argument_list|(
name|currentState
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|CoreState
argument_list|>
name|newState
init|=
operator|new
name|HashSet
argument_list|<
name|CoreState
argument_list|>
argument_list|()
decl_stmt|;
name|newState
operator|.
name|addAll
argument_list|(
name|stateList
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|CoreState
argument_list|>
name|lookup
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CoreState
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CoreState
name|state
range|:
name|states
control|)
block|{
name|lookup
operator|.
name|put
argument_list|(
name|state
operator|.
name|getCoreName
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
comment|//check for status change
for|for
control|(
name|CoreState
name|state
range|:
name|currentState
control|)
block|{
if|if
condition|(
name|lookup
operator|.
name|containsKey
argument_list|(
name|state
operator|.
name|getCoreName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|state
operator|.
name|getProperties
argument_list|()
operator|.
name|equals
argument_list|(
name|lookup
operator|.
name|get
argument_list|(
name|state
operator|.
name|getCoreName
argument_list|()
argument_list|)
operator|.
name|getProperties
argument_list|()
argument_list|)
condition|)
block|{
name|modifiedCores
operator|.
name|add
argument_list|(
name|lookup
operator|.
name|get
argument_list|(
name|state
operator|.
name|getCoreName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|currentState
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|newState
argument_list|)
expr_stmt|;
if|if
condition|(
name|modifiedCores
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|listener
operator|.
name|coreChanged
argument_list|(
name|nodeName
argument_list|,
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|modifiedCores
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not talk to ZK"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Could not talk to ZK"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// ignore null state
block|}
block|}
block|}
end_class
end_unit
