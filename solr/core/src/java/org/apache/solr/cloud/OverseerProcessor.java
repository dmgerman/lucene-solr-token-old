begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionQueue
operator|.
name|QueueEvent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|Overseer
operator|.
name|LeaderStatus
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ExecutorUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandlerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DefaultSolrThreadFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|stats
operator|.
name|TimerContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonAdminParams
operator|.
name|ASYNC
import|;
end_import
begin_comment
comment|/**  * A generic processor run in the Overseer, used for handling items added  * to a distributed work queue.  Has support for handling exclusive tasks  * (i.e. tasks that should not run in parallel with each other).  *  * An {@link OverseerMessageHandlerSelector} determines which  * {@link OverseerMessageHandler} handles specific messages in the  * queue.  */
end_comment
begin_class
DECL|class|OverseerProcessor
specifier|public
class|class
name|OverseerProcessor
implements|implements
name|Runnable
implements|,
name|Closeable
block|{
DECL|field|maxParallelThreads
specifier|public
name|int
name|maxParallelThreads
init|=
literal|10
decl_stmt|;
DECL|field|tpe
specifier|public
name|ExecutorService
name|tpe
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OverseerProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|workQueue
specifier|private
name|OverseerCollectionQueue
name|workQueue
decl_stmt|;
DECL|field|runningMap
specifier|private
name|DistributedMap
name|runningMap
decl_stmt|;
DECL|field|completedMap
specifier|private
name|DistributedMap
name|completedMap
decl_stmt|;
DECL|field|failureMap
specifier|private
name|DistributedMap
name|failureMap
decl_stmt|;
comment|// Set that maintains a list of all the tasks that are running. This is keyed on zk id of the task.
DECL|field|runningTasks
specifier|final
specifier|private
name|Set
name|runningTasks
decl_stmt|;
comment|// List of completed tasks. This is used to clean up workQueue in zk.
DECL|field|completedTasks
specifier|final
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|QueueEvent
argument_list|>
name|completedTasks
decl_stmt|;
DECL|field|myId
specifier|private
name|String
name|myId
decl_stmt|;
DECL|field|shardHandlerFactory
specifier|private
specifier|final
name|ShardHandlerFactory
name|shardHandlerFactory
decl_stmt|;
DECL|field|adminPath
specifier|private
name|String
name|adminPath
decl_stmt|;
DECL|field|zkStateReader
specifier|private
name|ZkStateReader
name|zkStateReader
decl_stmt|;
DECL|field|isClosed
specifier|private
name|boolean
name|isClosed
decl_stmt|;
DECL|field|stats
specifier|private
name|Overseer
operator|.
name|Stats
name|stats
decl_stmt|;
comment|// Set of tasks that have been picked up for processing but not cleaned up from zk work-queue.
comment|// It may contain tasks that have completed execution, have been entered into the completed/failed map in zk but not
comment|// deleted from the work-queue as that is a batched operation.
DECL|field|runningZKTasks
specifier|final
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|runningZKTasks
decl_stmt|;
DECL|field|waitLock
specifier|private
specifier|final
name|Object
name|waitLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|selector
specifier|private
name|OverseerMessageHandlerSelector
name|selector
decl_stmt|;
DECL|field|prioritizer
specifier|private
name|OverseerNodePrioritizer
name|prioritizer
decl_stmt|;
DECL|method|OverseerProcessor
specifier|public
name|OverseerProcessor
parameter_list|(
name|ZkStateReader
name|zkStateReader
parameter_list|,
name|String
name|myId
parameter_list|,
specifier|final
name|ShardHandlerFactory
name|shardHandlerFactory
parameter_list|,
name|String
name|adminPath
parameter_list|,
name|Overseer
operator|.
name|Stats
name|stats
parameter_list|,
name|OverseerMessageHandlerSelector
name|selector
parameter_list|,
name|OverseerNodePrioritizer
name|prioritizer
parameter_list|,
name|OverseerCollectionQueue
name|workQueue
parameter_list|,
name|DistributedMap
name|runningMap
parameter_list|,
name|DistributedMap
name|completedMap
parameter_list|,
name|DistributedMap
name|failureMap
parameter_list|)
block|{
name|this
operator|.
name|zkStateReader
operator|=
name|zkStateReader
expr_stmt|;
name|this
operator|.
name|myId
operator|=
name|myId
expr_stmt|;
name|this
operator|.
name|shardHandlerFactory
operator|=
name|shardHandlerFactory
expr_stmt|;
name|this
operator|.
name|adminPath
operator|=
name|adminPath
expr_stmt|;
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
name|this
operator|.
name|selector
operator|=
name|selector
expr_stmt|;
name|this
operator|.
name|prioritizer
operator|=
name|prioritizer
expr_stmt|;
name|this
operator|.
name|workQueue
operator|=
name|workQueue
expr_stmt|;
name|this
operator|.
name|runningMap
operator|=
name|runningMap
expr_stmt|;
name|this
operator|.
name|completedMap
operator|=
name|completedMap
expr_stmt|;
name|this
operator|.
name|failureMap
operator|=
name|failureMap
expr_stmt|;
name|this
operator|.
name|runningZKTasks
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|runningTasks
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|this
operator|.
name|completedTasks
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Process current queue of overseer operations"
argument_list|)
expr_stmt|;
name|LeaderStatus
name|isLeader
init|=
name|amILeader
argument_list|()
decl_stmt|;
while|while
condition|(
name|isLeader
operator|==
name|LeaderStatus
operator|.
name|DONT_KNOW
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"am_i_leader unclear {}"
argument_list|,
name|isLeader
argument_list|)
expr_stmt|;
name|isLeader
operator|=
name|amILeader
argument_list|()
expr_stmt|;
comment|// not a no, not a yes, try ask again
block|}
name|String
name|oldestItemInWorkQueue
init|=
literal|null
decl_stmt|;
comment|// hasLeftOverItems - used for avoiding re-execution of async tasks that were processed by a previous Overseer.
comment|// This variable is set in case there's any task found on the workQueue when the OCP starts up and
comment|// the id for the queue tail is used as a marker to check for the task in completed/failed map in zk.
comment|// Beyond the marker, all tasks can safely be assumed to have never been executed.
name|boolean
name|hasLeftOverItems
init|=
literal|true
decl_stmt|;
try|try
block|{
name|oldestItemInWorkQueue
operator|=
name|workQueue
operator|.
name|getTailId
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
comment|// We don't need to handle this. This is just a fail-safe which comes in handy in skipping already processed
comment|// async calls.
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|oldestItemInWorkQueue
operator|==
literal|null
condition|)
name|hasLeftOverItems
operator|=
literal|false
expr_stmt|;
else|else
name|log
operator|.
name|debug
argument_list|(
literal|"Found already existing elements in the work-queue. Last element: {}"
argument_list|,
name|oldestItemInWorkQueue
argument_list|)
expr_stmt|;
try|try
block|{
name|prioritizer
operator|.
name|prioritizeOverseerNodes
argument_list|(
name|myId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to prioritize overseer "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Make maxThreads configurable.
name|this
operator|.
name|tpe
operator|=
operator|new
name|ExecutorUtil
operator|.
name|MDCAwareThreadPoolExecutor
argument_list|(
literal|5
argument_list|,
literal|100
argument_list|,
literal|0L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|DefaultSolrThreadFactory
argument_list|(
literal|"OverseerThreadFactory"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|this
operator|.
name|isClosed
condition|)
block|{
try|try
block|{
name|isLeader
operator|=
name|amILeader
argument_list|()
expr_stmt|;
if|if
condition|(
name|LeaderStatus
operator|.
name|NO
operator|==
name|isLeader
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|LeaderStatus
operator|.
name|YES
operator|!=
name|isLeader
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"am_i_leader unclear {}"
argument_list|,
name|isLeader
argument_list|)
expr_stmt|;
continue|continue;
comment|// not a no, not a yes, try asking again
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Cleaning up work-queue. #Running tasks: {}"
argument_list|,
name|runningTasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cleanUpWorkQueue
argument_list|()
expr_stmt|;
name|printTrackingMaps
argument_list|()
expr_stmt|;
name|boolean
name|waited
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|runningTasks
operator|.
name|size
argument_list|()
operator|>
name|maxParallelThreads
condition|)
block|{
synchronized|synchronized
init|(
name|waitLock
init|)
block|{
name|waitLock
operator|.
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|//wait for 100 ms or till a task is complete
block|}
name|waited
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|waited
condition|)
name|cleanUpWorkQueue
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|QueueEvent
argument_list|>
name|heads
init|=
name|workQueue
operator|.
name|peekTopN
argument_list|(
name|maxParallelThreads
argument_list|,
name|runningZKTasks
argument_list|,
literal|2000L
argument_list|)
decl_stmt|;
if|if
condition|(
name|heads
operator|==
literal|null
condition|)
continue|continue;
name|log
operator|.
name|debug
argument_list|(
literal|"Got {} tasks from work-queue : [{}]"
argument_list|,
name|heads
operator|.
name|size
argument_list|()
argument_list|,
name|heads
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isClosed
condition|)
break|break;
for|for
control|(
name|QueueEvent
name|head
range|:
name|heads
control|)
block|{
specifier|final
name|ZkNodeProps
name|message
init|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|head
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|OverseerMessageHandler
name|messageHandler
init|=
name|selector
operator|.
name|selectOverseerMessageHandler
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|String
name|taskKey
init|=
name|messageHandler
operator|.
name|getTaskKey
argument_list|(
name|message
argument_list|)
decl_stmt|;
specifier|final
name|String
name|asyncId
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ASYNC
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasLeftOverItems
condition|)
block|{
if|if
condition|(
name|head
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|oldestItemInWorkQueue
argument_list|)
condition|)
name|hasLeftOverItems
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|asyncId
operator|!=
literal|null
operator|&&
operator|(
name|completedMap
operator|.
name|contains
argument_list|(
name|asyncId
argument_list|)
operator|||
name|failureMap
operator|.
name|contains
argument_list|(
name|asyncId
argument_list|)
operator|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Found already processed task in workQueue, cleaning up. AsyncId [{}]"
argument_list|,
name|asyncId
argument_list|)
expr_stmt|;
name|workQueue
operator|.
name|remove
argument_list|(
name|head
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
operator|!
name|checkExclusivity
argument_list|(
name|messageHandler
argument_list|,
name|message
argument_list|,
name|head
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Exclusivity check failed for [{}]"
argument_list|,
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
try|try
block|{
name|markTaskAsRunning
argument_list|(
name|messageHandler
argument_list|,
name|head
argument_list|,
name|taskKey
argument_list|,
name|asyncId
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Marked task [{}] as running"
argument_list|,
name|head
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NodeExistsException
name|e
parameter_list|)
block|{
comment|// This should never happen
name|log
operator|.
name|error
argument_list|(
literal|"Tried to pick up task [{}] when it was already running!"
argument_list|,
name|head
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Thread interrupted while trying to pick task for execution."
argument_list|,
name|head
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
name|messageHandler
operator|.
name|getName
argument_list|()
operator|+
literal|": Get the message id:"
operator|+
name|head
operator|.
name|getId
argument_list|()
operator|+
literal|" message:"
operator|+
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|operation
init|=
name|message
operator|.
name|getStr
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|)
decl_stmt|;
name|Runner
name|runner
init|=
operator|new
name|Runner
argument_list|(
name|messageHandler
argument_list|,
name|message
argument_list|,
name|operation
argument_list|,
name|head
argument_list|)
decl_stmt|;
name|tpe
operator|.
name|execute
argument_list|(
name|runner
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|SESSIONEXPIRED
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Overseer cannot talk to ZK"
argument_list|)
expr_stmt|;
return|return;
block|}
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkExclusivity
specifier|protected
name|boolean
name|checkExclusivity
parameter_list|(
name|OverseerMessageHandler
name|messageHandler
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|taskKey
init|=
name|messageHandler
operator|.
name|getTaskKey
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskKey
operator|==
literal|null
condition|)
return|return
literal|true
return|;
name|OverseerMessageHandler
operator|.
name|ExclusiveMarking
name|marking
init|=
name|messageHandler
operator|.
name|checkExclusiveMarking
argument_list|(
name|taskKey
argument_list|,
name|message
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|marking
condition|)
block|{
case|case
name|NOTDETERMINED
case|:
break|break;
case|case
name|EXCLUSIVE
case|:
return|return
literal|true
return|;
case|case
name|NONEXCLUSIVE
case|:
return|return
literal|false
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Undefined marking: "
operator|+
name|marking
argument_list|)
throw|;
block|}
if|if
condition|(
name|runningZKTasks
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
DECL|method|cleanUpWorkQueue
specifier|private
name|void
name|cleanUpWorkQueue
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|completedTasks
init|)
block|{
for|for
control|(
name|String
name|id
range|:
name|completedTasks
operator|.
name|keySet
argument_list|()
control|)
block|{
name|workQueue
operator|.
name|remove
argument_list|(
name|completedTasks
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|runningZKTasks
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|completedTasks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|isClosed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|tpe
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|tpe
operator|.
name|isShutdown
argument_list|()
condition|)
block|{
name|ExecutorUtil
operator|.
name|shutdownAndAwaitTermination
argument_list|(
name|tpe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getSortedOverseerNodeNames
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getSortedOverseerNodeNames
parameter_list|(
name|SolrZkClient
name|zk
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
literal|null
decl_stmt|;
try|try
block|{
name|children
operator|=
name|zk
operator|.
name|getChildren
argument_list|(
name|OverseerElectionContext
operator|.
name|PATH
operator|+
name|LeaderElector
operator|.
name|ELECTION_NODE
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
name|LeaderElector
operator|.
name|sortSeqs
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|nodeNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|children
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
name|children
control|)
name|nodeNames
operator|.
name|add
argument_list|(
name|LeaderElector
operator|.
name|getNodeName
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|nodeNames
return|;
block|}
DECL|method|getSortedElectionNodes
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getSortedElectionNodes
parameter_list|(
name|SolrZkClient
name|zk
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
literal|null
decl_stmt|;
try|try
block|{
name|children
operator|=
name|zk
operator|.
name|getChildren
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LeaderElector
operator|.
name|sortSeqs
argument_list|(
name|children
argument_list|)
expr_stmt|;
return|return
name|children
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|getLeaderNode
specifier|public
specifier|static
name|String
name|getLeaderNode
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|id
init|=
name|getLeaderId
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
return|return
name|id
operator|==
literal|null
condition|?
literal|null
else|:
name|LeaderElector
operator|.
name|getNodeName
argument_list|(
name|id
argument_list|)
return|;
block|}
DECL|method|getLeaderId
specifier|public
specifier|static
name|String
name|getLeaderId
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
try|try
block|{
name|data
operator|=
name|zkClient
operator|.
name|getData
argument_list|(
literal|"/overseer_elect/leader"
argument_list|,
literal|null
argument_list|,
operator|new
name|Stat
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
name|Map
name|m
init|=
operator|(
name|Map
operator|)
name|Utils
operator|.
name|fromJSON
argument_list|(
name|data
argument_list|)
decl_stmt|;
return|return
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
return|;
block|}
DECL|method|amILeader
specifier|protected
name|LeaderStatus
name|amILeader
parameter_list|()
block|{
name|String
name|statsName
init|=
literal|"collection_am_i_leader"
decl_stmt|;
name|TimerContext
name|timerContext
init|=
name|stats
operator|.
name|time
argument_list|(
name|statsName
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|true
decl_stmt|;
try|try
block|{
name|ZkNodeProps
name|props
init|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|getData
argument_list|(
literal|"/overseer_elect/leader"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|myId
operator|.
name|equals
argument_list|(
name|props
operator|.
name|getStr
argument_list|(
literal|"id"
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|LeaderStatus
operator|.
name|YES
return|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|CONNECTIONLOSS
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|LeaderStatus
operator|.
name|DONT_KNOW
return|;
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|SESSIONEXPIRED
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|timerContext
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|stats
operator|.
name|success
argument_list|(
name|statsName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stats
operator|.
name|error
argument_list|(
name|statsName
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"According to ZK I (id="
operator|+
name|myId
operator|+
literal|") am no longer a leader."
argument_list|)
expr_stmt|;
return|return
name|LeaderStatus
operator|.
name|NO
return|;
block|}
DECL|method|isClosed
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|isClosed
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|markTaskAsRunning
specifier|private
name|void
name|markTaskAsRunning
parameter_list|(
name|OverseerMessageHandler
name|messageHandler
parameter_list|,
name|QueueEvent
name|head
parameter_list|,
name|String
name|taskKey
parameter_list|,
name|String
name|asyncId
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|runningZKTasks
init|)
block|{
name|runningZKTasks
operator|.
name|add
argument_list|(
name|head
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|runningTasks
init|)
block|{
name|runningTasks
operator|.
name|add
argument_list|(
name|head
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|messageHandler
operator|.
name|markExclusiveTask
argument_list|(
name|taskKey
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|asyncId
operator|!=
literal|null
condition|)
name|runningMap
operator|.
name|put
argument_list|(
name|asyncId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|class|Runner
specifier|protected
class|class
name|Runner
implements|implements
name|Runnable
block|{
DECL|field|message
name|ZkNodeProps
name|message
decl_stmt|;
DECL|field|operation
name|String
name|operation
decl_stmt|;
DECL|field|response
name|SolrResponse
name|response
decl_stmt|;
DECL|field|head
name|QueueEvent
name|head
decl_stmt|;
DECL|field|messageHandler
name|OverseerMessageHandler
name|messageHandler
decl_stmt|;
DECL|method|Runner
specifier|public
name|Runner
parameter_list|(
name|OverseerMessageHandler
name|messageHandler
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|String
name|operation
parameter_list|,
name|QueueEvent
name|head
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
name|this
operator|.
name|head
operator|=
name|head
expr_stmt|;
name|this
operator|.
name|messageHandler
operator|=
name|messageHandler
expr_stmt|;
name|response
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|String
name|statsName
init|=
name|messageHandler
operator|.
name|getTimerName
argument_list|(
name|operation
argument_list|)
decl_stmt|;
specifier|final
name|TimerContext
name|timerContext
init|=
name|stats
operator|.
name|time
argument_list|(
name|statsName
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|final
name|String
name|asyncId
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ASYNC
argument_list|)
decl_stmt|;
name|String
name|taskKey
init|=
name|messageHandler
operator|.
name|getTaskKey
argument_list|(
name|message
argument_list|)
decl_stmt|;
try|try
block|{
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Runner processing {}"
argument_list|,
name|head
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|messageHandler
operator|.
name|processMessage
argument_list|(
name|message
argument_list|,
name|operation
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|timerContext
operator|.
name|stop
argument_list|()
expr_stmt|;
name|updateStats
argument_list|(
name|statsName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|asyncId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|response
operator|!=
literal|null
operator|&&
operator|(
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
operator|!=
literal|null
operator|||
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"exception"
argument_list|)
operator|!=
literal|null
operator|)
condition|)
block|{
name|failureMap
operator|.
name|put
argument_list|(
name|asyncId
argument_list|,
name|SolrResponse
operator|.
name|serializable
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Updated failed map for task with zkid:[{}]"
argument_list|,
name|head
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|completedMap
operator|.
name|put
argument_list|(
name|asyncId
argument_list|,
name|SolrResponse
operator|.
name|serializable
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Updated completed map for task with zkid:[{}]"
argument_list|,
name|head
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|head
operator|.
name|setBytes
argument_list|(
name|SolrResponse
operator|.
name|serializable
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Completed task:[{}]"
argument_list|,
name|head
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|markTaskComplete
argument_list|(
name|messageHandler
argument_list|,
name|head
operator|.
name|getId
argument_list|()
argument_list|,
name|asyncId
argument_list|,
name|taskKey
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Marked task [{}] as completed."
argument_list|,
name|head
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|printTrackingMaps
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|messageHandler
operator|.
name|getName
argument_list|()
operator|+
literal|": Message id:"
operator|+
name|head
operator|.
name|getId
argument_list|()
operator|+
literal|" complete, response:"
operator|+
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Reset task from tracking data structures so that it can be retried.
name|resetTaskWithException
argument_list|(
name|messageHandler
argument_list|,
name|head
operator|.
name|getId
argument_list|()
argument_list|,
name|asyncId
argument_list|,
name|taskKey
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Resetting task {} as the thread was interrupted."
argument_list|,
name|head
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
comment|// Reset task from tracking data structures so that it can be retried.
name|resetTaskWithException
argument_list|(
name|messageHandler
argument_list|,
name|head
operator|.
name|getId
argument_list|()
argument_list|,
name|asyncId
argument_list|,
name|taskKey
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|waitLock
init|)
block|{
name|waitLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|markTaskComplete
specifier|private
name|void
name|markTaskComplete
parameter_list|(
name|OverseerMessageHandler
name|messageHandler
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|asyncId
parameter_list|,
name|String
name|taskKey
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|completedTasks
init|)
block|{
name|completedTasks
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|head
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|runningTasks
init|)
block|{
name|runningTasks
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|asyncId
operator|!=
literal|null
condition|)
name|runningMap
operator|.
name|remove
argument_list|(
name|asyncId
argument_list|)
expr_stmt|;
name|messageHandler
operator|.
name|unmarkExclusiveTask
argument_list|(
name|taskKey
argument_list|,
name|operation
argument_list|)
expr_stmt|;
block|}
DECL|method|resetTaskWithException
specifier|private
name|void
name|resetTaskWithException
parameter_list|(
name|OverseerMessageHandler
name|messageHandler
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|asyncId
parameter_list|,
name|String
name|taskKey
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Resetting task: {}, requestid: {}, taskKey: {}"
argument_list|,
name|id
argument_list|,
name|asyncId
argument_list|,
name|taskKey
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|asyncId
operator|!=
literal|null
condition|)
name|runningMap
operator|.
name|remove
argument_list|(
name|asyncId
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|runningTasks
init|)
block|{
name|runningTasks
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|messageHandler
operator|.
name|unmarkExclusiveTask
argument_list|(
name|taskKey
argument_list|,
name|operation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|updateStats
specifier|private
name|void
name|updateStats
parameter_list|(
name|String
name|statsName
parameter_list|)
block|{
if|if
condition|(
name|isSuccessful
argument_list|()
condition|)
block|{
name|stats
operator|.
name|success
argument_list|(
name|statsName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stats
operator|.
name|error
argument_list|(
name|statsName
argument_list|)
expr_stmt|;
name|stats
operator|.
name|storeFailureDetails
argument_list|(
name|statsName
argument_list|,
name|message
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isSuccessful
specifier|private
name|boolean
name|isSuccessful
parameter_list|()
block|{
if|if
condition|(
name|response
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
operator|!
operator|(
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
operator|!=
literal|null
operator|||
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"exception"
argument_list|)
operator|!=
literal|null
operator|)
return|;
block|}
block|}
DECL|method|printTrackingMaps
specifier|private
name|void
name|printTrackingMaps
parameter_list|()
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|runningTasks
init|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"RunningTasks: {}"
argument_list|,
name|runningTasks
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|completedTasks
init|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"CompletedTasks: {}"
argument_list|,
name|completedTasks
operator|.
name|keySet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|runningZKTasks
init|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"RunningZKTasks: {}"
argument_list|,
name|runningZKTasks
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getId
name|String
name|getId
parameter_list|()
block|{
return|return
name|myId
return|;
block|}
comment|/**    * An interface to determine which {@link OverseerMessageHandler}    * handles a given message.  This could be a single OverseerMessageHandler    * for the case where a single type of message is handled (e.g. collection    * messages only) , or a different handler could be selected based on the    * contents of the message.    */
DECL|interface|OverseerMessageHandlerSelector
specifier|public
interface|interface
name|OverseerMessageHandlerSelector
block|{
DECL|method|selectOverseerMessageHandler
name|OverseerMessageHandler
name|selectOverseerMessageHandler
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|)
function_decl|;
block|}
block|}
end_class
end_unit
