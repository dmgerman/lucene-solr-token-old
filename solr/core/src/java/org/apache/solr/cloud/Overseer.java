begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClosableThread
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZooKeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * Cluster leader. Responsible node assignments, cluster state file?  */
end_comment
begin_class
DECL|class|Overseer
specifier|public
class|class
name|Overseer
block|{
DECL|field|QUEUE_OPERATION
specifier|public
specifier|static
specifier|final
name|String
name|QUEUE_OPERATION
init|=
literal|"operation"
decl_stmt|;
DECL|field|STATE_UPDATE_DELAY
specifier|private
specifier|static
specifier|final
name|int
name|STATE_UPDATE_DELAY
init|=
literal|500
decl_stmt|;
comment|// delay between cloud state updates
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Overseer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|ClusterStateUpdater
specifier|private
class|class
name|ClusterStateUpdater
implements|implements
name|Runnable
implements|,
name|ClosableThread
block|{
DECL|field|DELETECORE
specifier|private
specifier|static
specifier|final
name|String
name|DELETECORE
init|=
literal|"deletecore"
decl_stmt|;
DECL|field|reader
specifier|private
specifier|final
name|ZkStateReader
name|reader
decl_stmt|;
DECL|field|zkClient
specifier|private
specifier|final
name|SolrZkClient
name|zkClient
decl_stmt|;
DECL|field|myId
specifier|private
specifier|final
name|String
name|myId
decl_stmt|;
comment|//queue where everybody can throw tasks
DECL|field|stateUpdateQueue
specifier|private
specifier|final
name|DistributedQueue
name|stateUpdateQueue
decl_stmt|;
comment|//Internal queue where overseer stores events that have not yet been published into cloudstate
comment|//If Overseer dies while extracting the main queue a new overseer will start from this queue
DECL|field|workQueue
specifier|private
specifier|final
name|DistributedQueue
name|workQueue
decl_stmt|;
DECL|field|isClosed
specifier|private
specifier|volatile
name|boolean
name|isClosed
decl_stmt|;
DECL|method|ClusterStateUpdater
specifier|public
name|ClusterStateUpdater
parameter_list|(
specifier|final
name|ZkStateReader
name|reader
parameter_list|,
specifier|final
name|String
name|myId
parameter_list|)
block|{
name|this
operator|.
name|zkClient
operator|=
name|reader
operator|.
name|getZkClient
argument_list|()
expr_stmt|;
name|this
operator|.
name|stateUpdateQueue
operator|=
name|getInQueue
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|this
operator|.
name|workQueue
operator|=
name|getInternalQueue
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|this
operator|.
name|myId
operator|=
name|myId
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isClosed
operator|&&
name|amILeader
argument_list|()
condition|)
block|{
comment|// see if there's something left from the previous Overseer and re
comment|// process all events that were not persisted into cloud state
synchronized|synchronized
init|(
name|reader
operator|.
name|getUpdateLock
argument_list|()
init|)
block|{
comment|//XXX this only protects against edits inside single node
try|try
block|{
name|byte
index|[]
name|head
init|=
name|workQueue
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|head
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|updateClusterState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|reader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Replaying operations from work queue."
argument_list|)
expr_stmt|;
while|while
condition|(
name|head
operator|!=
literal|null
operator|&&
name|amILeader
argument_list|()
condition|)
block|{
specifier|final
name|ZkNodeProps
name|message
init|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|head
argument_list|)
decl_stmt|;
specifier|final
name|String
name|operation
init|=
name|message
operator|.
name|getStr
argument_list|(
name|QUEUE_OPERATION
argument_list|)
decl_stmt|;
name|clusterState
operator|=
name|processMessage
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|,
name|operation
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|setData
argument_list|(
name|ZkStateReader
operator|.
name|CLUSTER_STATE
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|clusterState
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|workQueue
operator|.
name|remove
argument_list|()
expr_stmt|;
name|head
operator|=
name|workQueue
operator|.
name|peek
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|SESSIONEXPIRED
operator|||
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|CONNECTIONLOSS
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Solr cannot talk to ZK"
argument_list|)
expr_stmt|;
return|return;
block|}
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Starting to work on the main queue"
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|this
operator|.
name|isClosed
operator|&&
name|amILeader
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|reader
operator|.
name|getUpdateLock
argument_list|()
init|)
block|{
try|try
block|{
name|byte
index|[]
name|head
init|=
name|stateUpdateQueue
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|head
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|updateClusterState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|reader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
while|while
condition|(
name|head
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ZkNodeProps
name|message
init|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|head
argument_list|)
decl_stmt|;
specifier|final
name|String
name|operation
init|=
name|message
operator|.
name|getStr
argument_list|(
name|QUEUE_OPERATION
argument_list|)
decl_stmt|;
name|clusterState
operator|=
name|processMessage
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|,
name|operation
argument_list|)
expr_stmt|;
name|workQueue
operator|.
name|offer
argument_list|(
name|head
argument_list|)
expr_stmt|;
name|stateUpdateQueue
operator|.
name|remove
argument_list|()
expr_stmt|;
name|head
operator|=
name|stateUpdateQueue
operator|.
name|peek
argument_list|()
expr_stmt|;
block|}
name|zkClient
operator|.
name|setData
argument_list|(
name|ZkStateReader
operator|.
name|CLUSTER_STATE
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|clusterState
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// clean work queue
while|while
condition|(
name|workQueue
operator|.
name|poll
argument_list|()
operator|!=
literal|null
condition|)
empty_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|SESSIONEXPIRED
operator|||
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|CONNECTIONLOSS
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Overseer cannot talk to ZK"
argument_list|)
expr_stmt|;
return|return;
block|}
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|STATE_UPDATE_DELAY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|processMessage
specifier|private
name|ClusterState
name|processMessage
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
specifier|final
name|ZkNodeProps
name|message
parameter_list|,
specifier|final
name|String
name|operation
parameter_list|)
block|{
if|if
condition|(
literal|"state"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|clusterState
operator|=
name|updateState
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DELETECORE
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|clusterState
operator|=
name|removeCore
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ZkStateReader
operator|.
name|LEADER_PROP
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|baseUrl
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
decl_stmt|;
name|String
name|coreName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|baseUrl
argument_list|)
expr_stmt|;
if|if
condition|(
name|baseUrl
operator|!=
literal|null
operator|&&
operator|!
name|baseUrl
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|coreName
operator|==
literal|null
condition|?
literal|""
else|:
name|coreName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|sb
operator|.
name|substring
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
operator|)
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|setShardLeader
argument_list|(
name|clusterState
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
argument_list|,
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|sb
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown operation:"
operator|+
name|operation
operator|+
literal|" contents:"
operator|+
name|message
operator|.
name|getProperties
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|clusterState
return|;
block|}
DECL|method|amILeader
specifier|private
name|boolean
name|amILeader
parameter_list|()
block|{
try|try
block|{
name|ZkNodeProps
name|props
init|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|zkClient
operator|.
name|getData
argument_list|(
literal|"/overseer_elect/leader"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|myId
operator|.
name|equals
argument_list|(
name|props
operator|.
name|getStr
argument_list|(
literal|"id"
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"According to ZK I (id="
operator|+
name|myId
operator|+
literal|") am no longer a leader."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**        * Try to assign core to the cluster.         */
DECL|method|updateState
specifier|private
name|ClusterState
name|updateState
parameter_list|(
name|ClusterState
name|state
parameter_list|,
specifier|final
name|ZkNodeProps
name|message
parameter_list|)
block|{
specifier|final
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
specifier|final
name|String
name|zkCoreNodeName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
operator|+
literal|"_"
operator|+
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
specifier|final
name|Integer
name|numShards
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|)
operator|!=
literal|null
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|)
argument_list|)
else|:
literal|null
decl_stmt|;
comment|//collection does not yet exist, create placeholders if num shards is specified
if|if
condition|(
operator|!
name|state
operator|.
name|getCollections
argument_list|()
operator|.
name|contains
argument_list|(
name|collection
argument_list|)
operator|&&
name|numShards
operator|!=
literal|null
condition|)
block|{
name|state
operator|=
name|createCollection
argument_list|(
name|state
argument_list|,
name|collection
argument_list|,
name|numShards
argument_list|)
expr_stmt|;
block|}
comment|// use the provided non null shardId
name|String
name|shardId
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardId
operator|==
literal|null
condition|)
block|{
name|String
name|nodeName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
decl_stmt|;
comment|//get shardId from ClusterState
name|shardId
operator|=
name|getAssignedId
argument_list|(
name|state
argument_list|,
name|nodeName
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shardId
operator|==
literal|null
condition|)
block|{
comment|//request new shardId
name|shardId
operator|=
name|AssignShard
operator|.
name|assignShard
argument_list|(
name|collection
argument_list|,
name|state
argument_list|,
name|numShards
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|coreProps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|message
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|coreProps
operator|.
name|putAll
argument_list|(
name|message
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't put num_shards in the clusterstate
name|coreProps
operator|.
name|remove
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|)
expr_stmt|;
name|coreProps
operator|.
name|remove
argument_list|(
name|QUEUE_OPERATION
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|coreProps
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|props
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Replica
name|zkProps
init|=
operator|new
name|Replica
argument_list|(
name|zkCoreNodeName
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|Slice
name|slice
init|=
name|state
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shardProps
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
name|shardProps
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|shardProps
operator|=
name|state
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|)
operator|.
name|getReplicasCopy
argument_list|()
expr_stmt|;
block|}
name|shardProps
operator|.
name|put
argument_list|(
name|zkCoreNodeName
argument_list|,
name|zkProps
argument_list|)
expr_stmt|;
name|slice
operator|=
operator|new
name|Slice
argument_list|(
name|shardId
argument_list|,
name|shardProps
argument_list|)
expr_stmt|;
name|ClusterState
name|newClusterState
init|=
name|updateSlice
argument_list|(
name|state
argument_list|,
name|collection
argument_list|,
name|slice
argument_list|)
decl_stmt|;
return|return
name|newClusterState
return|;
block|}
DECL|method|createCollection
specifier|private
name|ClusterState
name|createCollection
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|int
name|numShards
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
name|newStates
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|newSlices
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|()
decl_stmt|;
name|newStates
operator|.
name|putAll
argument_list|(
name|state
operator|.
name|getCollectionStates
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numShards
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|sliceName
init|=
literal|"shard"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
decl_stmt|;
name|newSlices
operator|.
name|put
argument_list|(
name|sliceName
argument_list|,
operator|new
name|Slice
argument_list|(
name|sliceName
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newStates
operator|.
name|put
argument_list|(
name|collectionName
argument_list|,
name|newSlices
argument_list|)
expr_stmt|;
name|ClusterState
name|newClusterState
init|=
operator|new
name|ClusterState
argument_list|(
name|state
operator|.
name|getLiveNodes
argument_list|()
argument_list|,
name|newStates
argument_list|)
decl_stmt|;
return|return
name|newClusterState
return|;
block|}
comment|/*        * Return an already assigned id or null if not assigned        */
DECL|method|getAssignedId
specifier|private
name|String
name|getAssignedId
parameter_list|(
specifier|final
name|ClusterState
name|state
parameter_list|,
specifier|final
name|String
name|nodeName
parameter_list|,
specifier|final
name|ZkNodeProps
name|coreState
parameter_list|)
block|{
specifier|final
name|String
name|key
init|=
name|coreState
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
operator|+
literal|"_"
operator|+
name|coreState
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|state
operator|.
name|getSlices
argument_list|(
name|coreState
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|slices
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Slice
name|slice
range|:
name|slices
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|slice
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|slice
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|updateSlice
specifier|private
name|ClusterState
name|updateSlice
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|String
name|collection
parameter_list|,
name|Slice
name|slice
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
name|newStates
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|newStates
operator|.
name|putAll
argument_list|(
name|state
operator|.
name|getCollectionStates
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|newStates
operator|.
name|containsKey
argument_list|(
name|collection
argument_list|)
condition|)
block|{
name|newStates
operator|.
name|put
argument_list|(
name|collection
argument_list|,
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|newStates
operator|.
name|get
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|slices
operator|.
name|containsKey
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|slices
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|slice
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shards
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Slice
name|existingSlice
init|=
name|slices
operator|.
name|get
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|shards
operator|.
name|putAll
argument_list|(
name|existingSlice
operator|.
name|getReplicasMap
argument_list|()
argument_list|)
expr_stmt|;
comment|//XXX preserve existing leader
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|edit
range|:
name|slice
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|existingSlice
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|get
argument_list|(
name|edit
operator|.
name|getKey
argument_list|()
argument_list|)
operator|!=
literal|null
operator|&&
name|existingSlice
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|get
argument_list|(
name|edit
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|containsKey
argument_list|(
name|ZkStateReader
operator|.
name|LEADER_PROP
argument_list|)
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|newProps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|newProps
operator|.
name|putAll
argument_list|(
name|edit
operator|.
name|getValue
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|newProps
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|LEADER_PROP
argument_list|,
name|existingSlice
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|get
argument_list|(
name|edit
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|LEADER_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|shards
operator|.
name|put
argument_list|(
name|edit
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|Replica
argument_list|(
name|edit
operator|.
name|getKey
argument_list|()
argument_list|,
name|newProps
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shards
operator|.
name|put
argument_list|(
name|edit
operator|.
name|getKey
argument_list|()
argument_list|,
name|edit
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Slice
name|updatedSlice
init|=
operator|new
name|Slice
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|shards
argument_list|)
decl_stmt|;
name|slices
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|updatedSlice
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ClusterState
argument_list|(
name|state
operator|.
name|getLiveNodes
argument_list|()
argument_list|,
name|newStates
argument_list|)
return|;
block|}
DECL|method|setShardLeader
specifier|private
name|ClusterState
name|setShardLeader
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|sliceName
parameter_list|,
name|String
name|leaderUrl
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
name|newStates
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|newStates
operator|.
name|putAll
argument_list|(
name|state
operator|.
name|getCollectionStates
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|newStates
operator|.
name|get
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|slices
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not mark shard leader for non existing collection:"
operator|+
name|collection
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
if|if
condition|(
operator|!
name|slices
operator|.
name|containsKey
argument_list|(
name|sliceName
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not mark leader for non existing slice:"
operator|+
name|sliceName
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
else|else
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|newShards
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shard
range|:
name|slices
operator|.
name|get
argument_list|(
name|sliceName
argument_list|)
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|newShardProps
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|newShardProps
operator|.
name|putAll
argument_list|(
name|shard
operator|.
name|getValue
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|newShardProps
operator|.
name|remove
argument_list|(
name|ZkStateReader
operator|.
name|LEADER_PROP
argument_list|)
expr_stmt|;
comment|//clean any previously existed flag
name|ZkCoreNodeProps
name|zkCoreNodeProps
init|=
operator|new
name|ZkCoreNodeProps
argument_list|(
operator|new
name|ZkNodeProps
argument_list|(
name|newShardProps
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|leaderUrl
operator|!=
literal|null
operator|&&
name|leaderUrl
operator|.
name|equals
argument_list|(
name|zkCoreNodeProps
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
condition|)
block|{
name|newShardProps
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|LEADER_PROP
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|newShards
operator|.
name|put
argument_list|(
name|shard
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|Replica
argument_list|(
name|shard
operator|.
name|getKey
argument_list|()
argument_list|,
name|newShardProps
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Slice
name|slice
init|=
operator|new
name|Slice
argument_list|(
name|sliceName
argument_list|,
name|newShards
argument_list|)
decl_stmt|;
name|slices
operator|.
name|put
argument_list|(
name|sliceName
argument_list|,
name|slice
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ClusterState
argument_list|(
name|state
operator|.
name|getLiveNodes
argument_list|()
argument_list|,
name|newStates
argument_list|)
return|;
block|}
comment|/*        * Remove core from cloudstate        */
DECL|method|removeCore
specifier|private
name|ClusterState
name|removeCore
parameter_list|(
specifier|final
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
specifier|final
name|String
name|coreNodeName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
operator|+
literal|"_"
operator|+
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
specifier|final
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
specifier|final
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
name|newStates
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|collectionName
range|:
name|clusterState
operator|.
name|getCollections
argument_list|()
control|)
block|{
if|if
condition|(
name|collection
operator|.
name|equals
argument_list|(
name|collectionName
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|clusterState
operator|.
name|getSlices
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|newSlices
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|slices
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|slice
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|coreNodeName
argument_list|)
condition|)
block|{
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|newShards
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
argument_list|()
decl_stmt|;
name|newShards
operator|.
name|putAll
argument_list|(
name|slice
operator|.
name|getReplicasMap
argument_list|()
argument_list|)
expr_stmt|;
name|newShards
operator|.
name|remove
argument_list|(
name|coreNodeName
argument_list|)
expr_stmt|;
name|Slice
name|newSlice
init|=
operator|new
name|Slice
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|newShards
argument_list|)
decl_stmt|;
name|newSlices
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|newSlice
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newSlices
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|slice
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|newSlices
operator|.
name|values
argument_list|()
control|)
block|{
name|cnt
operator|+=
name|slice
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
comment|// TODO: if no nodes are left after this unload
comment|// remove from zk - do we have a race where Overseer
comment|// see's registered nodes and publishes though?
if|if
condition|(
name|cnt
operator|>
literal|0
condition|)
block|{
name|newStates
operator|.
name|put
argument_list|(
name|collectionName
argument_list|,
name|newSlices
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: it might be better logically to have this in ZkController
comment|// but for tests (it's easier) it seems better for the moment to leave CoreContainer and/or
comment|// ZkController out of the Overseer.
try|try
block|{
name|zkClient
operator|.
name|clean
argument_list|(
literal|"/collections/"
operator|+
name|collectionName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Cleaning up collection in zk was interrupted:"
operator|+
name|collectionName
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Problem cleaning up collection in zk:"
operator|+
name|collectionName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|newStates
operator|.
name|put
argument_list|(
name|collectionName
argument_list|,
name|clusterState
operator|.
name|getSlices
argument_list|(
name|collectionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ClusterState
name|newState
init|=
operator|new
name|ClusterState
argument_list|(
name|clusterState
operator|.
name|getLiveNodes
argument_list|()
argument_list|,
name|newStates
argument_list|)
decl_stmt|;
return|return
name|newState
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|this
operator|.
name|isClosed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isClosed
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|this
operator|.
name|isClosed
return|;
block|}
block|}
DECL|class|OverseerThread
class|class
name|OverseerThread
extends|extends
name|Thread
implements|implements
name|ClosableThread
block|{
DECL|field|isClosed
specifier|private
specifier|volatile
name|boolean
name|isClosed
decl_stmt|;
DECL|method|OverseerThread
specifier|public
name|OverseerThread
parameter_list|(
name|ThreadGroup
name|tg
parameter_list|,
name|ClusterStateUpdater
name|clusterStateUpdater
parameter_list|)
block|{
name|super
argument_list|(
name|tg
argument_list|,
name|clusterStateUpdater
argument_list|)
expr_stmt|;
block|}
DECL|method|OverseerThread
specifier|public
name|OverseerThread
parameter_list|(
name|ThreadGroup
name|ccTg
parameter_list|,
name|OverseerCollectionProcessor
name|overseerCollectionProcessor
parameter_list|,
name|String
name|string
parameter_list|)
block|{
name|super
argument_list|(
name|ccTg
argument_list|,
name|overseerCollectionProcessor
argument_list|,
name|string
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|this
operator|.
name|isClosed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isClosed
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|this
operator|.
name|isClosed
return|;
block|}
block|}
DECL|field|ccThread
specifier|private
name|OverseerThread
name|ccThread
decl_stmt|;
DECL|field|updaterThread
specifier|private
name|OverseerThread
name|updaterThread
decl_stmt|;
DECL|field|isClosed
specifier|private
specifier|volatile
name|boolean
name|isClosed
decl_stmt|;
DECL|field|reader
specifier|private
name|ZkStateReader
name|reader
decl_stmt|;
DECL|field|shardHandler
specifier|private
name|ShardHandler
name|shardHandler
decl_stmt|;
DECL|field|adminPath
specifier|private
name|String
name|adminPath
decl_stmt|;
DECL|method|Overseer
specifier|public
name|Overseer
parameter_list|(
name|ShardHandler
name|shardHandler
parameter_list|,
name|String
name|adminPath
parameter_list|,
specifier|final
name|ZkStateReader
name|reader
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|shardHandler
operator|=
name|shardHandler
expr_stmt|;
name|this
operator|.
name|adminPath
operator|=
name|adminPath
expr_stmt|;
block|}
DECL|method|start
specifier|public
name|void
name|start
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Overseer (id="
operator|+
name|id
operator|+
literal|") starting"
argument_list|)
expr_stmt|;
name|createOverseerNode
argument_list|(
name|reader
operator|.
name|getZkClient
argument_list|()
argument_list|)
expr_stmt|;
comment|//launch cluster state updater thread
name|ThreadGroup
name|tg
init|=
operator|new
name|ThreadGroup
argument_list|(
literal|"Overseer state updater."
argument_list|)
decl_stmt|;
name|updaterThread
operator|=
operator|new
name|OverseerThread
argument_list|(
name|tg
argument_list|,
operator|new
name|ClusterStateUpdater
argument_list|(
name|reader
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|updaterThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ThreadGroup
name|ccTg
init|=
operator|new
name|ThreadGroup
argument_list|(
literal|"Overseer collection creation process."
argument_list|)
decl_stmt|;
name|ccThread
operator|=
operator|new
name|OverseerThread
argument_list|(
name|ccTg
argument_list|,
operator|new
name|OverseerCollectionProcessor
argument_list|(
name|reader
argument_list|,
name|id
argument_list|,
name|shardHandler
argument_list|,
name|adminPath
argument_list|)
argument_list|,
literal|"Overseer-"
operator|+
name|id
argument_list|)
expr_stmt|;
name|ccThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updaterThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|ccThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|isClosed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|updaterThread
operator|!=
literal|null
condition|)
block|{
name|updaterThread
operator|.
name|close
argument_list|()
expr_stmt|;
name|updaterThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ccThread
operator|!=
literal|null
condition|)
block|{
name|ccThread
operator|.
name|close
argument_list|()
expr_stmt|;
name|ccThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get queue that can be used to send messages to Overseer.    */
DECL|method|getInQueue
specifier|public
specifier|static
name|DistributedQueue
name|getInQueue
parameter_list|(
specifier|final
name|SolrZkClient
name|zkClient
parameter_list|)
block|{
name|createOverseerNode
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
return|return
operator|new
name|DistributedQueue
argument_list|(
name|zkClient
argument_list|,
literal|"/overseer/queue"
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/* Internal queue, not to be used outside of Overseer */
DECL|method|getInternalQueue
specifier|static
name|DistributedQueue
name|getInternalQueue
parameter_list|(
specifier|final
name|SolrZkClient
name|zkClient
parameter_list|)
block|{
name|createOverseerNode
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
return|return
operator|new
name|DistributedQueue
argument_list|(
name|zkClient
argument_list|,
literal|"/overseer/queue-work"
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/* Collection creation queue */
DECL|method|getCollectionQueue
specifier|static
name|DistributedQueue
name|getCollectionQueue
parameter_list|(
specifier|final
name|SolrZkClient
name|zkClient
parameter_list|)
block|{
name|createOverseerNode
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
return|return
operator|new
name|DistributedQueue
argument_list|(
name|zkClient
argument_list|,
literal|"/overseer/collection-queue-work"
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createOverseerNode
specifier|private
specifier|static
name|void
name|createOverseerNode
parameter_list|(
specifier|final
name|SolrZkClient
name|zkClient
parameter_list|)
block|{
try|try
block|{
name|zkClient
operator|.
name|create
argument_list|(
literal|"/overseer"
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NodeExistsException
name|e
parameter_list|)
block|{
comment|//ok
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not create Overseer node: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|+
literal|":"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not create Overseer node: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|+
literal|":"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class
end_unit
