begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|NodeStateWatcher
operator|.
name|NodeStateChangeListener
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ShardLeaderWatcher
operator|.
name|ShardLeaderListener
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|CloudState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|CoreState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCmdExecutor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkOperation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZooKeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|Code
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * Cluster leader. Responsible node assignments, cluster state file?  */
end_comment
begin_class
DECL|class|Overseer
specifier|public
class|class
name|Overseer
implements|implements
name|NodeStateChangeListener
implements|,
name|ShardLeaderListener
block|{
DECL|field|STATE_UPDATE_DELAY
specifier|private
specifier|static
specifier|final
name|int
name|STATE_UPDATE_DELAY
init|=
literal|500
decl_stmt|;
comment|// delay between cloud state updates
DECL|enum|Op
specifier|static
enum|enum
name|Op
block|{
DECL|enum constant|LeaderChange
DECL|enum constant|StateChange
DECL|enum constant|CoreDeleted
name|LeaderChange
block|,
name|StateChange
block|,
name|CoreDeleted
block|;    }
DECL|class|CloudStateUpdateRequest
specifier|private
specifier|final
class|class
name|CloudStateUpdateRequest
block|{
DECL|field|operation
specifier|final
name|Op
name|operation
decl_stmt|;
DECL|field|args
specifier|final
name|Object
index|[]
name|args
decl_stmt|;
DECL|method|CloudStateUpdateRequest
name|CloudStateUpdateRequest
parameter_list|(
specifier|final
name|Op
name|operation
parameter_list|,
specifier|final
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
block|}
DECL|field|STATES_NODE
specifier|public
specifier|static
specifier|final
name|String
name|STATES_NODE
init|=
literal|"/node_states"
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Overseer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|zkClient
specifier|private
specifier|final
name|SolrZkClient
name|zkClient
decl_stmt|;
comment|// pooled updates
DECL|field|fifo
specifier|private
specifier|final
name|LinkedBlockingQueue
argument_list|<
name|CloudStateUpdateRequest
argument_list|>
name|fifo
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|CloudStateUpdateRequest
argument_list|>
argument_list|()
decl_stmt|;
comment|// node stateWatches
DECL|field|nodeStateWatches
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|NodeStateWatcher
argument_list|>
name|nodeStateWatches
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|NodeStateWatcher
argument_list|>
argument_list|()
decl_stmt|;
comment|// shard leader watchers  (collection->slice->watcher)
DECL|field|shardLeaderWatches
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|ShardLeaderWatcher
argument_list|>
argument_list|>
name|shardLeaderWatches
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|ShardLeaderWatcher
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|zkCmdExecutor
specifier|private
name|ZkCmdExecutor
name|zkCmdExecutor
decl_stmt|;
DECL|class|CloudStateUpdater
specifier|private
specifier|static
class|class
name|CloudStateUpdater
implements|implements
name|Runnable
block|{
DECL|field|fifo
specifier|private
specifier|final
name|LinkedBlockingQueue
argument_list|<
name|CloudStateUpdateRequest
argument_list|>
name|fifo
decl_stmt|;
DECL|field|reader
specifier|private
specifier|final
name|ZkStateReader
name|reader
decl_stmt|;
DECL|field|zkClient
specifier|private
specifier|final
name|SolrZkClient
name|zkClient
decl_stmt|;
DECL|field|myId
specifier|private
specifier|final
name|String
name|myId
decl_stmt|;
DECL|method|CloudStateUpdater
specifier|public
name|CloudStateUpdater
parameter_list|(
specifier|final
name|LinkedBlockingQueue
argument_list|<
name|CloudStateUpdateRequest
argument_list|>
name|fifo
parameter_list|,
specifier|final
name|ZkStateReader
name|reader
parameter_list|,
specifier|final
name|SolrZkClient
name|zkClient
parameter_list|,
specifier|final
name|String
name|myId
parameter_list|)
block|{
name|this
operator|.
name|fifo
operator|=
name|fifo
expr_stmt|;
name|this
operator|.
name|myId
operator|=
name|myId
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|zkClient
operator|=
name|zkClient
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|amILeader
argument_list|()
condition|)
block|{
name|LinkedList
argument_list|<
name|CloudStateUpdateRequest
argument_list|>
name|requests
init|=
operator|new
name|LinkedList
argument_list|<
name|Overseer
operator|.
name|CloudStateUpdateRequest
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|fifo
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// collect all queued requests
name|CloudStateUpdateRequest
name|req
decl_stmt|;
name|req
operator|=
name|fifo
operator|.
name|poll
argument_list|()
expr_stmt|;
if|if
condition|(
name|req
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|requests
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|requests
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// process updates
synchronized|synchronized
init|(
name|reader
operator|.
name|getUpdateLock
argument_list|()
init|)
block|{
try|try
block|{
name|reader
operator|.
name|updateCloudState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|CloudState
name|cloudState
init|=
name|reader
operator|.
name|getCloudState
argument_list|()
decl_stmt|;
for|for
control|(
name|CloudStateUpdateRequest
name|request
range|:
name|requests
control|)
block|{
switch|switch
condition|(
name|request
operator|.
name|operation
condition|)
block|{
case|case
name|LeaderChange
case|:
name|cloudState
operator|=
name|setShardLeader
argument_list|(
name|cloudState
argument_list|,
operator|(
name|String
operator|)
name|request
operator|.
name|args
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|request
operator|.
name|args
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|request
operator|.
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|StateChange
case|:
name|cloudState
operator|=
name|updateState
argument_list|(
name|cloudState
argument_list|,
operator|(
name|String
operator|)
name|request
operator|.
name|args
index|[
literal|0
index|]
argument_list|,
operator|(
name|CoreState
operator|)
name|request
operator|.
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|CoreDeleted
case|:
name|cloudState
operator|=
name|removeCore
argument_list|(
name|cloudState
argument_list|,
operator|(
name|String
operator|)
name|request
operator|.
name|args
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|request
operator|.
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Announcing new cluster state"
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|setData
argument_list|(
name|ZkStateReader
operator|.
name|CLUSTER_STATE
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|cloudState
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|SESSIONEXPIRED
operator|||
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|CONNECTIONLOSS
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"ZooKeeper watch triggered, but Solr cannot talk to ZK"
argument_list|)
expr_stmt|;
return|return;
block|}
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|STATE_UPDATE_DELAY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|amILeader
specifier|private
name|boolean
name|amILeader
parameter_list|()
block|{
try|try
block|{
name|ZkNodeProps
name|props
init|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|zkClient
operator|.
name|getData
argument_list|(
literal|"/overseer_elect/leader"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|myId
operator|.
name|equals
argument_list|(
name|props
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"According to ZK I (id="
operator|+
name|myId
operator|+
literal|") am no longer a leader."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**        * Try to assign core to the cluster.         * @throws KeeperException         * @throws InterruptedException         */
DECL|method|updateState
specifier|private
name|CloudState
name|updateState
parameter_list|(
name|CloudState
name|state
parameter_list|,
name|String
name|nodeName
parameter_list|,
name|CoreState
name|coreState
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|collection
init|=
name|coreState
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|String
name|zkCoreNodeName
init|=
name|coreState
operator|.
name|getCoreNodeName
argument_list|()
decl_stmt|;
comment|//collection does not yet exist, create placeholders if num shards is specified
if|if
condition|(
operator|!
name|state
operator|.
name|getCollections
argument_list|()
operator|.
name|contains
argument_list|(
name|coreState
operator|.
name|getCollectionName
argument_list|()
argument_list|)
operator|&&
name|coreState
operator|.
name|getNumShards
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|state
operator|=
name|createCollection
argument_list|(
name|state
argument_list|,
name|collection
argument_list|,
name|coreState
operator|.
name|getNumShards
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// use the provided non null shardId
name|String
name|shardId
init|=
name|coreState
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardId
operator|==
literal|null
condition|)
block|{
comment|//use shardId from CloudState
name|shardId
operator|=
name|getAssignedId
argument_list|(
name|state
argument_list|,
name|nodeName
argument_list|,
name|coreState
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shardId
operator|==
literal|null
condition|)
block|{
comment|//request new shardId
name|shardId
operator|=
name|AssignShard
operator|.
name|assignShard
argument_list|(
name|collection
argument_list|,
name|state
argument_list|,
name|coreState
operator|.
name|getNumShards
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|coreProps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|coreState
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|coreProps
operator|.
name|putAll
argument_list|(
name|coreState
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't put num_shards in the clusterstate
name|coreProps
operator|.
name|remove
argument_list|(
literal|"num_shards"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|coreProps
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|props
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ZkNodeProps
name|zkProps
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|Slice
name|slice
init|=
name|state
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
name|shardProps
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
name|shardProps
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|shardProps
operator|=
name|state
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|)
operator|.
name|getShardsCopy
argument_list|()
expr_stmt|;
block|}
name|shardProps
operator|.
name|put
argument_list|(
name|zkCoreNodeName
argument_list|,
name|zkProps
argument_list|)
expr_stmt|;
name|slice
operator|=
operator|new
name|Slice
argument_list|(
name|shardId
argument_list|,
name|shardProps
argument_list|)
expr_stmt|;
name|CloudState
name|newCloudState
init|=
name|updateSlice
argument_list|(
name|state
argument_list|,
name|collection
argument_list|,
name|slice
argument_list|)
decl_stmt|;
return|return
name|newCloudState
return|;
block|}
DECL|method|createCollection
specifier|private
name|CloudState
name|createCollection
parameter_list|(
name|CloudState
name|state
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|int
name|numShards
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
name|newStates
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|newSlices
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|()
decl_stmt|;
name|newStates
operator|.
name|putAll
argument_list|(
name|state
operator|.
name|getCollectionStates
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numShards
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|sliceName
init|=
literal|"shard"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
decl_stmt|;
name|newSlices
operator|.
name|put
argument_list|(
name|sliceName
argument_list|,
operator|new
name|Slice
argument_list|(
name|sliceName
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newStates
operator|.
name|put
argument_list|(
name|collectionName
argument_list|,
name|newSlices
argument_list|)
expr_stmt|;
name|CloudState
name|newCloudState
init|=
operator|new
name|CloudState
argument_list|(
name|state
operator|.
name|getLiveNodes
argument_list|()
argument_list|,
name|newStates
argument_list|)
decl_stmt|;
return|return
name|newCloudState
return|;
block|}
comment|/*        * Return an already assigned id or null if not assigned        */
DECL|method|getAssignedId
specifier|private
name|String
name|getAssignedId
parameter_list|(
specifier|final
name|CloudState
name|state
parameter_list|,
specifier|final
name|String
name|nodeName
parameter_list|,
specifier|final
name|CoreState
name|coreState
parameter_list|)
block|{
specifier|final
name|String
name|key
init|=
name|coreState
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
operator|+
literal|"_"
operator|+
name|coreState
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|state
operator|.
name|getSlices
argument_list|(
name|coreState
operator|.
name|getCollectionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|slices
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Slice
name|slice
range|:
name|slices
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|slice
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|slice
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|updateSlice
specifier|private
name|CloudState
name|updateSlice
parameter_list|(
name|CloudState
name|state
parameter_list|,
name|String
name|collection
parameter_list|,
name|Slice
name|slice
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
name|newStates
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|newStates
operator|.
name|putAll
argument_list|(
name|state
operator|.
name|getCollectionStates
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|newStates
operator|.
name|containsKey
argument_list|(
name|collection
argument_list|)
condition|)
block|{
name|newStates
operator|.
name|put
argument_list|(
name|collection
argument_list|,
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|newStates
operator|.
name|get
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|slices
operator|.
name|containsKey
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|slices
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|slice
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
name|shards
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Slice
name|existingSlice
init|=
name|slices
operator|.
name|get
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|shards
operator|.
name|putAll
argument_list|(
name|existingSlice
operator|.
name|getShards
argument_list|()
argument_list|)
expr_stmt|;
comment|//XXX preserve existing leader
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
name|edit
range|:
name|slice
operator|.
name|getShards
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|existingSlice
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
name|edit
operator|.
name|getKey
argument_list|()
argument_list|)
operator|!=
literal|null
operator|&&
name|existingSlice
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
name|edit
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|containsKey
argument_list|(
name|ZkStateReader
operator|.
name|LEADER_PROP
argument_list|)
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newProps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|newProps
operator|.
name|putAll
argument_list|(
name|edit
operator|.
name|getValue
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|newProps
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|LEADER_PROP
argument_list|,
name|existingSlice
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
name|edit
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|LEADER_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|shards
operator|.
name|put
argument_list|(
name|edit
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|newProps
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shards
operator|.
name|put
argument_list|(
name|edit
operator|.
name|getKey
argument_list|()
argument_list|,
name|edit
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Slice
name|updatedSlice
init|=
operator|new
name|Slice
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|shards
argument_list|)
decl_stmt|;
name|slices
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|updatedSlice
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|CloudState
argument_list|(
name|state
operator|.
name|getLiveNodes
argument_list|()
argument_list|,
name|newStates
argument_list|)
return|;
block|}
DECL|method|setShardLeader
specifier|private
name|CloudState
name|setShardLeader
parameter_list|(
name|CloudState
name|state
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|sliceName
parameter_list|,
name|String
name|leaderUrl
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
name|newStates
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|newStates
operator|.
name|putAll
argument_list|(
name|state
operator|.
name|getCollectionStates
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|newStates
operator|.
name|get
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|slices
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not mark shard leader for non existing collection."
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
if|if
condition|(
operator|!
name|slices
operator|.
name|containsKey
argument_list|(
name|sliceName
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not mark leader for non existing slice."
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
else|else
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
name|newShards
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
name|shard
range|:
name|slices
operator|.
name|get
argument_list|(
name|sliceName
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newShardProps
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|newShardProps
operator|.
name|putAll
argument_list|(
name|shard
operator|.
name|getValue
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|newShardProps
operator|.
name|remove
argument_list|(
name|ZkStateReader
operator|.
name|LEADER_PROP
argument_list|)
expr_stmt|;
comment|//clean any previously existed flag
name|ZkCoreNodeProps
name|zkCoreNodeProps
init|=
operator|new
name|ZkCoreNodeProps
argument_list|(
operator|new
name|ZkNodeProps
argument_list|(
name|newShardProps
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|leaderUrl
operator|!=
literal|null
operator|&&
name|leaderUrl
operator|.
name|equals
argument_list|(
name|zkCoreNodeProps
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
condition|)
block|{
name|newShardProps
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|LEADER_PROP
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|newShards
operator|.
name|put
argument_list|(
name|shard
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|newShardProps
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Slice
name|slice
init|=
operator|new
name|Slice
argument_list|(
name|sliceName
argument_list|,
name|newShards
argument_list|)
decl_stmt|;
name|slices
operator|.
name|put
argument_list|(
name|sliceName
argument_list|,
name|slice
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|CloudState
argument_list|(
name|state
operator|.
name|getLiveNodes
argument_list|()
argument_list|,
name|newStates
argument_list|)
return|;
block|}
comment|/*        * Remove core from cloudstate        */
DECL|method|removeCore
specifier|private
name|CloudState
name|removeCore
parameter_list|(
specifier|final
name|CloudState
name|cloudState
parameter_list|,
specifier|final
name|String
name|collection
parameter_list|,
specifier|final
name|String
name|coreNodeName
parameter_list|)
block|{
specifier|final
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
name|newStates
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|collectionName
range|:
name|cloudState
operator|.
name|getCollections
argument_list|()
control|)
block|{
if|if
condition|(
name|collection
operator|.
name|equals
argument_list|(
name|collectionName
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|cloudState
operator|.
name|getSlices
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|newSlices
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|slices
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|slice
operator|.
name|getShards
argument_list|()
operator|.
name|containsKey
argument_list|(
name|coreNodeName
argument_list|)
condition|)
block|{
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
name|newShards
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
argument_list|()
decl_stmt|;
name|newShards
operator|.
name|putAll
argument_list|(
name|slice
operator|.
name|getShards
argument_list|()
argument_list|)
expr_stmt|;
name|newShards
operator|.
name|remove
argument_list|(
name|coreNodeName
argument_list|)
expr_stmt|;
name|Slice
name|newSlice
init|=
operator|new
name|Slice
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|newShards
argument_list|)
decl_stmt|;
name|newSlices
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|newSlice
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newSlices
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|slice
argument_list|)
expr_stmt|;
block|}
block|}
name|newStates
operator|.
name|put
argument_list|(
name|collectionName
argument_list|,
name|newSlices
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newStates
operator|.
name|put
argument_list|(
name|collectionName
argument_list|,
name|cloudState
operator|.
name|getSlices
argument_list|(
name|collectionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|CloudState
name|newState
init|=
operator|new
name|CloudState
argument_list|(
name|cloudState
operator|.
name|getLiveNodes
argument_list|()
argument_list|,
name|newStates
argument_list|)
decl_stmt|;
return|return
name|newState
return|;
block|}
block|}
DECL|method|Overseer
specifier|public
name|Overseer
parameter_list|(
specifier|final
name|SolrZkClient
name|zkClient
parameter_list|,
specifier|final
name|ZkStateReader
name|reader
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Constructing new Overseer id="
operator|+
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|zkClient
operator|=
name|zkClient
expr_stmt|;
name|this
operator|.
name|zkCmdExecutor
operator|=
operator|new
name|ZkCmdExecutor
argument_list|()
expr_stmt|;
name|createWatches
argument_list|()
expr_stmt|;
comment|//launch cluster state updater thread
name|ThreadGroup
name|tg
init|=
operator|new
name|ThreadGroup
argument_list|(
literal|"Overseer delayed state updater"
argument_list|)
decl_stmt|;
name|Thread
name|updaterThread
init|=
operator|new
name|Thread
argument_list|(
name|tg
argument_list|,
operator|new
name|CloudStateUpdater
argument_list|(
name|fifo
argument_list|,
name|reader
argument_list|,
name|zkClient
argument_list|,
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|updaterThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updaterThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|createWatches
specifier|public
specifier|synchronized
name|void
name|createWatches
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|addCollectionsWatch
argument_list|()
expr_stmt|;
name|addLiveNodesWatch
argument_list|()
expr_stmt|;
block|}
comment|/*     * Watch for collections so we can add watches for its shard leaders.    */
DECL|method|addCollectionsWatch
specifier|private
name|void
name|addCollectionsWatch
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|zkCmdExecutor
operator|.
name|ensureExists
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
argument_list|,
name|zkClient
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|collections
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
argument_list|,
operator|new
name|Watcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|collections
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
argument_list|,
name|this
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|collectionsChanged
argument_list|(
name|collections
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|Code
operator|.
name|CONNECTIONLOSS
operator|||
name|e
operator|.
name|code
argument_list|()
operator|==
name|Code
operator|.
name|SESSIONEXPIRED
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"ZooKeeper watch triggered, but Solr cannot talk to ZK"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|collectionsChanged
argument_list|(
name|collections
argument_list|)
expr_stmt|;
block|}
DECL|method|collectionsChanged
specifier|private
name|void
name|collectionsChanged
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|collections
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|shardLeaderWatches
init|)
block|{
for|for
control|(
name|String
name|collection
range|:
name|collections
control|)
block|{
if|if
condition|(
operator|!
name|shardLeaderWatches
operator|.
name|containsKey
argument_list|(
name|collection
argument_list|)
condition|)
block|{
name|shardLeaderWatches
operator|.
name|put
argument_list|(
name|collection
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ShardLeaderWatcher
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|addShardLeadersWatch
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
block|}
comment|//XXX not handling delete collections..
block|}
block|}
comment|/**    * Add a watch for node containing shard leaders for a collection    * @param collection    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|addShardLeadersWatch
specifier|private
name|void
name|addShardLeadersWatch
parameter_list|(
specifier|final
name|String
name|collection
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|zkCmdExecutor
operator|.
name|ensureExists
argument_list|(
name|ZkStateReader
operator|.
name|getShardLeadersPath
argument_list|(
name|collection
argument_list|,
literal|null
argument_list|)
argument_list|,
name|zkClient
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|leaderNodes
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|ZkStateReader
operator|.
name|getShardLeadersPath
argument_list|(
name|collection
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|Watcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|leaderNodes
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|ZkStateReader
operator|.
name|getShardLeadersPath
argument_list|(
name|collection
argument_list|,
literal|null
argument_list|)
argument_list|,
name|this
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|processLeaderNodesChanged
argument_list|(
name|collection
argument_list|,
name|leaderNodes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|SESSIONEXPIRED
operator|||
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|CONNECTIONLOSS
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"ZooKeeper watch triggered, but Solr cannot talk to ZK"
argument_list|)
expr_stmt|;
return|return;
block|}
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|processLeaderNodesChanged
argument_list|(
name|collection
argument_list|,
name|leaderNodes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Process change in shard leaders. Make sure we have watches for each leader.    */
DECL|method|processLeaderNodesChanged
specifier|private
name|void
name|processLeaderNodesChanged
parameter_list|(
specifier|final
name|String
name|collection
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|shardIds
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Leader nodes changed for collection: "
operator|+
name|collection
operator|+
literal|" nodes now:"
operator|+
name|shardIds
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ShardLeaderWatcher
argument_list|>
name|watches
init|=
name|shardLeaderWatches
operator|.
name|get
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|currentWatches
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|currentWatches
operator|.
name|addAll
argument_list|(
name|watches
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|newLeaders
init|=
name|complement
argument_list|(
name|shardIds
argument_list|,
name|currentWatches
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|lostLeaders
init|=
name|complement
argument_list|(
name|currentWatches
argument_list|,
name|shardIds
argument_list|)
decl_stmt|;
comment|//remove watches for lost shards
for|for
control|(
name|String
name|shardId
range|:
name|lostLeaders
control|)
block|{
name|ShardLeaderWatcher
name|watcher
init|=
name|watches
operator|.
name|remove
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|watcher
operator|!=
literal|null
condition|)
block|{
name|watcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|//add watches for the new shards
for|for
control|(
name|String
name|shardId
range|:
name|newLeaders
control|)
block|{
try|try
block|{
name|ShardLeaderWatcher
name|watcher
init|=
operator|new
name|ShardLeaderWatcher
argument_list|(
name|shardId
argument_list|,
name|collection
argument_list|,
name|zkClient
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|watches
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
name|watcher
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to create watcher for shard leader col:"
operator|+
name|collection
operator|+
literal|" shard:"
operator|+
name|shardId
operator|+
literal|", exception: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Failed to create watcher for shard leader col:"
operator|+
name|collection
operator|+
literal|" shard:"
operator|+
name|shardId
operator|+
literal|", exception: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addLiveNodesWatch
specifier|private
name|void
name|addLiveNodesWatch
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
name|zkCmdExecutor
operator|.
name|retryOperation
argument_list|(
operator|new
name|ZkOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|execute
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|zkClient
operator|.
name|getChildren
argument_list|(
name|ZkStateReader
operator|.
name|LIVE_NODES_ZKNODE
argument_list|,
operator|new
name|Watcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|ZkStateReader
operator|.
name|LIVE_NODES_ZKNODE
argument_list|,
name|this
argument_list|,
literal|true
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|nodeStateWatches
init|)
block|{
name|processLiveNodesChanged
argument_list|(
name|nodeStateWatches
operator|.
name|keySet
argument_list|()
argument_list|,
name|liveNodes
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|SESSIONEXPIRED
operator|||
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|CONNECTIONLOSS
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"ZooKeeper watch triggered, but Solr cannot talk to ZK"
argument_list|)
expr_stmt|;
return|return;
block|}
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|processLiveNodesChanged
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|liveNodes
argument_list|)
expr_stmt|;
block|}
DECL|method|processLiveNodesChanged
specifier|private
name|void
name|processLiveNodesChanged
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|oldLiveNodes
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|liveNodes
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|upNodes
init|=
name|complement
argument_list|(
name|liveNodes
argument_list|,
name|oldLiveNodes
argument_list|)
decl_stmt|;
if|if
condition|(
name|upNodes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addNodeStateWatches
argument_list|(
name|upNodes
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|downNodes
init|=
name|complement
argument_list|(
name|oldLiveNodes
argument_list|,
name|liveNodes
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|downNodes
control|)
block|{
synchronized|synchronized
init|(
name|nodeStateWatches
init|)
block|{
name|NodeStateWatcher
name|watcher
init|=
name|nodeStateWatches
operator|.
name|remove
argument_list|(
name|node
argument_list|)
decl_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Removed NodeStateWatcher for node:"
operator|+
name|node
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addNodeStateWatches
specifier|private
name|void
name|addNodeStateWatches
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|nodeNames
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
for|for
control|(
name|String
name|nodeName
range|:
name|nodeNames
control|)
block|{
specifier|final
name|String
name|path
init|=
name|STATES_NODE
operator|+
literal|"/"
operator|+
name|nodeName
decl_stmt|;
synchronized|synchronized
init|(
name|nodeStateWatches
init|)
block|{
if|if
condition|(
operator|!
name|nodeStateWatches
operator|.
name|containsKey
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
name|zkCmdExecutor
operator|.
name|ensureExists
argument_list|(
name|path
argument_list|,
name|zkClient
argument_list|)
expr_stmt|;
name|nodeStateWatches
operator|.
name|put
argument_list|(
name|nodeName
argument_list|,
operator|new
name|NodeStateWatcher
argument_list|(
name|zkClient
argument_list|,
name|nodeName
argument_list|,
name|path
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Added NodeStateWatcher for node "
operator|+
name|nodeName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"watch already added"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|complement
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|complement
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|next
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|prev
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|downCollections
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|downCollections
operator|.
name|addAll
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|downCollections
operator|.
name|removeAll
argument_list|(
name|prev
argument_list|)
expr_stmt|;
return|return
name|downCollections
return|;
block|}
annotation|@
name|Override
DECL|method|coreChanged
specifier|public
name|void
name|coreChanged
parameter_list|(
specifier|final
name|String
name|nodeName
parameter_list|,
specifier|final
name|Set
argument_list|<
name|CoreState
argument_list|>
name|states
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Core change pooled: "
operator|+
name|nodeName
operator|+
literal|" states:"
operator|+
name|states
argument_list|)
expr_stmt|;
for|for
control|(
name|CoreState
name|state
range|:
name|states
control|)
block|{
name|fifo
operator|.
name|add
argument_list|(
operator|new
name|CloudStateUpdateRequest
argument_list|(
name|Op
operator|.
name|StateChange
argument_list|,
name|nodeName
argument_list|,
name|state
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|coreDeleted
specifier|public
name|void
name|coreDeleted
parameter_list|(
name|String
name|nodeName
parameter_list|,
name|Collection
argument_list|<
name|CoreState
argument_list|>
name|states
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|CoreState
name|state
range|:
name|states
control|)
block|{
name|fifo
operator|.
name|add
argument_list|(
operator|new
name|CloudStateUpdateRequest
argument_list|(
name|Op
operator|.
name|CoreDeleted
argument_list|,
name|state
operator|.
name|getCollectionName
argument_list|()
argument_list|,
name|state
operator|.
name|getCoreNodeName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createClientNodes
specifier|public
specifier|static
name|void
name|createClientNodes
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|String
name|nodeName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|node
init|=
name|STATES_NODE
operator|+
literal|"/"
operator|+
name|nodeName
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"creating node:"
operator|+
name|node
argument_list|)
expr_stmt|;
block|}
name|ZkCmdExecutor
name|zkCmdExecutor
init|=
operator|new
name|ZkCmdExecutor
argument_list|()
decl_stmt|;
name|zkCmdExecutor
operator|.
name|ensureExists
argument_list|(
name|node
argument_list|,
name|zkClient
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|announceLeader
specifier|public
name|void
name|announceLeader
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|shardId
parameter_list|,
name|ZkCoreNodeProps
name|props
parameter_list|)
block|{
name|String
name|coreUrl
init|=
name|props
operator|.
name|getCoreUrl
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Leader change pooled: "
operator|+
name|coreUrl
argument_list|)
expr_stmt|;
name|fifo
operator|.
name|add
argument_list|(
operator|new
name|CloudStateUpdateRequest
argument_list|(
name|Op
operator|.
name|LeaderChange
argument_list|,
name|collection
argument_list|,
name|shardId
argument_list|,
name|coreUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
