begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment
begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
operator|.
name|makeMap
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|ADDREPLICA
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CLUSTERPROP
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClosableThread
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocRouter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ImplicitDocRouter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|RoutingRule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|stats
operator|.
name|Clock
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|stats
operator|.
name|Timer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|stats
operator|.
name|TimerContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * Cluster leader. Responsible node assignments, cluster state file?  */
end_comment
begin_class
DECL|class|Overseer
specifier|public
class|class
name|Overseer
block|{
DECL|field|QUEUE_OPERATION
specifier|public
specifier|static
specifier|final
name|String
name|QUEUE_OPERATION
init|=
literal|"operation"
decl_stmt|;
DECL|field|DELETECORE
specifier|public
specifier|static
specifier|final
name|String
name|DELETECORE
init|=
literal|"deletecore"
decl_stmt|;
DECL|field|REMOVECOLLECTION
specifier|public
specifier|static
specifier|final
name|String
name|REMOVECOLLECTION
init|=
literal|"removecollection"
decl_stmt|;
DECL|field|REMOVESHARD
specifier|public
specifier|static
specifier|final
name|String
name|REMOVESHARD
init|=
literal|"removeshard"
decl_stmt|;
DECL|field|ADD_ROUTING_RULE
specifier|public
specifier|static
specifier|final
name|String
name|ADD_ROUTING_RULE
init|=
literal|"addroutingrule"
decl_stmt|;
DECL|field|REMOVE_ROUTING_RULE
specifier|public
specifier|static
specifier|final
name|String
name|REMOVE_ROUTING_RULE
init|=
literal|"removeroutingrule"
decl_stmt|;
DECL|field|STATE
specifier|public
specifier|static
specifier|final
name|String
name|STATE
init|=
literal|"state"
decl_stmt|;
DECL|field|QUIT
specifier|public
specifier|static
specifier|final
name|String
name|QUIT
init|=
literal|"quit"
decl_stmt|;
DECL|field|STATE_UPDATE_DELAY
specifier|public
specifier|static
specifier|final
name|int
name|STATE_UPDATE_DELAY
init|=
literal|1500
decl_stmt|;
comment|// delay between cloud state updates
DECL|field|CREATESHARD
specifier|public
specifier|static
specifier|final
name|String
name|CREATESHARD
init|=
literal|"createshard"
decl_stmt|;
DECL|field|UPDATESHARDSTATE
specifier|public
specifier|static
specifier|final
name|String
name|UPDATESHARDSTATE
init|=
literal|"updateshardstate"
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Overseer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|enum|LeaderStatus
DECL|enum constant|DONT_KNOW
DECL|enum constant|NO
DECL|enum constant|YES
specifier|static
enum|enum
name|LeaderStatus
block|{
name|DONT_KNOW
block|,
name|NO
block|,
name|YES
block|}
empty_stmt|;
DECL|field|lastUpdatedTime
specifier|private
name|long
name|lastUpdatedTime
init|=
literal|0
decl_stmt|;
DECL|class|ClusterStateUpdater
specifier|private
class|class
name|ClusterStateUpdater
implements|implements
name|Runnable
implements|,
name|ClosableThread
block|{
DECL|field|reader
specifier|private
specifier|final
name|ZkStateReader
name|reader
decl_stmt|;
DECL|field|zkClient
specifier|private
specifier|final
name|SolrZkClient
name|zkClient
decl_stmt|;
DECL|field|myId
specifier|private
specifier|final
name|String
name|myId
decl_stmt|;
comment|//queue where everybody can throw tasks
DECL|field|stateUpdateQueue
specifier|private
specifier|final
name|DistributedQueue
name|stateUpdateQueue
decl_stmt|;
comment|//Internal queue where overseer stores events that have not yet been published into cloudstate
comment|//If Overseer dies while extracting the main queue a new overseer will start from this queue
DECL|field|workQueue
specifier|private
specifier|final
name|DistributedQueue
name|workQueue
decl_stmt|;
comment|// Internal map which holds the information about running tasks.
DECL|field|runningMap
specifier|private
specifier|final
name|DistributedMap
name|runningMap
decl_stmt|;
comment|// Internal map which holds the information about successfully completed tasks.
DECL|field|completedMap
specifier|private
specifier|final
name|DistributedMap
name|completedMap
decl_stmt|;
comment|// Internal map which holds the information about failed tasks.
DECL|field|failureMap
specifier|private
specifier|final
name|DistributedMap
name|failureMap
decl_stmt|;
DECL|field|zkStats
specifier|private
specifier|final
name|Stats
name|zkStats
decl_stmt|;
DECL|field|clusterProps
specifier|private
name|Map
name|clusterProps
decl_stmt|;
DECL|field|isClosed
specifier|private
name|boolean
name|isClosed
init|=
literal|false
decl_stmt|;
DECL|method|ClusterStateUpdater
specifier|public
name|ClusterStateUpdater
parameter_list|(
specifier|final
name|ZkStateReader
name|reader
parameter_list|,
specifier|final
name|String
name|myId
parameter_list|,
name|Stats
name|zkStats
parameter_list|)
block|{
name|this
operator|.
name|zkClient
operator|=
name|reader
operator|.
name|getZkClient
argument_list|()
expr_stmt|;
name|this
operator|.
name|zkStats
operator|=
name|zkStats
expr_stmt|;
name|this
operator|.
name|stateUpdateQueue
operator|=
name|getInQueue
argument_list|(
name|zkClient
argument_list|,
name|zkStats
argument_list|)
expr_stmt|;
name|this
operator|.
name|workQueue
operator|=
name|getInternalQueue
argument_list|(
name|zkClient
argument_list|,
name|zkStats
argument_list|)
expr_stmt|;
name|this
operator|.
name|failureMap
operator|=
name|getFailureMap
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|this
operator|.
name|runningMap
operator|=
name|getRunningMap
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|this
operator|.
name|completedMap
operator|=
name|getCompletedMap
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|this
operator|.
name|myId
operator|=
name|myId
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|clusterProps
operator|=
name|reader
operator|.
name|getClusterProps
argument_list|()
expr_stmt|;
block|}
DECL|method|getStateUpdateQueueStats
specifier|public
name|Stats
name|getStateUpdateQueueStats
parameter_list|()
block|{
return|return
name|stateUpdateQueue
operator|.
name|getStats
argument_list|()
return|;
block|}
DECL|method|getWorkQueueStats
specifier|public
name|Stats
name|getWorkQueueStats
parameter_list|()
block|{
return|return
name|workQueue
operator|.
name|getStats
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LeaderStatus
name|isLeader
init|=
name|amILeader
argument_list|()
decl_stmt|;
while|while
condition|(
name|isLeader
operator|==
name|LeaderStatus
operator|.
name|DONT_KNOW
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"am_i_leader unclear {}"
argument_list|,
name|isLeader
argument_list|)
expr_stmt|;
name|isLeader
operator|=
name|amILeader
argument_list|()
expr_stmt|;
comment|// not a no, not a yes, try ask again
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|isClosed
operator|&&
name|LeaderStatus
operator|.
name|YES
operator|==
name|isLeader
condition|)
block|{
comment|// see if there's something left from the previous Overseer and re
comment|// process all events that were not persisted into cloud state
synchronized|synchronized
init|(
name|reader
operator|.
name|getUpdateLock
argument_list|()
init|)
block|{
comment|// XXX this only protects
comment|// against edits inside single
comment|// node
try|try
block|{
name|byte
index|[]
name|head
init|=
name|workQueue
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|head
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|updateClusterState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|reader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Replaying operations from work queue."
argument_list|)
expr_stmt|;
while|while
condition|(
name|head
operator|!=
literal|null
condition|)
block|{
name|isLeader
operator|=
name|amILeader
argument_list|()
expr_stmt|;
if|if
condition|(
name|LeaderStatus
operator|.
name|NO
operator|==
name|isLeader
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|LeaderStatus
operator|.
name|YES
operator|==
name|isLeader
condition|)
block|{
specifier|final
name|ZkNodeProps
name|message
init|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|head
argument_list|)
decl_stmt|;
specifier|final
name|String
name|operation
init|=
name|message
operator|.
name|getStr
argument_list|(
name|QUEUE_OPERATION
argument_list|)
decl_stmt|;
specifier|final
name|TimerContext
name|timerContext
init|=
name|stats
operator|.
name|time
argument_list|(
name|operation
argument_list|)
decl_stmt|;
try|try
block|{
name|clusterState
operator|=
name|processMessage
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|,
name|operation
argument_list|)
expr_stmt|;
name|stats
operator|.
name|success
argument_list|(
name|operation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// generally there is nothing we can do - in most cases, we have
comment|// an issue that will fail again on retry or we cannot communicate with     a
comment|// ZooKeeper in which case another Overseer should take over
comment|// TODO: if ordering for the message is not important, we could
comment|// track retries and put it back on the end of the queue
name|log
operator|.
name|error
argument_list|(
literal|"Overseer could not process the current clusterstate state update message, skipping the message."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|stats
operator|.
name|error
argument_list|(
name|operation
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|timerContext
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|updateZkStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
name|workQueue
operator|.
name|poll
argument_list|()
expr_stmt|;
comment|// poll-ing removes the element we got by peek-ing
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"am_i_leader unclear {}"
argument_list|,
name|isLeader
argument_list|)
expr_stmt|;
comment|// re-peek below in case our 'head' value is out-of-date by now
block|}
name|head
operator|=
name|workQueue
operator|.
name|peek
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|SESSIONEXPIRED
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Solr cannot talk to ZK, exiting Overseer work queue loop"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|error
argument_list|(
literal|"Exception in Overseer work queue loop"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception in Overseer work queue loop"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Starting to work on the main queue"
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|this
operator|.
name|isClosed
condition|)
block|{
name|isLeader
operator|=
name|amILeader
argument_list|()
expr_stmt|;
if|if
condition|(
name|LeaderStatus
operator|.
name|NO
operator|==
name|isLeader
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|LeaderStatus
operator|.
name|YES
operator|!=
name|isLeader
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"am_i_leader unclear {}"
argument_list|,
name|isLeader
argument_list|)
expr_stmt|;
continue|continue;
comment|// not a no, not a yes, try ask again
block|}
name|DistributedQueue
operator|.
name|QueueEvent
name|head
init|=
literal|null
decl_stmt|;
try|try
block|{
name|head
operator|=
name|stateUpdateQueue
operator|.
name|peek
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|SESSIONEXPIRED
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Solr cannot talk to ZK, exiting Overseer main queue loop"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|error
argument_list|(
literal|"Exception in Overseer main queue loop"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception in Overseer main queue loop"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|reader
operator|.
name|getUpdateLock
argument_list|()
init|)
block|{
try|try
block|{
name|reader
operator|.
name|updateClusterState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|reader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
while|while
condition|(
name|head
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ZkNodeProps
name|message
init|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|head
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|operation
init|=
name|message
operator|.
name|getStr
argument_list|(
name|QUEUE_OPERATION
argument_list|)
decl_stmt|;
specifier|final
name|TimerContext
name|timerContext
init|=
name|stats
operator|.
name|time
argument_list|(
name|operation
argument_list|)
decl_stmt|;
try|try
block|{
name|clusterState
operator|=
name|processMessage
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|,
name|operation
argument_list|)
expr_stmt|;
name|stats
operator|.
name|success
argument_list|(
name|operation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// generally there is nothing we can do - in most cases, we have
comment|// an issue that will fail again on retry or we cannot communicate with
comment|// ZooKeeper in which case another Overseer should take over
comment|// TODO: if ordering for the message is not important, we could
comment|// track retries and put it back on the end of the queue
name|log
operator|.
name|error
argument_list|(
literal|"Overseer could not process the current clusterstate state update message, skipping the message."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|stats
operator|.
name|error
argument_list|(
name|operation
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|timerContext
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|workQueue
operator|.
name|offer
argument_list|(
name|head
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|stateUpdateQueue
operator|.
name|poll
argument_list|()
expr_stmt|;
if|if
condition|(
name|isClosed
operator|||
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|lastUpdatedTime
operator|>
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|convert
argument_list|(
name|STATE_UPDATE_DELAY
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
break|break;
comment|// if an event comes in the next 100ms batch it together
name|head
operator|=
name|stateUpdateQueue
operator|.
name|peek
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|updateZkStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// clean work queue
while|while
condition|(
name|workQueue
operator|.
name|poll
argument_list|()
operator|!=
literal|null
condition|)
empty_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|SESSIONEXPIRED
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Solr cannot talk to ZK, exiting Overseer main queue loop"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|error
argument_list|(
literal|"Exception in Overseer main queue loop"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception in Overseer main queue loop"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Overseer Loop exiting : {}"
argument_list|,
name|LeaderElector
operator|.
name|getNodeName
argument_list|(
name|myId
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|(
literal|"OverseerExitThread"
argument_list|)
block|{
comment|//do this in a separate thread because any wait is interrupted in this main thread
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|checkIfIamStillLeader
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|updateZkStates
specifier|private
name|void
name|updateZkStates
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|lastUpdatedTime
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|zkClient
operator|.
name|setData
argument_list|(
name|ZkStateReader
operator|.
name|CLUSTER_STATE
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|clusterState
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|checkIfIamStillLeader
specifier|private
name|void
name|checkIfIamStillLeader
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
name|stat
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
argument_list|()
decl_stmt|;
name|String
name|path
init|=
literal|"/overseer_elect/leader"
decl_stmt|;
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
try|try
block|{
name|data
operator|=
name|zkClient
operator|.
name|getData
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|stat
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"could not read the data"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|Map
name|m
init|=
operator|(
name|Map
operator|)
name|ZkStateReader
operator|.
name|fromJSON
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|String
name|id
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|overseerCollectionProcessor
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"I'm exiting , but I'm still the leader"
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|delete
argument_list|(
name|path
argument_list|,
name|stat
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|BadVersionException
name|e
parameter_list|)
block|{
comment|//no problem ignore it some other Overseer has already taken over
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not delete my leader node "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"somebody else has already taken up the overseer position"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|//if I am not shutting down, Then I need to rejoin election
if|if
condition|(
name|zkController
operator|!=
literal|null
operator|&&
operator|!
name|zkController
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|isShutDown
argument_list|()
condition|)
block|{
name|zkController
operator|.
name|rejoinOverseerElection
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|processMessage
specifier|private
name|ClusterState
name|processMessage
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
specifier|final
name|ZkNodeProps
name|message
parameter_list|,
specifier|final
name|String
name|operation
parameter_list|)
block|{
if|if
condition|(
name|STATE
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
if|if
condition|(
name|isLegacy
argument_list|(
name|clusterProps
argument_list|)
condition|)
block|{
name|clusterState
operator|=
name|updateState
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clusterState
operator|=
name|updateStateNew
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|DELETECORE
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|clusterState
operator|=
name|removeCore
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|REMOVECOLLECTION
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|clusterState
operator|=
name|removeCollection
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|REMOVESHARD
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|clusterState
operator|=
name|removeShard
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ZkStateReader
operator|.
name|LEADER_PROP
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|baseUrl
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
decl_stmt|;
name|String
name|coreName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|baseUrl
argument_list|)
expr_stmt|;
if|if
condition|(
name|baseUrl
operator|!=
literal|null
operator|&&
operator|!
name|baseUrl
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|coreName
operator|==
literal|null
condition|?
literal|""
else|:
name|coreName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|sb
operator|.
name|substring
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
operator|)
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|setShardLeader
argument_list|(
name|clusterState
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
argument_list|,
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|sb
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CREATESHARD
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|clusterState
operator|=
name|createShard
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|UPDATESHARDSTATE
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|clusterState
operator|=
name|updateShardState
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|OverseerCollectionProcessor
operator|.
name|CREATECOLLECTION
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|clusterState
operator|=
name|buildCollection
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ADDREPLICA
operator|.
name|isEqual
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|clusterState
operator|=
name|createReplica
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Overseer
operator|.
name|ADD_ROUTING_RULE
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|clusterState
operator|=
name|addRoutingRule
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Overseer
operator|.
name|REMOVE_ROUTING_RULE
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|clusterState
operator|=
name|removeRoutingRule
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CLUSTERPROP
operator|.
name|isEqual
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|handleProp
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QUIT
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
if|if
condition|(
name|myId
operator|.
name|equals
argument_list|(
name|message
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Quit command received {}"
argument_list|,
name|LeaderElector
operator|.
name|getNodeName
argument_list|(
name|myId
argument_list|)
argument_list|)
expr_stmt|;
name|overseerCollectionProcessor
operator|.
name|close
argument_list|()
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Overseer received wrong QUIT message {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown operation:"
operator|+
name|operation
operator|+
literal|" contents:"
operator|+
name|message
operator|.
name|getProperties
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|clusterState
return|;
block|}
DECL|method|handleProp
specifier|private
name|void
name|handleProp
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|String
name|name
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|val
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"val"
argument_list|)
decl_stmt|;
name|Map
name|m
init|=
name|reader
operator|.
name|getClusterProps
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
name|m
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
else|else
name|m
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|reader
operator|.
name|getZkClient
argument_list|()
operator|.
name|exists
argument_list|(
name|ZkStateReader
operator|.
name|CLUSTER_PROPS
argument_list|,
literal|true
argument_list|)
condition|)
name|reader
operator|.
name|getZkClient
argument_list|()
operator|.
name|setData
argument_list|(
name|ZkStateReader
operator|.
name|CLUSTER_PROPS
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|else
name|reader
operator|.
name|getZkClient
argument_list|()
operator|.
name|create
argument_list|(
name|ZkStateReader
operator|.
name|CLUSTER_PROPS
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|clusterProps
operator|=
name|reader
operator|.
name|getClusterProps
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to set cluster property"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createReplica
specifier|private
name|ClusterState
name|createReplica
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"createReplica() {} "
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|String
name|coll
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkCollectionKeyExistence
argument_list|(
name|message
argument_list|)
condition|)
return|return
name|clusterState
return|;
name|String
name|slice
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|DocCollection
name|collection
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|coll
argument_list|)
decl_stmt|;
name|Slice
name|sl
init|=
name|collection
operator|.
name|getSlice
argument_list|(
name|slice
argument_list|)
decl_stmt|;
if|if
condition|(
name|sl
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid Collection/Slice {}/{} "
argument_list|,
name|coll
argument_list|,
name|slice
argument_list|)
expr_stmt|;
return|return
name|clusterState
return|;
block|}
name|String
name|coreNodeName
init|=
name|Assign
operator|.
name|assignNode
argument_list|(
name|coll
argument_list|,
name|clusterState
argument_list|)
decl_stmt|;
name|Replica
name|replica
init|=
operator|new
name|Replica
argument_list|(
name|coreNodeName
argument_list|,
name|makeMap
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|sl
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|put
argument_list|(
name|coreNodeName
argument_list|,
name|replica
argument_list|)
expr_stmt|;
return|return
name|newState
argument_list|(
name|clusterState
argument_list|,
name|singletonMap
argument_list|(
name|coll
argument_list|,
name|collection
argument_list|)
argument_list|)
return|;
block|}
DECL|method|buildCollection
specifier|private
name|ClusterState
name|buildCollection
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"building a new collection: "
operator|+
name|collection
argument_list|)
expr_stmt|;
if|if
condition|(
name|clusterState
operator|.
name|hasCollection
argument_list|(
name|collection
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Collection {} already exists. exit"
argument_list|,
name|collection
argument_list|)
expr_stmt|;
return|return
name|clusterState
return|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|shardNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|ImplicitDocRouter
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|message
operator|.
name|getStr
argument_list|(
literal|"router.name"
argument_list|,
name|DocRouter
operator|.
name|DEFAULT_NAME
argument_list|)
argument_list|)
condition|)
block|{
name|getShardNames
argument_list|(
name|shardNames
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
literal|"shards"
argument_list|,
name|DocRouter
operator|.
name|DEFAULT_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|numShards
init|=
name|message
operator|.
name|getInt
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|numShards
operator|<
literal|1
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"numShards is a required parameter for 'compositeId' router"
argument_list|)
throw|;
name|getShardNames
argument_list|(
name|numShards
argument_list|,
name|shardNames
argument_list|)
expr_stmt|;
block|}
return|return
name|createCollection
argument_list|(
name|clusterState
argument_list|,
name|collection
argument_list|,
name|shardNames
argument_list|,
name|message
argument_list|)
return|;
block|}
DECL|method|updateShardState
specifier|private
name|ClusterState
name|updateShardState
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkCollectionKeyExistence
argument_list|(
name|message
argument_list|)
condition|)
return|return
name|clusterState
return|;
name|log
operator|.
name|info
argument_list|(
literal|"Update shard state invoked for collection: "
operator|+
name|collection
operator|+
literal|" with message: "
operator|+
name|message
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|message
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|QUEUE_OPERATION
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
continue|continue;
name|Slice
name|slice
init|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Overseer.updateShardState unknown collection: "
operator|+
name|collection
operator|+
literal|" slice: "
operator|+
name|key
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Update shard state "
operator|+
name|key
operator|+
literal|" to "
operator|+
name|message
operator|.
name|getStr
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|slice
operator|.
name|shallowCopy
argument_list|()
decl_stmt|;
if|if
condition|(
name|Slice
operator|.
name|RECOVERY
operator|.
name|equals
argument_list|(
name|props
operator|.
name|get
argument_list|(
name|Slice
operator|.
name|STATE
argument_list|)
argument_list|)
operator|&&
name|Slice
operator|.
name|ACTIVE
operator|.
name|equals
argument_list|(
name|message
operator|.
name|getStr
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
block|{
name|props
operator|.
name|remove
argument_list|(
name|Slice
operator|.
name|PARENT
argument_list|)
expr_stmt|;
block|}
name|props
operator|.
name|put
argument_list|(
name|Slice
operator|.
name|STATE
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|Slice
name|newSlice
init|=
operator|new
name|Slice
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|slice
operator|.
name|getReplicasCopy
argument_list|()
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|clusterState
operator|=
name|updateSlice
argument_list|(
name|clusterState
argument_list|,
name|collection
argument_list|,
name|newSlice
argument_list|)
expr_stmt|;
block|}
return|return
name|clusterState
return|;
block|}
DECL|method|addRoutingRule
specifier|private
name|ClusterState
name|addRoutingRule
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkCollectionKeyExistence
argument_list|(
name|message
argument_list|)
condition|)
return|return
name|clusterState
return|;
name|String
name|shard
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|String
name|routeKey
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"routeKey"
argument_list|)
decl_stmt|;
name|String
name|range
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"range"
argument_list|)
decl_stmt|;
name|String
name|targetCollection
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"targetCollection"
argument_list|)
decl_stmt|;
name|String
name|targetShard
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"targetShard"
argument_list|)
decl_stmt|;
name|String
name|expireAt
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"expireAt"
argument_list|)
decl_stmt|;
name|Slice
name|slice
init|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Overseer.addRoutingRule unknown collection: "
operator|+
name|collection
operator|+
literal|" slice:"
operator|+
name|shard
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RoutingRule
argument_list|>
name|routingRules
init|=
name|slice
operator|.
name|getRoutingRules
argument_list|()
decl_stmt|;
if|if
condition|(
name|routingRules
operator|==
literal|null
condition|)
name|routingRules
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|RoutingRule
name|r
init|=
name|routingRules
operator|.
name|get
argument_list|(
name|routeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"routeRanges"
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"targetCollection"
argument_list|,
name|targetCollection
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"expireAt"
argument_list|,
name|expireAt
argument_list|)
expr_stmt|;
name|RoutingRule
name|rule
init|=
operator|new
name|RoutingRule
argument_list|(
name|routeKey
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|routingRules
operator|.
name|put
argument_list|(
name|routeKey
argument_list|,
name|rule
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// add this range
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|r
operator|.
name|shallowCopy
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"routeRanges"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"routeRanges"
argument_list|)
operator|+
literal|","
operator|+
name|range
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"expireAt"
argument_list|,
name|expireAt
argument_list|)
expr_stmt|;
name|routingRules
operator|.
name|put
argument_list|(
name|routeKey
argument_list|,
operator|new
name|RoutingRule
argument_list|(
name|routeKey
argument_list|,
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|slice
operator|.
name|shallowCopy
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"routingRules"
argument_list|,
name|routingRules
argument_list|)
expr_stmt|;
name|Slice
name|newSlice
init|=
operator|new
name|Slice
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|slice
operator|.
name|getReplicasCopy
argument_list|()
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|clusterState
operator|=
name|updateSlice
argument_list|(
name|clusterState
argument_list|,
name|collection
argument_list|,
name|newSlice
argument_list|)
expr_stmt|;
return|return
name|clusterState
return|;
block|}
DECL|method|checkCollectionKeyExistence
specifier|private
name|boolean
name|checkCollectionKeyExistence
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|)
block|{
return|return
name|checkKeyExistence
argument_list|(
name|message
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
return|;
block|}
DECL|method|checkKeyExistence
specifier|private
name|boolean
name|checkKeyExistence
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|String
name|value
init|=
name|message
operator|.
name|getStr
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Skipping invalid Overseer message because it has no "
operator|+
name|key
operator|+
literal|" specified: "
operator|+
name|message
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|removeRoutingRule
specifier|private
name|ClusterState
name|removeRoutingRule
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkCollectionKeyExistence
argument_list|(
name|message
argument_list|)
condition|)
return|return
name|clusterState
return|;
name|String
name|shard
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|String
name|routeKeyStr
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"routeKey"
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Overseer.removeRoutingRule invoked for collection: "
operator|+
name|collection
operator|+
literal|" shard: "
operator|+
name|shard
operator|+
literal|" routeKey: "
operator|+
name|routeKeyStr
argument_list|)
expr_stmt|;
name|Slice
name|slice
init|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unknown collection: "
operator|+
name|collection
operator|+
literal|" shard: "
operator|+
name|shard
argument_list|)
expr_stmt|;
return|return
name|clusterState
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RoutingRule
argument_list|>
name|routingRules
init|=
name|slice
operator|.
name|getRoutingRules
argument_list|()
decl_stmt|;
if|if
condition|(
name|routingRules
operator|!=
literal|null
condition|)
block|{
name|routingRules
operator|.
name|remove
argument_list|(
name|routeKeyStr
argument_list|)
expr_stmt|;
comment|// no rules left
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|slice
operator|.
name|shallowCopy
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"routingRules"
argument_list|,
name|routingRules
argument_list|)
expr_stmt|;
name|Slice
name|newSlice
init|=
operator|new
name|Slice
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|slice
operator|.
name|getReplicasCopy
argument_list|()
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|clusterState
operator|=
name|updateSlice
argument_list|(
name|clusterState
argument_list|,
name|collection
argument_list|,
name|newSlice
argument_list|)
expr_stmt|;
block|}
return|return
name|clusterState
return|;
block|}
DECL|method|createShard
specifier|private
name|ClusterState
name|createShard
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkCollectionKeyExistence
argument_list|(
name|message
argument_list|)
condition|)
return|return
name|clusterState
return|;
name|String
name|shardId
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|Slice
name|slice
init|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|replicas
init|=
name|Collections
operator|.
name|EMPTY_MAP
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sliceProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|shardRange
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_RANGE_PROP
argument_list|)
decl_stmt|;
name|String
name|shardState
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_STATE_PROP
argument_list|)
decl_stmt|;
name|String
name|shardParent
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_PARENT_PROP
argument_list|)
decl_stmt|;
name|sliceProps
operator|.
name|put
argument_list|(
name|Slice
operator|.
name|RANGE
argument_list|,
name|shardRange
argument_list|)
expr_stmt|;
name|sliceProps
operator|.
name|put
argument_list|(
name|Slice
operator|.
name|STATE
argument_list|,
name|shardState
argument_list|)
expr_stmt|;
if|if
condition|(
name|shardParent
operator|!=
literal|null
condition|)
block|{
name|sliceProps
operator|.
name|put
argument_list|(
name|Slice
operator|.
name|PARENT
argument_list|,
name|shardParent
argument_list|)
expr_stmt|;
block|}
name|slice
operator|=
operator|new
name|Slice
argument_list|(
name|shardId
argument_list|,
name|replicas
argument_list|,
name|sliceProps
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|updateSlice
argument_list|(
name|clusterState
argument_list|,
name|collection
argument_list|,
name|slice
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to create Shard: "
operator|+
name|shardId
operator|+
literal|" because it already exists in collection: "
operator|+
name|collection
argument_list|)
expr_stmt|;
block|}
return|return
name|clusterState
return|;
block|}
DECL|method|amILeader
specifier|private
name|LeaderStatus
name|amILeader
parameter_list|()
block|{
try|try
block|{
name|ZkNodeProps
name|props
init|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|zkClient
operator|.
name|getData
argument_list|(
literal|"/overseer_elect/leader"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|myId
operator|.
name|equals
argument_list|(
name|props
operator|.
name|getStr
argument_list|(
literal|"id"
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|LeaderStatus
operator|.
name|YES
return|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|CONNECTIONLOSS
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|LeaderStatus
operator|.
name|DONT_KNOW
return|;
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|SESSIONEXPIRED
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"According to ZK I (id="
operator|+
name|myId
operator|+
literal|") am no longer a leader."
argument_list|)
expr_stmt|;
return|return
name|LeaderStatus
operator|.
name|NO
return|;
block|}
DECL|method|updateStateNew
specifier|private
name|ClusterState
name|updateStateNew
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkCollectionKeyExistence
argument_list|(
name|message
argument_list|)
condition|)
return|return
name|clusterState
return|;
name|String
name|sliceName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
operator|||
name|sliceName
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid collection and slice {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
return|return
name|clusterState
return|;
block|}
name|Slice
name|slice
init|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|sliceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"No such slice exists {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
return|return
name|clusterState
return|;
block|}
return|return
name|updateState
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|)
return|;
block|}
comment|/**        * Try to assign core to the cluster.         */
DECL|method|updateState
specifier|private
name|ClusterState
name|updateState
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
specifier|final
name|ZkNodeProps
name|message
parameter_list|)
block|{
specifier|final
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkCollectionKeyExistence
argument_list|(
name|message
argument_list|)
condition|)
return|return
name|clusterState
return|;
name|Integer
name|numShards
init|=
name|message
operator|.
name|getInt
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Update state numShards={} message={}"
argument_list|,
name|numShards
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|shardNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//collection does not yet exist, create placeholders if num shards is specified
name|boolean
name|collectionExists
init|=
name|clusterState
operator|.
name|hasCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|collectionExists
operator|&&
name|numShards
operator|!=
literal|null
condition|)
block|{
name|getShardNames
argument_list|(
name|numShards
argument_list|,
name|shardNames
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|createCollection
argument_list|(
name|clusterState
argument_list|,
name|collection
argument_list|,
name|shardNames
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|String
name|sliceName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|String
name|coreNodeName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|coreNodeName
operator|==
literal|null
condition|)
block|{
name|coreNodeName
operator|=
name|getAssignedCoreNodeName
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|coreNodeName
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"node="
operator|+
name|coreNodeName
operator|+
literal|" is already registered"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if coreNodeName is null, auto assign one
name|coreNodeName
operator|=
name|Assign
operator|.
name|assignNode
argument_list|(
name|collection
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|,
name|coreNodeName
argument_list|)
expr_stmt|;
block|}
comment|// use the provided non null shardId
if|if
condition|(
name|sliceName
operator|==
literal|null
condition|)
block|{
comment|//get shardId from ClusterState
name|sliceName
operator|=
name|getAssignedId
argument_list|(
name|clusterState
argument_list|,
name|coreNodeName
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|sliceName
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"shard="
operator|+
name|sliceName
operator|+
literal|" is already registered"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sliceName
operator|==
literal|null
condition|)
block|{
comment|//request new shardId
if|if
condition|(
name|collectionExists
condition|)
block|{
comment|// use existing numShards
name|numShards
operator|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collection
argument_list|)
operator|.
name|getSlices
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Collection already exists with "
operator|+
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
operator|+
literal|"="
operator|+
name|numShards
argument_list|)
expr_stmt|;
block|}
name|sliceName
operator|=
name|Assign
operator|.
name|assignShard
argument_list|(
name|collection
argument_list|,
name|clusterState
argument_list|,
name|numShards
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Assigning new node to shard shard="
operator|+
name|sliceName
argument_list|)
expr_stmt|;
block|}
name|Slice
name|slice
init|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|sliceName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|replicaProps
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|replicaProps
operator|.
name|putAll
argument_list|(
name|message
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
comment|// System.out.println("########## UPDATE MESSAGE: " + JSONUtil.toJSON(message));
if|if
condition|(
name|slice
operator|!=
literal|null
condition|)
block|{
name|Replica
name|oldReplica
init|=
name|slice
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|get
argument_list|(
name|coreNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldReplica
operator|!=
literal|null
operator|&&
name|oldReplica
operator|.
name|containsKey
argument_list|(
name|ZkStateReader
operator|.
name|LEADER_PROP
argument_list|)
condition|)
block|{
name|replicaProps
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|LEADER_PROP
argument_list|,
name|oldReplica
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|LEADER_PROP
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we don't put these in the clusterstate
name|replicaProps
operator|.
name|remove
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|)
expr_stmt|;
name|replicaProps
operator|.
name|remove
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|)
expr_stmt|;
name|replicaProps
operator|.
name|remove
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
expr_stmt|;
name|replicaProps
operator|.
name|remove
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
expr_stmt|;
name|replicaProps
operator|.
name|remove
argument_list|(
name|QUEUE_OPERATION
argument_list|)
expr_stmt|;
comment|// remove any props with null values
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entrySet
init|=
name|replicaProps
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|removeKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|entrySet
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
name|removeKeys
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|removeKey
range|:
name|removeKeys
control|)
block|{
name|replicaProps
operator|.
name|remove
argument_list|(
name|removeKey
argument_list|)
expr_stmt|;
block|}
name|replicaProps
operator|.
name|remove
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|)
expr_stmt|;
comment|// remove shard specific properties
name|String
name|shardRange
init|=
operator|(
name|String
operator|)
name|replicaProps
operator|.
name|remove
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_RANGE_PROP
argument_list|)
decl_stmt|;
name|String
name|shardState
init|=
operator|(
name|String
operator|)
name|replicaProps
operator|.
name|remove
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_STATE_PROP
argument_list|)
decl_stmt|;
name|String
name|shardParent
init|=
operator|(
name|String
operator|)
name|replicaProps
operator|.
name|remove
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_PARENT_PROP
argument_list|)
decl_stmt|;
name|Replica
name|replica
init|=
operator|new
name|Replica
argument_list|(
name|coreNodeName
argument_list|,
name|replicaProps
argument_list|)
decl_stmt|;
comment|// TODO: where do we get slice properties in this message?  or should there be a separate create-slice message if we want that?
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sliceProps
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|replicas
decl_stmt|;
if|if
condition|(
name|slice
operator|!=
literal|null
condition|)
block|{
name|clusterState
operator|=
name|checkAndCompleteShardSplit
argument_list|(
name|clusterState
argument_list|,
name|collection
argument_list|,
name|coreNodeName
argument_list|,
name|sliceName
argument_list|,
name|replicaProps
argument_list|)
expr_stmt|;
comment|// get the current slice again because it may have been updated due to checkAndCompleteShardSplit method
name|slice
operator|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|sliceName
argument_list|)
expr_stmt|;
name|sliceProps
operator|=
name|slice
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|replicas
operator|=
name|slice
operator|.
name|getReplicasCopy
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|replicas
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sliceProps
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|sliceProps
operator|.
name|put
argument_list|(
name|Slice
operator|.
name|RANGE
argument_list|,
name|shardRange
argument_list|)
expr_stmt|;
name|sliceProps
operator|.
name|put
argument_list|(
name|Slice
operator|.
name|STATE
argument_list|,
name|shardState
argument_list|)
expr_stmt|;
name|sliceProps
operator|.
name|put
argument_list|(
name|Slice
operator|.
name|PARENT
argument_list|,
name|shardParent
argument_list|)
expr_stmt|;
block|}
name|replicas
operator|.
name|put
argument_list|(
name|replica
operator|.
name|getName
argument_list|()
argument_list|,
name|replica
argument_list|)
expr_stmt|;
name|slice
operator|=
operator|new
name|Slice
argument_list|(
name|sliceName
argument_list|,
name|replicas
argument_list|,
name|sliceProps
argument_list|)
expr_stmt|;
name|ClusterState
name|newClusterState
init|=
name|updateSlice
argument_list|(
name|clusterState
argument_list|,
name|collection
argument_list|,
name|slice
argument_list|)
decl_stmt|;
return|return
name|newClusterState
return|;
block|}
DECL|method|checkAndCompleteShardSplit
specifier|private
name|ClusterState
name|checkAndCompleteShardSplit
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|coreNodeName
parameter_list|,
name|String
name|sliceName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|replicaProps
parameter_list|)
block|{
name|Slice
name|slice
init|=
name|state
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|sliceName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sliceProps
init|=
name|slice
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|String
name|sliceState
init|=
name|slice
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|Slice
operator|.
name|RECOVERY
operator|.
name|equals
argument_list|(
name|sliceState
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Shard: {} is in recovery state"
argument_list|,
name|sliceName
argument_list|)
expr_stmt|;
comment|// is this replica active?
if|if
condition|(
name|ZkStateReader
operator|.
name|ACTIVE
operator|.
name|equals
argument_list|(
name|replicaProps
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Shard: {} is in recovery state and coreNodeName: {} is active"
argument_list|,
name|sliceName
argument_list|,
name|coreNodeName
argument_list|)
expr_stmt|;
comment|// are all other replicas also active?
name|boolean
name|allActive
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|entry
range|:
name|slice
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|coreNodeName
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|Slice
operator|.
name|ACTIVE
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getStr
argument_list|(
name|Slice
operator|.
name|STATE
argument_list|)
argument_list|)
condition|)
block|{
name|allActive
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|allActive
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Shard: {} - all replicas are active. Finding status of fellow sub-shards"
argument_list|,
name|sliceName
argument_list|)
expr_stmt|;
comment|// find out about other sub shards
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|allSlicesCopy
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|state
operator|.
name|getSlicesMap
argument_list|(
name|collection
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Slice
argument_list|>
name|subShardSlices
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|outer
label|:
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|entry
range|:
name|allSlicesCopy
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|sliceName
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Slice
name|otherSlice
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|Slice
operator|.
name|RECOVERY
operator|.
name|equals
argument_list|(
name|otherSlice
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|slice
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
operator|&&
name|slice
operator|.
name|getParent
argument_list|()
operator|.
name|equals
argument_list|(
name|otherSlice
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Shard: {} - Fellow sub-shard: {} found"
argument_list|,
name|sliceName
argument_list|,
name|otherSlice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// this is a fellow sub shard so check if all replicas are active
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|sliceEntry
range|:
name|otherSlice
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ZkStateReader
operator|.
name|ACTIVE
operator|.
name|equals
argument_list|(
name|sliceEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
argument_list|)
condition|)
block|{
name|allActive
operator|=
literal|false
expr_stmt|;
break|break
name|outer
break|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Shard: {} - Fellow sub-shard: {} has all replicas active"
argument_list|,
name|sliceName
argument_list|,
name|otherSlice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|subShardSlices
operator|.
name|add
argument_list|(
name|otherSlice
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|allActive
condition|)
block|{
comment|// hurray, all sub shard replicas are active
name|log
operator|.
name|info
argument_list|(
literal|"Shard: {} - All replicas across all fellow sub-shards are now ACTIVE. Preparing to switch shard states."
argument_list|,
name|sliceName
argument_list|)
expr_stmt|;
name|String
name|parentSliceName
init|=
operator|(
name|String
operator|)
name|sliceProps
operator|.
name|remove
argument_list|(
name|Slice
operator|.
name|PARENT
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
literal|"updateshardstate"
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|parentSliceName
argument_list|,
name|Slice
operator|.
name|INACTIVE
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|sliceName
argument_list|,
name|Slice
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
for|for
control|(
name|Slice
name|subShardSlice
range|:
name|subShardSlices
control|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|subShardSlice
operator|.
name|getName
argument_list|()
argument_list|,
name|Slice
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
decl_stmt|;
name|state
operator|=
name|updateShardState
argument_list|(
name|state
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|state
return|;
block|}
DECL|method|createCollection
specifier|private
name|ClusterState
name|createCollection
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|shards
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Create collection {} with shards {}"
argument_list|,
name|collectionName
argument_list|,
name|shards
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|routerSpec
init|=
name|DocRouter
operator|.
name|getRouterSpec
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|String
name|routerName
init|=
name|routerSpec
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|==
literal|null
condition|?
name|DocRouter
operator|.
name|DEFAULT_NAME
else|:
operator|(
name|String
operator|)
name|routerSpec
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|DocRouter
name|router
init|=
name|DocRouter
operator|.
name|getDocRouter
argument_list|(
name|routerName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DocRouter
operator|.
name|Range
argument_list|>
name|ranges
init|=
name|router
operator|.
name|partitionRange
argument_list|(
name|shards
operator|.
name|size
argument_list|()
argument_list|,
name|router
operator|.
name|fullRange
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|newSlices
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shards
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|sliceName
init|=
name|shards
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sliceProps
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|sliceProps
operator|.
name|put
argument_list|(
name|Slice
operator|.
name|RANGE
argument_list|,
name|ranges
operator|==
literal|null
condition|?
literal|null
else|:
name|ranges
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|newSlices
operator|.
name|put
argument_list|(
name|sliceName
argument_list|,
operator|new
name|Slice
argument_list|(
name|sliceName
argument_list|,
literal|null
argument_list|,
name|sliceProps
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: fill in with collection properties read from the /collections/<collectionName> node
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collectionProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|OverseerCollectionProcessor
operator|.
name|COLL_PROPS
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|val
init|=
name|message
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
name|OverseerCollectionProcessor
operator|.
name|COLL_PROPS
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
name|collectionProps
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
name|collectionProps
operator|.
name|put
argument_list|(
name|DocCollection
operator|.
name|DOC_ROUTER
argument_list|,
name|routerSpec
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|getStr
argument_list|(
literal|"fromApi"
argument_list|)
operator|==
literal|null
condition|)
name|collectionProps
operator|.
name|put
argument_list|(
literal|"autoCreated"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DocCollection
name|newCollection
init|=
operator|new
name|DocCollection
argument_list|(
name|collectionName
argument_list|,
name|newSlices
argument_list|,
name|collectionProps
argument_list|,
name|router
argument_list|)
decl_stmt|;
return|return
name|newState
argument_list|(
name|state
argument_list|,
name|singletonMap
argument_list|(
name|newCollection
operator|.
name|getName
argument_list|()
argument_list|,
name|newCollection
argument_list|)
argument_list|)
return|;
block|}
comment|/*        * Return an already assigned id or null if not assigned        */
DECL|method|getAssignedId
specifier|private
name|String
name|getAssignedId
parameter_list|(
specifier|final
name|ClusterState
name|state
parameter_list|,
specifier|final
name|String
name|nodeName
parameter_list|,
specifier|final
name|ZkNodeProps
name|coreState
parameter_list|)
block|{
name|Collection
argument_list|<
name|Slice
argument_list|>
name|slices
init|=
name|state
operator|.
name|getSlices
argument_list|(
name|coreState
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|slices
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Slice
name|slice
range|:
name|slices
control|)
block|{
if|if
condition|(
name|slice
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|get
argument_list|(
name|nodeName
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|slice
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getAssignedCoreNodeName
specifier|private
name|String
name|getAssignedCoreNodeName
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
name|Collection
argument_list|<
name|Slice
argument_list|>
name|slices
init|=
name|state
operator|.
name|getSlices
argument_list|(
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|slices
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Slice
name|slice
range|:
name|slices
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
name|String
name|nodeName
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
decl_stmt|;
name|String
name|core
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
name|String
name|msgNodeName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
decl_stmt|;
name|String
name|msgCore
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeName
operator|.
name|equals
argument_list|(
name|msgNodeName
argument_list|)
operator|&&
name|core
operator|.
name|equals
argument_list|(
name|msgCore
argument_list|)
condition|)
block|{
return|return
name|replica
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|updateSlice
specifier|private
name|ClusterState
name|updateSlice
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|Slice
name|slice
parameter_list|)
block|{
comment|// System.out.println("###!!!### OLD CLUSTERSTATE: " + JSONUtil.toJSON(state.getCollectionStates()));
comment|// System.out.println("Updating slice:" + slice);
name|DocCollection
name|coll
init|=
name|state
operator|.
name|getCollectionOrNull
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
decl_stmt|;
name|DocRouter
name|router
decl_stmt|;
if|if
condition|(
name|coll
operator|==
literal|null
condition|)
block|{
comment|//  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself
comment|// without explicitly creating a collection.  In this current case, we assume custom sharding with an "implicit" router.
name|slices
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|props
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|DocCollection
operator|.
name|DOC_ROUTER
argument_list|,
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
literal|"name"
argument_list|,
name|ImplicitDocRouter
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|router
operator|=
operator|new
name|ImplicitDocRouter
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|props
operator|=
name|coll
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|router
operator|=
name|coll
operator|.
name|getRouter
argument_list|()
expr_stmt|;
name|slices
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|coll
operator|.
name|getSlicesMap
argument_list|()
argument_list|)
expr_stmt|;
comment|// make a shallow copy
block|}
name|slices
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|slice
argument_list|)
expr_stmt|;
name|DocCollection
name|newCollection
init|=
operator|new
name|DocCollection
argument_list|(
name|collectionName
argument_list|,
name|slices
argument_list|,
name|props
argument_list|,
name|router
argument_list|)
decl_stmt|;
comment|// System.out.println("###!!!### NEW CLUSTERSTATE: " + JSONUtil.toJSON(newCollections));
return|return
name|newState
argument_list|(
name|state
argument_list|,
name|singletonMap
argument_list|(
name|collectionName
argument_list|,
name|newCollection
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setShardLeader
specifier|private
name|ClusterState
name|setShardLeader
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|String
name|sliceName
parameter_list|,
name|String
name|leaderUrl
parameter_list|)
block|{
name|DocCollection
name|coll
init|=
name|state
operator|.
name|getCollectionOrNull
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|coll
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not mark shard leader for non existing collection:"
operator|+
name|collectionName
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|coll
operator|.
name|getSlicesMap
argument_list|()
decl_stmt|;
comment|// make a shallow copy and add it to the new collection
name|slices
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|slices
argument_list|)
expr_stmt|;
name|Slice
name|slice
init|=
name|slices
operator|.
name|get
argument_list|(
name|sliceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
name|slice
operator|=
name|coll
operator|.
name|getSlice
argument_list|(
name|sliceName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not mark leader for non existing/active slice:"
operator|+
name|sliceName
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
else|else
block|{
comment|// TODO: consider just putting the leader property on the shard, not on individual replicas
name|Replica
name|oldLeader
init|=
name|slice
operator|.
name|getLeader
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|newReplicas
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Replica
name|replica
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
comment|// TODO: this should only be calculated once and cached somewhere?
name|String
name|coreURL
init|=
name|ZkCoreNodeProps
operator|.
name|getCoreUrl
argument_list|(
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
argument_list|,
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|replica
operator|==
name|oldLeader
operator|&&
operator|!
name|coreURL
operator|.
name|equals
argument_list|(
name|leaderUrl
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|replicaProps
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|replica
operator|.
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
name|replicaProps
operator|.
name|remove
argument_list|(
name|Slice
operator|.
name|LEADER
argument_list|)
expr_stmt|;
name|replica
operator|=
operator|new
name|Replica
argument_list|(
name|replica
operator|.
name|getName
argument_list|()
argument_list|,
name|replicaProps
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|coreURL
operator|.
name|equals
argument_list|(
name|leaderUrl
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|replicaProps
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|replica
operator|.
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
name|replicaProps
operator|.
name|put
argument_list|(
name|Slice
operator|.
name|LEADER
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// TODO: allow booleans instead of strings
name|replica
operator|=
operator|new
name|Replica
argument_list|(
name|replica
operator|.
name|getName
argument_list|()
argument_list|,
name|replicaProps
argument_list|)
expr_stmt|;
block|}
name|newReplicas
operator|.
name|put
argument_list|(
name|replica
operator|.
name|getName
argument_list|()
argument_list|,
name|replica
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|newSliceProps
init|=
name|slice
operator|.
name|shallowCopy
argument_list|()
decl_stmt|;
name|newSliceProps
operator|.
name|put
argument_list|(
name|Slice
operator|.
name|REPLICAS
argument_list|,
name|newReplicas
argument_list|)
expr_stmt|;
name|Slice
name|newSlice
init|=
operator|new
name|Slice
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|newReplicas
argument_list|,
name|slice
operator|.
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
name|slices
operator|.
name|put
argument_list|(
name|newSlice
operator|.
name|getName
argument_list|()
argument_list|,
name|newSlice
argument_list|)
expr_stmt|;
block|}
name|DocCollection
name|newCollection
init|=
operator|new
name|DocCollection
argument_list|(
name|coll
operator|.
name|getName
argument_list|()
argument_list|,
name|slices
argument_list|,
name|coll
operator|.
name|getProperties
argument_list|()
argument_list|,
name|coll
operator|.
name|getRouter
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|newState
argument_list|(
name|state
argument_list|,
name|singletonMap
argument_list|(
name|collectionName
argument_list|,
name|newCollection
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newState
specifier|private
name|ClusterState
name|newState
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|DocCollection
argument_list|>
name|colls
parameter_list|)
block|{
return|return
name|state
operator|.
name|copyWith
argument_list|(
name|colls
argument_list|)
return|;
block|}
comment|/*        * Remove collection from cloudstate        */
DECL|method|removeCollection
specifier|private
name|ClusterState
name|removeCollection
parameter_list|(
specifier|final
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
specifier|final
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkKeyExistence
argument_list|(
name|message
argument_list|,
literal|"name"
argument_list|)
condition|)
return|return
name|clusterState
return|;
name|DocCollection
name|coll
init|=
name|clusterState
operator|.
name|getCollectionOrNull
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|coll
operator|!=
literal|null
condition|)
block|{
return|return
name|clusterState
operator|.
name|copyWith
argument_list|(
name|singletonMap
argument_list|(
name|collection
argument_list|,
operator|(
name|DocCollection
operator|)
literal|null
argument_list|)
argument_list|)
return|;
block|}
return|return
name|clusterState
return|;
block|}
comment|/*      * Remove collection slice from cloudstate      */
DECL|method|removeShard
specifier|private
name|ClusterState
name|removeShard
parameter_list|(
specifier|final
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
specifier|final
name|String
name|sliceId
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
specifier|final
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkCollectionKeyExistence
argument_list|(
name|message
argument_list|)
condition|)
return|return
name|clusterState
return|;
name|log
operator|.
name|info
argument_list|(
literal|"Removing collection: "
operator|+
name|collection
operator|+
literal|" shard: "
operator|+
name|sliceId
operator|+
literal|" from clusterstate"
argument_list|)
expr_stmt|;
name|DocCollection
name|coll
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|newSlices
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|coll
operator|.
name|getSlicesMap
argument_list|()
argument_list|)
decl_stmt|;
name|newSlices
operator|.
name|remove
argument_list|(
name|sliceId
argument_list|)
expr_stmt|;
name|DocCollection
name|newCollection
init|=
operator|new
name|DocCollection
argument_list|(
name|coll
operator|.
name|getName
argument_list|()
argument_list|,
name|newSlices
argument_list|,
name|coll
operator|.
name|getProperties
argument_list|()
argument_list|,
name|coll
operator|.
name|getRouter
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|newState
argument_list|(
name|clusterState
argument_list|,
name|singletonMap
argument_list|(
name|collection
argument_list|,
name|newCollection
argument_list|)
argument_list|)
return|;
block|}
comment|/*        * Remove core from cloudstate        */
DECL|method|removeCore
specifier|private
name|ClusterState
name|removeCore
parameter_list|(
specifier|final
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
block|{
specifier|final
name|String
name|cnn
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|)
decl_stmt|;
specifier|final
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkCollectionKeyExistence
argument_list|(
name|message
argument_list|)
condition|)
return|return
name|clusterState
return|;
comment|//        final Map<String, DocCollection> newCollections = new LinkedHashMap<>(clusterState.getCollectionStates()); // shallow copy
comment|//        DocCollection coll = newCollections.get(collection);
name|DocCollection
name|coll
init|=
name|clusterState
operator|.
name|getCollectionOrNull
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|coll
operator|==
literal|null
condition|)
block|{
comment|// TODO: log/error that we didn't find it?
comment|// just in case, remove the zk collection node
try|try
block|{
name|zkClient
operator|.
name|clean
argument_list|(
literal|"/collections/"
operator|+
name|collection
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Cleaning up collection in zk was interrupted:"
operator|+
name|collection
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Problem cleaning up collection in zk:"
operator|+
name|collection
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|clusterState
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|newSlices
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|lastSlice
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|coll
operator|.
name|getSlices
argument_list|()
control|)
block|{
name|Replica
name|replica
init|=
name|slice
operator|.
name|getReplica
argument_list|(
name|cnn
argument_list|)
decl_stmt|;
if|if
condition|(
name|replica
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|newReplicas
init|=
name|slice
operator|.
name|getReplicasCopy
argument_list|()
decl_stmt|;
name|newReplicas
operator|.
name|remove
argument_list|(
name|cnn
argument_list|)
expr_stmt|;
comment|// TODO TODO TODO!!! if there are no replicas left for the slice, and the slice has no hash range, remove it
comment|// if (newReplicas.size() == 0&& slice.getRange() == null) {
comment|// if there are no replicas left for the slice remove it
if|if
condition|(
name|newReplicas
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|slice
operator|=
literal|null
expr_stmt|;
name|lastSlice
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|slice
operator|=
operator|new
name|Slice
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|newReplicas
argument_list|,
name|slice
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|slice
operator|!=
literal|null
condition|)
block|{
name|newSlices
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|slice
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lastSlice
condition|)
block|{
comment|// remove all empty pre allocated slices
for|for
control|(
name|Slice
name|slice
range|:
name|coll
operator|.
name|getSlices
argument_list|()
control|)
block|{
if|if
condition|(
name|slice
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|newSlices
operator|.
name|remove
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// if there are no slices left in the collection, remove it?
if|if
condition|(
name|newSlices
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// TODO: it might be better logically to have this in ZkController
comment|// but for tests (it's easier) it seems better for the moment to leave CoreContainer and/or
comment|// ZkController out of the Overseer.
try|try
block|{
name|zkClient
operator|.
name|clean
argument_list|(
literal|"/collections/"
operator|+
name|collection
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Cleaning up collection in zk was interrupted:"
operator|+
name|collection
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Problem cleaning up collection in zk:"
operator|+
name|collection
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|newState
argument_list|(
name|clusterState
argument_list|,
name|singletonMap
argument_list|(
name|collection
argument_list|,
operator|(
name|DocCollection
operator|)
literal|null
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|DocCollection
name|newCollection
init|=
operator|new
name|DocCollection
argument_list|(
name|coll
operator|.
name|getName
argument_list|()
argument_list|,
name|newSlices
argument_list|,
name|coll
operator|.
name|getProperties
argument_list|()
argument_list|,
name|coll
operator|.
name|getRouter
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|newState
argument_list|(
name|clusterState
argument_list|,
name|singletonMap
argument_list|(
name|collection
argument_list|,
name|newCollection
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|this
operator|.
name|isClosed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isClosed
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|this
operator|.
name|isClosed
return|;
block|}
block|}
DECL|method|getShardNames
specifier|static
name|void
name|getShardNames
parameter_list|(
name|Integer
name|numShards
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|shardNames
parameter_list|)
block|{
if|if
condition|(
name|numShards
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"numShards"
operator|+
literal|" is a required param"
argument_list|)
throw|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numShards
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|sliceName
init|=
literal|"shard"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
decl_stmt|;
name|shardNames
operator|.
name|add
argument_list|(
name|sliceName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getShardNames
specifier|static
name|void
name|getShardNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|shardNames
parameter_list|,
name|String
name|shards
parameter_list|)
block|{
if|if
condition|(
name|shards
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"shards"
operator|+
literal|" is a required param"
argument_list|)
throw|;
for|for
control|(
name|String
name|s
range|:
name|shards
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|s
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|shardNames
operator|.
name|add
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shardNames
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"shards"
operator|+
literal|" is a required param"
argument_list|)
throw|;
block|}
DECL|class|OverseerThread
class|class
name|OverseerThread
extends|extends
name|Thread
implements|implements
name|ClosableThread
block|{
DECL|field|isClosed
specifier|protected
specifier|volatile
name|boolean
name|isClosed
decl_stmt|;
DECL|field|thread
specifier|private
name|ClosableThread
name|thread
decl_stmt|;
DECL|method|OverseerThread
specifier|public
name|OverseerThread
parameter_list|(
name|ThreadGroup
name|tg
parameter_list|,
name|ClosableThread
name|thread
parameter_list|)
block|{
name|super
argument_list|(
name|tg
argument_list|,
operator|(
name|Runnable
operator|)
name|thread
argument_list|)
expr_stmt|;
name|this
operator|.
name|thread
operator|=
name|thread
expr_stmt|;
block|}
DECL|method|OverseerThread
specifier|public
name|OverseerThread
parameter_list|(
name|ThreadGroup
name|ccTg
parameter_list|,
name|ClosableThread
name|thread
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|ccTg
argument_list|,
operator|(
name|Runnable
operator|)
name|thread
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|thread
operator|=
name|thread
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|thread
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|isClosed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isClosed
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|this
operator|.
name|isClosed
return|;
block|}
block|}
DECL|field|ccThread
specifier|private
specifier|volatile
name|OverseerThread
name|ccThread
decl_stmt|;
DECL|field|updaterThread
specifier|private
specifier|volatile
name|OverseerThread
name|updaterThread
decl_stmt|;
DECL|field|reader
specifier|private
name|ZkStateReader
name|reader
decl_stmt|;
DECL|field|shardHandler
specifier|private
name|ShardHandler
name|shardHandler
decl_stmt|;
DECL|field|adminPath
specifier|private
name|String
name|adminPath
decl_stmt|;
DECL|field|overseerCollectionProcessor
specifier|private
name|OverseerCollectionProcessor
name|overseerCollectionProcessor
decl_stmt|;
DECL|field|zkController
specifier|private
name|ZkController
name|zkController
decl_stmt|;
DECL|field|stats
specifier|private
name|Stats
name|stats
decl_stmt|;
comment|// overseer not responsible for closing reader
DECL|method|Overseer
specifier|public
name|Overseer
parameter_list|(
name|ShardHandler
name|shardHandler
parameter_list|,
name|String
name|adminPath
parameter_list|,
specifier|final
name|ZkStateReader
name|reader
parameter_list|,
name|ZkController
name|zkController
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|shardHandler
operator|=
name|shardHandler
expr_stmt|;
name|this
operator|.
name|adminPath
operator|=
name|adminPath
expr_stmt|;
name|this
operator|.
name|zkController
operator|=
name|zkController
expr_stmt|;
name|this
operator|.
name|stats
operator|=
operator|new
name|Stats
argument_list|()
expr_stmt|;
block|}
DECL|method|start
specifier|public
name|void
name|start
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|close
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Overseer (id="
operator|+
name|id
operator|+
literal|") starting"
argument_list|)
expr_stmt|;
name|createOverseerNode
argument_list|(
name|reader
operator|.
name|getZkClient
argument_list|()
argument_list|)
expr_stmt|;
comment|//launch cluster state updater thread
name|ThreadGroup
name|tg
init|=
operator|new
name|ThreadGroup
argument_list|(
literal|"Overseer state updater."
argument_list|)
decl_stmt|;
name|updaterThread
operator|=
operator|new
name|OverseerThread
argument_list|(
name|tg
argument_list|,
operator|new
name|ClusterStateUpdater
argument_list|(
name|reader
argument_list|,
name|id
argument_list|,
name|stats
argument_list|)
argument_list|)
expr_stmt|;
name|updaterThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ThreadGroup
name|ccTg
init|=
operator|new
name|ThreadGroup
argument_list|(
literal|"Overseer collection creation process."
argument_list|)
decl_stmt|;
name|overseerCollectionProcessor
operator|=
operator|new
name|OverseerCollectionProcessor
argument_list|(
name|reader
argument_list|,
name|id
argument_list|,
name|shardHandler
argument_list|,
name|adminPath
argument_list|,
name|stats
argument_list|)
expr_stmt|;
name|ccThread
operator|=
operator|new
name|OverseerThread
argument_list|(
name|ccTg
argument_list|,
name|overseerCollectionProcessor
argument_list|,
literal|"Overseer-"
operator|+
name|id
argument_list|)
expr_stmt|;
name|ccThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updaterThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|ccThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|getUpdaterThread
specifier|public
name|OverseerThread
name|getUpdaterThread
parameter_list|()
block|{
return|return
name|updaterThread
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|updaterThread
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|updaterThread
operator|.
name|close
argument_list|()
expr_stmt|;
name|updaterThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error closing updaterThread"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|ccThread
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ccThread
operator|.
name|close
argument_list|()
expr_stmt|;
name|ccThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error closing ccThread"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|updaterThread
operator|=
literal|null
expr_stmt|;
name|ccThread
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Get queue that can be used to send messages to Overseer.    */
DECL|method|getInQueue
specifier|public
specifier|static
name|DistributedQueue
name|getInQueue
parameter_list|(
specifier|final
name|SolrZkClient
name|zkClient
parameter_list|)
block|{
return|return
name|getInQueue
argument_list|(
name|zkClient
argument_list|,
operator|new
name|Stats
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getInQueue
specifier|static
name|DistributedQueue
name|getInQueue
parameter_list|(
specifier|final
name|SolrZkClient
name|zkClient
parameter_list|,
name|Stats
name|zkStats
parameter_list|)
block|{
name|createOverseerNode
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
return|return
operator|new
name|DistributedQueue
argument_list|(
name|zkClient
argument_list|,
literal|"/overseer/queue"
argument_list|,
literal|null
argument_list|,
name|zkStats
argument_list|)
return|;
block|}
comment|/* Internal queue, not to be used outside of Overseer */
DECL|method|getInternalQueue
specifier|static
name|DistributedQueue
name|getInternalQueue
parameter_list|(
specifier|final
name|SolrZkClient
name|zkClient
parameter_list|,
name|Stats
name|zkStats
parameter_list|)
block|{
name|createOverseerNode
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
return|return
operator|new
name|DistributedQueue
argument_list|(
name|zkClient
argument_list|,
literal|"/overseer/queue-work"
argument_list|,
literal|null
argument_list|,
name|zkStats
argument_list|)
return|;
block|}
comment|/* Internal map for failed tasks, not to be used outside of the Overseer */
DECL|method|getRunningMap
specifier|static
name|DistributedMap
name|getRunningMap
parameter_list|(
specifier|final
name|SolrZkClient
name|zkClient
parameter_list|)
block|{
name|createOverseerNode
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
return|return
operator|new
name|DistributedMap
argument_list|(
name|zkClient
argument_list|,
literal|"/overseer/collection-map-running"
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/* Internal map for successfully completed tasks, not to be used outside of the Overseer */
DECL|method|getCompletedMap
specifier|static
name|DistributedMap
name|getCompletedMap
parameter_list|(
specifier|final
name|SolrZkClient
name|zkClient
parameter_list|)
block|{
name|createOverseerNode
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
return|return
operator|new
name|DistributedMap
argument_list|(
name|zkClient
argument_list|,
literal|"/overseer/collection-map-completed"
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/* Internal map for failed tasks, not to be used outside of the Overseer */
DECL|method|getFailureMap
specifier|static
name|DistributedMap
name|getFailureMap
parameter_list|(
specifier|final
name|SolrZkClient
name|zkClient
parameter_list|)
block|{
name|createOverseerNode
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
return|return
operator|new
name|DistributedMap
argument_list|(
name|zkClient
argument_list|,
literal|"/overseer/collection-map-failure"
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/* Collection creation queue */
DECL|method|getCollectionQueue
specifier|static
name|DistributedQueue
name|getCollectionQueue
parameter_list|(
specifier|final
name|SolrZkClient
name|zkClient
parameter_list|)
block|{
return|return
name|getCollectionQueue
argument_list|(
name|zkClient
argument_list|,
operator|new
name|Stats
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getCollectionQueue
specifier|static
name|DistributedQueue
name|getCollectionQueue
parameter_list|(
specifier|final
name|SolrZkClient
name|zkClient
parameter_list|,
name|Stats
name|zkStats
parameter_list|)
block|{
name|createOverseerNode
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
return|return
operator|new
name|DistributedQueue
argument_list|(
name|zkClient
argument_list|,
literal|"/overseer/collection-queue-work"
argument_list|,
literal|null
argument_list|,
name|zkStats
argument_list|)
return|;
block|}
DECL|method|createOverseerNode
specifier|private
specifier|static
name|void
name|createOverseerNode
parameter_list|(
specifier|final
name|SolrZkClient
name|zkClient
parameter_list|)
block|{
try|try
block|{
name|zkClient
operator|.
name|create
argument_list|(
literal|"/overseer"
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NodeExistsException
name|e
parameter_list|)
block|{
comment|//ok
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not create Overseer node"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not create Overseer node"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|isLegacy
specifier|public
specifier|static
name|boolean
name|isLegacy
parameter_list|(
name|Map
name|clusterProps
parameter_list|)
block|{
return|return
operator|!
literal|"false"
operator|.
name|equals
argument_list|(
name|clusterProps
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|LEGACY_CLOUD
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getZkStateReader
specifier|public
name|ZkStateReader
name|getZkStateReader
parameter_list|()
block|{
return|return
name|reader
return|;
block|}
comment|/**    * Used to hold statistics about overseer operations. It will be exposed    * to the OverseerCollectionProcessor to return statistics.    *    * This is experimental API and subject to change.    */
DECL|class|Stats
specifier|public
specifier|static
class|class
name|Stats
block|{
DECL|field|MAX_STORED_FAILURES
specifier|static
specifier|final
name|int
name|MAX_STORED_FAILURES
init|=
literal|10
decl_stmt|;
DECL|field|stats
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Stat
argument_list|>
name|stats
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Stat
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|getStats
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Stat
argument_list|>
name|getStats
parameter_list|()
block|{
return|return
name|stats
return|;
block|}
DECL|method|getSuccessCount
specifier|public
name|int
name|getSuccessCount
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|Stat
name|stat
init|=
name|stats
operator|.
name|get
argument_list|(
name|operation
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|stat
operator|==
literal|null
condition|?
literal|0
else|:
name|stat
operator|.
name|success
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getErrorCount
specifier|public
name|int
name|getErrorCount
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|Stat
name|stat
init|=
name|stats
operator|.
name|get
argument_list|(
name|operation
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|stat
operator|==
literal|null
condition|?
literal|0
else|:
name|stat
operator|.
name|errors
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|success
specifier|public
name|void
name|success
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|String
name|op
init|=
name|operation
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|stats
init|)
block|{
name|Stat
name|stat
init|=
name|stats
operator|.
name|get
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|==
literal|null
condition|)
block|{
name|stat
operator|=
operator|new
name|Stat
argument_list|()
expr_stmt|;
name|stats
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
name|stat
operator|.
name|success
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|error
specifier|public
name|void
name|error
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|String
name|op
init|=
name|operation
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|stats
init|)
block|{
name|Stat
name|stat
init|=
name|stats
operator|.
name|get
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|==
literal|null
condition|)
block|{
name|stat
operator|=
operator|new
name|Stat
argument_list|()
expr_stmt|;
name|stats
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
name|stat
operator|.
name|errors
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|time
specifier|public
name|TimerContext
name|time
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|String
name|op
init|=
name|operation
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|Stat
name|stat
decl_stmt|;
synchronized|synchronized
init|(
name|stats
init|)
block|{
name|stat
operator|=
name|stats
operator|.
name|get
argument_list|(
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|stat
operator|==
literal|null
condition|)
block|{
name|stat
operator|=
operator|new
name|Stat
argument_list|()
expr_stmt|;
name|stats
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|stat
operator|.
name|requestTime
operator|.
name|time
argument_list|()
return|;
block|}
DECL|method|storeFailureDetails
specifier|public
name|void
name|storeFailureDetails
parameter_list|(
name|String
name|operation
parameter_list|,
name|ZkNodeProps
name|request
parameter_list|,
name|SolrResponse
name|resp
parameter_list|)
block|{
name|String
name|op
init|=
name|operation
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|Stat
name|stat
decl_stmt|;
synchronized|synchronized
init|(
name|stats
init|)
block|{
name|stat
operator|=
name|stats
operator|.
name|get
argument_list|(
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|stat
operator|==
literal|null
condition|)
block|{
name|stat
operator|=
operator|new
name|Stat
argument_list|()
expr_stmt|;
name|stats
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
name|LinkedList
argument_list|<
name|FailedOp
argument_list|>
name|failedOps
init|=
name|stat
operator|.
name|failureDetails
decl_stmt|;
synchronized|synchronized
init|(
name|failedOps
init|)
block|{
if|if
condition|(
name|failedOps
operator|.
name|size
argument_list|()
operator|>=
name|MAX_STORED_FAILURES
condition|)
block|{
name|failedOps
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
block|}
name|failedOps
operator|.
name|addLast
argument_list|(
operator|new
name|FailedOp
argument_list|(
name|request
argument_list|,
name|resp
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getFailureDetails
specifier|public
name|List
argument_list|<
name|FailedOp
argument_list|>
name|getFailureDetails
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|Stat
name|stat
init|=
name|stats
operator|.
name|get
argument_list|(
name|operation
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|==
literal|null
operator|||
name|stat
operator|.
name|failureDetails
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|LinkedList
argument_list|<
name|FailedOp
argument_list|>
name|failedOps
init|=
name|stat
operator|.
name|failureDetails
decl_stmt|;
synchronized|synchronized
init|(
name|failedOps
init|)
block|{
name|ArrayList
argument_list|<
name|FailedOp
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|failedOps
argument_list|)
decl_stmt|;
return|return
name|ret
return|;
block|}
block|}
block|}
DECL|class|Stat
specifier|public
specifier|static
class|class
name|Stat
block|{
DECL|field|success
specifier|public
specifier|final
name|AtomicInteger
name|success
decl_stmt|;
DECL|field|errors
specifier|public
specifier|final
name|AtomicInteger
name|errors
decl_stmt|;
DECL|field|requestTime
specifier|public
specifier|final
name|Timer
name|requestTime
decl_stmt|;
DECL|field|failureDetails
specifier|public
specifier|final
name|LinkedList
argument_list|<
name|FailedOp
argument_list|>
name|failureDetails
decl_stmt|;
DECL|method|Stat
specifier|public
name|Stat
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|AtomicInteger
argument_list|()
expr_stmt|;
name|this
operator|.
name|errors
operator|=
operator|new
name|AtomicInteger
argument_list|()
expr_stmt|;
name|this
operator|.
name|requestTime
operator|=
operator|new
name|Timer
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
name|Clock
operator|.
name|defaultClock
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|failureDetails
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|FailedOp
specifier|public
specifier|static
class|class
name|FailedOp
block|{
DECL|field|req
specifier|public
specifier|final
name|ZkNodeProps
name|req
decl_stmt|;
DECL|field|resp
specifier|public
specifier|final
name|SolrResponse
name|resp
decl_stmt|;
DECL|method|FailedOp
specifier|public
name|FailedOp
parameter_list|(
name|ZkNodeProps
name|req
parameter_list|,
name|SolrResponse
name|resp
parameter_list|)
block|{
name|this
operator|.
name|req
operator|=
name|req
expr_stmt|;
name|this
operator|.
name|resp
operator|=
name|resp
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
