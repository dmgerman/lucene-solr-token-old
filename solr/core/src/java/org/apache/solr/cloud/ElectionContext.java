begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
operator|.
name|OverseerAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCmdExecutor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|RetryUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|RetryUtil
operator|.
name|RetryCmd
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|logging
operator|.
name|MDCLoggingContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateLog
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NoNodeException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NodeExistsException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Op
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|OpResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|OpResult
operator|.
name|SetDataResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_class
DECL|class|ElectionContext
specifier|public
specifier|abstract
class|class
name|ElectionContext
implements|implements
name|Closeable
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|electionPath
specifier|final
name|String
name|electionPath
decl_stmt|;
DECL|field|leaderProps
specifier|final
name|ZkNodeProps
name|leaderProps
decl_stmt|;
DECL|field|id
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|leaderPath
specifier|final
name|String
name|leaderPath
decl_stmt|;
DECL|field|leaderSeqPath
specifier|volatile
name|String
name|leaderSeqPath
decl_stmt|;
DECL|field|zkClient
specifier|private
name|SolrZkClient
name|zkClient
decl_stmt|;
DECL|method|ElectionContext
specifier|public
name|ElectionContext
parameter_list|(
specifier|final
name|String
name|coreNodeName
parameter_list|,
specifier|final
name|String
name|electionPath
parameter_list|,
specifier|final
name|String
name|leaderPath
parameter_list|,
specifier|final
name|ZkNodeProps
name|leaderProps
parameter_list|,
specifier|final
name|SolrZkClient
name|zkClient
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|coreNodeName
expr_stmt|;
name|this
operator|.
name|electionPath
operator|=
name|electionPath
expr_stmt|;
name|this
operator|.
name|leaderPath
operator|=
name|leaderPath
expr_stmt|;
name|this
operator|.
name|leaderProps
operator|=
name|leaderProps
expr_stmt|;
name|this
operator|.
name|zkClient
operator|=
name|zkClient
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{    }
DECL|method|cancelElection
specifier|public
name|void
name|cancelElection
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
if|if
condition|(
name|leaderSeqPath
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Canceling election {}"
argument_list|,
name|leaderSeqPath
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|delete
argument_list|(
name|leaderSeqPath
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoNodeException
name|e
parameter_list|)
block|{
comment|// fine
name|log
operator|.
name|info
argument_list|(
literal|"cancelElection did not find election node to remove {}"
argument_list|,
name|leaderSeqPath
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"cancelElection skipped as this context has not been initialized"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runLeaderProcess
specifier|abstract
name|void
name|runLeaderProcess
parameter_list|(
name|boolean
name|weAreReplacement
parameter_list|,
name|int
name|pauseBeforeStartMs
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|IOException
function_decl|;
DECL|method|checkIfIamLeaderFired
specifier|public
name|void
name|checkIfIamLeaderFired
parameter_list|()
block|{}
DECL|method|joinedElectionFired
specifier|public
name|void
name|joinedElectionFired
parameter_list|()
block|{}
DECL|method|copy
specifier|public
name|ElectionContext
name|copy
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"copy"
argument_list|)
throw|;
block|}
block|}
end_class
begin_class
DECL|class|ShardLeaderElectionContextBase
class|class
name|ShardLeaderElectionContextBase
extends|extends
name|ElectionContext
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|zkClient
specifier|protected
specifier|final
name|SolrZkClient
name|zkClient
decl_stmt|;
DECL|field|shardId
specifier|protected
name|String
name|shardId
decl_stmt|;
DECL|field|collection
specifier|protected
name|String
name|collection
decl_stmt|;
DECL|field|leaderElector
specifier|protected
name|LeaderElector
name|leaderElector
decl_stmt|;
DECL|field|leaderZkNodeParentVersion
specifier|private
name|Integer
name|leaderZkNodeParentVersion
decl_stmt|;
comment|// Prevents a race between cancelling and becoming leader.
DECL|field|lock
specifier|private
specifier|final
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|method|ShardLeaderElectionContextBase
specifier|public
name|ShardLeaderElectionContextBase
parameter_list|(
name|LeaderElector
name|leaderElector
parameter_list|,
specifier|final
name|String
name|shardId
parameter_list|,
specifier|final
name|String
name|collection
parameter_list|,
specifier|final
name|String
name|coreNodeName
parameter_list|,
name|ZkNodeProps
name|props
parameter_list|,
name|ZkStateReader
name|zkStateReader
parameter_list|)
block|{
name|super
argument_list|(
name|coreNodeName
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
operator|+
literal|"/leader_elect/"
operator|+
name|shardId
argument_list|,
name|ZkStateReader
operator|.
name|getShardLeadersPath
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|)
argument_list|,
name|props
argument_list|,
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|leaderElector
operator|=
name|leaderElector
expr_stmt|;
name|this
operator|.
name|zkClient
operator|=
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
try|try
block|{
operator|new
name|ZkCmdExecutor
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|getZkClientTimeout
argument_list|()
argument_list|)
operator|.
name|ensureExists
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
argument_list|,
name|zkClient
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|cancelElection
specifier|public
name|void
name|cancelElection
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|super
operator|.
name|cancelElection
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|leaderZkNodeParentVersion
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// We need to be careful and make sure we *only* delete our own leader registration node.
comment|// We do this by using a multi and ensuring the parent znode of the leader registration node
comment|// matches the version we expect - there is a setData call that increments the parent's znode
comment|// version whenever a leader registers.
name|log
operator|.
name|info
argument_list|(
literal|"Removing leader registration node on cancel: {} {}"
argument_list|,
name|leaderPath
argument_list|,
name|leaderZkNodeParentVersion
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Op
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|Op
operator|.
name|check
argument_list|(
operator|new
name|Path
argument_list|(
name|leaderPath
argument_list|)
operator|.
name|getParent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|leaderZkNodeParentVersion
argument_list|)
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|Op
operator|.
name|delete
argument_list|(
name|leaderPath
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|multi
argument_list|(
name|ops
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|nne
parameter_list|)
block|{
comment|// no problem
name|log
operator|.
name|info
argument_list|(
literal|"No leader registration node found to remove: {}"
argument_list|,
name|leaderPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|BadVersionException
name|bve
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Cannot remove leader registration node because the current registered node is not ours: {}"
argument_list|,
name|leaderPath
argument_list|)
expr_stmt|;
comment|// no problem
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|leaderZkNodeParentVersion
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No version found for ephemeral leader parent node, won't remove previous leader registration."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|runLeaderProcess
name|void
name|runLeaderProcess
parameter_list|(
name|boolean
name|weAreReplacement
parameter_list|,
name|int
name|pauseBeforeStartMs
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
comment|// register as leader - if an ephemeral is already there, wait to see if it goes away
name|String
name|parent
init|=
operator|new
name|Path
argument_list|(
name|leaderPath
argument_list|)
operator|.
name|getParent
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ZkCmdExecutor
name|zcmd
init|=
operator|new
name|ZkCmdExecutor
argument_list|(
literal|30000
argument_list|)
decl_stmt|;
name|zcmd
operator|.
name|ensureExists
argument_list|(
name|parent
argument_list|,
name|zkClient
argument_list|)
expr_stmt|;
try|try
block|{
name|RetryUtil
operator|.
name|retryOnThrowable
argument_list|(
name|NodeExistsException
operator|.
name|class
argument_list|,
literal|60000
argument_list|,
literal|5000
argument_list|,
operator|new
name|RetryCmd
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Creating leader registration node {} after winning as {}"
argument_list|,
name|leaderPath
argument_list|,
name|leaderSeqPath
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Op
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|// We use a multi operation to get the parent nodes version, which will
comment|// be used to make sure we only remove our own leader registration node.
comment|// The setData call used to get the parent version is also the trigger to
comment|// increment the version. We also do a sanity check that our leaderSeqPath exists.
name|ops
operator|.
name|add
argument_list|(
name|Op
operator|.
name|check
argument_list|(
name|leaderSeqPath
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|Op
operator|.
name|create
argument_list|(
name|leaderPath
argument_list|,
name|Utils
operator|.
name|toJSON
argument_list|(
name|leaderProps
argument_list|)
argument_list|,
name|zkClient
operator|.
name|getZkACLProvider
argument_list|()
operator|.
name|getACLsToAdd
argument_list|(
name|leaderPath
argument_list|)
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|)
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|Op
operator|.
name|setData
argument_list|(
name|parent
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OpResult
argument_list|>
name|results
decl_stmt|;
name|results
operator|=
name|zkClient
operator|.
name|multi
argument_list|(
name|ops
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|OpResult
name|result
range|:
name|results
control|)
block|{
if|if
condition|(
name|result
operator|.
name|getType
argument_list|()
operator|==
name|ZooDefs
operator|.
name|OpCode
operator|.
name|setData
condition|)
block|{
name|SetDataResult
name|dresult
init|=
operator|(
name|SetDataResult
operator|)
name|result
decl_stmt|;
name|Stat
name|stat
init|=
name|dresult
operator|.
name|getStat
argument_list|()
decl_stmt|;
name|leaderZkNodeParentVersion
operator|=
name|stat
operator|.
name|getVersion
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
assert|assert
name|leaderZkNodeParentVersion
operator|!=
literal|null
assert|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|OutOfMemoryError
condition|)
block|{
throw|throw
operator|(
name|OutOfMemoryError
operator|)
name|t
throw|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed"
argument_list|,
name|t
argument_list|)
throw|;
block|}
assert|assert
name|shardId
operator|!=
literal|null
assert|;
name|ZkNodeProps
name|m
init|=
name|ZkNodeProps
operator|.
name|fromKeyVals
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|LEADER
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
name|shardId
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|leaderProps
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|leaderProps
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkClient
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getLeaderElector
specifier|public
name|LeaderElector
name|getLeaderElector
parameter_list|()
block|{
return|return
name|leaderElector
return|;
block|}
DECL|method|getLeaderZkNodeParentVersion
name|Integer
name|getLeaderZkNodeParentVersion
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
return|return
name|leaderZkNodeParentVersion
return|;
block|}
block|}
block|}
end_class
begin_comment
comment|// add core container and stop passing core around...
end_comment
begin_class
DECL|class|ShardLeaderElectionContext
specifier|final
class|class
name|ShardLeaderElectionContext
extends|extends
name|ShardLeaderElectionContextBase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|zkController
specifier|private
specifier|final
name|ZkController
name|zkController
decl_stmt|;
DECL|field|cc
specifier|private
specifier|final
name|CoreContainer
name|cc
decl_stmt|;
DECL|field|syncStrategy
specifier|private
specifier|final
name|SyncStrategy
name|syncStrategy
decl_stmt|;
DECL|field|isClosed
specifier|private
specifier|volatile
name|boolean
name|isClosed
init|=
literal|false
decl_stmt|;
DECL|method|ShardLeaderElectionContext
specifier|public
name|ShardLeaderElectionContext
parameter_list|(
name|LeaderElector
name|leaderElector
parameter_list|,
specifier|final
name|String
name|shardId
parameter_list|,
specifier|final
name|String
name|collection
parameter_list|,
specifier|final
name|String
name|coreNodeName
parameter_list|,
name|ZkNodeProps
name|props
parameter_list|,
name|ZkController
name|zkController
parameter_list|,
name|CoreContainer
name|cc
parameter_list|)
block|{
name|super
argument_list|(
name|leaderElector
argument_list|,
name|shardId
argument_list|,
name|collection
argument_list|,
name|coreNodeName
argument_list|,
name|props
argument_list|,
name|zkController
operator|.
name|getZkStateReader
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|zkController
operator|=
name|zkController
expr_stmt|;
name|this
operator|.
name|cc
operator|=
name|cc
expr_stmt|;
name|syncStrategy
operator|=
operator|new
name|SyncStrategy
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|isClosed
operator|=
literal|true
expr_stmt|;
name|syncStrategy
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cancelElection
specifier|public
name|void
name|cancelElection
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|String
name|coreName
init|=
name|leaderProps
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
try|try
init|(
name|SolrCore
name|core
init|=
name|cc
operator|.
name|getCore
argument_list|(
name|coreName
argument_list|)
init|)
block|{
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|setLeader
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|cancelElection
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|ElectionContext
name|copy
parameter_list|()
block|{
return|return
operator|new
name|ShardLeaderElectionContext
argument_list|(
name|leaderElector
argument_list|,
name|shardId
argument_list|,
name|collection
argument_list|,
name|id
argument_list|,
name|leaderProps
argument_list|,
name|zkController
argument_list|,
name|cc
argument_list|)
return|;
block|}
comment|/*     * weAreReplacement: has someone else been the leader already?    */
annotation|@
name|Override
DECL|method|runLeaderProcess
name|void
name|runLeaderProcess
parameter_list|(
name|boolean
name|weAreReplacement
parameter_list|,
name|int
name|pauseBeforeStart
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|String
name|coreName
init|=
name|leaderProps
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
name|ActionThrottle
name|lt
decl_stmt|;
try|try
init|(
name|SolrCore
name|core
init|=
name|cc
operator|.
name|getCore
argument_list|(
name|coreName
argument_list|)
init|)
block|{
if|if
condition|(
name|core
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"SolrCore not found:"
operator|+
name|coreName
operator|+
literal|" in "
operator|+
name|cc
operator|.
name|getCoreNames
argument_list|()
argument_list|)
throw|;
block|}
name|MDCLoggingContext
operator|.
name|setCore
argument_list|(
name|core
argument_list|)
expr_stmt|;
name|lt
operator|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|getLeaderThrottle
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|lt
operator|.
name|minimumWaitBetweenActions
argument_list|()
expr_stmt|;
name|lt
operator|.
name|markAttemptingAction
argument_list|()
expr_stmt|;
name|int
name|leaderVoteWait
init|=
name|cc
operator|.
name|getZkController
argument_list|()
operator|.
name|getLeaderVoteWait
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Running the leader process for shard={} and weAreReplacement={} and leaderVoteWait={}"
argument_list|,
name|shardId
argument_list|,
name|weAreReplacement
argument_list|,
name|leaderVoteWait
argument_list|)
expr_stmt|;
comment|// clear the leader in clusterstate
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|LEADER
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
name|shardId
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|)
decl_stmt|;
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkClient
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|allReplicasInLine
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|weAreReplacement
condition|)
block|{
name|allReplicasInLine
operator|=
name|waitForReplicasToComeUp
argument_list|(
name|leaderVoteWait
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allReplicasInLine
operator|=
name|areAllReplicasParticipating
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isClosed
condition|)
block|{
comment|// Solr is shutting down or the ZooKeeper session expired while waiting for replicas. If the later,
comment|// we cannot be sure we are still the leader, so we should bail out. The OnReconnect handler will
comment|// re-register the cores and handle a new leadership election.
return|return;
block|}
try|try
init|(
name|SolrCore
name|core
init|=
name|cc
operator|.
name|getCore
argument_list|(
name|coreName
argument_list|)
init|)
block|{
if|if
condition|(
name|core
operator|==
literal|null
condition|)
block|{
name|cancelElection
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"SolrCore not found:"
operator|+
name|coreName
operator|+
literal|" in "
operator|+
name|cc
operator|.
name|getCoreNames
argument_list|()
argument_list|)
throw|;
block|}
comment|// should I be leader?
if|if
condition|(
name|weAreReplacement
operator|&&
operator|!
name|shouldIBeLeader
argument_list|(
name|leaderProps
argument_list|,
name|core
argument_list|,
name|weAreReplacement
argument_list|)
condition|)
block|{
name|rejoinLeaderElection
argument_list|(
name|core
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"I may be the new leader - try and sync"
argument_list|)
expr_stmt|;
comment|// we are going to attempt to be the leader
comment|// first cancel any current recovery
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|cancelRecovery
argument_list|()
expr_stmt|;
if|if
condition|(
name|weAreReplacement
condition|)
block|{
comment|// wait a moment for any floating updates to finish
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|success
operator|=
name|syncStrategy
operator|.
name|sync
argument_list|(
name|zkController
argument_list|,
name|core
argument_list|,
name|leaderProps
argument_list|,
name|weAreReplacement
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Exception while trying to sync"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
block|}
name|UpdateLog
name|ulog
init|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|boolean
name|hasRecentUpdates
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ulog
operator|!=
literal|null
condition|)
block|{
comment|// TODO: we could optimize this if necessary
try|try
init|(
name|UpdateLog
operator|.
name|RecentUpdates
name|recentUpdates
init|=
name|ulog
operator|.
name|getRecentUpdates
argument_list|()
init|)
block|{
name|hasRecentUpdates
operator|=
operator|!
name|recentUpdates
operator|.
name|getVersions
argument_list|(
literal|1
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|hasRecentUpdates
condition|)
block|{
comment|// we failed sync, but we have no versions - we can't sync in that case
comment|// - we were active
comment|// before, so become leader anyway
name|log
operator|.
name|info
argument_list|(
literal|"We failed sync, but we have no versions - we can't sync in that case - we were active before, so become leader anyway"
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// solrcloud_debug
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
try|try
block|{
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searchHolder
init|=
name|core
operator|.
name|getNewestSearcher
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|SolrIndexSearcher
name|searcher
init|=
name|searchHolder
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" synched "
operator|+
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|searchHolder
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error in solrcloud_debug block"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rejoinLeaderElection
argument_list|(
name|core
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|boolean
name|isLeader
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|isClosed
condition|)
block|{
try|try
block|{
comment|// we must check LIR before registering as leader
name|checkLIR
argument_list|(
name|coreName
argument_list|,
name|allReplicasInLine
argument_list|)
expr_stmt|;
name|super
operator|.
name|runLeaderProcess
argument_list|(
name|weAreReplacement
argument_list|,
literal|0
argument_list|)
expr_stmt|;
try|try
init|(
name|SolrCore
name|core
init|=
name|cc
operator|.
name|getCore
argument_list|(
name|coreName
argument_list|)
init|)
block|{
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|setLeader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|publishActiveIfRegisteredAndNotActive
argument_list|(
name|core
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"I am the new leader: "
operator|+
name|ZkCoreNodeProps
operator|.
name|getCoreUrl
argument_list|(
name|leaderProps
argument_list|)
operator|+
literal|" "
operator|+
name|shardId
argument_list|)
expr_stmt|;
comment|// we made it as leader - send any recovery requests we need to
name|syncStrategy
operator|.
name|requestRecoveries
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|isLeader
operator|=
literal|false
expr_stmt|;
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"There was a problem trying to register as the leader"
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
init|(
name|SolrCore
name|core
init|=
name|cc
operator|.
name|getCore
argument_list|(
name|coreName
argument_list|)
init|)
block|{
if|if
condition|(
name|core
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"SolrCore not found:"
operator|+
name|coreName
operator|+
literal|" in "
operator|+
name|cc
operator|.
name|getCoreNames
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|setLeader
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// we could not publish ourselves as leader - try and rejoin election
name|rejoinLeaderElection
argument_list|(
name|core
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isLeader
condition|)
block|{
comment|// check for any replicas in my shard that were set to down by the previous leader
try|try
block|{
name|startLeaderInitiatedRecoveryOnReplicas
argument_list|(
name|coreName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
comment|// don't want leader election to fail because of
comment|// an error trying to tell others to recover
block|}
block|}
block|}
else|else
block|{
name|cancelElection
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|MDCLoggingContext
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|publishActiveIfRegisteredAndNotActive
specifier|public
name|void
name|publishActiveIfRegisteredAndNotActive
parameter_list|(
name|SolrCore
name|core
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|hasRegistered
argument_list|()
condition|)
block|{
name|ZkStateReader
name|zkStateReader
init|=
name|zkController
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|zkStateReader
operator|.
name|updateClusterState
argument_list|()
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Replica
name|rep
init|=
operator|(
name|clusterState
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|clusterState
operator|.
name|getReplica
argument_list|(
name|collection
argument_list|,
name|leaderProps
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rep
operator|!=
literal|null
operator|&&
name|rep
operator|.
name|getState
argument_list|()
operator|!=
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
operator|&&
name|rep
operator|.
name|getState
argument_list|()
operator|!=
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"We have become the leader after core registration but are not in an ACTIVE state - publishing ACTIVE"
argument_list|)
expr_stmt|;
name|zkController
operator|.
name|publish
argument_list|(
name|core
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|checkLIR
specifier|public
name|void
name|checkLIR
parameter_list|(
name|String
name|coreName
parameter_list|,
name|boolean
name|allReplicasInLine
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
throws|,
name|IOException
block|{
if|if
condition|(
name|allReplicasInLine
condition|)
block|{
comment|// SOLR-8075: A bug may allow the proper leader to get marked as LIR DOWN and
comment|// if we are marked as DOWN but were able to become the leader, we remove
comment|// the DOWN entry here so that we don't fail publishing ACTIVE due to being in LIR.
comment|// We only do this if all the replicas participated in the election just in case
comment|// this was a valid LIR entry and the proper leader replica is missing.
try|try
init|(
name|SolrCore
name|core
init|=
name|cc
operator|.
name|getCore
argument_list|(
name|coreName
argument_list|)
init|)
block|{
specifier|final
name|Replica
operator|.
name|State
name|lirState
init|=
name|zkController
operator|.
name|getLeaderInitiatedRecoveryState
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|,
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCoreNodeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lirState
operator|==
name|Replica
operator|.
name|State
operator|.
name|DOWN
condition|)
block|{
comment|// We can do this before registering as leader because only setting DOWN requires that
comment|// we are already registered as leader, and here we are setting ACTIVE
comment|// The fact that we just won the zk leader election provides a quasi lock on setting this state, but
comment|// we should improve this: see SOLR-8075 discussion
name|zkController
operator|.
name|updateLeaderInitiatedRecoveryState
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|,
name|leaderProps
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|)
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|,
name|core
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
try|try
init|(
name|SolrCore
name|core
init|=
name|cc
operator|.
name|getCore
argument_list|(
name|coreName
argument_list|)
init|)
block|{
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Replica
operator|.
name|State
name|lirState
init|=
name|zkController
operator|.
name|getLeaderInitiatedRecoveryState
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|,
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCoreNodeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lirState
operator|==
name|Replica
operator|.
name|State
operator|.
name|DOWN
operator|||
name|lirState
operator|==
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The previous leader marked me "
operator|+
name|core
operator|.
name|getName
argument_list|()
operator|+
literal|" as "
operator|+
name|lirState
operator|.
name|toString
argument_list|()
operator|+
literal|" and I haven't recovered yet, so I shouldn't be the leader."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Leader Initiated Recovery prevented leadership"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
DECL|method|startLeaderInitiatedRecoveryOnReplicas
specifier|private
name|void
name|startLeaderInitiatedRecoveryOnReplicas
parameter_list|(
name|String
name|coreName
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|SolrCore
name|core
init|=
name|cc
operator|.
name|getCore
argument_list|(
name|coreName
argument_list|)
init|)
block|{
name|CloudDescriptor
name|cloudDesc
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
name|String
name|coll
init|=
name|cloudDesc
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|String
name|shardId
init|=
name|cloudDesc
operator|.
name|getShardId
argument_list|()
decl_stmt|;
name|String
name|coreNodeName
init|=
name|cloudDesc
operator|.
name|getCoreNodeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|coll
operator|==
literal|null
operator|||
name|shardId
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot start leader-initiated recovery on new leader (core="
operator|+
name|coreName
operator|+
literal|",coreNodeName="
operator|+
name|coreNodeName
operator|+
literal|") because collection and/or shard is null!"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|znodePath
init|=
name|zkController
operator|.
name|getLeaderInitiatedRecoveryZnodePath
argument_list|(
name|coll
argument_list|,
name|shardId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|replicas
init|=
literal|null
decl_stmt|;
try|try
block|{
name|replicas
operator|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|znodePath
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoNodeException
name|nne
parameter_list|)
block|{
comment|// this can be ignored
block|}
if|if
condition|(
name|replicas
operator|!=
literal|null
operator|&&
name|replicas
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|replicaCoreNodeName
range|:
name|replicas
control|)
block|{
if|if
condition|(
name|coreNodeName
operator|.
name|equals
argument_list|(
name|replicaCoreNodeName
argument_list|)
condition|)
continue|continue;
comment|// added safe-guard so we don't mark this core as down
specifier|final
name|Replica
operator|.
name|State
name|lirState
init|=
name|zkController
operator|.
name|getLeaderInitiatedRecoveryState
argument_list|(
name|coll
argument_list|,
name|shardId
argument_list|,
name|replicaCoreNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|lirState
operator|==
name|Replica
operator|.
name|State
operator|.
name|DOWN
operator|||
name|lirState
operator|==
name|Replica
operator|.
name|State
operator|.
name|RECOVERY_FAILED
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"After core={} coreNodeName={} was elected leader, a replica coreNodeName={} was found in state: "
operator|+
name|lirState
operator|.
name|toString
argument_list|()
operator|+
literal|" and needing recovery."
argument_list|,
name|coreName
argument_list|,
name|coreNodeName
argument_list|,
name|replicaCoreNodeName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ZkCoreNodeProps
argument_list|>
name|replicaProps
init|=
name|zkController
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getReplicaProps
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|,
name|coreNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicaProps
operator|!=
literal|null
operator|&&
name|replicaProps
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ZkCoreNodeProps
name|coreNodeProps
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ZkCoreNodeProps
name|p
range|:
name|replicaProps
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|Replica
operator|)
name|p
operator|.
name|getNodeProps
argument_list|()
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|replicaCoreNodeName
argument_list|)
condition|)
block|{
name|coreNodeProps
operator|=
name|p
expr_stmt|;
break|break;
block|}
block|}
name|zkController
operator|.
name|ensureReplicaInLeaderInitiatedRecovery
argument_list|(
name|cc
argument_list|,
name|collection
argument_list|,
name|shardId
argument_list|,
name|coreNodeProps
argument_list|,
name|core
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|,
literal|false
comment|/* forcePublishState */
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// core gets closed automagically
block|}
comment|// returns true if all replicas are found to be up, false if not
DECL|method|waitForReplicasToComeUp
specifier|private
name|boolean
name|waitForReplicasToComeUp
parameter_list|(
name|int
name|timeoutms
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|timeoutAt
init|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|convert
argument_list|(
name|timeoutms
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
specifier|final
name|String
name|shardsElectZkPath
init|=
name|electionPath
operator|+
name|LeaderElector
operator|.
name|ELECTION_NODE
decl_stmt|;
name|Slice
name|slices
init|=
name|zkController
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|)
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|isClosed
operator|&&
operator|!
name|cc
operator|.
name|isShutDown
argument_list|()
condition|)
block|{
comment|// wait for everyone to be up
if|if
condition|(
name|slices
operator|!=
literal|null
condition|)
block|{
name|int
name|found
init|=
literal|0
decl_stmt|;
try|try
block|{
name|found
operator|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|shardsElectZkPath
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|KeeperException
operator|.
name|SessionExpiredException
condition|)
block|{
comment|// if the session has expired, then another election will be launched, so
comment|// quit here
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"ZK session expired - cancelling election for "
operator|+
name|collection
operator|+
literal|" "
operator|+
name|shardId
argument_list|)
throw|;
block|}
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Error checking for the number of election participants"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// on startup and after connection timeout, wait for all known shards
if|if
condition|(
name|found
operator|>=
name|slices
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Enough replicas found to continue."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|cnt
operator|%
literal|40
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Waiting until we see more replicas up for shard {}: total={}"
operator|+
literal|" found={}"
operator|+
literal|" timeoutin={}ms"
argument_list|,
name|shardId
argument_list|,
name|slices
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|found
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|timeoutAt
operator|-
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|>
name|timeoutAt
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Shard not found: "
operator|+
name|shardId
operator|+
literal|" for collection "
operator|+
name|collection
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|slices
operator|=
name|zkController
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|// returns true if all replicas are found to be up, false if not
DECL|method|areAllReplicasParticipating
specifier|private
name|boolean
name|areAllReplicasParticipating
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|String
name|shardsElectZkPath
init|=
name|electionPath
operator|+
name|LeaderElector
operator|.
name|ELECTION_NODE
decl_stmt|;
name|Slice
name|slices
init|=
name|zkController
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|slices
operator|!=
literal|null
condition|)
block|{
name|int
name|found
init|=
literal|0
decl_stmt|;
try|try
block|{
name|found
operator|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|shardsElectZkPath
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|KeeperException
operator|.
name|SessionExpiredException
condition|)
block|{
comment|// if the session has expired, then another election will be launched, so
comment|// quit here
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"ZK session expired - cancelling election for "
operator|+
name|collection
operator|+
literal|" "
operator|+
name|shardId
argument_list|)
throw|;
block|}
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Error checking for the number of election participants"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|found
operator|>=
name|slices
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"All replicas are ready to participate in election."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Shard not found: "
operator|+
name|shardId
operator|+
literal|" for collection "
operator|+
name|collection
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|rejoinLeaderElection
specifier|private
name|void
name|rejoinLeaderElection
parameter_list|(
name|SolrCore
name|core
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
throws|,
name|IOException
block|{
comment|// remove our ephemeral and re join the election
if|if
condition|(
name|cc
operator|.
name|isShutDown
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Not rejoining election because CoreContainer is closed"
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"There may be a better leader candidate than us - going back into recovery"
argument_list|)
expr_stmt|;
name|cancelElection
argument_list|()
expr_stmt|;
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|doRecovery
argument_list|(
name|cc
argument_list|,
name|core
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|leaderElector
operator|.
name|joinElection
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|shouldIBeLeader
specifier|private
name|boolean
name|shouldIBeLeader
parameter_list|(
name|ZkNodeProps
name|leaderProps
parameter_list|,
name|SolrCore
name|core
parameter_list|,
name|boolean
name|weAreReplacement
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Checking if I should try and be the leader."
argument_list|)
expr_stmt|;
if|if
condition|(
name|isClosed
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Bailing on leader process because we have been closed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|weAreReplacement
condition|)
block|{
comment|// we are the first node starting in the shard - there is a configurable wait
comment|// to make sure others participate in sync and leader election, we can be leader
return|return
literal|true
return|;
block|}
if|if
condition|(
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getLastPublished
argument_list|()
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"My last published State was Active, it's okay to be the leader."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"My last published State was "
operator|+
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getLastPublished
argument_list|()
operator|+
literal|", I won't be the leader."
argument_list|)
expr_stmt|;
comment|// TODO: and if no one is a good candidate?
return|return
literal|false
return|;
block|}
block|}
end_class
begin_class
DECL|class|OverseerElectionContext
specifier|final
class|class
name|OverseerElectionContext
extends|extends
name|ElectionContext
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|zkClient
specifier|private
specifier|final
name|SolrZkClient
name|zkClient
decl_stmt|;
DECL|field|overseer
specifier|private
name|Overseer
name|overseer
decl_stmt|;
DECL|field|OVERSEER_ELECT
specifier|public
specifier|static
specifier|final
name|String
name|OVERSEER_ELECT
init|=
literal|"/overseer_elect"
decl_stmt|;
DECL|method|OverseerElectionContext
specifier|public
name|OverseerElectionContext
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|Overseer
name|overseer
parameter_list|,
specifier|final
name|String
name|zkNodeName
parameter_list|)
block|{
name|super
argument_list|(
name|zkNodeName
argument_list|,
name|OVERSEER_ELECT
argument_list|,
name|OVERSEER_ELECT
operator|+
literal|"/leader"
argument_list|,
literal|null
argument_list|,
name|zkClient
argument_list|)
expr_stmt|;
name|this
operator|.
name|overseer
operator|=
name|overseer
expr_stmt|;
name|this
operator|.
name|zkClient
operator|=
name|zkClient
expr_stmt|;
try|try
block|{
operator|new
name|ZkCmdExecutor
argument_list|(
name|zkClient
operator|.
name|getZkClientTimeout
argument_list|()
argument_list|)
operator|.
name|ensureExists
argument_list|(
name|OVERSEER_ELECT
argument_list|,
name|zkClient
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|runLeaderProcess
name|void
name|runLeaderProcess
parameter_list|(
name|boolean
name|weAreReplacement
parameter_list|,
name|int
name|pauseBeforeStartMs
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"I am going to be the leader {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
specifier|final
name|String
name|id
init|=
name|leaderSeqPath
operator|.
name|substring
argument_list|(
name|leaderSeqPath
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|ZkNodeProps
name|myProps
init|=
operator|new
name|ZkNodeProps
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
name|leaderPath
argument_list|,
name|Utils
operator|.
name|toJSON
argument_list|(
name|myProps
argument_list|)
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|pauseBeforeStartMs
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|pauseBeforeStartMs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Wait interrupted "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|overseer
operator|.
name|start
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cancelElection
specifier|public
name|void
name|cancelElection
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|super
operator|.
name|cancelElection
argument_list|()
expr_stmt|;
name|overseer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|ElectionContext
name|copy
parameter_list|()
block|{
return|return
operator|new
name|OverseerElectionContext
argument_list|(
name|zkClient
argument_list|,
name|overseer
argument_list|,
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|joinedElectionFired
specifier|public
name|void
name|joinedElectionFired
parameter_list|()
block|{
name|overseer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkIfIamLeaderFired
specifier|public
name|void
name|checkIfIamLeaderFired
parameter_list|()
block|{
comment|// leader changed - close the overseer
name|overseer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
