begin_unit
begin_package
DECL|package|org.apache.solr.spelling.suggest
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|spelling
operator|.
name|suggest
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|Dictionary
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|HighFrequencyDictionary
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|spelling
operator|.
name|SolrSpellChecker
import|;
end_import
begin_comment
comment|/**  * Factory for {@link HighFrequencyDictionary}  */
end_comment
begin_class
DECL|class|HighFrequencyDictionaryFactory
specifier|public
class|class
name|HighFrequencyDictionaryFactory
extends|extends
name|DictionaryFactory
block|{
comment|/**    * Minimum frequency of terms to consider when building the dictionary.    */
DECL|field|THRESHOLD_TOKEN_FREQUENCY
specifier|public
specifier|static
specifier|final
name|String
name|THRESHOLD_TOKEN_FREQUENCY
init|=
literal|"threshold"
decl_stmt|;
annotation|@
name|Override
DECL|method|create
specifier|public
name|Dictionary
name|create
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|SolrIndexSearcher
name|searcher
parameter_list|)
block|{
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
comment|// should not happen; implies setParams was not called
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Value of params not set"
argument_list|)
throw|;
block|}
name|String
name|field
init|=
operator|(
name|String
operator|)
name|params
operator|.
name|get
argument_list|(
name|SolrSpellChecker
operator|.
name|FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|SolrSpellChecker
operator|.
name|FIELD
operator|+
literal|" is a mandatory parameter"
argument_list|)
throw|;
block|}
name|float
name|threshold
init|=
name|params
operator|.
name|get
argument_list|(
name|THRESHOLD_TOKEN_FREQUENCY
argument_list|)
operator|==
literal|null
condition|?
literal|0.0f
else|:
operator|(
name|Float
operator|)
name|params
operator|.
name|get
argument_list|(
name|THRESHOLD_TOKEN_FREQUENCY
argument_list|)
decl_stmt|;
return|return
operator|new
name|HighFrequencyDictionary
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|field
argument_list|,
name|threshold
argument_list|)
return|;
block|}
block|}
end_class
end_unit
