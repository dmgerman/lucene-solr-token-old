begin_unit
begin_package
DECL|package|org.apache.solr.spelling
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|spelling
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|NamedListInitializedPlugin
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_comment
comment|/**  *<p>  * The QueryConverter is an abstract base class defining a method for converting  * input "raw" queries into a set of tokens for spell checking. It is used to  * "parse" the CommonParams.Q (the input query) and converts it to tokens.  *</p>  *   *<p>  * It is only invoked for the CommonParams.Q parameter, and<b>not</b> the  * "spellcheck.q" parameter. Systems that use their own query parser or those  * that find issue with the basic implementation should implement their  * own QueryConverter instead of using the provided implementation  * (SpellingQueryConverter) by overriding the appropriate methods on the  * SpellingQueryConverter and registering it in the solrconfig.xml  *</p>  *   *<p>  * Refer to<a href="http://wiki.apache.org/solr/SpellCheckComponent">SpellCheckComponent</a>  * for more details  *</p>  *   * @since solr 1.3  */
end_comment
begin_class
DECL|class|QueryConverter
specifier|public
specifier|abstract
class|class
name|QueryConverter
implements|implements
name|NamedListInitializedPlugin
block|{
DECL|field|args
specifier|private
name|NamedList
name|args
decl_stmt|;
DECL|field|analyzer
specifier|protected
name|Analyzer
name|analyzer
decl_stmt|;
comment|/**    *<p>This term is marked prohibited in the query with the minus sign.</p>    *     */
DECL|field|PROHIBITED_TERM_FLAG
specifier|public
specifier|static
specifier|final
name|int
name|PROHIBITED_TERM_FLAG
init|=
literal|16384
decl_stmt|;
comment|/**    *<p>This term is marked required in the query with the plus sign.</p>    */
DECL|field|REQUIRED_TERM_FLAG
specifier|public
specifier|static
specifier|final
name|int
name|REQUIRED_TERM_FLAG
init|=
literal|32768
decl_stmt|;
comment|/**    *<p>    * This term is directly followed by a boolean operator (AND/OR/NOT)    * and this operator differs from the prior boolean operator    * in the query (this signifies this term is likely part of a different    * query clause than the next term in the query)    *</p>    */
DECL|field|TERM_PRECEDES_NEW_BOOLEAN_OPERATOR_FLAG
specifier|public
specifier|static
specifier|final
name|int
name|TERM_PRECEDES_NEW_BOOLEAN_OPERATOR_FLAG
init|=
literal|65536
decl_stmt|;
comment|/**    *<p>    * This term exists in a query that contains boolean operators    * (AND/OR/NOT)    *</p>    */
DECL|field|TERM_IN_BOOLEAN_QUERY_FLAG
specifier|public
specifier|static
specifier|final
name|int
name|TERM_IN_BOOLEAN_QUERY_FLAG
init|=
literal|131072
decl_stmt|;
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
comment|/**    * Returns the Collection of {@link org.apache.lucene.analysis.Token}s for    *         the query. Offsets on the Token should correspond to the correct    *         offset in the origQuery    */
DECL|method|convert
specifier|public
specifier|abstract
name|Collection
argument_list|<
name|Token
argument_list|>
name|convert
parameter_list|(
name|String
name|original
parameter_list|)
function_decl|;
comment|/**    * Set the analyzer to use. Must be set before any calls to convert.    */
DECL|method|setAnalyzer
specifier|public
name|void
name|setAnalyzer
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
block|}
DECL|method|getAnalyzer
specifier|public
name|Analyzer
name|getAnalyzer
parameter_list|()
block|{
return|return
name|analyzer
return|;
block|}
block|}
end_class
end_unit
