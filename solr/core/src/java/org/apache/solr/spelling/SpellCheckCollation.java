begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.spelling
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|spelling
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_class
DECL|class|SpellCheckCollation
specifier|public
class|class
name|SpellCheckCollation
implements|implements
name|Comparable
argument_list|<
name|SpellCheckCollation
argument_list|>
block|{
DECL|field|misspellingsAndCorrections
specifier|private
name|NamedList
argument_list|<
name|String
argument_list|>
name|misspellingsAndCorrections
decl_stmt|;
DECL|field|hits
specifier|private
name|int
name|hits
decl_stmt|;
DECL|field|internalRank
specifier|private
name|int
name|internalRank
decl_stmt|;
DECL|field|collationQuery
specifier|private
name|String
name|collationQuery
decl_stmt|;
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|SpellCheckCollation
name|scc
parameter_list|)
block|{
name|int
name|c
init|=
operator|new
name|Integer
argument_list|(
name|internalRank
argument_list|)
operator|.
name|compareTo
argument_list|(
name|scc
operator|.
name|internalRank
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
return|return
name|collationQuery
operator|.
name|compareTo
argument_list|(
name|scc
operator|.
name|collationQuery
argument_list|)
return|;
block|}
return|return
name|c
return|;
block|}
DECL|method|getMisspellingsAndCorrections
specifier|public
name|NamedList
argument_list|<
name|String
argument_list|>
name|getMisspellingsAndCorrections
parameter_list|()
block|{
return|return
name|misspellingsAndCorrections
return|;
block|}
DECL|method|setMisspellingsAndCorrections
specifier|public
name|void
name|setMisspellingsAndCorrections
parameter_list|(
name|NamedList
argument_list|<
name|String
argument_list|>
name|misspellingsAndCorrections
parameter_list|)
block|{
name|this
operator|.
name|misspellingsAndCorrections
operator|=
name|misspellingsAndCorrections
expr_stmt|;
block|}
DECL|method|getHits
specifier|public
name|int
name|getHits
parameter_list|()
block|{
return|return
name|hits
return|;
block|}
DECL|method|setHits
specifier|public
name|void
name|setHits
parameter_list|(
name|int
name|hits
parameter_list|)
block|{
name|this
operator|.
name|hits
operator|=
name|hits
expr_stmt|;
block|}
DECL|method|getCollationQuery
specifier|public
name|String
name|getCollationQuery
parameter_list|()
block|{
return|return
name|collationQuery
return|;
block|}
DECL|method|setCollationQuery
specifier|public
name|void
name|setCollationQuery
parameter_list|(
name|String
name|collationQuery
parameter_list|)
block|{
name|this
operator|.
name|collationQuery
operator|=
name|collationQuery
expr_stmt|;
block|}
DECL|method|getInternalRank
specifier|public
name|int
name|getInternalRank
parameter_list|()
block|{
return|return
name|internalRank
return|;
block|}
DECL|method|setInternalRank
specifier|public
name|void
name|setInternalRank
parameter_list|(
name|int
name|internalRank
parameter_list|)
block|{
name|this
operator|.
name|internalRank
operator|=
name|internalRank
expr_stmt|;
block|}
block|}
end_class
end_unit
