begin_unit
begin_package
DECL|package|org.apache.solr.spelling.suggest.fst
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|spelling
operator|.
name|suggest
operator|.
name|fst
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|Lookup
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|analyzing
operator|.
name|FuzzySuggester
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|LevenshteinAutomata
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|spelling
operator|.
name|suggest
operator|.
name|LookupFactory
import|;
end_import
begin_comment
comment|/**  * Factory for {@link FuzzySuggester}  * @lucene.experimental  */
end_comment
begin_class
DECL|class|FuzzyLookupFactory
specifier|public
class|class
name|FuzzyLookupFactory
extends|extends
name|LookupFactory
block|{
comment|/**    * If<code>true</code>, maxEdits, minFuzzyLength, transpositions and nonFuzzyPrefix     * will be measured in Unicode code points (actual letters) instead of bytes.    */
DECL|field|UNICODE_AWARE
specifier|public
specifier|static
specifier|final
name|String
name|UNICODE_AWARE
init|=
literal|"unicodeAware"
decl_stmt|;
comment|/**    * Maximum number of edits allowed, used by {@link LevenshteinAutomata#toAutomaton(int)}    * in bytes or Unicode code points (if {@link #UNICODE_AWARE} option is set to true).    */
DECL|field|MAX_EDITS
specifier|public
specifier|static
specifier|final
name|String
name|MAX_EDITS
init|=
literal|"maxEdits"
decl_stmt|;
comment|/**    * If transpositions are allowed, Fuzzy suggestions will be computed based on a primitive     * edit operation. If it is false, it will be based on the classic Levenshtein algorithm.    * Transpositions of bytes or Unicode code points (if {@link #UNICODE_AWARE} option is set to true).    */
DECL|field|TRANSPOSITIONS
specifier|public
specifier|static
specifier|final
name|String
name|TRANSPOSITIONS
init|=
literal|"transpositions"
decl_stmt|;
comment|/**    * Length of common (non-fuzzy) prefix for the suggestions    * in bytes or Unicode code points (if {@link #UNICODE_AWARE} option is set to true).    */
DECL|field|NON_FUZZY_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|NON_FUZZY_PREFIX
init|=
literal|"nonFuzzyPrefix"
decl_stmt|;
comment|/**    * Minimum length of lookup key before any edits are allowed for the suggestions    * in bytes or Unicode code points (if {@link #UNICODE_AWARE} option is set to true).    */
DECL|field|MIN_FUZZY_LENGTH
specifier|public
specifier|static
specifier|final
name|String
name|MIN_FUZZY_LENGTH
init|=
literal|"minFuzzyLength"
decl_stmt|;
comment|/**    * File name for the automaton.    */
DECL|field|FILENAME
specifier|private
specifier|static
specifier|final
name|String
name|FILENAME
init|=
literal|"fwfsta.bin"
decl_stmt|;
annotation|@
name|Override
DECL|method|create
specifier|public
name|Lookup
name|create
parameter_list|(
name|NamedList
name|params
parameter_list|,
name|SolrCore
name|core
parameter_list|)
block|{
comment|// mandatory parameter
name|Object
name|fieldTypeName
init|=
name|params
operator|.
name|get
argument_list|(
name|AnalyzingLookupFactory
operator|.
name|QUERY_ANALYZER
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldTypeName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error in configuration: "
operator|+
name|AnalyzingLookupFactory
operator|.
name|QUERY_ANALYZER
operator|+
literal|" parameter is mandatory"
argument_list|)
throw|;
block|}
comment|// retrieve index and query analyzers for the field
name|FieldType
name|ft
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getFieldTypeByName
argument_list|(
name|fieldTypeName
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error in configuration: "
operator|+
name|fieldTypeName
operator|.
name|toString
argument_list|()
operator|+
literal|" is not defined in the schema"
argument_list|)
throw|;
block|}
name|Analyzer
name|indexAnalyzer
init|=
name|ft
operator|.
name|getIndexAnalyzer
argument_list|()
decl_stmt|;
name|Analyzer
name|queryAnalyzer
init|=
name|ft
operator|.
name|getQueryAnalyzer
argument_list|()
decl_stmt|;
comment|// optional parameters
name|boolean
name|exactMatchFirst
init|=
operator|(
name|params
operator|.
name|get
argument_list|(
name|AnalyzingLookupFactory
operator|.
name|EXACT_MATCH_FIRST
argument_list|)
operator|!=
literal|null
operator|)
condition|?
name|Boolean
operator|.
name|valueOf
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|AnalyzingLookupFactory
operator|.
name|EXACT_MATCH_FIRST
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
else|:
literal|true
decl_stmt|;
name|boolean
name|preserveSep
init|=
operator|(
name|params
operator|.
name|get
argument_list|(
name|AnalyzingLookupFactory
operator|.
name|PRESERVE_SEP
argument_list|)
operator|!=
literal|null
operator|)
condition|?
name|Boolean
operator|.
name|valueOf
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|AnalyzingLookupFactory
operator|.
name|PRESERVE_SEP
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
else|:
literal|true
decl_stmt|;
name|int
name|options
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|exactMatchFirst
condition|)
block|{
name|options
operator||=
name|FuzzySuggester
operator|.
name|EXACT_FIRST
expr_stmt|;
block|}
if|if
condition|(
name|preserveSep
condition|)
block|{
name|options
operator||=
name|FuzzySuggester
operator|.
name|PRESERVE_SEP
expr_stmt|;
block|}
name|int
name|maxSurfaceFormsPerAnalyzedForm
init|=
operator|(
name|params
operator|.
name|get
argument_list|(
name|AnalyzingLookupFactory
operator|.
name|MAX_SURFACE_FORMS
argument_list|)
operator|!=
literal|null
operator|)
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|AnalyzingLookupFactory
operator|.
name|MAX_SURFACE_FORMS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
else|:
literal|256
decl_stmt|;
name|int
name|maxGraphExpansions
init|=
operator|(
name|params
operator|.
name|get
argument_list|(
name|AnalyzingLookupFactory
operator|.
name|MAX_EXPANSIONS
argument_list|)
operator|!=
literal|null
operator|)
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|AnalyzingLookupFactory
operator|.
name|MAX_EXPANSIONS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
else|:
operator|-
literal|1
decl_stmt|;
name|boolean
name|preservePositionIncrements
init|=
name|params
operator|.
name|get
argument_list|(
name|AnalyzingLookupFactory
operator|.
name|PRESERVE_POSITION_INCREMENTS
argument_list|)
operator|!=
literal|null
condition|?
name|Boolean
operator|.
name|valueOf
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|AnalyzingLookupFactory
operator|.
name|PRESERVE_POSITION_INCREMENTS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
else|:
literal|false
decl_stmt|;
name|int
name|maxEdits
init|=
operator|(
name|params
operator|.
name|get
argument_list|(
name|MAX_EDITS
argument_list|)
operator|!=
literal|null
operator|)
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|MAX_EDITS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
else|:
name|FuzzySuggester
operator|.
name|DEFAULT_MAX_EDITS
decl_stmt|;
name|boolean
name|transpositions
init|=
operator|(
name|params
operator|.
name|get
argument_list|(
name|TRANSPOSITIONS
argument_list|)
operator|!=
literal|null
operator|)
condition|?
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|TRANSPOSITIONS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
else|:
name|FuzzySuggester
operator|.
name|DEFAULT_TRANSPOSITIONS
decl_stmt|;
name|int
name|nonFuzzyPrefix
init|=
operator|(
name|params
operator|.
name|get
argument_list|(
name|NON_FUZZY_PREFIX
argument_list|)
operator|!=
literal|null
operator|)
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|NON_FUZZY_PREFIX
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
else|:
name|FuzzySuggester
operator|.
name|DEFAULT_NON_FUZZY_PREFIX
decl_stmt|;
name|int
name|minFuzzyLength
init|=
operator|(
name|params
operator|.
name|get
argument_list|(
name|MIN_FUZZY_LENGTH
argument_list|)
operator|!=
literal|null
operator|)
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|MIN_FUZZY_LENGTH
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
else|:
name|FuzzySuggester
operator|.
name|DEFAULT_MIN_FUZZY_LENGTH
decl_stmt|;
name|boolean
name|unicodeAware
init|=
operator|(
name|params
operator|.
name|get
argument_list|(
name|UNICODE_AWARE
argument_list|)
operator|!=
literal|null
operator|)
condition|?
name|Boolean
operator|.
name|valueOf
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|UNICODE_AWARE
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
else|:
name|FuzzySuggester
operator|.
name|DEFAULT_UNICODE_AWARE
decl_stmt|;
return|return
operator|new
name|FuzzySuggester
argument_list|(
name|getTempDir
argument_list|()
argument_list|,
literal|"suggester"
argument_list|,
name|indexAnalyzer
argument_list|,
name|queryAnalyzer
argument_list|,
name|options
argument_list|,
name|maxSurfaceFormsPerAnalyzedForm
argument_list|,
name|maxGraphExpansions
argument_list|,
name|preservePositionIncrements
argument_list|,
name|maxEdits
argument_list|,
name|transpositions
argument_list|,
name|nonFuzzyPrefix
argument_list|,
name|minFuzzyLength
argument_list|,
name|unicodeAware
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|storeFileName
specifier|public
name|String
name|storeFileName
parameter_list|()
block|{
return|return
name|FILENAME
return|;
block|}
block|}
end_class
end_unit
