begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  *  */
end_comment
begin_class
DECL|class|SolrAnalyzer
specifier|public
specifier|abstract
class|class
name|SolrAnalyzer
extends|extends
name|Analyzer
block|{
DECL|field|posIncGap
name|int
name|posIncGap
init|=
literal|0
decl_stmt|;
DECL|method|setPositionIncrementGap
specifier|public
name|void
name|setPositionIncrementGap
parameter_list|(
name|int
name|gap
parameter_list|)
block|{
name|posIncGap
operator|=
name|gap
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPositionIncrementGap
specifier|public
name|int
name|getPositionIncrementGap
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|posIncGap
return|;
block|}
comment|/** wrap the reader in a CharStream, if appropriate */
annotation|@
name|Deprecated
DECL|method|charStream
specifier|public
name|Reader
name|charStream
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
return|return
name|reader
return|;
block|}
annotation|@
name|Override
DECL|method|initReader
specifier|protected
name|Reader
name|initReader
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
return|return
name|charStream
argument_list|(
name|reader
argument_list|)
return|;
block|}
block|}
end_class
end_unit
