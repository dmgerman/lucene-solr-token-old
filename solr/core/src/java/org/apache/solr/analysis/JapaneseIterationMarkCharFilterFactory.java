begin_unit
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CharStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ja
operator|.
name|JapaneseIterationMarkCharFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|AbstractAnalysisFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|CharFilterFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|MultiTermAwareComponent
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * Factory for {@link org.apache.lucene.analysis.ja.JapaneseIterationMarkCharFilter}.  *<pre class="prettyprint">  *&lt;fieldType name="text_ja" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="false"&gt;  *&lt;analyzer&gt;  *&lt;charFilter class="solr.JapaneseIterationMarkCharFilterFactory normalizeKanji="true" normalizeKana="true"/&gt;  *&lt;tokenizer class="solr.JapaneseTokenizerFactory"/&gt;  *&lt;/analyzer&gt;  *&lt;/fieldType&gt;</pre>  */
end_comment
begin_class
DECL|class|JapaneseIterationMarkCharFilterFactory
specifier|public
class|class
name|JapaneseIterationMarkCharFilterFactory
extends|extends
name|CharFilterFactory
implements|implements
name|MultiTermAwareComponent
block|{
DECL|field|NORMALIZE_KANJI_PARAM
specifier|private
specifier|static
specifier|final
name|String
name|NORMALIZE_KANJI_PARAM
init|=
literal|"normalizeKanji"
decl_stmt|;
DECL|field|NORMALIZE_KANA_PARAM
specifier|private
specifier|static
specifier|final
name|String
name|NORMALIZE_KANA_PARAM
init|=
literal|"normalizeKana"
decl_stmt|;
DECL|field|normalizeKanji
specifier|private
name|boolean
name|normalizeKanji
init|=
literal|true
decl_stmt|;
DECL|field|normalizeKana
specifier|private
name|boolean
name|normalizeKana
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
DECL|method|create
specifier|public
name|CharStream
name|create
parameter_list|(
name|CharStream
name|input
parameter_list|)
block|{
return|return
operator|new
name|JapaneseIterationMarkCharFilter
argument_list|(
name|input
argument_list|,
name|normalizeKanji
argument_list|,
name|normalizeKana
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|normalizeKanji
operator|=
name|getBoolean
argument_list|(
name|NORMALIZE_KANJI_PARAM
argument_list|,
name|JapaneseIterationMarkCharFilter
operator|.
name|NORMALIZE_KANJI_DEFAULT
argument_list|)
expr_stmt|;
name|normalizeKana
operator|=
name|getBoolean
argument_list|(
name|NORMALIZE_KANA_PARAM
argument_list|,
name|JapaneseIterationMarkCharFilter
operator|.
name|NORMALIZE_KANA_DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMultiTermComponent
specifier|public
name|AbstractAnalysisFactory
name|getMultiTermComponent
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
end_class
end_unit
